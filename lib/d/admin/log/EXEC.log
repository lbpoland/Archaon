Thu Aug  7 13:02:55 2003 - pinkfish: return 2867 / 60;
Mon Mar 26 04:24:33 2018 - quixadhal: int u; return "/net/intermud3/services"->getColorDayTime(u,u,u,1);
Mon Mar 26 04:24:44 2018 - quixadhal: int u; return "/net/intermud3/services"->getColorDayTime(u,u,u,1);
Mon Mar 26 04:27:53 2018 - quixadhal: int u; return "/net/intermud3/services"->getColorChanName("imud_gossip", "[", "]");
Mon Mar 26 04:28:02 2018 - quixadhal: int u; return "/net/intermud3/services"->getColorChanName("intergossip", "[", "]");
Mon Mar 26 04:29:26 2018 - quixadhal: int u; return "/net/intermud3/services"->getColorChannelName("intergossip", "[", "]");
Mon Mar 26 04:49:50 2018 - quixadhal: return CHAT_D;
Mon Mar 26 06:30:18 2018 - quixadhal: "/net/intermud3/services"->setSpeakerColor("urlbot", "%^USER_BOLD%^WHITE%^USER_");
Mon Mar 26 06:32:11 2018 - quixadhal: return "/net/intermud3/services"->showSpeakerColors();
Mon Mar 26 06:33:52 2018 - quixadhal: return "%^USER_RED%^fooooo%^USER_RESET%^";
Mon Mar 26 06:39:48 2018 - quixadhal: return "/net/intermud3/services"->mapSpeakerColors();
Mon Mar 26 06:58:21 2018 - quixadhal: return "/net/intermud3/services"->mapSpeakerColors();
Mon Mar 26 08:32:58 2018 - quixadhal: string url_regexp = ".*(blah).*"; mixed *urls = regexp(explode("testblahfootest", "\n"), url_regexp, 1); return urls;
Mon Mar 26 08:37:09 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootest", "\n"), url_regexp, 1); return urls;
Mon Mar 26 08:37:24 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah", "\n"), url_regexp, 1); return urls;
Mon Mar 26 08:37:32 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah", "\n"), url_regexp, 2); return urls;
Mon Mar 26 08:37:36 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah", "\n"), url_regexp, 0); return urls;
Mon Mar 26 08:37:40 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah", "\n"), url_regexp, 3); return urls;
Mon Mar 26 08:41:13 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah\ntest\nblahtest\n", "\n"), url_regexp, 3); return urls;
Mon Mar 26 08:41:26 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = regexp(explode("testblahfootestblah\ntest\nblahtest\n", "\n"), url_regexp, 1); return urls;
Mon Mar 26 08:41:52 2018 - quixadhal: string url_regexp = ".*(blah).*"; mixed *urls = regexp(explode("testblahfootestblah\ntest\nblahtest\n", "\n"), url_regexp, 1); return urls;
Mon Mar 26 08:42:40 2018 - quixadhal: return pcre_version();
Mon Mar 26 08:44:06 2018 - quixadhal: string url_regexp = ".*(blah).*"; mixed *urls = pcre_extract("testblahfootestblah\ntest\nblahtest\n", url_regexp); return urls;
Mon Mar 26 08:44:34 2018 - quixadhal: string url_regexp = "(blah)"; mixed *urls = pcre_extract("testblahfootestblah\ntest\nblahtest\n", url_regexp); return urls;
Mon Mar 26 08:44:46 2018 - quixadhal: string url_regexp = "(blah)/g"; mixed *urls = pcre_extract("testblahfootestblah\ntest\nblahtest\n", url_regexp); return urls;
Mon Mar 26 08:55:43 2018 - quixadhal: url_regexp = "(https?://[0-9A-Za-z_\.-]+(?:\.[0-9A-Za-z_\.-]+)+(?:\:[0-9]+)?[0-9A-Za-z_\-\.\~\:\/\?\#[\\]\@\!\$\&\'\(\)\*\+\,\;\=\%]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 08:56:08 2018 - quixadhal: string url_regexp = "(https?://[0-9A-Za-z_\.-]+(?:\.[0-9A-Za-z_\.-]+)+(?:\:[0-9]+)?[0-9A-Za-z_\-\.\~\:\/\?\#[\\]\@\!\$\&\'\(\)\*\+\,\;\=\%]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 08:56:46 2018 - quixadhal: string url_regexp = "(https?://[0-9A-Za-z_.-]+(?:.[0-9A-Za-z_.-]+)+(?:\:[0-9]+)?[0-9A-Za-z_\-\.\~\:\/\?\#[\\]\@\!\$\&\'\(\)\*\+\,\;\=\%]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 08:57:47 2018 - quixadhal: string url_regexp = "(https?://[0-9A-Za-z_.-]+(?:.[0-9A-Za-z_.-]+)+(?::[0-9]+)?[0-9A-Za-z_.~:/\?#[\\]@!$&'\(\)\*\+,;=%-]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:00:00 2018 - quixadhal: string url_regexp = "(https?://[^\s]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:00:10 2018 - quixadhal: string url_regexp = "(https?://[^ ]+)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:00:22 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:01:11 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)([ ]|$)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:01:18 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("blah https://www.youtube.com/watch?v=whhTjySxxYE blah", url_regexp);
Mon Mar 26 09:01:41 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("blah foo bar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:02:41 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:02:58 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:03:27 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract(explode("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", "\n"), url_regexp);
Mon Mar 26 09:03:47 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:03:57 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("tp://blah blah foo\nbar tps://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:07:01 2018 - quixadhal: string url_regexp = "((https?://[^ ]+?)(?:[ ]|$))+"; return pcre_extract("tp://blah blah foo\nbar tps://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:07:11 2018 - quixadhal: string url_regexp = "((https?://[^ ]+?)(?:[ ]|$))+"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:07:38 2018 - quixadhal: string url_regexp = "((https?://[^ ]+?)(?:[ ]|$))*"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:08:00 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)*"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:08:08 2018 - quixadhal: string url_regexp = "(https?://[^ ]+)*"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:08:26 2018 - quixadhal: string url_regexp = "((https?://[^ ]+).*)*"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:08:41 2018 - quixadhal: string url_regexp = "(?:(https?://[^ ]+).*)*"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:10:29 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("tp://blah blah foo\nbar tps://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:10:39 2018 - quixadhal: string url_regexp = "(https?://[^ ]+?)(?:[ ]|$)"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:10:53 2018 - quixadhal: string url_regexp = "(?:(https?://[^ ]+?)(?:[ ]|$))+"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:11:04 2018 - quixadhal: string url_regexp = "(?:.*?(https?://[^ ]+?)(?:[ ]|$))+"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 09:11:13 2018 - quixadhal: string url_regexp = "(?:.*(https?://[^ ]+?)(?:[ ]|$))+"; return pcre_extract("http://blah blah foo\nbar https://www.youtube.com/watch?v=whhTjySxxYE blah foo", url_regexp);
Mon Mar 26 17:15:18 2018 - quixadhal: return strlen("/secure/cmds");
Mon Mar 26 17:15:31 2018 - quixadhal: return strlen("/secure/rcs_handler");
Mon Mar 26 17:15:42 2018 - quixadhal: return strlen("/net/intermud3/");
Mon Mar 26 19:39:51 2018 - quixadhal: return replace("hello       fool blah", "x", "y");
Tue Mar 27 07:52:07 2018 - quixadhal: string x = "hello\r\n"; return x;
Tue Mar 27 07:52:41 2018 - quixadhal: string x = "hello\r\n"; if(x[<1] == "\n") x = x[0..<1]; return x;
Tue Mar 27 07:53:00 2018 - quixadhal: string x = "hello\r\n"; if(x[<1..<1] == "\n") x = x[0..<1]; return x;
Tue Mar 27 07:53:04 2018 - quixadhal: string x = "hello\r\n"; if(x[<1..<1] == "\n") x = x[0..<2]; return x;
Tue Mar 27 08:02:05 2018 - quixadhal: string x = "hello\r\n"; if(x[<1..<1] == "\n") x = x[0..<2]; return sprintf("%O\n", x);
Tue Mar 27 08:02:28 2018 - quixadhal: string x = "hello\r\n"; if(x[<1..<1] == "\n") x = x[0..<2]; return sprintf("%O", x);
Tue Mar 27 08:02:39 2018 - quixadhal: string x = "hello\r\n"; if(x[<1..<1] == "\n") x = x[0..<2]; return sprintf("%s", x);
Tue Mar 27 08:02:57 2018 - quixadhal: string x = "hello\n\n"; if(x[<1..<1] == "\n") x = x[0..<2]; return sprintf("%O", x);
Tue Mar 27 08:05:56 2018 - quixadhal: string x = "hello\r\n"; mixed *y = explode(x, ""); return sprintf("%O", y);
Tue Mar 27 08:48:34 2018 - quixadhal: return fix_string("test       foo", 80, 4);
Tue Mar 27 08:48:47 2018 - quixadhal: return "/global/event"->fix_string("test       foo", 80, 4);
Tue Mar 27 08:48:54 2018 - quixadhal: return "/global/events"->fix_string("test       foo", 80, 4);
Tue Mar 27 09:43:10 2018 - quixadhal: return this_player()->fix_string("test       foo", 80, 4);
Tue Mar 27 09:43:35 2018 - quixadhal: return this_player()->fix_string("-- %s --", 80, 4, 0, "this   booo");
Tue Mar 27 09:43:53 2018 - quixadhal: return this_player()->fix_string("-- %s --", 20, 4, 0, "this   booo  blaaaaaaaah foo foo f       f");
Tue Mar 27 21:55:14 2018 - quixadhal: return this_player()->event_intermud_tell(this_player(), "foo@barmud", "test message", "wiley");
Tue Mar 27 21:55:27 2018 - quixadhal: return this_player()->event_intermud_tell(this_player(), "foo@barmud", "test      message", "wiley");
Tue Mar 27 22:15:27 2018 - quixadhal: return event(this_player(), "intermud_tell", "foo@barmud", "test     message", "wiley");
Tue Mar 27 22:18:56 2018 - quixadhal: return efun::event(this_player(), "intermud_tell", "foo@barmud", "test     message", "wiley");
Tue Mar 27 22:35:09 2018 - quixadhal: return "/net/intermud3/services"->eventSendChannel("test@testymud", "wiley", "test      foo");
Tue Mar 27 22:35:38 2018 - quixadhal: return "/net/intermud3/services"->eventSendChannel("test", "wiley", "test      foo");
Tue Mar 27 22:36:34 2018 - quixadhal: return "/net/intermud3/services"->eventSendChannel("Quixadhal", "wiley", "test      foo");
Tue Mar 27 22:36:50 2018 - quixadhal: return "/net/intermud3/services"->eventSendChannel("Quixadhal", "wileymud", "test      foo");
Tue Mar 27 22:47:21 2018 - quixadhal: return this_player()->new_parser("echo hello         fool");
Tue Mar 27 22:53:22 2018 - quixadhal: return explode("hello       fool", " ");
Tue Mar 27 22:53:35 2018 - quixadhal: return implode(explode("hello       fool", " "), " ");
Tue Mar 27 22:53:39 2018 - quixadhal: return implode(explode("   hello       fool", " "), " ");
Tue Mar 27 22:55:10 2018 - quixadhal: return implode(explode("   hello       fool     ", " "), " ");
Tue Mar 27 22:56:08 2018 - quixadhal: string *foo = explode("   hello     fool   ", " "); return implode(foo[1..], " ");
Tue Mar 27 23:06:10 2018 - quixadhal: string *foo = explode("   hello     fool   ", " ") - ({ "", 0 }); return implode(foo[1..], " ");
Tue Mar 27 23:06:16 2018 - quixadhal: string *foo = explode("   hello     fool   ", " ") - ({ "", 1 }); return implode(foo[1..], " ");
Tue Mar 27 23:06:26 2018 - quixadhal: string *foo = explode("   hello     fool   ", " ") - ({ 0 }); return implode(foo[1..], " ");
Wed Mar 28 03:04:55 2018 - quixadhal: write("hello\r\n");
Wed Mar 28 03:04:59 2018 - quixadhal: write("hello\n");
Wed Mar 28 03:05:52 2018 - quixadhal: write(sprintf("%c%c%c Sent\n", 255, 253, 31));
Sun Apr  1 08:56:04 2018 - quixadhal: mapping blah = ([ ]); return blah;
Sun Apr  1 08:56:21 2018 - quixadhal: mapping blah = ([ ]); return blah["x"];
Sun Apr  1 08:56:39 2018 - quixadhal: mapping blah = ([ ]); return ({ blah["x"], blah });
Sun Apr  1 08:57:06 2018 - quixadhal: mapping blah = ([ ]); return ({ blah["x"], blah, blah["x"] ? 1 : 0 });
Sun Apr  1 08:57:44 2018 - quixadhal: mapping blah = ([ ]); if(blah["x"]) return "true?";
Tue Apr  3 02:25:25 2018 - quixadhal: return mud_name();
Tue Apr  3 03:09:08 2018 - quixadhal: return "services"->getUrlData();
Tue Apr  3 03:09:17 2018 - quixadhal: return "/net/intermud3/services"->getUrlData();
Tue Apr  3 03:13:19 2018 - quixadhal: return word_ordinal(3821);
Tue Apr  3 03:14:09 2018 - quixadhal: return ordinal(31);
Tue Apr  3 03:14:11 2018 - quixadhal: return ordinal(0);
Tue Apr  3 03:14:16 2018 - quixadhal: return ordinal(10);
Mon Apr  9 21:01:02 2018 - quixadhal: return explode("blah foo      bar fap ". " ");
Mon Apr  9 21:01:13 2018 - quixadhal: return explode("blah foo      bar fap ", " ");
Mon Apr  9 21:01:22 2018 - quixadhal: return rexplode("blah foo      bar fap ", " ");
Mon Apr  9 21:05:05 2018 - quixadhal: return explode("  blah foo      bar fap  ", " ");
Mon Apr  9 21:05:15 2018 - quixadhal: return explode("       blah foo      bar fap  ", " ");
Mon Apr  9 21:05:20 2018 - quixadhal: return explode("       blah foo      bar fap       ", " ");
Mon Apr  9 21:05:58 2018 - quixadhal: return efun::explode("       blah foo      bar fap       ", " ");
Mon Apr  9 21:08:58 2018 - quixadhal: return explode("   blah foo   bar fap   ", " ");
Mon Apr  9 21:22:05 2018 - quixadhal: return explode("", " ");
Mon Apr  9 21:22:32 2018 - quixadhal: return implode( ({ }), " ");
Mon Apr  9 21:23:55 2018 - quixadhal: return "   hello"[0];
Mon Apr  9 21:25:08 2018 - quixadhal: string s = "   hello"; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i] != 32) return i; }; return -1;
Mon Apr  9 21:25:19 2018 - quixadhal: string s = "h ello"; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i] != 32) return i; }; return -1;
Mon Apr  9 21:25:29 2018 - quixadhal: string s = "    "; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i] != 32) return i; }; return -1;
Mon Apr  9 21:28:52 2018 - quixadhal: string s = " foo"; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i] != 32) return i; }; return -1;
Mon Apr  9 21:29:04 2018 - quixadhal: string s = "    foo"; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i] != 32) return i; }; return -1;
Mon Apr  9 21:33:02 2018 - quixadhal: string s = "    foo"; int i = 0; for(i = 0; i < strlen(s); i++) { if(s[i..i] != " ") return i; }; return -1;
Mon Apr  9 21:34:05 2018 - quixadhal: return explode("   foo", "");
Mon Apr  9 21:35:03 2018 - quixadhal: return explode("   foo  bar ", "");
Mon Apr  9 21:38:37 2018 - quixadhal: return rexplode("   foo  bar   ", " ");
Mon Apr  9 21:38:51 2018 - quixadhal: return rexplode("   foo   bar   ", " ");
Mon Apr  9 21:40:16 2018 - quixadhal: return rexplode("   foo   bar   ", " ");
Mon Apr  9 21:40:23 2018 - quixadhal: return rexplode("foo   bar   ", " ");
Mon Apr  9 21:40:26 2018 - quixadhal: return rexplode(" foo   bar   ", " ");
Mon Apr  9 21:40:41 2018 - quixadhal: return rexplode("  foo   bar   ", " ");
Mon Apr  9 21:43:10 2018 - quixadhal: return implode(rexplode("   foo   bar   ", " "), " ");
Mon Apr  9 22:07:48 2018 - quixadhal: int i = 3; string s = "hello"; return s[<1..<1];
Mon Apr  9 22:07:57 2018 - quixadhal: int i = 3; string s = "hello"; return s[<i..<i];
Mon Apr  9 22:08:12 2018 - quixadhal: int i = 3; string s = "hello"; return s[<(i-1)..<i];
Mon Apr  9 22:08:16 2018 - quixadhal: int i = 3; string s = "hello"; return s[<(i+1)..<i];
Mon Apr  9 22:08:41 2018 - quixadhal: int i = 3; string s = "hello"; return s[<2..<1];
Mon Apr  9 22:10:40 2018 - quixadhal: string s = "   test   foo   "; return implode(rexplode(s, " "), " ");
Mon Apr  9 22:11:06 2018 - quixadhal: string s = "   test   foo   "; return rexplode(s, " ");
Mon Apr  9 22:11:51 2018 - quixadhal: string s = "   test   foo   "; return rexplode(s, " ");
Mon Apr  9 22:13:26 2018 - quixadhal: string s =     test   foo   "; int l = strlen(s); string d = " "; int dl = strlen(d); return s[<(dl+1)..<1];
Mon Apr  9 22:13:47 2018 - quixadhal: string s = "   test   foo   "; int l = strlen(s); string d = " "; int dl = strlen(d); return s[<(dl+1)..<1];
Mon Apr  9 22:14:55 2018 - quixadhal: string s = "   test   foo   "; int l = strlen(s); string d = " "; int dl = strlen(d); return s[<(dl)..<1];
Mon Apr  9 22:15:15 2018 - quixadhal: string s = "   test   foo   "; return rexplode(s, " ");
Mon Apr  9 22:15:20 2018 - quixadhal: string s = "   test   foo   "; return rexplode(s, "  ");
Mon Apr  9 22:16:04 2018 - quixadhal: string s = "   test   foo   "; d = " "; return implode(rexplode(s, d), d);
Mon Apr  9 22:16:11 2018 - quixadhal: string s = "   test   foo   "; string d = " "; return implode(rexplode(s, d), d);
Mon Apr  9 22:16:46 2018 - quixadhal: string s = "   test   foo   "; string d = " "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return t;
Mon Apr  9 22:16:53 2018 - quixadhal: string s = "   test   foo   "; string d = "  "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return t;
Mon Apr  9 22:17:07 2018 - quixadhal: string s = "   test   foo   "; string d = "  "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:20:59 2018 - quixadhal: string s = "   test   foo   "; string d = "  "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:24:54 2018 - quixadhal: string s = "   test   foo   "; string d = "  "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:25:02 2018 - quixadhal: string s = "   test   foo   "; string d = " "; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:25:08 2018 - quixadhal: string s = "   test   foo   "; string d = ""; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:25:13 2018 - quixadhal: string s = "   test   foo   "; string d = "x"; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:31:57 2018 - quixadhal: string s = "___test___foo___"; string d = "_"; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Mon Apr  9 22:32:12 2018 - quixadhal: string s = "___test___foo___"; string d = "__"; string t = implode(rexplode(s, d), d); if(t == s) return "yes"; else return ({  s, t });
Tue Apr 10 01:04:06 2018 - quixadhal: string *ab = ({ "", "hello", "" }); while(sizeof(ab) > 1 && ab[0] == "") { ab = ab[1..]; }; return ab;
Tue Apr 10 01:04:15 2018 - quixadhal: string *ab = ({ "", "", "" }); while(sizeof(ab) > 1 && ab[0] == "") { ab = ab[1..]; }; return ab;
Tue Apr 10 01:04:29 2018 - quixadhal: string *ab = ({ "", "", "" }); while(sizeof(ab) >= 1 && ab[0] == "") { ab = ab[1..]; }; return ab;
Tue Apr 10 01:04:37 2018 - quixadhal: string *ab = ({ "", "hi", "" }); while(sizeof(ab) >= 1 && ab[0] == "") { ab = ab[1..]; }; return ab;
Tue Apr 17 11:50:37 2018 - quixadhal: return 0 == -0 ? "yes" : "no";
Tue Apr 17 11:54:18 2018 - quixadhal: return 0 == -0 ? "yes" : "no";
Sun May 20 13:19:34 2018 - quixadhal: return 1;
Sun May 20 13:20:03 2018 - quixadhal: map foo = ([ "hello" : 3 ]); return foo;
Sun May 20 13:20:11 2018 - quixadhal: mapping foo = ([ "hello" : 3 ]); return foo;
Sun May 20 13:20:22 2018 - quixadhal: mapping foo = ([ "hello" : 3 ]); map_delete(foo, "hello); return foo;
Sun May 20 13:20:45 2018 - quixadhal: mapping foo = ([ "hello" : 3 ]); map_delete(foo, "hello"); return foo;
Sun May 20 13:20:59 2018 - quixadhal: mapping foo = ([ "hello" : 3 ]); map_delete(foo, "hah"); return foo;
Sun May 20 13:25:10 2018 - quixadhal: string *foo = explode(" ", "hello idiot fool dork"); return foo;
Sun May 20 13:25:18 2018 - quixadhal: string *foo = explode("hello idiot fool dork", " "); return foo;
Sun May 20 13:25:24 2018 - quixadhal: string *foo = explode("hello idiot fool dork", " "); return foo[1..];
Sun May 20 13:31:35 2018 - quixadhal: string *foo = explode("hello idiot fool dork", " "); return implode(foo[1..], " ");
Sun May 20 14:08:46 2018 - quixadhal: return "fjdkjfldjsklfjdslkfjslkjflks"[0..10];
Sun May 20 14:14:34 2018 - quixadhal: return "hello"[0..10];
Sun May 20 14:18:37 2018 - quixadhal: return sprintf("%:10s", "hello");
Sun May 20 14:18:41 2018 - quixadhal: return sprintf("%-:10s", "hello");
Sun May 20 14:18:50 2018 - quixadhal: return sprintf("%-:10s", "hellojfkdsjfldjslkfds");
Sun May 20 15:08:33 2018 - quixadhal: return strip_colours("%^GREEN%^foo%^RESET%^bar");
Sun May 20 15:08:57 2018 - quixadhal: return terminal_colours("%^GREEN%^foo%^RESET%^bar", ([]));
Sun May 20 15:09:13 2018 - quixadhal: return terminal_colour("%^GREEN%^foo%^RESET%^bar", ([]));
Sun May 20 15:10:03 2018 - quixadhal: return strlen(strip_colours("%^GREEN%^foo%^RESET%^bar"));
Sun May 20 15:10:15 2018 - quixadhal: return strip_colours("%^GREEN%^foo%^RESET%^bar");
Sun May 20 15:10:29 2018 - quixadhal: return explode("", strip_colours("%^GREEN%^foo%^RESET%^bar"));
Sun May 20 15:10:38 2018 - quixadhal: return explode(strip_colours("%^GREEN%^foo%^RESET%^bar"), "");
Tue Jun 19 20:40:21 2018 - quixadhal: return users();
Sat Jun 23 16:47:41 2018 - quixadhal: return query_num(9000);
Sat Jun 23 16:47:53 2018 - quixadhal: return query_num(8726771);
Sat Jun 23 16:47:55 2018 - quixadhal: return query_num(872677);
Sat Jun 23 16:47:57 2018 - quixadhal: return query_num(87267);
Sat Jun 23 18:01:22 2018 - quixadhal: return query_japan_num(63250, 0);
Sat Jun 23 18:01:25 2018 - quixadhal: return query_japan_num(63250, 1);
Sat Aug 18 11:58:59 2018 - quixadhal: return hash("md5", "hello");
Sat Aug 18 12:12:18 2018 - quixadhal: return "hello";
Sat Aug 18 12:12:55 2018 - quixadhal: return efun::hash("md5", "hello");
Sat Aug 18 12:13:08 2018 - quixadhal: return hash("md5", "hello");
Sat Aug 18 12:13:17 2018 - quixadhal: return md5("hello");
Sat Aug 18 12:13:24 2018 - quixadhal: return hash("sha256", "hello");
Sat Aug 18 12:23:42 2018 - quixadhal: return md5("hello");
Sat Aug 18 12:23:47 2018 - quixadhal: return sha256("hello");
Tue Nov 27 03:12:12 2018 - quixadhal: return 1;
Tue Nov 27 03:12:29 2018 - quixadhal: return member_array( 1, ({ 0, 0, 1, 0 }) );
Tue Nov 27 03:13:24 2018 - quixadhal: return member_array( (: $1 == 3 :), ({ 0, 3, 1, 0 }) );
Tue Nov 27 03:16:43 2018 - quixadhal: return member_array( (: $1 == 1 :), ({ 0, 3, 1, 0 }) );
Tue Nov 27 03:16:48 2018 - quixadhal: return member_array( (: $1 :), ({ 0, 3, 1, 0 }) );
Tue Nov 27 03:21:00 2018 - quixadhal: int fblah(int x) { return (x == 3); }; return member_array(fblah, ({ 0, 3, 1, 0 }) );
Tue Nov 27 03:21:21 2018 - quixadhal: fblah(int x) { return (x == 3); }; return member_array(fblah, ({ 0, 3, 1, 0 }) );
Wed Nov 28 11:57:35 2018 - quixadhal: write(sprintf("%c#8", 0x98));
Wed Nov 28 11:57:51 2018 - quixadhal: return sprintf("%c#8", 0x98);
Wed Nov 28 12:01:20 2018 - quixadhal: return sprintf("%c%d;%dr", 0x98, 10, 13);
Wed Nov 28 12:01:51 2018 - quixadhal: return sprintf("\"%c%d;%dr\"\n", 0x98, 10, 13);
Mon Dec  3 17:48:19 2018 - quixadhal: return 2721198330 + 3878210273
Tue Dec  4 12:36:52 2018 - quixadhal: return crc32('fjdkfjklsjfljdsklfjsklfjewiorjewiorfwej');
Tue Dec  4 12:37:20 2018 - quixadhal: return crc32("fjdkfjklsjfljdsklfjsklfjewiorjewiorfwej");
Tue Dec  4 12:37:36 2018 - quixadhal: return sprintf("%08x", crc32("fjdkfjklsjfljdsklfjsklfjewiorjewiorfwej"));
Tue Dec  4 14:33:56 2018 - quixadhal: return SERVICES_D->getUrlData();
Tue Dec  4 14:34:13 2018 - quixadhal: return SERVICE_D->getUrlData();
Tue Dec  4 14:34:33 2018 - quixadhal: return SERVICES_D;
Tue Dec  4 14:35:04 2018 - quixadhal: return "/net/intermud3/services"->getUrlData();
Fri Dec  7 19:39:36 2018 - quixadhal: return ([ "hello":"foo", "pfft":"argh" ]);
Fri Dec  7 19:39:47 2018 - quixadhal: return sizeof(([ "hello":"foo", "pfft":"argh" ]));
Fri Dec  7 19:39:58 2018 - quixadhal: return sizeof(([ ]));
Fri Dec  7 19:50:30 2018 - quixadhal: return ({ 1, 2, 3 });
Fri Dec  7 19:50:35 2018 - quixadhal: return ({ 1, 2, 3 })[0];
Fri Dec  7 19:50:39 2018 - quixadhal: return ({ 1, 2, 3 })[<1];
Sat Dec  8 01:57:48 2018 - quixadhal: return ({ 1,2,3,4,5,6 })[<3 .. <1];
Sat Dec  8 01:57:52 2018 - quixadhal: return ({ 1,2,3,4,5,6 })[<2 .. <1];
Sat Dec  8 02:02:33 2018 - quixadhal: return ({ 1,2,3,4,5,6 })[<1 .. <1];
Sat Dec  8 02:02:47 2018 - quixadhal: return ({ 1,2 })[<1 .. <1];
Sat Dec  8 02:02:50 2018 - quixadhal: return ({ 1,2 })[<4 .. <1];
Sat Dec  8 02:42:29 2018 - quixadhal: return ({ 1,2 })[<1 .. <0];
Sat Dec  8 02:42:36 2018 - quixadhal: return ({ 1,2 })[<1 .. <1];
Sat Dec  8 02:42:39 2018 - quixadhal: return ({ 1,2 })[<2 .. <1];
Sat Dec  8 02:42:42 2018 - quixadhal: return ({ 1,2 })[<2 .. <0];
Sat Dec  8 02:45:05 2018 - quixadhal: return ({ 1,2,3,4,5,6,7,8,9,10,11,12 })[<2 .. <0];
Sat Dec  8 02:45:08 2018 - quixadhal: return ({ 1,2,3,4,5,6,7,8,9,10,11,12 })[<2 .. <1];
Sat Dec  8 02:45:12 2018 - quixadhal: return ({ 1,2,3,4,5,6,7,8,9,10,11,12 })[<10 .. <1];
Sat Dec  8 02:45:22 2018 - quixadhal: return ({ 1,2,3,4,5,6,7,8,9,10,11,12 })[<10 .. <0];
Sat Dec  8 02:58:13 2018 - quixadhal: xx = 10; yy = ({ 1,2,3,4,5,6,7,8,9,10,11,12,13 }); foreach( int zz in yy[<xx, <1] ) { aa += sprintf("%d", zz); }; return aa;
Sat Dec  8 02:58:30 2018 - quixadhal: string aa = ""; int xx = 10; int yy = ({ 1,2,3,4,5,6,7,8,9,10,11,12,13 }); foreach( int zz in yy[<xx, <1] ) { aa += sprintf("%d", zz); }; return aa;
Sat Dec  8 05:00:24 2018 - quixadhal: return undef;
Sat Dec  8 05:00:30 2018 - quixadhal: return nil;
Sat Dec  8 05:00:34 2018 - quixadhal: return null;
Sat Dec  8 05:01:23 2018 - quixadhal: int x; return x;
Sat Dec  8 05:01:34 2018 - quixadhal: string x; return x;
Sat Dec  8 05:02:01 2018 - quixadhal: string x; return (undefinedp(x) ? "undef" : x);
Sat Dec  8 05:02:08 2018 - quixadhal: int x; return (undefinedp(x) ? "undef" : x);
Sat Dec  8 05:02:22 2018 - quixadhal: int x; return (undefinedp(x) ? 1 : x);
