#/obj/handlers/autodoc/autodoc_file.c
public_functions (["do_create_motion":({({"int",}),({({"string",}),"type",}),(["main":({"This method creates a new rule.",}),"param":({"type the type of the new rule",}),"return":({"1 on success, 0 on failure",}),]),}),"do_transmogrify_current_rule":({({"int",}),({({"int",}),"num",({"string",}),"new_type",}),(["main":({"This method transmogrifies a current rule.",}),"param":({"num the number of the current rule",}),"return":({"1 on success, 0 on failure",}),]),}),"do_vote_on":({({"int",}),({({"int",}),"num",({"string",}),"vote",}),(["main":({"This method will handle voting on the specific new nomic rule.",}),"param":({"num the rule number to vote on","vote their vote",}),"return":({"1 on success, 0 on failure",}),]),}),"do_amend_current_rule":({({"int",}),({({"int",}),"num",}),(["main":({"This method adds an amendment to a current rule.",}),"param":({"num the number of the current rule",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_motions":({({"int",}),({({"int",}),"brief",}),(["main":({"This lists all the new rules up for discussion or whatever by themagistrates.",}),"return":({"1 on success, 0 on failure",}),]),}),"do_remove_current_rule":({({"int",}),({({"int",}),"num",}),(["main":({"This method removes a current rule.",}),"param":({"num the number of the current rule",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_one_rule":({({"int",}),({({"int",}),"num",}),(["main":({"This method lists the current set of rules from the specified area.",}),"return":({"1 on success, 0 on failure",}),]),}),"do_comment_on":({({"int",}),({({"int",}),"num",}),(["main":({"This method allows the person to make a comment on a current rule.Comments are only allowed by magistrates and only in the first twophases.",}),"param":({"num the id of the rule to comment on",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_single_motion":({({"int",}),({({"int",}),"num",}),(["main":({"This lists all the new rules up for discussion or whatever by themagistrates.",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_rules":({({"int",}),({}),([]),}),"do_amend_motion":({({"int",}),({({"int",}),"num",}),(["main":({"This method allows the person to amend a new rule.Amendments are only allowed by magistrates and only during the discusionphase.",}),"param":({"num the id of the rule to comment on",}),"return":({"1 on success, 0 on failure",}),]),}),])
protected_functions ([])
inherits (["/std/room/basic_room":({}),"/std/room/inherit/council_base":({}),])
main_docs (["main":({"This method lists the current set of rules from the specified area.",}),"return":({"1 on success, 0 on failure",}),])
define_docs ([])
includes (["/include/nomic_system.h":1522061544,])
class_docs ([])
file_name "/std/room/council_chambers.c"
last_changed 1522061544
