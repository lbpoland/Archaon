#/obj/handlers/autodoc/autodoc_file.c
public_functions (["check_chatters":({({"void",}),({}),([]),}),"query_chatters":({({"mixed","*",}),({}),(["main":({"This method returns the current list of rooms that are enabled forchatting.",}),"return":({"the current chatters",}),]),}),"add_exit_type":({({"int",}),({({"string",}),"type",({"mixed",}),"message",({"mixed",}),"obvious",({"int",}),"size",({"mixed",}),"func",}),(["main":({"This method adds an exit type to the current list of available exit types.This is used when the room handler is setup to add all the used exittypes.",}),"see":({"remove_exit_type()",}),"param":({"type the name of the exit type","message the message to display when going through the exit","obvious if the exit is obvious or not","size the size of the exit (used for heigh restrictions)","func the function to call when using the exit",}),"return":({"1 if successfuly added, 0 if not",}),]),}),"query_door_type":({({"mixed","*",}),({({"string",}),"type",({"string",}),"direc",({"string",}),"dest",}),(["main":({"This method returns information about the door type, the door hasextra information associated with it than the standard exit type.This function does a double job of trying to find the correspondingdoor on the other side of the room.",}),"param":({"type the type of the door","direc the direction the door points","dest the destination of the door",}),"return":({"the door type array of information",}),]),}),"query_dynamic_auto_load":({({"mapping",}),({}),([]),}),"add_door":({({"void",}),({({"object",}),"thing",}),([]),}),"query_opposite_direction":({({"string",}),({({"string",}),"dir",}),(["main":({"This method returns the opposite direction to this exit.  This shouldonly be used for printing, since it is not a usefulreal name.",}),"param":({"dir the direction to get the opposite of",}),"return":({"the opposite direction",}),]),}),"add_chatter":({({"void",}),({({"object",}),"thing",({"int",}),"number",}),([]),}),"housekeeping":({({"void",}),({}),([]),}),"check_doors":({({"void",}),({}),([]),}),"query_doors":({({"mixed","*",}),({}),(["main":({"This method returns the current list of doors handled by the roomhandler.",}),"return":({"the current array of doors",}),]),}),"remove_exit_type":({({"int",}),({({"string",}),"type",}),(["main":({"This method remove the named exit from the type list.",}),"see":({"add_exit_type()",}),"param":({"type the name of the exit type to remove",}),"return":({"always returns 1",}),]),}),"query_exit_type":({({"mixed","*",}),({({"string",}),"type",({"string",}),"dir",}),(["main":({"This method returns the information associated with the exit type.",}),"param":({"type the exit type to query","dir the direction the type information is for",}),"return":({"a huge amount of info as specified above",}),]),}),"stats":({({"mixed","*",}),({}),([]),}),"init_dynamic_arg":({({"void",}),({({"mapping",}),"maps",}),([]),}),"exit_move":({({"int",}),({({"string",}),"verb",({"string",}),"extra",({"mixed",}),"special",({"object",}),"thing",}),(["main":({"This is the main code for moving someone.  The move_thing code aboveshould not be called directly.  This code handlers all the followersand any other things that need to be handled.",}),"param":({"verb the movement verb","extra extra information","special special informaiton","thing the thing to move",}),"return":({"1 on success, 0 on failure",}),]),}),"check_door":({({"void",}),({({"mixed",}),"args",}),(["main":({"This method checks to see if the door exists or not.It is passed in the room we are going from and the direction theexit faces in the array.<br><pre>({ room_from, direction })</pre><br>This is the function which generates those door xx not found messages.",}),"see":({"query_door_type()",}),"param":({"args the arguements passed into the function",}),]),}),"move_thing":({({"int",}),({({"object",}),"thing",({"string",}),"dir",({"string",}),"dest",({"mixed",}),"exit",({"mixed",}),"enter",({"string",}),"move",}),(["main":({"THis is the code that actually moves the thing around the place.It handles all the weirdness involved with dragging things and othersuch stuff.",}),"param":({"thing what is being moved","dir the direction we are going","dest the destionation room","exit the exit name","enter the enter name","move the string to tell the object when it moves",}),"return":({"1 on success, 0 on failure",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["revision":({"Deutha Who knowsSeverely changed, move the follow code in here from the living object",}),"main":({"This file contains all the bits needed to handle rooms, plus the code tohandle following when moving.",}),"author":({"Pinkfish",}),"see":({"/std/room/basic_room.c",}),])
define_docs (["DOORSIZE":([]),"CHATSIZE":([]),])
includes (["/include/position.h":1522061544,"/include/player.h":1522061544,"/include/move_failures.h":1522061544,"/include/climate.h":1522061544,"/include/room.h":1522061544,"/include/living.h":1522061544,"/include/weather.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/room_handler.c"
last_changed 1522061544
