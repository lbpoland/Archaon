#/obj/handlers/autodoc/autodoc_file.c
public_functions (["cast_spell":({({"int",}),({({"string",}),"name",({"mixed",}),"bing",}),([]),}),"query_position_description":({({"mixed","*",}),({({"string",}),"sub_guild",({"string",}),"position",}),(["main":({"Dummy function for guilds without positionsThis method returns the description array for this position.",}),"see":({"add_position()",}),"param":({"sub_guild the sub guild","position position to return",}),"return":({"0 if the position don't exist, an array of descriptions if it does, currently defined to hold the title({ title|({male_title,female_title}), ... })",}),]),}),"add_spell":({({"int",}),({({"string",}),"name",({"mixed",}),"ob",({"string",}),"func_name",({"int",}),"add_if_player",}),([]),}),"query_title":({({"string",}),({({"object",}),"player",}),(["main":({"This method returns the title of the player.",}),"param":({"player the player to find the title of",}),"return":({"the title name",}),]),}),"set_level":({({"void",}),({({"object",}),"thing",({"int",}),"level",({"string",}),"guild",}),([]),}),"player_save":({({"void",}),({}),([]),}),"query_skill_max_level":({({"int",}),({({"string",}),"skill",}),([]),}),"query_position":({({"string",}),({({"string",}),"sub_guild",({"string",}),"player_name",}),(["main":({"Dummy function for guilds without positionsThis method returns the position held by the player. If sub_guild is0, the guild object is supposed to figure out what sub_guild (if any)is relevant.",}),"param":({"sub_guild the sub guild","player_name the player",}),"return":({"the position the player is appointed to in sub_guild.",}),]),}),"query_level":({({"int",}),({({"object",}),"thing",}),(["main":({"This method figures out the level of the npc or player.",}),"param":({"thing the thing to find the level of",}),"return":({"the level of the thing",}),]),}),"remove_command":({({"int",}),({({"string",}),"name",}),([]),}),"query_position_abilities":({({"string","*",}),({({"string",}),"sub_guild",({"string",}),"position",}),(["main":({"Dummy function for guilds without positionsThis method returns the abilities for a position.",}),"see":({"add_position()",}),"param":({"sub_guild the sub guild","position position to return",}),"return":({"0 if the position don't exist, an array of abilitiesif is does",}),]),}),"set_skills":({({"void",}),({({"string","*",}),"words",}),([]),}),"query_skill_cost":({({"int",}),({({"string",}),"skill",}),([]),}),"player_heart_beat":({({"void",}),({({"string",}),"guild",({"object",}),"thing",}),([]),}),"do_command":({({"int",}),({({"string",}),"name",({"mixed",}),"param",}),([]),}),"player_quit":({({"void",}),({}),([]),}),"query_guild_ability":({({"int",}),({({"mixed",}),"thing",({"string",}),"ability",}),(["main":({"Dummy function for guilds without positionsTest if a player/npc has a specific ability.",}),"param":({"thing either a string, being the name of a player, or an objectbeing the actual player/npc to check for a guild ability.","ability the ability to check for.",}),"return":({"1 if thing has that ability, 0 if not.",}),]),}),"skills_advanced":({({"void",}),({({"object",}),"thing",({"string",}),"skill",({"int",}),"level",}),(["main":({"This method is called whenever a player advances a skill.",}),"param":({"thing the player advacing the skill","skill the name of the skill","level the level it is advanced to",}),]),}),"query_start_pos":({({"string",}),({({"object",}),"thing",}),([]),}),"query_gp_skill":({({"string",}),({}),([]),}),"query_commands":({({"string","*",}),({}),([]),}),"remove_position":({({"int",}),({({"string",}),"sub_guild",({"string",}),"position",}),(["main":({"Dummy function for guilds without positionsThis method removes a position for this subguild.",}),"see":({"add_position()","query_position()","query_positions()",}),"param":({"sub_guild the sub guild","position position to remove",}),"return":({"POSITION_OK if successful, POSITION_FAIL if theposition didn't exist",}),]),}),"leave_guild":({({"void",}),({}),([]),}),"set_new_level":({({"void",}),({({"mixed","*",}),"args",}),([]),}),"add_command":({({"int",}),({({"string",}),"name",({"int",}),"add_if_player",}),([]),}),"reset_positions":({({"void",}),({({"string",}),"sub_guild",}),(["main":({"Dummy function for guilds without positionsThis method removes all appointments for a guild.   ",}),"see":({"add_position()",}),"param":({"sub_guild the sub guild",}),]),}),"add_position":({({"int",}),({({"string",}),"sub_guild",({"string",}),"position",({"int",}),"max",({"string","*",}),"abilities",({"mixed","*",}),"description",}),(["main":({"Dummy function for guilds without positionsThis method adds a new position for the subguild.",}),"see":({"remove_position()","query_position()","query_positions()",}),"param":({"sub_guild the sub guild","position position to add","max the maximum number of people appointed to this position","abilities the abilities associated with this position","description the descriptions associated with this position({ title|({male_title,female_title}), ... })",}),"return":({"DEITY_POSITION_OK if successful, DEITY_POSITION_FAIL if theposition already exists",}),]),}),"appoint_position":({({"int",}),({({"string",}),"sub_guild",({"string",}),"position",({"string",}),"player_name",}),(["main":({"Dummy function for guilds without positionsThis method appoints the player to a position.   If sub_guild is 0,the guild object is supposed to figure out the subguild from the player_name.",}),"param":({"sub_guild the sub guild","position the position","player_name the player",}),"return":({"POSITION_FAIL if it failed, POSITION_OK if it succeeded.",}),]),}),"dismiss_position":({({"int",}),({({"string",}),"sub_guild",({"string",}),"position",({"string",}),"player_name",}),(["main":({"Dummy function for guilds without positionsThis method dismisses the player from a position.   If sub_guild is 0,the guild object is supposed to figure out the subguild from the player_name.",}),"param":({"sub_guild the sub guild","position the position","player_name the player",}),"return":({"POSITION_FAIL if it failed, POSITION_OK if it succeeded.",}),]),}),"query_spells":({({"mixed","*",}),({}),([]),}),"query_skills":({({"string","*",}),({}),([]),}),"set_gp_skill":({({"void",}),({({"string",}),"word",}),([]),}),"remove_spell":({({"int",}),({({"string",}),"name",}),([]),}),"query_position_appointments":({({"string","*",}),({({"string",}),"sub_guild",({"string",}),"position",}),(["main":({"Dummy function for guilds without positionsThis method returns the appointments for this position in this subguild.",}),"see":({"add_position()",}),"param":({"sub_guild the sub guild","position position to return",}),"return":({"0 if the position don't exist, an array of appointmentsif is does, with 0's for unfilled positions",}),]),}),"adjust_primaries":({({"string",}),({({"object",}),"thing",({"int",}),"level",}),([]),}),"start_player":({({"void",}),({({"object",}),"pl",}),([]),}),"set_start_pos":({({"void",}),({({"string",}),"word",}),([]),}),"set_gp":({({"void",}),({({"object",}),"thing",}),([]),}),"query_positions":({({"mapping",}),({({"string",}),"sub_guild",({"string",}),"position",}),(["main":({"Dummy function for guilds without positionsThis method returns all positions for this guild.",}),"see":({"add_position()",}),"param":({"sub_guild the sub guild",}),"return":({"0 if the position don't exist, an array of appointmentsif is does, with 0's for unfilled positions",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"This is where you would set up any shadows you want on the playerobject, or just do what you will..",}),"param":({"pl the player being started",}),])
define_docs ([])
includes (["/include/config.h":1522061544,"/include/tune.h":1522061544,"/include/skills.h":1522061544,"/include/guilds.h":1522061544,])
class_docs ([])
file_name "/std/guilds/standard.c"
last_changed 1522061544
