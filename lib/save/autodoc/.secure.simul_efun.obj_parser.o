#/obj/handlers/autodoc/autodoc_file.c
public_functions (["match_objects_in_environments":({({"class","obj_match",}),({({"string",}),"input",({"mixed",}),"env_list",({"int",}),"type",({"object",}),"player",}),(["main":({"Find an object in the given environments that match the given words.This will only return a correct match if the entire stringmatches.  If it gets a partial match then nothing will bereturned.  The return array is of the format:<br><pre>({ flag, class obj_match info })</pre>The flag can be one of:<dd><dt>OBJ_PARSER_SUCCESS<dd>Successfuly matched the objects.  the objects part of the class willcontain the matched objects.<dt>OBJ_PARSER_NO_MATCH<dd>No successful match.  The text bit of the omatch class will containthe text that didn't match<dt>OBJ_PARSER_AMBIGUOUS<dd>An ambigous match is returned, this means 'frog' was referencedwhen there was more than one frog.  The objects part of the classhas all the objects there were matched<dt>OBJ_PARSER_BAD_FRACTION<dd>The specified fracition was bad, the text bit of the class containsthe bad fraction.<dt>OBJ_PARSER_FRACTION<dd>Means that a fraction was attempted to be applied to multipleobjects.<dt>OBJ_PARSER_TOO_DARK<dd>Unable to match the specified object because it is too dark.</dl>",}),"param":({"input the input string to match","env_list the environments to get the objects from","singular force a singular match","player the person doing the lookup",}),"return":({"an array of the format ({ flag, class obj_match info })",}),]),}),"match_objects_for_existence":({({"object","*",}),({({"string",}),"input",({"object","*",}),"env_list",({"object",}),"player",}),(["main":({"This method checks for existance of the specified objects.  It willreturn any ambiguous matches as well as real matches.  This should onlybe used in cases in the code where it is not nessessary to distinguishbetween different objects of the same type.",}),"param":({"input the input string to check","env_list the environments to check in","player the player to check with",}),"return":({"the array of objects",}),]),}),"match_object_in_array":({({"class","obj_match",}),({({"string",}),"input",({"object","*",}),"ob_list",({"int",}),"type",({"object",}),"player",}),(["main":({"Find an object in the given array that matches the given words.This will only return a correct match if the entire stringmatches.  If it gets a partial match then nothing will bereturned.  The return array is of the format:<br><pre>({ flag, class obj_match info })</pre>The flag can be one of:<dd><dt>OBJ_PARSER_SUCCESS<dd>Successfuly matched the objects.  the objects part of the class willcontain the matched objects.<dt>OBJ_PARSER_NO_MATCH<dd>No successful match.  The text bit of the omatch class will containthe text that didn't match<dt>OBJ_PARSER_AMBIGUOUS<dd>An ambigous match is returned, this means 'frog' was referencedwhen there was more than one frog.  The objects part of the classhas all the objects there were matched<dt>OBJ_PARSER_BAD_FRACTION<dd>The specified fracition was bad, the text bit of the class containsthe bad fraction.<dt>OBJ_PARSER_FRACTION<dd>Means that a fraction was attempted to be applied to multipleobjects.<dt>OBJ_PARSER_TOO_DARK<dd>Unable to match the specified object because it is too dark.</dl>",}),"param":({"input the input string to match","ob_list the object to list to match in","type we restrict the matching to certain groups of objects","player the person doing the lookup",}),"return":({"an array of the format ({ flag, class obj_match info })",}),]),}),"match_objects_failed_mess":({({"string",}),({({"class","obj_match",}),"failed_match",}),(["main":({"This method returns the failed message for the specifiedfailed match string.",}),"param":({"failed_match the return result from match_objects_*",}),"return":({"the message to print when it gets an error",}),]),}),])
protected_functions ([])
inherits (["/secure/simul_efun/multiple_short":({}),])
main_docs (["changes":({"2000-04-20   Scatter    File created.","2000-05-20   Pinkfish   Adapted to Discworld",}),"main":({"This is the object matching code.It is based on some code by Scatter at Dawn Whispers, although this isboth cut down and extended from what scatter had written.",}),])
define_docs (["EVERY_NUM":([]),"TRACE(ARG)":([]),])
includes (["/include/obj_parser.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/secure/simul_efun/obj_parser.c"
last_changed 1522061544
