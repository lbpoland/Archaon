#/obj/handlers/autodoc/autodoc_file.c
public_functions (["move_it":({({"int",}),({({"string",}),"pname",({"string",}),"from",({"string",}),"to",({"int",}),"number",}),(["main":({"This method moves the specified message from one folder to another.",}),"param":({"pname the player name","from the folder to move from","to the folder to move to","number the message number to move",}),]),}),"finger_mail":({({"string",}),({({"string",}),"pname",}),(["main":({"This method returns the nice string used when fingering a player todetermine their mail status.",}),"param":({"pname the player name to finger",}),"return":({"the string associated with the inbox of the player",}),]),}),"can_create_folder":({({"nomask","int",}),({({"string",}),"player",({"string",}),"folder",}),(["main":({"Can a folder with a certain name be created?",}),"param":({"player the player creating the folder","folder the name of the folder to be created",}),"return":({"1 if the folder can be created, 0 if it can't.",}),]),}),"set_counter":({({"void",}),({({"int",}),"x",}),(["main":({"This method sets the current message counter.  This will return amessage if the counter was not valid.  This should be called in theevent that a recovery is needed if the counter screws up.",}),"param":({"x the new value for the counter",}),]),}),"mail_count":({({"int","*",}),({({"string",}),"pname",}),(["main":({"This method returns a 2 item array for the amount of mail in a personsinbox.  This first index is the total number of messages and the secondis the number that are unread.",}),"param":({"pname the players name.",}),"return":({"a two item array.",}),]),}),"get_messages":({({"class","mail_header","*",}),({({"string",}),"pname",({"string",}),"fname",}),(["main":({"This method returns the messages for the player in the specifiedfolder.  The return is an array of messages of type 'class mail_header'.",}),"param":({"pname the players name","fname the folder name",}),"return":({"a list of messages",}),]),}),"check_local":({({"string",}),({({"string",}),"str",}),(["main":({"This method checks to see if the address is local.",}),"param":({"str the address to check",}),"return":({"local name for local messages, 0 for remote messages",}),]),}),"check_empty":({({"int",}),({({"string",}),"pname",({"string",}),"fname",}),(["main":({"This method checks to see if the specified players folder is empty.",}),"param":({"pname the player name to check","fname the folder name to check",}),]),}),"load_message":({({"string",}),({({"string",}),"pname",({"string",}),"fname",({"int",}),"number",}),(["main":({"This method loads a message for the specified player in the specifiedfolder.",}),"param":({"pname the players name","fname the folder name","number the message number to open",}),"return":({"the text of the message",}),]),}),"delete_it":({({"void",}),({({"string",}),"pname",({"string",}),"fname",({"int","*",}),"deleted",}),(["main":({"This method will attempt to the delete the specified messages fromthe folder.  The array deleted must be an array of integers where eachnumber is a message number to be deleted.",}),"param":({"pname the players name","fname the folder name","deleted the array of message numbers to delete from the folder",}),]),}),"add_it":({({"void",}),({({"class","mail_message",}),"mesg",({"int",}),"flag",}),(["main":({"This method adds a message into all the correct folders and stuff.This is the method that is called when a piece of mail is actuallysent.",}),"see":({"delete_it()",}),"param":({"mesg the message to send","flag if this is set to a non-zero value then no delivery messages willoccur",}),]),}),"check_mail":({({"string",}),({({"string",}),"pname",}),(["main":({"This method is called when the player logs on to determine if they haveany new mail or not.",}),"param":({"pname the players name to check",}),]),}),"delete_account":({({"void",}),({({"string",}),"pname",}),(["main":({"This method totaly removes the account for a particular player.  Thiswill be called when a player is deleted for whatever reason.",}),"param":({"pname the player name to delete",}),]),}),"mark_read":({({"void",}),({({"string",}),"pname",({"string",}),"fname",({"int","*",}),"unread",}),(["main":({"This method marks the messages which are not in the unread arrayin the specified folder as being read.",}),"param":({"pname the player name","fname the folder name","unread the list of messages that are still unread",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({" Folder handler for the mailer. Actually it does a lot more :-)<p> Thanks to Wodan and Pinkfish for ideas and help. <br> By Turrican@Discworld, May 1995.",}),"started":({"May 1995",}),"author":({"Turrican",}),])
define_docs (["EECALLBACK	-29	/*":([]),"MAIL_PATH":([]),"EESEND		-28	/*":([]),"EEISLISTEN	-20	/*":([]),"EEISBOUND	":([]),"EENONBLOCK	":([]),"ERROR_STRINGS	":([]),"EESENDTO	-27	/*":([]),])
includes (["/include/board.h":1522061544,"/include/mail.h":1522061544,"/include/socket_errors.h":1522061544,"/include/mime.h":1522061544,"/include/comms.h":1522061544,"/include/player_handler.h":1522061544,"/include/network.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/folder_handler.c"
last_changed 1522061544
