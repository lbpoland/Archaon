#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_open_cost":({({"void",}),({({"int",}),"i",}),(["main":({"This is used to set the cost to open an account (in monetary units)",}),"param":({"cost The cost of a new account",}),]),}),"set_vault_name":({({"void",}),({({"string",}),"str",}),(["main":({"Used to set the name of the vault, as used for the save file. This shouldbe a unique name for this vault.",}),"param":({"name The name of the vault.",}),]),}),"set_visit_cost":({({"void",}),({({"int",}),"i",}),(["main":({"This is used to set the cost of a visit to the vault (in monetary units)",}),"param":({"cost The cost of a vist",}),]),}),"check_idler":({({"void",}),({({"object",}),"who",}),([]),}),"set_proprietor":({({"void",}),({({"object",}),"ob",}),(["main":({"This is the object that is the proprietor of the vault. This should be anNPC.",}),"param":({"proprietor The proprietor NPC object.",}),]),}),"set_vault_exit":({({"void",}),({({"string",}),"direc",({"mixed",}),"dest",({"string",}),"type",}),(["main":({"Used to set the exit from this vault entrance room into the vault itself.The parameters are just like those of add_exit.",}),"see":({"add_exit",}),"param":({"direction The direction of the exit.","dest The destination object. Usually the filename of the destination.","type An exit type as in add_exit.",}),"return":({"void",}),]),}),"set_location":({({"void",}),({({"string",}),"str",}),(["main":({"This function is used to set the location used for calculation of whichcurrency the vault proprietor will accept.",}),"param":({"location The name of the location.",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"Standard vault inheritable object. There are two inheritables (this one and/std/vault.c) which are provided to make it easy to setup your ownvaults.This object should be inherited by your vault entrance area. It is used todefine most of the customisation for your vault.You must use set_vault_name and set_vault_entrance. You must also definea vault proprietor NPC and use set_proprietor() to let the system knowwhich NPC it is. You should also check for this proprietors location andexistance every reset. You may also want to provide some protection toprevent the NPC being killed too frequently.",}),"author":({"Ceres",}),"see":({"/std/vault_entrance.c",}),])
define_docs (["PTS":([]),"TIME_LIMIT":([]),"SPAM_GUARD":([]),])
includes (["/include/shops/bank.h":1522061544,"/include/vault.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/inherit/vault_entry.c"
last_changed 1522061544
