#/obj/handlers/autodoc/autodoc_file.c
public_functions (["illegal_thing":({({"string",}),({({"string",}),"basename",({"string",}),"short",}),(["main":({"Determine if a given object is illegal.",}),"param":({"basename the basename of the object.","short the shortname of the object.",}),"return":({"1 for success, 0 for failure",}),]),}),"query_illegal":({({"mapping",}),({}),(["main":({"List the illegal objects.",}),]),}),"remove_illegal":({({"int",}),({({"string",}),"basename",({"string",}),"short",}),(["main":({"Remove an item from the illegal array",}),"param":({"basename the basename of the object.","short the shortname of the object.",}),"return":({"1 for success, 0 for failure",}),]),}),"add_illegal":({({"int",}),({({"string",}),"basename",({"string",}),"short",({"string",}),"replacement",}),(["main":({"This method is used to add objects that we don't want to be reloaded.This is for those objects that are clones of /std/object or /obj/armouror something but which are wrongly configured.",}),"param":({"basename the base filename of the object","short the short name of the object","replacement the replacement object.",}),"return":({"1 for success, 0 for failure",}),"example":({"add_illegal(\"/obj/armour\", \"blue robe\",                        \"/obj/armours/robe.arm);",}),]),}),"save_file":({({"void",}),({}),(["main":({"Saves the current configuration.",}),]),}),"remove_mapping":({({"int",}),({({"string",}),"from",}),(["main":({"Removes a mapping from the object.  This looks to see if an mappingexists for the object and removes it if it does.",}),"see":({"add_mapping()","list_mappings()",}),"param":({"from the object to remove the mapping from",}),"return":({"1 on success and 0 on failure",}),]),}),"other_file":({({"string",}),({({"string",}),"word",}),(["main":({"This method returns the mapped name of the object.  If no mappingexists the passed in value is returned directly.",}),"see":({"clone()","list_mappings()",}),"param":({"word the object name to get a mapping for",}),"return":({"the file to use",}),]),}),"add_mapping":({({"int",}),({({"string",}),"from",({"string",}),"to",}),(["main":({"Use this function to add a new mapping of one filename to another.Means that if an object of type 'from' is attempted to be clonedan object of type 'to' will be cloned instead.",}),"see":({"remove_mapping()","list_mappings()",}),"param":({"from the old object name","to the new object name",}),"return":({"1 on success, 0 on failure",}),]),}),"load_file":({({"void",}),({}),(["main":({"Loads the current configuration.",}),]),}),"list_mappings":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns a list of all the current mappings.  If apattern is given, then only files which contain that string willbe returned.",}),"see":({"add_mapping()","remove_mapping()",}),"param":({"str the pattern to search for",}),"return":({"the list of mappings",}),]),}),"query_changes":({({"mapping",}),({}),(["main":({"This method returns the list of currently moved objects.",}),]),}),"clone":({({"object",}),({({"string",}),"word",}),(["main":({"Try and clone the passed in object.  If the name exists in the changesarray then the new file name is cloned instead of the old one.",}),"see":({"other_file()","list_mappings()",}),"param":({"word the name of the file to clone",}),"return":({"the cloned object",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"Used for mapping deleted files to new ones when things are changed.Updated to a more tidy mechanism by Ceres 14/3/96<p>Usage: call add_mapping(from, to) /global/cloner",}),])
define_docs (["SAVE_FILE":([]),"LIFE_TIME":([]),"SAVE_FILE_DELAY":([]),])
includes ([])
class_docs ([])
file_name "/global/cloner.c"
last_changed 1522061544
