#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_address":({({"string",}),({({"string",}),"house",}),(["main":({"Find out the address of a house.",}),"param":({"house The basename of the house",}),"return":({"the address.",}),]),}),"set_under_offer":({({"int",}),({({"string",}),"house",}),(["main":({"Mark a house as being Under Offer (to prevent anyone else trying to sellit too.",}),"param":({"house the basename of the house",}),"return":({"1 for success 0 for failure",}),]),}),"remove_rooms":({({"int",}),({({"string",}),"house",({"string","*",}),"rooms",}),(["main":({"Remove secondary rooms from a house.",}),"param":({"house the basename of the house","an array of basenames for the rooms",}),"return":({"1 for success 0 for failure",}),]),}),"query_rooms":({({"string","*",}),({({"string",}),"house",}),(["main":({"Get a list of the houses rooms.",}),"param":({"house The basename of the house",}),"return":({"a list of rooms.",}),]),}),"rename_house":({({"int",}),({({"string",}),"house",({"string",}),"newhouse",}),(["main":({"Rename a house. This will remove the \"main\" room and replace it withanother.",}),"param":({"house the current basename of the house","newhouse the new basename.",}),]),}),"set_bank":({({"int",}),({({"string",}),"house",({"string",}),"bank",}),(["main":({"Set the bank account to be used for rent on this house.",}),"param":({"house The basename of the house","owner The new bank to use",}),"return":({"1 for success 0 for failure",}),]),}),"query_value":({({"int",}),({({"string",}),"house",}),(["main":({"Find out the current value of a house.",}),"param":({"house The basename of the house",}),"return":({"the value.",}),]),}),"remove_house":({({"int",}),({({"string",}),"house",}),(["main":({"Remove a house from the list of houses",}),"param":({"house the basename of the house",}),"return":({"1 for success 0 for failure",}),]),}),"query_house":({({"int",}),({({"string",}),"house",}),(["main":({"Check if a given house is registered.",}),"param":({"house The basename of the house",}),"return":({"1 if its registered, 0 otherwise.",}),]),}),"set_owner":({({"int",}),({({"string",}),"house",({"string",}),"owner",}),(["main":({"Set the owner of this house.",}),"param":({"house The basename of the house","owner The new owner of the house",}),"return":({"1 for success 0 for failure",}),]),}),"set_address":({({"int",}),({({"string",}),"house",({"string",}),"address",}),(["main":({"Set the address of this house.",}),"param":({"house The basename of the house","address The new address of the house",}),"return":({"1 for success 0 for failure",}),]),}),"query_region":({({"string",}),({({"string",}),"house",}),(["main":({"Find out the region a house is in for sale/rental purposes.",}),"param":({"house The basename of the house",}),"return":({"the region.",}),]),}),"add_rooms":({({"int",}),({({"string",}),"house",({"string","*",}),"rooms",}),(["main":({"Add secondary rooms to a house.",}),"param":({"house the basename of the house","an array of basenames for the rooms",}),"return":({"1 for success 0 for failure",}),]),}),"modify_house":({({"int",}),({({"string",}),"house",({"string","*",}),"other_rooms",({"string",}),"address",({"string",}),"region",({"int",}),"type",}),(["main":({"Modify a houses information.",}),"param":({"house the basename of the house","other_rooms an array of other rooms in the house","address a string for the address","region the region (used for house sales)","type an integer. 1 for owned, 0 for rented.",}),"return":({"1 for success, 0 for failure",}),]),}),"set_region":({({"int",}),({({"string",}),"house",({"string",}),"region",}),(["main":({"Set the region of this house.",}),"param":({"house The basename of the house","region The new region of the house",}),"return":({"1 for success 0 for failure",}),]),}),"query_type":({({"int",}),({({"string",}),"house",}),(["main":({"Find out the type of a house. ie. Whether it's rented or owned.",}),"param":({"house The basename of the house",}),"return":({"the type.",}),]),}),"set_housing_area_citizenship":({({"void",}),({({"string",}),"area",({"string",}),"citizenship",}),(["main":({"This method sets a mapping between a housing area and the citizenshiprequired to hold a house there.",}),"param":({"area the housing area to link","citizenship the citizenship the housing area needs",}),]),}),"add_house":({({"int",}),({({"string",}),"house",({"string","*",}),"other_rooms",({"string",}),"address",({"string",}),"region",({"int",}),"type",}),(["main":({"Add a new house to the handler.",}),"param":({"house the basename of the house","other_rooms an array of other rooms in the house","address a string for the address","region the region (used for house sales)","type an integer. 1 for owned, 0 for rented.",}),"return":({"1 for success, 0 for failure",}),]),}),"query_owner":({({"string",}),({({"string",}),"house",}),(["main":({"Find out the current owner of this house.",}),"param":({"house The basename of the house",}),"return":({"the owners name.",}),]),}),"query_housing_area_bank":({({"string",}),({({"string",}),"area",}),(["main":({"This method returns the current mappings between the housing area and theinitial bank to use.",}),"param":({"area the area to check",}),"return":({"the initial bank used, DEFAULT_BANK if none set",}),]),}),"query_bank":({({"string",}),({({"string",}),"house",}),(["main":({"Return which bank account rent will be removed from for a house.",}),"param":({"house The basename of the house",}),"return":({"the bank name.",}),]),}),"set_housing_area_money":({({"void",}),({({"string",}),"area",({"string",}),"bank",({"string",}),"place",}),([]),}),"query_vacant":({({"string","*",}),({({"string",}),"region",}),(["main":({"Function to get a list of houses that are vacant in a given region.This function is used by the auction system or other sales mechanism.",}),"param":({"region Region to list houses in",}),"return":({"a list of houses.",}),]),}),"change":({({"int",}),({}),([]),}),"set_in_arrears":({({"int",}),({({"string",}),"house",}),(["main":({"Mark a house as being in arrears.  This is the step just prior to beingrepossessed.",}),"param":({"house the basename of the house",}),"return":({"1 for success 0 for failure",}),]),}),"query_housing_area_place":({({"string",}),({({"string",}),"area",}),(["main":({"This method returns the current mappings between the housing area and themoney area (\"Ankh-Morpork\", \"Counterweight Continent\", etc) to use.",}),"param":({"area the area to check",}),"return":({"the money area used, DEFAULT_PLACE if none set",}),]),}),"query_all_housing_area_citizenships":({({"mapping",}),({}),(["main":({"This method returns all of the current mappings between the housingarea and the citizenship.  This shouuld not be used for anythingexcept debugging.",}),"return":({"all the housing area stuff",}),]),}),"set_for_sale":({({"int",}),({({"string",}),"house",}),(["main":({"Mark a house as being For Sale this puts it in the list of possiblehouses to go into the vacant list.",}),"param":({"house the basename of the house",}),"return":({"1 for success 0 for failure",}),]),}),"query_housing_area_citizenship":({({"string",}),({({"string",}),"area",}),(["main":({"This method returns the current mappings between the housing area and therequired citizenship.",}),"param":({"area the area to check",}),"return":({"the citizenship required, 0 if none",}),]),}),"remove_housing_area_citizenship":({({"void",}),({({"string",}),"area",}),(["main":({"This method removes the mapping between a housing area and it's citizenshiprequirements.",}),"param":({"area the housing area to remove the link from",}),]),}),"set_type":({({"int",}),({({"string",}),"house",({"int",}),"type",}),(["main":({"Set the type of a house. ie. Whether it's rented or owned.(1 for rented, 0 for owned).",}),"param":({"house The basename of the house",}),"return":({"the type.",}),]),}),"set_value":({({"int",}),({({"string",}),"house",({"int",}),"value",}),(["main":({"Set the value of a particular house.",}),"param":({"house the basename of the house","value the value in monetary units.",}),"return":({"1 for success 0 for failure",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"A handler to track player houses.  This handler should only be used forgeneral houses that are available for sale or rent. Don't add club orspecial (eg. guildmaster) houses here or they'll get sold or rented :)The handler stores information about registered player houses, makes housesvacant if their owners are idle and charges rent on rented houses.",}),"author":({"Ceres",}),])
define_docs (["SAVE_FILE":([]),"MAIL_HANDLER":([]),"DEFAULT_BANK":([]),"BANK":([]),"DEFAULT_PLACE":([]),])
includes (["/include/nomic_system.h":1522061544,"/include/player_handler.h":1522061544,"/include/housing.h":1522061544,"/include/am_time.h":1522061544,"/include/login_handler.h":1522061544,])
class_docs (["housing":({0,({({"other_rooms",({"string","*",}),}),({"owner",({"string",}),}),({"address",({"string",}),}),({"region",({"string",}),}),({"type",({"int",}),}),({"value",({"int",}),}),({"bank",({"string",}),}),}),(["main":({"This class stores all the data about a given house. The class is usedwithin the houses mapping. The key of the mapping is the basename of thehouse (the filename of the main room) and the value is this class, whichexplains why this class doesn't have a name or filename field for the house.",}),"field":({"other_rooms a string array of the other rooms in the house.","owner the name of the current owner. This may also be 'For Sale' or'Under Offer' while the house is vacant or being auctioned.","region The region the house is in eg. 'Ankh-Morpork'","type The type of house. 1 for rented, 0 for owned.","value The current value of the house. For rented houses this is themonthly rent, for owned houses this is the purchase price.",}),]),}),])
file_name "/obj/handlers/housing.c"
last_changed 1522061544
