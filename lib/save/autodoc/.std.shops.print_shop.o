#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_letter_cost":({({"void",}),({({"int",}),"value",}),(["main":({"This queries the cost per letter.",}),"see":({"query_letter_cost()","print_cost()",}),"param":({"value the new cost per letter",}),]),}),"remove_print_run":({({"void",}),({({"string",}),"name",({"mixed","*",}),"info",}),(["main":({"This method will remove a players print run.",}),"see":({"query_print_run()","add_print_run()",}),"param":({"name the player whose print run is to be removed.",}),]),}),"query_default_language":({({"string",}),({}),(["main":({"This method will return the current default language for theprint shop.",}),"see":({"set_default_language()","add_translation_cost()","check_for_untranslatable_language()",}),"return":({"the current default language",}),]),}),"do_print":({({"int",}),({({"object","*",}),"obs",({"string",}),"language",}),(["main":({"This method will be called by the print add_command.  It will print outthe pricing schedule and how long the item will take to make.",}),"see":({"do_print_copies()",}),"param":({"obs the objects which have been matched","language the language to print the book in",}),"return":({"1 on success, 0 on failure",}),]),}),"set_no_collection":({({"void",}),({({"int",}),"collect",}),(["main":({"This sets the no collection flag.  It makes it so this room cannot beused for collections.  If this is set then there should be an associatedcollection room used to pick up the books from.  This room shoulduse the set_office_room() function to set the office room to usefor the collections.",}),"see":({"query_no_collection()","set_office_room()",}),"param":({"collect the new value of no_collections flag",}),]),}),"add_translation_cost":({({"void",}),({({"string",}),"lang",({"int",}),"cost",}),(["main":({"This method will add the cost to translate from one language toanother.  The default is translating to the common language andthis cost will be used in both directions.  ie: the cost of translatingfrom djelian to common is the same as translating from common todjelian.  If translating between two languages that are not thedefault language, say the default is common and we want to translatefrom djelian to wombat, then the cost from djelian->common and thencommon->wombat will be used.",}),"see":({"set_default_language()","remove_translation_cost()","query_all_translation_costs()",}),"param":({"lang the language to set the translation cost of","cost the cost is in percentage, 200 means twice the price",}),]),}),"set_discount_schedule":({({"void",}),({({"mixed","*",}),"value",}),(["main":({"Sets the discount schedule for this object.  See the query_discount_schedulehelp for the format of the array.",}),"see":({"query_discount_schedule()",}),"param":({"value the new discount schedule.",}),]),}),"query_no_collection":({({"int",}),({}),(["main":({"This returns the no collection flag used by the room.",}),"see":({"set_no_collection()","query_office_room()",}),"return":({"the no collection flag",}),]),}),"load_it":({({"void",}),({}),(["main":({"Loads the saved information off the disc.",}),"see":({"set_save_dir()","save_it()",}),]),}),"query_static_auto_load_info":({({"string",}),({({"int",}),"num",}),(["main":({"This method returns static the autoload information associated with thefile.",}),"param":({"num the number associated with the information",}),"return":({"the static auto load string, 0 if none",}),]),}),"do_print_copies":({({"int",}),({({"object","*",}),"obs",({"int",}),"number",({"string",}),"language",}),(["main":({"This method will be called when the player tries to print a certainnumber of copies of a book.",}),"see":({"do_print()",}),"param":({"obs the objects which have been matched","number the number of prints to do","language the language to print the book in",}),"return":({"1 on success, 0 on failure",}),]),}),"query_dynamic_auto_load_info":({({"mapping",}),({({"int",}),"num",}),(["main":({"This method returns dynamic the autoload information associated with thefile.",}),"param":({"num the number associated with the information",}),"return":({"the dynamic auto load string, 0 if none",}),]),}),"save_it":({({"void",}),({}),(["main":({"Saves the information to the disc.",}),"see":({"set_save_dir()","load_it()",}),]),}),"set_default_language":({({"void",}),({({"string",}),"lang",}),(["main":({"This method sets the default language to use in the print shop.Anything written in this language will cost nothing extra toduplicate.",}),"see":({"query_default_language()","add_translation_cost()","check_for_untranslatable_language()",}),"param":({"lang the new default language",}),]),}),"set_open_func":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to evaluate to check to see if the shopis open or not.  This should set any error messages which are needed.The objects are passed in as an argument in the do_print functionsand nothing is passed in for the collection check.",}),"see":({"query_open_func()","do_print()","do_print_copies()","do_collect()",}),"param":({"func the open function",}),]),}),"query_save_dir":({({"string",}),({}),(["main":({"Returns the save file name",}),"see":({"set_save_dir()","load_it()","save_it()",}),"return":({"save file name",}),]),}),"remove_translation_cost":({({"void",}),({({"string",}),"lang",}),(["main":({"This method will remove the translation cost for a specific language.",}),"see":({"set_default_language()","add_translation_cost()","query_all_translation_costs()",}),"param":({"lang the language to remove the translation cost of",}),]),}),"query_print_run":({({"mixed","*",}),({({"string",}),"name",}),(["main":({"This method returns the array of documents awaiting collection.  If thereare not documents this returns 0.",}),"see":({"add_print_run()","/include/print_shop.h",}),"param":({"name the player to query",}),"return":({"an array containing the player information, or 0 if none",}),]),}),"set_print_shop_name":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the name of the print shop which will be used onbooks when they are printed.  This is only needed in the collectionroom, this is the name that is placed on the fly leaf.",}),"param":({"name the name of the print shop",}),]),}),"price_object":({({"int",}),({({"object",}),"ob",({"int",}),"num",({"string",}),"to_language",}),(["main":({"Figure out how much this object will cost to make.",}),"param":({"ob the object to price","num the number of them to print",}),"return":({"the cost of the item",}),]),}),"check_for_magic_writing":({({"int",}),({({"object",}),"ob",}),(["main":({"Checks to see if the object has any magic writing on it.",}),"see":({"find_book_or_paper()","/obj/handlers/language->query_language_magic()",}),"return":({"1 if there is magic writing, 0 if not.",}),]),}),"query_discount_schedule":({({"mixed","*",}),({}),(["main":({"This method returns the discount schedule.  There is a default discountschedule setup for printing shops.  The discount schedule tells how muchof a discount you get for certain numbers of a run.  It returnsan array of the form:<pre>({ ({ numn1, dis1 }), ({ num2, dis2}), ... })</pre>Where each number is the discount amount for printing less than thatnumber of items.  The array must be sorted from the lowest number tothe highest number.",}),"see":({"set_discount_schedule()",}),"return":({"the discount schedule",}),]),}),"query_office_room":({({"string",}),({}),(["main":({"Returns the current office room associated with this room.",}),"see":({"set_office_room()","query_no_collection()",}),"return":({"the current office room",}),]),}),"set_save_dir":({({"void",}),({({"string",}),"name",}),(["main":({"Sets the save file name.",}),"see":({"query_save_dir()","load_it()","save_it()",}),"param":({"name the name of the save file",}),]),}),"print_pricing":({({"void",}),({({"object",}),"ob",({"string",}),"language",}),(["main":({"This method will print out the pricing schedule for the object.",}),"param":({"ob the object to get a pricing schedule of.",}),]),}),"query_all_translantion_costs":({({"mapping",}),({}),(["main":({"This method will return a mapping of all the translation costs.The keys are the languages and the values are the costs in termsof percentages.",}),"see":({"add_translation_cost()","remove_translation_cost()",}),"return":({"the current translation cost mapping",}),]),}),"check_for_untranslatable_language":({({"int",}),({({"object",}),"ob",}),(["main":({"Checks to see if the book contains a language we cannot translate.",}),"see":({"check_magic_writing()","find_book_or_paper()","set_default_language()","add_translation_cost()",}),"param":({"ob the book to check for languages",}),"return":({"1 if there is a language we cannot deal with",}),]),}),"query_letter_cost":({({"int",}),({}),(["main":({"This queries the cost per letter.",}),"see":({"set_letter_cost()","print_cost()",}),"return":({"the cost per letter",}),]),}),"set_office_room":({({"void",}),({({"string",}),"room",}),(["main":({"Sets the office room to which this collection room is associated.  Ifthis is set on a room, you cannot setup print jobs in the room and thisroom specified here is queried for the information about the jobs tocollect.",}),"see":({"query_office_room()","set_no_collection()",}),"param":({"room the new office room",}),]),}),"do_print_run":({({"void",}),({({"object",}),"ob",({"int",}),"number",({"int",}),"cost",({"string",}),"language",}),(["main":({"This method does the actual print run.  It creates all the objectsand makes the player pay for them all.",}),"see":({"do_print_copies()",}),"param":({"ob the object to print","number the number to print","cost the cost of the object","the language to translate things to",}),]),}),"find_book_or_paper":({({"object",}),({({"object","*",}),"obs",}),(["main":({"This method finds a single book or piece of paper to work on.  It willreturn 0 if multiple objects are found, or none are found.  It willset the error message appropriately.",}),"see":({"check_magic_writing()",}),"param":({"obs the objects to check for a book or paper",}),"return":({"the book or paper found",}),]),}),"add_print_run":({({"void",}),({({"string",}),"name",({"object",}),"ob",({"int",}),"number",({"string",}),"language",}),(["main":({"This adds an object into the current set to be collected.  This handlesfiguring out the nice number to use for the static and dynamic savenumbers.",}),"see":({"do_collect()","query_print_run()",}),"param":({"name the name of the person adding the run","ob the object being added","cost the cost of the object","number the number to be printer",}),]),}),"query_print_shop_name":({({"string",}),({}),(["main":({"This method will return the current name of the print shop.",}),"return":({"the name of the print shop",}),]),}),"query_open_func":({({"function",}),({}),(["main":({"This method returns the current function which is used to check forthe openness of the shop.",}),"see":({"set_open_func()",}),"return":({"the current open function",}),]),}),])
protected_functions (["add_auto_load_info":({({"int",}),({({"string",}),"static",({"string",}),"dynamic",}),(["main":({"This method saves the autoload information out to a file and returnsthe number associated with the file.",}),"param":({"static_arg the static auto load information","dynamic_arg the dynamic auto load information",}),"return":({"the number associated with the save files",}),]),}),"do_collect":({({"int",}),({}),(["main":({"This is when the player comes back to collect the book they haveprinted.",}),"return":({"1 on success, 0 on failure",}),]),}),"copyright_holder":({({"string",}),({({"object",}),"book",}),(["main":({"This method returns the current copyright holder of the object.",}),"param":({"book the book to get the copyright of",}),"return":({"the name of the copyright holder, 0 if none",}),]),}),"do_claim":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method sets up the copyright for the objects.  This will check forexisting copyright status and then check with the book handler to seeif it still fits the criteria.  If it does not then it will add itselfas a new book.",}),"param":({"obs the objects to claim copyright on",}),]),}),"is_copyright":({({"int",}),({({"object",}),"book",}),(["main":({"This method checks to make sure that the player is the correct holderof the copyright and that the book is still copyright.",}),"param":({"book the book to check",}),"return":({"1 if it is copyright",}),]),}),])
inherits (["/std/room/basic_room":({}),])
main_docs (["main":({"A printing workshop so that players can create their own books runs.<P>This can be divided up into two rooms, an office (where you pay forthe printing to be done) and a collection room (where you do the collection).To enable this behaviour the collection room needs to know about theoffice.  The office stores all the information, so you callset_office_room(room_path); on the collection room andset_no_collection() on the office.",}),"started":({"Thu Jan 29 17:55:47 CST 1998",}),"author":({"Pinkfish",}),"see":({"set_office_room()","set_no_collection();",}),])
define_docs (["COLLECT_ARR_SIZE":([]),"COLLECT_AUTO_LOAD_NUM":([]),"BINDING_COST":([]),"DEFAULT_TIME_TO_COLLECT":([]),"SCHEDULE_PERCENTAGE":([]),"COPYRIGHT_NUMBER":([]),"COLLECT_LANGUAGE":([]),"SCHEDULE_NUM":([]),"COLLECT_OB_NAME":([]),"COLLECT_NUM":([]),"DEFAULT_LETTER_COST":([]),"DEFAULT_TIME_PER_COPY":([]),"MAX_NUMBER":([]),"COLLECT_TIME":([]),])
includes (["/include/shops/bank.h":1522061544,"/include/language.h":1522061544,"/include/book_handler.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/print_shop.c"
last_changed 1522061544
