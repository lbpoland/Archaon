#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_max_range":({({"int",}),({}),(["main":({"This method returns the maximum possible range the item can be seenat.",}),"return":({"the maximum possible range",}),]),}),"query_feature_desc_from":({({"mapping",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"int",}),"no_filter",}),(["main":({"This is the function used by the system to find the message for thisfeature.",}),"param":({"x the x-coordinate","y the y-coordinate","z the z-coordinate","no_filter whether or not to filter by distance",}),]),}),"set_max_night_range":({({"void",}),({({"int",}),"range",}),(["main":({"This method sets the maximum range for the feature to be seen at.",}),"param":({"range the maximum range to be seen at",}),]),}),"query_min_range":({({"int",}),({}),(["main":({"This method returns the minimum range the  feature can be seen at.",}),"return":({"the minimum range of the feature",}),]),}),"calc_feature_desc":({({"string",}),({({"mapping",}),"direc",({"int",}),"night",({"int",}),"visibility",}),(["main":({"This function needs to be overridden to display the actualmessage to the feature.  The direc argument is a mapping of theform, key = direction, value = distance.",}),"param":({"direc the directions and distances","night the night feature",}),"return":({"the feature descriptions",}),]),}),"query_max_day_range":({({"int",}),({}),(["main":({"This method returns the maximum range the feature can be seen at.",}),"return":({"the maximum range of the feature",}),]),}),"query_blocking":({({"int",}),({}),(["main":({"This method returns the blocking status of the feature.  This will only workwith local features and not distant features.",}),"return":({"the blocking status of the features",}),]),}),"set_blocking":({({"int",}),({({"int",}),"blocking",}),(["main":({"This method sets the blocking status of the feature.  This will only workwith local features and not distant features.",}),"param":({"blocking the blocking flag",}),]),}),"query_max_night_range":({({"int",}),({}),(["main":({"This method returns the maximum range the feature can be seen at.",}),"return":({"the maximum range of the feature",}),]),}),"query_range_offset":({({"int",}),({}),(["main":({"This method returns the range offset.  The offset is added to thedistance of the feature for calculating the distance.  If thepoint is inside the offset the distance is ignored and thedistance it then calculated from the edge of the offset.  Thiscan be used to generate circular features.",}),"return":({"the current range offset",}),]),}),"set_range_offset":({({"void",}),({({"int",}),"offset",}),(["main":({"This method sets the range offset.  The offset is added to thedistance of the feature for calculating the distance.  If thepoint is inside the offset the distance is ignored and thedistance it then calculated from the edge of the offset.  Thiscan be used to generate circular features.",}),"param":({"offset the offset to use",}),]),}),"query_region_ob":({({"object",}),({}),(["main":({"This method returns the region object.  This should be usedfor setup calls.",}),"return":({"the region object",}),]),}),"filter_distances":({({"mapping",}),({({"mapping",}),"direcs",}),(["main":({"This method filters the returned descs to make sure they are allwithin the needed range.",}),"param":({"direcs the mappings of directions and distance",}),]),}),"set_min_range":({({"void",}),({({"int",}),"range",}),(["main":({"This method sets the minimum range for the feature to be seen at.",}),"param":({"range the minimum range to be seen at",}),]),}),"set_region":({({"void",}),({({"mixed",}),"region",}),(["main":({"This method sets the region to use for the system.  If the region isset as a string, then that region is cloned, if it is set as andobject, it is just used.",}),"param":({"region the region to use",}),]),}),"is_inside_region":({({"int",}),({({"int",}),"x1",({"int",}),"y1",({"int",}),"x2",({"int",}),"y2",}),(["main":({"This method determines if the feature is inside the specified regionor not.",}),"param":({"x1 the top x","y1 the top y","x2 the bottom x","y2 the bottom y",}),]),}),"set_max_day_range":({({"void",}),({({"int",}),"range",}),(["main":({"This method sets the maximum range for the feature to be seen at.",}),"param":({"range the maximum range to be seen at",}),]),}),])
protected_functions ([])
inherits (["/std/room/inherit/terrain_map/distance_str":({}),])
main_docs (["main":({"This is a stand alone feature handler for dealing with features thatspan over multiple terrains.",}),"started":({"Mon Apr  1 12:15:24 PST 2002",}),"author":({"Pinkfish",}),])
define_docs ([])
includes ([])
class_docs (["feature_pos":({0,({({"xstart",({"int",}),}),({"ystart",({"int",}),}),({"width",({"int",}),}),({"height",({"int",}),}),}),([]),}),])
file_name "/std/room/inherit/terrain_map/feature_base.c"
last_changed 1522061544
