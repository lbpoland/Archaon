#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_controlled_ownership_owner":({({"int",}),({({"string",}),"controlled",({"string",}),"owner",({"int",}),"type",}),(["main":({"This method sets the owner of the controlled ownership type.",}),"param":({"controlled the item being controlled","owner the owner of the item","type the type of the owner",}),"return":({"1 on success, 0 on failure",}),]),}),"query_save_directory":({({"string",}),({}),(["main":({"This method returns the save file for the club room controller.",}),"return":({"the save file for the club room controller",}),]),}),"query_room_save_file_name":({({"string",}),({({"mixed",}),"fname",}),(["main":({"This method returns the save file name to use for the room.",}),"param":({"fname the file name to use for the room",}),"return":({"the save file name to use",}),]),}),"set_save_directory":({({"void",}),({({"string",}),"save_directory",}),(["main":({"This method sets the save directory for the club room controller.",}),"param":({"save_file the new save file",}),]),}),"discuss_nominate_ownership":({({"mixed",}),({({"string",}),"message",({"string",}),"club_name",({"class","discussion_idea",}),"frog",({"string",}),"arg1",({"string",}),"arg2",}),(["main":({"This is the function used for nominating someone exciting the theowned position of the club rooms.",}),"param":({"message the message being sent","club_name the name of the club","frog the discussion item","arg1 the first argument","arg2 the second argument",}),]),}),"query_option":({({"mixed",}),({({"string",}),"name",}),(["main":({"This method queries and option associated with the club room.",}),"param":({"name the name of the option",}),"return":({"the value of the option",}),]),}),"remove_option":({({"int",}),({({"string",}),"name",}),(["main":({"This remove removes an option associated with the club room.",}),"param":({"name the name of the optoin",}),"return":({"1 on success, 0 on failure",}),]),}),"load_me":({({"void",}),({}),(["main":({"This method loads all the data from the save file.",}),]),}),"query_board_associated":({({"int",}),({}),(["main":({"This method queries to see if there is a board associated or not",}),"return":({"1 if there is aboard associated with this club room set",}),]),}),"set_option":({({"int",}),({({"string",}),"name",({"mixed",}),"value",}),(["main":({"This method sets the value of the option associated with the club room.",}),"param":({"name the name of the option","value the new value for the option",}),"return":({"1 on success, 0 on failure",}),]),}),"query_club":({({"string",}),({}),(["main":({"This method queries the club that currently owns the set of rooms.",}),"return":({"the club that owns the rooms",}),]),}),"set_board_associated":({({"void",}),({({"int",}),"board_associated",}),(["main":({"This method sets if a board is associated with the club room set ornot.",}),"parm":({"board_associated is there a board associated",}),]),}),"set_club":({({"int",}),({({"string",}),"club",}),(["main":({"This method sets the club that currently owns the set of rooms.",}),"param":({"club the club that owns the rooms",}),"return":({"1 on success, 0 on failure",}),]),}),"save_me":({({"void",}),({}),(["main":({"This method saves all the data to the save file.",}),]),}),"add_controlled_ownership":({({"int",}),({({"string",}),"name",({"int",}),"type",({"int",}),"default_type",({"mixed",}),"default_name",}),(["main":({"This method adds an item to have ownership.  If a function pointeris set as the default name, then the method will be evaluated eachtime the club changes.  The first arguement will be the name of theowned item being changed and the second argument will be the newclub name.",}),"param":({"name the name of the option that needs ownership control","type the type of controlled ownership","default_type the default ownership of the item","default_name the default name of the owner",}),"return":({"1 on success, 0 on failure",}),]),}),"discuss_elect_ownership":({({"mixed",}),({({"string",}),"message",({"string",}),"club_name",({"class","discussion_idea",}),"frog",({"string",}),"arg1",({"string",}),"arg2",}),(["main":({"This is the function used for electing whoever gets to have the nice owned room.",}),"param":({"message the message being sent","club_name the name of the club","frog the discussion item","arg1 the first argument","arg2 the second argument",}),]),}),"is_option":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if there is an option associated with theclub room.",}),"param":({"name the name of the optionto check",}),"return":({"1 if there is, 0 if not",}),]),}),])
protected_functions ([])
inherits (["/std/basic/setup":({}),])
main_docs (["main":({"THis is the controller object to deal with the club rooms.  Itkeeps track of which club owns the room, if the club room hasa board and any ownership issues that are needed.",}),"started":({"May 16th",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/am_time.h":1522061544,"/include/room/club_room.h":1522061544,"/include/clubs.h":1522061544,])
class_docs (["ownership":({0,({({"name",({"string",}),}),({"type",({"int",}),}),({"control_type",({"int",}),}),}),([]),}),])
file_name "/std/room/controller/club_room_controller.c"
last_changed 1522061544
