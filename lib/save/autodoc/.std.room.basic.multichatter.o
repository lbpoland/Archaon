#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_chat_min_max":({({"void",}),({({"int",}),"min",({"int",}),"max",}),(["main":({"Allows the chat interval to be changed.",}),"param":({"min minimum interval between chats (seconds)","max maximum interval between chats (seconds)",}),]),}),"make_chat":({({"void",}),({}),([]),}),"add_room_chats":({({"void",}),({({"string","*",}),"new_chats",}),(["main":({"Adds more chats to the existing set of room chatsmanaged by this chatter object.  This functionalways adds to the first set of chats even ifmultiple sets exist on the chatter.",}),"see":({"remove_room_chats","query_room_chats","/std/room/basic/chatter",}),"param":({"new_chats an array of new chat strings",}),]),}),"check_interactive":({({"int",}),({({"object",}),"thing",}),([]),}),"query_multichatter":({({"int",}),({}),([]),}),"setup_chatter":({({"void",}),({({"object",}),"my_room",({"mixed","*",}),"chat_args",}),(["main":({"Gives the chatter a room to chat at and the chat args.If you call it again it you can give the room anadditional set of chats without destroying thefirst, with the new set operating independently atthe new rate.  You can call this function as manytimes as you like.",}),"see":({"room_chat","query_room_chats","/std/room/basic/chatter",}),"param":({"my_room room object","chat_args chat data: ({ min, max, chats array })",}),]),}),"check_chat":({({"void",}),({}),(["main":({"Checks that the chatter is on and being activatedproperly from the room_handler. ",}),"see":({"/std/room/basic/chatter","/obj/handlers/room_handler",}),]),}),"query_room_chats":({({"mixed","*",}),({}),(["main":({"Returns the the set of room chatsmanaged by this chatter object.  ",}),"see":({"add_room_chats","remove_room_chats","room_chat","/std/room/basic/chatter",}),"example":({" ({ 120, 240, ({ \"A frog gimbles the curtains.\",                 \"A truly revolting smell drifts insidiously \"                 \"from the rug.\" }) })",}),"return":({"pointer to the mixed array of chat args",}),]),}),"remove_room_chats":({({"void",}),({({"string","*",}),"dead_chats",}),(["main":({"Removes chats from the set of room chatsmanaged by this chatter object.  If there are no chatsleft the chatter is destructed.  This functionremoves chats from any set by identifying allcopies in each set and removing them.",}),"see":({"add_room_chats","query_room_chats","/std/room/basic/chatter",}),"param":({"dead_chats an array of chat strings to remove",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"The multiple rates chatter inheritable for room chats.  This chatter handles multiple calls to room_chatby adding the chats independently with their own chat interval.",}),"author":({"Shaggy",}),"see":({"/std/room.c","room_chat",}),])
define_docs ([])
includes (["/include/room.h":1522061544,])
class_docs ([])
file_name "/std/room/basic/multichatter.c"
last_changed 1522061544
