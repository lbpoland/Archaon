#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_club_region":({({"string",}),({}),(["main":({"This method returns the region for the club control room.",}),"return":({"the region the clubs are created in",}),]),}),"set_club_control_type":({({"void",}),({({"int",}),"room_type",}),(["main":({"This method sets the type of the room.  This controls if the room is to be used for clubs, families or both.",}),"see":({"query_club_control_type()",}),"param":({"type the type of the club",}),"example":({"// Make the room only handle clubs.set_club_control_type(CLUB_ROOM_CLUB_ONLY);",}),]),}),"set_club_region":({({"void",}),({({"string",}),"region",}),(["main":({"This method sets the region for the club control room.",}),"param":({"region the region for the clubs created here",}),]),}),"query_percentage_cut":({({"int",}),({}),(["main":({"This method returns the percentage cut the room takes for depositsto the club account.",}),"see":({"set_percentage_cut()","do_deposit()",}),"return":({"the current percentage cut",}),]),}),"query_club_warning_message":({({"string",}),({}),(["main":({"This method creates the warning message for the club, saying how muchit costs per year and how everything works.  This should probablybe used in a sign or something in the main room.",}),"return":({"the warning message",}),]),}),"set_percentage_cut":({({"void",}),({({"int",}),"value",}),(["main":({"This method sets the percentage cut the room takes for deposits to theclub account.",}),"see":({"query_percentage_cut()","do_deposit()",}),"param":({"cut the nice new percentage cut",}),]),}),"is_valid_family_name":({({"int",}),({({"string",}),"name",}),(["main":({"This method is called to check the validity of a family name.",}),"param":({"name the name of the family.",}),"return":({"1 if valid, 0 if invalid.",}),]),}),"query_club_control_type":({({"int",}),({}),(["main":({"This method queries the type of the room.  This controls if the room is to be used for clubs, families or both.",}),"see":({"set_club_control_type()",}),"return":({"the control type of the room",}),]),}),"is_valid_club_name":({({"int",}),({({"string",}),"name",}),([]),}),])
protected_functions (["do_transfer":({({"int",}),({({"string",}),"money",({"string",}),"name",({"string",}),"from_account",({"string",}),"to_account",({"string",}),"reason",}),(["main":({"This method is used when someone wishes to withdraw some money from theclub account.",}),"param":({"money the amount of money to withdraw","club the club to withdraw the money from","from_account the account to withdraw money from","to_account the account to deposit the money to","reason the reason to withdraw money from the account",}),"return":({"1 if suecceded, 0 if failed.",}),]),}),"confirm_create_family":({({"void",}),({({"string",}),"str",({"string",}),"name",}),(["main":({"This method will confirm the creation of a family.",}),"param":({"str the yes or no string","name the name of the family to create",}),]),}),"do_recruiter_add":({({"int",}),({({"string",}),"name",({"string",}),"recruit",}),(["main":({"This method attempts to add a recruiter to the club.",}),"param":({"name the name of the club","recruit the person to add as a recruiter",}),]),}),"do_balance":({({"int",}),({({"string",}),"name",}),(["main":({"This method prints the balance of this club.",}),"see":({"do_deposit()",}),"param":({"name the name of the club to get the balance of",}),"return":({"1 on success, 0 on failure",}),]),}),"do_disband":({({"int",}),({({"string",}),"name",}),(["main":({"This method will forcibly disband the club.  This can only be donefor founder type clubs.",}),"see":({"do_change()","do_create()","disband_confirm()",}),"param":({"name the name of the club to disband",}),]),}),"do_withdrawl":({({"int",}),({({"string",}),"money",({"string",}),"name",({"string",}),"account",({"string",}),"reason",}),(["main":({"This method is used when someone wishes to withdraw some money from theclub account.",}),"param":({"money the amount of money to withdraw","club the club to withdraw the money from","account the account to withdraw money from","reason the reason to withdraw money from the account",}),"return":({"1 if suecceded, 0 if failed.",}),]),}),"do_recruiter_remove":({({"int",}),({({"string",}),"name",({"string",}),"recruit",}),(["main":({"This method attempts to add a recruiter to the club.",}),"param":({"name the name of the club","recruit the person to add as a recruiter",}),]),}),"do_announcement":({({"int",}),({({"string",}),"name",}),(["main":({"This method sets an announcement for the club.",}),"return":({"1 on success, 0 on failure",}),]),}),"do_force_election":({({"int",}),({({"string",}),"name",}),([]),}),"do_create_family":({({"int",}),({({"string",}),"name",}),(["main":({"This method is called to try and create a family of the specified name.",}),"param":({"name the name of the family to create",}),"return":({"1 on success, 0 on failure",}),]),}),"disband_confirm":({({"void",}),({({"string",}),"str",({"string",}),"name",}),(["main":({"This method is called to confirm the disbanding of the club.",}),"see":({"do_disband()","do_create()","create_confirm()",}),"param":({"str the response the user type","name the name of the club to disband",}),]),}),"confirm_create":({({"void",}),({({"string",}),"str",({"string",}),"name",}),(["main":({"This method will confirm the creation of a club.",}),"param":({"str the yes or no string","name the name of the club to create",}),]),}),"do_nominate":({({"int",}),({({"string",}),"person",({"string",}),"position",({"string",}),"club_name",}),(["main":({"This method nominates a person into a position in a club.",}),"see":({"/obj/handlers/club_handler.c","do_vote()",}),"param":({"person the person to nominate","position the position to nominate them too","club_name the name of the club",}),"return":({"1 on success, 0 on failure",}),]),}),"finish_description":({({"void",}),({({"string",}),"describe",({"string",}),"name",}),(["main":({"This is the method that is called when the club description has beenfinished edited.  It will set the description on the club handler.",}),"see":({"do_describe()",}),"param":({"describe the new description","name the name of the club to describe",}),]),}),"do_vote":({({"int",}),({({"string",}),"person",({"string",}),"position",({"string",}),"club_name",}),(["main":({"This method attempts to vote for someone in a club.",}),"see":({"do_nominate()","/obj/handlers/club_handler.c",}),"param":({"person the person to vote for","position the position to vote for them in","club_name the name of the club to vote for them in",}),"return":({"1 on success, 0 on failure",}),]),}),"do_describe":({({"int",}),({({"string",}),"name",}),(["main":({"This method sets the club description.",}),"see":({"finish_description()",}),"param":({"name the name of the club to describe",}),]),}),"do_financials":({({"int",}),({({"string",}),"name",({"string",}),"account",}),(["main":({"This method prints out financial reports for the club.",}),"see":({"do_deposit()","do_balance()",}),"param":({"club_name the name of the club to get financials on",}),"return":({"1 on success, 0 on failure",}),]),}),"do_change_option":({({"int",}),({({"string",}),"name",({"string",}),"option",}),(["main":({"This allows the club to change its options.",}),"see":({"do_create()","do_disband()","do_change()",}),"param":({"name the name of the club to change","option the option to change on the club",}),]),}),"do_change":({({"int",}),({({"string",}),"name",({"string",}),"type",}),(["main":({"This allows the club to change into a new type.",}),"see":({"do_create()","do_disband()",}),"param":({"name the name of the club to change","type the type to change the club into",}),]),}),"do_club_list_member":({({"int",}),({({"string",}),"name",}),(["main":({"This method does a listing of all the clubs that a certain person isin.",}),"see":({"/std/basic/club_listing.c",}),"param":({"name the person whose name to check",}),"return":({"1 on success, 0 on failure",}),]),}),"do_deposit":({({"int",}),({({"string",}),"mon",({"string",}),"name",({"string",}),"account",({"string",}),"reason",}),(["main":({"This method allows to you deposit money into the club.",}),"see":({"do_balance()","query_percentage_cut()","set_percentage_cut()",}),"param":({"obs the money objects to deposit","name the name of the club to deposit them to","reason the reason of the deposit",}),"return":({"1 on success, 0 on failure",}),]),}),"do_create":({({"int",}),({({"string",}),"name",}),(["main":({"This method is called to try and create a club of the specified name.All clubs when they first start are personal clubs.  Once they havea certain number of members, they can convert to being an electedtype of club if they wish.",}),"param":({"name the name of the club to create",}),"return":({"1 on success, 0 on failure",}),]),}),"do_insignia":({({"int",}),({({"string",}),"name",({"int",}),"num",}),(["main":({"This method will create a bunch of insignia for the club.",}),"param":({"number the number of insignia to create","name the name of the club to create insignia for",}),]),}),])
inherits (["/std/room/inherit/club_discuss":({}),"/std/basic/club_listing":({}),])
main_docs (["main":({"This room allows people to create clubs and do fluffy club stuff ifthey need to.",}),"started":({"Sun Oct  4 02:24:46 EDT 1998",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/player_handler.h":1522061544,"/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/am_time.h":1522061544,"/include/clubs.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/room/inherit/club_control_room.c"
last_changed 1522061544
