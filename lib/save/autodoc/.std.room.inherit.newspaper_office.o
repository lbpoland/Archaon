#/obj/handlers/autodoc/autodoc_file.c
public_functions (["is_setter":({({"int",}),({({"string",}),"word",}),(["main":({"This method checks to see if the specified person is an setter forthe paper or not.",}),"param":({"word the person to check",}),"return":({"1 if they are a setter",}),]),}),"query_article_log_file_name":({({"string",}),({}),(["main":({"The file name of the log file for article events.",}),"return":({"the article log file name",}),]),}),"add_setter":({({"void",}),({({"string",}),"word",}),(["main":({"This method adds a new setter to the paper.",}),"param":({"word the new setter to add",}),]),}),"set_save_directory":({({"void",}),({({"string",}),"dir",}),(["main":({"This method sets the directory we are to use for all thetemporary files and data.  The actual pubished data will be storedby the newspaper handler.",}),"param":({"dir the directory to put stuff in",}),]),}),"is_locked":({({"int",}),({({"class","article",}),"art",}),(["main":({"This method checks to see if the specified article is lockedor not.",}),"param":({"art the article to check",}),"return":({"1 if it is locked, 0 if not",}),]),}),"query_category":({({"string",}),({({"string",}),"category",}),(["main":({"This method tries to find a category based on some fuzzy matching.",}),"param":({"category the category to lookup",}),"return":({"the fixed up category name",}),]),}),"query_ads":({({"class","advert","*",}),({}),([]),}),"ownership_change":({({"void",}),({({"string",}),"old_owner",({"string",}),"new_owner",}),(["main":({"This method is called by the housing system when the ownership changes.",}),"param":({"old_owner the old owner","new_owner the newowner",}),]),}),"save_article_text_by_file":({({"void",}),({({"string",}),"fname",({"string",}),"text",}),(["main":({"This method is used by the web, it loads the article by the file name.",}),]),}),"query_the_paper_name":({({"string",}),({}),(["main":({"This method returns the name of the paper with a 'the' in front.",}),"return":({"the name of the paper",}),]),}),"load_article_text_by_file":({({"string",}),({({"string",}),"fname",}),(["main":({"This method is used by the web, it loads the article by the file name.",}),]),}),"query_bank_branch":({({"string",}),({}),(["main":({"This method returns the bank branch to use for depositing money foreditions.",}),"return":({"the bank branch to use",}),]),}),"is_reporter":({({"int",}),({({"string",}),"word",}),(["main":({"This method checks to see if the specified person is an reporter forthe paper or not.",}),"param":({"word the person to check",}),"return":({"1 if they are a reporter",}),]),}),"is_owner":({({"int",}),({({"string",}),"word",}),(["main":({"This method checks to see if the specified person is an owner ofthe paper or not.",}),"param":({"word the person to check",}),"return":({"1 if they are a owner",}),]),}),"add_sponsor":({({"void",}),({({"string",}),"word",}),(["main":({"This method adds a new sponsor to the paper.",}),"param":({"word the new sponsor to add",}),]),}),"do_category_cost":({({"int",}),({({"string",}),"category",({"string",}),"cost",}),(["Ignore":({"yes ",}),]),}),"query_all_editors":({({"string","*",}),({}),(["main":({"This method returns all the current editors of the magazine.",}),"return":({"all the current editors",}),]),}),"query_log_file_name":({({"string",}),({}),(["main":({"The file name of the log file for events.",}),"return":({"the log file name",}),]),}),"remove_reporter":({({"void",}),({({"string",}),"word",}),(["main":({"This method removes a reporter from the paper.",}),"param":({"word the reporter to remove",}),]),}),"query_all_sponsors":({({"string","*",}),({}),(["main":({"This method returns all the current sponsors of the magazine.",}),"return":({"all the current sponsors",}),]),}),"set_article_title_by_file":({({"void",}),({({"string",}),"fname",({"string",}),"title",}),(["main":({"This method is used by the web, it loads the article by the file name.",}),]),}),"do_category_remove":({({"int",}),({({"string",}),"category",}),(["Ignore":({"yes ",}),]),}),"remove_editor":({({"void",}),({({"string",}),"word",}),(["main":({"This method removes a editor from the paper.",}),"param":({"word the editor to remove",}),]),}),"query_article_index":({({"int",}),({({"string",}),"match",}),(["main":({"This method returns the index of the article in the article array.",}),"return":({"the article index",}),]),}),"set_bank_branch":({({"void",}),({({"string",}),"bank",}),(["main":({"This method sets the bank branch to use for depositing money wheneditions are made.",}),"param":({"bank the bank branch to use",}),]),}),"add_reporter":({({"void",}),({({"string",}),"word",}),(["main":({"This method adds a new reporter to the paper.",}),"param":({"word the new reporter to add",}),]),}),"do_everyone_status":({({"int",}),({}),(["main":({"This is the status that everyone can see, not just the employees.",}),]),}),"query_all_setters":({({"string","*",}),({}),(["main":({"This method returns all the current setters of the magazine.",}),"return":({"all the current setters",}),]),}),"query_all_reporters":({({"string","*",}),({}),(["main":({"This method returns all the current reporters of the magazine.",}),"return":({"all the current reporters",}),]),}),"do_advert_list":({({"int",}),({}),(["Ignore":({"yes ",}),]),}),"load_article_text":({({"string",}),({({"class","our_article",}),"art",}),(["main":({"This method loads the text of an article.",}),]),}),"move_article":({({"int",}),({({"int",}),"index",({"string",}),"up_down",}),(["main":({"This method moves an article up or down in the current article list.",}),"param":({"index the index of the article to move","up_down move it up or down",}),]),}),"query_paper_name":({({"string",}),({}),(["main":({"This method returns the name of the paper.",}),"return":({"the name of the paper",}),]),}),"is_sponsor":({({"int",}),({({"string",}),"word",}),(["main":({"This method checks to see if the specified person is a sponsor forthe paper or not.",}),"param":({"word the person to check",}),"return":({"1 if they are a sponsor",}),]),}),"is_postponed":({({"int",}),({({"class","article",}),"art",}),(["main":({"This method checks to see if the specified article is postponedor not.",}),"param":({"art the article to check",}),"return":({"1 if it is postponed, 0 if not",}),]),}),"do_lock":({({"int",}),({({"int",}),"locked",}),(["Ignore":({"yes ",}),]),}),"do_category_list":({({"int",}),({}),(["Ignore":({"yes ",}),]),}),"set_paper_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method sets the name of the paper.",}),"param":({"name the new name of the paper",}),]),}),"is_editor":({({"int",}),({({"string",}),"word",}),(["main":({"This method checks to see if the specified person is an editor forthe paper or not.",}),"param":({"word the person to check",}),"return":({"1 if they are a editor",}),]),}),"query_next_article_file_name":({({"string",}),({}),(["main":({"This returns the next number to use for an article.",}),"return":({"the next article number",}),]),}),"update_commands":({({"void",}),({({"string",}),"word",}),(["main":({"This method moves the player in and out of the room to fix up theircommands.",}),"param":({"word the player to move",}),]),}),"add_editor":({({"void",}),({({"string",}),"word",}),(["main":({"This method adds a new editor to the paper.",}),"param":({"word the new editor to add",}),]),}),"query_current_edition":({({"int",}),({}),(["main":({"This method returns the current edition of the newspaper./",}),"return":({"the current edition of the newspaper",}),]),}),"set_owner":({({"void",}),({({"string",}),"person",}),(["main":({"This method sets the current owner of the paper.",}),"param":({"person the new owner",}),]),}),"set_proxy":({({"void",}),({({"string",}),"proxy",}),(["main":({"This method sets up a proxy for the room.  A proxy means all the commandsare mirrored to the real location, so save files do not get messed up.You set this if you have any extra rooms you want to be able to controlthe paper.",}),"param":({"proxy the proxy to set",}),]),}),"do_category_open":({({"int",}),({({"string",}),"category",({"string",}),"open",}),(["Ignore":({"yes ",}),]),}),"query_all_payees":({({"mapping",}),({}),(["main":({"This method returns all the current payees of the magazine.",}),"return":({"who is to be payed and how much",}),]),}),"do_category_cost_per_ten_chars":({({"int",}),({({"string",}),"category",({"string",}),"cost",}),(["Ignore":({"yes ",}),]),}),"query_articles":({({"class","our_article","*",}),({}),([]),}),"query_owner":({({"string",}),({}),(["main":({"This method returns the current owner of the paper.",}),"return":({"the owner of the paper",}),]),}),"query_proxy":({({"string",}),({}),(["main":({"This method returns the proxy for this room.",}),"return":({"the proxy for the room",}),]),}),"remove_sponsor":({({"void",}),({({"string",}),"word",}),([]),}),"query_article":({({"class","our_article",}),({({"string",}),"match",}),(["main":({"This method finds an article based on a string.",}),"return":({"the article",}),]),}),"remove_setter":({({"void",}),({({"string",}),"word",}),(["main":({"This method removes a setter from the paper.",}),"param":({"word the setter to remove",}),]),}),"query_all_articles":({({"class","article","*",}),({}),(["main":({"This method returns the 'article' class bits of the articles.",}),"return":({"all the articles.\\",}),]),}),"query_total_profit":({({"int",}),({({"int",}),"num_articles",}),(["main":({"This method figures out the total profit from the paper.",}),]),}),"board_access_check":({({"int",}),({({"int",}),"type",({"string",}),"board",({"object",}),"previous",({"string",}),"name",}),(["main":({"This method is here to control access to a board if one is requested.It allows only reporters to be able to see or write to it and itallows editors to be able to eat messages from it.",}),]),}),"do_submit_add":({({"int",}),({({"string",}),"category",}),(["Ignore":({"yes ",}),]),}),"delete_article":({({"void",}),({({"class","our_article",}),"article",}),(["main":({"This method deletes any bitsof the article off the disk.",}),"param":({"article the article to delete",}),]),}),"save_article_text":({({"void",}),({({"class","our_article",}),"art",({"string",}),"text",}),(["main":({"This method saves an article.",}),]),}),"do_category_add":({({"int",}),({({"string",}),"category",}),(["Ignore":({"yes ",}),]),}),])
protected_functions (["save_me":({({"void",}),({}),(["main":({"Saves the data in the file.",}),]),}),"load_me":({({"void",}),({}),(["main":({"Loads the data in the file.",}),]),}),])
inherits ([])
main_docs (["changed":({"Pinkfish Fri Apr 27 12:08:29 PDT 2001Turned into an inherit and made to use a newspaper handler fordistributing the actual text.",}),"main":({"An office from which a player run newspaper can be run.",}),"author":({"Obilix",}),])
define_docs (["NEWSPAPER_LOCK_FLAG":([]),"NEWSPAPER_POSTPONE_FLAG":([]),])
includes (["/include/board.h":1522061544,"/include/nroff.h":1522061544,"/include/mail.h":1522061544,"/include/player_handler.h":1522061544,"/include/housing.h":1522061544,"/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/room/newspaper.h":1522061544,"/include/money.h":1522061544,])
class_docs (["category_data":({0,({({"cost_per_add",({"int",}),}),({"cost_per_ten_chars",({"int",}),}),({"open",({"int",}),}),}),([]),}),"reporter":({0,({({"date_added",({"int",}),}),({"num_articles",({"int",}),}),({"total_payed",({"int",}),}),}),([]),}),"payee_data":({0,({({"paid",({"int",}),}),({"message",({"string",}),}),}),([]),}),"our_article":({0,({({"art",({"class","article",}),}),({"flags",({"int",}),}),({"length",({"int",}),}),({"suggested_payment",({"int",}),}),}),([]),}),])
file_name "/std/room/inherit/newspaper_office.c"
last_changed 1522061544
