#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_completion_time":({({"int",}),({({"string",}),"area",({"class","nomic_motion",}),"motion",}),(["main":({"This method figures out the compleion time for the specified motion.",}),"param":({"area the area to check","the motion in the area",}),"return":({"the completion time",}),]),}),"create_area":({({"void",}),({({"string",}),"area",}),(["main":({"This method creates a new area.",}),"param":({"area the new area",}),]),}),"check_for_completions":({({"void",}),({}),(["main":({"This method figures out all the current things and when they completed.",}),]),}),"rule_as_html":({({"string",}),({({"class","nomic_rule",}),"rule",}),(["main":({"This method turns a rule into html.",}),"param":({"rule the rule to turn into html",}),"return":({"the rule as a string",}),]),}),"add_create_rule_motion":({({"int",}),({({"string",}),"area",({"int",}),"type",({"string",}),"text",({"string",}),"creator",}),(["main":({"This method puts a new rule up for voting.  It is first placed intothe hands of the magistrates, then into the hands of the players.",}),"param":({"area the area for the rule to be voted on in","type the type of the rules","text the text associated with the new rule",}),"return":({"1 on success, 0 on failure",}),]),}),"add_move_rule_type_motion":({({"int",}),({({"string",}),"area",({"int",}),"rule_no",({"int",}),"type",({"string",}),"creator",}),(["main":({"This method puts up a request to move a rule from one type to another.",}),"param":({"area the area to do the move in","rule_no the rule number to move","type the type to move the rule to","creator the creator of this request",}),"return":({"1 on success, 0 on failure",}),]),}),"has_voted_for_motion":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"voter",}),(["main":({"This method checks to see if the person has voted for the specifiednew rule/amendment/whatever",}),"param":({"area the area to check","id the id to check","voter the person to check for voting",}),"return":({"1 on success, 0 on failure",}),]),}),"remove_rule_motion":({({"int",}),({({"string",}),"area",({"int",}),"rule_no",({"string",}),"creator",}),(["main":({"This method remove a request to amend a rule.",}),"param":({"area the area to put the amendment in","rule_no the rule to amend","amendment the amendment text","creator the person doing the amendment",}),"return":({"1 on success, 0 on failure",}),]),}),"motion_as_html":({({"string",}),({({"string",}),"area",({"class","nomic_motion",}),"motion",}),(["main":({"This method returns the new motion as a string.",}),"param":({"area the area the motion is defined in","motion the new motion to turn into a styring",}),"return":({"the string version of the motion",}),]),}),"update_immutables":({({"void",}),({({"string",}),"area",}),(["main":({"This method updates the immutable laws with the new set of general rules.",}),"param":({"area the area to update.",}),]),}),"comment_on_motion":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"comment_text",({"string",}),"commenter",}),(["main":({"This method adds a comment to the new rule/amendment/whatever.",}),"param":({"area the area the comment is to go in","id the rule update id","comment the comment to make","commenter the person commenting",}),"return":({"1 on success, 0 on failure",}),]),}),"query_motion":({({"class","nomic_motion",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method returns a nice new rule.",}),"param":({"area the areat to look in","id the id of the new rule to find",}),"return":({"1 on success, 0 on failure",}),]),}),"send_council_inform":({({"void",}),({({"string",}),"area",({"int",}),"only_magistrates",({"string",}),"mess",}),(["main":({"This method sends informs to all the specified council of some sort ofnifty council event.",}),"param":({"area the area the council is for","only_magistrates only send it to the magistrates?","mess the message to send",}),]),}),"find_motion":({({"class","nomic_motion",}),({({"string",}),"area",({"int",}),"rule_no",({"int",}),"type",}),(["main":({"This method finds the specified motion.",}),"param":({"area the area to look in","rule_no the rule number","type the type of the motion",}),"return":({"the motion if successful, 0 if not",}),]),}),"vote_for_motion":({({"int",}),({({"string",}),"area",({"int",}),"id",({"int",}),"vote_type",({"string",}),"voter",}),(["main":({"This method votes for the specified ammentment/whatever.",}),"param":({"area the area to vote in","id the id to vote for","vote_type the type of the vote","voter the person is voting",}),"return":({"1 on success, 0 on failure",}),]),}),"add_amend_rule_motion":({({"int",}),({({"string",}),"area",({"int",}),"rule_no",({"string",}),"amendment",({"string",}),"creator",}),(["main":({"This method adds in a request to amend a rule.",}),"param":({"area the area to put the amendment in","rule_no the rule to amend","amendment the amendment text","creator the person doing the amendment",}),"return":({"1 on success, 0 on failure",}),]),}),"motion_as_string":({({"string",}),({({"int",}),"indent",({"string",}),"area",({"class","nomic_motion",}),"motion",({"int",}),"brief",}),(["main":({"This method returns the new motion as a string.",}),"param":({"indent the indentation to putin front of all the lines","area the area the motion is defined in","motion the new motion to turn into a styring","brief disable comments",}),"return":({"the string version of the motion",}),]),}),"complete_motion":({({"int",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method completes the vote on the specified new rule.",}),"param":({"area the area to complete the rule in","id the id to complete",}),"return":({"1 on success, 0 on failure",}),]),}),"amend_motion":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"amend_text",({"string",}),"amender",}),(["main":({"This method adds an amendment to the new rule/amendment/whatever, thisrewrites the text of the ammendment of whatever it is.",}),"param":({"area the area the amendmend is to go in","id the rule update id","amendmend the amendmend to make","amendmender the person amendmending",}),"return":({"1 on success, 0 on failure",}),]),}),"query_all_motions":({({"class","nomic_motion","*",}),({({"string",}),"area",}),(["main":({"This method returns all the new rules for the specified area.",}),"param":({"area the area to return the new rules in",}),"return":({"the array of new rules",}),]),}),"query_votes_for_motion":({({"int","*",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method returns the current set of votes for the specied new rule.",}),"param":({"area the area to lookup the votes in","id the idea to check",}),"return":({"({ yes, no, abstain })",}),]),}),])
protected_functions ([])
inherits (["/obj/handlers/inherit/case_control":({}),"/obj/handlers/inherit/nomic_rules":({}),"/obj/handlers/inherit/citizen_elections":({}),])
main_docs (["main":({"This handler is for the control of player houses.",}),"started":({"Fri Jun 23 22:50:02 PDT 2000",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/nomic_system.h":1522061544,"/include/player.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/inherit/player_council.c"
last_changed 1522061544
