#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_snowing":({({"int",}),({({"object",}),"env",}),(["main":({"Find out if its snowing in a given room.",}),"param":({"env the room",}),"return":({"1 or 0 for true or false.",}),]),}),"query_moon_string":({({"string",}),({({"object",}),"env",}),(["main":({"Get the appropriate moon string. This is almost completely from the oldsystem. I don't understand the moon.",}),"param":({"env the room to check",}),"return":({"the moon string.",}),]),}),"temp_string":({({"string",}),({({"int",}),"temp",}),(["main":({"Return a temperature string equating to the temperature passed",}),"param":({"int The temperature in Celcius",}),"return":({"string a temperature string.",}),]),}),"query_stars":({({"int",}),({({"object",}),"env",}),(["main":({"Return the number of currently visible stars as a percentage.",}),"return":({"A number 0-100, 0 being no stars.",}),]),}),"query_raining":({({"int",}),({({"object",}),"env",}),(["main":({"Find out if its raining in a given room.",}),"param":({"env the room",}),"return":({"1 or 0 for true or false.",}),]),}),"query_tod":({({"string",}),({}),(["main":({"Return a string for the period of the day",}),"return":({"night, morning, midday, afternoon or evening.",}),]),}),"weather_notify":({({"int",}),({({"object",}),"which_room",({"int",}),"notifications",}),(["main":({"Add a room to the list of rooms to notify about weather.  Notificationsare an ORed (|) combination of the #defines in /include/climate.hIE: To inform about temperature and rain changes, callweather_notify( room, (NOTIFY_TEMPERATURE | NOTIFY_RAIN) );",}),"param":({"which_room the room to be notified","notifications a bitmap of notifications",}),"return":({"success or failure (1 or 0)",}),]),}),"rain_string":({({"string",}),({({"object",}),"env",}),(["main":({"Creates a string showing how heavily it is raining.",}),"param":({"env the room room to check in",}),"return":({"the rain string",}),]),}),"minute_number":({({"int",}),({}),(["main":({"Find out which minute of the day (0 - 1439) it is.",}),"return":({"the minute.",}),]),}),"query_moon_state":({({"int",}),({}),(["main":({"Query the state of the moon.",}),"return":({"an integer indicating the state of the moon.0 - no moon, 1 - crescent, 2 - quarter, 3 - half, 4 - three quarter,5 - gibbous, 6 - full.",}),]),}),"query_season":({({"string",}),({}),(["main":({"Return which of the 4 seasons we are in.",}),"return":({"spring, summer, autumn or winter.",}),]),}),"check_umbrella":({({"int",}),({({"object",}),"ob",}),([]),}),"query_sunset":({({"int",}),({({"int",}),"doy",}),(["main":({"Find out when sunset will be on a given day of the year.",}),"param":({"doy Day of the Discworld common year.",}),"return":({"sunset time (in seconds past midnite).",}),]),}),"day_number":({({"int",}),({}),(["main":({"Find out which day of the Disc (common) year it is.",}),"return":({"the day of the year.",}),]),}),"weather_string":({({"varargs","string",}),({({"object",}),"env",({"string",}),"obscured",}),(["main":({"Creates the weather string which is put into room descs.",}),]),}),"query_star_string":({({"string",}),({({"object",}),"env",}),(["main":({"Returns a string describing the current visible stars.",}),"return":({"a string for the visible stars.",}),]),}),"query_darkness":({({"int",}),({({"object",}),"env",}),(["main":({"return percentage of lightshould be dependant on the base amount of light, day or night time andcloud cover.",}),"param":({"the room",}),"return":({"a percentage",}),]),}),"snow_string":({({"string",}),({({"object",}),"env",}),(["main":({"Creates a string showing how heavily it is snowing.",}),"param":({"env the room room to check in",}),"return":({"the snow string",}),]),}),"query_visibility":({({"int",}),({({"object",}),"env",}),(["main":({"return percentage of visibility.It should also depend on things like rain/snow etc, anything whichwill effect visibility.",}),"param":({"the room",}),"return":({"a percentage",}),]),}),"cloud_string":({({"string",}),({({"object",}),"env",}),(["main":({"A string giving a nice description of the cloud types.",}),"param":({"env the environment to find the clouds for",}),"return":({"the current clouds",}),]),}),"query_temperature":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the temperature of a given room",}),"param":({"env the room",}),"return":({"a temperature in Celcius",}),]),}),"sleet_string":({({"string",}),({({"object",}),"env",}),(["main":({"Creates a string showing how heavily it is sleeting.",}),"param":({"env the room room to check in",}),"return":({"the sleet string",}),]),}),"query_sunrise":({({"int",}),({({"int",}),"doy",}),(["main":({"Find out when sunrise will be on a given day of the year.",}),"see":({"minute_number()","day_number()",}),"param":({"doy Day of the Discworld common year.",}),"return":({"sunrise time (in seconds past midnite).",}),]),}),"query_windsp":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the wind speed in a given room",}),"param":({"env the room",}),"return":({"the wind speed in miles per hour.",}),]),}),"query_moon_phase":({({"string",}),({}),(["main":({"Find out which phase of the moon we're currently in.",}),"return":({"a string for the phase of the moon.",}),]),}),"query_cloud":({({"int",}),({({"object",}),"env",}),(["main":({"Find out the cloud cover of a given room",}),"param":({"env the room",}),"return":({"an open ended percentage. Greater than 100 means heavier cover.",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"An attempt at a new weather handler for Discworld.Ceres@Discworld 14/4/96Having thought about the way weather works (and Discworlds interestingmeteorology) I decided not to try and implement some model of realworldweather. Instead regional variations in weather are handled byregional climate properties. This system will handle diurnal and seasonalvariations and that's about it. Hopefully that will make it moreunderstandable, usable and efficient.<p>Basic Operation<br>---------------<br>The weather is based on weather 'pattern's. The pattern lasts for severalhours and is calculated from the 'seasonal' norm and the 'variance'. The'current' weather will tend towards the pattern weather.<p>The pattern depends on the climate. The climates are taken from the KoppenClimate Classification system. The possible climates are:<br>tropical<br>- rainforest 'Af' eg. amazon, congo, malaysia<br>- monsoon 'Am' <br>- savanna 'Aw' eg. caribbean, tropical africa, central america<br>desert<br>- arid 'Bw'<br>- semi-arid 'Bs' <br>mediterranean (aka Moist Subtropical Mid-Latitude Climates)<br>- humid subtropical 'Cfa' eg. Souteast US (florida)<br>- mediterranean 'Cs' eg. california, south africa, western/central australia<br>- marine 'Cfb' eg. US west coast, nw europe<br>continental<br>- dry winters 'Dw' <br>- dry summers 'Ds'<br>- wet 'Df'<br>polar<br>- tundra 'Et'<br>- frozen 'Ef'<br>highland 'H' <p>The default for a room is mediterranean marine (Cfb).<p>The actual temparture in a room will depend on the current weather for thatclimate, local modifiers (climate property), diurnal variations andvariance.<p>Thus update_patttern() is called once every hour (CYCLE_SPEED) andupdate_weather() is called every 5 minutes (UPDATE_SPEED).<p>Decisions<br>---------<br>Calculation of the general weather has been moved intoupdate_weather. Rather than doing it on a room by room basis everytimesomeone looks! Instead, local climate controls will be added verbatim tothe current global weather. This will improve efficiency massively, but willreduce the overall weather variations.<p>Principles<br>----------<br>Rain/sleet/snow depends on cloud density and temperature.<br>If it's windy and lots of cloud density we might get a thunder storm.Cloud cover should lower temperature as should wind.<p>Usage<br>-----<br>To alter the weather in a given room the easiest approach is to set theclimate. Individual room or area variations can be done by adding aclimate property.<br>The property should contain three integers, temperature, cloud cover andwind speed. These modify the default values for the room.<p>For example:<br>add_property(\"climate\", ({10, -50, 0});<br>This will increase the temperature by 10C, reduce the cloud coverby 50% and make no change to the wind speed.<p>To completely alter the weather in a room you need to define the functionroom_weather() as follows:<br>  int *room_weather(int temp, int cloud, int wind, int rain);<br>Your room_weather function will be called with the values the room wouldordinarily receive and should return the new temperature, cloud cover,wind speed and rain type values that you desire.<p>If you need to make your room react to changes in the weather you can usethe weather_notify() system to be told when the weather changes.<br>This should only be done for a small number of rooms or the lag will beexcessive.<p>Changed Jun 3 1996 by Grampa to include weather notifications for rooms.<p>",}),"index":({"weather",}),])
define_docs (["DIF(x,":([]),"UPDATE_SPEED":([]),"CYCLE_SPEED":([]),"FILE_NAME":([]),"DIY":([]),])
includes (["/include/am_time.h":1522061544,"/include/climate.h":1522061544,"/include/weather.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/weather.c"
last_changed 1522061544
