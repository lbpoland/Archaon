#/obj/handlers/autodoc/autodoc_file.c
public_functions (["do_query_bug_details":({({"int",}),({({"int",}),"bug_id",({"function",}),"finished",}),(["main":({"This method sets up a call to return the details of the error.",}),"param":({"bug_id the id of the bug to get the details from","finished the function to call when things are finished",}),"return":({"1 on success, 0 on failure",}),]),}),"build_sql_update":({({"string",}),({({"int",}),"id",({"string",}),"field",({"mixed",}),"value",}),(["main":({"This method builds an sql update from the given inputs.",}),"param":({"id the id of the bug to update","field the field to update","value the new value of the field",}),]),}),"finish_error_replies":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"query",}),(["main":({"This method finishes doing a reply lookup.",}),]),}),"do_add_error_reply":({({"int",}),({({"int",}),"bug_id",({"string",}),"from",({"string",}),"to",({"string",}),"subject",({"string",}),"message",}),(["main":({"THis method adds an error reply into the system.  THis is a debug messageand only useful until all the error setups are connected together properly.",}),]),}),"do_error_replies":({({"int",}),({({"string",}),"recipient",({"int",}),"only_new",({"function",}),"finished",}),(["main":({"This method looks for all the error replies for the specific recipient.",}),"param":({"recipient the recipient","only_new only new messages","finished the function to call on finishing",}),]),}),"do_comment":({({"int",}),({({"int",}),"id",({"string",}),"user",({"string",}),"comment",({"function",}),"finished",}),(["main":({"This method adds a comment into the database.",}),"param":({"id the bug to comment on","user the user making the comment","comment the comment to make","finished the finished function",}),]),}),"finish_details":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"query",}),(["main":({"This method finishes a details based query.",}),"param":({"type the type returned (error etc)","data the data returned","finished the function to call on finish",}),]),}),"do_query_bug_summary":({({"int",}),({({"class","error_query",}),"query",({"function",}),"finished",}),(["main":({"This method sets up a query for the specific data, this returns thebug summary for all the found bugs.",}),"param":({"query the class to use for the query","finished the function to call when things are finished",}),"return":({"1 on success, 0 on failure",}),]),}),"create_error_forward":({({"class","error_forward",}),({({"mapping",}),"map",}),(["main":({"This method creates the error forward from the input mapping.",}),"param":({"map the mapping to create the forward from",}),"return":({"the error forward class",}),]),}),"finish_status_query":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"status",({"int",}),"nomail",({"string",}),"user",({"string",}),"subject",({"string",}),"message",}),([]),}),"do_query_open_bugs_for_fname":({({"int",}),({({"string",}),"fname",({"function",}),"finished",}),(["main":({"This returns the bug summary for all the open bugs associated withthe specified file.",}),"param":({"fname the file name","finished the function to call when things are finished",}),"return":({"1 on success, 0 on failure",}),]),}),"do_status_error_reply":({({"int",}),({({"int",}),"id",({"string",}),"status",({"function",}),"finished",}),(["main":({"This method sets the error reply status to something useful.",}),"param":({"id the id of the error reply","status the new status","finished the finished fuinction",}),"return":({"1 if the setup is successful, 0 if not",}),]),}),"create_error_complete":({({"class","error_complete",}),({({"class","error_details",}),"details",}),(["main":({"This method creates the complete error class from the error detailspassed in.",}),"param":({"details the details to make the complete error from",}),]),}),"do_change_status":({({"int",}),({({"int",}),"id",({"string",}),"status",({"int",}),"nomail",({"string",}),"subject",({"string",}),"user",({"string",}),"message",({"function",}),"finished",}),(["main":({"This method changes the status of the bug, it also automaticalysends a message to the person who reported the bug and who the bugis assigned to if someone else changes it.",}),"param":({"id the id of the bug to change","status the new status of the bug","nomail dont send any mail","user the user who is making the change","subject the subject of the mail","message the main body of the mail",}),"return":({"0 on failure and 1 on success",}),]),}),"do_assign_bug_to":({({"int",}),({({"int",}),"id",({"string",}),"assigned_to",({"function",}),"finished",}),(["main":({"This method changes who the bug is assigned to.",}),"param":({"id the id of the bug to change","assigned_to the person it is assigned to",}),"return":({"1 on success, 0 on failure",}),]),}),"create_error_details":({({"class","error_details",}),({({"mapping",}),"map",}),(["main":({"This method creates the error details from the return data.",}),]),}),"finish_summary":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"query",}),(["main":({"This method finishes a summary based query.",}),"param":({"type the type returned (error etc)","data the data returned","finished the function to call on finish",}),]),}),"do_forward":({({"int",}),({({"int",}),"id",({"string",}),"user",({"string",}),"dir",({"function",}),"finished",}),(["main":({"This method changes the status of the bug, it also automaticalysends a message to the person who reported the bug and who the bugis assigned to if someone else changes it.",}),"param":({"id the id of the bug to change","user the user","dir the directory",}),"return":({"0 on failure and 1 on success",}),]),}),"finish_comments":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"class","error_complete","*",}),"errors",({"string",}),"ids",({"string",}),"query",}),(["main":({"This method updates the comments based on the query results.",}),"param":({"type type type","fdata the return data from the query","function finsiished the finished function","errors the errors results we are updating","query the ids list we are using",}),]),}),"finish_update":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"query",}),(["main":({"This method finishes an update based query.",}),"param":({"type the type returned (error etc)","data the data returned","finished the function to call on finish",}),]),}),"finish_details_error_replies":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"class","error_complete","*",}),"errors",({"string",}),"ids",({"string",}),"query",}),(["main":({"This method updates the comments based on the query results.",}),"param":({"type type type","fdata the return data from the query","function finsiished the finished function","errors the errors results we are updating","query the ids list we are using",}),]),}),"create_error_summary":({({"class","error_summary",}),({({"mapping",}),"map",}),(["main":({"This method creates the error summary from the input mapping.",}),"param":({"map the mapping to create the summary from",}),"return":({"the error summary class",}),]),}),"do_change_category":({({"int",}),({({"int",}),"id",({"string",}),"category",({"function",}),"finished",}),(["main":({"This method changes the category of the bug.  The category is in the set'room', 'object', 'help', 'ritual', 'spell', 'command', 'general'.",}),"param":({"id the id of the bug to update","category the new category of the bug",}),"return":({"1 on success, 0 on failure",}),]),}),"do_query_open_bugs_in_dir":({({"int",}),({({"string",}),"dir",({"function",}),"finished",}),(["main":({"This method finds the bug summary for all the open bugs in thespecified directory.",}),"param":({"dir the directory to find the open bugs in","finished the function to call when things are finished",}),"return":({"1 on success, 0 on failure",}),]),}),"finish_forwards":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"class","error_complete","*",}),"errors",({"string",}),"query",}),(["main":({"This method updates the comments based on the query results.",}),"param":({"type type type","fdata the return data from the query","function finsiished the finished function","errors the errors results we are updating","query the ids list we are using",}),]),}),"create_error_replies":({({"class","error_replies",}),({({"mapping",}),"map",}),(["main":({"This method creates the error reply class from the sql query.",}),"param":({"map the mapping to convert to the class",}),"return":({"the nice new error reply class",}),]),}),"create_error_comment":({({"class","error_comment",}),({({"mapping",}),"map",}),(["main":({"This method creates the error comment from the input mapping.",}),"param":({"map the mapping to create the comment from",}),"return":({"the error comment class",}),]),}),"finish_forward_query":({({"void",}),({({"int",}),"type",({"mixed",}),"data",({"function",}),"finished",({"string",}),"user",({"string",}),"newdir",}),(["main":({"This method finishes a details based query.",}),"param":({"type the type returned (error etc)","data the data returned","finished the function to call on finish",}),]),}),"do_change_type":({({"int",}),({({"int",}),"id",({"string",}),"type",({"function",}),"finished",}),(["main":({"This method changes the type of the bug.  The type is in the set'bug', 'typo', 'idea'.",}),"param":({"id the id of the bug to update","type the new type of the bug",}),"return":({"1 on success, 0 on failure",}),]),}),"do_query_open_bugs_by_reporter":({({"int",}),({({"string",}),"reporter",({"function",}),"finished",}),(["main":({"This returns the bug summary for all the open bugs associated withthe specified reporter.",}),"param":({"reporter the reporter to find the bugs for","finished the function to call when things are finished",}),"return":({"1 on success, 0 on failure",}),]),}),])
protected_functions (["setup_error_handler":({({"void",}),({({"string",}),"user",({"string",}),"db",({"string",}),"password",}),(["main":({"This method sets up the access permissions to use for accessingthe database.",}),"param":({"user the user to use","db the database to use","password the password to use",}),]),}),"build_sql_query":({({"string",}),({({"string",}),"select_rows",({"class","error_query",}),"query",}),(["main":({"This method builds an sql query from the input query.",}),"param":({"query the input query",}),"return":({"an sql string query",}),]),}),])
inherits ([])
main_docs (["main":({"This is a handler to keep track of errors, make adding them and queryingthem easier.",}),"started":({"Mon Jun 17 17:28:04 PDT 2002",}),"author":({"Pinkfish",}),])
define_docs (["ERROR_REPLY_TIMEOUT":([]),"SAVE_FILE":([]),"ERROR_DETAILS_FIELDS":([]),"ERROR_SUMMARY_FIELDS":([]),])
includes (["/include/error_handler.h":1522061544,"/include/db.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/inherit/error_handler.c"
last_changed 1522061544
