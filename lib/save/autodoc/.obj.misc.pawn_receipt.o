#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_object":({({"void",}),({({"string",}),"path",}),(["main":({"Sets the path to the object.  The path of the object for the recipt towork with.",}),"param":({"path the object path",}),]),}),"set_item_value":({({"void",}),({({"int",}),"value",}),(["main":({"This sets the value of the item this receipt is based on.",}),"param":({"value The value of the original item.",}),]),}),"set_obshort":({({"void",}),({({"string",}),"s",}),(["main":({"This sets the short of the pawned object.",}),]),}),"set_shop_path":({({"void",}),({({"mixed",}),"shop",}),(["main":({"This allows us to set the path of the shop that spawned us, so that thisreceipt can only be redeemed at that shop.",}),"param":({"shop - either a shop object or a string path.",}),]),}),"pluralize_sentence":({({"string",}),({({"string",}),"text",({"int",}),"plural",}),(["main":({"This takes a sentence and pluralises it appropriately.",}),"param":({"plural Whether or not the sentence should be in plural form.",}),"parma":({"text The sentence to pluralise.",}),]),}),"query_expiry_time":({({"int",}),({}),(["main":({"This returns the Unix time in seconds at which this receipt will expire.",}),"return":({"[int] The time of death in seconds.",}),]),}),"set_virtobname":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the virtual object name of the item.",}),"param":({"name the virtual object name",}),]),}),"query_timestamp":({({"int",}),({}),(["main":({"This method returns the timestamp of the reciept.  This is the time thereceipt was created.",}),"return":({"the timestamp",}),]),}),"query_shop_path":({({"string",}),({}),(["main":({"This returns the path to the shop that this receipt was spawned by.",}),"return":({"[string] the path to the cloning shop.",}),]),}),"query_obname":({({"string",}),({}),(["main":({"This method returns the name of the object.",}),"return":({"the name of the object",}),]),}),"query_obpath":({({"string",}),({}),(["main":({"This method returns the path of the object.",}),"return":({"the path of the object",}),]),}),"set_obname":({({"void",}),({({"string",}),"name",}),(["main":({"Sets the name of the object.  This will be used so the item reciptcan be identified.",}),"param":({"name the object name",}),]),}),"set_expiry_time":({({"void",}),({({"int",}),"time",}),(["main":({"This sets the time at which this receipt will die.",}),"param":({"time The time in seconds when this receipt will be killed.",}),]),}),"set_object_plural":({({"void",}),({({"object",}),"ob",}),(["main":({"This sets whether or not our object is actually a collective,and so more than one object.",}),]),}),"query_pawned_item_receipt":({({"int",}),({}),(["main":({"This allows us to check if the object is a pawned item receipt.",}),"return":({"1 if the object is a pawned item receipt.",}),]),}),"query_static_save":({({"mixed",}),({}),(["main":({"This method returns the save information for the object.  THis is notjust the static save information, it is an array of two elements.  Thefirst is the static save information and the second is the dynamicsave information.",}),"return":({"the save information",}),]),}),"query_correct_short":({({"string",}),({({"object",}),"ob",}),(["main":({"This returns a short which is accurate for both ordinary andcollective objects.",}),]),}),"setup_receipt":({({"void",}),({({"object",}),"ob",}),(["main":({"This method sets up the receipt for the specified object.",}),"param":({"ob the object to setup the reciept for",}),]),}),"query_object_plural":({({"int",}),({}),(["main":({"This lets us check whether or not our object is a plural object.",}),]),}),"query_virt_obname":({({"string",}),({}),(["main":({"This method returns the virtual object path name of the item.",}),"return":({"the virtual object name",}),]),}),"query_obshort":({({"string",}),({}),(["main":({"This returns the short of the pawned object.",}),"return":({"[string] The short of the pawned object.",}),]),}),"query_read_mess":({({"mixed","*",}),({}),(["main":({"This sets up a message for us to get when we read the receipt.Because we're using a function pointer, add_read_mess doesn't work.",}),"param":({"lang The language to produce the message in.",}),]),}),"do_reclaim":({({"int",}),({}),(["main":({"This handles all the reclaiming of objects that have been pawned.",}),]),}),"set_static_save":({({"void",}),({({"mixed",}),"args",}),(["main":({"This method sets the save information for the file.  It actually setsboth the static and dynamic information.  This assumes it is passedan array of two elements, the first is the static save information andthe second is the dynamic save information.",}),"param":({"args the data as defined above",}),]),}),"query_item_value":({({"int",}),({}),(["main":({"This returns the value of the item this receipt was based on.",}),"return":({"[int] the value of the original item.",}),]),}),])
protected_functions ([])
inherits (["/obj/misc/paper":({}),])
main_docs (["ignore":({"yes ",}),])
define_docs (["TP":([]),"TO":([]),])
includes (["/include/virtual.h":1522061544,"/include/player.h":1522061544,"/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/am_time.h":1522061544,"/include/armoury.h":1522061544,"/include/playtesters.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/obj/misc/pawn_receipt.c"
last_changed 1522061544
