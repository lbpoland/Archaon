#/obj/handlers/autodoc/autodoc_file.c
public_functions (["shout":({({"varargs","void",}),({({"string",}),"words",({"object",}),"avoid",}),(["main":({"This method sends a polite shout to everyone on line.  It checksfor earmuffs and all that sort of stuff.",}),"param":({"words the message to shout","avoid who not to tell the message to",}),]),}),"mud_name":({({"string",}),({}),(["main":({"This method returns the name of the mud.",}),"return":({"the name of the mud",}),]),}),"flush_log_files":({({"void",}),({}),(["main":({"This method flushes out all the buffered stuff for the log files.",}),]),}),"strcasecmp":({({"int",}),({({"string",}),"str1",({"string",}),"str2",}),(["main":({"Does a string compare...  But case insensative...",}),"see":({"efun::strcmp()",}),"param":({"str1 the string to compare","str2 the other string to compare",}),"return":({"0 if they are the same, <0 if they are less than each other, >0 if not",}),]),}),"write":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method prints a message to the player.",}),"param":({"str the message to send",}),]),}),"reference_allowed":({({"varargs","int",}),({({"object",}),"referree",({"mixed",}),"referrer",}),(["main":({"This method is used to test to see if a reference is allowed to thisobject.  It tests things like the allow array and that sort of stuff.",}),"param":({"thing the object to test",}),"return":({"1 if the reference is allowed",}),]),}),"query_loggers":({({"mapping",}),({}),([]),}),"tail":({({"varargs","string",}),({({"string",}),"fname",({"int",}),"nlines",}),(["main":({"This will print the last bit of a file.",}),"param":({"fname the file to read",}),"return":({"1 if it succeeded, 0 if it failed",}),]),}),"sha256":({({"string",}),({({"string",}),"data",}),([]),}),"log_file":({({"varargs","void",}),({({"string",}),"name",({"string",}),"fmt",({"mixed","*","args",}),"...",}),(["main":({"This method writes a message out ot a log file.  The log files arenormally in \"/log\".  If a file doesn't start with '/ then \"/log/\" will bepreppended to it.This does automatic removal of the log files after they get overa certain length.  The fmt and args parameters are used to print theactual message.<p>If more than one argument is passed to this function, then sprintf willbe used to print out the results.<p>ie: log_file(\"ROGER\", \"%s: frog and %s\\n\", ctime(time()), query_gumboot());",}),"param":({"name the name of the log file","fmt the format string","args the arguments to the sprintf",}),]),}),"user_event":({({"void",}),({({"mixed",}),"from",({"mixed",}),"first",({"mixed","args",}),"...",}),(["main":({"This method calls an event on all the users online.It does not do any filtering, so it will send messages to people whoare earmuffed and ignoring or lord invisible or whatever.",}),"param":({"from the person it is from","name the name of the event","args the arguments to the event",}),]),}),"call_out":({({"varargs","int",}),({({"mixed",}),"fun",({"int",}),"delay",({"mixed","*","args",}),"...",}),([]),}),"md5":({({"string",}),({({"string",}),"data",}),([]),}),"cap_words":({({"string",}),({({"string",}),"words",}),(["main":({"This method returns a string with each word capitalized.<p>",}),"param":({"words the string to capitalize",}),"return":({"the string with all words capitalized",}),]),}),"uniq_array":({({"mixed","*",}),({({"mixed","*",}),"arr",}),(["main":({"This method will return an array that contains no duplicates. uniq_array.c Written by: Wodan<p> This function will return an array that contains no duplicates. Gotta love them mappings. :)",}),"param":({"arr the array to convert",}),"return":({"an array with no duplicates",}),]),}),"wizardp":({({"int",}),({({"mixed",}),"arg",}),(["main":({"This method tells us if the object is a wizard.",}),"return":({"is the object a wizard",}),]),}),"input_to":({({"void",}),({({"mixed",}),"fun",({"mixed",}),"flag",({"mixed","args",}),"...",}),([]),}),"replace":({({"varargs","string",}),({({"string",}),"str",({"mixed",}),"bing",({"string",}),"rep",}),(["main":({"Replaces all occurances of a set of strings in the input string.  Replacesan individual or an array of strings with new values.  If the secondargument is an array of strings, then the 1st, 3rd, 5th...  elements willbe the strings to search for and the 2nd, 4th, 6th etc will be the stringsto replace with.  If three arguments are specified then the second is the stringto search for, the third the one to replace.<p>Eg:<br>str = replace(str, ({ \"search\", \"replace\", \"orange\", \"apple\" });<p>That will replace all occurances of \"search\" with \"replace\" and \"orange\"with \"apple\".",}),"param":({"str the string to do the replacement in","bing the search or array argument","rep the replacement string, or null",}),"return":({"the string with all the replacements done",}),]),}),"cat":({({"void",}),({({"string",}),"file",({"int",}),"start_line",({"int",}),"number",}),(["main":({"Write the file out to the screen.  This should  not be used if possible.It is an interface to read_file and other things.  You should perhapslook at using more_string ort more_file.",}),"see":({"/global/more_string->more_string()","/global/more_file->more_file()",}),"param":({"file the file name to cat","start_line the line to start on","number the number of lines to print",}),]),}),"db_connect":({({"varargs","int",}),({({"mixed","*","args",}),"...",}),([]),}),"debug_info":({({"string",}),({({"int",}),"operation",({"object",}),"ob",}),(["main":({"Debug info Simul Efun",}),"started":({"17/8/00To fix gaping security holes.",}),"author":({"Terano",}),]),}),"memory_summary":({({"string",}),({}),([]),}),"query_verb":({({"string",}),({}),(["main":({"This returns the current verb name.  This works if the verb ius usedthrough add_command or through add_action.",}),"return":({"the name of the verb",}),]),}),])
protected_functions ([])
inherits (["/secure/simul_efun/base_name":({}),])
main_docs (["main":({"Cotains some simul_efuns.",}),"author":({"Pinkfish",}),])
define_docs (["LIV":([]),"LOG_NAME(X)":([]),"DELAY_LOG_FLUSH":([]),"MAX_SIZE":([]),])
includes (["/include/player_handler.h":1522061544,"/include/login_handler.h":1522061544,"/include/login.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/secure/simul_efun/modified_efuns.c"
last_changed 1534619660
