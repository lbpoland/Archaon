#/obj/handlers/autodoc/autodoc_file.c
public_functions (["find_limbs":({({"void",}),({}),(["main":({"This method figures out the current set of limbs on the race.  A creatureis assigned one \"limb\" for every \"hand\" found in the body part array.  Thenumber of limbs is the number of weapons that can be held.",}),"see":({"query_limbs()",}),]),}),"query_skin":({({"string",}),({}),(["main":({"This method returns the current skin of the race.",}),"see":({"set_skin()",}),"return":({"the current skin of the race",}),]),}),"query_desc":({({"string",}),({({"object",}),"thing",}),(["main":({"This method returns the current description of the npc.",}),"see":({"query_desc()",}),"param":({"thing the object which is being described",}),"return":({"the description of the npc",}),]),}),"add_ac":({({"void",}),({({"string",}),"ac_name",({"string",}),"ac_type",({"mixed",}),"ac_amount",}),(["main":({"Adds a default ac to the npc for when they fight unarmed.  Please lookadd the armour object for more details on this.",}),"see":({"query_acs()",}),"param":({"ac_name the name of the ac","ac_type the type of the ac","ac_amount the damage/roll stuff to take off",}),]),}),"query_dark":({({"int",}),({({"int",}),"light",}),(["main":({"Determines if the race thinks it is dark or light.",}),"see":({"set_sight()","query_sight()",}),"return":({"0 for normal, -1 for dark, -2 for pitch dark, 1 for bright,2 for toobright",}),]),}),"query_bits":({({"mixed","*",}),({}),(["main":({"This method returns all the bits for the npc.",}),"see":({"add_bit()","query_bit()","query_possible_bits()","query_all_inedible()","query_all_unrottable()","query_all_pluckable()","remove_bit()",}),"return":({"the complete array of bits",}),]),}),"query_attacks":({({"mixed","*",}),({}),(["main":({"The default attacks for the npc when they are fighting unarmed.",}),"see":({"add_attack()",}),"return":({"the default attacks",}),]),}),"add_bit":({({"void",}),({({"string",}),"bit_short",({"string",}),"bit_name",({"mixed","*",}),"bit_array",}),(["main":({"This method adds a bit to the current bit setup.",}),"see":({"query_bits()","remove_bit()",}),"param":({"bit_short the short of the bit","bit_name the name of the bit","bit_array the array of children bits",}),]),}),"modifier":({({"int",}),({({"int",}),"number",}),(["main":({"This method figures out a modifier for the height based on the baseweight and height.",}),"param":({"number the height/weight to modify",}),"return":({"the modified heigh/weight",}),]),}),"add_attack":({({"void",}),({({"string",}),"attack_name",({"int",}),"attack_chance",({"int","*",}),"attack_data",}),(["main":({"This method adds a default attack to the npc.  Please see thehelp on the weapons for more details on this.",}),"see":({"query_attacks()",}),"param":({"attack_name the name of the attack","attack_chance the chance of the attack occuring","attack_data the damage roll for the attack",}),]),}),"query_number_worn":({({"int",}),({({"string",}),"type",}),(["main":({"This method figures out how many of each sort of thing can be worn.",}),"param":({"type the type to check for numbers worn",}),"return":({"the number of type to worn",}),]),}),"query_acs":({({"mixed","*",}),({}),(["main":({"The defaults acs for npcs when they are fighting unarmed.",}),"see":({"add_ac()",}),"return":({"the default acs",}),]),}),"query_possible_plural_bits":({({"string","*",}),({({"string",}),"word",}),(["main":({"This method returns the plural names for all the bits.",}),"see":({"add_bit()","query_bits()","query_possible_bits()","remove_bit()",}),"param":({"word the bit to find the children of",}),"return":({"the plural names of all the bits",}),]),}),"query_height":({({"int",}),({}),(["main":({"This method returns the base height of the npc type.",}),"see":({"set_height()",}),"return":({"the current base height",}),]),}),"set_height":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets the base height of the npc type.",}),"see":({"query_height()",}),"param":({"number the new height",}),]),}),"set_skin":({({"void",}),({({"string",}),"word",}),(["main":({"This method sets the skin of the race.  This is what is given backwhen the npc's corpse is skinned.",}),"see":({"query_skin()",}),"param":({"word the skin of the race",}),]),}),"set_stats":({({"void",}),({({"int","*",}),"numbers",}),(["main":({"This method sets the current default bonuses of the stats.  The parameteris an array of numbers, with the numbers corresponding to the stats asshown below.  It is highly inadvisable to set any stat bonus to less than-6, since in conjunction with the guild stat settings this could combineto give a negative total for that stat.  Negative stats can causepermanent unconsciousness.<pre>({  con,  dex,  int,  str,  wis})</pre>",}),"see":({"query_stats()",}),"param":({"numbers sets the default bonuses for the stats",}),]),}),"set_desc":({({"void",}),({({"string",}),"words",}),(["main":({"This method sets the description for the npc.",}),"see":({"set_desc()",}),"param":({"words the description of the npc",}),]),}),"remove_bit":({({"void",}),({({"string",}),"word",}),(["main":({"This method removes a bit from the current bit array",}),"see":({"add_bit()","query_bits()",}),"param":({"word the name of the bit to remove",}),]),}),"query_bit":({({"mixed","*",}),({({"string",}),"word",}),(["main":({"This method returns the bits which are children of the specified bit.",}),"see":({"add_bit()","query_bits()","remove_bit()",}),"param":({"word the bit to look for the children of",}),"return":({"the children bits",}),]),}),"set_sight":({({"void",}),({({"int","*",}),"numbers",}),(["main":({"Thie method sets the current sight array for the npc.  This sets thelevels at which the race things things are too dark/too bright.<br><pre>({   pitch dark,   dark,   bright,   bright light})</pre>",}),"see":({"query_sight()","query_dark()",}),"param":({"numbers as detailed above",}),]),}),"query_stats":({({"int","*",}),({}),(["main":({"This method queries the default bonus stat values for the race.<br><pre>({  con,  dex,  int,  str,  wiz})</pre>",}),"see":({"set_stats()",}),"return":({"the current stat offsets",}),]),}),"query_possible_bits":({({"string","*",}),({({"string",}),"word",}),(["main":({"This method returns the names of all the possible bits for thenpc.",}),"see":({"add_bit()","query_bits()","query_possible_plural_bits()","remove_bit()",}),"param":({"word the bits to look for the children under",}),"return":({"the array of possible bit names",}),]),}),"start_player":({({"void",}),({({"object",}),"thing",}),(["main":({"This method is called when the npc is first created.  This sets upthe weight/height/stats etc.",}),"param":({"thing the npc being created",}),]),}),"query_limbs":({({"string","*",}),({}),(["main":({"This method returns the current limbs of the race.",}),"see":({"find_limbs()",}),"return":({"the limbs on the race",}),]),}),"query_sight":({({"int","*",}),({}),(["main":({"Thie method returns the values of the race which determine visibility.It returns an array of the format:<br><pre>({   dark   pitch dark,   bright light,   bright})</pre>",}),"see":({"set_sight()","query_dark()",}),"return":({"the sight array as detailed above",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"The base object which all races will be inherited from.",}),"started":({"1992 sometime",}),"author":({"Pinkfish",}),])
define_docs (["BASE":([]),"QUEST_MAX":([]),"EXPERT":([]),"NORM":([]),"SCALE":([]),"A_TYPES":([]),"QUEST_AVE":([]),])
includes ([])
class_docs ([])
file_name "/std/races/base.c"
last_changed 1522061544
