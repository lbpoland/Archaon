#/obj/handlers/autodoc/autodoc_file.c
public_functions (["pretty_short":({({"string",}),({}),([]),}),"set_other_id":({({"void",}),({({"string",}),"word",}),([]),}),"set_my_id":({({"void",}),({({"string",}),"word",}),([]),}),"set_one_way":({({"void",}),({({"int",}),"number",}),(["main":({"This method is used to set whether or not the door is one way.A one way door won't trigger a \"broken door\" message when there'sno exit leading back.",}),"param":({"number pass 1 if the door is one way, or 0 if it isn't.",}),]),}),"dwep":({({"void",}),({}),([]),}),"poss_short":({({"string",}),({}),([]),}),"pretty_plural":({({"string",}),({}),([]),}),"pick_unlock":({({"int",}),({({"object",}),"thing",}),([]),}),"set_how_many":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets how many doors there are so that pluralsand everything are set correctly.  It also flags the doorwith the \"group object\" property.",}),"see":({"query_how_many()",}),"param":({"number the number of doors this door should represent.",}),]),}),"query_parse_id":({({"object",}),({({"mixed","*",}),"arr",}),([]),}),"moving_unlock":({({"int",}),({({"object",}),"thing",}),([]),}),"query_my_id":({({"string",}),({}),([]),}),"set_long":({({"void",}),({({"string",}),"word",}),([]),}),"parse_match_object":({({"mixed",}),({({"string","*",}),"input",({"object",}),"viewer",({"class","obj_match_context",}),"context",}),([]),}),"drop":({({"int",}),({}),([]),}),"set_door_name":({({"void",}),({({"string",}),"word",}),(["main":({"This method sets the name of the door.  Note that this is differentto the actual visible name or short of the door.",}),"see":({"query_door_name()","set_short()",}),"param":({"word the new door name",}),]),}),"query_my_room":({({"object",}),({}),([]),}),"parse_command_id_list":({({"string","*",}),({}),([]),}),"query_determinate":({({"string",}),({}),([]),}),"add_alias":({({"void",}),({({"string",}),"word",}),([]),}),"query_long":({({"string",}),({}),([]),}),"query_one_way":({({"int",}),({}),(["main":({"This method is used to determine if a door has been flagged as being'one way' or not. ",}),"see":({"set_one_way()",}),"return":({"an integer value which returns 1 if the door is one way,0 if it is not. ",}),]),}),"the_short":({({"string",}),({}),([]),}),"move":({({"int",}),({}),([]),}),"set_short":({({"void",}),({({"string",}),"words",}),(["main":({"This method sets the short for the door.  As well as setting the short,it calculates the name, adjectives and plurals for the door.  ",}),"see":({"query_short() ",}),"param":({"words the short to set for the door object. ",}),]),}),"long":({({"string",}),({}),([]),}),"query_name":({({"string","*",}),({}),([]),}),"query_short":({({"string",}),({}),(["main":({"This method returns the short of the door.  This is normally a stringlike \"east door\".",}),"see":({"set_short() ",}),"return":({"a string containing the short for the door.",}),]),}),"get":({({"int",}),({}),([]),}),"do_lock":({({"int",}),({({"object","*",}),"obs",}),([]),}),"set_dest":({({"void",}),({({"string",}),"word",}),([]),}),"do_open":({({"int",}),({}),([]),}),"query_plu":({({"string","*",}),({}),([]),}),"tell_door":({({"void",}),({({"string",}),"words",({"object",}),"thing",}),([]),}),"query_lock_owner":({({"mixed",}),({}),(["main":({"This method is used to determine which player owns the lockon this door.",}),"see":({"set_lock_owner() ",}),"return":({"a string containing the name of the player who owns thelock.",}),]),}),"do_unlock":({({"int",}),({({"object","*",}),"obs",}),([]),}),"set_lock_owner":({({"void",}),({({"string",}),"owner",}),(["main":({"This method sets the owner of the lock.   This value is used inpick_lock() to determine whether or not various PK checks etcare passed.",}),"param":({"owner the name of the player who owns the lock.",}),]),}),"moving_close":({({"int",}),({({"object",}),"thing",}),([]),}),"query_plural":({({"string",}),({}),([]),}),"do_close":({({"int",}),({}),([]),}),"short":({({"string",}),({}),([]),}),"parse_command_plural_id_list":({({"string","*",}),({}),([]),}),"query_adjs":({({"string","*",}),({}),([]),}),"query_other_id":({({"string",}),({}),([]),}),"one_short":({({"string",}),({}),([]),}),"query_dest":({({"string",}),({}),([]),}),"setup_door":({({"void",}),({({"string",}),"word",({"object",}),"mine",({"string",}),"his",({"mixed","*",}),"args",({"string",}),"type",}),(["main":({"This method is called by /std/room/basic_room.c in query_door()to create the door. ",}),"param":({"word the name of the door being created","mine the object that owns the door","his the destination for the door","args dest_other information from door.  This is mainlythe modify_exit() parameters.","type the type of the door, eg, door, window, etc. ",}),]),}),"query_how_many":({({"int",}),({}),(["main":({"This method returns how many doors are stored in this particulardoor object.  This is used for double doors and things like thatto make the plurals work correctly.",}),"see":({"set_how_many() ",}),"return":({"an integer value representing the number of doors.",}),]),}),"query_door_name":({({"string",}),({}),(["main":({"This returns the name of the door.  Note that this is different to theactual 'name' of the door.  It is normally an exciting and originalvalue of 'door'. ",}),"return":({"a string representing the door name.  ",}),]),}),"moving_lock":({({"int",}),({({"object",}),"thing",}),([]),}),"do_knock":({({"int",}),({}),([]),}),"long_status":({({"string",}),({}),([]),}),"moving_open":({({"int",}),({({"object",}),"thing",}),([]),}),"parse_command_adjectiv_id_list":({({"string","*",}),({}),([]),}),"a_short":({({"string",}),({}),([]),}),"go_away":({({"void",}),({}),([]),}),"pick_lock":({({"int",}),({({"object",}),"thing",}),([]),}),])
protected_functions ([])
inherits (["/std/basic/id_match":({}),"/std/basic/enchant":({}),"/std/basic/close_lock":({}),"/std/basic/property":({}),"/std/basic/trap":({}),"/std/basic/hide_invis":({}),])
main_docs (["main":({"",}),"ignore":({"yes",}),])
define_docs (["CLOSED_LOCKED":([]),"CLOSED":([]),"BEVERB":([]),"PRONOUN":([]),])
includes (["/include/parse_command.h":1522061544,"/include/dirs.h":1522061544,"/include/room.h":1522061544,"/include/door.h":1522061544,])
class_docs ([])
file_name "/std/room/basic/door.c"
last_changed 1522061544
