#/obj/handlers/autodoc/autodoc_file.c
public_functions (["add_note_to_case":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"person",({"string",}),"text",}),(["main":({"This method adds a note to the case.",}),"param":({"area the area to get the case in","id the id of the case","person the person adding the note","text the actual note text",}),"return":({"1 on success, 0 on failure",}),]),}),"query_note":({({"class","nomic_case_note",}),({({"int",}),"note_num",}),(["main":({"This method return the exciting note associated with the case.",}),"param":({"note_num the number of the note",}),"return":({"the note class, or 0 on failure",}),]),}),"add_new_case":({({"int",}),({({"string",}),"area",({"string",}),"opener",({"string",}),"short",({"string","*",}),"people",}),(["main":({"This method opens a new case.",}),"param":({"area the area the case is in","opener the person who opened it","short the short description of the case","people the people involved",}),"return":({"0 on failure and teh case id on success",}),]),}),"query_open_cases":({({"int","*",}),({({"string",}),"area",}),(["main":({"This returns the cases which are currently open.",}),"param":({"area the are to get the cases in",}),"return":({"the list of opened cases",}),]),}),"add_person_to_case":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"adder",({"string",}),"person",({"string",}),"text",}),(["main":({"This method adds a person to the case.",}),"param":({"area the area the case is in","id the id of the case","adder the person that adds the person","person the person to be added to the case","text the reason for adding the person",}),"return":({"1 on success, 0 on failure",}),]),}),"create_area":({({"void",}),({({"string",}),"area",}),(["main":({"This method creates an area.",}),"param":({"area the name of the area to create",}),]),}),"update_recently_closed_cases":({({"void",}),({}),(["main":({"This method goes through and checks the recently closed cases to seeif any of them need to be moved to the closed set.",}),]),}),"remove_person_from_case":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"remover",({"string",}),"person",({"string",}),"text",}),(["main":({"This method removes a person from the case.",}),"param":({"area the area the case is in","id the id of the case","remover the person that removes the person","person the person to be removed to the case","text the reason for removeing the person",}),"return":({"1 on success, 0 on failure",}),]),}),"query_recently_closed_case":({({"class","nomic_case",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method returns the case associated with the specified recentlyclosed case.",}),"param":({"area the area to look for the case in","id the id of the case",}),"return":({"the case class",}),]),}),"query_event_name":({({"string",}),({({"int",}),"type",}),(["main":({"This method returns the short name of the event type.",}),"param":({"type the type to find the name of",}),"return":({"the name of the type",}),]),}),"query_next_case_id":({({"int",}),({}),(["main":({"This method finds the next case id.",}),"return":({"the next case id",}),]),}),"query_closed_case":({({"class","nomic_case",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method returns the case associated with the specified closedcase.",}),"param":({"area the area to look for the case in","id the id of the case",}),"return":({"the case class",}),]),}),"query_note_file_name":({({"string",}),({({"int",}),"id",}),(["main":({"This method returns the file name for the note given the id.",}),"param":({"id the id to return",}),"return":({"the file name",}),]),}),"query_recently_closed_cases":({({"int","*",}),({({"string",}),"area",}),(["main":({"This method returns the set of recently closed cases.  These arecases that can be appealed.",}),"param":({"area the area to get the cases in",}),"return":({"the list of recently closed cases",}),]),}),"close_case":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"closer",({"string",}),"result",({"mixed",}),"data",}),(["main":({"This method closes the case.",}),"param":({"area the area the case is in","id the id of the case to close","closer the person that closes the case","result the string saying what the result of the case is","desc the description of the close reason","data special internal data used specifically for appeals",}),"return":({"1 on success, 0 on failure",}),]),}),"query_case_file_name":({({"string",}),({({"int",}),"id",}),(["main":({"This method returns the file name for the case given the id.",}),"param":({"id the id to return",}),"return":({"the file name",}),]),}),"appeal_case":({({"int",}),({({"string",}),"area",({"int",}),"id",({"string",}),"appealer",({"string",}),"reason",}),(["main":({"This method sets the case as reopened for an appeal.  After an appealthe case will be closed again.",}),"param":({"area the area the case is in","id the of the case to appeal","appealer the person who does the appeal","reason the reason for the appeal",}),"return":({"1 on success, 0 on failure",}),]),}),"query_open_case":({({"class","nomic_case",}),({({"string",}),"area",({"int",}),"id",}),(["main":({"This method returns the case associated with the specified opencase.",}),"param":({"area the area to look for the case in","id the id of the case",}),"return":({"the case class",}),]),}),"query_next_note_id":({({"int",}),({}),(["main":({"This method finds the next note id.",}),"return":({"the next note id",}),]),}),"query_closed_cases":({({"int","*",}),({({"string",}),"area",}),(["main":({"This method returns the cases which are currently closed.",}),"param":({"area the area to get the cases in",}),"return":({"the list of closed cases",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the system for case control.  It keeps tracks of all the currentopen cases in the area and any modifications that are done to them.",}),"started":({"Tue Jul 11 18:09:01 PDT 2000",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/nomic_system.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/inherit/case_control.c"
last_changed 1522061544
