#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_max_sell_per_person":({({"void",}),({({"int",}),"num",}),(["main":({"This method sets the maxium allowed number of objects to be soldby each person into the shop.",}),"see":({"query_max_sell_per_person()",}),"param":({"num the maximum number to be sold",}),]),}),"do_sell":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method sells an object into the craft shop.",}),"see":({"do_list()","do_buy()","do_sell_id()",}),"param":({"obs the objects to sell",}),"return":({"1 on success, 0 on failure",}),]),}),"is_able_to_change":({({"int",}),({({"object",}),"ob",}),(["main":({"This allows the system to override this for player run shops so theowner can discount peoples items.",}),"param":({"ob the object to test",}),"return":({"1 if they can modify the item, 0 if not",}),]),}),"inform_of_buy":({({"void",}),({({"int",}),"value",({"object","*",}),"obs",({"object",}),"player",({"string","*",}),"sellers",({"string","*",}),"names",({"string","*",}),"cats",({"int","*",}),"values",}),(["main":({"This method is called when something is bought and tells us how muchhas been spent.",}),"param":({"value of the the items sold","obs the objects bought","player who bought them","sellers the people whose items were bought","names the names of the items bought","cats the categories of the items bought","values the values of each item",}),]),}),"set_allowed_to_sell":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to use to check to see if the objectis able to be sold here or not.  The function will be called withone parameter, that is the object being check for buyability.",}),"see":({"query_allowed_to_sell()",}),"param":({"func the function to check objects with",}),]),}),"do_collect":({({"int",}),({}),(["main":({"This method collects any royalties the current player is owed.",}),"return":({"1 on succes, 0 on failure",}),]),}),"set_always_ask_price":({({"void",}),({({"int",}),"ask_price",}),(["main":({"This method sets the flag which makes the shop always ask for a pricewhen it attempts to save something.",}),"param":({"ask_price the flag",}),]),}),"query_maximum_sale_value":({({"int",}),({({"string",}),"person",({"object","*",}),"obs",}),(["main":({"This method will return the maximum price this item is allowed tobe sold for.  This will return 0 if there is no maximum price",}),"return":({"0 if there is no maximum price, or maximum price",}),]),}),"check_open":({({"int",}),({({"object",}),"player",({"string",}),"type",}),(["main":({"This method checks to see if the shop is open or not.  It will setup thedefault fail message if this is what is needed.",}),"see":({"set_open_function()",}),"param":({"player","command the command to check for",}),]),}),"do_browse":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This function browses through the current selected list of items.",}),"param":({"obs the items to browse through",}),]),}),"set_use_name":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the flag which makes the shop use the name of theitem as the sell type always.",}),"param":({"flag 1 to make it force the use name ability",}),]),}),"do_sell_id":({({"int",}),({({"object","*",}),"obs",({"string",}),"id",({"int",}),"force",}),(["main":({"This method tries to sell an object as a name that already exists inthe shop.",}),"see":({"do_sell()","do_list()","do_buy()",}),"param":({"obs the objects to sell","id the id to sell them as",}),]),}),"do_buy":({({"int",}),({({"object","*",}),"obs",({"int",}),"force",}),(["main":({"This method will attempt to buy an object from the shops inventory.",}),"see":({"do_sell()","do_list()",}),"param":({"str the string to match an object with",}),"return":({"1 on success, 0 on failure",}),]),}),"do_delete":({({"int",}),({({"string",}),"id",}),(["main":({"This method will delete a list entry without the owner getting paid.",}),"param":({"str the string to match an object with",}),"return":({"1 on success, 0 on failure",}),]),}),"do_change":({({"int",}),({({"object","*",}),"obs",({"string",}),"change",}),(["main":({"This function changes the list price of an object.",}),"param":({"obs the object to change the list price of","change the value to change the list price to",}),]),}),"set_minimum_cost":({({"void",}),({({"int",}),"cost",}),(["main":({"This method sets the minimum allowed cost for the item in theshop inventory.",}),"see":({"query_minimum_cost()",}),"param":({"cost the minimum cost",}),]),}),"query_controller":({({"object",}),({}),(["main":({"This method returns the current value of the controller.",}),"see":({"set_controller()",}),"return":({"the current controller",}),]),}),"set_controller":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the controller object for this shop.",}),"see":({"query_controller()",}),"param":({"controller the controller name as a string",}),]),}),"query_allowed_to_sell":({({"function",}),({}),(["main":({"This method returns the function used to check to see if an objectis able to be sold here or not.",}),"see":({"set_allowed_to_sell()",}),"return":({"func the function to use for checking",}),]),}),"reload_shop":({({"void",}),({}),(["main":({"This method allows you to cause the shop to load itself up.",}),]),}),"do_list":({({"int",}),({}),(["main":({"This method will list the current set of objects which areavailable to buy.",}),"see":({"do_sell()","do_buy()",}),"return":({"1 on success, 0 on failure",}),]),}),"query_cut":({({"int",}),({}),(["main":({"This method queries the current cut defined for this shop.",}),"see":({"set_cut()",}),"return":({"the current cut for the shop",}),]),}),"value_from_string":({({"int",}),({({"string",}),"str",({"string",}),"place",}),(["main":({"This attempts to figure out how much the person is telling us theitem costs.",}),"param":({"str the string to get the value of",}),]),}),"query_minimum_cost":({({"int",}),({}),(["main":({"This method returns the minimum allowed cost for an item in theshop inventory.",}),"see":({"set_minimum_cost()",}),]),}),"query_no_royalty_commands":({({"int",}),({}),(["main":({"This method returns the flagt the removes the royalty commands from theshop.",}),"return":({"the royalty command flag",}),]),}),"query_extra_sell_check":({({"function",}),({}),(["main":({"This method returns the extra sell check function.",}),"see":({"set_extra_sell_check()",}),"return":({"the extra sell check function",}),]),}),"set_cut":({({"void",}),({({"int",}),"new_cut",}),(["main":({"This method sets the cut for the object.",}),"see":({"query_cut()",}),"param":({"new_cut the new cut of the object",}),]),}),"set_save_dir":({({"void",}),({({"string",}),"fname",}),(["main":({"This method sets the save file associated with the controller.  The savefile should actually be a directory, the name of the directory plus a.o will be used for the save files.  The directory must exist or weirderrors will occur.This should always be set in the setup function of the room.",}),"see":({"set_controller()","query_save_dir()",}),"param":({"fname the save file",}),]),}),"query_extra_price_information":({({"string",}),({({"string",}),"person",({"object","*",}),"obs",}),(["main":({"This method returns any extra information about prices that theshop wants to display before entering a cost.  This can beoverridden in higher inherits to control this more effectively.",}),"return":({"an extra string to print",}),]),}),"is_allowed_to_sell":({({"int",}),({({"object","*",}),"obs",({"string",}),"name",({"string","*",}),"sellable_names",}),(["main":({"This method checks to see if this item is allowed to be sold in this shop.It assumes it is called from a add_command() method and sets up failmessages accordingly.",}),"param":({"obs the objects to check","name the name of the person doing the selling","sellable_names the names of the items to sell",}),]),}),"do_royalties":({({"int",}),({}),(["main":({"This method shows any royalties that you might be able to collect.",}),"return":({"1 on succes, 0 on failure",}),]),}),"query_when_sold_function":({({"function",}),({}),(["main":({"This method returns the when sold function.",}),"see":({"set_when_sold_function()",}),"return":({"the when sold function",}),]),}),"set_no_royalty_commands":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the flag that removes the royalty commands from theshop, if the royalty stuff is be handled somewhere else.",}),"param":({"flag the flag to set",}),]),}),"do_change_name":({({"int",}),({({"object","*",}),"obs",({"string",}),"new_name",}),(["main":({"This function changes the list name of an object.",}),"param":({"obs the object to change the list name of","new_name the value to change the list name to",}),]),}),"set_when_sold_function":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to be called on all the objects whenthey are sold.  For instance this can be used to close all booksetc.",}),"param":({"func the function to use",}),"example":({"// Close the book when it is sold.set_when_sold_function( (: $1->set_open_page(0) :) );",}),]),}),"query_always_ask_price":({({"int",}),({}),(["main":({"This method returns the flag on this object that tells us if the shopwill always ask for a price",}),"return":({"the flag",}),]),}),"query_max_sell_per_person":({({"int",}),({}),(["main":({"This methods returns the maximum number of allowed objects to besold by each person into the shop.",}),"see":({"set_max_sell_per_person()",}),"return":({"the maximum number to be sold",}),]),}),"set_extra_sell_check":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the extra sell function for the shop.  The extra sellfunction is called after the sell process is almost finished.  It cancheck for extra things needed in the sell process, like which page ofthe book to browse.",}),"see":({"query_extra_sell_check()","complete_sell()",}),"param":({"func the extra sell function",}),]),}),"query_use_name":({({"int",}),({}),(["main":({"This method returns the flag for the use name of this shop.",}),"return":({"1 if the name is used, 0 if not",}),]),}),"query_craft_shop_save_dir":({({"string",}),({}),(["main":({"This method returns the file name of the save file.",}),"see":({"set_save_dir()",}),"return":({"the file name of the save file",}),]),}),])
protected_functions (["confirm_sell_name_choice":({({"void",}),({({"string",}),"answer",({"string",}),"name",({"object","*",}),"sellable",}),(["main":({"This method is used to confirm the choice of name to use whenselling the object.",}),"param":({"answer the confirmation choice","name the name to sell it as","sellable the list of objects to sell",}),]),}),"complete_sale":({({"void",}),({({"int",}),"value",({"string",}),"name",({"object","*",}),"sellable",({"string",}),"category",}),(["main":({"This method is called to complete the sale completely.  It is splitup into a second function to allow the extra sell stuffto work neatly.",}),"param":({"value the value of the objects to sell","name the list name","sellable the list of objects to sell","category the category of the object, 0 if none",}),]),}),"determine_cost":({({"void",}),({({"string",}),"cost",({"string",}),"name",({"object","*",}),"sellable",}),(["main":({"This method figured out the cost of the item based on the value theytype in.",}),"param":({"cost the cost of the item","name the name of the item","sellable the array of objects to sell",}),]),}),"check_sell_name":({({"int",}),({({"string",}),"name",}),(["main":({"This method makes sure a name is not too long and containsno colour codes.",}),"param":({"name the name to list the object as",}),"return":({"0 if name is unacceptable, 1 if it's OK",}),]),}),"do_read_file":({({"string",}),({({"int",}),"type",({"string",}),"fname",}),(["main":({"This method handles the reading of the file to the disk.",}),"param":({"type the type of file to read","fname the file name is optional and only used for data files",}),"return":({"the value read",}),]),}),"do_save_file":({({"void",}),({({"int",}),"type",({"mixed",}),"value",({"string",}),"fname",}),(["main":({"This method handles the saving of the file to the disk.",}),"param":({"type the type of file to save","value the value to save to it","fname the file name is optional and only used for data files",}),]),}),"confirm_sale":({({"void",}),({({"string",}),"answer",({"int",}),"value",({"string",}),"name",({"object","*",}),"sellable",({"string",}),"category",}),(["main":({"This method confirms the sale after the cost and name have beendetermined.",}),"param":({"answer the answer to confirm with","value the value of the object","name the name of the object","sellable the list of sellable objects","category the category of the object, 0 if none",}),]),}),"sell_choice":({({"void",}),({({"string",}),"answer",({"object","*",}),"sellables",({"string","*",}),"names",}),(["main":({"This method is used when there is a list of object already listed.  Itwill check to see if the choice entered is valid and then use thatname when selling the object if it is.",}),"param":({"choice the selected choice","sellable the array of sellable objects","names the names of choices for name",}),]),}),"do_confirm_sale":({({"void",}),({({"int",}),"value",({"string",}),"name",({"object","*",}),"sellables",}),(["main":({"This method will ask the person to confirm the sale.  It will checkthe extra_sell_check function and then call the extra sale thing.",}),"param":({"value the value of the thing being sold","name the name the thing is sold for","sellables the things to sell",}),]),}),"sell_name":({({"void",}),({({"string",}),"name",({"object","*",}),"sellable",}),(["main":({"This method determines the name to list the object under.  This iscalled when a new name is used.",}),"param":({"name the name to list the object as","sellable the list of sellable objects",}),]),}),])
inherits (["/std/shops/inherit/open_shop":({}),])
main_docs (["main":({"This room will handle craft shop like things, where you sell stuff tothe store and it will sell it onto other players after takinga margin.  This can be used for potions, pottery, swords, anything!This has a few small hooks in here to handle categories in thesell process.  Most of the category handling code is dealt with inthe category based craft shop.",}),"started":({"Thu Feb  5 15:39:57 CST 1998",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/shops/bank.h":1522061544,"/include/shops/craft_shop.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/inherit/craft_shop.c"
last_changed 1522061544
