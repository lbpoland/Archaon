#/obj/handlers/autodoc/autodoc_file.c
public_functions ([])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the include file to deal with the nomic system for theplayer council.",}),"started":({"Fri Jun 23 20:10:40 PDT 2000",}),"author":({"Pinkfish",}),])
define_docs (["NOMIC_HANDLER":(["main":({"The path to the nomic rule handler.",}),]),"NOMIC_SYSTEM_ADMINISTRATOR_NAME":(["main":({"This is the name of the poster used to post messages to the boards.",}),]),"NOMIC_PUNISHMENT_DIR":(["main":({"This is the directory to find all the default nomic punishments from.",}),]),"NOMIC_CASE_APPEAL_TIME":(["main":({"This is the amount of time some has to appeal the decision.2 weeks.",}),]),"NOMIC_MOTION_TYPE_RULE_MOVE":(["main":({"This moves the rule type from one rule set to another.",}),]),"NOMIC_TYPE_CITIZEN":(["main":({"The citizen rule type.  Only effects citizens.",}),]),"NOMIC_MOTION_TYPE_RULE_REMOVE":(["main":({"This removes the rule type from one rule set to another.",}),]),"NOMIC_VOTE_ABSTAIN":(["main":({"This sets the abstain type of the vote.",}),]),"NOMIC_PUNISHMENT_DOCS_DIR":(["main":({"This is the directory to find all the punishment documentation.",}),]),"NOMIC_DEFAULT_TYPE_NUMS":(["main":({"This is the default set of types for the nomic system.",}),]),"NOMIC_STATE_COUNCIL_VOTE":(["main":({"This is the state for when it is being voted on by the council.",}),]),"NOMIC_TYPE_GENERAL":(["main":({"The general rule type.  Effects everyone.",}),]),"NOMIC_CASE_EVENT_ADD_PERSON":(["main":({"This is the event type for a remove person event.",}),]),"NOMIC_MOTION_TYPE_RULE_AMEND":(["main":({"This changes the text of the rule.  Amends it.",}),]),"NOMIC_CASE_EVENT_CLOSE":(["main":({"This is the event type for a close event on a case.",}),]),"NOMIC_CASE_EVENT_APPEAL":(["main":({"This is the event type for an open event on a case.",}),]),"NOMIC_STATE_COUNCIL_REVIEW":(["main":({"This is the state for when it is being looked at by the council.",}),]),"NOMIC_ERROR":(["main":({"The error define for nomic functions.",}),]),"NOMIC_TYPE_IMMUTABLE":(["main":({"The immutable rule type.  Effects everyone.",}),]),"NOMIC_CASE_EVENT_REMOVE_PERSON":(["main":({"This is the event type for a add person event.",}),]),"NOMIC_RULE_DEFAULT_DIR":(["main":({"This is the directory to use to get the default rules from.",}),]),"NOMIC_VOTE_NO":(["main":({"This sets the no type of the vote.",}),]),"NOMIC_VOTE_YES":(["main":({"This sets the yes type of the vote.",}),]),"NOMIC_STATE_CITIZEN_VOTE":(["main":({"This is the state for when it is being voted on by the citizens.",}),]),"NOMIC_CASE_SAVE":(["main":({"This is the place where we will save the nomic information aboutcases.",}),]),"NOMIC_SYSTEM_SAVE_FILE":(["main":({"This is where the system saves it's nomic rules.",}),]),"NOMIC_MOTION_TYPE_RULE_ADD":(["main":({"This sets up the type of the new rule to be a real new rule.",}),]),])
includes ([])
class_docs (["nomic_case_event":({0,({({"type",({"int",}),}),({"mess",({"string",}),}),({"person",({"string",}),}),({"event_time",({"int",}),}),({"data",({"mixed",}),}),}),(["main":({"This is an event associated with the case.",}),"param":({"type the type of the event","mess the message associated with the event","event_time the time of the event","data any extra data associed with the event",}),]),}),"nomic_comment":({0,({({"text",({"string",}),}),({"commenter",({"string",}),}),({"date_commented",({"int",}),}),}),(["main":({"Comment on this new rule thingy by magistrates.",}),"member":({"text the text of the comment","commenter the person commenting","date_commented the date the comment was made",}),]),}),"nomic_case_note":({0,({({"id",({"int",}),}),({"person",({"string",}),}),({"text",({"string",}),}),({"time_created",({"int",}),}),}),(["main":({"This is a note associated with the case.",}),"param":({"id the id of the note","person the person who made the note","text the text of the note","time_created the time the note was created",}),]),}),"nomic_area":({0,({({"new_type_num",({"int","*",}),}),({"rules",({"class","nomic_rule","*",}),}),}),(["main":({"The information needed for each nomic area.",}),"member":({"new_type_num the next numbers to use in each type area","rules the rules for the area",}),]),}),"nomic_rule":({0,({({"id",({"int",}),}),({"type",({"int",}),}),({"date_created",({"int",}),}),({"creator",({"string",}),}),({"text",({"string",}),}),({"amendments",({"class","nomic_amendment","*",}),}),}),(["main":({"The information on nomic rules.",}),"member":({"id the id of the rule (unique)","date_create when the rule was created","creator who created the rule","text the text of the rule","amendments the amendments to the rule",}),]),}),"nomic_motion":({0,({({"identifier",({"int",}),}),({"motion_type",({"int",}),}),({"rule",({"class","nomic_rule",}),}),({"new_rule_type",({"int",}),}),({"comments",({"class","nomic_comment","*",}),}),({"yes_votes",({"int",}),}),({"no_votes",({"int",}),}),({"abstain_votes",({"int",}),}),({"voted",({"string","*",}),}),({"state",({"int",}),}),({"date_added",({"int",}),}),({"date_event",({"int",}),}),({"added_by",({"string",}),}),}),(["main":({"This method sets up a new nomic rule for someone to vote on.",}),"member":({"identifier the id of the rule","motion_type the type of the new rule","rule the new rule (or amended rule)","new_rule_type if the rule typ eis to change types, this is the newtype","comments any comments associated with the rule","yes_votes the current set of yes votes","no_votes the current set of no votes","abstain_votes the current set of abstain votes","voted the current bunch of people that have voted","state the state of the current rule","date_added the date this new rule discussion was added","date_event the date of the last state change event","added_by the person who added the rule change",}),]),}),"nomic_amendment":({0,({({"amender",({"string",}),}),({"text",({"string",}),}),({"date_amended",({"int",}),}),}),(["main":({"This is the class to handle amendments to the rule",}),"member":({"amender the person doing the amendments","text the text of the amendment","date_amended when it was amended",}),]),}),"nomic_case":({0,({({"id",({"int",}),}),({"opener",({"string",}),}),({"short",({"string",}),}),({"people",({"string","*",}),}),({"notes",({"int","*",}),}),({"events",({"class","nomic_case_event","*",}),}),({"time_opened",({"int",}),}),}),(["main":({"This is the class for the thing.",}),"param":({"id the id of the case","opener the person who opened the case","short the short of the case","people the people who are involved in the case","notes the list of ids of the notes","events the array of events for the case","time_opened the time the case was opened",}),]),}),])
file_name "/include/nomic_system.h"
last_changed 1522061544
