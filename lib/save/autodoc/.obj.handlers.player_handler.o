#/obj/handlers/autodoc/autodoc_file.c
public_functions (["test_creator":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines if the player is a creator.",}),"see":({"test_last()","test_user()","test_creator()",}),"param":({"str the name of the user",}),"return":({"the player to test",}),]),}),"query_guild_data":({({"mixed",}),({}),(["main":({"This method is called by query_level() in the base guildinheritable to determine the specialisation of the currentplayer.",}),]),}),"test_email":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the email of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players email",}),]),}),"test_home_dir":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players home directory",}),"param":({"str the name of the user",}),"return":({"the player to test",}),]),}),"special_add_property":({({"void",}),({({"string",}),"pname",({"string",}),"prop",({"mixed",}),"val",}),(["main":({"This method updates the cached properties, it's called by/secure/login.",}),]),}),"query_cap_name":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns a players cap_name.",}),"param":({"str the name of the user",}),"return":({"the players cap name",}),]),}),"test_ip_allowed":({({"int",}),({({"string",}),"name",({"string",}),"ip",}),(["main":({"Check if a players personal allow list permits logins from this IP",}),"param":({"name The player name.","ip The IP address.",}),]),}),"test_nationality":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players nationality.",}),"param":({"str the name of the user",}),"return":({"the nationality",}),]),}),"test_last":({({"int",}),({({"string",}),"word",({"int",}),"noload",}),(["main":({"This method determines the last log on of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players last log on",}),]),}),"test_active":({({"varargs","int",}),({({"string",}),"player",({"int",}),"noload",}),(["main":({"This method determines if a player is still active.If you need to perform this on a lot of players please use the noloadparameter. When noload is set to 1 test_active will not attempt to loadthe player file if it isn't currently loaded and will instead just do asimple calculation of the players last login time. This is less accuratebut avoids lagging the mud.",}),"param":({"player the name of the user","noload optional parameter to prevent test_active() loading the              player file.",}),"return":({"active or inactive (1 or 0)",}),]),}),"test_player_killer":({({"mixed",}),({({"string",}),"word",({"string",}),"str",}),(["main":({"This method returns the current value of the player flag on theplayer, even if they are not currently on.",}),"param":({"word the player name",}),"return":({"1 if they are a player killer, 0 if not",}),]),}),"remove_cache_entry":({({"void",}),({({"string",}),"name",}),([]),}),"test_user":({({"int",}),({({"string",}),"str",}),(["main":({"This method figures out if the user exists even if they are not on.",}),"param":({"str the name of the user",}),"return":({"1 if they exist, 0 if they do not",}),]),}),"test_family":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players family name",}),"param":({"str the name of the user",}),"return":({"the family name",}),]),}),"test_guild_data":({({"mixed","*",}),({({"string",}),"word",}),(["main":({"This method determines the guild data of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players guild data",}),]),}),"test_nationality_data":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players nationality data.",}),"param":({"str the name of the user",}),"return":({"the nationality data",}),]),}),"query_plan":({({"string",}),({({"string",}),"name",({"int",}),"unused",}),(["main":({"This method returns the players .plan even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the plan, \"\" if none",}),]),}),"test_age":({({"int",}),({({"string",}),"word",}),(["main":({"This method determines the age of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players age",}),]),}),"test_guild":({({"string",}),({({"string",}),"word",}),(["main":({"This method determines the guild of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players guild",}),]),}),"load_player":({({"int",}),({({"string",}),"name",}),(["main":({"This method will load in the player file.  It will return 0 if the playerfile either does not exist or the input string is incorrect.",}),"param":({"name the name to try and read in",}),"return":({"1 if the player file exists, 0 if not",}),]),}),"query_skill":({({"int",}),({({"string",}),"skill",}),([]),}),"stats":({({"mixed","*",}),({}),([]),}),"query_delete_player_file_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the path to the deleted player file.This is the deleted player files actual normal location, it was written toallow moving the player files around easier.",}),"see":({"test_user()","query_delete_player_file_name()",}),"param":({"name the name of the player whose file to find",}),]),}),"query_prevent_shadow":({({"nomask","int",}),({({"object",}),"ob",}),([]),}),"query_player_file_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the path to the player file.This is the player files actual normal location, it was written toallow moving the player files around easier.",}),"see":({"test_user()","query_delete_player_file_name()",}),"param":({"name the name of the player whose file to find",}),]),}),"query_player_ram_file_name":({({"string",}),({({"string",}),"name",}),([]),}),"test_appealing":({({"int",}),({({"string",}),"str",}),(["main":({"This method figures out if the user is marked for deletion pending appeal.",}),"param":({"str the name of the user",}),"return":({"1 if they are marked for deletion, 0 if they do not",}),]),}),"test_location":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the players location finger information even if theyare not currently on",}),"param":({"str the name of the user",}),"return":({"the players location",}),]),}),"test_last_on_from":({({"string",}),({({"string",}),"word",}),(["main":({"This method determines the last log on of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players last log on",}),]),}),"test_deity":({({"string",}),({({"string",}),"word",}),(["main":({"This method determines the deity of the player even if they arenot currently on.",}),"param":({"str the name of the user",}),"return":({"the players deity",}),]),}),"test_banished":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks to see if the name is banished of not.",}),"param":({"name the check for banishment.",}),"return":({"1 if it banished, 0 if not",}),]),}),"query_project":({({"string",}),({({"string",}),"name",({"int",}),"unused",}),(["main":({"This method returns the players .project even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the project, \"\" if none",}),]),}),"test_property":({({"mixed",}),({({"string",}),"word",({"string",}),"str",}),(["main":({"This method returns the current value of the property on theplayer, even if they are not currently on.",}),"param":({"word the player name","str the property to query",}),"return":({"the value of the property",}),]),}),"test_valid":({({"varargs","int",}),({({"string",}),"name",}),(["main":({"Validate a name by checking if it, or bits of it are banished.",}),"param":({"name The name to be validated.","full Should we do full checks or just the basics.",}),"return":({"1 if it's ok, 0 if not.",}),]),}),"query_appeal_player_file_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the path to the pending appeal player file.This is the appeal player files actual normal location, it was written toallow moving the player files around easier.",}),"see":({"test_user()","query_delete_player_file_name()",}),"param":({"name the name of the player whose file to find",}),]),}),"my_find_player":({({"object",}),({({"string",}),"player",}),([]),}),"query_signature":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the signature to use on posts for the playereven when they are off line.",}),"param":({"name the name of the player",}),"return":({"the signature, \"\" if none",}),]),}),"test_start_time":({({"int",}),({({"string",}),"word",}),(["main":({"This method determines the time the player started at.",}),"param":({"str the name of the user",}),"return":({"the players last log on",}),]),}),"test_real_name":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the real name of the player even if they arenot currently on",}),"see":({"/std/living/gender.c",}),"param":({"str the name of the user",}),"return":({"the players real name",}),]),}),"query_player_disk_file_name":({({"string",}),({({"string",}),"name",}),([]),}),"test_nationality_region":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players nationality region.",}),"param":({"str the name of the user",}),"return":({"the nationality region",}),]),}),"clean_cache":({({"void",}),({}),([]),}),"test_player_title":({({"string",}),({({"string",}),"str",}),(["main":({"This method returns the players title.",}),"param":({"str the name of the user",}),"return":({"the title",}),]),}),"test_homepage":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the players homepage information even if theyare not currently on",}),"param":({"str the name of the user",}),"return":({"the players location",}),]),}),"test_gender":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the gender of the player even if they arenot currently on",}),"see":({"/std/living/gender.c",}),"param":({"str the name of the user",}),"return":({"the players gender",}),]),}),"make_string":({({"string",}),({({"mixed","*",}),"al",({"int",}),"max",}),(["main":({"This method converts an alias into a string.  This is used by theprojects and plans and so on.",}),"param":({"al the alias to turn into a string",}),"return":({"the converted string",}),]),}),"test_level":({({"int",}),({({"string",}),"str",}),(["main":({"This method determines the level of the player even if they arenot currently on",}),"see":({"/std/living/gender.c",}),"param":({"str the name of the user",}),"return":({"the players level",}),]),}),"test_deleting":({({"int",}),({({"string",}),"str",}),(["main":({"This method figures out if the user is marked for deletion.",}),"param":({"str the name of the user",}),"return":({"1 if they are marked for deletion, 0 if they do not",}),]),}),"test_desc":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the description of the player even if they arenot currently on",}),"param":({"str the name of the user",}),"return":({"the players description",}),]),}),"test_birthday":({({"string",}),({({"string",}),"str",}),(["main":({"This method determines the birthday of the player even if they arenot currently on",}),"param":({"str the name of the user",}),"return":({"the players birthday (if set)",}),]),}),"query_reference":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the players .reference even when they are off line.",}),"param":({"name the name of the player",}),"return":({"the reference, \"\" if none",}),]),}),])
protected_functions ([])
inherits (["/std/living/nationality":({}),"/global/family":({}),])
main_docs (["main":({"A hander to allow the testing of values on players when they aren't loggedin.  These methods used to exist in the login object but now they're here.<p>",}),"author":({"Ceres",}),])
define_docs (["MAX_CACHE_SIZE":([]),"CACHE_TIMEOUT":([]),"INACTIVE_LIMIT":([]),"ILLEGAL":([]),])
includes (["/include/access.h":1522061544,"/include/player_handler.h":1522061544,"/include/alias.h":1522061544,"/include/player.h":1522061544,"/include/login_handler.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["player_record":({0,({({"cached",({"int",}),}),({"touched",({"int",}),}),({"deleting",({"int",}),}),({"appealing",({"int",}),}),({"gender",({"int",}),}),({"creator",({"int",}),}),({"active",({"int",}),}),({"level",({"int",}),}),({"cap_name",({"string",}),}),({"map_prop",({"mapping",}),}),({"player_info",({"mapping",}),}),({"deity",({"string",}),}),({"guild",({"string",}),}),({"guild_data",({"mixed","*",}),}),({"age",({"int",}),}),({"last",({"int",}),}),({"flags",({"int",}),}),({"last_on_from",({"string",}),}),({"start_time",({"int",}),}),({"family_name",({"string",}),}),({"player_title",({"string",}),}),({"password",({"string",}),}),({"project",({"mixed","*",}),}),({"plan",({"mixed","*",}),}),({"reference",({"mixed","*",}),}),({"signature",({"mixed","*",}),}),({"home_dir",({"string",}),}),({"nationality",({"string",}),}),({"nationality_region",({"string",}),}),({"nationality_data",({"mixed",}),}),}),([]),}),])
file_name "/obj/handlers/player_handler.c"
last_changed 1522061544
