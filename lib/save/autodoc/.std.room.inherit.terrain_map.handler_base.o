#/obj/handlers/autodoc/autodoc_file.c
public_functions (["add_feature_region":({({"void",}),({({"string",}),"title",({"object",}),"region",({"int",}),"range",({"string","*",}),"descs",({"mixed",}),"items",({"mixed",}),"item_desc",({"string","*",}),"night_descs",({"mixed",}),"night_items",({"int",}),"whole_sentance",}),(["main":({"This method is called to add a new 'feature' to a terrain map.Features have no real existance, but add atmosphere to a whole area,by being visible across a large number of locations.You define location, size, item desc, and add an array of 'longs'sorted by distance, plus the usual item descriptions. Any occurrencesof $D in the longs array will be replaced by the direction in whichthe feature lies.",}),"see":({"add_road_type","add_obstacle_type","set_feature_chats","modify_feature","add_item",}),"param":({"title the name of the feature","region the region object to use in calculating the feature","range the distance (number of rooms) it can be seen for","descs array of descriptions to be shown at different ranges.These are divided equally along the total range","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding","whole_sentance use a whole sentance for the descriptions or wrapthem up into fragments",}),"example":({"  region = clone_object(TERRAIN_MAP_REGION_POLYGON);  region->add_vertex(12, 13);  region->add_vertex(14,15);  region->add_vertex(17,18);  add_feature_region(\"northmountain\", region, 7,           ({ \"A huge snowy mountain towers over you to the $D.\",              \"A huge snowy mountain looms to the $D.\",              \"A fair way off to the $D, you can see a huge snowy mountain.\",              \"A long way $Dwards, you glimpse the snowy peak of a \"              \"mountain.\" }),              \"mountain\", \"From here, it looks quite astoundingly huge.\",           ({ }), 0 );",}),]),}),"query_room_map":({({"mixed","*",}),({}),([]),}),"query_signposts":({({"mapping",}),({}),([]),}),"query_player_map_internal_template":({({"mapping",}),({({"mixed","*",}),"map",({"mapping",}),"key",({"mixed","*",}),"colours",({"int",}),"x_c",({"int",}),"y_c",({"int",}),"z_c",({"int",}),"distance",}),(["main":({"This method does the updating of the map based on the template.Pretty easy really, check each location in the map to see if itexists and what we should do with it.",}),]),}),"set_real_coordinates":({({"void",}),({({"int",}),"x1",({"int",}),"y1",({"int",}),"x2",({"int",}),"y2",}),(["main":({"",}),"param":({"x1 the start x location","y1 the start y location","x1 the end x location","y1 the end y location",}),]),}),"calc_features":({({"mapping",}),({({"object",}),"room",}),(["main":({"",}),"return":({"the blocking data",}),]),}),"query_rooms_in_block":({({"object","*",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"int",}),"width",({"int",}),"height",}),(["main":({"This method is used to find all the rooms currently cloned within aspecified rectangular area.",}),"see":({"query_room_at","query_rooms_in_range","query_rooms_in_zone",}),"param":({"x the x coordinate of rectangle's bottom left corner","y the y coordinate of rectangle's bottom left corner","width the width of the rectangle","height the height of the rectangle",}),"return":({"an array containing any rooms currently cloned within thespecified rectangle",}),]),}),"add_special_type":({({"void",}),({({"string",}),"type",({"string",}),"base_path",({"int",}),"size",({"int",}),"road_skip",({"int",}),"height",({"mapping",}),"height_rooms",}),(["main":({"This method is used to add a standard skip room type to the terrain map.Mapped to an ASCII character as used in the ASCII room map.  A skippedroom is one in which every nth room in the terrain will be skippedunless it has something interesting in it.  The height is used todo specific sorts of checks, like if a specific direction is passable or not.",}),"see":({"add_room_type","add_road_type","add_obstacle_type",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room","size the number of rooms in each clump to skip over","road_skip if this is 1 then the skip type is a 'road skip', thiswill assume the path is one wide and try to follow around curves","height the height of the room","height_rooms is a mapping containing what rooms to use at different height levels",}),"example":({"   add_room_type(\".\", ROOMS + \"field\");",}),]),}),"query_adjacent_terrains":({({"mapping",}),({}),([]),}),"query_room_at":({({"object",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method is used to find a room at the specified coordinates,if one has already been cloned.If a room has been cloned at those coordinates, it is returned,",}),"see":({"load_room_at","query_room","query_rooms_in_block","query_rooms_in_range",}),"param":({"x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)",}),"return":({"the room at those coordinates, or 0 if none has been cloned",}),]),}),"query_debug_map_char":({({"string",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"This method returns the specific debug map character at thegiven location.",}),"param":({"x the x location","y the y location",}),"return":({"the map character",}),]),}),"set_external_chats":({({"void",}),({({"string",}),"type",({"mixed",}),"chats",}),(["main":({"This method is used to setup 'external' chats for a road or obstacle,which will be added to the room chats of adjacent locations. Youshould supply the ASCII character corresponding to the road/obstacletype, and an array of chat strings (in the same format as supplied toroom_chat)",}),"see":({"add_road_type","add_obstacle_type","set_feature_chats","room_chat",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room   set_external_chats(\"=\",                ({ \"The stream bubbles merrily on its way.\",                   \"You hear a faint splashing sound from the stream.\" }));",}),]),}),"debug_adjacent_terrains":({({"string","*",}),({}),([]),}),"query_debug_map_feature":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns a grid of the specified size around the centerpoint to give creators an overview of where they are currently.",}),"param":({"x the x co-ordinate","y the y co-ordinate","width the width of the box",}),]),}),"query_direction_distance":({({"int",}),({({"string",}),"dir",}),(["main":({"This method returns the distance that is moved if you go in thespecified direction.",}),"return":({"the distance",}),]),}),"modify_feature":({({"varargs","void",}),({({"string",}),"title",({"string","*",}),"descs",({"mixed",}),"item_desc",}),(["main":({"This method is used to modify the descriptions and/or item descs ofan established feature. Changes will be instantly seen in all therooms the feature is visible from.",}),"see":({"set_feature_chats","add_feature","add_item",}),"param":({"title the name of the feature","descs array of descriptions to be shown at different ranges.add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the correspondingThese are divided equally along the total range",}),]),}),"query_char_maps":({({"mapping",}),({}),([]),}),"add_sign":({({"void",}),({({"int",}),"x",({"int",}),"y",({"string",}),"sign_long",({"mixed",}),"sign_read_mess",({"string",}),"sign_short",({"mixed",}),"sign_name",({"string",}),"sign_language",}),(["main":({"This method is used to add a signpost into a specified location in aterrain_map. It is identical to the /std/room/ add_sign, except forthe x and y coordinates which specify where the sign should go.",}),"see":({"add_sign",}),"param":({"title the name of the feature","x the x coordinate of the center point","y the y coordinate of the center point",}),"example":({"  add_sign(4, 3, \"A wooden signpost.\\n\",                 \"\\n-----------------\\n\"                   \"| Ladder: East  |\\n\"                   \"| Bridge: South |\\n\"                   \"-----------------\",                 \"signpost\", ({ \"signpost\", \"sign\" }), \"common\");",}),]),}),"query_more_terrains_rooms_from":({({"mixed","*",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",({"int",}),"moves_left",({"int",}),"jump",({"string",}),"main_key",({"int",}),"road_jump",}),(["main":({"This method is used by connecting terrains to find the next room insequence.",}),"param":({"x the real x coordinate","y the real y coordinate","moves_left the number of moves left to pop along","jump the jump length we are looking for","main_key the key, this is only used for non-road jumps","road_jump is this a road jump",}),]),}),"add_random_chat":({({"void",}),({({"string",}),"types",({"string","*",}),"chats",}),(["main":({"This method is to add to the list of random chats that can be added tospecific room types. A specific random sequence is used so that the randomswon't vary over time.",}),"see":({"set_random_desc_limit","set_random_chat_limit","add_random_chat",}),"param":({"types the string of ASCII character type(s) that this desc could apply to","chats an array of chats to add. Usual add_chat format.",}),]),}),"calc_random_descs":({({"void",}),({({"object",}),"room",({"string",}),"key",}),([]),}),"setup_handler":({({"void",}),({}),([]),}),"set_real_offsets":({({"void",}),({({"int",}),"xoff",({"int",}),"yoff",({"int",}),"zoff",}),(["main":({"This method sets the real offsets for movement in the rooms.  Thisis needed in rooms that do not have real co-ordinates set but stillrequire movement to generate the correct messages.",}),"param":({"xoff how far you move in the x direction","yoff how far you move in the y direction","zoff how far you move in the z direction",}),]),}),"add_exit_at":({({"varargs","void",}),({({"int",}),"x",({"int",}),"y",({"string",}),"direc",({"string",}),"dest",({"string",}),"type",({"mixed",}),"modifiers",}),(["main":({"This method is used to add a standard exit to a specified locationin a terrain map. The chief use is to insert exits to standard roomsor other terrain maps.",}),"see":({"add_room_type","add_road_type","add_obstacle_type","add_exit","modify_exit",}),"param":({"x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)","direc the direction of the exit (as in add_exit)","dest the path of the exit's destination (as in add_exit)","type the type of exit (as in add_exit)","modifiers an optional array of exit modifiers (as in modify_exit)",}),"example":({"   add_exit_at(8, 0, \"south\", PEARWOOD + \"stream_entrance\", \"road\",                      ({ \"move mess\", \"You wade along the stream bed.\\n\",                         \"enter mess\", \"$N wades in from the north.\",                         \"exit mess\", \"$N wades off to the $T.\" }));",}),]),}),"query_feature_item_desc":({({"varargs","string",}),({({"string",}),"title",}),(["main":({"This method returns the item description.",}),"param":({"title the title of the feature",}),"return":({"the feature item description",}),]),}),"query_visible_distance":({({"int",}),({}),(["main":({"This method returns the distance that you can see in this terrain.",}),"return":({"the visible distance in the terrain",}),]),}),"query_feature_ob":({({"object",}),({({"string",}),"name",}),(["main":({"This method returns the region used when calculating the extents of thefeature.",}),"param":({"name the name of the feature to find the region of",}),"return":({"the feature region",}),]),}),"add_feature":({({"void",}),({({"string",}),"title",({"int",}),"x",({"int",}),"y",({"int",}),"width",({"int",}),"height",({"int",}),"range",({"string","*",}),"descs",({"mixed",}),"items",({"mixed",}),"item_desc",({"string","*",}),"night_descs",({"mixed",}),"night_items",}),(["main":({"This method is called to add a new 'feature' to a terrain map.Features have no real existance, but add atmosphere to a whole area,by being visible across a large number of locations.You define location, size, item desc, and add an array of 'longs'sorted by distance, plus the usual item descriptions. Any occurrencesof $D in the longs array will be replaced by the direction in whichthe feature lies.",}),"see":({"add_road_type","add_obstacle_type","set_feature_chats","modify_feature","add_item",}),"param":({"title the name of the feature","x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)","width the width of the feature","height the height of the feature","range the distance (number of rooms) it can be seen for","descs array of descriptions to be shown at different ranges.These are divided equally along the total range","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding","night_descs the night description array","night_items the descriptions for the items at night",}),"example":({"  add_feature(\"northmountain\", 3, 0, 5, 1, 7,           ({ \"A huge snowy mountain towers over you to the $D.\",              \"A huge snowy mountain looms to the $D.\",              \"A fair way off to the $D, you can see a huge snowy mountain.\",              \"A long way $Dwards, you glimpse the snowy peak of a \"              \"mountain.\" }),              \"mountain\", \"From here, it looks quite astoundingly huge.\",           ({ \"A huge black bulk obscures the sky to the $D.\",              \"A huge black bulk covers the horizon to the $D.\",              \"A black lump obscures the horizon to the $D\",              \"\" }),              \"The dark black silloette looks like a mountain.\");",}),]),}),"query_random_chats":({({"mapping",}),({}),([]),}),"query_rooms_to":({({"mixed","*",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",({"int",}),"len",({"string",}),"main_key",({"int",}),"jump_len",({"int",}),"road_type",}),(["main":({"This method find the specific squence of rooms in the given directionwith the given room jump.  We do not worry about contents here.  Only ifit is a special interest marker or if there are two different ways fromthe location of the same type.  Items in the map are set as beingspecial interest to stop a jump.",}),"param":({"x the x co-ordinate to start from","y the y co-ordinate to start from",}),"return":({"the list of rooms",}),]),}),"find_room_at_real_coord":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method finds the room at the specific real coordinate.",}),"param":({"x the x location","y the y location",}),"return":({"the room, or 0 on failure",}),]),}),"find_next_room_from":({({"string","*",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",}),(["main":({"This method finds the next room in the path.  It returns the nextroom as the first element in the array and the list of the directionsto get there as the second element.",}),"param":({"x the start x position","y the start y position","z the start z position","direc the direction to go from here",}),"return":({"({ the end location, directions... })",}),]),}),"query_debug_map_feature_distant":({({"string",}),({({"string",}),"feature",}),(["main":({"This method returns a grid of the specified size around the centerpoint to give creators an overview of where they are currently.",}),"param":({"x the x co-ordinate","y the y co-ordinate","width the width of the box",}),]),}),"add_world_room_type":({({"varargs","void",}),({({"string",}),"type",({"string",}),"base_path",}),(["main":({"This method is used to add a world map based file into the terrain.It handles all the options like a special road type, but queries all thedetails off the base room instead.",}),"see":({"add_room_type","add_road_type","set_external_chats","add_item",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room",}),"example":({"   add_world_room_type(\"+\", ROOMS + \"path\", \"The dusty path leads $D.\",                 \"There is a dusty path to the $D.\",                 \"path\", \"Hey! Look! A path!\");",}),]),}),"query_debug_map":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"width",({"int",}),"showx",({"int",}),"showy",}),(["main":({"This method returns a grid of the specified size around the centerpoint to give creators an overview of where they are currently.",}),"param":({"x the x co-ordinate","y the y co-ordinate","width the width of the box",}),]),}),"query_area_map":({({"mixed","*",}),({}),([]),}),"find_adjacent_terrain":({({"string",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"THis method finds a terrain adjacent to us from this locationin the specific direction.",}),"param":({"x the x location","y the y location",}),]),}),"query_real_coords":({({"mixed","*",}),({}),([]),}),"find_all_adjacent_terrains":({({"void",}),({}),(["main":({"This is specifically for debug.  It finds al the adjacent terrains.",}),]),}),"setup_room":({({"void",}),({({"object",}),"room",({"string",}),"base_path",}),(["main":({"The main nasty func for setting up a room. It adds all the necessary exits,and adds to the room's extra_look & add_items for anything outside the roomwhich should be visible. It's fairly nasty. But hey - it works.",}),]),}),"set_newline_mode":({({"void",}),({({"int",}),"mode",}),(["main":({"This method sets the 'newline' mode for room description extras.If set to 1, a newline will be inserted after all feature andneighbouring room items. 1 is the default.",}),"param":({"mode the new mode.",}),]),}),"tell_feature":({({"varargs","void",}),({({"string",}),"title",({"mixed",}),"message",}),(["main":({"This message displays messages in all rooms within range of a feature.The message can be either a string, which goes to all the rooms, or anarray of strings, in which case they get spread across the distances (inwhich case you should supply the same number of array elements as in thedescriptions in the original add_feature. Any occurences of $D in themessage(s) will be replaced in each room with the direction that thefeature lies in.",}),"see":({"tell_rooms_in_zone","add_feature","modify_feature","set_feature_chats",}),"param":({"title the name of the feature, as used in add_feature","message the message to be displayed",}),]),}),"add_zones":({({"void",}),({({"string",}),"type",({"string","*",}),"zone_names",}),(["main":({"This method is used to map ASCII characters used in the zone map ontoone or more actual room zones.",}),"param":({"type the ASCII character used in the zone map","zones a zone name or an array of zone names",}),"example":({"  add_zones(\"*\", ({ \"zone2\", \"zone1\" }));",}),]),}),"query_dest_coordinate_string":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",({"string",}),"key",}),(["main":({"This method finds the co-ordinates to use for getting to thenext room.  THis handles messing about to make bridges and things",}),"param":({"x the x coordinate","y the y coordinate","z the z coordinate","direc the direction it is from","key the key is it from",}),"return":({"the new mangled co-ordinates",}),]),}),"query_map_file":({({"string",}),({}),([]),}),"query_debug_real_coord":({({"class","real_coords",}),({}),([]),}),"query_ground_room":({({"string",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"This method returns the location of the ground room.  It is basicallyjust the co-ordates connected onto the terrain_handler definition.",}),"param":({"x the x location","y the y location",}),"return":({"the string name of the ground room",}),]),}),"query_zone_types":({({"mapping",}),({}),([]),}),"query_room_zones":({({"mapping",}),({}),([]),}),"add_z_exit_at":({({"varargs","void",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",({"string",}),"dest",({"string",}),"type",({"mixed",}),"modifiers",}),(["main":({"This method is used to add a standard exit to a specified locationin a terrain map. The chief use is to insert exits to standard roomsor other terrain maps.",}),"see":({"add_room_type","add_road_type","add_obstacle_type","add_exit","modify_exit",}),"param":({"x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)","direc the direction of the exit (as in add_exit)","dest the path of the exit's destination (as in add_exit)","type the type of exit (as in add_exit)","modifiers an optional array of exit modifiers (as in modify_exit)",}),"example":({"   add_exit_at(8, 0, \"south\", PEARWOOD + \"stream_entrance\", \"road\",                      ({ \"move mess\", \"You wade along the stream bed.\\n\",                         \"enter mess\", \"$N wades in from the north.\",                         \"exit mess\", \"$N wades off to the $T.\" }));",}),]),}),"tell_zones":({({"varargs","void",}),({({"mixed",}),"zones",({"string",}),"message",({"mixed",}),"mess_class",}),(["main":({"This method displays a message in all the currently loaded roomswithin the specified zone(s).",}),"see":({"query_rooms_in_zone","tell_feature",}),"param":({"zones a zone name as a string, or an array of zone names","message the message to be displayed","mess_class the message type. Normally this need not be specified",}),]),}),"query_player_map":({({"string",}),({({"int",}),"x_c",({"int",}),"y_c",({"int",}),"z_c",({"int",}),"visibility",}),(["main":({"This method returns the player line of sight view of the current terrain.It depends on height and other wonderful things.",}),"param":({"x_c the x center point","y_c the y center point","z_c the z center point","visibility the visibility percentage currently",}),]),}),"set_visible_distance":({({"void",}),({({"int",}),"distance",}),(["main":({"This method sets the distance you can see in this terrain based on themap.  The distance is used to determine nice little map things to showthe players.",}),"param":({"distance the distance you can see",}),]),}),"add_obstacle_type":({({"varargs","void",}),({({"string",}),"type",({"string",}),"description",({"mixed",}),"items",({"mixed",}),"item_desc",({"string",}),"room_desc",}),(["main":({"This method is used to add an 'obstacle' to an area map. An obstacle iseffectively an area on the map which cannot be entered, and can be seenfrom adjacent locations. Any occurences of $D in the description willbe replaced with the direction(s) in which the obstacle can be seen.An add_item is automatically performed to allow for consistency.",}),"see":({"add_room_type","add_road_type","set_external_chats","add_item",}),"param":({"type the ASCII type used on the map to denote the obstacle","description the description of the obstacle, as seen fromneighbouring rooms","items a string, or array of strings giving the correspondingadd_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding item desc","room_desc allows a description for the obstacle in the key",}),"example":({"  add_obstacle(\"*\", \"Thick green bushes block your way to the $D.\",                     ({ \"bush\", \"bushes\" }), \"Thick and green.\", \"Thick bushes\");",}),]),}),"query_standard_exits":({({"mapping",}),({}),([]),}),"query_terrain_from_real_coord":({({"class","coord",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method returns the room coordinates from the real coordinates.",}),"param":({"x the x coordinate","y the y coordinate",}),]),}),"query_real_from_terrain_coord":({({"class","coord",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method returns the real coordinates from the terrain coordinates.For simplicity we always assume the terrain sits at the water level.",}),"param":({"x the x coordinate","y the y coordinate",}),]),}),"add_road_type":({({"varargs","void",}),({({"string",}),"type",({"string",}),"base_path",({"string",}),"room_desc",({"string",}),"description",({"mixed",}),"items",({"mixed",}),"item_desc",}),(["main":({"This method is used to add a standard road type to the terrain map,mapped to an ASCII character as used in the ASCII room map.A road is a terrain map room which can be seen from adjacent locations.The handler uses 'room_desc' to add an entry to the room description,describing where the road goes. 'description' is added to thedescriptions of adjacent locations, to enable the road to be seen.In 'room_desc' and 'description', $D will be expanded to the relevantdirections.",}),"see":({"add_room_type","add_road_type","set_external_chats","add_item",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room","room_desc the 'continuation' description, which added to the room description to show where the road leads","description the 'adjacent' description, which is seen from adjacent locations.","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding item desc",}),"example":({"   add_road_type(\"+\", ROOMS + \"path\", \"The dusty path leads $D.\",                 \"There is a dusty path to the $D.\",                 \"path\", \"Hey! Look! A path!\");",}),]),}),"set_real_coordinates_no_inform":({({"void",}),({({"int",}),"x1",({"int",}),"y1",({"int",}),"x2",({"int",}),"y2",}),(["main":({"This method sets the real coordinates for the room without informingthe map handler.",}),"param":({"x1 the start x location","y1 the start y location","x1 the end x location","y1 the end y location",}),]),}),"query_player_map_template":({({"string",}),({({"int",}),"x_c",({"int",}),"y_c",({"int",}),"z_c",({"int",}),"visibility",({"int",}),"max_size",}),(["main":({"This method generates a player map using templates instead of usinglines from the center point.  This is more efficent than aline drawing method.  THe max_size is used tomake sure the size of the visible area is squashed, if we want asmaller partial map for other displays.  The max size must bean odd number.",}),]),}),"set_random_chat_limit":({({"void",}),({({"int",}),"new_limit",}),(["main":({"This method is used to limit the number of random chats that arepicked out for each room.",}),"see":({"set_random_desc_limit","add_random_desc","add_random_chat",}),"param":({"new_limit the new chat limit",}),]),}),"query_ground_room_co_ords":({({"int","*",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"This method returns the ground room for a specific co-ordinate.",}),"param":({"x the x location","y the y location",}),"return":({"the terrain co-ordinates of the ground room",}),]),}),"query_features":({({"mapping",}),({}),([]),}),"add_road_special_type":({({"varargs","void",}),({({"string",}),"type",({"string",}),"base_path",({"int",}),"size",({"int",}),"road_skip",({"int",}),"height",({"string",}),"room_desc",({"string",}),"description",({"mixed",}),"items",({"mixed",}),"item_desc",({"mapping",}),"height_rooms",}),(["main":({"This method is used to add a standard road type to the terrain map,mapped to an ASCII character as used in the ASCII room map.A road is a terrain map room which can be seen from adjacent locations.The handler uses 'room_desc' to add an entry to the room description,describing where the road goes. 'description' is added to thedescriptions of adjacent locations, to enable the road to be seen.In 'room_desc' and 'description', $D will be expanded to the relevantdirections.A skippedroom is one in which every nth room in the terrain will be skippedunless it has something interesting in it.",}),"see":({"add_room_type","add_road_type","set_external_chats","add_item",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room","size the number of rooms in each clump to skip over","road_skip if this is 1 then the skip type is a 'road skip', thiswill assume the path is one wide and try to follow around curves","height the height of the room","room_desc the 'continuation' description, which added to the room description to show where the road leads","description the 'adjacent' description, which is seen from adjacent locations.","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding item desc","height_rooms is a mapping containing what rooms to use at different height levels",}),"example":({"   add_road_type(\"+\", ROOMS + \"path\", \"The dusty path leads $D.\",                 \"There is a dusty path to the $D.\",                 \"path\", \"Hey! Look! A path!\");",}),]),}),"query_random_descs":({({"mapping",}),({}),([]),}),"add_room_type":({({"void",}),({({"string",}),"type",({"string",}),"base_path",}),(["main":({"This method is used to add a standard room type to the terrain map,mapped to an ASCII character as used in the ASCII room map.",}),"see":({"add_room_type","add_road_type","add_obstacle_type",}),"param":({"type the ASCII type used on the map to denote the room","base_path the full pathname of the source file for the room",}),"example":({"   add_room_type(\".\", ROOMS + \"field\");",}),]),}),"query_rooms_in_zone":({({"object","*",}),({({"string",}),"zone",}),(["main":({"This method is used to find all rooms currently loaded within thespecified room zone.",}),"see":({"query_rooms_in_block","query_rooms_in_range",}),"param":({"zone the name of the room zone",}),"return":({"an array containing all the currently cloned rooms within this zone",}),]),}),"query_zone_map":({({"mixed","*",}),({}),([]),}),"set_feature_chats":({({"void",}),({({"string",}),"title",({"mixed","*",}),"chats",({"mixed","*",}),"night_chats",}),(["main":({"This method is used to add room chats to locations that can view aparticular feature. $D substitution is carried out on the chats.",}),"see":({"add_feature","modify_feature","room_chat",}),"param":({"title the name of the feature","chats an array of strings (room chats related to the feature)",}),]),}),"add_feature_ob":({({"void",}),({({"string",}),"title",({"object",}),"feature",}),(["main":({"This method is called to add a new 'feature' to a terrain map.Features have no real existance, but add atmosphere to a whole area,by being visible across a large number of locations.You define location, size, item desc, and add an array of 'longs'sorted by distance, plus the usual item descriptions. Any occurrencesof $D in the longs array will be replaced by the direction in whichthe feature lies.",}),"see":({"add_road_type","add_obstacle_type","set_feature_chats","modify_feature","add_item",}),"param":({"title the name of the feature","region the region object to use in calculating the feature","range the distance (number of rooms) it can be seen for","descs array of descriptions to be shown at different ranges.These are divided equally along the total range","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding","whole_sentance use a whole sentance for the descriptions or wrapthem up into fragments",}),"example":({"  region = clone_object(TERRAIN_MAP_REGION_POLYGON);  region->add_vertex(12, 13);  region->add_vertex(14,15);  region->add_vertex(17,18);  add_feature_region(\"northmountain\", region, 7,           ({ \"A huge snowy mountain towers over you to the $D.\",              \"A huge snowy mountain looms to the $D.\",              \"A fair way off to the $D, you can see a huge snowy mountain.\",              \"A long way $Dwards, you glimpse the snowy peak of a \"              \"mountain.\" }),              \"mountain\", \"From here, it looks quite astoundingly huge.\",           ({ }), 0 );",}),]),}),"query_base_room":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"int",}),"map_room",}),(["main":({"This returns the destination room in the given directoin, initiallyit tries for a normal exit type.  If that fails, it tries for a climbingexit type.  A climbing exit type is one that moves up or down from thecurrent z height.",}),"param":({"x the x co-ordinate","y the y co-ordinate","z the z co-ordinate","base the base path of the parent terrain handler",}),]),}),"query_feature_rooms":({({"mapping",}),({}),([]),}),"add_random_desc":({({"void",}),({({"string",}),"types",({"string",}),"description",({"mixed",}),"items",({"mixed",}),"item_desc",}),(["main":({"This method is to add to the list of random descriptions that can be added tospecific room types. A specific random sequence is used so that the randomswon't vary over time.",}),"see":({"set_random_desc_limit","set_random_chat_limit","add_random_chat","add_item",}),"param":({"types the string of ASCII character type(s) that this desc could apply to","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the corresponding item desc",}),]),}),"query_climb_base_room":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"int",}),"map_room",({"string","ref",}),"base",}),(["main":({"This method returns the basic room as the specified location.  A climbroom type means a room that is up or down on the z axis from where weare, but we are allowed to climb to.",}),"param":({"x the x location","y the y location","z the z location","map_room check down through the air for the room for the map","base the updated base (for climbing rooms)",}),"return":({"the basic room for the location",}),]),}),"remove_feature":({({"void",}),({({"string",}),"title",}),(["main":({"This method is used to remove a named feature from the terrain map",}),"see":({"add_feature",}),"param":({"title the name of the feature",}),]),}),"calc_random_chats":({({"void",}),({({"object",}),"room",({"string",}),"key",}),([]),}),"load_room_at":({({"object",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method is used to find a room at the specified coordinates,or to clone and setup a new one if none exists so far.",}),"see":({"load_room_at","query_room",}),"param":({"x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)",}),"return":({"the room at those coordinates, or 0 if none can be cloned",}),]),}),"query_rooms_in_range":({({"varargs","object","*",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"int",}),"max",({"int",}),"min",}),(["main":({"This method is used to find all the rooms currently cloned within aspecified distance of the specified coordinates.",}),"see":({"query_room_at","query_rooms_in_block","query_rooms_in_zone",}),"param":({"x the x coordinate of the center point","y the y coordinate of the center point","max the maximum distance of rooms to be returned","min the minimum distance of rooms to be returned. Defaults to 0",}),"return":({"an array containing any rooms currently cloned within thespecified range",}),]),}),"query_room":({({"mixed",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method queries the path of a room. If it takes the form:'/d/full/path/name.c:x:y' where x and y are integers, it clonesa new room at the specified coordinates, sets it up fully, and returns it.If the room path is of the standard form, it simply returns the loadedroom.",}),"see":({"load_room_at","query_room_at",}),"param":({"room_path the full pathname of the room to be cloned.",}),"return":({"the cloned/loaded room, or 0 if it could not be cloned/loaded",}),]),}),"query_dimensions":({({"int","*",}),({}),([]),}),"query_char_map_real_coord":({({"class","char_map_data",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"This is used by the terrain system to work out what is besideus.",}),"param":({"x the x position","y the y position",}),]),}),"add_feature_sentance":({({"void",}),({({"string",}),"title",({"int",}),"x",({"int",}),"y",({"int",}),"width",({"int",}),"height",({"int",}),"range",({"string","*",}),"descs",({"mixed",}),"items",({"mixed",}),"item_desc",({"string","*",}),"night_descs",({"mixed",}),"night_items",}),(["main":({"This method is called to add a new 'feature' to a terrain map.Features have no real existance, but add atmosphere to a whole area,by being visible across a large number of locations.  This method isdifferent to the normal add_feature in that the system will tryand construct a sentance from the features instead of once sentanceper feature.You define location, size, item desc, and add an array of 'longs'sorted by distance, plus the usual item descriptions. Any occurrencesof $D in the longs array will be replaced by the direction in whichthe feature lies.",}),"see":({"add_road_type","add_obstacle_type","set_feature_chats","modify_feature","add_item",}),"param":({"title the name of the feature","x the x coordinate of the room (internal coordinate system)","y the y coordinate of the room (internal coordinate system)","width the width of the feature","height the height of the feature","range the distance (number of rooms) it can be seen for","descs array of descriptions to be shown at different ranges.","items add_item name(s) (identical to the 'shorts' parameter in add_item)","item_desc a string, or array of strings giving the correspondingThese are divided equally along the total range",}),"example":({"  add_feature_sentance(\"northmountain\", 3, 0, 5, 1, 7,           ({ \"a huge snowy mountain towers over you to the $D\",              \"a huge snowy mountain looms to the $D\",              \"a fair way off to the $D, you can see a huge snowy mountain\",              \"a long way $Dwards, you glimpse the snowy peak of a \"              \"mountain\" }),              \"mountain\", \"From here, it looks quite astoundingly huge.\" );",}),]),}),"set_random_desc_limit":({({"void",}),({({"int",}),"new_limit",}),(["main":({"This method is used to limit the number of random descs that arepicked out for each room.",}),"see":({"set_random_chat_limit","add_random_desc","add_random_chat",}),"param":({"new_limit the new desc limit",}),]),}),])
protected_functions ([])
inherits (["/std/room/inherit/terrain_map/distance_str":({}),])
main_docs (["main":({"","Base inherit for terrain map handler.<p>When creating a new terrain map, inherit from this file to make your areahandler.<p>When inheriting from this file, it is essential that the functionsquery_map_file() and setup_handler() be overriden to return the fullpathname of the area map, and to set up type mappings.<p>To inherit from this file, use the following lines:<ul><li>#include <terrain_map.h><li><li>inherit TERRAIN_MAP_HANDLER_BASE</ul>",}),"index":({"terrain_map_handler",}),"started":({"Thurs April 12 2001 Too Damn Early BST",}),"author":({"Dek",}),"see":({"terrain_map_inside","terrain_map_outside","terrain_map_intro","terrain_map_example",}),])
define_docs (["RANDOM_HANDLER":([]),"AREA_ROAD":([]),"XY_DIFF":([]),"Y_DIFF":([]),"AREA_ROOM":([]),"AREA_OBSTACLE":([]),"X_DIFF":([]),"AREA_WORLD":([]),])
includes (["/include/player.h":1522061544,"/include/terrain_map.h":1522061544,"/include/playtesters.h":1522061544,"/include/weather.h":1522061544,])
class_docs (["sign_data":({0,({({"long",({"string",}),}),({"read_mess",({"string",}),}),({"short",({"string",}),}),({"name",({"string",}),}),({"language",({"string",}),}),}),([]),}),"real_coords":({0,({({"x1",({"int",}),}),({"y1",({"int",}),}),({"x2",({"int",}),}),({"y2",({"int",}),}),({"xdiff",({"int",}),}),({"ydiff",({"int",}),}),({"xydiff",({"int",}),}),({"zdiff",({"int",}),}),({"in_world_map",({"int",}),}),}),([]),}),"feature_data":({0,({({"range",({"int",}),}),({"descs",({"string","*",}),}),({"night_descs",({"string","*",}),}),({"f_items",({"mixed",}),}),({"f_item_desc",({"mixed",}),}),({"f_item_night_desc",({"mixed",}),}),({"whole_sentance",({"int",}),}),({"chats",({"mixed",}),}),({"night_chats",({"mixed",}),}),({"feature_ob",({"object",}),}),}),([]),}),"char_map_data":({0,({({"char",({"string",}),}),({"colour",({"string",}),}),({"path",({"string",}),}),({"room_desc",({"string",}),}),({"items",({"mixed",}),}),({"item_desc",({"mixed",}),}),({"chats",({"mixed",}),}),({"type",({"int",}),}),({"height",({"int",}),}),({"height_rooms",({"mapping",}),}),({"whole_sentance",({"int",}),}),({"adjacent_desc",({"string",}),}),({"room_jump",({"int",}),}),({"room_jump_matching",({"int",}),}),}),([]),}),])
file_name "/std/room/inherit/terrain_map/handler_base.c"
last_changed 1522061544
