#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_bank":({({"int",}),({}),(["main":({"This method returns true for all banks.",}),"return":({"1 for a bank",}),]),}),"query_franchise":({({"string",}),({}),(["main":({"This method returns the franchise associated with this bank.  For masterbanks this will always return 0.",}),"return":({"the franchise",}),]),}),"set_bank_name":({({"void",}),({({"string",}),"word",}),(["main":({"This method sets the name of the bank.",}),"param":({"word the name of the bank",}),]),}),"query_total_difference":({({"int",}),({}),(["main":({"This method returns the difference between the deposits and withdrawls.",}),"return":({"the difference between deposits and withdrawls",}),]),}),"query_main_branch_owner":({({"string",}),({}),(["main":({"This method returns the owner of the main bank branch.",}),"return":({"the owner name",}),]),}),"set_total_difference":({({"void",}),({({"int",}),"amount",}),(["main":({"This method changes the total difference by the specified amount.",}),"param":({"amount the amount to change it by",}),]),}),"adjust_total_difference":({({"void",}),({({"int",}),"amount",}),(["main":({"This method changes the total difference by the specified amount.",}),"param":({"amount the amount to change it by",}),]),}),"query_percentage":({({"int",}),({}),(["main":({"This method queries the percentage the bank charges on transactions.",}),"return":({"the percentage the bank charges",}),]),}),"query_bank_name":({({"string",}),({}),(["main":({"This is the name of the bank, used in creating bank branches.",}),"return":({"the name of the bank",}),]),}),"set_percentage":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets the percentage the bank charges on transactions.",}),"param":({"number the percentage to charge",}),]),}),"get_account":({({"int",}),({({"string",}),"player",}),(["main":({"This method gets the amount of money the person has in theiraccount.",}),"param":({"player the person to get the account for",}),"return":({"the account value",}),]),}),"adjust_account":({({"void",}),({({"string",}),"person",({"int",}),"amount",}),(["main":({"This method is changed the amouint in the specified account.  This isjust an informational thingy.",}),"param":({"person the person to update","amount the amount to update",}),]),}),"set_franchise":({({"void",}),({({"string",}),"franchise",}),(["main":({"This method sets the franchise associated with this bank.  For masterbanks this will always return 0.",}),"param":({"franchise the franchise address",}),]),}),"query_account_cost":({({"int",}),({}),(["main":({"This method returns the amount of money it costs to start an accountat this bank.",}),"return":({"the account cost",}),]),}),"find_main_bank":({({"object",}),({}),(["main":({"This method finds the main bank and returns the object of it.",}),"return":({"the main bank",}),]),}),"can_adjust_account":({({"int",}),({({"string",}),"person",({"int",}),"amount",}),(["main":({"THis should be overridden in higher inherits to control accountadjustments.",}),"param":({"person the person whose count is being adjusted","amount the amount it is adjusted by",}),"return":({"1 if they can adjust it, 0 if not",}),]),}),"set_account":({({"void",}),({({"string",}),"player",({"int",}),"amount",}),(["main":({"This method set the value of the account for the specified person",}),"param":({"person the person to set the account for","amount the amount to set the account for",}),]),}),"set_account_cost":({({"void",}),({({"int",}),"number",}),(["main":({"This method sets the amount of money that it costs to start an accountat this bank.",}),"param":({"number the cost of starting an account",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This is the bank inheritable.  It handles all the bank transactionsand other such exciting stuff.  This is a basic bank bit, does not controlany extra tricky bits of bank work.",}),"author":({"Pinkfish",}),])
define_docs (["OLD_BANK":([]),"HANDLER":([]),"NAME":([]),"CAP_NAME":([]),"POSS":([]),])
includes (["/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/inherit/bank_base.c"
last_changed 1522061544
