#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_group":({({"string",}),({({"object",}),"player",}),(["main":({"This method finds out which team player is a member of.",}),"param":({"player the player to find the team of",}),"return":({"the team they are a member of",}),]),}),"end_group":({({"int",}),({({"string",}),"g_name",}),(["main":({"This method ends a group.  Closes it, finishes it, done, finito.",}),"see":({"new_group()",}),"param":({"g_name the name of the group to close",}),]),}),"new_group":({({"int",}),({({"string",}),"g_name",({"object",}),"leader",({"int",}),"policy",}),(["main":({"This method creates a new team.",}),"see":({"end_group()",}),"param":({"g_name the name of the group","leader the leader of the group (object)","policy the policy of the group",}),]),}),"query_policy":({({"int",}),({({"string",}),"g_name",}),(["main":({"This method returns the policy of the team",}),"see":({"query_members()","query_leader()",}),"param":({"g_name the name of the team",}),"return":({"the policy of the team",}),]),}),"leaving":({({"void",}),({({"string",}),"p_name",({"string",}),"type",}),(["main":({"When a player leaves the game automatically remove them from their team.this function is called automatically by the login handler for everyplayer who leaves the game",}),"see":({"/obj/handlers/login_handler",}),"param":({"p_name the player name who is leaving","type the type of action being preformed",}),]),}),"join_group":({({"int",}),({({"string",}),"g_name",({"object",}),"player",}),(["main":({"This method joins a player into an existing group.",}),"see":({"new_group()","end_group()","leave_group()",}),"param":({"g_name the name of the group to join","player the player to join to the group",}),]),}),"query_owner":({({"object",}),({({"string",}),"g_name",}),(["main":({"This method determine the owner (leader)  of a team.",}),"see":({"query_members()","query_policy()",}),"param":({"g_name the name of the group to get the owner for",}),"return":({"the object refering to the owner",}),]),}),"test_group":({({"int",}),({({"string",}),"g_name",}),(["main":({"This method determine if a team exists.",}),"see":({"new_group()","query_group()",}),"param":({"g_name the name of the team",}),"return":({"1 if the team exists, 0 if not",}),]),}),"list_groups":({({"string","*",}),({}),(["main":({"This methor returns the list all the current teams.",}),"return":({"an array of all the current team",}),]),}),"leave_group":({({"int",}),({({"string",}),"g_name",({"object",}),"player",}),(["main":({"This method removes a player from the group.",}),"see":({"join_group()",}),"param":({"g_name the name of the group to leave","player the player to leave the group",}),]),}),"query_full":({({"int",}),({({"string",}),"g_name",}),(["main":({"This method checks if its ok to join a group.",}),"see":({"join_group()",}),"param":({"g_name the name of the group",}),"return":({"1 if the team is full, 0 if not",}),]),}),"query_members":({({"object","*",}),({({"string",}),"g_name",}),(["main":({"This method returns the members of the team.",}),"see":({"query_owner()","query_policy()","query_leader()",}),"param":({"g_name the name of the group to get the member of",}),"return":({"the members names as strings",}),]),}),"query_locked":({({"int",}),({({"string",}),"g_name",}),(["main":({"This method determines if the team is locked.",}),"see":({"set_locked()",}),"param":({"g_name the name of the team to test",}),"return":({"1 if locked, 0 if unlocked",}),]),}),"set_locked":({({"int",}),({({"string",}),"g_name",({"int",}),"lock",}),(["main":({"This method sets the lock flag on the team.",}),"see":({"query_locked()",}),"param":({"g_name the name of the team","lock the new lock flag",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This handler deals with grouping players into teams. Teams are entirelyoptional.  The handler deals with creating, joining, leaving and endingteams.  It also provides functions to find out who's a member of whichteam etc.<p>Commands will be available to do group things (group chatting, grouphealth etc.) By default team members will protect each other and followthe leader.",}),"started":({"June 96",}),"author":({"Ceres",}),])
define_docs (["MAX_GROUP_SIZE":([]),"SHADOW":([]),"CREATOR":([]),])
includes (["/include/player_handler.h":1522061544,"/include/login_handler.h":1522061544,])
class_docs (["group":({0,({({"leader",({"object",}),}),({"policy",({"int",}),}),({"members",({"object","*",}),}),({"locked",({"int",}),}),}),([]),}),])
file_name "/obj/handlers/team.c"
last_changed 1522061544
