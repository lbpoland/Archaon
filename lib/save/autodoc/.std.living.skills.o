#/obj/handlers/autodoc/autodoc_file.c
public_functions (["tm_check_ok":({({"int",}),({({"string",}),"skill",({"object",}),"exp",}),([]),}),"add_skill_level":({({"varargs","int",}),({({"string",}),"skill",({"int",}),"lvl",({"mixed",}),"exp",}),(["main":({"This method adds a skill level to the specified skill to thesystem.",}),"see":({"query_skill()","query_skill_bonus()",}),"param":({"skill the skill to add a level to","lvl the number of levels to add","exp the amount of exp spent on the skill",}),"return":({"1 if the skill level was changed",}),]),}),"add_teach_offer":({({"void",}),({({"object",}),"ob",({"string",}),"skill",({"int",}),"num",({"int",}),"lvl",({"int",}),"xp",}),(["main":({"This method adds a teaching offer to the living object.",}),"param":({"ob the object teaching us","skill the skill they are teaching","num the number of levels they are teaching","lvl the level they are teaching us from","xp the cost of the level increase in xp",}),]),}),"query_stat_cache":({({"mapping",}),({}),(["main":({"This method returns the cached values for the stats.",}),"return":({"the caches stat values",}),]),}),"query_skill":({({"int",}),({({"string",}),"skill",}),(["main":({"This returns jus the skill level.  Used a lot to determine if youcan use/teach/whatever a skill.This also uses a cache.",}),"param":({"skill the skill to return the level of",}),"return":({"the skill level",}),]),}),"stat_modify":({({"varargs","int",}),({({"int",}),"lvl",({"string",}),"skill",({"int",}),"use_base_stats",}),(["main":({"This method returns the skill as it should be modified by thestats associated with it.",}),"see":({"query_skill_bonus()",}),"param":({"lvl the level to modify","skill the skill the modify the bonus of","use_base_stats use the real unmodified stat values",}),"return":({"the stat modification",}),]),}),"query_complete_skill_branch":({({"mapping",}),({({"string",}),"branch",}),(["main":({"This method fills out a complete skill branch, complete with ALL child skills.It saves using many call_others to check skills.",}),"arg":({"string The branch you want to query [ie: faith, magic, etc.]",}),]),}),"totaly_zap_bonus_cache":({({"void",}),({}),(["main":({"This method zaps the bonus cache.",}),]),}),"query_skill_successful":({({"int",}),({({"string",}),"str",({"int",}),"mod",}),(["main":({"This method does a skill successful check.  Does this check:<br>(bonus + mos) >= random(200)",}),"param":({"str the skill to check","mod the modification value",}),"return":({"1 if the skill check is successful",}),]),}),"query_skill_bonus":({({"varargs","int",}),({({"string",}),"skill",({"int",}),"use_base_stats",}),(["main":({"This method returns the skill bonus for the specified skill.It returns the skill + all its bonsues for stats/whatever.It first checks to see if the skill is in it's cache.   THereal stat values are ones not modified by bonuses or temporaryvalues.",}),"param":({"skill the skill to get the bonus for","use_base_stats tells the system not to use the real stat values",}),"return":({"the skill bonus",}),]),}),"zap_stat_cache":({({"void",}),({}),(["main":({"This method zaps the stat cache when a certain stat changes.It calls the function stats_to_zap() on the living object tofigure out which stats have changed.",}),"see":({"/std/living/stats->stats_to_zap()",}),]),}),"query_bonus_cache":({({"mapping",}),({}),(["main":({"This method returns the current bonus cache for the living thing.The bonus cache is where the calculated bonuses for the skills arekept.",}),"return":({"the bonus cache mapping",}),]),}),"stop_teaching_skills":({({"void",}),({({"int",}),"left",({"mixed",}),"bing",}),(["main":({"The method to call when we stop teaching skills.  THis will stop thestuff being taught if the stop is successful, and only teach partialamounts if we are not finished yet.",}),"param":({"left the amount of time left","bing the data associated with the command",}),]),}),"query_teach_offer":({({"mapping",}),({}),(["main":({"This method returns the current list of teach offerings on theliving object.",}),"return":({"the mapping containing the teach offerings",}),]),}),"query_skills":({({"mapping",}),({}),([]),}),"set_skills":({({"void",}),({({"mapping",}),"map",}),([]),}),"not_there":({({"int",}),({({"string",}),"skill",}),(["main":({"This method checks to see if the skill exists in the skill array ornot.",}),"param":({"skill the skill to check for non-existance",}),"return":({"0 if it does not exist, 1 if it does",}),]),}),"calc_bonus":({({"varargs","int",}),({({"int",}),"lvl",({"string",}),"skill",({"int",}),"use_base_stats",}),(["main":({"This method calculates the bonus for the skill.  It takes the rawlevel and turns that into a bonus and then adds on the statsmodifications.",}),"param":({"lvl the level to turn into bonus","skill the skill to modify the bonus of","use_base_stats use the real unmodified stats",}),"return":({"the bonus associated with the skill",}),]),}),])
protected_functions (["flatten_it":({({"void",}),({({"string",}),"skill",}),(["main":({"This is used to convert a previously not only_leaf tree into an only_leaftree.",}),]),}),"totaly_zap_stat_cache":({({"void",}),({}),(["main":({"This method zaps the stat cache.",}),]),}),])
inherits ([])
main_docs (["main":({"This skills modules for living creates.  This deals will all theskill interactions needed for the living objects.",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/tasks.h":1522061544,"/include/tune.h":1522061544,"/include/skills.h":1522061544,])
class_docs ([])
file_name "/std/living/skills.c"
last_changed 1522061544
