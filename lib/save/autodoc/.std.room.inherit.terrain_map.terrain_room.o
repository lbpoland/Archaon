#/obj/handlers/autodoc/autodoc_file.c
public_functions (["do_outside_chats":({({"int",}),({}),(["main":({"This method may be overriden to prevent the handler from setting upadditional room_chats from appropriate adjacent locations.",}),"see":({"set_external_chats",}),"return":({"return 1 if the exits should be made, 0 otherwise",}),]),}),"query_map_handler":({({"object",}),({}),(["main":({"",}),"see":({"query_handler_path()",}),"return":({"returns the handler object associated with this terrain map.",}),]),}),"set_terrain_handler":({({"void",}),({({"string",}),"handler",}),(["main":({"This method sets the terrain handler for the room.",}),"param":({"handler the terrain handler",}),]),}),"query_room_path":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",}),(["main":({"This method returns the path at the specific co-ordinate.",}),"param":({"x the x co-ordinate","y the y co-ordinate","z the z co-ordinate",}),"return":({"the file name of the new room",}),]),}),"query_my_real_file_name":({({"string",}),({}),(["main":({"This method returns the actual file name of this object.",}),]),}),"can_view_feature_from":({({"int",}),({({"string",}),"name",({"string",}),"direc",({"int",}),"distance",}),(["main":({"This method may be overriden to mask out feature descriptions and chatsfrom one or more features in the current terrain map.  It allows moredetailed blocking, based on distance and direction.",}),"see":({"add_feature","modify_feature","set_feature_chats","remove_feature",}),"param":({"name the name of the feature being queried.","direc the direction to the feature","distance the range to the feature",}),"example":({"   int can_view_feature_from(string name, string direc, int distance)       {      switch (name) {         case \"mountain\" :            switch (direct) {            case \"east\" :               return 1;            default :               return 0;            }         case \"tree\"     : return 0;         default         : return 1;      }   }",}),"return":({"return 1 if the feature can be viewed from this room, 0 otherwise",}),]),}),"can_move_between":({({"int",}),({({"string",}),"my_type",({"string",}),"direc",({"string",}),"first_type",({"string",}),"second_type",({"string",}),"new_base_path",}),(["main":({"This method may be overriden to allow the handler to setup diagonal exitsbetween terrain types that are different.  What this does, here isa small explaination.  If you have a map below:<pre>   ff-   f-f   -ff<pre>Where the '-'s are roads, you do not want to let someone diagonalyjump the road.  So you make it so that you cannot go from thef on one side of the road to the other.  THis is the default behaviour,however you want people to be able to actualy walk diagonaly on the roadso you need to override this to allow the road to be walked on.exits from one or more types of location.<p>The values passed in are the paths to the final object files.  Not thekey values in the map.",}),"see":({"can_exit_to","add_room_type","add_road_type","query_to_same","query_to_other","query_from_other",}),"param":({"my_type our type","direc the direction we are checking in","first_type the first neighbouring path","second_type the second neighbouring path","new_base_path the path of the thing that is the destination",}),"return":({"return 1 if the exits should be made, 0 otherwise",}),]),}),"set_terrain_map_block":({({"void",}),({({"int",}),"blocking",}),(["main":({"This method sets if the particular room is see through or not.",}),"param":({"blocking sets the blocking flag",}),]),}),"query_to_other":({({"varargs","mixed","*",}),({({"string",}),"type",({"string",}),"to_direc",({"string",}),"from_direc",({"string",}),"path_to",}),(["main":({"The handler calls this function when setting up exits to allow theroom to set up any modify_exit parameters which should be appliedto exits leading to other locations of different types to this. Override it to provide any extra exit modifiers.",}),"see":({"modify_exit","query_to_same","query_from_other",}),"param":({"type the ASCII character representing the room type the exit leads to",}),"example":({"mixed *query_to_other(string type){    return ({ \"move mess\", \"You scramble up the stream bank.\\n\",             \"enter mess\", \"$N scrambles up the stream bank from the $F.\",             \"exit mess\", \"$N scrambles up the stream bank to the $T.\",             \"hidden\", \"1 });}",}),"return":({"an array of exit modifiers. This should take the same form asused in modify_exit",}),]),}),"query_direction_distance_str":({({"string",}),({({"int",}),"num",({"string",}),"dir",}),(["main":({"This method returns a string which says how far they have moved.",}),"param":({"num how many steps in the direction","dir the direction",}),]),}),"long_test":({({"string",}),({({"string",}),"str",({"int",}),"dark",}),([]),}),"query_dest_dir":({({"mixed","*",}),({({"mixed","*",}),"data",}),(["main":({"Mess with the data.",}),]),}),"hash_time":({({"int",}),({({"int",}),"mod",({"int",}),"period",}),(["main":({"This produces a deterministicly static value that only exists for aspecific period of time, before moving.  You can use this for movableoasises for example.",}),"param":({"mod the modulus to get the random number over","period the period the number should remain constant",}),]),}),"query_terrain_map_walk_exit":({({"string",}),({}),(["main":({"This method returns the prefix to use for 'walk' exits in this room.",}),]),}),"add_default_exit":({({"void",}),({({"string",}),"exit",({"string",}),"location",}),(["main":({"This method adds a default exit into the list of default exits.",}),"param":({"exit the exit to make variable","location this is the walk exit location",}),]),}),"query_terrain_coords":({({"mixed","*",}),({}),(["main":({"This returns the terrain coordinate of the room.It returns an array that contains the x, y, z valuesof the co-ordinate.",}),"return":({"the terrain co-ordinate",}),]),}),"query_terrain_handler":({({"string",}),({}),(["main":({"This method returns the terrain handler forthe room.",}),"return":({"the terrain handler",}),]),}),"query_from_other":({({"varargs","mixed","*",}),({({"string",}),"type",({"string",}),"to_direc",({"string",}),"from_direc",({"string",}),"path_from",}),(["main":({"The handler calls this function when setting up exits to allow theroom to set up any modify_exit parameters which should be appliedto exits leading from other locations of different types to this. Override it to provide any extra exit modifiers.",}),"see":({"modify_exit","query_to_same","query_from_other",}),"param":({"type the ASCII character representing the room type the exit leads from",}),"example":({"mixed *query_from_other(string type){    return ({ \"move mess\", \"You scramble down the bank into the stream.\\n\",             \"enter mess\", \"$N scrambles down the $F bank into the stream.\",             \"exit mess\", \"$N scrambles down the stream bank to the $T\" });}",}),"return":({"an array of exit modifiers. This should take the same form asused in modify_exit",}),]),}),"query_dest_coordinate_string":({({"string",}),({({"int",}),"x",({"int",}),"y",({"int",}),"z",({"string",}),"direc",({"string",}),"key",}),(["peram":({"key the key of the room that is coming to us",}),"main":({"This function allows you to change the destination location of the roomif nessessary.  This is useful for bridges and other things which need tomove people up or down one z-coordinate when they cross the line.",}),"param":({"x the x coordinate","y the y coordinate","z the z coordinate","direct the direction used to enter this location",}),]),}),"stats":({({"mixed",}),({}),([]),}),"query_dest_other":({({"mixed","*",}),({({"string",}),"exit",({"mixed","*",}),"data",}),(["main":({"This messes with the return values of the rooms.",}),"param":({"exit the exit to look at","data the actual data from the room code",}),"return":({"the messed with data",}),]),}),"can_enter_from":({({"int",}),({({"string",}),"type",({"string",}),"direc",({"string",}),"base_path",}),(["main":({"This method may be overriden to prevent the handler from setting upexits from one or more types of location.",}),"see":({"can_exit_to","add_room_type","add_road_type","query_to_same","query_to_other","query_from_other",}),"param":({"type the type of location the exit would be from. This is the same as the character used in the ASCII map.",}),"example":({"   int can_enter_from(string type)       {      switch (type) {         case \"#\" : return 0;         case \"*\" : return 0;         default  : return 1;      }   }",}),"return":({"return 1 if the exits should be made, 0 otherwise",}),]),}),"reset_handler":({({"void",}),({}),(["main":({"This method destroys every single room in the associated terrain map.It is provided for development purposes only, and should be used cautiouslyas it will currently dump every single player in the map into the void.Plans are afoot to make the side-effects a little less dire.",}),]),}),"query_default_exits":({({"mapping",}),({}),(["main":({"This method returns the default exits mapping.",}),"return":({"the default exits mapping",}),]),}),"do_map_terrain":({({"int",}),({}),(["main":({"This method draws the map of the entire terrain.",}),]),}),"do_map":({({"int",}),({}),(["main":({"This method draws a little debug map for the creator.",}),]),}),"add_variable_exit":({({"void",}),({({"string",}),"exit",}),(["main":({"This method adds a variable exit into the list of variable exits.",}),"param":({"exit the exit to make variable",}),]),}),"set_terrain_map_character":({({"void",}),({({"string",}),"terr",}),(["main":({"This method sets the character to use for this terrain in the playervisible map.",}),"param":({"char the character to use in the map",}),]),}),"can_exit_to":({({"int",}),({({"string",}),"type",({"string",}),"direc",({"string",}),"base_path",}),(["main":({"This method may be overriden to prevent the handler from setting upexits to one or more types of location.",}),"see":({"can_enter_from","add_room_type","add_road_type","query_to_same","query_to_other","query_from_other",}),"param":({"type the type of location the exit would be to. This is the same as the character used in the ASCII map.",}),"example":({"   int can_exit_to(string type)       {      switch (type) {         case \"#\" : return 0;         case \"*\" : return 0;         default  : return 1;      }   }",}),"return":({"return 1 if the exits should be made, 0 otherwise",}),]),}),"query_enter_exit_direction":({({"string",}),({({"string",}),"key",({"string",}),"key_here",({"string",}),"direc",({"object",}),"room",({"string",}),"base_path",}),(["main":({"This method is used to setup any unusual sorts of entrances to specific room types.  For example so that you have to actually swimto get into a river rather than acidentally walking into it.  Ifthis does return a string a default exit is not setup for this directionso just going 'east' doesn't drop you in the river.",}),"param":({"key the key of the map location we are coming from","key_here my key of the character in the map","direc the direction the exit is in","room the room being setup","base_path the base path of the object we are coming from",}),"return":({"0 to do nothing, a string to replace the main exit",}),]),}),"can_view_adjacent_desc":({({"int",}),({({"string",}),"char",({"string",}),"key_here",({"string",}),"path",({"int",}),"z",({"string",}),"direc",}),(["main":({"If this can be seen from this location or not.  This can do thingslike dealing with lower levels and stuff.",}),"param":({"char the character of the item in the map","path the path of the room (0 if an obstacle)","z the z co-ordinate of the room","direc the direction in which the obstacle faces",}),]),}),"query_to_same":({({"varargs","mixed","*",}),({({"string",}),"type",({"string",}),"to_direc",({"string",}),"from_direc",({"string",}),"path_to",}),(["main":({"The handler calls this function when setting up exits to allow theroom to set up any modify_exit parameters which should be appliedto exits leading to other locations of the same type as this. Override it to provide any extra exit modifiers.",}),"see":({"modify_exit","query_to_other","query_from_other",}),"param":({"type the ASCII character representing this room type",}),"example":({"mixed *query_to_same(string type){    return ({ \"move mess\", \"You wade along the stream bed.\\n\",             \"enter mess\", \"$N wades in from the $F.\",             \"exit mess\", \"$N wades off to the $T.\",             \"hidden\", \"1 });}",}),"return":({"an array of exit modifiers. This should take the same form asused in modify_exit",}),]),}),"hash":({({"int",}),({({"int",}),"mod",}),(["main":({"This method makes a deterministic hash value based on the real co-ordinatesof this room.",}),"param":({"mod the modules to use on the return result",}),"return":({"a deterministicly random number between 0..mod -1",}),]),}),"query_terrain_map_journey_exit":({({"string",}),({}),(["main":({"This method returns the prefix to use for 'journey' exits in this room.",}),]),}),"query_terrain_map_character":({({"string",}),({}),(["main":({"This method returns the character to use for this terrain in the playervisible map.",}),"return":({"the terrain character",}),]),}),"can_view_feature":({({"int",}),({({"string",}),"name",}),(["main":({"This method may be overriden to mask out feature descriptions and chatsfrom one or more features in the current terrain map.",}),"see":({"add_feature","modify_feature","set_feature_chats","remove_feature",}),"param":({"name the name of the feature being queried.",}),"example":({"   int can_view_feature(string name)       {      switch (name) {         case \"mountain\" : return 0;         case \"tree\"     : return 0;         default         : return 1;      }   }",}),"return":({"return 1 if the feature can be viewed from this room, 0 otherwise",}),]),}),"query_terrain_map_block":({({"int",}),({}),(["main":({"This method returns if the room is blocking or not.",}),"return":({"if the room is blocking or not",}),]),}),])
protected_functions ([])
inherits (["/std/room/inherit/terrain_map/factory_base.c":({}),])
main_docs (["main":({"","Base inherit for a terrain_map room.<p>This file should be inherited by any room within a terrain mappedvirtual area.<p>When inheriting from this file, it is essential that the functionquery_handler_path() be overriden to return the full pathname ofthe handler associated with this area.<p>To inherit from this file, use the following lines:<ul><li>#include <terrain_map.h><li><li>inherit TERRAIN_MAP_OUTSIDE_BASE</ul>",}),"started":({"Thurs April 12 2001 Too Damn Early BST",}),"author":({"Dek",}),"see":({"terrain_map_handler","terrain_map_intro","terrain_map_example",}),])
define_docs (["BLOCKING_FLAG":([]),"INSTALLED_FLAG":([]),])
includes (["/include/player_handler.h":1522061544,"/include/terrain_map.h":1522061544,"/include/login_handler.h":1522061544,"/include/room.h":1522061544,])
class_docs (["feature":({0,({({"direcs",({"mapping",}),}),({"items",({"mixed",}),}),({"sentance",({"int",}),}),({"index",({"int",}),}),({"visible",({"int",}),}),}),([]),}),])
file_name "/std/room/inherit/terrain_map/terrain_room.c"
last_changed 1522061544
