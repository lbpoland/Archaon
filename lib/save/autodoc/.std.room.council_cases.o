#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_punishment_short":({({"string",}),({({"string",}),"name",({"class","nomic_case",}),"the_case",({"mixed",}),"data",}),(["main":({"This method returns the short of the punishment.",}),"param":({"name the name of the punishment type","the_case the caseof the thingy","data the extra punishment type data",}),"return":({"the short of the type",}),]),}),"do_player_status":({({"int",}),({({"string",}),"person",}),(["main":({"This is the command to print the status of the current open andrecently closed cases.",}),"param":({"player the player to show",}),"return":({"1 on success, 0 on failure",}),]),}),"close_case_desc":({({"void",}),({({"string",}),"desc",({"mixed","*",}),"extra",}),(["main":({"This method sets up an exciting set of closing comments for thecase.",}),"param":({"desc the closing desc","extra the extra data",}),]),}),"do_open_case":({({"int",}),({({"string",}),"people",({"string",}),"short",}),(["main":({"Opening a case.",}),"param":({"people the people the case ie against","short the short description of the case",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_case":({({"int",}),({({"int",}),"case_id",}),(["main":({"This method lists the specified open case.",}),"param":({"case_id the case to list",}),"return":({"1 for success, 0 if failed",}),]),}),"do_appeal_case":({({"int",}),({({"int",}),"case_id",}),(["main":({"This method appeals the case.",}),"param":({"case_id the id of the case",}),"return":({"1 on success, 0 on failure",}),]),}),"do_add_note":({({"int",}),({({"int",}),"case_id",}),(["main":({"This method adds a note to an open case.",}),"param":({"case_id the id of the case to add a note to",}),"return":({"1 for success, 0 if failed",}),]),}),"query_last_closer":({({"string",}),({({"class","nomic_case",}),"the_case",}),(["main":({"This method checks and sees if the person is the last person to closethe case.",}),"param":({"person the person to check",}),]),}),"do_add_person":({({"int",}),({({"int",}),"case_id",({"string",}),"person",}),(["main":({"This method adds a person to an open case.",}),"param":({"case_id the case to add it to","person the person to add",}),"return":({"1 on success, 0 on failure",}),]),}),"query_extra_player_status":({({"string",}),({({"string",}),"player",}),(["main":({"This method returns any extra information to print about a player inthe status information.",}),"param":({"player the player we are checking",}),"return":({"any extra information",}),]),}),"do_close_case":({({"int",}),({({"int",}),"case_id",({"string",}),"type",}),(["main":({"This method closes the case.",}),"param":({"case_id the id of the case","type the type of closing",}),"return":({"1 on success, 0 on failure",}),]),}),"do_list_punishments":({({"int",}),({}),(["main":({"This method lists the current set of punishments known by thisarea.",}),]),}),"do_list_closed_case":({({"int",}),({({"int",}),"case_id",}),(["main":({"This method lists the specified closed case.",}),"param":({"case_id the case to list",}),"return":({"1 for success, 0 if failed",}),]),}),"do_list_punishments_desc":({({"int",}),({({"string",}),"type",}),(["main":({"This method lists the current set of punishments known by thisarea.",}),]),}),"start_punishment":({({"void",}),({({"string",}),"name",({"class","nomic_case",}),"the_case",({"function",}),"finish",}),(["main":({"This method starts the punishment check thingy to get any extraarguements.",}),"param":({"name the name of the punishment to check","the_case th case we are messing with","finish the finish function to call",}),]),}),"do_list_closed_cases":({({"int",}),({}),(["main":({"This method lists all the recently closed cases.",}),"return":({"1 for success, 0 if failed",}),]),}),"query_punishment_type":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the file associated with the type.",}),"param":({"name the nam eof the class to lookup",}),"return":({"the file of the type",}),]),}),"add_punishment_type":({({"void",}),({({"string",}),"name",({"string",}),"file",}),(["main":({"This method adds a type to the room.  A type is a type ofpunishment that can be applied to the person when the case is close.The different functions have the following arguments:<br>start_punishment(the_case, type, finish_func)<br>query_short(the_case, type, data)<br>complete_punishment(the_case, type, data)<br>finish_func(the_case, type, data) (from start())<br>suspend_punishment(the_case, type, data)<br><P>The functions are all called on a inheritable file.",}),"param":({"name the name of the type","short the function to make the short description","start the function to call at the start","complete the function to call at the completion","suspend suspend the punishment",}),]),}),"do_remove_person":({({"int",}),({({"int",}),"case_id",({"string",}),"person",}),(["main":({"This method adds a person to an open case.",}),"param":({"case_id the case to add it to","person the person to add",}),"return":({"1 on success, 0 on failure",}),]),}),"query_last_appealer":({({"string",}),({({"class","nomic_case",}),"the_case",}),(["main":({"This method finds the last person to appeal the case.",}),"param":({"person the person to check",}),]),}),"do_list_open_cases":({({"int",}),({}),(["main":({"This method lists all the currently open cases.",}),"return":({"1 for success, 0 if failed",}),]),}),"query_all_punishment_types":({({"string","*",}),({}),(["main":({"This method returns the name of all the allowed punishment types.",}),]),}),"is_last_appealer":({({"int",}),({({"class","nomic_case",}),"the_case",({"string",}),"person",}),(["main":({"This method checks and sees if the person is the last person to appealthe case.",}),"param":({"person the person to check",}),]),}),"complete_punishment":({({"void",}),({({"string",}),"name",({"class","nomic_case",}),"the_case",({"mixed",}),"data",}),(["main":({"This method starts the punishment check thingy to get any extraarguements.",}),"param":({"name the name of the punishment to check","the_case th case we are messing with","finish the finish function to call",}),]),}),"is_last_closer":({({"int",}),({({"class","nomic_case",}),"the_case",({"string",}),"person",}),(["main":({"This method checks and sees if the person is the last person to closethe case.",}),"param":({"person the person to check",}),]),}),"query_punishment_mail_info":({({"string",}),({({"string",}),"name",({"class","nomic_case",}),"the_case",({"mixed",}),"data",}),(["main":({"This method returns the mail information of the punishment.",}),"param":({"name the name of the punishment type","the_case the caseof the thingy","data the extra punishment type data",}),"return":({"the short of the type",}),]),}),"query_case_short":({({"string",}),({({"class","nomic_case",}),"the_case",}),(["main":({"The short description of the case.",}),"param":({"the_case the case to get a short desc",}),"return":({"the short description of the case",}),]),}),"suspend_punishment":({({"void",}),({({"class","nomic_case",}),"the_case",}),(["main":({"This method suspends the punishment after it is started.  Used in theappeals process.",}),"param":({"the_case th case we are messing with",}),]),}),])
protected_functions ([])
inherits (["/std/room/basic_room":({}),"/std/room/inherit/council_base":({}),])
main_docs (["main":({"This room is for handling control of cases.  It allows people toadd notes, open cases and general have a wild time in case land.",}),"started":({"Fri Jul 21 18:57:34 PDT 2000",}),"param":({"Pinkfish",}),])
define_docs ([])
includes (["/include/player_handler.h":1522061544,"/include/nomic_system.h":1522061544,"/include/mail.h":1522061544,])
class_docs ([])
file_name "/std/room/council_cases.c"
last_changed 1522061544
