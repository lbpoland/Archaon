#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_allowed_add":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the allowed add flag.  If theis flag is set to 0then it is not possible for players to add items forauctions.",}),"param":({"flag the allowed add flag",}),]),}),"do_info":({({"int",}),({}),(["main":({"This method shoes information about the auction house, like theamount of time for each type of auction.",}),"return":({"1 on success",}),]),}),"do_list":({({"int",}),({}),(["main":({"This method lists all the current auctions.",}),]),}),"query_last_auction_finish_time":({({"int",}),({}),(["main":({"This method figures out when the last auction will finish.",}),"return":({"when the last auction finished",}),]),}),"set_check_can_bid":({({"void",}),({({"function",}),"f",}),(["main":({"This method sets a function to be called to check if someone canbid or not.",}),"param":({"func the function to call",}),]),}),"finish_auction":({({"void",}),({({"class","auction",}),"auction",}),(["main":({"This method finishes the aution on the specified item.",}),"param":({"auction the auction item that is being finished",}),]),}),"do_bid":({({"int",}),({({"string",}),"id",({"string",}),"bid",}),(["main":({"This method makes a bid on the specified item.",}),"param":({"id the item to bid on","bid the amount to bid",}),"return":({"1 on success, 0 on failure",}),]),}),"query_auction_objects":({({"object","*",}),({({"class","auction",}),"auct",}),(["main":({"This method finds the objects associated with the auction item.",}),"param":({"auction the auction item",}),"return":({"the objects associated with it",}),]),}),"load_me":({({"void",}),({}),(["main":({"This method loads the auction house up.",}),]),}),"query_time_end_string":({({"string",}),({({"int",}),"left",}),(["main":({"This method prints a nice string showing how long it is till thenend of the thing.",}),"param":({"left the time to get the difference for",}),"return":({"time end string",}),]),}),"set_max_retries":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the number of times an item will be retried beforethe auction is failed.",}),"param":({"i the number of seconds the item will wait for someone to claim it.",}),]),}),"set_min_bid_increase":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the minimum bid increase (as a percentage of thecurrent bid).",}),"param":({"i percentage",}),]),}),"force_finish_auction":({({"void",}),({({"string",}),"id",}),(["main":({"This method forcibly finishes the auction on the specified item.This is only to be used for debugging purposes.",}),"param":({"auction the auction item that is being finished",}),]),}),"save_me":({({"void",}),({}),(["main":({"This method saves the auction house.",}),]),}),"set_max_auctions":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the maximum number of simultaneous auctions.",}),"param":({"i the number of items.",}),]),}),"bid_on_item":({({"void",}),({({"class","auction",}),"auct",({"int",}),"bid",({"string",}),"person",}),(["main":({"This method makes a bid on an item.",}),"param":({"item the item to bid on","bid the amount to bid","person the person making the bid",}),]),}),"set_save_file":({({"void",}),({({"string",}),"fname",}),(["main":({"This method sets the save file name.",}),"param":({"fname the save file name",}),]),}),"do_browse":({({"int",}),({({"string",}),"id",}),(["main":({"This method allows you to browse the item.",}),"param":({"id the id of the auction thing to browse",}),]),}),"retry_auction":({({"void",}),({({"class","auction",}),"auction",}),(["main":({"This method retries the aution on the specified item.",}),"param":({"auction the auction item that is being finished",}),]),}),"next_auction_finish":({({"void",}),({}),(["main":({"This method figures out when the next auction finishes and sets upa timeout.",}),]),}),"query_auction_times":({({"mapping",}),({}),(["main":({"This method returns the length of auctions in seconds.",}),"return":({"the length of auctions.",}),]),}),"query_auction_end_string":({({"string",}),({({"class","auction",}),"auction",}),(["main":({"This method printsd a nice string showing how long till the auctionends.",}),"param":({"auction the auction to get an end string for",}),"return":({"auction end string",}),]),}),"remove_finished_auction_item":({({"void",}),({({"class","auction",}),"auction",}),(["main":({"This method removes the specified auction from the list.",}),"param":({"auction the auction item that is being removed",}),]),}),"query_auctions":({({"class","auction","*",}),({}),(["main":({"This method returns the current list of available auctions.",}),"return":({"the current auctions",}),]),}),"query_save_file":({({"string",}),({}),(["main":({"This method queries the save file name.",}),]),}),"do_claim":({({"int",}),({}),(["main":({"This method claims anything that you can bought and is waiting forpickup.",}),]),}),"do_withdraw":({({"int",}),({({"string",}),"id",}),(["main":({"This method withdraws the item from bidding.  You pay a penalty when youdo this, 10% of the current item cost.",}),"param":({"id the id to withdraw",}),]),}),"do_add":({({"int",}),({({"string",}),"name",({"object","*",}),"obs",({"string",}),"res_str",({"string",}),"length",}),(["main":({"This method adds an item for bidding.",}),"param":({"name the name to put them up for bidding as","obs the objects to auction","res_str the reserve price","length the length of the auction",}),"return":({"1 on success, 0 on failed",}),]),}),"add_item_to_auction":({({"int",}),({({"object","*",}),"obs",({"string",}),"name",({"int",}),"reserve",({"string",}),"seller",({"int",}),"length",({"string",}),"end_function",({"mixed",}),"extra",}),(["main":({"This method puts an item up for auction.",}),"param":({"obs the objects to sell","name the name of the item","reserve the reserve price of the item","seller the seller of the item","length the length of the auction","end_function the function to call when the item is sold",}),"return":({"1 on success, 0 on failure",}),]),}),"query_auction_item":({({"class","auction",}),({({"string",}),"id",}),(["main":({"This method finds the item based on some useful string.",}),"param":({"id the id to lookup",}),"return":({"the auction item, 0 in the case of error",}),]),}),"remove_auction_item":({({"void",}),({({"class","auction",}),"auction",}),(["main":({"This method removes the specified auction from the list.",}),"param":({"auction the auction item that is being removed",}),]),}),"set_retrieval_time":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the length of the retrieval time.",}),"param":({"i the number of seconds the item will wait for someone to claim it.",}),]),}),"confirm_auction":({({"void",}),({({"string",}),"check",({"string",}),"name",({"object","*",}),"obs",({"int",}),"reserve",({"int",}),"len",}),(["main":({"Confirm the addition ",}),]),}),"set_auction_time":({({"void",}),({({"string",}),"index",({"int",}),"i",}),(["main":({"This method sets the length of auctions in seconds.",}),"param":({"index the name of the auction type to change","i the length of auctions.",}),]),}),"query_finished_auctions":({({"class","auction","*",}),({}),(["main":({"This method returns the current list of finished auctions.",}),"return":({"the current auctions",}),]),}),])
protected_functions ([])
inherits (["/std/shops/inherit/open_shop":({}),"/std/shops/inherit/shop_event":({}),])
main_docs (["main":({"This inherit handles auctioning stuff.",}),"started":({"Mon Apr 30 22:47:38 PDT 2001",}),"author":({"Pinkfish",}),])
define_docs (["DEFAULT_EXTENSION_TIME":([]),"DEFAULT_LONG_AUCTION_LENGTH":([]),"DEFAULT_SHORT_AUCTION_LENGTH":([]),"DEFAULT_RETRIEVAL_TIME":([]),"DEFAULT_MEDIUM_AUCTION_LENGTH":([]),"DEFAULT_VERY_LONG_AUCTION_LENGTH":([]),"DEFAULT_QUICK_AUCTION_LENGTH":([]),])
includes (["/include/room/auction.h":1522061544,"/include/mail.h":1522061544,"/include/player_handler.h":1522061544,"/include/move_failures.h":1522061544,"/include/player.h":1522061544,"/include/am_time.h":1522061544,"/include/shops/bank.h":1522061544,"/include/money.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["auction":({0,({({"save_stuff",({"mixed",}),}),({"time_started",({"int",}),}),({"auction_length",({"int",}),}),({"name",({"string",}),}),({"seller",({"string",}),}),({"current_bidder",({"string",}),}),({"bid",({"int",}),}),({"reserve",({"int",}),}),({"retries",({"int",}),}),({"end_function",({"string",}),}),({"extra",({"mixed",}),}),}),([]),}),])
file_name "/std/shops/inherit/auction_house.c"
last_changed 1522061544
