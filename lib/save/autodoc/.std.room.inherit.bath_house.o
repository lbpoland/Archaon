#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_baths":({({"int",}),({}),([]),}),"wash_player":({({"int",}),({({"object",}),"ob",}),(["main":({"This method washes a player.  Any wash commands that are definedmust ultimately call this function, so that all of the washfunctions can be evaluated.<p>When an effect is found on the player for a matching wash effectclassification, the function specified is evaluated with the followingparameters:<ul> <li>ob, the player who is being washed <li>classification, the classification of the effect that was matched. <li>arg, the arguments to the effect. <li>effect_enum, the position of the effect in the player's effect list. <li>effect_ob, the object that the effect is found in.</ul><p>After this, the finished functions are evaluated with two arguments, the firstone being ob, the second one being an array of all the wash effect classificationsthat were matched correctly.",}),"param":({"ob the object to wash",}),"return":({"1 if the player was washed successfully, 0 if they weren't.",}),]),}),"query_wash_classifications":({({"string","*",}),({}),(["main":({"This returns a list of all the effect classifications that are currentlybeing managed.",}),"return":({"an array of strings.",}),]),}),])
protected_functions (["advanced_antiseptic":({({"void",}),({({"object",}),"ob",({"string",}),"classification",({"int",}),"effect_enum",({"mixed",}),"arg",({"object",}),"effect_ob",}),(["main":({"This is a basic cleaning method that can be used to remove a fewdefault things.",}),]),}),"add_finished_func":({({"int",}),({({"function",}),"func",}),(["main":({"This adds a function to be evalauted when all of the wash effectshave been evaluated.",}),"param":({"func the function to be evaluated",}),"return":({"1",}),]),}),"remove_wash_effect":({({"int",}),({({"string",}),"classification",}),(["main":({"This method removes a wash effect.",}),"param":({"the classification of the effect to be removed.",}),"return":({"1 if the effect was successfully removed, 0 if it wasn't.",}),]),}),"add_wash_effect":({({"int",}),({({"string",}),"classification",({"function",}),"func",}),(["main":({"This method adds an effect to be removed when washing here.If the effect is matched, then func is evaluated.",}),"param":({"classification the effect classification to match.","func the function to evaluate when the effect is matched.",}),"example":({"add_wash_effect( \"body.smell\", (: advanced_antiseptic :) );","add_wash_effect( \"object.label\", (: basic_cleaning( $1, $3,   \"The labels stuck to your body peel off in the water.\" ) :) );",}),"return":({"1 if the effect classification was added, 0 if it could not be(most likely a duplicate effect classification).",}),]),}),"wet_person":({({"void",}),({({"object",}),"ob",({"string","*",}),"applied_effects",}),([]),}),"basic_cleaning":({({"void",}),({({"object",}),"ob",({"int",}),"effect_enum",({"string",}),"message",}),(["main":({"This is a small cut down cleaning effect that displays a message.",}),]),}),"apply_soap":({({"void",}),({({"object",}),"ob",({"string","*",}),"applied_effects",}),(["main":({"This is the default finished func. It adds soap.",}),]),}),])
inherits ([])
main_docs (["main":({"Bath house inheritable!",}),"started":({"30/04/00 12:08",}),"author":({"Taffyd",}),])
define_docs (["SOAP_EFFECT":([]),"WET_EFFECT":([]),])
includes (["/include/effect.h":1522061544,])
class_docs ([])
file_name "/std/room/inherit/bath_house.c"
last_changed 1522061544
