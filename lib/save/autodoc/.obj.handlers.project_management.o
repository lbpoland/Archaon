#/obj/handlers/autodoc/autodoc_file.c
public_functions (["rotate_project":({({"void",}),({({"mixed",}),"tmp",}),([]),}),"project_note_data":({({"class","note","*",}),({({"string",}),"id",}),([]),}),"set_project_file":({({"void",}),({({"string",}),"id",({"class","project",}),"tmp",({"string",}),"name",}),([]),}),"add_playtester":({({"string","*",}),({({"string",}),"id",({"string","*",}),"pt",}),([]),}),"query_project_notes":({({"string","*",}),({({"string",}),"id",}),([]),}),"add_creator":({({"int",}),({({"string",}),"id",({"string",}),"creator",}),([]),}),"query_number_of_pts":({({"int",}),({({"mixed",}),"proj",}),([]),}),"nuke_creator_project_cache":({({"int",}),({({"string","*",}),"creators",}),([]),}),"query_task_creators":({({"string","*",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"set_project_lock":({({"void",}),({({"string",}),"project",}),([]),}),"query_description":({({"string",}),({({"string",}),"id",}),([]),}),"remove_file":({({"int",}),({({"string",}),"id",({"string",}),"file",({"string",}),"task",({"string",}),"name",}),([]),}),"query_number_rotations":({({"int",}),({({"mixed",}),"proj",}),([]),}),"do_load_tmp":({({"void",}),({}),([]),}),"reset_files":({({"int",}),({({"string",}),"id",}),([]),}),"set_description":({({"int",}),({({"string",}),"id",({"string",}),"desc",}),([]),}),"add_project":({({"int",}),({({"string",}),"id",({"string",}),"nname",({"string",}),"lead",({"string",}),"desc",({"string","*",}),"dom",({"string","*",}),"cre",({"string",}),"add_name",({"int",}),"size",({"int",}),"complexity",({"string","*",}),"guilds",}),(["main":({" Add a project to the database. @param id the project to add. @param nname the name of the project @param lead the project leader. @param desc the description of the project @param dom the domains the project belongs to @param cre the creators assigned to the project @param add_name the person adding the project. @returns the index of the added project, or -1 if the project already    exists",}),]),}),"query_project_lock":({({"int",}),({({"string",}),"project",}),([]),}),"clear_playtesting_projects":({({"int",}),({({"string","*",}),"names",}),([]),}),"delete_project":({({"int",}),({({"string",}),"id",({"string",}),"name",}),(["main":({" Delete a project from the array. @param id the note to search for. @param name the name of the person deleting. @returns 1.",}),]),}),"do_setup":({({"void",}),({}),([]),}),"set_size":({({"int",}),({({"mixed",}),"proj",({"int",}),"siz",}),([]),}),"query_projects_for_creator_in_domain":({({"string","*",}),({({"string",}),"creator",({"string",}),"domain",}),([]),}),"query_project_completeness":({({"int",}),({({"string",}),"id",}),([]),}),"query_projects":({({"string","*",}),({}),([]),}),"find_task":({({"int",}),({({"mixed",}),"i",({"string",}),"id",}),(["main":({" Find the index of a particular task for a project. @param i the project to search for @param id the task to search for. @returns the index of the task, or -1 if none is found.",}),]),}),"set_project_leader":({({"int",}),({({"string",}),"id",({"string",}),"leader",}),([]),}),"get_project_file":({({"class","project",}),({({"string",}),"id",}),([]),}),"query_twiki":({({"string","*",}),({({"string",}),"id",}),([]),}),"query_time_to_rotate":({({"int",}),({({"mixed",}),"proj",}),([]),}),"insert_into_tasks":({({"int",}),({({"int",}),"i",({"mixed",}),"temp",}),(["main":({" Insert an element into the tasks array.  It will do this  alphabetically to ensure that the binary search algorithim can locate projects. @param i the index of the project to insert into. @param temp the element to insert @returns the index of the inserted element.",}),]),}),"set_task_file":({({"void",}),({({"string",}),"id",({"string",}),"t",({"class","task",}),"tmp",({"string",}),"name",}),([]),}),"parse_details":({({"string",}),({({"class","project",}),"p",}),(["main":({" Return a brief summary of the pertinent details of a particular project. @param p the project to summarise. @returns the string summary.",}),]),}),"query_task_aims":({({"string",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"query_files":({({"class","file","*",}),({({"string",}),"id",}),([]),}),"query_pt_cache":({({"string","*",}),({}),([]),}),"next_rotation_time":({({"int",}),({({"mixed",}),"proj",}),([]),}),"set_status":({({"int",}),({({"string",}),"id",({"int",}),"stat",}),([]),}),"set_complexity":({({"int",}),({({"mixed",}),"proj",({"int",}),"com",}),([]),}),"query_guild_specific":({({"string","*",}),({({"mixed",}),"proj",}),([]),}),"insert_into_cache":({({"int",}),({({"mixed",}),"temp",}),([]),}),"query_summary_page":({({"string",}),({}),(["main":({" Return the details of projects that have been touched since the last summary. @returns the recent project changes.",}),]),}),"add_task_to_project":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"name",({"string",}),"aim",}),([]),}),"project_info":({({"string",}),({({"string",}),"id",}),([]),}),"query_task_completion_date":({({"int",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"filter_tasks_by_query":({({"class","task","*",}),({({"string",}),"id",({"mapping",}),"query",}),([]),}),"get_note_file":({({"class","note",}),({({"string",}),"id",({"string",}),"t",}),([]),}),"find_cache_file":({({"int",}),({({"string",}),"file",}),(["main":({" Find the cache entry for a particular file. @param id the project to search for. @returns the index of the project, or -1 if none is found.",}),]),}),"insert_into_notes":({({"int",}),({({"int",}),"i",({"mixed",}),"temp",}),(["main":({" Insert an element into the notes array.  It will do this  alphabetically to ensure that the binary search algorithim can locate projects. @param i the index of the project to insert into. @param temp the element to insert @returns the index of the inserted element.",}),]),}),"set_project_name":({({"int",}),({({"string",}),"id",({"string",}),"name",}),([]),}),"project_task_data":({({"class","task","*",}),({({"string",}),"id",}),([]),}),"do_save":({({"void",}),({}),(["main":({" Save the file. @ignore yes",}),]),}),"clear_file_cache":({({"int",}),({({"string",}),"nfile",}),([]),}),"is_creator_on_project":({({"int",}),({({"string",}),"name",({"string",}),"id",}),([]),}),"delete_task":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"name",}),(["main":({" Delete a task from a project. @param id the project to search for. @param task_id the task to search for @param name the name of the person deleting. @returns 1.",}),]),}),"data_dump":({({"class","project","*",}),({}),([]),}),"remove_playtester":({({"int",}),({({"string",}),"id",({"string","*",}),"pt",}),([]),}),"do_mail":({({"void",}),({({"string","*",}),"playtesters",({"mixed",}),"proj",}),([]),}),"get_playtesting_projects":({({"class","project","*",}),({}),([]),}),"assign_pts_to_project":({({"string","*",}),({({"mixed",}),"proj",}),([]),}),"set_task_aims":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"aims",}),([]),}),"find_project":({({"int",}),({({"string",}),"id",}),(["main":({" Find the index of a particular project. @param id the project to search for. @returns the index of the project, or -1 if none is found.",}),]),}),"query_summary_mapping":({({"mapping",}),({}),([]),}),"query_playtesters":({({"string","*",}),({({"mixed",}),"proj",}),([]),}),"query_touched":({({"string",}),({({"string",}),"id",}),(["main":({" Return a formatted string saying when the project was last touched. @param id the project ID. @returns the last touched string.",}),]),}),"query_task_name":({({"string",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"query_project_name":({({"string",}),({({"string",}),"id",}),([]),}),"do_log":({({"void",}),({({"string",}),"text",}),(["main":({" Log text to the project management logfile. @ignore yes",}),]),}),"add_twiki":({({"int",}),({({"string",}),"id",({"string",}),"twiki",}),([]),}),"set_task_completion":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"int",}),"percent",}),([]),}),"set_project_completeness":({({"int",}),({({"string",}),"id",({"int",}),"percent",}),([]),}),"task_info":({({"string",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"find_note":({({"int",}),({({"mixed",}),"i",({"string",}),"id",}),(["main":({" Find the index of a particular note for a project. @param i the project to search for @param id the note to search for. @returns the index of the note, or -1 if none is found.",}),]),}),"query_status":({({"int",}),({({"string",}),"id",}),([]),}),"save_file":({({"void",}),({}),(["main":({" Call out the do_save function.  If lots of projects are being touched ` within a short time scale, this should reduce the hard-drive grinding. @ignore yes",}),]),}),"test_num":({({"void",}),({}),([]),}),"set_guild_specific":({({"int",}),({({"mixed",}),"proj",({"string","*",}),"guilds",}),([]),}),"query_task_competion":({({"int",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"add_task_creator":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"creator",}),([]),}),"add_file":({({"int",}),({({"string",}),"id",({"string",}),"file",({"int",}),"access",({"string",}),"name",({"string",}),"task",}),([]),}),"set_status_change":({({"int",}),({({"string",}),"id",({"int",}),"time",}),([]),}),"query_all_projects_info":({({"string",}),({}),([]),}),"generate_pt_report":({({"string",}),({}),([]),}),"valid_operation":({({"varargs","int",}),({({"string",}),"name",({"string",}),"action",({"string",}),"project",({"string","*",}),"dom",}),([]),}),"set_completion_date":({({"int",}),({({"string",}),"id",({"int",}),"date",}),([]),}),"query_rotation":({({"int",}),({({"mixed",}),"proj",}),([]),}),"assign_project_task_creator":({({"int",}),({({"string",}),"id",({"string",}),"task",({"string",}),"creator",}),([]),}),"add_cache_file":({({"int",}),({({"string",}),"id",}),([]),}),"set_task_name":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"name",}),([]),}),"add_note_to_project":({({"int",}),({({"string",}),"id",({"string",}),"note_id",({"string",}),"note",({"string",}),"name",}),([]),}),"query_size":({({"int",}),({({"mixed",}),"proj",}),([]),}),"update_project_task_completeness":({({"int",}),({({"string",}),"id",({"string",}),"task",({"int",}),"percent",}),([]),}),"set_task_comments":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"string",}),"comments",}),([]),}),"query_project_domains":({({"string","*",}),({({"string",}),"id",}),([]),}),"do_inform":({({"void",}),({}),(["main":({" Compile the information for the creator inform.",}),]),}),"set_task_completion_date":({({"int",}),({({"string",}),"id",({"string",}),"task_id",({"int",}),"date",}),([]),}),"add_domain":({({"int",}),({({"string",}),"id",({"string",}),"domain",}),([]),}),"query_projects_for_creator":({({"string","*",}),({({"string",}),"c",}),([]),}),"query_pt_projects":({({"string","*",}),({({"string",}),"name",}),([]),}),"query_file_permission":({({"int",}),({({"string",}),"name",({"string",}),"nfile",({"int",}),"access",}),([]),}),"filter_by_query":({({"class","project","*",}),({({"mapping",}),"query",}),([]),}),"query_task_comments":({({"string",}),({({"string",}),"id",({"string",}),"task_id",}),([]),}),"query_project_tasks":({({"string","*",}),({({"string",}),"id",}),([]),}),"set_note_file":({({"void",}),({({"string",}),"id",({"string",}),"t",({"class","note",}),"tmp",({"string",}),"name",}),([]),}),"make_post":({({"int",}),({}),([]),}),"catch_status_change":({({"void",}),({({"string",}),"id",({"int",}),"status",}),([]),}),"delete_note":({({"int",}),({({"string",}),"id",({"string",}),"note_id",({"string",}),"name",}),(["main":({" Delete a note from a project. @param id the project to search for. @param note_id the note to search for @param name the name of the person deleting. @returns 1.",}),]),}),"find_file":({({"class","file","*",}),({({"mixed",}),"i",({"string",}),"nfile",({"string",}),"task",}),(["main":({" Find the occurance of a particular file for a project. @param i the project to search for @param file the file to search for. @returns the index of the task, or -1 if none is found.",}),]),}),"set_rotations":({({"void",}),({({"string",}),"proj",({"int",}),"rot",}),([]),}),"do_load":({({"void",}),({}),(["main":({" Load the file. @ignore yes",}),]),}),"query_last_summary":({({"int",}),({}),([]),}),"get_task_file":({({"class","task",}),({({"string",}),"id",({"string",}),"t",}),([]),}),"touch_project":({({"void",}),({({"string",}),"id",({"string",}),"reason",({"string",}),"name",}),(["main":({" Touch a project.  We use this project to set when a project was last touched, by whom and what they did.  We also save the data file at this point. @param id the project ID @param reason the way the project was touched @param name the name of the person touching the project ",}),]),}),"insert_into_projects":({({"int",}),({({"mixed",}),"temp",}),(["main":({" Insert an element into the projects array.  It will do this  alphabetically to ensure that the binary search algorithim can locate projects. @param temp the element to insert @returns the index of the inserted element.",}),]),}),"query_permission":({({"int",}),({({"string",}),"project",({"string",}),"name",({"string",}),"nfile",({"int",}),"access",}),([]),}),"assign_playtesters":({({"int",}),({({"string",}),"id",({"string","*",}),"pt",({"string",}),"name",}),([]),}),"query_project_leader":({({"string",}),({({"string",}),"id",}),([]),}),"clear":({({"void",}),({}),([]),}),"query_project_subprojects":({({"string","*",}),({({"string",}),"id",}),([]),}),])
protected_functions (["find_index":({({"int",}),({({"string",}),"id",({"mixed",}),"array",}),(["main":({" Find the occurance of a particular ID in a particular array.  This is done via a binary search of the array. @param id the ID to match on @array array the array to search through. @returns the index of the matched element, or -1 if none is found. @ignore yes",}),]),}),])
inherits ([])
main_docs (["main":({" Project Management System @author Drakkos @started 19/08/2001",}),])
define_docs ([])
includes (["/include/project_management.h":1522061544,"/include/cmds/twiki.h":1522061544,"/include/board.h":1522061544,"/include/permissions.h":1522061544,"/include/mail.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["file_access_cache":({0,({({"id",({"string",}),}),({"accesses",({"mapping",}),}),}),([]),}),])
file_name "/obj/handlers/project_management.c"
last_changed 1522061544
