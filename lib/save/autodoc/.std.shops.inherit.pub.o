#/obj/handlers/autodoc/autodoc_file.c
public_functions (["add_menu_alias":({({"void",}),({({"mixed",}),"alias",({"string",}),"actual",}),(["main":({"This method allows you to add an alias to an item sold in the pub.  Manyaliases are added by default so you shouldn't have to use this toooften.  See the help on \"set_no_standard_alias()\" to see what aliases areadded automatically.",}),"see":({"add_menu_aliases()","query_menu_aliases()","remove_menu_alias()","set_no_standard_alias()",}),"param":({"alias the alias to add","alias the real item that the alias refers to",}),"example":({"// Allow \"buy lancre ale\" instead of \"buy Ale from Lancre\"add_menu_alias( \"lancre ale\", \"Ale from Lancre\" );",}),]),}),"set_no_standard_alias":({({"void",}),({({"int",}),"flag",}),(["main":({"This method allows you to turn on or off the addition of standard aliaseswhen new menu items are added.  By default it is turned on.  Standardaliases are added as follows:If you added an item called \"Lancre vintage wine\" the aliases added wouldbe:<ul><li> vintage wine<li> lancre wine<li> wine</ul>An alias of the name in lowercase is always added regardless of whetheror not this flag is turned on or off.  You may wish to turn this off ifyou are adding several items which could be mistaken for each other, forinstance \"Lancre beer\" and \"Morporkian beer\".",}),"see":({"add_menu_alias()","query_menu_aliases()","remove_alias()","query_no_standard_alias()",}),"param":({"flag 0 if standard aliases should be added, 1 if not",}),]),}),"query_language":({({"string",}),({}),(["main":({"This method returns the language used in the shop.",}),"return":({"the language used in the shop",}),]),}),"remove_menu_alias":({({"int",}),({({"string",}),"alias",}),(["main":({"This method allows you to remove an alias from those currently availablein the pub.",}),"see":({"add_menu_alias()","add_menu_aliases()","query_menu_aliases()","set_no_standard_alias()",}),"param":({"alias the alias to remove from the list",}),"return":({"1 if successful, 0 if unsuccessful",}),]),}),"query_menu":({({"object",}),({}),(["main":({"This method returns the object currently being used as a menu in thepub.",}),"return":({"the file name of the menu",}),]),}),"query_discount":({({"float",}),({({"object",}),"ob",}),(["main":({"This function can be masked and used to determine a discount that isapplied to all items sold, so for instance you could check the guild of'ob' and give a discount to Witches, or something.  By default thediscount is zero, so query_discount returns 1.0",}),"param":({"ob the object doing the buying",}),"example":({"// Give Priests a 10% discountfloat query_discount( object ob ) {   if( ob->query_guild_ob() == \"/std/guilds/priest.c\" )      return 0.9;   else      return 1.0;}",}),"return":({"a float to multiply the price by",}),]),}),"add_menu_aliases":({({"void",}),({({"string","*",}),"aliases",({"string",}),"actual",}),(["main":({"This method allows you to add multiple aliases at once.  Many aliases areadded by default so you shouldn't have to use this too often.  See the help on \"set_no_standard_alias()\" to see what aliases are added automatically.",}),"see":({"add_menu_alias()","query_menu_aliases()","remove_menu_alias()","set_no_standard_alias()",}),"param":({"aliases an array of aliases to add","alias the real item that the aliases refer to",}),"example":({"// Add friendly aliases to \"Beef burger and chips\"add_menu_aliases( ({ \"beef burger\",                     \"beefburger\",                       \"burger\" }), \"Beef burger and chips\" );",}),]),}),"set_display_subheadings":({({"void",}),({({"int",}),"value",}),(["main":({"This method allows you to switch the subheadings (\"Alcoholic Beverages\",\"Meals\", etc) that appear above different types of items on and off.",}),"see":({"query_display_subheadings()","set_menu_subheadings()","query_menu_subheadings()",}),"param":({"value set to 1 to display subheadings or 0 to remove them",}),]),}),"set_menu_subheadings":({({"void",}),({({"int",}),"subheading",({"string",}),"text",}),(["main":({"This method sets the subheadings that appear at the top of the menu.",}),"see":({"query_menu_subheadings()","set_display_subheadings()","query_display_subheadings()",}),"param":({"subheading the subheading to change (use the #defines listed in\"pub_shop.h\")","text the new menu subheading text",}),]),}),"query_no_standard_alias":({({"int",}),({}),(["main":({"This method returns a flag stating whether standard aliases will be addedor not.",}),"see":({"set_no_standard_alias()",}),"return":({"0 if standard aliases will be added, 1 if not",}),]),}),"add_menu_item":({({"varargs","void",}),({({"string",}),"name",({"int",}),"type",({"int",}),"cost",({"string",}),"item",({"string",}),"container",({"int",}),"volume",({"int",}),"intox",}),(["main":({"This is the method used to add items to the menu.  Only the first fourparameters are required, the rest are optional.<p>The \"type\" parameter is used to determine which section of the menu theitem should reside in, and should be selected from those in the\"pub_shop.h\" header file.<p>The \"item\" parameter is used to generate the actual product on sale.  Thisvalue can be:<ul><li> a name, which is passed to the \"create_item()\" function in the room code<li> a filename, which is cloned, or<li> an armoury identifier, which is passed to the armoury handler.</ul><p>The \"container\" parameter is the same as the \"item\" parameter, except thatit refers to the container the item comes in and is passed to\"create_container()\" instead of \"create_item()\".  You can also use thestandard containers listed in the \"pub_shop.h\" header file.  It isoptional, and setting it to 0 will cause it to be ignored.<p>The \"volume\" parameter is optional and is passed directly to\"set_amount()\" on the object cloned from \"item\".  It can be used to alterthe volume of a liquid cloned from a file, so the file itself does nothave to be changed.  It is optional, and setting it to 0 will cause it tobe ignored.  If this is set to 0 then the item will fill up thecontainer.  Standard volume definitions can be found in the \"volumes.h\"header file.<p>The last parameter, \"intox\", is optional and is used only by NPCs todetermine how alcoholic an item is.  This should be between 0 and 10,with 0 being non-alcoholic and 10 being something like Suicider.  It defaults to 0.  Note:  This has no effect on the actual alcohol contentof the item.<p>The different volumes of standard containers can be taken from/include/volumes.h which has defines for all the standard volumes.",}),"see":({"query_menu_items()","remove_menu_item()","/include/volumes.h",}),"param":({"name the description to be displayed on the menu","type the type of item","cost the cost of the item","item the name, filename or armoury identifier for the item itself","container the name, filename or armoury identifier for thecontainer (optional)","volume the volume that the item should be set to (optional)","intox the intoxification value, on a scale of 0 to 10 (optional)",}),"example":({"// Add a main course called \"Big meat pie\", cloned from the file// \"/obj/food/meatpie.food\"add_menu_item( \"Big meat pie\", PUB_MAINCOURSE, 1000,   \"/obj/food/meatpie.food\" );","// Same as above, but let's put the pie on a plateadd_menu_item( \"Big meat pie\", PUB_MAINCOURSE, 1000,   \"/obj/food/meatpie.food\", PUB_STD_PLATE );","// Add a glass of ale, with the ale cloned from a file and the glass// cloned in the \"create_container()\" function in the room codeadd_menu_item( \"Pint of ale\", PUB_ALCOHOL, 500, \"/obj/food/ale.food\",   \"new_pint_glass\" );","// The same as above, but we only want half a pint of ale in the glass, we// want to use the standard glasses in the header file and we want to set// the intoxification value of the ale to 5add_menu_item( \"Half-pint of ale in a pint glass\", PUB_ALCOHOL, 300,   \"/obj/food/ale.food\", PUB_STD_PINT, VOLUME_HALFPINT, 5 );","// Create a beefburger with added vodka in the \"create_item()\" function in// the room code and put it in a small satchel from the armouryadd_menu_item( \"Beefburger with special sauce\", PUB_MAINCOURSE, 800,   \"vodka_burger\", \"small satchel\", 0, 7 );",}),]),}),"query_counter":({({"object",}),({}),(["main":({"This method returns the object currently being used as a counter in thepub.",}),"see":({"make_counter()",}),"return":({"the file name of the counter",}),]),}),"query_menu_header":({({"string",}),({}),(["main":({"This method returns the current menu header text.",}),"see":({"set_menu_header()","set_display_header()","query_display_header()",}),"return":({"the menu header text",}),]),}),"make_counter":({({"object",}),({}),(["main":({"This function creates the counter for the pub.  It defaults to cloningPUB_COUNTER_FILE and making it a hidden object.If you are creating your own counter object then making it hidden is agood idea.  If it's not hidden, make sure it at least cannot be moved orburied.The counter should clear empty objects with the \"pub item\" property ifthey are placed on it.  Making it clear non-empty objects is a bad idea,since items will be placed here if the purchaser is unable to carrythem.",}),"see":({"query_counter()","/include/shops/pub_shop.h",}),"return":({"the new counter object",}),]),}),"query_pub":({({"int",}),({}),(["main":({"This method checks to see if this is a pub.",}),"return":({"always return 1",}),]),}),"remove_menu_item":({({"int",}),({({"string",}),"name",}),(["main":({"This method allows you to remove an item from those currently availablein the pub.",}),"see":({"add_menu_item()","query_menu_items()",}),"param":({"name the name of the item to remove",}),"return":({"1 if successful, 0 if unsuccessful",}),]),}),"read":({({"string",}),({}),(["main":({"This method produces the menu from the item information, with the menuheader at the top, all items available grouped by type and sorted bycost.  If you don't want the menu printed this way then mask thisfunction and return your own.",}),"see":({"add_menu_item()","set_display_header()","set_menu_header()","set_display_subheadings()","set_menu_subheadings()",}),"return":({"the menu text",}),]),}),"query_menu_aliases":({({"mapping",}),({}),(["main":({"This method returns a list of all the aliases currently available inthe pub.",}),"see":({"add_menu_alias()","add_menu_aliases()","remove_menu_alias()","set_no_standard_alias()",}),"return":({"alias : real name",}),]),}),"set_language":({({"void",}),({({"string",}),"language",}),(["main":({"This method sets the language to use in the shop.",}),"param":({"language the language to use",}),]),}),"query_menu_subheadings":({({"string","*",}),({}),(["main":({"This method returns the current menu subheading text.",}),"see":({"set_menu_subheadings()","set_display_subheadings()","query_display_subheadings()",}),"return":({"the menu subheadings",}),]),}),"set_menu_header":({({"void",}),({({"string",}),"header",}),(["main":({"This method sets the header that appears at the top of the menu.  Bydefault this is \"The menu reads:\".",}),"see":({"query_menu_header()","set_display_header()","query_display_header()",}),"param":({"header the new menu header",}),]),}),"query_display_header":({({"int",}),({}),(["main":({"This method returns a flag stating whether display of the menu headeris on or off.",}),"see":({"set_display_header()","set_menu_header()","query_menu_header()",}),"return":({"1 for header, 0 for no header",}),]),}),"set_display_header":({({"void",}),({({"int",}),"value",}),(["main":({"This method allows you to switch the menu header (defaults to \"The menureads:\") that appears at the top of the menu on and off.",}),"see":({"query_display_header()","set_menu_header()","query_menu_header()",}),"param":({"value set to 1 to display header or 0 to remove them",}),]),}),"query_display_subheadings":({({"int",}),({}),(["main":({"This method returns a flag stating whether display of the menu subheadingsis on or off.",}),"see":({"set_display_subheadings()","set_menu_subheadings()","query_menu_subheadings()",}),"return":({"1 for headings, 0 for no headings",}),]),}),"query_menu_items":({({"mapping",}),({}),(["main":({"This method returns a list of all the items currently available inthe pub.",}),"see":({"add_menu_item()","remove_menu_item()",}),"return":({"items available, listing type, price and intoxification value",}),]),}),])
protected_functions ([])
inherits (["/std/shops/inherit/shop_event":({}),"/std/shops/inherit/open_shop":({}),])
main_docs (["main":({"This is the inheritable bit of the pub.  The actual file you shouldinherit is /std/shops/pub_shop.c<p>Based on the original \"pub.c\" code, this version allows you to buy anactual drink (inna glass) instead of just forcefeeding you with whateveryou purchase.  You can also create food and serve it on plates, in boxes,or whatever.<p>The items on sale are either cloned from the armoury, cloned from a fileor cloned in the \"create_item()\" code in the pub code itself.  Containersfor these items are done in the same way, using the \"create_container()\"function.  This is the same as the \"create_object()\" system in\"item_shop.c\".  You can also buy items for other people (or groups ofother people) in the pub.<p>There are several standard glasses and plates available for drinks andfood in the \"pub_shop.h\" header file, if you don't want to create theglasses and plates yourself.  These plates use the \"/obj/misc/plate.c\"inheritable file.<p>A \"counter\" will automatically be placed in the pub.  If any item cannotbe moved into the person who ordered it (i.e they are carrying too much )it will be placed on the counter.  Empty glasses and so on will becleared from the counter after 3 seconds.  To ensure that this happens,make sure that the container object you use has the property \"pub item\"added to it.  Items will only be cleared if they are empty.",}),"started":({"23/10/1999",}),"author":({"Lemming",}),"see":({"/std/shops/pub_shop.c","/include/shops/pub_shop.h","/include/volumes.h",}),])
define_docs ([])
includes (["/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/armoury.h":1522061544,"/include/map.h":1522061544,"/include/money.h":1522061544,"/include/shops/pub_shop.h":1522061544,])
class_docs ([])
file_name "/std/shops/inherit/pub.c"
last_changed 1522061544
