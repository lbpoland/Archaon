#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_hold":({({"int","*",}),({({"object",}),"ob",({"int",}),"pos",({"int",}),"limbs",}),(["main":({"This method sets the object as held.  It will attempt to hold it startingat the given position in the limbs array.<p>The return array contains the index of the limbs from which theitem was added, if the array is 0 size then no items wereadded.",}),"see":({"set_unhold()","query_limbs()Editors Note: I have changed set_hold so that it no longer automatically unholds objects. I am moving that functionality to thehold command. If you want your objects to be in a specific limb,you have to free it up yourself using set_unhold.If you don't care which limbs, you just have to free up enough limbsto hold it.",}),"param":({"ob the object to hold","pos the position in the limb array to start holding at","limbs the number of limbs to be used (1 or 2 usually). leave aszero for default.",}),"return":({"a array of limb numbers",}),]),}),"query_weapons":({({"object","*",}),({}),(["main":({"This method returns the currently held weapons on the living object.This is an array of held items which are weapons and can be usedin combat.",}),"see":({"query_holding()",}),"return":({"the array of held weapons",}),]),}),"query_holding":({({"object","*",}),({}),(["main":({"This method returns the current holding array of the living object.This has one element in the array for each object and a 0 is in thearray if that limb is not holding anything.  The positions correspondto the positions returned by the query_limbs() function.",}),"see":({"query_holding()","query_free_limbs()","query_weapons()",}),"return":({"an array of held objects",}),]),}),"set_unhold":({({"int","*",}),({({"object",}),"ob",}),(["main":({"This method sets the object as unheld.  It will attempt to removethe object from a held limb.<p>The return array contains the index of the limbs from which theitem was removed, if the array is 0 size then no items wereremoved.",}),"see":({"set_hold()","query_limbs()",}),"param":({"ob the object to unhold",}),"return":({"a array of limb numbers",}),]),}),"query_free_limbs":({({"int",}),({}),(["main":({"This method returns the number of free limbs on the living object.A free limb!  Yes, have a couple of free legs, beat the rush!Buy now!",}),"see":({"query_holding()","query_limbs()",}),"return":({"the number of free limbs",}),]),}),"query_using_array":({({"string","*",}),({}),([]),}),"query_holding_limbs":({({"string","*",}),({({"object",}),"ob",}),(["main":({"This method returns the list of limbs the object is being held in.",}),"param":({"ob the object to check the limbs for",}),"return":({"the limbs it is held in",}),]),}),"query_limbs":({({"string","*",}),({}),(["main":({"This method returns the an array of the names of the limbs on the living object.",}),"return":({"an array of limbs",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["changes":({"See the RCS log, but this change is made by TeranoThis has the controlling code for holding/wielding objects",}),"main":({"New holding code!Because the old stuff wasn't OO enough for me.",}),"author":({"Pinkfish",}),])
define_docs (["START_VALUE":(["main":({"This stuff is setup by other parts of /std/living, and can't bechanged.",}),]),])
includes ([])
class_docs ([])
file_name "/std/living/holding.c"
last_changed 1522061544
