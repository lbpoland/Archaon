#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_name":({({"string",}),({}),(["main":({"This method returns the name of the object.",}),"see":({"set_name()","add_alias()","add_adjective()",}),"return":({"the name of the object",}),]),}),"set_plurals":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets the compete array of plurals.   This shodnot be used, use add_plural and remove_plural instead.",}),"see":({"add_plural()","remove_plural()","query_plurals()",}),]),}),"set_aliases":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets the entire alias array.   It overrides any current aliasdefinitions and sets the alias arry.   This should be used carefullyif at all.   Use add_alias instead.",}),"param":({"str the new alias array",}),]),}),"query_cap_name":({({"string",}),({}),(["main":({"This method returns the capitalized name.   It calls the functioncapitalize() on the name",}),"see":({"query_name()","set_name()","efun::capitalize()",}),]),}),"set_plural_adjectives":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets all the plural adjectives for the object.   This methodshould not be used, please use add_plural_adjective instead.",}),"param":({"str the array of plural adjectives",}),"see":({"add_plural_adjective()","remove_plural_adjective()","query_plural_adjectives()",}),]),}),"add_faux_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds a faux adjective to the object.   Faux adjectives areignored by objects that ignore identifiers.<p>The function takes an array or a string as an argument.   If an arrayis passed in each element of the array is added to the faux adjectivearray, if it is a string then each word in the string element is addedto the array.  Elements that are already real adjectives of the objectare ignored.",}),"see":({"add_adjective()","remove_faux_adjective()","ignore_identifiers()",}),]),}),"query_plural_adjectives":({({"string","*",}),({}),(["main":({"This method returns the current list of plural adjectives associated withthis object.",}),"return":({"the complete list of plural adjectives",}),]),}),"query_faux_adjectives":({({"string","*",}),({}),(["main":({"This method returns the current list of faux adjectives, includingduplicates.",}),"see":({"add_faux_adjective()","remove_faux_adjective()","query_adjectives()","query_unique_faux_adjectives()",}),"return":({"the array of faux adjectives (array of strings)",}),]),}),"query_unique_faux_alias":({({"string","*",}),({}),(["main":({"This method returns the unique list of faux aliases.  It is this listthat id() uses.",}),"see":({"query_faux_alias()","id()",}),"return":({"the array of faux aliases (array of strings) without duplication",}),]),}),"remove_alias":({({"int",}),({({"string",}),"str",}),(["main":({"This method removes an alias from the object.",}),"param":({"str the alias to remove",}),"see":({"add_alias()","query_alias()",}),"return":({"1 if the alias is found, 0 if not",}),]),}),"query_alias":({({"varargs","string","*",}),({({"int",}),"no_faux",}),(["main":({"This method returns the current list of aliases.  If faux aliases areallowed, they are included, unless the optional parameter is passed.",}),"see":({"add_alias()","add_faux_alias()","query_faux_alias()","query_unique_faux_alias()","remove_alias()",}),"param":({"no_faux 1 to ignore faux aliases (optional)",}),"return":({"the array of aliases (array of strings)",}),]),}),"faux_id_allowed":({({"int",}),({}),(["main":({"This method is used by the id function.   It determines whether ornot an object in the calling list ignores identifiers.If none do, then faux aliases may be used.",}),"see":({"add_faux_alias","add_faux_adjective","ignore_identifiers",}),"return":({"1 if faux ids may be used",}),]),}),"query_adjectives":({({"varargs","string","*",}),({({"int",}),"no_faux",}),(["main":({"This method returns the current list of adjectives associated withthis object.  If faux ids are allowed, then faux adjectives areincluded if the optional parameter is not 1.",}),"param":({"no_faux 1 to ignore faux adjectives",}),"return":({"the complete list of adjectives",}),]),}),"id":({({"int",}),({({"string",}),"str",}),(["main":({"This method is used by the present efun.   It determines if thepassed in string is an alias or the name of the object.",}),"param":({"str the value to check",}),"return":({"1 if the name matches",}),]),}),"remove_plural":({({"void",}),({({"string",}),"str",}),(["main":({"This method removes a plural from the object.",}),"see":({"add_plural()","query_plurals()","set_plurals()",}),"param":({"str the plural to remove",}),]),}),"set_adjectives":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method sets all the adjectives for the object.   This methodshould not be used, please use add_adjective instead.",}),"param":({"str the array of adjectives",}),"see":({"add_adjective()","remove_adjective()","query_adjectives()",}),]),}),"add_faux_alias":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds a faux alias to the object.   Faux aliases areignored by objects that ignore identifiers.<p>The function takes an array or a string as an argument.   If an arrayis passed in each element of the array is added to the faux aliasarray, if it is a string then the string element is added to thearray.  Elements that are already real aliases of the object are ignored.Duplication in this list is allowed; a separate list without duplicatesis maintained to improve performance.",}),"see":({"query_faux_alias()","query_unique_faux_alias()","add_alias()","add_faux_adjective()","remove_faux_alias()","ignore_identifiers()","parse_command_id_list()",}),"param":({"str the alias(s) to add",}),"example":({"",}),]),}),"set_name":({({"void",}),({({"string",}),"str",}),(["main":({"This method sets the name of the object.   The name is the basic handleused to reference the object.   It should not have any spacesin it.",}),"see":({"query_name()","add_alias()","add_adjective()",}),"param":({"str the name",}),"example":({"set_name(\"rabbit\");",}),]),}),"add_alias":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds an alias to the object.   An alias for the object is thepart used as the main noun for the object. ie in the case of a \"greenbath tub\", \"bathtub\" might be an alias for the object. and \"green\"and \"bath\" would be adjectives. The value set with add_alias is alsoused with present. This means you can make up an alias for an objectthat players cannot normaly access but you canget a handle on with present. For an exmple of this look at the moneyobject.<p>The function takes an array or a string as an argument.   If an arrayis passed in each element of the array is added to the aliasarray, if it is a string then the string elemnt is added to thearray.",}),"see":({"set_name()","remove_alias()","set_aliases()","query_alias()",}),"param":({"str the alias(s) to add",}),"example":({"set_name(\"tub\");set_short(\"green bath tub\");add_alias(\"bathtub\");add_adjective(\"green\");add_adjective(\"bath\");",}),]),}),"remove_faux_alias":({({"int",}),({({"string",}),"str",}),(["main":({"This method removes a faux alias from the object.  Note that, if thealias has been added more than once, only one instance is removedfrom the array.  If the last instance of an alias is removed from thelist, it is also removed from the unique list.",}),"param":({"str the faux alias to remove",}),"see":({"add_faux_alias()","add_faux_adjective()","query_alias()","query_unique_faux_alias()",}),"return":({"1 if the alias is found, 0 if not",}),]),}),"query_faux_alias":({({"string","*",}),({}),(["main":({"This method returns the current list of faux aliases, with duplicatesincluded.",}),"see":({"add_faux_alias()","remove_faux_alias()","query_unique_faux_alias()",}),"return":({"the array of faux aliases (array of strings)",}),]),}),"query_unique_faux_adjectives":({({"string","*",}),({}),(["main":({"This method returns a unique list of faux adjectives.",}),"see":({"query_adjectives()","id_adjective()","remove_faux_adjective()",}),"return":({"the array of faux adjectives (array of strings)",}),]),}),"query_plurals":({({"string","*",}),({}),(["main":({"This method returns the complete list of plurals for theobject.",}),"return":({"the complete array of plurals",}),]),}),"remove_plural_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method will remove an plural adjective from the object.",}),"param":({"str the adective(s) to remove",}),"see":({"add_alias()","add_plural_adjective()","query_plural_adjectives()",}),]),}),"id_adjective":({({"int",}),({({"string",}),"word",}),(["main":({"This method is similar to the id function, except this will check theadjectives instead of the aliases and the name.",}),"see":({"id()","id_plural()",}),"param":({"str the adjective to check",}),"return":({"1 if the name matches one of the adjectives, 0 otherwise",}),]),}),"remove_faux_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method will remove a faux adjective from the object.  Note that,if the adjective has been added more than once, only one instance isremoved from the array.",}),"param":({"str the adective(s) to remove",}),"see":({"add_faux_alias()","add_faux_adjective()","query_adjectives()",}),]),}),"add_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds an adjective to the object.   The adjectives are usedfor the object matching routines.    For example, if you have a \"greenbath tun\" then \"green\" and \"bath\" are adjectives.",}),"see":({"add_alias()","remove_adjective()","query_adjectives()","set_adjectives()",}),]),}),"add_plurals":({({"void",}),({({"string","*",}),"str",}),(["main":({"This method adds multiple plurals to the object.",}),"see":({"add_plural()","remove_plural()","query_plurals()",}),"param":({"str the array of plurals to add",}),]),}),"id_plural":({({"int",}),({({"string",}),"str",}),(["main":({"This method is similar to the id function, except this will check theplural names instead of the aliases and the name.",}),"see":({"id()","id_adjective()",}),"param":({"str the name to check",}),"return":({"1 if the name matches one of the plurals, 0 otherwise",}),]),}),"add_plural":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds a plural onto the object.   The plurals will beused in plural name matching by thje find_match simul_efun",}),"see":({"/secure/simul_efun->find_match()","set_plurals()","remove_plural()","query_plurals()","add_plurals()",}),]),}),"id_plural_adjective":({({"int",}),({({"string",}),"word",}),(["main":({"This method is similar to the id function, except this will check theplural adjectives instead of the aliases and the name.",}),"see":({"id()","id_plural()",}),"param":({"str the name to check",}),"return":({"1 if the name matches one of the plurals, 0 otherwise",}),]),}),"add_plural_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method adds an plural adjective to the object.   The pluraladjectives are used for theobject matching routines.  Plural adjectives should be used very rarely,they are used in cases where the plural of a name is determined by theadjective rather than it's alias.  For example: pair of shoes, pairsof shoes.",}),"see":({"add_alias()","remove_plural_adjective()","query_plural_adjectives()","set_plural_adjectives()",}),]),}),"remove_adjective":({({"void",}),({({"mixed",}),"str",}),(["main":({"This method will remove an adjective from the object.",}),"param":({"str the adective(s) to remove",}),"see":({"add_alias()","add_adjective()","query_adjectives()",}),]),}),])
protected_functions ([])
inherits (["/std/basic/id_match":({}),])
main_docs (["main":({"This class keeps track of all the aliases, names and adjectiveswhich are used to match the object.",}),"see":({"/global/player->add_command()","/std/basic/desc.c",}),])
define_docs ([])
includes (["/include/parse_command.h":1522061544,])
class_docs (["Id":({0,({({"name",({"string",}),}),({"alias",({"string","*",}),}),({"faux_alias",({"string","*",}),}),({"unique_faux_alias",({"string","*",}),}),({"adjectives",({"string","*",}),}),({"faux_adjectives",({"string","*",}),}),({"unique_faux_adjectives",({"string","*",}),}),({"plural_adjectives",({"string","*",}),}),({"plurals",({"string","*",}),}),}),([]),}),])
file_name "/std/basic/id.c"
last_changed 1522061544
