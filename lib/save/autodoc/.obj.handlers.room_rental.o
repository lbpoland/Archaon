#/obj/handlers/autodoc/autodoc_file.c
public_functions (["delete_room":({({"int",}),({({"string",}),"room",({"object",}),"office",}),(["main":({"Deletes a room from the handler",}),"param":({"room the path of the room that will be deleted from the handler","office the current office",}),"see":({"add_room()",}),"return":({"0 on success, 1 on failure",}),]),}),"query_rooms_to_rent":({({"string","*",}),({({"object",}),"office",}),(["main":({"Returns a list of rooms available in a particular location.",}),"param":({"office the office",}),"return":({"a string ready for presentation to a player containing alist of all rooms available in that office.",}),]),}),"add_room":({({"int",}),({({"string",}),"room",({"int",}),"cost",({"object",}),"office",}),(["main":({"Adds a room to the handler with a rental cost.",}),"param":({"room the path of the room to add to the handler","cost the rental cost per day of this room","office the current office",}),"see":({"delete_room()",}),"example":({"   add_room( \"/w/goldenthread/workroom\", 1000000 )",}),]),}),"remove_rental":({({"int",}),({({"object",}),"room_ob",}),(["main":({"Removes the rented status from a room.  Should be called when thetime limit of the rental is over.",}),"param":({"room_ob the room object that is currently rented",}),"see":({"do_rental()",}),"return":({"0 on success, 1 on failure",}),]),}),"query_rental_value":({({"int",}),({({"string",}),"room",}),(["main":({"Returns the amount needed to pay for a rental",}),"param":({"room the room being queried",}),"return":({"rental amount",}),]),}),"do_rental":({({"int",}),({({"object",}),"player_ob",({"string",}),"room_short",({"object",}),"office",}),(["main":({"Handles the actual renting of the room.  If the prospectivetenant is already renting the room, it extends the rental.","returns:RENTAL_SUCCESSFUL if the rental is successfulRENTAL_NO_SUCH_ROOM if the room isn't on the booksRENTAL_ALREADY_RENTED if someone else is renting the room alreadyRENTAL_NO_MONEY if the player hasn't enough money",}),"param":({"player_ob the player who is renting the room","room_short the short of the room that is to be rented","office the current office",}),"see":({"remove_rental()",}),"return":({"value dependent on success of rental. See below for details",}),]),}),"clear_rooms":({({"int",}),({({"object",}),"office",}),(["main":({"Clears the list of rooms available for rent.",}),"param":({"office the current officeWARNING: This clears all rooms bookable from this office.",}),]),}),"query_who_rents":({({"string",}),({({"string",}),"room",({"object",}),"office",}),(["main":({"Returns the name of whoever is renting the room specified.",}),"param":({"room the short of the room you want to check","office the current office",}),"return":({"the short of the player who's renting the room",}),]),}),"evict_tenant":({({"void",}),({({"object",}),"room_ob",}),(["main":({"Evicts the tenant ( and guests ).",}),"param":({"room_ob the room object",}),]),}),"check_tenant":({({"int",}),({({"object",}),"player_ob",({"object",}),"room_ob",({"object",}),"office",}),(["main":({"Checks if a particular player is renting a particular room.","returns:RENTAL_SUCCESS if the player rents the room successfullyRENTAL_NO_SUCH_ROOM if the room isn't on the booksRENTAL_ALREADY_RENTED if the room is rented to someone elseRENTAL_AVAILABLE if the player doesn't rent the room but it is available",}),"param":({"player_ob the player object who you think might be renting the room","room_ob   the room object that you think the player might be renting",}),"return":({"value dependent on success of check.  See below for details",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"A Room Rental Handler<p>This keeps track of who rented what rooms whereand for how much.<p>After including <room/room_rental.h> there are two optionsavailable for room inherits.  ROOM_RENTAL_INHERIT_BASIC_ROOM includes the basic room inherit while ROOM_RENTAL_INHERIT_ROOMis for use in areas that have their own base room inherits.<p> The most important function is the one that checks that someoneis allowed to enter.<br>int check_entry( object player, object room )<br>it returns:RENTAL_SUCCESS if the player rents the room successfullyRENTAL_NO_SUCH_ROOM if the room isn't on the booksRENTAL_ALREADY_RENTED if the room is rented to someone elseRENTAL_AVAILABLE if the player doesn't rent the room but it is available",}),"started":({"3 Sep y2k1",}),"author":({"goldenthread",}),])
define_docs ([])
includes (["/include/shops/bank.h":1522061544,"/include/room/room_rental.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/room_rental.c"
last_changed 1522061544
