#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_not_worthy_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey sell soemthign that is not worth enough at the shop. If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_not_worthy_message()","set_set_value_message()","set_too_costly_message()","set_browse_message()","set_sell_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_not_worthy_message(\"$ob$ is not worth enough to be sold here.\\n\");","set_not_worthy_message( ({ \"$ob$ is not worth enough to be sold here.\\n\",                     \"$client$ tries to sell the rubbishy $ob$.\\n\"});",}),]),}),"set_value_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey value something at the shop.  If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_value_message()","set_set_value_message()","set_too_costly_message()","set_no_worthy_message()","set_browse_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_value_message(\"$ob$ is valued at $money$.\\n\");","set_sell_message( ({ \"$ob$ is valued at $money$.\\n\",                     \"$client$ values $ob$.\\n\"});",}),]),}),"query_steal_difficulty":({({"int",}),({({"int",}),"i",}),(["main":({"This method returns the current steal difficulty of the shop.",}),"see":({"set_steal_difficulty_mess()",}),"return":({"the current steal difficulty message of the shop",}),]),}),"query_value":({({"varargs","int",}),({({"object",}),"thing",({"int",}),"sell",}),(["main":({"This method returns the value of the object in this shop.",}),"see":({"query_max_amount()","query_min_amount()",}),"param":({"thing the thing to value","sell are we selling it?",}),"return":({"the value of the object here",}),]),}),"do_sell":({({"int",}),({({"object","*",}),"in_obs",}),(["main":({"This method does the actual selling.",}),"param":({"in_obs the objects to sell",}),"return":({"1 on success, 0 on failure",}),]),}),"set_sell_large":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the shop to sell very large objects. ie. If a playercannot carry items they are placed in the room for the player ratherthan not being sold to the player.",}),]),}),"query_value_mess":({({"mixed",}),({}),(["main":({"This method returns the current value message of the shop.",}),"see":({"set_value_mess()",}),"return":({"the current value message of the shop",}),]),}),"rep_came_back":({({"void",}),({}),(["main":({"This method is called when the rep gets back home.",}),]),}),"set_browse_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when browsing something.  Thefunction will be called with two elements, the first being theplayer doing the browsing and the second being the arrayof objects being browsed.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_value_function()","set_too_costly_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"query_no_steal":({({"int",}),({}),(["main":({"This method returns the current no steal property.",}),"see":({"set_no_steal_mess()",}),"return":({"the current no steal properyt of the shop",}),]),}),"do_list_these":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method lists only the specified objects",}),"see":({"do_list()",}),"return":({"1 on success, 0 on failure",}),]),}),"query_buy_mess":({({"mixed",}),({}),(["main":({"This method returns the current buy message of the shop.",}),"see":({"set_buy_mess()",}),"return":({"the current buy message of the shop",}),]),}),"query_strict_shop":({({"int",}),({}),(["main":({"This method returns the structness of the shop, if the shop is strictit will not deal in items of other types at all.",}),"see":({"set_shop_type()","set_strict_shop()",}),"return":({"the current strict value",}),]),}),"set_too_costly_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when buying something and itcosts too much.  Thefunction will be called with two elements, the first being theplayer doing the buying and the second being the arrayof objects which cost too much.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_value_function()","set_buy_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"query_shop":({({"int",}),({}),(["main":({"This method tells us if the shop is really a shop or not.",}),"return":({"1 always",}),]),}),"do_value":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method is called when the player is valueing stuff.",}),"param":({"obs the objects to value",}),"return":({"1 on success, 0 on failure",}),]),}),"create_rep":({({"object",}),({}),(["main":({"This method creates the sales representative which is sent offto exchange goods with other shops.",}),"see":({"add_other_shop()","send_out_reps()",}),"return":({"the sales representative",}),]),}),"shop_list":({({"string",}),({({"mixed",}),"arr",({"int",}),"detail",}),(["main":({"This method creates the list  for the shop.",}),"param":({"arr the array of objecsts to list","detail display them in detail?",}),"return":({"the string list",}),]),}),"set_sell_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when selling something.  Thefunction will be called with two elements, the first being theplayer doing the selling and the second being the arrayof objects being sold.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_buy_function()","set_value_function()","set_too_costly_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"do_browse":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method is called when the player is browseing stuff.",}),"param":({"obs the objects to browse",}),"return":({"1 on success, 0 on failure",}),]),}),"creator_object":({({"int",}),({({"object",}),"ob",}),(["main":({"This method determines whether or not a given object is a creator objectand should be in this shop or not. ",}),"param":({"ob the object to check",}),"return":({"1 if the object is not allowed, 0 if it is.",}),]),}),"set_browse_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey browse something at the shop.  If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.  In the case oif a browse theextra information is the long description of the object.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_browse_message()","set_set_value_message()","set_too_costly_message()","set_no_worthy_message()","set_sell_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_browse_message(\"$ob$ costs $money$, it looks like:\\n$extra$\");","set_browse_message( ({ \"$ob$ costs $money$, it looks like:\\n$extra$\",                     \"$client$ browses $ob$.\\n\"});",}),]),}),"query_shoplift_response_handler":({({"string",}),({}),(["main":({"This method returns the shop lift response handler for the shop.This allows the shop to respond in someway to someone shoplifting stuff, like the heavys in Ankh-Morpork.",}),"returns":({"the shop lift response handler",}),"see":({"set_shoplift_response_handler()","set_no_steal()","set_sell_stolen()","set_steal_difficulty()",}),]),}),"set_steal_difficulty":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the difficulty at which to steal stuff fromthis shop.",}),"param":({"i the new value for the steal difficulty",}),"see":({"set_no_steal()","set_sell_stolen()","query_steal_difficulty()",}),]),}),"set_max_inventory":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the maximum number of inventory items this shop willtake before it starts to refuse to purchase items from players anddeleting items from its inventory.The default for this is defined as MAX_INVENTORY in shop.h",}),]),}),"do_buy":({({"int",}),({({"object","*",}),"obs",}),([]),}),"set_strict_shop":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the strictness of the shop, if the shop is strictit will not deal in items of other types at all.",}),"see":({"set_shop_type()","query_strict_shop()",}),"param":({"i the new strict value",}),]),}),"shoplift_success":({({"object",}),({({"object",}),"ob",}),(["main":({"This method turns the objects into real objects (if that isnessessary, it is not with a normal shop).",}),"param":({"ob the object to turn into a normal object",}),]),}),"query_shop_type":({({"string",}),({}),(["main":({"This method returns the type of the shop.  This conttrols what sortof merchandise the shop will buy and sell.<p>The types of allowed shops are:<ul><li>  jewelery<li>  armoury<li>  clothes<li>  magic<li>  none set (ie: 0, general type)</ul>",}),"see":({"set_shop_type()","set_strict_shop()",}),"return":({"the shop type",}),]),}),"tidy_inventory":({({"void",}),({}),(["main":({"This method is used by the shop to tidyup its inventory.  It does this bydesting objects at random until it has reduced the inventory to 3/4 of itsmaximum.",}),]),}),"set_up_return":({({"void",}),({({"object",}),"rep",}),(["main":({"This method sets up the rep to return home.",}),"param":({"rep the rep to return home",}),]),}),"set_too_costly_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey buy something at the shop and it costs too much.If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_too_costly_message()","set_set_value_message()","set_browse_message()","set_no_worthy_message()","set_sell_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_browse_message(\"$ob$ is worth too much to be sold here.\\n\");","set_browse_message( ({ \"$ob$ is worth too much to be sold here.\\n\",                     \"$client$ tries to sell the terribly expensive $ob$.\\n\"});",}),]),}),"query_browse_mess":({({"mixed",}),({}),(["main":({"This method returns the current browse message of the shop.",}),"see":({"set_browse_mess()",}),"return":({"the current browse message of the shop",}),]),}),"rep_made_it":({({"void",}),({({"int",}),"bing",}),(["main":({"This method is called onces the representativereaches its destination.",}),"param":({"bing we mkde it ok",}),]),}),"set_list_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when listing something.  Thefunction will be called with two elements, the first being theplayer doing the listing and the second being the arrayof objects being listed.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_value_function()","set_too_costly_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"set_no_steal":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the no steal property.  If a shop is setas no steal, then it cannot be shoplifted.",}),"see":({"set_steal_difficulty()","query_no_steal()","set_sell_stolen()",}),"param":({"i the new value of the no_steal property",}),]),}),"set_open_condition":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the conditons which the shop will be open during.  If thisis set to an integer the shop will always be in that state, soif you set the open condition to 0, it would always be closed.If it is set to a string, then that function will be called onthis object to test to see if it is open.  If it iset to function pointer, the function pointer will be evaluated.  If itis set to an array, the first element specifies the object and thesecond specifies the function to call.",}),"see":({"query_open_condition()","is_open()",}),]),}),"set_value_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when an item(*s) are beingvalued.  Thefunction will be called with three elements, the first being theplayer doing the valueing and the second being the arrayof objects being valued and the third being the stringvalue of the objects.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_buy_function()","set_too_costly_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"query_not_worthy_mess":({({"mixed",}),({}),(["main":({"This method returns the current not worthy message of the shop.",}),"see":({"set_not worthy_mess()",}),"return":({"the current not worthy message of the shop",}),]),}),"scaled_value":({({"int",}),({({"int",}),"n",}),(["main":({"This returns the amount of money you can sell and object forwhich is less than the amount it will be sold for).",}),"param":({"n the value to scale",}),"return":({"the sell value",}),]),}),"set_sell_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey sell something at the shop.  If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_sell_message()","set_set_value_message()","set_too_costly_message()","set_no_worthy_message()","set_browse_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_sell_message(\"You sell $ob$ for $money$.\\n\");","set_sell_message( ({ \"You sell $ob$ for $money$.\\n\",                     \"$client$ sells $ob$.\\n\"});",}),]),}),"do_list":({({"int",}),({}),(["main":({"This method lists all the objects in stock.",}),"param":({"do_list_these()",}),"return":({"1 on succes, 0 on failure",}),]),}),"set_buy_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when buying something.  Thefunction will be called with two elements, the first being theplayer doing the buying and the second being the arrayof objects being bought.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_value_function()","set_too_costly_function()","set_cannot_sell_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"add_other_shop":({({"void",}),({({"mixed",}),"shop",}),(["main":({"This method adds a shop with shich we will exchange inventoriesof certain types.  So the main shop can sell off its swords andstuff to the sword shop.",}),"param":({"shop the other shop",}),]),}),"set_buy_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey buy something at the shop.  If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_sell_message()","query_buy_message()","set_set_value_message()","set_too_costly_message()","set_no_worthy_message()","set_browse_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_buy_message(\"You buy $ob$ for $money$.\\n\");","set_buy_message( ({ \"You buy $ob$ for $money$.\\n\",                     \"$client$ buys $ob$.\\n\"});",}),]),}),"query_store_room":({({"object",}),({}),(["main":({"This method returns the storeroom associated with the shop.",}),"see":({"set_store_room()",}),"return":({"the current store room",}),]),}),"set_cannot_sell_function":({({"void",}),({({"mixed",}),"func",}),(["main":({"This method sets the function to call when selling somethingwhich fails for some reason.  Thefunction will be called with two elements, the first being theplayer doing the selling and the second being the arrayof objects being sold.<p>If the function is a string then the function of that namewill be called on the shop, if it is a function pointerthen the function pointer will be evaluated.",}),"see":({"set_sell_function()","set_value_function()","set_too_costly_function()","set_buy_function() ","set_browse_function()","set_list_function()",}),"param":({"func the function to call",}),]),}),"do_parse":({({"void",}),({({"mixed",}),"arr",({"object","*",}),"ob",({"object",}),"client",({"string",}),"money",({"string",}),"extra",}),(["main":({"This method is the major message processing function forthe buye messages, sell messages etc.  It handles callingthe functions and setting the results back onto theplayer.",}),"param":({"arr the value of the message","ob the objects to process","money the money string","extra the extra string",}),]),}),"shop_parse":({({"string",}),({({"string",}),"str",({"mixed",}),"ob",({"object",}),"client",({"string",}),"money",({"string",}),"extra",({"string",}),"which",}),(["main":({"This is a minature version of do_parse(), which can be used when youset the money array to a function pointer in order to make messageprocessing go smoother. ",}),"param":({"str the value of the message","ob the objects to process","money the money string","extra the extra string",}),"return":({"a parsed string",}),]),}),"set_store_room":({({"void",}),({({"mixed",}),"ob",}),(["main":({"This method sets the current store room associated withthe shop.  This is important!  A shop needs a storeroom.",}),"param":({"ob the storeroom to set",}),"example":({"set_store_room(PATH+\"store_room\");",}),]),}),"set_strict_currency":({({"void",}),({({"int",}),"new_strict",}),(["main":({"This method controls whether or not a shop will accept currencyfrom the \"default\" area.",}),"param":({"new_strict set this to 1 if the shop should only accept currencyfrom the current area it is in (determined by the \"place\" property).",}),]),}),"query_min_amount":({({"int",}),({}),(["main":({"This method returns the minimum value oif an object that canbe sold here.",}),"see":({"query_max_amount()","/obj/handlers/money_handler.c",}),"return":({"the minimum amount",}),]),}),"set_shoplift_response_handler":({({"void",}),({({"string",}),"word",}),(["main":({"This method sets the shop lift response handler for the shop.This allows the shop to respond in someway to shop liftingstuff, like the heavies in Ankh-Morpork.  The function'handle_shoplift' will be called on the handler when theshop lift is attempted.  It will be passed two argumentsthe first is the thief, the second is the room beingshoplifted.  This can be set to  afucntion pointerwhich will be evaluated and passed in two arguemtnswhen  a shoplift occurs.",}),"param":({"word the new shop lift response handler",}),"see":({"query_shoplift_response_handler()","set_no_steal()","set_sell_stolen()","set_steal_difficulty()",}),]),}),"query_too_costly_mess":({({"mixed",}),({}),(["main":({"This method returns the current too costly message of the shop.",}),"see":({"set_too costly_mess()",}),"return":({"the current too costly message of the shop",}),]),}),"set_min_amount":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the minimum value of items that can be sold here.",}),"see":({"query_min_amount()",}),]),}),"query_sell_mess":({({"mixed",}),({}),(["main":({"This method returns the current sell message of the shop.",}),"see":({"set_sell_mess()",}),"return":({"the current sell message of the shop",}),]),}),"set_shop_type":({({"void",}),({({"string",}),"ty",}),(["main":({"This method sets the type of the shop.  This controls what sort ofmechandise the shop will buy and sell.<p>The types of allowed shops are:<ul><li>  jewelery<li>  armoury<li>  clothes<li>  magic<li>  none set (ie: 0, general type)</ul>",}),"param":({"ty the type of the shop",}),"see":({"query_shop_type()","set_strict_shop()",}),]),}),"query_max_amount":({({"int",}),({}),(["main":({"This method returns the maximum value oif an object that canbe sold here.",}),"see":({"query_min_amount()","/obj/handlers/money_handler.c",}),"return":({"the maximum amount",}),]),}),"query_shop_lift_items":({({"object","*",}),({({"string",}),"str",({"object",}),"player",}),(["main":({"This method returns the items which can potentially be shop liftedwith the passed in string.",}),"see":({"query_steal_difficulty()","query_shoplift_response_handler()",}),"param":({"str the name for the object to attempt to shop lift",}),"return":({"the array of matching objects",}),]),}),"event_shoplift":({({"void",}),({({"object",}),"command_ob",({"object",}),"thief",({"object",}),"victim",}),(["main":({"This method is called when a shop lift is done on the shop.",}),"see":({"event_shoplift()","set_shoplift_handler()",}),"param":({"command_ob the command object","thief the theif doing the shop lifting","victim the victim of the shoplifiting, us I guess :)",}),]),}),"do_rep_buy":({({"void",}),({({"mixed","*",}),"bing",}),(["main":({"This method is called when the rep tries to buy stuff.",}),"param":({"bing the stuff to buy",}),]),}),"set_sell_stolen":({({"void",}),({({"int",}),"i",}),(["main":({"This method sets the shop as a place which will receive andseel stolen goods.  It automaticly sets the no_steal propertyto 1.",}),"param":({"i the new value for the stolen property",}),"see":({"set_no_steal()","set_steal_difficulty()","query_sell_stolen()",}),]),}),"query_stock":({({"object","*",}),({({"string",}),"type",}),(["main":({"This method returns alkl the stock in the shop of varioustypes.  The types are:<ul><li>  jewelery<li>  armoury<li>  clothes<li>  magic<li>  none set (ie: 0, general type)</ul>",}),"param":({"type the type of stock to return",}),"return":({"the array of objects of the type",}),]),}),"create_mercenary":({({"object",}),({({"object",}),"rep",}),(["main":({"This method creates a mercenaries to wander along with thesales rep to get the stuff to the destination.",}),"param":({"rep the representative to protect",}),"return":({"the new mercenary",}),]),}),"summon_guards":({({"void",}),({({"object",}),"tp",}),(["main":({"This method is yused to handle guards to protect the shop.",}),"see":({"event_shoplift()","set_shoplift_handler()",}),"param":({"tp the object which is shop lifting",}),]),}),"query_list_mess":({({"mixed",}),({}),(["main":({"This method returns the current list message of the shop.",}),"see":({"set_list_mess()",}),"return":({"the current list message of the shop",}),]),}),"set_list_message":({({"void",}),({({"mixed",}),"str",}),(["main":({"This sets the message which will be told to the players whenthey list something at the shop.  If the parameter is a stringthen that message is sent to the player and nothing is sent tothe other people in the room.  If the message is a two elementarray, the first element is sent to the player and the secondelement is sent to the others in the room.  In both thesecases the pattersn $ob$ will be replaces with the objectsbeing sold, $client$ will be replaced with the client, $money$will be replaced with the money information, $extra$ will be replaceswith any extra information.  In the case of a list,the extra information *is* the list.<p>If the parameter is a function pointer, then this is called withthe parameter func(obs, client, money, extra);",}),"see":({"set_buy_message()","query_buy_message()","set_set_value_message()","set_too_costly_message()","set_no_worthy_message()","set_browse_message() ","set_list_message()",}),"param":({"str the message to print",}),"example":({"set_list_message(\"$extra$.\\n\");","set_list_message( ({ \"You list $ob$ for $money$.\\n\",                     \"$client$ lists $ob$.\\n\"});",}),]),}),"send_out_reps":({({"void",}),({}),(["main":({"This method checks to see if there are any other shopsassociated with ours and sends out representatives to themto exchange goods.",}),"see":({"create_rep()","add_other_shop()",}),]),}),"query_strict_currency":({({"int",}),({}),(["main":({"This returns the value of the strict currency variable.",}),"return":({"0 if default currency is accepted, 1 if it is not.",}),]),}),])
protected_functions ([])
inherits (["/std/room/basic_room":({}),"/std/shops/inherit/open_shop":({}),])
main_docs (["main":({"This the base shop.  It buys and sells stuff form players.<p>A storeroom must be set for the shop!<p>Original made who knows when.",}),"author":({"Pinkfish",}),"change":({"bilto make the list a lot nicer.","Pinkfishto give shops types and make them send outreps to sell/buy things from other shops.","Ceresto add burglable storerooms.","23-11-97, Gotothto add buy, sell, list, browse, value,cost_too_muchy and not_worthy functions.",}),"see":({"set_storeroom()",}),])
define_docs ([])
includes (["/include/armoury.h":1522061544,"/include/tasks.h":1522061544,"/include/move_failures.h":1522061544,"/include/shops/bank.h":1522061544,"/include/shop.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/general_shop.c"
last_changed 1522061544
