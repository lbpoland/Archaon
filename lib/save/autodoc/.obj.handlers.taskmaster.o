#/obj/handlers/autodoc/autodoc_file.c
public_functions (["attempt_task_e":({({"varargs","mixed",}),({({"int",}),"difficulty",({"int",}),"bonus",({"int",}),"upper",({"int",}),"half",({"int",}),"degree",}),(["main":({"Do not use this function. Use perform_task instead.",}),"see":({"perform_task()",}),]),}),"attempt_task":({({"varargs","mixed",}),({({"int",}),"difficulty",({"int",}),"bonus",({"int",}),"upper",({"mixed",}),"extra",({"int",}),"degree",}),(["main":({"Do not use this function. Use perform_task instead.",}),"see":({"perform_task()",}),]),}),"set_control":({({"void",}),({({"mixed","*",}),"args",}),(["main":({"This function should only be used in the very rare situationswhere the last skill checked with query_skill_bonus() wasn't theone relevant for the task attempt.",}),"param":({"args an array consisting of ({ object player, string skill })",}),]),}),"is_critical":({({"int",}),({({"int",}),"margin",}),(["main":({"Figure out whether a given margin of success/failure will resultin a critical or not.  Takes an integer between -100 and 100,representing the margin by which a skillcheck succeeded, and doessome logarithmic-type equations to figure out whether it shouldresult in a critical or not.",}),"param":({"margin the margin of success.",}),"return":({"1 if the result is a critical, 0 otherwise.",}),]),}),"perform_task":({({"varargs","mixed",}),({({"object",}),"person",({"string",}),"skill",({"int",}),"difficulty",({"int",}),"tm_type",({"int",}),"degree",}),(["main":({"This function will perform a task.  It handles all the stuff aboutlooking up the skill, and giving the tm advance, but doesn't giveany messages to the player, you'll have to do that.If you set the 'degree' parameter to 1, it will return a 3-elementclass instead of the standard binary success/failure result.",}),"see":({"compare_skills()","tasker_result",}),"param":({"person the one attempting the task (could be any living thing)","skill the skill tested against","difficulty the lowest bonus where the attempt can succeed","tm_type This should use one of the standard definitions in /include/tasks.h. They are:       TM_FIXED - for use where the difficulty is a fixed value       TM_FREE  - for use when the tm attempt doesn't cost anything.       TM_CONTINUOUS - for use in continuous actions eg. combat or sneak       TM_COMMAND - for use with guild commands       TM_RITUAL - when the action is a ritual       TM_SPELL - when the action is a spell       TM_NONE - when you want there to be no chance of a tm","degree Whether or not to use the degree of success code",}),"example":({"This is an example of the simpler, binary success/failure behaviour.switch(TASKER->perform_task( person, \"covert.manipulation.stealing\",                             300, TM_COMMAND ) ) { case AWARD :   tell_object( person, \"%^YELLOW%^You manage to grasp the principles \"               \"of stealing more firmly.%^RESET%^\\n\" );   // Note, no break; case SUCCEED :   // Whatever happens when it succeeds   break; default :   // Whatever happens when it fails}","This is an example of the finer grained degree-of-success behaviour.class tasker_result tr;tr = (class tasker_result)TASKER->perform_task( person,  \"other.direction\", 300, TM_FREE, 1 );switch( tr->result ) {case AWARD:  tell_object(attacker, \"%^YELLOW%^You feel very aligned!%^RESET%^\\n\" );case SUCCEED:   switch( tr->degree ) {   case TASKER_MARGINAL:      say( \"You think he went thataway. Maybe.\\n\" );      break;   case TASKER_NORMAL:      say( \"You're pretty sure he went that way.\\n\" );      break;   case TASKER_EXCEPTIONAL:      say( \"He definitely went thataway!\\n\" );      break;   case TASKER_CRITICAL:      say( \"Your surity that he went thataway is so powerful that even \"        \"if he didn't go thataway, he'll be in that direction.\\n\" );      break;  }  break;case FAIL:  switch( tr->degree ) {     ...     Boy, it's a good thing I've already explained this, or I'd be     pretty hard-pressed to think of an example of a critical failure     for other.direction.  You get the idea.     ...  }  break;}",}),"return":({"BARF if something screwed up, AWARD if the task succeeded, andshould give an advance, SUCCEED if it succeeded, FAIL if it failed. Ifthe degree of success code is used, it will pass out a 3-element class.",}),]),}),"compare_skills":({({"varargs","mixed",}),({({"object",}),"offob",({"string",}),"offskill",({"object",}),"defob",({"string",}),"defskill",({"int",}),"modifier",({"int",}),"off_tm_type",({"int",}),"def_tm_type",({"int",}),"degree",}),(["main":({"This function will compare the skills of two objects and return which onewon and if the winner got a TM.With equal skills the chances are 50/50 as to who will win. As the balanceshifts so do the chances. Additionally a modifier can be applied toaccount for conditions favouring one or the other. This should beconsidered a percentage eg. -50 will add 50% to the defenders chances ofwinning.If",}),"see":({"perform_task()","tasker_result",}),"param":({"offob The attacking object","offskill The name of the skill the attacker is using","deffob The defending object","deffskill The name of the skill the defender is using","modifier The percentage modifier","off_tm_type This should be one of the standard definitions in/include/tasks.h and is for the attacker","def_tm_type This should be one of the standard definitions in/include/tasks.h and is for the defender","degree Enable the degree-of-success code.  If this is used, the return value becomes a class instead of an int.",}),"example":({"This is an example of the simpler, binary success/failure behaviour.switch(TASKER->compare_skills(attacker, \"fighting.combat.melee.sharp\",                              defender, \"fighting.combat.parry.unarmed\",                              25, TM_COMMAND, TM_FREE) {case OFFAWARD:  tell_object(attacker, \"%^YELLOW%^You manage to grasp one of the \"                        \"principles of slicing people up more firmly.\"                        \"%^RESET%^\\n\");case OFFWIN:  say(defender->one_short() + \" loses an arm!\\n\");  break;case DEFAWARD:  tell_object(defender, \"%^YELLOW%^You feel better able to keep your arms \"                        \"attached when parrying unarmed.%^RESET%^\\n\");case DEFWIN:  say(defender->one_short() + \" keeps \" + defender->query_possesive() +      \" arm attached.\\n\");  break;}","This is an example of the finer grained degree-of-success behaviour.class tasker_result tr;tr = (class tasker_result)TASKER->compare_skills(  attacker, \"fighting.combat.melee.sharp\",  defender, \"fighting.combat.parry.unarmed\",  25, TM_COMMAND, TM_FREE, 1 );switch( tr->result ) {case OFFAWARD:  tell_object(attacker, \"%^YELLOW%^You manage to grasp one of the \"                        \"principles of slicing people up more firmly.\"                        \"%^RESET%^\\n\");case OFFWIN:  switch( tr->degree ) {  case TASKER_MARGINAL:    say( \"You just barely scrape your opponent's hand.\\n\" );    break;  case TASKER_NORMAL:    say( \"You slice into your opponent's arm.\\n\" );    break;  case TASKER_EXCEPTIONAL:    say( \"You slice deeply into your opponent's muscle and sinew, and \"      \"he screams in pain!\\n\" );    break;  case TASKER_CRITICAL:    say( \"You slice your opponent's arm clean off.  Blood spurts \"      \"everywhere like a cherry slurpee machine gone insane!\\n\" );    break;  }  break;case DEFAWARD:  tell_object(defender, \"%^YELLOW%^You feel better able to keep your arms \"                        \"attached when parrying unarmed.%^RESET%^\\n\");case DEFWIN:  switch( tr->degree ) {     ...     similar code in here...     ...  }  break;}",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"This handler gives access to the functions needed for the taskmastersystem.Rewritten by Shrike to include degrees of success.",}),"author":({"Deutha",}),"see":({"help::tasks",}),])
define_docs (["TIME_PER_USER":([]),"SAVE_FILES":([]),"LOG_STATS":([]),])
includes (["/include/tasks.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/taskmaster.c"
last_changed 1522061544
