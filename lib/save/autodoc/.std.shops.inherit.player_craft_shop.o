#/obj/handlers/autodoc/autodoc_file.c
public_functions (["do_user_function_add":({({"int",}),({({"string",}),"def",({"string",}),"expr",}),(["main":({"This method allows a function to be added to the base set of user functions.",}),"param":({"def the name and arguements","expr the expression itself",}),"return":({"1 on success, 0  on failure",}),]),}),"do_list_approval":({({"int",}),({({"int",}),"approved",}),(["main":({"List the items for approval.",}),]),}),"do_approve_item":({({"int",}),({({"string",}),"name",({"string",}),"money_str",}),(["main":({"This method approves the specified item.",}),]),}),"do_approve_auto_low":({({"int",}),({({"string",}),"cost",}),(["main":({"This method sets the automatic low acception level.",}),"param":({"cost the cost to use a low level",}),]),}),"query_maximum_sale_value_both":({({"int","*",}),({({"string",}),"person",({"object",}),"item",}),(["main":({"This method finds out the maximum value that this item is allowedto be sold for based on the current settings of the shop.",}),"param":({"person the person doing the selling","items the item being sold",}),"return":({"({ queue limit, deny limit })",}),]),}),"do_approve_auto_expression_add":({({"int",}),({({"string",}),"expression",({"string",}),"value_str",({"int",}),"type",({"string",}),"list_name",}),(["main":({"This method sets the automatic expressions to allow.",}),"param":({"expression the expressions short to allow",}),]),}),"add_transaction":({({"void",}),({({"string",}),"person",({"object","*",}),"objects",({"int",}),"type",({"int",}),"amount",({"string",}),"name_cat",({"mixed",}),"extra",}),(["main":({"This method adds in transaction into the transaction list.",}),"param":({"person the person doing the thing","objects the string name of the objects","type the type of the transaction","amount the cost of the transaction","name_cat the name/category of the item","extra anything extra about the transaction",}),]),}),"is_item_approved":({({"mixed",}),({({"string",}),"seller",({"int",}),"value",({"string",}),"name",({"object","*",}),"sellables",({"string",}),"category",({"int","ref",}),"final_cost",}),(["main":({"This method checks to see if the specified item is approved.",}),"param":({"seller the name of the seller","value the amount it is sold for","name the name of the item being solde","sellables the sold items","category the category of the sold item","final_cost the final cost of the item",}),"return":({"1 if is approved, 0 if not, -1 if denied, string if it is approved        with a list name",}),]),}),"do_approve_auto_high":({({"int",}),({({"string",}),"cost",}),(["main":({"This method sets the automatic high cut off level.",}),"param":({"cost the cost to use a high cut off level",}),]),}),"do_remove_sign":({({"int",}),({}),(["main":({"This method removes the sign from the shop.",}),]),}),"do_name_shop":({({"int",}),({({"string",}),"name",}),(["main":({"This method gives the shop a name.",}),]),}),"do_collect_partial_royalties":({({"int",}),({({"string",}),"amount",}),(["main":({"This method collects royalities up to a certain amount.  This isonly usable by the owner of the shop.",}),"param":({"amount the amount to collect",}),"return":({"1 on success, 0 on failure",}),]),}),"do_approve_auto_expression_remove":({({"int",}),({({"string",}),"idstr",}),(["main":({"This method removes an allowed expression",}),"param":({"id the expression id to remove",}),]),}),"query_approval_class":({({"class","approval_obs",}),({({"string",}),"name",}),(["main":({"This method returns the approval class from the string name.  THis isassumed to be called from inside a command.",}),"param":({"name the string name","approved from the approved or waiting list",}),"return":({"the approval object",}),]),}),"query_letter_value":({({"string",}),({({"int",}),"pos",}),(["main":({"This method returns the position as a two letter value.",}),"param":({"pos the position to mangle",}),"return":({"the letter value",}),]),}),"query_parcel_post":({({"string",}),({}),(["main":({"This method tells us the current parcel post used for rejecting items.",}),"return":({"the current parcel post",}),]),}),"do_approve_black_list_remove":({({"int",}),({({"string",}),"name",}),(["main":({"This method removes the person from the black list.",}),"param":({"person the person to remove from the black list",}),]),}),"do_approve_limit_person_value":({({"int",}),({({"string",}),"name",({"string",}),"money",}),(["main":({"This method sets the limit at which a person can automatically sellto the shop.",}),"param":({"person the person to set a limit on","money the limit to set it to",}),]),}),"create_checkout_object":({({"object",}),({({"class","approval_obs",}),"approve",({"int",}),"id",({"object",}),"player",}),(["main":({"This method turns all the specified id into an item to be checked.",}),"param":({"id the id of the object to create","player the player to use for autoloading",}),]),}),"query_maximum_sale_value":({({"int",}),({({"string",}),"person",({"object","*",}),"obs",}),(["main":({"This method will return the maximum value at which the set of itemswill be denied.",}),"param":({"person the person selling the item","obs the set of objects",}),"return":({"the deny value",}),]),}),"query_shop_name":({({"string",}),({}),(["main":({"This method returns the name of the shop.",}),"return":({"the name of the shop",}),]),}),"do_function_help":({({"int",}),({({"string",}),"name",}),(["main":({"Get help on a specific function.",}),"param":({"name the name of the function to get help on",}),]),}),"do_approve_limit_person_remove":({({"int",}),({({"string",}),"name",}),(["main":({"This method removes any limits set on the player.",}),"param":({"person the person to remove the limit on",}),]),}),"do_function_help_list":({({"int",}),({}),(["main":({"Get help on a specific function.",}),"param":({"name the name of the function to get help on",}),]),}),"do_approve_limit_person_value_deny":({({"int",}),({({"string",}),"name",({"string",}),"money",}),(["main":({"This method sets the limit at which a person can automatically sellto the shop (deny limit).",}),"param":({"person the person to set a limit on","money the limit to set it to",}),]),}),"do_remove_category":({({"int",}),({({"string",}),"category",}),(["main":({"This method allows the player to remove a category from the list.",}),"param":({"category the category to remove",}),]),}),"do_approve_pay_deficit":({({"int",}),({}),(["main":({"This method pays off the cash deficit (if one exists).",}),]),}),"do_user_function_remove":({({"int",}),({({"string",}),"name",}),(["main":({"This method allows a function to be added to the base set of user functions.",}),"param":({"def the name and arguements","expr the expression itself",}),"return":({"1 on success, 0  on failure",}),]),}),"set_parcel_post":({({"void",}),({({"string",}),"parcel",}),(["main":({"This method sets the parcel post to use for rejecting items.",}),"param":({"parcel the parcel post office",}),]),}),"do_approve_auto_item_add_object":({({"int",}),({({"object","*",}),"obs",({"string",}),"money",({"string",}),"list_name",({"int",}),"markup",({"string",}),"money_str",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the items short to allow",}),]),}),"do_approve_auto_item_add":({({"int",}),({({"string",}),"item",({"string",}),"money",({"string",}),"list_name",({"int",}),"markup",({"string",}),"money_str",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the items short to allow",}),]),}),"do_rename_category":({({"int",}),({({"string",}),"category",({"string",}),"new_category",}),(["main":({"This method allows the player to remove a category from the list.",}),"param":({"category the category to rename","new_category the new name of a category",}),]),}),"do_approve_status_functions":({({"int",}),({({"int",}),"hints",}),(["main":({"This method shows the status of all the user defined functions.These can be used in other exciting functions.",}),]),}),"do_approve_black_list_add":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the person to the black list.",}),"param":({"person the person to add to the black list",}),]),}),"query_owners_money":({({"int",}),({}),(["main":({"This method returns the current level of the owners money.",}),]),}),"do_approve_percentage":({({"int",}),({({"mixed",}),"num",}),(["main":({"This method sets the percentage to add to the sell price.",}),"param":({"num the number to set the percentage to",}),]),}),"adjust_owners_money":({({"void",}),({({"int",}),"amt",}),(["main":({"This method changes the current level of the owners money.",}),]),}),"do_approve_checkin":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method checks in a checked out object.",}),]),}),"do_approve_status_internal_functions":({({"int",}),({}),(["main":({"This method shows the status of all the user defined functions.These can be used in other exciting functions.",}),]),}),"query_maximum_inventory_size":({({"int",}),({}),(["main":({"This method returns the maximum inventory size for the shop.",}),"return":({"the maximum inventory size",}),]),}),"query_transaction_string":({({"string",}),({({"class","shop_transaction",}),"trans",}),(["main":({"This method truns a transaction into a string.",}),"param":({"trans the transaction",}),"return":({"the transaction as a string",}),]),}),"do_approve_browse":({({"int",}),({({"string",}),"name",}),(["main":({"This method browses the specified item.",}),]),}),"do_approve_reject":({({"int",}),({({"string",}),"name",({"string",}),"mess",({"int",}),"reject_pos",}),(["main":({"This method rejects the specified item.",}),]),}),"inform_of_royalties":({({"void",}),({({"object",}),"player",}),(["main":({"Tells the playe they have some royalties to pick up.",}),"param":({"player the player to tell about the royalties",}),]),}),"do_set_sign":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method sets the sign you wish to use for your shop.The sign will be displayed outside the shop for passer bys.",}),"param":({"obs the sign",}),]),}),"do_stats_items":({({"int",}),({({"int",}),"type",}),(["main":({"This method shows the stats on all the sold items, the number and valueof each one sold.",}),"param":({"type the type of sorting to do",}),]),}),"do_approve_status":({({"int",}),({({"int",}),"status",}),(["main":({"This method shows the current status of the shop.",}),]),}),"do_approve_checkout":({({"int",}),({({"string",}),"name",}),(["main":({"This method checks out the specified item.",}),]),}),"query_maximum_waiting_queue_size":({({"int",}),({}),(["main":({"This method returns the maximum inventory size for the shop.",}),"return":({"the maximum inventory size",}),]),}),"return_all_checkedout_objects":({({"void",}),({}),(["main":({"This method returns all the checkedout objects to the shop.",}),]),}),"adjust_royalty":({({"void",}),({({"string",}),"name",({"int",}),"amount",}),(["main":({"This method adjusts the royalty.",}),"param":({"person the person to adjust","amt the amoutn to adjust by",}),]),}),"set_shop_name":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the name of the shop.",}),"param":({"name the name of the shop",}),]),}),"set_maximum_waiting_queue_size":({({"void",}),({({"int",}),"size",}),(["main":({"This method sets the maximum inventory size for the shop.",}),"param":({"size the maximum inventory size",}),]),}),"do_approve_auto_item_remove_object":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the item to accept",}),]),}),"do_approve_name_change":({({"int",}),({({"string",}),"name",({"string",}),"new_name",}),(["main":({"This method changes the name of the item to be approved.",}),"param":({"name the reference","new_name the new name for the item",}),]),}),"do_list_categories":({({"int",}),({}),(["main":({"This method lists the current categories and shows us which one iscurrently the default.",}),]),}),"do_approve_auto_item_add_expr":({({"int",}),({({"string",}),"item",({"string",}),"expr",({"string",}),"list_name",({"int",}),"markup",({"string",}),"money_str",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the items short to allow",}),]),}),"do_approve_limit_person_items":({({"int",}),({({"string",}),"name",({"string",}),"value",}),(["main":({"This method sets the limit per person to be a specified value.",}),"param":({"person the person to set a limit on","value the limit to set",}),]),}),"do_set_default_category":({({"int",}),({({"string",}),"default_cat",}),(["main":({"This method sets the default category for the place.",}),"param":({"default_cat the default category",}),]),}),"do_check_sell":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method runs through the objects and checks to see what sort of levelsthey are allowed to sell them for to this shop.",}),"return":({"1 on success, 0 on failure",}),]),}),"do_approve_use_expression":({({"int",}),({({"string",}),"str",}),(["main":({"This method sets up the expression to use when calculating theability to use the shop.",}),]),}),"do_stats_transactions":({({"int",}),({}),(["main":({"This method shows a list of all the transactions that have occured in theshop.",}),]),}),"query_royalty":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the royalties for the specific person.",}),"param":({"person the name of the person to get the royalties of",}),"return":({"the the royalties",}),]),}),"do_stats_money":({({"int",}),({}),(["main":({"This method shows stats about money and stuff in the shop.",}),]),}),"query_sign_object":({({"object",}),({}),(["main":({"This method returns the current sign object for the shop.",}),"return":({"the current sign object",}),]),}),"is_checkout_object":({({"int",}),({({"object",}),"ob",}),(["main":({"This method checks to see if the specified item is a checked outitem.",}),"param":({"ob the object to check",}),"return":({"1 if it is, 0 if not",}),]),}),"do_approve_limit":({({"int",}),({({"string",}),"limit",}),(["main":({"This method sets the limit on number of items sellable by all the players.",}),"param":({"limit the default limit",}),]),}),"do_approve_category_change":({({"int",}),({({"string",}),"name",({"string",}),"new_category",}),(["main":({"This method changes the category of the item waiting to be approved.",}),"param":({"name the reference","new_category the new category for the item",}),]),}),"do_approve_auto_item_test":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method checks to see if the specified object can really be sold ornot automatically.",}),"param":({"obs the objects to test",}),]),}),"do_approve_auto_item_remove":({({"int",}),({({"string",}),"item",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the item to accept",}),]),}),"query_number_value":({({"int",}),({({"string",}),"letter",}),(["main":({"This method goes from a letter value to a number.",}),"param":({"letter the letters",}),"return":({"the number",}),]),}),"query_round_prices":({({"int",}),({}),(["main":({"This method returns the amount to round all sell values for.",}),"return":({"the round price",}),]),}),"do_approve_buy_expression":({({"int",}),({({"string",}),"str",}),(["main":({"This method sets up the expression to use when calculating theability to buy from the shop.",}),]),}),"query_approval_list":({({"class","approval_obs","*",}),({({"int",}),"approved",}),(["main":({"This method returns the current approval list for the shop.",}),]),}),"destroy_checkout_object":({({"int",}),({({"object",}),"ob",}),(["main":({"This method updates the checked out item and changes to to be whatwe now have...",}),"param":({"ob the object to destroy",}),]),}),"do_return":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the item to the person that started to sell it.This only works before the item has been approved.",}),"param":({"name the name of the item to return",}),]),}),"set_sign_object":({({"void",}),({({"object",}),"ob",}),(["main":({"This method sets the current sign object.",}),"param":({"sign the new sign object",}),]),}),"add_to_approval_list":({({"object","*",}),({({"string",}),"seller",({"object","*",}),"sellables",({"int",}),"value",({"string",}),"name",({"string",}),"category",({"int",}),"approved",}),(["main":({"This method adds an item to the list of items that need to be approved.",}),"param":({"seller name of the player","sellables the list of items to sell","value the cost of the item","name the name of the items","category the category of the item","approved a flag to say if this was approved or not",}),"return":({"obs the objects we bought",}),]),}),"do_add_new_category":({({"int",}),({({"string",}),"category",}),(["main":({"This method allows the player to add a new category to the list.",}),"param":({"category the new category name",}),]),}),"do_approve_black_list_add_ignore":({({"int",}),({}),(["main":({"This method adds their ignore list to the black list",}),]),}),"query_number_of_items_listed":({({"int",}),({({"string",}),"name",}),(["main":({"This method returns the number of items currently in the shop bythe specified person.  This includes items waiting for approval.",}),]),}),"is_allowed_to_use_shop":({({"int",}),({({"string",}),"person",}),(["main":({"This method checks to see if the shop is a closed shop and then checksto see if the person is allowed.",}),"param":({"person the person to check to see if they are allowed",}),"return":({"1 if they are allowed, 0 if not",}),]),}),"do_approve_auto_item_add_object_expr":({({"int",}),({({"object","*",}),"obs",({"string",}),"expr",({"string",}),"list_name",({"int",}),"markup",({"string",}),"money_str",}),(["main":({"This method sets the automatic items to allow.",}),"param":({"item the items short to allow",}),]),}),"do_approve_auto_high_deny":({({"int",}),({({"string",}),"cost",}),(["main":({"This method sets the automatic high cut off level for denying sales.",}),"param":({"cost the cost to use a high cut off level",}),]),}),"set_round_price":({({"void",}),({({"int",}),"round",}),(["main":({"THis method sets the amount to round all the sell values for.  THis isdeal with annoying currencies like AM money which does not have a'1' item.",}),"param":({"round the price to round at",}),]),}),"remove_from_approval_list":({({"void",}),({({"class","approval_obs",}),"approve",}),(["main":({"This method removes the item from the approval list.",}),"param":({"approve the item to remove",}),]),}),"set_maximum_inventory_size":({({"void",}),({({"int",}),"size",}),(["main":({"This method sets the maximum inventory size for the shop.",}),"param":({"size the maximum inventory size",}),]),}),])
protected_functions (["create_auto_load_file":({({"int",}),({({"mixed",}),"ob",({"int",}),"fixed_num",}),(["main":({"This method creates a save file for the specified objects autoloadingcapability.  If the number to write to is non-null then it willwrite to that object.",}),"see":({"save_it()",}),"param":({"ob the object to get an autoload number for","fixed_num the file number to write to",}),"return":({"the auto load number",}),]),}),"check_remove_category":({({"void",}),({({"string",}),"answer",({"string",}),"category",}),(["main":({"This method is called into to check to see if we can remove the category.",}),"param":({"answer their answer","category the category to remove",}),]),}),"confirm_approval":({({"void",}),({({"string",}),"answer",({"class","approval_obs",}),"approve",({"int",}),"final_cost",}),([]),}),"create_real_auto_load_object":({({"object",}),({({"int",}),"num",({"object",}),"player",}),(["main":({"This method creates a real object from the save file number.",}),"see":({"create_auto_load_file()",}),"param":({"num the save file number",}),"return":({"the nice shiny new object",}),]),}),])
inherits (["/std/shops/inherit/craft_shop_category":({}),"/std/basic/expressions":({}),])
main_docs (["main":({"This is the file containing extra controls for the player runcraft shop.  We will assume that all player run craft shops will berooms and not npcs.",}),"started":({"Fri Apr 21 13:37:44 PDT 2000",}),"author":({"Pinkfish",}),])
define_docs (["PLAYER_CRAFT_SHOP_SELL_AUTO":([]),"CHARGE_MULT":([]),"PLAYER_CRAFT_SHOP_EXPR_ACCEPT":([]),"PLAYER_CRAFT_SHOP_EXPR_DENY":([]),"PLAYER_CRAFT_SHOP_CHECK_PROP":([]),"PLAYER_CRAFT_SHOP_APPROVE":([]),"PLAYER_CRAFT_SHOP_BUY":([]),"PLAYER_CRAFT_SHOP_SELL":([]),])
includes (["/include/nroff.h":1522061544,"/include/mail.h":1522061544,"/include/expressions.h":1522061544,"/include/shops/craft_shop.h":1522061544,"/include/player_handler.h":1522061544,"/include/move_failures.h":1522061544,"/include/player.h":1522061544,"/include/am_time.h":1522061544,"/include/shops/bank.h":1522061544,"/include/clubs.h":1522061544,"/include/money.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["seller_information":({0,({({"max_sellable",({"int",}),}),({"value_limit",({"int",}),}),({"deny_value_limit",({"int",}),}),}),([]),}),"shop_stats":({0,({({"num_sold",({"int",}),}),({"value_sold",({"int",}),}),}),([]),}),"shop_transaction":({0,({({"time",({"int",}),}),({"person",({"string",}),}),({"objects",({"string",}),}),({"name_cat",({"string",}),}),({"type",({"int",}),}),({"amount",({"int",}),}),({"extra",({"mixed",}),}),}),([]),}),"approval_item":({0,({({"value",({"mixed",}),}),({"list_name",({"string",}),}),({"markup",({"int",}),}),({"final_cost",({"int",}),}),}),([]),}),"approval":({0,({({"hairy",({"mixed",}),}),({"expressions",({"class","expression_type","*",}),}),({"low_cost",({"int",}),}),({"high_cost",({"int",}),}),({"items",({"mapping",}),}),({"num_allowed",({"int",}),}),({"high_cost_deny",({"int",}),}),}),([]),}),"expression_type":({0,({({"type",({"int",}),}),({"condition",({"class","parse_node","*",}),}),({"value",({"class","parse_node","*",}),}),({"list_name",({"string",}),}),}),([]),}),"approval_obs":({0,({({"seller",({"string",}),}),({"category",({"string",}),}),({"value",({"int",}),}),({"name",({"string",}),}),({"saved",({"int","*",}),}),({"enter_time",({"int",}),}),({"checkout",({"int","*",}),}),}),([]),}),])
file_name "/std/shops/inherit/player_craft_shop.c"
last_changed 1522061544
