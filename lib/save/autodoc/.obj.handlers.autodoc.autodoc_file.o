#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_class_docs":({({"mapping",}),({}),(["main":({"The documentation for the classes.",}),"return":({"the mapping of the class names to documentation",}),]),}),"query_protected_functions":({({"mapping",}),({}),(["main":({"The mapping of protected functions.The mapping is of the form ([ func_name : ({ type, args, docs }) ]).The type bit is an array of the type name, ie: ({ \"int\" }) or({ \"mixed\", \"*\" }).  The args bit looks like ({ \"name\", type }),where the type is the same as in the previous array.  The docs isa mapping of the form ([ \"tag\" : ({ data }) ]), where each referenceto a tag creates a new element in the data array.",}),"return":({"a mapping containing the protected functions",}),]),}),"save_file":({({"void",}),({}),(["main":({"Saves the current file name to the archives.",}),]),}),"parse_file":({({"void",}),({({"string",}),"name",({"function",}),"func",({"int",}),"only_load",}),(["main":({"Parses the input file figuring out all the documentation bits of it.",}),"param":({"name the name of the file to parse","func the function to call when the parsing is finished","only_load a flag telling us to only load the information",}),]),}),"query_changed":({({"int",}),({}),(["main":({"Did the file change?  Checks to see if the file changed since itwas last read.",}),"return":({"1 if it changed, 0 if it has not changed",}),]),}),"load_file":({({"void",}),({}),(["main":({"Loads up the currently set file name from the archives.",}),]),}),"query_inherits":({({"mapping",}),({}),(["main":({"Returns the inherits mapping of the system.  This returns a mapping of theform ([ inherit_name : ({ flags }) ]).  Where the name of the inherit issomething like \"/std/object\" and the flags are things you can apply toan inherit, like \"protected\" or \"private\".  If there are no flags thenthe flags will be an empty array.",}),"return":({"a mapping of things inherited by this file",}),]),}),"query_main_docs":({({"mapping",}),({}),(["main":({"Returns the main docs for the class.  The mapping is ofthe form ([ \"tag\" : ({ data }) ]), where each referenceto a tag creates a new element in the data array.",}),"return":({"a mapping containing the main docs for the file",}),]),}),"query_includes":({({"string","*",}),({}),(["main":({"The files included by this one.",}),"return":({"an array of included files",}),]),}),"query_num_failed_tries":({({"int",}),({}),(["main":({"This method returns the number of times the file was attempted tobe read and it was discovered not to exist at all.",}),"return":({"the number of times it was unable to be read",}),]),}),"query_defines":({({"mapping",}),({}),(["main":({"The defines which were setup in the class.  This is the mapping of thedefines which were processed.  The format of the mapping is([ \"name\" : \"value\" ]), where the name is the name of the define andthe value is what to replace it with.",}),"return":({"the mapping of defines",}),]),}),"query_public_functions":({({"mapping",}),({}),(["main":({"The mapping of public functions.The mapping is of the form ([ func_name : ({ type, args, docs }) ]).The type bit is an array of the type name, ie: ({ \"int\" }) or({ \"mixed\", \"*\" }).  The args bit looks like ({ \"name\", type }),where the type is the same as in the previous array.  The docs isa mapping of the form ([ \"tag\" : ({ data }) ]), where each referenceto a tag creates a new element in the data array.",}),"return":({"a mapping containing the public functions",}),]),}),"query_file_name":({({"string",}),({}),(["main":({"The file name being processed.",}),"return":({"the name of the file being processed",}),]),}),"query_define_docs":({({"mapping",}),({}),(["main":({"The documentation for the defines.  This is mostly used by the includefile documentation system.",}),"return":({"the mapping of define names to documentation",}),]),}),"query_private_functions":({({"mapping",}),({}),(["main":({"The mapping of private functions.The mapping is of the form ([ func_name : ({ type, args, docs }) ]).The type bit is an array of the type name, ie: ({ \"int\" }) or({ \"mixed\", \"*\" }).  The args bit looks like ({ \"name\", type }),where the type is the same as in the previous array.  The docs isa mapping of the form ([ \"tag\" : ({ data }) ]), where each referenceto a tag creates a new element in the data array.",}),"return":({"a mapping containing the private functions",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"The automatic document generator.  It takes source files from variousdirectories and creates help files from the comments embeded in thecode.",}),"started":({"Fri Oct 24 16:03:57 EDT 1997",}),"author":({"Pinkfish",}),"see":({"/obj/handlers/autodoc/autodoc_handler",}),])
define_docs (["EOF":([]),"MASTER_OB":([]),"SAVE_DIR":([]),])
includes ([])
class_docs ([])
file_name "/obj/handlers/autodoc/autodoc_file.c"
last_changed 1522061544
