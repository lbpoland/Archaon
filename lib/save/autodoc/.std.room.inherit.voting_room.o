#/obj/handlers/autodoc/autodoc_file.c
public_functions (["delete_election":({({"int",}),({({"string",}),"election",}),(["main":({"This is an administrative function to allow the removal/cancellationof an election.",}),"param":({"election The name of the election to be cancelled",}),"return":({"Returns 1 for success, 0 for failure.",}),]),}),"initiate_election":({({"void",}),({({"string",}),"position",}),(["main":({"This function is used to initiate an election.It sets up the election class and adds it to the mapping.",}),"param":({"position The name of the position the election is for.",}),]),}),"query_vote_duration":({({"int",}),({}),(["main":({"This function is used to returns the normal vote and election duration.If it is not set and no duration isgiven in add_vote then the default value of DEFAULT_VOTE_DURATION is used.",}),"see":({"add_vote()",}),"param":({"duraction The number of seconds the vote should be open.",}),]),}),"make_announcement":({({"void",}),({({"string",}),"board",({"string",}),"name",({"string",}),"subject",({"string",}),"message",}),(["main":({"This function is provided for convenience to make it easy for your voteend function to post to a board.",}),"param":({"board The name of the board to post to.","name The name of the person to post as.","subject The subject line to use.","message The message to post.",}),]),}),"set_election_announcement":({({"void",}),({({"string",}),"board",({"string",}),"person",({"string",}),"subject",({"string",}),"prefix",({"string",}),"suffix",}),(["main":({"This function defines the board, person and subject for announcementsof elections.",}),"param":({"board This is the board to post to.","person This is who to post as.","subject This is the subject line to use.","prefix The text to preceed the message.  The default is              \"All eligible persons are requested to vote for the position \"              \"of \"","suffix The text to follow the message.",}),]),}),"do_create_vote":({({"int",}),({({"string",}),"choices",}),(["main":({"This is an option function which can be defined in upper level inherits.It allows the players to create their own votes with their own choices.",}),]),}),"set_proxy":({({"void",}),({({"string",}),"proxy",}),(["main":({"This method sets up a proxy for the room.  A proxy is somewhere elseto get all the voting information from.",}),"param":({"proxy the proxy tpo setup",}),]),}),"set_no_elections":({({"void",}),({({"int",}),"no_elections",}),(["main":({"This method sets the room to not allow elections and disable all theelection commands.",}),"param":({"no_elections the flag",}),]),}),"delete_vote":({({"int",}),({({"int",}),"vote_id",}),(["main":({"This is an administrative function to allow the removal/cancellationof a vote.",}),"param":({"vote_id The id number of the vote to be cancelled.",}),"return":({"Returns 1 for success, 0 for failure.",}),]),}),"set_second_conditions":({({"void",}),({({"mixed",}),"cond",}),(["main":({"This function defines a function to be called to determine if a playeris eligible to second a canditate for election.",}),"param":({"cond This will usually be a mixed array of an object and a function.It could also be a function pointer.Your function should return 1 if the player is eligible to second or 0 ifthey are not.",}),]),}),"add_vote":({({"void",}),({({"string",}),"type",({"string",}),"description",({"string","*",}),"choices",({"int",}),"ending",}),(["main":({"This function is called to add a vote to the system.",}),"see":({"set_completion_action()",}),"param":({"type Freeform string giving the type of vote. This is typically usedby your completion function so that it can perform different actions fordifferent types of votes.","description The description of the vote as shown to the player.","choices An array of vote options eg. ({\"Yes\", \"No\" })","ending An integer time of when the vote should be terminated.",}),]),}),"set_save_file":({({"void",}),({({"string",}),"file",}),(["main":({"This method is called by the inheriting object to determine which save fileto use for votes.",}),"param":({"str The name of the file you want the voting info saved to(without the .o)",}),]),}),"set_stand_conditions":({({"void",}),({({"mixed",}),"cond",}),(["main":({"This function defines a function to be called to determine if a playeris eligible to stand for election to a position.",}),"param":({"cond This will usually be a mixed array of an object and a function.It could also be a function pointer.Your function should return 1 if the player is eligible to stand or 0 ifthey are not.",}),]),}),"set_completion_action":({({"void",}),({({"mixed",}),"cond",}),(["main":({"This function defines a function to be called when the vote is complete.Typically your function will post the vote results somewhere or somesuch.The parameters passedinto the function are:<br>( string type, string description, string* choices, mapping votes, string* voted) <br>",}),"param":({"cond This will usually be a mixed array of an object and a function.It could also be a function pointer.",}),]),}),"query_open_voting":({({"int",}),({({"int",}),"open",}),(["main":({"This function queries if the votes should be open or not.  If a vote isopen then you know who voted for each thing.",}),"return":({"1 for an open system 0 for closed",}),]),}),"cast_vote":({({"int",}),({({"string",}),"which_str",({"int",}),"vote_id",}),(["main":({"This function is called when a player votes. The syntax is\"vote <choice> on <vote>\".",}),"see":({"set_vote_conditions()",}),]),}),"query_save_file":({({"string",}),({}),(["main":({"This method returns the save file currently used for the room.",}),"return":({"the current save file",}),]),}),"start_election_vote":({({"void",}),({({"string",}),"post",}),(["main":({"Once the candidacy phase is over this function starts the election voteitself by taking all eligible candidates, setting them as choices in theelection and then posting an announcemment.",}),]),}),"second_candidate":({({"int",}),({({"string",}),"who",({"string",}),"position",}),(["main":({"This function is used by players to second candidates for election. If acandidates isn't seconded he/she won't be in the election. The syntax is:\"second <player> for <position>\".",}),"see":({"set_second_conditions()",}),]),}),"stand_for_election":({({"int",}),({({"string",}),"position",}),(["main":({"This function is used by players to stand for election. The syntax is:\"stand for <position>\".",}),"see":({"set_stand_conditions()",}),]),}),"query_election_in_progress":({({"int",}),({({"string",}),"position",}),(["main":({"This method determines if there is already an election of thespecified type in progress.",}),"param":({"position the name of the election in progress",}),"return":({"1 if there is an election in progress",}),]),}),"set_vote_conditions":({({"void",}),({({"mixed",}),"cond",}),(["main":({"This function defines a function to be called to determine if a playeris eligible to vote.",}),"param":({"cond This will usually be a mixed array of an object and a function.It could also be a function pointer.Your function should return 1 if the player is eligible to vote or 0 ifthey are not.",}),]),}),"setup_after_load":({({"void",}),({}),(["main":({"This setups all the stuff that  needs to be setup after the room hasbeen loaded.  Makes all the callouts for the right amount of timeand so on.",}),]),}),"init_add_vote":({({"void",}),({}),(["main":({"This is the init() which should be called as well as the defaultinit() if you wish to have player added votes.",}),]),}),"list_votes":({({"int",}),({}),(["main":({"This function is called when a player types 'list'. It lists the currentlyopen votes.",}),]),}),"set_open_voting":({({"void",}),({({"int",}),"open",}),(["main":({"This function setups if the votes should be open or not.  If a vote isopen then you know who voted for each thing.",}),"param":({"open 1 for an open system 0 for closed",}),]),}),"set_vote_duration":({({"void",}),({({"int",}),"duration",}),(["main":({"This function is used to set the normal vote and election duration. It canbe overridden when calling add_vote. If it is not set and no duration isgiven in add_vote then the default value of DEFAULT_VOTE_DURATION is used.",}),"see":({"add_vote()",}),"param":({"duraction The number of seconds the vote should be open.",}),]),}),"list_elections":({({"int",}),({}),(["main":({"This function is called when a player types 'elections'. It lists theelections currently accepting candidates.",}),]),}),"end_vote":({({"void",}),({({"int",}),"which",}),(["main":({"This function is called to terminate a vote. It calls your completionaction.",}),"see":({"set_completion_action()",}),]),}),])
protected_functions (["save_room":({({"void",}),({}),(["main":({"Private function to save the rooms data file.",}),]),}),"add_our_election":({({"void",}),({({"string",}),"name",({"class","election",}),"data",}),(["main":({"This method adds in a election.",}),"param":({"name the name of the election to add","data the election data",}),]),}),"add_our_vote":({({"void",}),({({"int",}),"id",({"class","vote",}),"data",}),(["main":({"This method adds in a vote.",}),"param":({"id the id of the vote","data the vote data",}),]),}),"query_our_votes":({({"mapping",}),({}),(["main":({"This method is used to return the current votes.  This can be overriddenin higher functions to get the votes from somewhere else if nessessary.",}),"return":({"the votes",}),]),}),"query_our_elections":({({"mapping",}),({}),(["main":({"This method is used to return the current elections.  This can beoverridden in hgiher inherits to control things better.",}),"return":({"the elections",}),]),}),])
inherits ([])
main_docs (["main":({"Generalised voting room intended to be inherited into rooms in the mud thatwill setup the parameters and settings for votes.<p>The room does not inherantly support player initiated votes, however it isa fairly simple matter to add this to your own room and have your room addvotes when players initiate them.",}),"author":({"Ceres",}),])
define_docs (["DEFAULT_VOTE_DURATION":([]),])
includes (["/include/board.h":1522061544,])
class_docs (["election":({0,({({"candidates",({"mixed","*",}),}),({"closes",({"int",}),}),}),(["main":({" This class stores the essential information about an election during the setup phase. It is only used internally to the voting room.",}),]),}),"vote":({0,({({"type",({"string",}),}),({"desc",({"string",}),}),({"choices",({"string","*",}),}),({"votes",({"mixed","*",}),}),({"ending",({"int",}),}),({"voted",({"string","*",}),}),}),(["element":({"type used to setup vote types","desc the description of the vote",}),"main":({" This class stores the essential information about a vote. It is only used internally to the voting room.",}),]),}),])
file_name "/std/room/inherit/voting_room.c"
last_changed 1522061544
