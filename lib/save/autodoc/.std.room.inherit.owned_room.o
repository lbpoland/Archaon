#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_front_door":({({"string",}),({}),(["main":({"This method queries the current front door.",}),"return":({"the current front door",}),]),}),"query_save_file":({({"string",}),({}),(["main":({"This method returns the save file the owned room.",}),"return":({"the save file for the owned room",}),]),}),"set_front_door":({({"void",}),({({"string",}),"exit",}),(["main":({"This method sets the exit that is the front door.",}),"param":({"exit the exit to use as the front door",}),]),}),"is_allowed_in":({({"int",}),({({"string",}),"person",}),(["main":({"This method checks to see if they are allowed in.  Allow anyone inif the room is not locked.",}),"param":({"person the person to check",}),"return":({"1 if they are allowed in, 0 if not",}),]),}),"save_room":({({"void",}),({}),(["main":({"This method saves the room setup.",}),]),}),"set_owner":({({"void",}),({({"string",}),"owner",}),(["main":({"This method sets the owner of the room.",}),"param":({"owner the new owner of the room",}),]),}),"query_allowed":({({"string","*",}),({}),(["main":({"This method returns the current allowed list on the room.",}),"return":({"the current allowed array",}),]),}),"load_room":({({"void",}),({}),(["main":({"This method loads the room setup.",}),]),}),"is_allowed":({({"int",}),({({"string",}),"person",}),(["main":({"This method tests to see if the person in question is either the owneror is allowed.",}),"param":({"person the person to check",}),]),}),"set_save_file":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the save file for the owned room.",}),"param":({"save_file the name of the save file",}),]),}),"query_owner":({({"string",}),({}),(["main":({"This method returns the owner of the room.",}),"return":({"the owner of the room",}),]),}),])
protected_functions (["do_disallow":({({"int",}),({({"string",}),"name",}),(["main":({"This the main entry point for the disallow command.",}),"paran":({"name the name of the person to disallow",}),"return":({"1 on succes, 0 on failure",}),]),}),"set_allowed":({({"void",}),({({"string","*",}),"allowed",}),(["main":({"This method sets the allowed array for the room.",}),"param":({"allowed the new allowed array.",}),]),}),"do_throwout":({({"int",}),({({"object","*",}),"people",}),(["main":({"This is the main entry point for the throwout command.",}),"param":({"name the name of the person to throwout",}),"return":({"1 on success, 0 on failure",}),]),}),"do_allow":({({"int",}),({({"string",}),"name",}),(["main":({"This the main entry point for the allow command.",}),"paran":({"name the name of the person to allow",}),]),}),])
inherits ([])
main_docs (["main":({"This is an owned room inherit.  It allows controllable entrance andthings like 'allow' and 'throwout' and stuff.  Make sure the create onthis is called after the create in the basic room.",}),"started":({"30th of June",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/room.h":1522061544,])
class_docs ([])
file_name "/std/room/inherit/owned_room.c"
last_changed 1522061544
