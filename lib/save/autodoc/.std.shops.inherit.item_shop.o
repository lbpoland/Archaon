#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_list_function":({({"function",}),({}),(["main":({"This method returns the functionto be used when listing something.",}),"see":({"query_buy_function()","query_browse_function()","set_list_function()",}),"return":({"the function to be used when listing something",}),]),}),"query_steal_difficulty":({({"int",}),({({"int",}),"i",}),(["main":({"This method returns the steal difficulty of the room.",}),"return":({"the steal difficulty of the room",}),]),}),"set_buy_function":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to use when buying something fromthe shop.  The function will be called with two arguements, thefirst is the player, the second is the array of objects beingbought.",}),"see":({"set_list_function()","set_buy_function()","set_browse_function()","query_buy_function()",}),"param":({"func the function to set",}),]),}),"set_safe":({({"void",}),({({"object",}),"safe",}),(["main":({"This allows the creators to set their own safe. ",}),]),}),"do_banking":({({"void",}),({}),([]),}),"query_no_steal":({({"int",}),({}),(["main":({"Queries to see if the room is unstealable.",}),"see":({"set_no_steal()",}),"return":({"1 for making the room unstealable",}),]),}),"set_browse_function":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to use when browseing something fromthe shop.  The function will be called with two arguements, thefirst is the player, the second is the array of objects beingbrowsed.",}),"see":({"set_list_function()","set_buy_function()","set_browse_function()","query_browse_function()",}),"param":({"func the function to set",}),]),}),"query_shop":({({"int",}),({}),(["main":({"This method tells us if the shop is really a shop or not.",}),"return":({"1 always",}),]),}),"set_shoplift_response_handler":({({"void",}),({({"string",}),"word",}),([]),}),"set_max_float":({({"void",}),({({"int",}),"f",}),([]),}),"switch_extra_properties":({({"mixed","*",}),({}),([]),}),"set_sort_function":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets a function to be used to sort the inventory when itis printed out.",}),"see":({"query_sort_function()",}),"param":({"func the function to use to sort the inventory",}),]),}),"query_buy_function":({({"function",}),({}),(["main":({"This method returns the functionto be used when buying something.",}),"see":({"query_list_function()","query_browse_function()","set_buy_function()",}),"return":({"the function to be used when buying something",}),]),}),"query_shop_lift_items":({({"object","*",}),({({"string",}),"str",({"object",}),"player",}),(["main":({"This method returns the items which can potentially be shop liftedwith the passed in string.",}),"see":({"query_steal_difficulty()","query_shoplift_response_handler()",}),"param":({"str the name for the object to attempt to shop lift",}),"return":({"the array of matching objects",}),]),}),"query_shoplift_response_handler":({({"string",}),({}),([]),}),"query_max_float":({({"int",}),({}),([]),}),"query_safe":({({"object",}),({}),(["main":({"query_safe - This method returns the object currently being usedas a safe in the shop. ",}),]),}),"query_cost":({({"int",}),({({"object",}),"thing",}),(["main":({"This method returns the cost of the item shop object being talked about.",}),"param":({"thing the thing to get the cost of",}),"return":({"the cost of the thing",}),]),}),"set_steal_difficulty":({({"void",}),({({"int",}),"i",}),(["main":({"Sets the steal difficulty of the room.",}),"param":({"i the steal difficulty of the room",}),]),}),"query_sort_function":({({"function",}),({}),(["main":({"This method returns the function used to sort the inventory of the shop when it is printed out.",}),"see":({"set_sort_function()",}),"return":({"the function to use to sort the inventory",}),]),}),"shoplift_success":({({"object",}),({({"object",}),"ob",}),(["main":({"This method turns the objects into real objects (if that isnessessary, it is not with a normal shop).",}),"param":({"ob the object to turn into a normal object",}),]),}),"set_open_func":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to evaluate to detmine if the shop is open or not.",}),"see":({"query_open_func()","set_open_condition()",}),"param":({"func the function to evaluate for openness",}),]),}),"setup_safe":({({"void",}),({}),(["main":({"This method creates the safe in the room.  The safe is then used forvarious thief related activities.",}),]),}),"set_no_steal":({({"void",}),({({"int",}),"i",}),(["main":({"Sets this room as being unstealable.",}),"see":({"query_no_steal()",}),"param":({"i 1 if the room is unable to be stolen from",}),]),}),"set_list_function":({({"void",}),({({"function",}),"func",}),(["main":({"This method sets the function to use when listing something fromthe shop.  The function will be called with two arguements, thefirst is the player, the second is the array of objects beingbought.",}),"see":({"set_list_function()","set_buy_function()","set_browse_function()","query_list_function()",}),"param":({"func the function to set",}),]),}),"set_open_condition":({({"void",}),({({"function",}),"func",}),(["main":({"This method makes it compatible with the way that the open stuff works inthe normal shops.",}),"see":({"set_open_func()","query_open_func()",}),"param":({"func the function to evaluate for openness",}),]),}),"query_browse_function":({({"function",}),({}),(["main":({"This method returns the functionto be used when browseing something.",}),"see":({"query_list_function()","query_browse_function()","set_buy_function()",}),"return":({"the function to be used when browseing something",}),]),}),])
protected_functions ([])
inherits (["/std/shops/inherit/clone_on_demand":({}),"/std/shops/inherit/shop_event":({}),"/std/shops/inherit/open_shop":({}),])
main_docs (["main":({"Item shop inherit. ",}),"author":({"Pinkfish",}),"change":({"/17/03/00 Aquilo Separated the storing and duplicating ofitems which was moved to /std/shops/inherit/clone_on_demand",}),"see":({"/std/shops/inherit/clone_on_demand",}),])
define_docs (["DISPLAY":([]),"INFINITE_LEFT":([]),"TYPE":([]),"SHOP_INHERIT":([]),])
includes (["/include/move_failures.h":1522061544,"/include/shops/item_shop.h":1522061544,"/include/shops/bank.h":1522061544,"/include/armoury.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/shops/inherit/item_shop.c"
last_changed 1522061544
