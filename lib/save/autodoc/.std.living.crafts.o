#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_process":({({"string",}),({({"string",}),"word",}),(["main":({"This method finds the data for the spell of the specific name",}),"param":({"word the name of the spell to find data on",}),"return":({"the data for the spell",}),]),}),"remove_process":({({"int",}),({({"string",}),"name",}),(["main":({"This method removes the spell of the given name.",}),"param":({"name the name of the spell to remove",}),"return":({"1 on succes, 0 on failure",}),]),}),"add_process":({({"int",}),({({"string",}),"name",({"string",}),"ob",}),(["main":({"This method adds a process into the current process list.",}),"param":({"name the name of the process to add","ob the object the process is on",}),"return":({"1 on success, 0 on failure",}),]),}),"query_processes_nocase":({({"mapping",}),({}),(["main":({"This method returns the list of processes without any case issues.",}),"return":({"the list of processes without any case",}),]),}),"query_processes":({({"mapping",}),({}),([]),}),])
protected_functions (["reset_processes":({({"void",}),({}),(["main":({"This method resets all of the process data.",}),]),}),])
inherits ([])
main_docs (["main":({"This method returns the current bunch of processes for the object.",}),"return":({"the processes",}),])
define_docs ([])
includes ([])
class_docs ([])
file_name "/std/living/crafts.c"
last_changed 1522061544
