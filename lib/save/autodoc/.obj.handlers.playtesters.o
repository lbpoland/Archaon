#/obj/handlers/autodoc/autodoc_file.c
public_functions (["add_jump_point":({({"void",}),({({"string",}),"from",({"string",}),"to",}),(["main":({"This method adds a jump point to the list.",}),"param":({"from the from location","to the to location",}),]),}),"add_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the playtester to the array of current playtesters.  NOTE: This uses get_age_raw(), which will cause lag if called onlots of playerfiles.",}),"see":({"remove_playtester()","query_playtester()","add_senior_playtester()","valid_playtester()",}),"param":({"name the name of the player to add",}),"return":({"1 if successful, 0 on failure",}),]),}),"set_leave":({({"int",}),({({"string",}),"name",({"string",}),"reason",}),(["main":({"This marks a playtester as \"on leave\", logs it, with a reason.",}),]),}),"adjust_quota":({({"void",}),({({"string",}),"name",({"int",}),"amount",}),(["main":({"This adjusts the quota of a playtester.",}),"param":({"name The query_name() of the playtester.","amount A integer to adjust by.",}),]),}),"query_exec_access":({({"int",}),({({"string",}),"name",}),([]),}),"remove_jump_point":({({"void",}),({({"string",}),"from",({"string",}),"to",}),(["main":({"This method removes a specific jump point from the list.",}),"param":({"from the from location to remove","to the to location to remove",}),]),}),"remove_playtester":({({"int",}),({({"string",}),"name",({"string",}),"reason",}),(["main":({"This method will remove the playtester from the current list ofplay testers.",}),"see":({"add_playtester()","remove_senior_playtester()","query_playtester()",}),"param":({"name the name of the player to remove","reason the reason for the removal",}),"return":({"1 on success, 0 on failure",}),]),}),"get_age_uncached":({({"int",}),({({"string",}),"name",}),(["main":({"This method will update the playtesters' age if they are online and returnthe value from the cache.",}),"param":({"name the name of the playtester to check",}),"return":({"an integer representing the age of the playtester in seconds.Always >= 0.",}),]),}),"check_playtester":({({"int",}),({({}),"string",}),(["main":({"This method should never ever be used.  Use of this call is meant to bebroken.  Old code that uses check_playtester() probably meant to usequery_playtester().  Use this instead (or better, query_tester()).  If youwish to hire a playtester using this call (which is what it actually did!),please look at hire_playtester() and add_playtester().",}),"see":({"query_playtester()","query_tester()","hire_playtester()","add_playtester()",}),"return":({"Always returns 0.",}),]),}),"query_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method tests to see if the given name is a playtester.",}),"see":({"add_playtester()","remove_playtester()","query_senior_playtester()",}),"return":({"1 if they are a playtester, 0 if they are not.",}),]),}),"query_pt_data":({({"mixed",}),({({"string",}),"name",}),(["main":({"Returns the raw playtester data for processing!  DEPRECATED AND WILL NOTRETURN UP TO DATE INFORMATION!",}),"see":({"query_bugs()","query_months()",}),]),}),"remove_jump_point_from":({({"void",}),({({"string",}),"from",}),(["main":({"This method removes a specific jump point from the list.",}),"param":({"from the specific jump point to remove",}),]),}),"query_playtester_guilds":({({"mapping",}),({}),(["main":({"This method returns a mapping which contains which Guildsthe playtesters belong to.",}),"return":({"a lovely mapping",}),]),}),"hire_playtester":({({"int",}),({({"object",}),"thing",}),(["main":({"This method checks to make sure an object can be a playtester, and if so,adds them.",}),"param":({"thing The player object to add as a playtester",}),"return":({"1 on success, 0 on failure.",}),]),}),"reset_leave":({({"int",}),({({"string",}),"name",}),(["main":({"This marks a playtester as no longer \"on leave\", and logs it.",}),]),}),"query_jump_destination":({({"string","*",}),({({"string",}),"from",}),(["main":({"This method finds the destination from the start location.",}),"param":({"from the location to find the jump point too",}),]),}),"query_leave":({({"int",}),({({"string",}),"name",}),(["main":({"This tests whether a playtester is \"on leave\".",}),]),}),"query_months":({({"string","*",}),({}),(["main":({"This returns a sorted list of months, earliest month first.",}),]),}),"query_jump_points":({({"mapping",}),({}),(["main":({"This method returns the current mapping of jump points.",}),"return":({"the jump points",}),]),}),"query_playtesters":({({"string","*",}),({}),(["main":({"This method returns a list of the current play testers.  This isa list of string names in an array.",}),"return":({"the list of current playtesters",}),]),}),"check_playtesters":({({"void",}),({({"string","*",}),"who",}),(["main":({"This goes through the list of playtesters and checks to makesure they are all still valid.  It does so slowly, using a call_out untilit gets to the end.",}),"see":({"valid_playtester()","remove_playtester()",}),"param":({"who A string* of the query_name()'s of the playtesters to check.",}),]),}),"query_guilds":({({"mapping",}),({}),(["main":({"This method returns a mapping which contains which the playtesters mappedto their guild objects.",}),"return":({"a lovely mapping",}),]),}),"query_show_list_colour":({({"string",}),({}),(["main":({"This is a nice way of showing a list of the current play testers.It prints a table of the previous four and current months, with columnsof bug reports made and number of hours online spent.",}),]),}),"report_made":({({"void",}),({({"string",}),"name",({"string",}),"type",({"string",}),"file",({"string",}),"text",}),(["main":({"This is called when a playtester makes a bug report.",}),"param":({"name the name of the playtester","type the type of report","file the file the report is on","text the text associated with the report",}),]),}),"query_pt_exec":({({"int",}),({({"string",}),"name",}),([]),}),"remove_pt_exec":({({"int",}),({({"string",}),"name",}),(["main":({"This method removes the player as a playtester executive.  ",}),"see":({"add_pt_exec()","add_playtester()","query_pt_exec()",}),"param":({"name the name of the player to add",}),"return":({"1 on success, 0 on failure",}),]),}),"add_pt_exec":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the player as a playtester executive.  The playtesterneeds to already be added as a playtester before becoming aplaytester executive.",}),"see":({"remove_pt_exec()","add_playtester()","query_pt_exec()",}),"param":({"name the name of the player to add",}),"return":({"1 on success, 0 on failure",}),]),}),"add_senior_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the player as a senior playtester.  The playtesterneeds to already be added as a normal playtester before becoming asenior playtester.",}),"see":({"remove_senior_playtester()","add_playtester()","query_senior_playtester()",}),"param":({"name the name of the player to add",}),"return":({"1 on success, 0 on failure",}),]),}),"query_bugs":({({"mapping",}),({({"string",}),"name",}),(["main":({"This will return bug information for a given playtester.  The mappingreturned will map months to arrays of ints.  The format of these arrays is:({ bugs, online_that_month, age_at_end_of_month }).",}),"see":({"query_months()",}),]),}),"remove_senior_playtester":({({"int",}),({({"string",}),"name",({"string",}),"reason",}),(["main":({"This method adds the player as a senior playtester.  The playtesterneeds to already be added to become a senior playtester.",}),"see":({"add_senior_playtester()","remove_playtester()","query_senior_playtester()",}),"param":({"name the name of the player to remove",}),"return":({"1 on success, 0 on failure",}),]),}),"query_senior_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method determines if they are a senior playtester.",}),"see":({"add_senior_playtester()","remove_senior_playtester()","query_playtester()",}),"param":({"name the name of the playtester to check",}),"return":({"1 if they are a senior playteser, 0 if they are not",}),]),}),"get_age_cached":({({"int",}),({({"string",}),"name",}),(["main":({"This method will get the age of a playtester from this handlers' cache.",}),"param":({"name the name of the playtester to check",}),"return":({"an integer representing the age of the playtester inseconds.  Always >= 0.",}),]),}),"reason_invalid_playtester":({({"string",}),({({"string",}),"name",}),(["main":({"THis method returns a string reason why they are an invalid playtester.  NOTE: This uses the player_handler, which will cause lag ifcalled on lots of playerfiles.",}),"see":({"valid_playtester()",}),"param":({"name the player to check",}),"return":({"the string reason, 0 if none",}),]),}),"query_show_list":({({"string",}),({}),(["main":({"This is a nice way of showing a list of the current play testers.It prints a table of the previous four and current months, with columnsof bug reports made and number of hours online spent.",}),]),}),"valid_playtester":({({"int",}),({({"string",}),"name",}),(["main":({"This method determins if they are a valid playtester or not.  NOTE: Thisuses reason_invalid_playtester(), which will cause lag if called on lots ofplayerfiles.",}),"see":({"reason_invalid_playtester()",}),"param":({"name the name of the player to test",}),"return":({"1 if they are, 0 if they are not",}),]),}),"get_age_uncached_offline":({({"int",}),({({"string",}),"name",}),(["main":({"This method will update the playtesters' age from the player handler.NOTE: This causes the playerfile to be loaded if it hasn't been already -this will cause LOTS OF LAG if done on a log of playerfiles.",}),"param":({"name the name of the playtester to check",}),"return":({"an integer representing the age of the playtester in seconds.Always >= 0.",}),]),}),"query_tester":({({"int",}),({({"mixed",}),"person",}),(["main":({"This method tests to see if \"person\" is an authorized tester,i.e. a playtester, creator or has the \"test character\" property.",}),"see":({"query_playtester()",}),"param":({"person A string or object to determine tester status for.",}),"return":({"1 if they are a tester, 0 if they are not.",}),]),}),])
protected_functions (["check_playtesters_one":({({"void",}),({({"string",}),"name",}),(["main":({"This method determines if a playtester is valid or not, and if not willautomagically remove them (does not remove senior playtestersautomatically).  NOTE: This uses valid_playtester() andreason_invalid_playtester(), which will cause lag if called on lots ofplayerfiles.",}),"see":({"reason_invalid_playtester()",}),"param":({"name the name of the player to test",}),]),}),"get_age_raw":({({"int",}),({({"string",}),"name",}),(["main":({"This method finds the age of the playtester from the player handler.  NOTE:This causes the playerfile to be loaded if it hasn't been already - thiswill cause LOTS OF LAG if done on a lot of playerfiles.",}),"param":({"name the name of the playtester to check",}),"return":({"an integer representing the age of the playtester in seconds.Always >= 0.",}),]),}),])
inherits ([])
main_docs (["main":({"Keeps track of all the current playtesters.  This keeps track of allthe current playtesters.",}),])
define_docs (["SAVE_FILE":([]),"NORMAL_PLAYTESTER":([]),"BUG_SKIP":([]),"SENIOR_PLAYTESTER":([]),"LEVEL":([]),])
includes (["/include/project_management.h":1522061544,"/include/board.h":1522061544,"/include/player_handler.h":1522061544,"/include/login_handler.h":1522061544,"/include/login.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/obj/handlers/playtesters.c"
last_changed 1522061544
