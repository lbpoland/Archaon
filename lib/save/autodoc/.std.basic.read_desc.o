#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_max_size":({({"void",}),({({"int",}),"siz",}),(["main":({"This method sets the maximum amount of writing to be ableto be placed onto the object.",}),"see":({"query_max_size()","add_read_mess()",}),"param":({"siz the maximum size",}),]),}),"query_readable_message":({({"string",}),({({"object",}),"player",({"int",}),"ignore_labels",}),(["main":({"This method returns the read message for the object.  This is what shouldbe displayed to the player if they attempt to read this object.",}),"return":({"the read message, 0 if there is none",}),]),}),"query_cur_size":({({"int",}),({}),(["main":({"This method returns the current amount of wreiting size on theobject.",}),"see":({"set_max_size()","add_read_mess()","set_cur_size()",}),"return":({"the current amount of writing on the object",}),]),}),"query_read_short":({({"string",}),({({"object",}),"player",({"int",}),"ignore_labels",}),(["main":({"This method returns the short description to use with the reading.It will go: You read <read short>:<p>It will automaticly add a $name$ onto the end of the string for you.This will be replaced with the correct a/the short for the messagewhich is printed.",}),"param":({"player the player reading the message",}),]),}),"remove_read_mess":({({"int",}),({({"string",}),"str",({"string",}),"type",({"string",}),"lang",}),(["main":({"This method removes a piece of writing off the object.<p>If you know the actual message or the language or the type you can removethat message.<p>Using the type and or language is a very dodgy way of doing this.  Usinga combination is much better.<p>Any of the parameters set to a non-zero value will be used for the search.",}),"see":({"/obj/handlers/language->query_language_size()","add_read_mess()","query_read_mess()",}),"param":({"str the text string","type the type of the text","lang the language it is written in",}),"return":({"0 if the text was not found, 1 if it was",}),]),}),"query_read_mess":({({"mixed","*",}),({}),(["main":({"This method returns the current read messae array on the object.The returned array consists of an array of arrays.  The internalarray has 4 elements, the first is the text of the mnessagethe second is the type of the message,m the third is the languaeand the last element is the size of the wiritn .<p>The defines in the file /include/language.h should be usedfor the indexes into this array.",}),"see":({"add_read_mess()","set_max_size()","/include/language.h",}),"return":({"the read message array",}),]),}),"add_read_mess":({({"varargs","mixed",}),({({"mixed",}),"str",({"string",}),"type",({"string",}),"lang",({"int",}),"size",}),([]),}),"set_cur_size":({({"void",}),({({"int",}),"siz",}),(["main":({"This method sets the current amount of writing size onthe object.",}),"param":({"siz the new current size",}),"see":({"set_max_size()","add_read_mess()","query_cur_size()",}),]),}),"query_max_size":({({"int",}),({}),(["main":({"This method returns the current maximum size of the object.",}),"see":({"set_max_size()","add_read_mess()",}),"return":({"the current maximum size",}),]),}),])
protected_functions ([])
inherits (["/std/basic/desc":({}),])
main_docs (["main":({"This method keeps track of all the messages on the object forreading etc.  Keeps track of the language, the text and thesize.",}),"author":({"Pinkfish",}),])
define_docs ([])
includes (["/include/language.h":1522061544,"/include/nroff.h":1522061544,])
class_docs ([])
file_name "/std/basic/read_desc.c"
last_changed 1522061544
