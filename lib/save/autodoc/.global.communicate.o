#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_current_language":({({"string",}),({}),(["main":({"This method returns the language the person is currently speaking.",}),"see":({"set_language()",}),"return":({"the spoken language",}),]),}),"set_sp":({({"int",}),({({"int",}),"number",}),(["main":({"This method sets the current social points for the player",}),"param":({"number the number of social points",}),]),}),"query_default_language":({({"string",}),({}),(["main":({"This method returns the default language to use for the person.",}),"return":({"the default language",}),]),}),"query_tell_reply_list":({({"mixed",}),({}),(["main":({"This method returns the players tell reply list.",}),"return":({"the tell reply list.",}),]),}),"add_language":({({"void",}),({({"string",}),"lang",}),(["main":({"This method will add a language to a player/npc.  It is used to make surethat a player or npc has a specific language.",}),"param":({"lang the language to add",}),]),}),"query_real_max_sp":({({"int",}),({}),([]),}),"query_max_sp":({({"int",}),({}),(["main":({"This returns the maximum number of social points available.",}),"return":({"the maximum social points",}),]),}),"comm_event":({({"void",}),({({"mixed",}),"thing",({"string",}),"type",({"string",}),"start",({"string",}),"rest",({"string",}),"lang",({"string",}),"accent",}),([]),}),"query_ignored_by":({({"object","*",}),({({"object","*",}),"people",}),(["main":({"This method returns the people in the array who are ignoring thisplayer.",}),"see":({"query_ignoring()",}),"param":({"people the people to check to see for ignoring",}),"return":({"the array of people that are ignoring this player",}),]),}),"do_converse":({({"void",}),({({"string",}),"str",}),([]),}),"set_max_sp":({({"int",}),({({"int",}),"number",}),(["main":({"This method sets the maximum social points.",}),"param":({"number the maxmum social points",}),"return":({"the new maximum social points",}),]),}),"set_tell_reply_list":({({"int",}),({({"mixed",}),"list",}),(["main":({"This method sets the players tell reply list.",}),"param":({"list the reply list.","tim the timeout",}),]),}),"set_default_language":({({"void",}),({({"string",}),"def",}),(["main":({"This method sets the default language to use for the person.  The defaultlanguage is their native tongue, so things in this language show asnot being a special language.",}),"param":({"def the default language",}),]),}),"set_language":({({"int",}),({({"string",}),"str",}),(["main":({"This method sets the language we are currently speaking.",}),"see":({"query_current_language()",}),"param":({"str the language we are current speaking",}),]),}),"query_ignoring":({({"object","*",}),({({"object","*",}),"people",}),(["main":({"This method returns the people in the array who this player is currentlyignoring.",}),"see":({"query_ignored_by()",}),"param":({"people the people to check to see if they are being ignored",}),"return":({"the people who are being ignored from the array",}),]),}),"set_mangle_accent":({({"void",}),({({"int",}),"flag",}),(["main":({"This method sets the mangle accents flag.  If this is set to 1 then theaccents will be mangled in the speech text, if it is set to 0 thenthe accent will just be added to the say string instead.",}),"param":({"flag the new value of the flag",}),]),}),"do_whisper":({({"void",}),({({"object",}),"ob",({"string",}),"event_type",({"string",}),"start",({"string",}),"type",({"string",}),"words",({"object","*",}),"others",({"string",}),"lang",({"object",}),"me",({"string",}),"accent",}),([]),}),"comm_event_to":({({"void",}),({({"object",}),"ob",({"string",}),"event_type",({"string",}),"start",({"string",}),"type",({"string",}),"words",({"object","*",}),"others",({"string",}),"lang",({"object",}),"me",({"string",}),"accent",}),([]),}),"adjust_max_sp":({({"int",}),({({"int",}),"number",}),(["main":({"This method adjusts the current maximum social points.",}),"param":({"number the amount to adjust it by",}),"return":({"the new maximum social points",}),]),}),"adjust_sp":({({"int",}),({({"int",}),"number",}),(["main":({"This method changes the current number of social points",}),"param":({"number the amount to change the social points by",}),"return":({"the current social points",}),]),}),"query_mangle_accent":({({"int",}),({}),(["main":({"This method returns the mangle accents flag.  If this is set to 1 then theaccents will be mangled in the speech text, if it is set to 0 thenthe accent will just be added to the say string instead.",}),"return":({"the mangle accent flag",}),]),}),"communicate_commands":({({"void",}),({}),([]),}),"query_sp":({({"int",}),({}),(["main":({"This method returns the current social points.",}),"return":({"the current social points",}),]),}),])
protected_functions (["do_wombat_repeat":({({"int",}),({({"string",}),"str",({"string",}),"com",}),([]),}),])
inherits ([])
main_docs (["main":({"The communication handling code for the player object.  Controls allthe basic channels and basic communication stuff.",}),"author":({"Pinkfish",}),])
define_docs (["TELL_CMD":([]),"REMOTE_CMD":([]),])
includes (["/include/player.h":1522061544,"/include/language.h":1522061544,"/include/drinks.h":1522061544,"/include/library.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["language_info":({0,({({"cur_lang",({"string",}),}),({"mangle_accent",({"int",}),}),({"default_lang",({"string",}),}),}),([]),}),])
file_name "/global/communicate.c"
last_changed 1522061544
