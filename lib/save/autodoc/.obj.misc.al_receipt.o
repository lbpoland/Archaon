#/obj/handlers/autodoc/autodoc_file.c
public_functions (["set_object":({({"void",}),({({"string",}),"s",}),(["main":({"Sets the path to the object.  The path of the object for the recipt towork with.",}),"param":({"s the object path",}),]),}),"query_static_save":({({"mixed",}),({}),(["main":({"This method returns the save information for the object.  THis is notjust the static save information, it is an array of two elements.  Thefirst is the static save information and the second is the dynamicsave information.",}),"return":({"the save information",}),]),}),"set_virtname":({({"void",}),({({"string",}),"s",}),(["main":({"This method is identical to set_virtobname()",}),"param":({"s the virtual object name",}),]),}),"setup_receipt":({({"void",}),({({"object",}),"ob",}),(["main":({"This method sets up the receipt for the specified object.",}),"param":({"ob the object to setup the reciept for",}),]),}),"query_virt_obname":({({"string",}),({}),(["main":({"This method returns the virtual object path name of the item.",}),"return":({"the virtual object name",}),]),}),"set_virtobname":({({"void",}),({({"string",}),"s",}),(["main":({"This method sets the virtual object name of the item.",}),"param":({"s the virtual object name",}),]),}),"query_timestamp":({({"int",}),({}),(["main":({"This method returns the timestamp of the reciept.  This is the time thereceipt was created.",}),"return":({"the timestamp",}),]),}),"move":({({"varargs","int",}),({({"mixed",}),"dest",({"string",}),"messin",({"string",}),"messout",}),([]),}),"query_obpath":({({"string",}),({}),(["main":({"This method returns the path of the object.",}),"return":({"the path of the object",}),]),}),"query_obname":({({"string",}),({}),(["main":({"This method returns the name of the object.",}),"return":({"the name of the object",}),]),}),"being_sold":({({"void",}),({}),(["main":({"When the item is sold, kill ourselves.",}),]),}),"set_static_save":({({"void",}),({({"mixed",}),"m",}),(["main":({"This method sets the save information for the file.  It actually setsboth the static and dynamic information.  This assumes it is passedan array of two elements, the first is the static save information andthe second is the dynamic save information.",}),"param":({"m the data as defined above",}),]),}),"set_obpath":({({"void",}),({({"string",}),"s",}),(["main":({"This method is identical to set_object()",}),"param":({"s the object path",}),]),}),"set_obname":({({"void",}),({({"string",}),"s",}),([]),}),"query_missing_item_receipt":({({"int",}),({}),(["main":({"This will return 1 if the item is a missing item receipt.",}),"return":({"1 if the item is a missing item receipt",}),]),}),])
protected_functions ([])
inherits (["/std/object":({}),])
main_docs (["main":({"Sets the name of the object.  This will be used so the item reciptcan be identified.",}),"param":({"s the object name",}),])
define_docs ([])
includes (["/include/virtual.h":1522061544,"/include/move_failures.h":1522061544,"/include/player.h":1522061544,"/include/armoury.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs ([])
file_name "/obj/misc/al_receipt.c"
last_changed 1522061544
