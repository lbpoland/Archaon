#/obj/handlers/autodoc/autodoc_file.c
public_functions (["finish_work":({({"void",}),({({"string",}),"surface",({"string",}),"long",({"object",}),"where",}),(["main":({"Called by do_ask(), this finishes decorating the surface",}),"see":({"do_ask",}),"param":({"surface the surface to be decorated","long the long description of the decorated surface, eg. carpeted   with plush green carpet",}),]),}),"do_list":({({"int",}),({}),(["main":({"Causes the surface decorator to give a list of the surfaces he decoratesand what he can decorate them with, or says that he has no stock.",}),]),}),"query_employer":({({"object",}),({}),([]),}),"query_work_time":({({"int",}),({}),([]),}),"do_ask":({({"int",}),({({"string",}),"surface",({"string",}),"decor",}),(["main":({"Does all the necessary checks to see if he can decorate the requested surface with the requested decor, handles payment and starts the work. ",}),"see":({"finish_work",}),"param":({"surface the surface to be decorated ","decor the short name of the decor to be used, eg. green carpet",}),]),}),"do_hire":({({"int",}),({}),(["main":({"Sets him to follow the player and marks that player as his current employer",}),]),}),"query_under_construction_mess":({({"string",}),({}),([]),}),"remove_fitted_surface":({({"void",}),({({"string",}),"short",}),(["main":({"Removes a decoration whose short matches the argument given",}),"param":({"short the short description of the surface to remove",}),]),}),"set_responses":({({"void",}),({({"string","*",}),"the_responses",}),(["main":({"Sets custom responses.  The array size must match the existing one or the  call will be disregarded.",}),"param":({"the_responses the array of responses to be used",}),]),}),"remove_all_fitted_surfaces":({({"void",}),({}),(["main":({"Removes all decorations from the npc's stock list",}),]),}),"query_allowed_domains":({({"string","*",}),({}),([]),}),"add_allowed_domain":({({"void",}),({({"string",}),"domain",}),(["main":({"Adds a string to the list of domains to be checked by the npc when it moves to see if it's allowed to be in that room, eg. \"/d/guilds\" or \"Bes_Pelargic\"",}),"param":({"domain the name of the domain to be added",}),]),}),"set_under_construction_mess":({({"void",}),({({"string",}),"mess",}),(["main":({"Sets what a surface looks like while the npc is working on it.",}),"param":({"mess the description to replace the surface's appearance in the room while it is being worked on",}),]),}),"set_employer":({({"void",}),({({"object",}),"player",}),(["main":({"Sets the current player employer",}),"param":({"player the player object currently using the npc",}),]),}),"query_fitted_surfaces":({({"mapping",}),({}),([]),}),"add_allowed_surface":({({"void",}),({({"string",}),"surface",}),(["main":({"Allows the npc to work on a specific surface in a room, eg. floor, ceilingIf the argument passed is \"wall\", they will be able to work on all walls,eg. north wall, east wall, south wall, etc.",}),"param":({"surface the name of the surface to be added",}),]),}),"query_responses":({({"string","*",}),({}),([]),}),"add_fitted_surface":({({"void",}),({({"string",}),"short",({"string",}),"long",({"int",}),"cost",}),(["main":({"Adds a new decoration that the npc can use to his stock list",}),"param":({"short the short description used in the stock list and for ordering","long the long description actually used for the new decoration in the room","cost the cost of installing this decoration",}),]),}),"check_domain":({({"void",}),({}),(["main":({"Called every time the npc moves.  This function checks that the file name of its new environment contains at least one of the allowed domains.  Ifit does, it will store the current room as being its last good location.  Otherwise, it will move it to its last good location.",}),"see":({"go_back",}),]),}),"set_work_time":({({"void",}),({({"int",}),"time",}),(["main":({"Sets the time it takes to finish the work.",}),"param":({"time the time (in seconds) taken to complete the work",}),]),}),"query_allowed_surfaces":({({"string","*",}),({}),([]),}),])
protected_functions ([])
inherits (["/obj/monster":({}),])
main_docs (["main":({" This is a inheritable for playerhousing surface decorating npcs.  With this you can add carpets, wood panelling, beams or anything your  little heart desires to npcs that will then go out and make the world a     prettier place. If you want to add a surface to an npc that he will be able to  decorate, use eg:  add_allowed_surface( \"floor\" );     If you want to add a type of decoration that the npc can install, use eg:  add_fitted_surface( \"plush blue carpet\", \"covered with plush \" \"blue carpet\", <cost> ); @September 3rd, 2002 @authors Una and Dasquian",}),])
define_docs ([])
includes (["/include/shops/bank.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/npc/surface_decorator.c"
last_changed 1522061544
