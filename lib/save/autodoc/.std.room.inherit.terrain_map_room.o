#/obj/handlers/autodoc/autodoc_file.c
public_functions (["receive_message":({({"void",}),({({"string",}),"mess_class",({"string",}),"message",}),(["main":({"Receive messages from the handler.",}),"param":({"message the actual message",}),"Param":({"mess_class the class of the message",}),]),}),"setup_room":({({"void",}),({}),(["main":({"This needs to be called by the upper inherit to set us to womble.",}),]),}),"query_coords":({({"mixed","*",}),({}),(["main":({"This method returns the co-ordinates of this room.",}),]),}),"set_coords":({({"void",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"Setup the main coordinates for this room. Please note that theseare not DW coords, but local ones for the use of the handler. ",}),]),}),"do_outside_chats":({({"int",}),({}),(["main":({"Do we *want* outside and feature chats? Override if you want to use 1 means yes.",}),]),}),"query_map_handler":({({"object",}),({}),(["main":({"This method returns the map handler associated with this room.",}),]),}),"can_enter_from":({({"int",}),({({"string",}),"type",}),(["main":({"Can we enter from rooms of type x? Override if you want to use it - 1 means yes.",}),"param":({"type the type of room to check",}),]),}),"reset_handler":({({"void",}),({}),(["main":({"Added for convenience. BEWARE! When called, this will dest every single room in this terrain, dumping everything in the void. When I think ofa decent way to handle this, I will.",}),]),}),"do_an_outside_chat":({({"void",}),({}),(["main":({"This method will print an outside chat.",}),]),}),"set_map_handler":({({"void",}),({({"mixed",}),"handler",}),(["main":({"This sets the map handler, OBSOLETE. This should be done by overriding query_map_handler()in the main inherited file. It doesn't get set fast enough otherwise.",}),"param":({"handler the new handler",}),]),}),"query_feature_range":({({"int",}),({({"string",}),"title",}),(["main":({"This figures out the range to the specified feature.",}),"param":({"title the name of the feature",}),]),}),"can_exit_to":({({"int",}),({({"string",}),"type",}),(["main":({"Can we go to rooms of type x? Override if you want to use it - 1 means yes.",}),"param":({"type the type of room to check",}),]),}),"query_features":({({"mapping",}),({}),(["main":({"This method returns all of our features.",}),]),}),"set_extra_long":({({"void",}),({({"string",}),"extra",}),(["main":({"Called by the handler to set our extra_look strings.",}),]),}),"do_gocoords":({({"int",}),({({"int",}),"x",({"int",}),"y",}),(["main":({"This is a command used by creators to go to specific locations in the grid.",}),]),}),"do_a_feature_chat":({({"void",}),({}),(["main":({"This makes one of the features in the terrain send us a chat.",}),]),}),"setup_room_chat":({({"varargs","void",}),({({"mixed","*",}),"args",({"object",}),"chatobj",}),(["main":({"Setup the feature chats and basic room chats.",}),]),}),"set_installed":({({"void",}),({}),([]),}),"can_view_feature":({({"int",}),({({"string",}),"type",}),(["main":({"Checks to see if the feature can be viewed or not.",}),"param":({"type the type of the feature",}),"return":({"1 if it can be seen",}),]),}),"query_feature_item_desc":({({"string",}),({({"string",}),"title",}),(["main":({"This method returns the item description for the feature.",}),"param":({"title the feature to look up",}),"return":({"the description of the feature",}),]),}),"remove_feature":({({"void",}),({({"string",}),"title",}),(["main":({"Removes the specified feature.",}),"param":({"title the feature to remove",}),]),}),"add_feature":({({"void",}),({({"string",}),"title",({"string",}),"direc",({"int",}),"range",({"mixed",}),"items",}),(["main":({"Add a new visible feature to the room, so it knows to query the handlerfor descriptions and so on. The zone info is needed as an easy way forthe handler to get access to which rooms see which features. ",}),"param":({"title the title of the feature","direc the direction of the feature","range the range to the feature","items any add_items associated with the feature",}),]),}),"query_installed":({({"int",}),({}),([]),}),"set_outside_types":({({"void",}),({({"string",}),"types",}),([]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"The overall room inherit for a 'mapped area'all mapped area rooms should inherit from this.<p>MUST OVERRIDE:<p>query_map_file()",}),"started":({"March 2001",}),"author":({" Dek",}),])
define_docs ([])
includes (["/include/player_handler.h":1522061544,"/include/login_handler.h":1522061544,"/include/room.h":1522061544,])
class_docs ([])
file_name "/std/room/inherit/terrain_map_room.c"
last_changed 1522061544
