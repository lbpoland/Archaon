#/obj/handlers/autodoc/autodoc_file.c
public_functions (["query_responses":({({"string","*",}),({}),(["main":({"This queries the responses of the NPC.",}),"return":({"an array of response-strings",}),]),}),"query_killers":({({"string","*",}),({}),(["main":({"This queries the killers of the NPC.",}),"return":({"an array listing the killers' names",}),]),}),"query_last_room":({({"string",}),({}),(["main":({"This queries the last valid room the NPC was in.",}),"return":({"the basename of the last room",}),]),}),"move_recording":({({"void",}),({}),(["main":({"This function gets called after every move of the NPC and records it for apotential return.  It should not be called manually.",}),]),}),"free_for_hire":({({"void",}),({}),(["main":({"Use this function if something went wrong and the NPC does not react to theclient/new clients anymore.",}),]),}),"confirmation":({({"void",}),({({"string",}),"response",({"object",}),"player",}),(["main":({"This function is used to evaluate the client's response to the \"is this thedoor\"-question.",}),"param":({"response the response the player entered","player the player doing the input",}),]),}),"query_domain":({({"string",}),({}),(["main":({"This queries the NPC's domain.",}),"return":({"the first 6 chars of the domain.",}),]),}),"query_client":({({"string",}),({}),(["main":({"This queries the client's name.",}),"return":({"the name of the client or 0 for no client",}),]),}),])
protected_functions (["set_domain":({({"int",}),({({"string",}),"domain",}),(["main":({"This sets the domain the NPC is restricted to.",}),"param":({"domain the first 6 letters of the domain-path, ie \"/d/am/\"",}),"return":({"1 on success, 0 on failure",}),]),}),"set_responses":({({"int",}),({({"string","*",}),"responses",}),(["main":({"This function sets the NPC's responses for the various commands.  If notused generic answers will be used.  Mind that you cannot enter only a fewresponses.  It's all or nothing.  The array should be like this:1) response to failed confirmation2) response for not hired by that player3) response for trying to enter another player's house4) response for successful opening of the door5) response for already hired by other player6) response for not paid yet7) response for attempt to hire8) response for already paid9) response for not enough money to pay10) response for cannot find specified exit11) response for successful payment (please include 'ask' hint)12) response for not leaving the domain13) response for already hired by that player",}),"param":({"responses an array with the responses, as explained above",}),"return":({"1 on success, 0 on failure",}),]),}),"set_price":({({"int",}),({({"int",}),"price",}),(["main":({"This function sets the base price for unlocking a door.  If the savefile isset, a killer will be charged the double price.",}),"param":({"price the base-price in money-units",}),"return":({"1 on success, 0 on failure",}),]),}),"set_savefile":({({"int",}),({({"string",}),"file",}),(["main":({"Use this function to set the file where the killers of the NPC are stored,if you want to charge the killers the double price for opening their house.",}),"param":({"file the name of the file to save to",}),"return":({"1 on success, 0 on failure",}),]),}),"set_currency_region":({({"int",}),({({"string",}),"region",}),(["main":({"This function sets the NPCs region for determining the currency.",}),"param":({"region the region to use",}),"return":({"1 on success, 0 on failure",}),]),}),])
inherits (["/obj/monster":({}),])
main_docs (["main":({"-- Inheritable for playerhousing locksmiths --An NPC using this inherit is able to unlock the doors to playerhouses andcommercial properties when prompted to do so by the rightful owner.-- How such an NPC works from a player's point of view --- A player can \"hire\" the npc if he wants a door of his house opened.- He then has to \"pay\" (*) the amount the npc demands (if that player killed  the npc before, the base price is doubled).  He has 120 seconds to do so.- After that happens, the npc will follow the player until the player  \"asks\"s him to opens an exit door.- Then player is prompted to enter [y]es [n]o\".  If the player confirms and  the handler doesn't return this as well, the npc complains and walks off  (keeping the money, of course).  Otherwise it unlocks the door and then  leaves.(*) Giving the money to the npc does not work, it'll return it.The same procedure applies if the player wants all doors opened.All attempts to hire a locksmith with the result of that action are loggedin the file defined in LOGIn case of problems you can always try to:1) look at the log to see if the player in question hired and payed the npc2) call query_client() on the npc3) call free_for_hire() on the npc4) dest and re-load the npc",}),"started":({"Nov. 2001",}),"author":({"Wirble",}),"example":({"inherit \"/std/npc/types/locksmith\";void setup() {    // basic npc-setup    set_savefile(SAVE + \"glodson_killers\");    set_price(20000); // 50 $AM    set_currency_region(\"Ankh-Morpork\");    set_domain(\"/d/am/\");}",}),])
define_docs (["LOGGING":([]),"LOG":([]),])
includes (["/include/shops/bank.h":1522061544,"/include/armoury.h":1522061544,"/include/money.h":1522061544,])
class_docs ([])
file_name "/std/npc/locksmith.c"
last_changed 1522061544
