#/obj/handlers/autodoc/autodoc_file.c
public_functions (["acknowledge_alert":({({"int",}),({({"object",}),"creator",({"string",}),"player",({"string",}),"event",({"int",}),"idx",({"string",}),"update",({"mixed","*",}),"extra",}),([]),}),"query_name":({({"string",}),({}),([]),}),"query_alt_of":({({"string",}),({({"string",}),"player",}),(["main":({"Return which player this player is an alt of (if any).param player A players namereturn the name of the players main alt.",}),]),}),"decrement_alerts_for":({({"int",}),({({"string",}),"player",}),(["main":({"",}),"param":({"player The name of the player.",}),"return":({"The updated number of alerts for that player.",}),]),}),"query_dossier":({({"varargs","string",}),({({"object",}),"source",({"string",}),"player",({"int",}),"lastn",}),(["main":({"Print all entries from the given player's dossier.",}),"param":({"source the creator who requested the report","player the name of the player",}),]),}),"player_remove":({({"void",}),({({"string",}),"player",}),(["main":({"Remove the player's data file.",}),"param":({"player the name of the player",}),]),}),"query_access_history":({({"string",}),({({"string",}),"player",}),([]),}),"stats":({({"mixed","*",}),({}),([]),}),"query_event":({({"string",}),({({"object",}),"source",({"string",}),"player",({"string",}),"event",}),(["main":({"Print all entries from the given player's dossier with the given eventtype.",}),"param":({"source the creator who requested the report","player the name of the player","event the name of the event",}),]),}),"add_entry":({({"int",}),({({"object",}),"creator",({"string",}),"player",({"string",}),"event",({"string",}),"comment",({"mixed","*",}),"extra",}),(["main":({"Add a new entry to the player's database.",}),"param":({"source the creator or another object trying to add the event","player the name of the player","event event the name of the event to be added","comment arbitrary comment text (more than one line is OK)","extra arbitrary array of arbitrary objects (can be 0)",}),"return":({"nonzero if the entry was successfully added to the database",}),]),}),"clear_alerts_for":({({"void",}),({({"string",}),"player",}),(["main":({"",}),"param":({"player The name of the player.",}),]),}),"increment_alerts_for":({({"int",}),({({"string",}),"player",}),(["main":({"",}),"param":({"player The name of the player.",}),"return":({"The updated number of alerts for that player.",}),]),}),"add_alt":({({"string",}),({({"object",}),"creator",({"string",}),"player",({"string",}),"alt",}),(["main":({"Add an alt character name to this player's dossier. This function succeedsif both characters are not \"main\", or only one if them is \"main\". Bothplayers will have their dossiers modified.",}),"param":({"player the name of the player","alts the names of the alt characters to add",}),"return":({"a string describing the outcome of the function call",}),]),}),"save_handler_data":({({"void",}),({}),([]),}),"query_online_alerts":({({"string","*",}),({}),(["main":({"",}),"return":({"A list of the currently-online players who have unacknowledged alerts",}),]),}),"query_alerts":({({"mapping",}),({}),(["main":({" @return The alerts mapping.",}),]),}),"query_timeouts":({({"mapping",}),({}),([]),}),"query_source_ok":({({"int",}),({({"string",}),"event",({"string",}),"source",}),(["main":({"Check if the event has come from the valid source.",}),"param":({"event the name of the event","source the object trying to add the event",}),"return":({"nonzero if the event can be added by the given source",}),]),}),"load_handler_data":({({"void",}),({}),([]),}),"query_alts":({({"string","*",}),({({"string",}),"player",}),([]),}),"delete_alt":({({"string",}),({({"object",}),"creator",({"string",}),"player",({"string",}),"alt",}),(["main":({"Delete an alt character name from this player's dossier. Note that bothplayers have their dossier modified.",}),"param":({"player the name of the player","alts the name of the alt characters to delete",}),"return":({"a string describing the outcome of the function call",}),]),}),"query_events":({({"string","*",}),({}),(["main":({"Answer the list of all possible events.",}),"return":({"array of all event types recognized by the playerinfo handler",}),]),}),"query_interleaved":({({"string",}),({({"object",}),"source",({"string",}),"player",({"string",}),"event",}),(["main":({"Print all entries for this player and all alts, in chronological order.",}),"param":({"source the creator who requested the report","player the name of the player",}),]),}),"is_alert":({({"int",}),({({"string",}),"player",({"int",}),"idx",}),(["main":({"",}),"param":({"player The name of the player","idx The number of the event to check for alert status.",}),"return":({"0 if the event is not an alert, 1 if it is.",}),]),}),"query_alerts_for":({({"int",}),({({"string",}),"player",}),(["main":({"",}),"param":({"player Name of the player to query",}),"return":({"The number of alerts for that player",}),]),}),"reregister_parent":({({"void",}),({({"string",}),"player",}),([]),}),"delete_entry":({({"int",}),({({"object",}),"creator",({"string",}),"player",({"string",}),"event",({"int",}),"n",}),(["main":({"Delete an entry from the playerinfo database.",}),"param":({"source the creator or another object trying to add the event","player the name of the player","event the name of the event of the entry being deleted","n the index of the entry being deleted",}),"return":({"nonzero if the entry was successfully deleted",}),]),}),])
protected_functions (["query_deleter_ok":({({"int",}),({({"string",}),"event",({"object",}),"deleter",}),(["main":({"Check if the request to delete an event came from the valid source.",}),"param":({"event the name of the event","remover the object that tries to remove the event",}),]),}),])
inherits (["/std/object":({"nosave",}),])
main_docs (["main":({"Playerinfo database handler.This handler collects all the fascinating information about players andtheir sins. At the moment, the following events are supported:replace (all replacements, added by Presto's wand),gag (gagging and ungagging, added by the gagger),suspend (player suspension, added by the \"suspend\" command),meteor (meteoring a player, added by the \"meteor\" command),multiplay (various events added by the multiplayer handler),harassment (comments about cases of harassment, added via 'addevent'),misc (misc. comments, added via 'addevent'),cheat (currently unused) *The \"replace\" and \"multiplay\" events are debounced (merged). In addition,the \"replace\" events expire in 30 days.",}),"author":({"Fiona",}),])
define_docs (["CL_HEADER":([]),"PATRICIAN_PT":([]),"LIAISON_PEN":([]),"LIAISON_WAND":([]),"BANISH_COMMAND":([]),"PRISON":([]),"GAG":([]),"SUSPENDER":([]),"ADDALT_COMMAND":([]),"NO_ACCESS_LOG":([]),"UNGAG":([]),"ONE_WEEK":([]),"SHOWHELP_COMMAND":([]),"LIAISON_INTERVIEW":([]),"ADD_COMMAND":([]),"DELALT_COMMAND":([]),"DEBOUNCE_PERIOD":([]),"FAIRY_GODMOTHER":([]),"SAVE_FILE":([]),"TIMEOUT_PERIOD":([]),"REARRANGE_COMMAND":([]),"DELETE_COMMAND":([]),"CL_RESET":([]),"PATRICIAN_COMPLAIN":([]),"FRY":([]),"SAVE_DIR":([]),"CL_EVENT":([]),"REFRESH_HANDLER":([]),"LIAISON_SCEPTRE":([]),"CL_CREATOR":([]),"CACHE_SIZE":([]),"REPORT_COMMAND":([]),"FETCH_COMMAND":([]),"PATRICIAN_PALACE":([]),"METEOR":([]),"RUN_HANDLER":([]),"MULTIPLAY":([]),"FAMILY_COMMAND":([]),])
includes (["/include/applications.h":1522061544,"/include/refresh.h":1522061544,"/include/player_handler.h":1522061544,"/include/playerinfo.h":1522061544,"/include/newbiehelpers.h":1522061544,])
class_docs (["source":({0,({({"add",({"string","*",}),}),({"delete",({"string","*",}),}),}),([]),}),])
file_name "/obj/handlers/playerinfo.c"
last_changed 1522061544
