#/obj/handlers/autodoc/autodoc_file.c
public_functions (["enter_state":({({"void",}),({({"string",}),"new_state",}),([]),}),"quit":({({"mixed",}),({({"string",}),"event",}),([]),}),"main_random_name_menu":({({"mixed",}),({({"string",}),"event",}),([]),}),"debug_log":({({"void",}),({({"string",}),"fmt",({"mixed","args",}),"...",}),([]),}),"query_delete_player_file_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the path to the deleted player file.This is the deleted player files actual normal location, it was written toallow moving the player files aruond easier.",}),"see":({"test_user()","query_delete_player_file_name()",}),"param":({"name the name of hte player whose file to find",}),]),}),"query_player_file_name":({({"string",}),({({"string",}),"name",}),(["main":({"This method returns the path to the player file.This is the player files actual normal location, it was written toallow moving the player files aruond easier.",}),"see":({"test_user()","query_delete_player_file_name()",}),"param":({"name the name of hte player whose file to find",}),]),}),"query_login_ob":({({"int",}),({}),(["main":({"This method determines if the object is a login object.",}),"return":({"always returns 1",}),]),}),])
protected_functions ([])
inherits ([])
main_docs (["main":({"The main login object.",}),])
define_docs (["THROWOUT_TIME":([]),"LOGIN_SCRIPT":([]),"RL_PT":([]),"ADMIN_EMAIL":([]),"MAX_LEN":([]),"CLUB_HANDLER":([]),"READ_INPUT":([]),"MIN_LEN":([]),"FREE_DOMAINS":([]),"FILE_PATH":([]),"RL_CRE":([]),"RL_NONEW":([]),"BASTARDS":([]),"QUOTE_HANDLER":([]),"RL_NORMAL":([]),"TIMEOUT_TIME":([]),"MIN_RESET_TIME":([]),"SLEEP":([]),"MULTIPLAYER":([]),"LIVING":([]),])
includes (["/include/mail.h":1522061544,"/include/data.h":1522061544,"/include/access.h":1522061544,"/include/player_handler.h":1522061544,"/include/playerinfo.h":1522061544,"/include/random_names.h":1522061544,"/include/login_handler.h":1522061544,"/include/login.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["state":({0,({({"name",({"string",}),}),({"action",({"string",}),}),({"write",({"string",}),}),({"noecho",({"int",}),}),({"events",({"mapping",}),}),}),(["main":({"This structure holds a single state. A state has a name,an action or write and a set of events. <br>The name is used to identify the state and must be unique within thestate table. An action is a function to call while a write is astring or file to be written to the screen.  The events mappingis made of event and new-state. The event is the trigger andnew-state is the new state the machine should enter.<p>An event is a string of the form \"type-data\" where type is either\"input\" or \"return\" indicating user input or the return from anaction function. Thus \"return-ok\" would be triggered if the actionfunction in this state returned \"ok\" while \"input-y\" would betriggered if the user typed in \"y\". The special event \"input\" willtrigger on any user input while the event \"default\" will trigger onany input or return value.",}),]),}),])
file_name "/secure/login.c"
last_changed 1522061544
