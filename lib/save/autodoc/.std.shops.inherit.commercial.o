#/obj/handlers/autodoc/autodoc_file.c
public_functions (["is_open_for":({({"int",}),({({"string",}),"type",({"string",}),"person",}),(["main":({"This method is called to try and see if the property is open forthe specific type of thingy attempted.",}),"param":({"type the type of thing",}),]),}),"query_commercial_type":({({"string",}),({}),(["main":({"This method returns the commercial type of the property.",}),"return":({"the commercial type of the property",}),]),}),"query_property_size":({({"int",}),({}),(["main":({"This method returns the size of the property.  The property size rangesfrom 0 (no size) to 100 (big shop).",}),"return":({"the property size",}),]),}),"do_name_property":({({"int",}),({({"string",}),"name",}),(["main":({"This method gives the property a name.",}),]),}),"query_commercial_things":({({"object","*",}),({}),(["main":({"This method returns the current list of commercial things inthe room.",}),"return":({"the list of commercial things",}),]),}),"do_remove_sign":({({"int",}),({}),(["main":({"This method removes the sign from the property.",}),]),}),"do_collect_partial_royalties":({({"int",}),({({"string",}),"amount",}),(["main":({"This method collects royalities up to a certain amount.  This isonly usable by the owner of the shop.",}),"param":({"amount the amount to collect",}),"return":({"1 on success, 0 on failure",}),]),}),"do_black_list_add":({({"int",}),({({"string",}),"name",}),(["main":({"This method adds the person to the black list.",}),"param":({"person the person to add to the black list",}),]),}),"find_next_commercial_id":({({"int",}),({}),(["main":({"This method finds a unique commercial id in the room to use as newsave file.",}),"return":({"a unique commercial id for the room",}),]),}),"query_parcel_post":({({"string",}),({}),(["main":({"This method tells us the current parcel post used for rejecting items.",}),"return":({"the current parcel post",}),]),}),"find_commercial_items":({({"object","*",}),({({"string",}),"type",}),(["main":({"This function will try and track down a specific type of commercialobject in the current location.  It will look into 'partitioned'rooms for the item as well.",}),"param":({"type the type to look for",}),"return":({"the object found",}),]),}),"do_collect":({({"int",}),({}),(["main":({"This method shows the current royalties you can pick up.",}),]),}),"reset_weekly_status":({({"void",}),({}),(["main":({"This method resets the weekly status when the stats are mailed out.It will also reset all the commercial objects.",}),]),}),"query_weekly_status_string":({({"string",}),({}),(["main":({"This method returns the string that will be sent to the owners at theend of the week.",}),"return":({"the weekly status",}),]),}),"remove_commercial_thing":({({"void",}),({({"object",}),"thing",}),(["main":({"This method removes a commercil thing from the list of currentcommercial things.",}),"param":({"thing the thing to remove",}),]),}),"set_parcel_post":({({"void",}),({({"string",}),"parcel",}),(["main":({"This method sets the parcel post to use for rejecting items.",}),"param":({"parcel the parcel post office",}),]),}),"query_owners_money":({({"int",}),({}),(["main":({"This method figures out how much float the owner has in the currentproperty.",}),"return":({"the current float",}),]),}),"do_use_expression":({({"int",}),({({"string",}),"str",}),(["main":({"This method sets up the expression to use when calculating theability to use the shop.",}),]),}),"query_save_dir":({({"string",}),({}),(["main":({"This method returns the save directory for the room.  This should beused as a reference point for other save stuff.",}),"return":({"the save directory",}),]),}),"do_pay_entry":({({"int",}),({}),(["main":({"This method lets the person pay for entry into the premesis.",}),]),}),"long":({({"string",}),({({"string",}),"word",({"int",}),"dark",}),(["main":({"This gets round the problems with setting the property name beforewe have a save file.",}),]),}),"query_float":({({"int",}),({}),(["main":({"This method returns the float of the property.  The float is theowner's current royalty balance.",}),"return":({"the float of the property",}),]),}),"do_set_sign":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method sets the sign you wish to use for your property.The sign will be displayed outside the property for passer bys.",}),"param":({"obs the sign",}),]),}),"query_language":({({"string",}),({}),(["main":({"This method returns the language items in the shop should use if theyneed to use a language.",}),]),}),"adjust_royalty":({({"void",}),({({"string",}),"person",({"int",}),"amount",}),(["main":({"This method adds money into the specified person's royaltyfloat.",}),"param":({"person the person to add the royalty to","amount the amount to add",}),]),}),"do_measure":({({"int",}),({}),([]),}),"query_main_room":({({"object",}),({}),(["main":({"This method checks returns the main room.  THis is used when theproperty can have multiple sub-rooms.",}),"return":({"the main room",}),]),}),"do_black_list_add_ignore":({({"int",}),({}),(["main":({"This method adds their ignore list to the black list",}),]),}),"set_commercial_type":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the commercial type of the property.",}),"param":({"name the commecial type",}),]),}),"do_add_royalties":({({"int",}),({({"string",}),"amount",}),(["main":({"Adds money into the float for the shop.",}),"param":({"amount the amount to add to the float",}),]),}),"query_royalty":({({"int",}),({({"string",}),"person",}),(["main":({"This method returns the amount of money in the specified person'sroyalty float.",}),]),}),"set_save_dir":({({"void",}),({({"string",}),"dir",}),(["main":({"This method sets the save directory for the the room.",}),"param":({"dir the directory to save stuff in",}),]),}),"query_sign_object":({({"object",}),({}),(["main":({"This method returns the current sign object for the property.",}),"return":({"the current sign object",}),]),}),"short":({({"string",}),({}),(["main":({"This gets round the problems with setting the property name beforewe have a save file.",}),]),}),"do_royalties":({({"int",}),({}),(["main":({"This method shows any royalties that you might be able to collect.",}),"return":({"1 on succes, 0 on failure",}),]),}),"do_purchase":({({"int",}),({}),(["main":({"This methof calls ups the estate person to purchase stuff off.",}),]),}),"set_language":({({"void",}),({({"string",}),"language",}),(["main":({"This sets the language items in the shop should be displayed in,if a language is required.",}),"param":({"language the language to use",}),]),}),"do_royalty_list":({({"int",}),({}),(["main":({"This method shows any royalties that you might be able to collect.",}),"return":({"1 on succes, 0 on failure",}),]),}),"add_commercial_thing":({({"void",}),({({"object",}),"ob",}),(["main":({"This method adds a commercial thing into the list of currentcommercial things.",}),"param":({"thing the thing to add",}),]),}),"set_property_name":({({"void",}),({({"string",}),"name",}),(["main":({"This method sets the name of the property.",}),"param":({"name the name of the property",}),]),}),"set_sign_object":({({"void",}),({({"object",}),"ob",}),(["main":({"This method sets the current sign object.",}),"param":({"sign the new sign object",}),]),}),"register_use_types":({({"void",}),({({"string","*",}),"types",}),(["main":({"This registers a set of use types so they can be seen and controlled.",}),"param":({"types the list of types to register",}),]),}),"do_black_list_remove":({({"int",}),({({"string",}),"name",}),(["main":({"This method removes the person from the black list.",}),"param":({"person the person to remove from the black list",}),]),}),"do_use_expression_type":({({"int",}),({({"string",}),"type",({"string",}),"str",}),(["main":({"This method sets up the expression to use when calculating theability to use the shop.",}),]),}),"do_deposit":({({"int",}),({({"object","*",}),"obs",}),(["main":({"This method deposits money into the float",}),"param":({"obs the objects which could be money",}),]),}),"set_property_size":({({"void",}),({({"int",}),"size",}),(["main":({"This method sets the size of the property.  The property size rangesfrom 0 (no size) to 100 (big shop).",}),"param":({"size the new size of the property",}),]),}),"query_property_name":({({"string",}),({}),(["main":({"This method returns the name of the property.",}),"return":({"the name of the property",}),]),}),"query_commercial_property":({({"int",}),({}),(["main":({"This method returns true for any commercial property.",}),"return":({"1 for commercial property",}),]),}),])
protected_functions (["mail_weekly_status":({({"void",}),({}),(["main":({"This method will mail out the weekly status for the shop.",}),]),}),])
inherits (["/std/shops/inherit/person_expressions":({}),"/std/shops/inherit/expression_util":({}),"/std/room/player_housing":({}),])
main_docs (["main":({"This is the file that is the basic inheritable for commercialproperties.  The only different between commercial properties andplayer housing properties is that commerical ones can deal withsigns and commercial furniture.",}),"started":({"Fri Apr 21 13:37:44 PDT 2000",}),"author":({"Pinkfish",}),])
define_docs (["COMMERCIAL_ROYALTY_TIMEOUT_PERIOD":([]),"COMMERCIAL_SALESPERSON":([]),"COMMERCIAL_WEEKLY_STATS_TIME":([]),])
includes (["/include/player_handler.h":1522061544,"/include/move_failures.h":1522061544,"/include/player.h":1522061544,"/include/shops/bank.h":1522061544,"/include/mail.h":1522061544,"/include/expressions.h":1522061544,"/include/money.h":1522061544,"/include/playtesters.h":1522061544,])
class_docs (["royalty_data":({0,({({"value",({"int",}),}),({"last_withdrawl",({"int",}),}),}),([]),}),"weekly_status":({0,({({"total_incoming",({"int",}),}),({"total_outgoing",({"int",}),}),({"withdrawls",({"class","float_withdrawls","*",}),}),}),([]),}),"float_withdrawls":({0,({({"person",({"string",}),}),({"amount",({"int",}),}),({"withdrawl_time",({"int",}),}),}),([]),}),])
file_name "/std/shops/inherit/commercial.c"
last_changed 1522061544
