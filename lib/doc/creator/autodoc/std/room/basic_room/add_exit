.DT
add_exit
Disk World creator help
add_exit

.SH Name
.SP 5 5
add_exit -  This method adds an exit to the room.
.EP

.SH Syntax
.SI 5
int add_exit(string direc,
mixed dest,
string type)
.EI

.SH Defined in
.SI 5
/std/room/basic_room.c
.EI

.SH Description
.SP 5 5

This method adds an exit to the room.   The direction is the direction in
which the exit should go.  This is something like "north" or "enter
gate".  The destination field is where the player will go when they
enter the exit.  The type is a set type that sets a whole bunch of
defaults for the room.  The destination can be either a strong
or an object.


The types are controlled by /obj/handlers/room_handler.c and the current types and what this all means are: 
.EP
.SP 8 5

.EP
.SP 8 5
road 
.EP
.SP 11 5
Wide road. 
.EP
.SP 8 5
path 
.EP
.SP 11 5
Narrower path 
.EP
.SP 8 5
door 
.EP
.SP 11 5
And exit with a door. Defaults to closed but not locked. 
.EP
.SP 8 5
secret 
.EP
.SP 11 5
A secret door. Defaults to closed but not locked. 
.EP
.SP 8 5
corridor 
.EP
.SP 11 5
A corridor (bing). 
.EP
.SP 8 5
hidden 
.EP
.SP 11 5
A hidden exit without a door 
.EP
.SP 5 5


The room aliases are used to expand things for exits. However they don't expand the entire exit name. They expand it in bits. For instance, if the exit was "enter live eel", you could add_alias("eel", "live eel"); and add_alias("bing", "enter"); to get both of the bits of the exit. So "bing eel", "enter eel", "bing live eel" etc would work.
.EP

.SH Example 1
.SI 5
add_exit("north", PATH + "market2", "road");
add_alias("eel", "live eel");
add_exit("enter live eel", PATH + "live_eel", "secret");
.EI

.SH Example 2
.SI 5
object fluffy_room;

fluffy_room = clone_object(PATH + "fluffy_room");
add_exit("north", fluffy_room, "road");
.EI

.SH See also
.SP 5 5
modify_exit(), query_dest_dir(), remove_exit(), /obj/handlers/room_handler

.EP

