.DT
add_hidden_object
Disk World creator help
add_hidden_object

.SH Name
.SP 5 5
add_hidden_object -  This puts a hidden object into a room.
.EP

.SH Syntax
.SI 5
int add_hidden_object(object thing)
.EI

.SH Parameters
.SI 5
%^BOLD%^thing%^RESET%^ - the hidden object to add
.EI

.SH Returns
.SI 5
1 if successful, 0 on a failure
.EI

.SH Defined in
.SI 5
/std/room/basic_room_new.c
.EI

.SH Description
.SP 5 5

This puts a hidden object into a room. A hidden object is an object that
exists in the room as far as all the find_match calls go. So, for look at's
and so on, but does not actually exist in the room so it does not show up
in the inventory when the player does a look. This is the method used for
putting signs and doors into rooms, that actually have shorts and you can
do things to, but do not show up in the inventory. The function init is also
called on these objects when init is called in the room. The only thing you
cannot put in your init function is an add_action. You can however define
up bunches of add_commands...


If this sounds complicated. Think of it as an object that IS in the room, but you cannot see it. 

A word of warning here, the init() function will *not* be called on all the players when the object is added as hidden. This means that the commands on it will not be available until the player re-enters the room. You could get around this by moving everyone out of the room and then back in again.
.EP

.SH Example 1
.SI 5
#include <room.h>
sign = clone_object(PATH + SIGN);
add_hidden_object(sign);
.EI

.SH Example 2
.SI 5
// Add a hidden object that has actions we want players to be able to
// use.
add_hidden_object(fluffy_container);
players = filter(all_inventory(), (: living($1) :));
players->move(ROOM_VOID);
// This forces init() to be recalled.  (This is realtivatively icky
// way of doing it, but the driver does not give us many alternatives).
players->move(this_object());
.EI

.SH See also
.SP 5 5
query_hidden_object(), remove_hidden_object()
.EP

