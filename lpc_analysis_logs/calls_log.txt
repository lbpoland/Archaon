LPC Code Structure Analysis Log
Generated: 2025-03-08 06:17:50

File | Line | Snippet
--------------------------------------------------------------------------------
cre_book2.c | 7 | set_name("Command Summary");
cre_book2.c | 8 | add_alias( ({"book", "command book", "summary", "command summary"})  );
cre_book2.c | 9 | add_adjective( ({ "small", "black", "small black", "command" }) );
cre_book2.c | 12 | set_read_mess( "The Creator's Command Quick Reference." );
cre_book2.c | 13 | set_no_pages(8);
cre_book2.c | 14 | set_main_plural("small black books");
cre_book2.c | 15 | add_plural("command summaries");
cre_book2.c | 16 | add_plural("books");
cre_book2.c | 17 | set_weight(11);
cre_book2.c | 18 | add_property("no recycling", 1);
cre_book2.c | 20 | set_open_page( 1 );
cre_book2.c | 47 | set_open_page( 2 );
cre_book2.c | 57 | set_open_page( 3 );
cre_book2.c | 72 | adjust_max_deaths(1) lagger%^RESET%^.\n" , 0, "common", 1);
cre_book2.c | 73 | set_open_page( 4 );
cre_book2.c | 101 | set_open_page( 5 );
cre_book2.c | 127 | set_open_page( 6 );
cre_book2.c | 142 | set_open_page( 7 );
cre_book2.c | 165 | set_open_page( 8 );
cre_book2.c | 183 | set_open_page( 9 );
cre_book2.c | 184 | set_open_page( 0 );
departures.c | 25 | squish(string cmd);
departures.c | 28 | set_co_ord(({0,0,-1000}));
departures.c | 29 | set_light(100);
departures.c | 30 | set_short("Discworld departure lounge");
departures.c | 40 | add_item("great a'tuin", "A big turtle.  Like real big.\n");
departures.c | 41 | add_item("elephant", "Like an elephant only bigger.\n");
departures.c | 45 | add_item("other world", "They are a bit too far away to see.\n");
departures.c | 46 | add_item("reality", "But who is to say what is real anyway?\n");
departures.c | 54 | add_property( "no teleport", 1 );
departures.c | 55 | set_keep_room_loaded(1);
departures.c | 61 | init();
departures.c | 65 | this_player()->command_override((: squish :));
departures.c | 74 | write( "Fat chance, bozo.\n" );
departures.c | 88 | move(CONFIG_START_LOCATION);
departures.c | 96 | call_out( "destroy_thing", 60, thing );
departures.c | 110 | move("/room/rubbish");
transport_start.c | 16 | set_short("transport start");
transport_start.c | 24 | environment( place ) );
transport_start.c | 26 | find_start_pos( player, environment( place ) ), 180 );
transport_start.c | 34 | query_property( TRANSPORT_LOCATION );
transport_start.c | 35 | tell_creator("goldenthread", "location: %s\n", location );
transport_start.c | 38 | query_start_pos();
transport_start.c | 40 | tell_creator( "goldenthread", "final location: %s\n", location );
transport_start.c | 41 | move( location );
void.c | 7 | set_short( "convention in the void" );
void.c | 8 | add_property( "determinate", "the " );
void.c | 9 | add_property( "no teleport", 1 );
void.c | 10 | set_light( 100 );
void.c | 17 | add_item( "igloo", "The igloo is nice and warm despite the icy decor." );
void.c | 20 | add_item( "drink", "The drinks come in a variety of colours and smells." );
void.c | 21 | add_item( "crowd", "The crowd consists mostly of iguanas." );
void.c | 22 | add_item( "bowl", "The bowl holds the soup.  It is green and hums." );
void.c | 23 | add_item( "soup", "The soup is pink and comfortable-looking." );
void.c | 24 | add_item( "wombat", "Perhaps you should tell the wombat to use a spoon." );
void.c | 27 | add_exit("out", CONFIG_START_LOCATION, "road");
void.c | 32 | clone_object( "/obj/misc/button" );
void.c | 33 | move( this_object() );
void.c | 50 | write( "I don't think so.\n" );
void.c | 58 | init();
void.c | 62 | this_player()->command_override((: squish :));
broken.c | 21 | after_reset();
broken.c | 22 | dest_me();
broken.c | 23 | reset();
broken.c | 24 | setup();
broken.c | 34 | clone_object( "/obj/misc/button" );
broken.c | 35 | move( this_object() );
broken.c | 42 | if ( button )  button->dest_me();
broken.c | 44 | dest_me();
broken.c | 50 | call_out( "after_reset" , 1 );
broken.c | 54 | set_light(100);
broken.c | 55 | set_short("Graveyard");
broken.c | 63 | init();
vault.c | 13 | set_short( "vault room" );
vault.c | 14 | set_long( "This is the vault for money.\n" );
vault.c | 15 | set_keep_room_loaded(1);
vault.c | 23 | long(word, dark);
vault.c | 30 | if(sizeof(list) >
vault.c | 31 | move("/room/rubbish");
vault.c | 44 | tell_creator(DEBUGGER, "Saving %O\n", ob);
vault.c | 47 | if (member_array(ob, list) >
vault.c | 51 | this_player()->query_current_cmd());
vault.c | 59 | reset_effects();
vault.c | 60 | force_no_join();
vault.c | 61 | move(this_object());
vault.c | 62 | set_already_joined();
vault.c | 63 | remove_property("dropped");
vault.c | 68 | environment(ob), environment(ob)->short());
vault.c | 72 | tell_creator(DEBUGGER, "list is now %O\n", list);
vault.c | 80 | clone_object(MONEY_OBJECT);
vault.c | 87 | tell_creator(DEBUGGER, "Re-using %O\n", ob);
vault.c | 89 | set_money_array(({ }));
vault.c | 90 | reset_already_joined();
vault.c | 91 | reset_no_join();
vault.c | 95 | log_file("MONEY_RECYCLE", ctime(time()) + "Found NULL entry in object list\n");
vault.c | 99 | tell_creator(DEBUGGER, "list is now %O\n", list);
vault.c | 103 | clone_object(MONEY_OBJECT);
rubbish.c | 7 | set_short( "rubbish room" );
rubbish.c | 10 | set_keep_room_loaded(1);
rubbish.c | 12 | set_heart_beat(1);
rubbish.c | 20 | long(word, dark);
rubbish.c | 36 | time();
rubbish.c | 39 | map_delete(delete_list, ob);
rubbish.c | 40 | destruct(ob);
rubbish.c | 41 | reset_eval_cost();
rubbish.c | 54 | set_heart_beat(1);
rubbish.c | 56 | interactive( $1 ) :) );
rubbish.c | 58 | map(inventory, (: $1 && destruct($1) :));
rubbish.c | 68 | keys(delete_list);
virtual.c | 11 | previous_object()->move("/room/rubbish");
virtual.c | 19 | load_object(where = npc->query_true_location());
virtual.c | 24 | environment(npc)->long();
jail.c | 7 | squish(string cmd);
jail.c | 10 | set_short( "jail" );
jail.c | 11 | add_property( "determinate", "the " );
jail.c | 12 | add_property("no teleport", 1);
jail.c | 13 | add_property("no godmother", 1);
jail.c | 14 | set_light( 100 );
jail.c | 24 | init();
jail.c | 26 | this_player()->command_override((: squish :));
jail.c | 35 | explode(cmd, " ");
jail.c | 37 | write( "I don't think so.\n" );
air.c | 12 | screen_command( string cmd );
air.c | 21 | set_light( 100 );
air.c | 22 | set_short( "high above the Disc" );
air.c | 23 | add_property( "determinate", "" );
air.c | 34 | if( member_array( who, people ) >
air.c | 41 | load_object( BROOMSTICK );
air.c | 46 | query_owner();
air.c | 47 | lower_case( explode( name, " " )[0] );
air.c | 48 | find_player( name );
air.c | 52 | load_object( GRANNY );
air.c | 57 | random_dest( player );
air.c | 75 | query_name() });
air.c | 87 | tell_creator( "tannah", "broom: %O\n", broom );
air.c | 101 | call_out( (: down_they_go :), TIME_LIMIT, witch, riding );
air.c | 107 | load_object( BROOMSTICK );
air.c | 110 | if( sizeof( brooms ) >
air.c | 116 | filter( brooms, (: $1->query_holder() == $(witch) :) );
air.c | 128 | query_destination();
air.c | 130 | load_object( path );
air.c | 132 | random_dest(witch);
air.c | 134 | tell_creator( "tannah", "Broom: %O\nLanding in: %O\n", broom, dest );
air.c | 135 | land( witch, dest );
air.c | 141 | set_position( "dropping towards the ground" );
air.c | 142 | call_out( (: drop_non_living :), 2, ob );
air.c | 149 | command_override( (: screen_command :) );
air.c | 153 | query_name() });
air.c | 155 | filter( previous_object(-1), (: $1->id( "broomstick" ) :) ) );
air.c | 159 | return ({ "flying through the air" });
air.c | 164 | tell_object( ob, "You plummet towards the ground.\n" );
air.c | 168 | position( ob, 1 );
air.c | 174 | sscanf( cmd, "%s %s", cmd, garbage );
air.c | 181 | notify_fail( "" );
air.c | 194 | write( "You attempt aerial feats mere mortals dare not.\n" );
air.c | 207 | random( 3 ) ] );
garden.c | 6 | set_light(70);
garden.c | 7 | set_short("Statue garden");
garden.c | 12 | add_exit("drum", CONFIG_START_LOCATION, "path");
air_terrain.c | 6 | set_long("Flying up high in the air.");
air_terrain.c | 7 | set_short("air room");
air_terrain.c | 16 | query_terrain_coords();
air_terrain.c | 18 | query_terrain_handler()->query_ground_room(coords[0], coords[1]);
air_terrain.c | 19 | query_terrain_coords();
air_terrain.c | 23 | query_long();
air_terrain.c | 24 | set_long("Down below you see: " + ground_base_str);
air_terrain.c | 27 | set_long("Flying up high above " + ground_room->query_short() + ".");
air_terrain.c | 30 | set_long("High up in the sky.");
air_terrain.c | 41 | call_out("plumet_down", 2, ob);
air_terrain.c | 57 | query_terrain_coords();
air_terrain.c | 58 | query_terrain_handler()->query_ground_room_co_ords(coords[0], coords[1]);
air_terrain.c | 59 | query_terrain_handler()->query_real_from_terrain_coord(coords[0], coords[1], coords[2]);
air_terrain.c | 60 | query_terrain_handler()->query_real_from_terrain_coord(ground_coords[0], ground_coords[1], ground_coords[2]);
air_terrain.c | 63 | query_terrain_handler()->query_room_at(coords[0], coords[1], z);
air_terrain.c | 70 | query_terrain_handler()->load_room_at(coords[0], coords[1], ground_coords[2]);
air_terrain.c | 78 | query_ac( "blunt", damage );
air_terrain.c | 79 | adjust_hp(damage, this_object(), this_object());
air_terrain.c | 80 | tell_object(ob, "%^BOLD%^%^RED%^Ouch, that hurt.%^RESET%^\n");
morgue.c | 5 | set_short( "morgue");
morgue.c | 6 | add_property( "determinate", "the " );
morgue.c | 7 | add_property( "no teleport", 1 );
morgue.c | 8 | set_light( 100 );
skills.c | 22 | flatten(mixed *arr, string bit);
skills.c | 23 | add_skill_rec(mixed *skill, string *path);
skills.c | 24 | del_skill_rec(mixed *skill, string *path);
skills.c | 25 | query_skill_cost_int(string str);
skills.c | 42 | query_languages();
skills.c | 43 | sizeof(languages);
skills.c | 52 | query_language_written_skill(languages[i]);
skills.c | 53 | query_language_spoken_skill(languages[i]);
skills.c | 54 | replace(languages[i], " ", "_");
skills.c | 66 | explode(LANGUAGE_SKILL_START, ".");
skills.c | 68 | member_array(skill_bits[0], _skills);
skills.c | 74 | flatten( _skills, "" );
skills.c | 178 | explode(skill, ".");
skills.c | 208 | explode(skill, ".");
skills.c | 209 | sizeof(bit);
skills.c | 211 | implode(bit[0..i], ".");
skills.c | 232 | m_delete(_stat_bonus, skill);
skills.c | 250 | sizeof(arr);
skills.c | 252 | query_children(arr[i+SKILL_BIT], path+arr[i]+".");
skills.c | 286 | sizeof(arr);
skills.c | 297 | explode(skill, ".");
skills.c | 300 | return ({ skill });
skills.c | 303 | implode(bits[0..i], ".") });
skills.c | 316 | sizeof(arr);
skills.c | 317 | reset_eval_cost();
skills.c | 323 | query_skill_cost_int(bit+arr[i]) });
skills.c | 324 | flatten(arr[i+SKILL_BIT], bit+arr[i]+".");
skills.c | 326 | create_skill_tree(bit+arr[i]);
skills.c | 327 | query_imm_children(arr[i+SKILL_BIT],bit+arr[i]+".");
skills.c | 339 | sizeof(arr);
skills.c | 340 | query_skill_cost_rec(arr[i+SKILL_BIT]);
skills.c | 350 | explode(str, ".");
skills.c | 353 | member_array(path[0], arr);
skills.c | 361 | query_skill_cost_rec(arr);
skills.c | 407 | sizeof(arr);
skills.c | 433 | explode(str, ".");
delivery.c | 51 | set_delivery_delay(int new_time);
delivery.c | 52 | valid_delivery(class delivery_item delivery, string person);
delivery.c | 53 | deliver_item(string who, object ob, string sent_by);
delivery.c | 54 | set_burdened_mess(string s);
delivery.c | 55 | set_delivery(mapping x);
delivery.c | 56 | set_delivery_mess(string s);
delivery.c | 57 | set_save_file(string str);
delivery.c | 58 | query_delivery_delay();
delivery.c | 59 | query_burdened_mess();
delivery.c | 60 | query_delivery_mess();
delivery.c | 61 | query_save_file();
delivery.c | 62 | query_delivery(string person);
delivery.c | 63 | add_delivery(mixed who, mixed sender, object item, int delay);
delivery.c | 64 | check_delivery(mixed person, string type);
delivery.c | 65 | clear_delivery();
delivery.c | 66 | setup_delivery();
delivery.c | 67 | load_file();
delivery.c | 68 | save_file();
delivery.c | 91 | clone_object("/std/container");
delivery.c | 92 | call_out("tidy_up", 30 + random(30));
delivery.c | 107 | base_name(this_object()));
delivery.c | 138 | save_file();
delivery.c | 150 | save_file();
delivery.c | 165 | add_delivery(this_player(), "taffyd", frog, 360);
delivery.c | 173 | query_name();
delivery.c | 178 | query_cap_name();
delivery.c | 197 | move(_cont);
delivery.c | 198 | save_file();
delivery.c | 243 | valid_delivery($1, $(person)) :));
delivery.c | 246 | map_delete(_delivery, person);
delivery.c | 248 | save_file();
delivery.c | 270 | find_player(who);
delivery.c | 278 | move("/room/rubbish");
delivery.c | 289 | file_name(ob) }) }));
delivery.c | 291 | move(environment(player), );
delivery.c | 295 | move("/room/rubbish", "$N appear$s in a puff of smoke.");
delivery.c | 298 | short());
delivery.c | 303 | replace(_delivery_mess, ({ "$S", sent_by, "$N", "$0$" }));
delivery.c | 306 | file_name(ob) }) }));
delivery.c | 309 | short(), who);
delivery.c | 321 | keys(_delivery);
delivery.c | 325 | objectp($1->delivery_ob) :));
delivery.c | 328 | filter(_delivery, (: sizeof($2) :));
delivery.c | 347 | clean_delivery_mapping();
delivery.c | 350 | map(values, (: $1->delivery_ob :));
delivery.c | 355 | create_auto_load(tmp, 0) });
delivery.c | 358 | tell_creator("ceres", "Saving: %s\n", _save_file);
delivery.c | 359 | unguarded((: save_object, _save_file :));
delivery.c | 377 | ctime(time()));
delivery.c | 379 | tell_creator("ceres", "Loading: %s\n", _save_file);
delivery.c | 380 | if (file_size(_save_file + ".o") >
delivery.c | 381 | unguarded((: restore_object, _save_file :));
delivery.c | 384 | clone_object("/std/container");
delivery.c | 386 | all_inventory(_cont)->move("/room/rubbish");
delivery.c | 388 | sizeof(_item_save);
delivery.c | 395 | load_auto_load_to_array(items, this_player());
delivery.c | 401 | sizeof(tmp);
delivery.c | 405 | move(_cont);
delivery.c | 505 | copy(_delivery);
delivery.c | 508 | copy(_delivery[person]);
delivery.c | 515 | dest_me();
delivery.c | 532 | this_object()->query_short(), person);
delivery.c | 533 | map_delete(_delivery, person);
delivery.c | 536 | save_file();
armour_logic.c | 20 | if (!ac) ac = ([ ]);
armour_logic.c | 40 | member_array(ac[name][1], armour_types);
armour_logic.c | 42 | member_array(name, armour_types[j+1]);
armour_logic.c | 43 | delete(armour_types[j+1], k, 1);
armour_logic.c | 45 | delete(armour_types, j, 2);
armour_logic.c | 47 | map_delete(ac, name);
armour_logic.c | 61 | random(arr);
armour_logic.c | 70 | random(arr[F_RAND]);
armour_logic.c | 72 | random(arr[F_DIE]);
armour_logic.c | 86 | sizeof( armour_types[ i + 1 ] );
armour_logic.c | 92 | calc_value( ac[ armour_types[ i + 1 ][ j ] ][ A_AC ] );
armour_logic.c | 125 | keys(ac);
armour_logic.c | 126 | sizeof(stuff);
armour_logic.c | 137 | sizeof(ac);
armour_logic.c | 138 | add_ac(ac[i], ac[i+1][A_TYPE], ac[i+1][A_AC]);
map.c | 19 | create();
map.c | 22 | add_alias("map");
map.c | 23 | add_plural("maps");
map.c | 25 | add_extra_look(this_object());
map.c | 28 | this_object()->setup();
map.c | 50 | query_max_range() >= _detail);
map.c | 70 | query_features_in_region(x1, y1, x2, y2);
map.c | 71 | filter(_features, "filter_features", this_object());
map.c | 103 | setup_map(x1, y1, x2, y2, detail);
map.c | 113 | this_player();
map.c | 114 | environment(_pl);
map.c | 115 | query_co_ord();
map.c | 117 | query_skill_bonus("other.direction");
map.c | 124 | random(_fudge);
map.c | 125 | random(_fudge);
map.c | 126 | random(_fudge);
map.c | 139 | recalc_coords();
map.c | 148 | query_region_ob();
map.c | 152 | query_max_range()/TERRAIN_MAP_ONE_MILE);
map.c | 160 | calc_map_feature_desc(direcs, _fudge) });
map.c | 167 | notify_fail("You cannot find " + find + " on your map.\n");
map.c | 169 | notify_fail("You cannot find anything on your map.\n");
map.c | 172 | query_multiple_short(res) + "\n");
map.c | 173 | this_player()->add_succeeded_mess(this_object(), "");
map.c | 191 | do_consult("") :));
map.c | 194 | do_consult($4[0]) :));
map.c | 197 | do_add($4[0]) :));
map.c | 214 | int_query_static_auto_load();
map.c | 220 | init_static_arg(args["::"]);
race.c | 151 | load_object(tmp);
race.c | 155 | catch(_guild_obs[tmp] = load_object(tmp));
race.c | 165 | undefinedp(_races[race]);
race.c | 188 | previous_object();
race.c | 189 | set_no_check(1);
race.c | 190 | set_race_ob(race_ob);
race.c | 192 | start_player(ob);
race.c | 194 | set_level(ob, lvl);
race.c | 195 | set_guild_ob(guild_ob);
race.c | 197 | start_player(ob);
race.c | 199 | set_level(ob, lvl, guild);
race.c | 200 | race_guild_commands();
race.c | 225 | copy(_races);
race.c | 259 | copy(_guilds);
race.c | 285 | find_object(race_ob);
race.c | 290 | player_heart_beat( race, previous_object() );
race.c | 296 | find_object(guild_ob);
race.c | 303 | player_heart_beat(guild, previous_object());
mineral.c | 9 | check_tool( object *tools );
mineral.c | 17 | create();
mineral.c | 21 | this_player()->add_command( "chip", this_object(), "<direct:object> 'with' <indirect:object>" );
mineral.c | 22 | this_player()->add_command( "chip", this_object(), "<direct:object> 'using' <indirect:object>" );
mineral.c | 23 | this_player()->add_command( "smash", this_object(), "<direct:object> 'with' <indirect:object>" );
mineral.c | 24 | this_player()->add_command( "smash", this_object(), "<direct:object> 'using' <indirect:object>" );
mineral.c | 30 | query_material_adjective( mineral );
mineral.c | 31 | query_material_ansi_colour( mineral );
mineral.c | 32 | set_weight( number );
mineral.c | 51 | allocate( 10 );
mineral.c | 55 | set_name( noun );
mineral.c | 56 | add_plural( noun +"s" );
mineral.c | 58 | set_name( args[0] );
mineral.c | 60 | add_plural( args[0] +"s" );
mineral.c | 62 | add_plural( args[3] );
mineral.c | 65 | set_short( colour_code + material_adjective +" "+ noun +"%^RESET%^" );
mineral.c | 69 | set_short( args[1] );
mineral.c | 71 | set_main_plural( args[1] +"s" );
mineral.c | 73 | set_main_plural( args[4] );
mineral.c | 76 | set_long( "This is a "+ adjective +" lump of $mineral$.\n" );
mineral.c | 78 | set_long( args[2] );
mineral.c | 79 | add_adjective( ({ adjective }) + explode( material_adjective, " " ) );
mineral.c | 84 | sscanf( ::long( str, dark ), "%s$mineral$%s", bit1, bit2 );
mineral.c | 92 | identify_material( mineral, this_player(), 0 );
mineral.c | 93 | query_adjectives() + ({ ret });
mineral.c | 98 | identify_material( mineral, this_player(), 0 );
mineral.c | 99 | parse_command_adjectiv_id_list() + ({ ret });
mineral.c | 114 | return ( query_weight() * (int)(PRICE_INDEX)->query_price( mineral, word ) );
mineral.c | 123 | this_player(), 0 ) +" is already a chip.\n" );
mineral.c | 126 | set_weight( query_weight() - 1 );
mineral.c | 127 | clone_object( MINERAL );
mineral.c | 128 | make_mineral( mineral, 1 );
mineral.c | 129 | move( environment() );
mineral.c | 130 | this_player()->add_succeeded( tools[0] );
mineral.c | 139 | this_player()->query_max_weight();
mineral.c | 141 | query_weight();
mineral.c | 143 | clone_object( MINERAL );
mineral.c | 144 | make_mineral( mineral, query_weight() - largest );
mineral.c | 145 | move( environment() );
mineral.c | 147 | hit_weapon( largest, "blunt" );
mineral.c | 148 | random( 4 );
mineral.c | 154 | clone_object( MINERAL );
mineral.c | 155 | make_mineral( mineral, size );
mineral.c | 156 | move( environment() );
mineral.c | 160 | this_player()->add_succeeded( tools[0] );
mineral.c | 161 | move( "/room/rubbish" );
mineral.c | 168 | if ( sizeof( tools ) >
mineral.c | 169 | write( "You only need to use one tool at a time.\n" );
mineral.c | 173 | write( "You need to use a tool of some sort.\n" );
mineral.c | 176 | this_player()->query_holding();
mineral.c | 178 | write( "You need to use a tool that you are holding.\n" );
mineral.c | 181 | query_name();
mineral.c | 183 | write( "You need to use a tool appropriate to the job.\n" );
mineral.c | 204 | init_static_arg( map["::"] );
mineral.c | 211 | int_query_static_auto_load();
mineral.c | 212 | return ([ ]);
smart_log.c | 17 | catch(db_fd = db_connect("localhost", "errors", CONFIG_DB_USER));
smart_log.c | 32 | seteuid("Root");
smart_log.c | 35 | master()->query_assigned_to_directory(file);
smart_log.c | 37 | explode(file, "/") - ({ "" });
smart_log.c | 38 | implode(j[0..<2], "/");
smart_log.c | 40 | implode(j, "/");
smart_log.c | 41 | sscanf(full_type, "%s %s", category, full_type);
smart_log.c | 46 | time();
smart_log.c | 47 | if (sizeof(person) >
smart_log.c | 54 | db_escape(person[0]));
smart_log.c | 61 | db_escape(text), (trace ? db_escape(trace) : ""));
smart_log.c | 64 | tell_creator("pinkfish", "%O %O\n", $1, $2) :));
smart_log.c | 67 | sizeof(person) >
smart_log.c | 72 | catch(db_exec(db_fd, query));
smart_log.c | 74 | explode( file, "/" );
smart_log.c | 75 | implode( j[ 0 .. <2 ], "/" );
smart_log.c | 76 | sizeof(person);
smart_log.c | 77 | read_file("/w/"+person[i]+"/"+PLAYER_ERROR_LOG);
smart_log.c | 81 | explode(temp1, "\n");
smart_log.c | 89 | master()->do_log(person[i], temp1);
smart_log.c | 94 | catch(db_close(db_fd));
smart_log.c | 95 | destruct(this_object());
smart_log.c | 98 | clean_up() { dest_me();
smart_log.c | 100 | reset() { dest_me();
lightable.c | 24 | set_lit(int);
lightable.c | 29 | create();
lightable.c | 30 | add_extra_look( this_object() );
lightable.c | 37 | this_player()->add_command( "light", this_object() );
lightable.c | 38 | this_player()->add_command( "dowse", this_object() );
lightable.c | 39 | this_player()->add_command( "extinguish", this_object() );
lightable.c | 47 | short( dark );
lightable.c | 49 | short( dark );
lightable.c | 60 | set_lit( 0 );
lightable.c | 62 | remove_burner( this_object() );
lightable.c | 66 | environment();
lightable.c | 68 | tell_object( env, the_short() +" goes out.\n" );
lightable.c | 70 | the_short() +"'s "+ short() +" goes out.\n", env );
lightable.c | 72 | tell_room( env, the_short() +" goes out.\n" );
lightable.c | 90 | cmd( ({ this_object() }) );
lightable.c | 108 | remove_burner( this_object() );
lightable.c | 109 | remove_adjective( "lit" );
lightable.c | 110 | set_light( 0 );
lightable.c | 119 | call_out( (: delayed_light :), 2 );
lightable.c | 120 | add_burner( this_object() );
lightable.c | 121 | add_adjective( "lit" );
lightable.c | 122 | set_light( brightness );
lightable.c | 136 | tell_object( this_player(), "You extinguish "+ the_short() +".\n" );
lightable.c | 138 | the_short() +".\n", this_player() );
lightable.c | 140 | set_holder( ob, pos );
lightable.c | 155 | notify_fail( the_short() +" is already lit.\n" );
lightable.c | 157 | notify_fail( the_short() +" "+ empty_mess +"\n" );
lightable.c | 159 | notify_fail( "You cannot light "+ the_short() +".\n" );
lightable.c | 160 | this_player()->add_succeeded_mess( this_object(), "$N $V $D.\n", ({ }) );
lightable.c | 169 | notify_fail( the_short() +" is not lit.\n" );
lightable.c | 171 | notify_fail( "You cannot extinguish "+ the_short() +".\n" );
lightable.c | 172 | this_player()->add_succeeded_mess( this_object(), "$N $V $D.\n", ({ }) );
lightable.c | 180 | do_dowse();
lightable.c | 258 | query_fuel_messages();
lightable.c | 259 | sizeof( messages );
lightable.c | 370 | init_dynamic_arg(arg["::"], bing);
lightable.c | 372 | set_lit(arg["lit"]);
lightable.c | 375 | add_burner( this_object() );
lightable.c | 387 | out_of_fuel();
lightable.c | 394 | return (int)( ::query_value() * fuel / max_fuel );
lightable.c | 407 | load_object( dest );
lightable.c | 418 | set_lit( 0 );
lightable.c | 421 | move( dest, messin, messout );
learning.c | 35 | lesson_response(string, object, int, string);
learning.c | 142 | query_skill(skill);
learning.c | 153 | query_skill(skill);
learning.c | 225 | query_multiple_short(needed) );
learning.c | 228 | query_multiple_short(needed) + " to learn today.\n");
learning.c | 233 | call_out("lesson_step", 1, name, player, 0);
learning.c | 241 | query_lessons() { return keys(_lessons);
learning.c | 251 | tell_creator( "belle", "Current lessonstep is %O\n", current );
learning.c | 255 | tell_creator( "belle", "command %s\n params %s\n", current->responses[0], current->params[0] );
learning.c | 256 | tell_creator( "belle", "Sizeof current responses is %d", sizeof(current->responses) );
learning.c | 258 | sizeof(current->responses);
learning.c | 259 | if(current->params && sizeof(current->params) >
learning.c | 261 | tell_creator( "belle", "Str is %s\n", str );
learning.c | 266 | this_object(), str );
learning.c | 273 | this_object(), str );
learning.c | 280 | queue_command(str);
learning.c | 282 | tell_object(student, str);
learning.c | 295 | tell_creator( "belle", "Args is %O\nSizeof Current-params is %d\n", args[0], sizeof(current->params) );
learning.c | 304 | tell_creator( "belle", "TM Check skill: %s diff: %d\n", current->skill, current->difficulty );
learning.c | 309 | tell_object(student, "%^YELLOW%^"+current->award_mess+"%^RESET%^\n");
learning.c | 313 | tell_object( student, current->succeed_mess + "\n");
learning.c | 316 | remove_object(this_object(), 1);
learning.c | 319 | sizeof(_lessons[name]->plan)-1) );
learning.c | 322 | tell_creator("belle", "Lesson is on its last step: %d\n", lessonstep );
learning.c | 323 | call_out( "lesson_end", 1, name, student );
learning.c | 326 | call_out("lesson_step", 1, name, student, ++lessonstep);
learning.c | 332 | tell_object(student, current->fail_mess + "\n" );
learning.c | 345 | queue_command(str);
learning.c | 347 | tell_object(student, str);
book.c | 50 | do_open(int page);
book.c | 51 | do_tear(int number);
book.c | 52 | do_turn(int number);
book.c | 53 | do_close();
book.c | 54 | create_default_page_object();
book.c | 59 | load_object(_default_page_object);
book.c | 60 | find_object(_default_page_object);
book.c | 61 | create();
book.c | 62 | add_help_file("book");
book.c | 77 | load_object(_default_page_object);
book.c | 78 | find_object(_default_page_object);
book.c | 81 | sizeof(filter(_pages, (: objectp($1) :))) * _def_p_obj->query_weight();
book.c | 90 | add_command("open", "<direct:object>", (: do_open(1) :));
book.c | 92 | do_open($4[1]) :));
book.c | 93 | add_command("tear", "page from <direct:object>", (: do_tear(1) :));
book.c | 94 | add_command("tear", "[all] pages from <direct:object>", (: do_tear(0) :));
book.c | 96 | do_tear($4[0]) :));
book.c | 97 | add_command("rip", "page from <direct:object>", (: do_tear(1) :));
book.c | 99 | do_tear($4[0]) :));
book.c | 100 | add_command("rip", "[all] pages from <direct:object>", (: do_tear(0) :));
book.c | 101 | add_command("turn", "[a|1] page of <direct:object>", (: do_turn(1) :));
book.c | 103 | do_turn($4[0]) :));
book.c | 105 | do_open($4[1]) :) );
book.c | 107 | do_open($4[0]) :) );
book.c | 108 | add_command("close", "<direct:object>", (: do_close() :));
book.c | 115 | adjust_weight( number );
book.c | 129 | return (object)ob->query_property("my book") == this_object();
book.c | 149 | query_property("my book") != this_object();
book.c | 166 | sizeof(_pages);
book.c | 174 | allocate(no-siz);
book.c | 204 | add_alias("page");
book.c | 205 | add_plural("pages");
book.c | 209 | sizeof(_pages);
book.c | 215 | remove_alias("page");
book.c | 216 | remove_plural("pages");
book.c | 286 | this_object();
book.c | 288 | sizeof(_pages);
book.c | 291 | load_object(_default_page_object);
book.c | 292 | find_object(_default_page_object);
book.c | 310 | this_object();
book.c | 348 | load_object(_default_page_object);
book.c | 349 | find_object(_default_page_object);
book.c | 364 | this_object();
book.c | 384 | clone_object(_default_page_object);
book.c | 385 | add_alias("page");
book.c | 386 | add_plural("pages");
book.c | 388 | set_read_mess(_pages[_open_page-1]);
book.c | 415 | move("/room/rubbish");
book.c | 432 | query_read_mess();
book.c | 433 | move("/room/rubbish");
book.c | 456 | short(flags);
book.c | 459 | short(flags);
book.c | 461 | short(flags);
book.c | 471 | parse_command_adjectiv_id_list() + ({ "open" });
book.c | 473 | parse_command_adjectiv_id_list() + ({ "closed" });
book.c | 501 | long(str, dark);
book.c | 520 | write("Oddly enough, the first page is page 1.\n");
book.c | 527 | the_short() + ".\n");
book.c | 528 | sizeof(_pages);
book.c | 531 | add_failed_mess("The $D is already open at page " + page + ".\n");
book.c | 534 | add_failed_mess("The page " +  page + " in $D is torn out.\n");
book.c | 538 | call_out((: _ignore_open_page = 0 :), 4);
book.c | 539 | set_open_page(page);
book.c | 540 | add_succeeded_mess("$N $V $D to page " + page + ".\n", ({ }));
book.c | 552 | query_open_page();
book.c | 554 | set_open_page(0);
book.c | 555 | add_succeeded_mess("$N close$s $D.\n");
book.c | 558 | add_succeeded_mess("$N turn$s $D to page " + number + ".\n");
book.c | 562 | set_open_page(tmp + number);
book.c | 565 | add_failed_mess("Unable to turn page of $D.\n", ({ }));
book.c | 569 | call_out((: _ignore_open_page = 0 :), 4);
book.c | 585 | call_out((: _ignore_open_page = 0 :), 4);
book.c | 586 | set_open_page(0);
book.c | 613 | sizeof(_pages);
book.c | 628 | add_succeeded_mess("$N $V " + i + " pages from $D.\n");
book.c | 630 | add_succeeded_mess("$N $V a page from $D.\n");
book.c | 654 | set_read_mess(str, lang, size);
book.c | 667 | add_read_mess(str, type, lang, size);
book.c | 676 | return ({ });
book.c | 679 | query_read_mess();
book.c | 690 | stats();
book.c | 699 | sizeof(_pages);
book.c | 701 | dest_me();
book.c | 704 | dest_me();
book.c | 712 | int_query_static_auto_load();
book.c | 744 | this_player();
book.c | 748 | init_dynamic_arg(map["::"]);
book.c | 752 | load_object(_default_page_object);
book.c | 753 | find_object(_default_page_object);
book.c | 758 | sizeof(_pages);
book.c | 760 | this_object(), player);
book.c | 763 | move("/room/rubbish");
book.c | 769 | set_open_page(map["open page"]);
book.c | 778 | load_object(obj);
book.c | 781 | find_object(obj);
book.c | 799 | clone_object(_default_page_object);
book.c | 808 | sizeof(_pages);
book.c | 889 | query_read_short(player, 0);
book.c | 893 | query_read_short(player, 1);
book.c | 902 | query_readable_message(player, _open_page != 0);
hospital.c | 23 | set_save_file(SAVE + "/hospital");
hospital.c | 24 | set_data_directory(DATA + "/hospital");
hospital.c | 25 | set_log_directory(LOG + "/hospital");
hospital.c | 26 | set_npc_path(CHARS + "/hospital");
hospital.c | 27 | set_not_replaceable(1);
hospital.c | 29 | set_short("Our hospital");
hospital.c | 30 | set_long("This is the hospital.\n");
hospital.c | 114 | load_random_npc(string zone, int wealth, int busy);
hospital.c | 115 | load_file();
hospital.c | 116 | save_file();
hospital.c | 117 | set_save_file(string new_save);
hospital.c | 119 | hospital_log_file(string file, string format, mixed *args ...);
hospital.c | 120 | get_item(object destination, string *items);
hospital.c | 121 | query_save_file();
hospital.c | 122 | query_npcs();
hospital.c | 123 | query_hospital_npcs();
hospital.c | 124 | add_npc_type(string type, string *data);
hospital.c | 125 | regen_after_death( object dead_npc );
hospital.c | 158 | seteuid(master()->creator_file(file_name(this_object())));
hospital.c | 161 | create();
hospital.c | 200 | set_short( "Un-configured Hospital" );
hospital.c | 201 | set_long("This is an unconfigured hospital.  Find the right one.\n");
hospital.c | 202 | add_property("determinate", "the ");
hospital.c | 203 | set_light(60);
hospital.c | 205 | this_object()->setup();
hospital.c | 249 | random(sizeof(items));
hospital.c | 250 | request_item(items[i], 80 + random(21), _domain);
hospital.c | 253 | request_item(items[i], 80 + random(21) );
hospital.c | 263 | previous_object()->short());
hospital.c | 269 | move(destination);
hospital.c | 282 | if (file_size(_save_file + ".o") >
hospital.c | 283 | unguarded((: restore_object, _save_file :));
hospital.c | 322 | unguarded((: save_object, _save_file :));
hospital.c | 338 | load_file();
hospital.c | 359 | call_out("scan_for_new_data", 2);
hospital.c | 438 | query_name();
hospital.c | 442 | new(class unique_npc);
hospital.c | 455 | save_file();
hospital.c | 489 | previous_object()->query_property("start location") ) });
hospital.c | 501 | if (!new_npc->load_position || !new_npc->type );
hospital.c | 504 | random(5);
hospital.c | 507 | find_object( new_npc->load_position );
hospital.c | 512 | get_monster(new_npc->type);
hospital.c | 513 | replace_monster(previous_object(), monsters);
hospital.c | 539 | ctime(time()), _regenerated_npcs);
hospital.c | 559 | log_file( _hospital_log_directory + "/" + file, ctime(time()) + ": " + format, args ...);
hospital.c | 568 | set_log_directory( "/d/cwc/Bes_Pelargic/log" );
hospital.c | 572 | set_log_directory( "/d/cWc/BeS_pelarGic/lrg" );
hospital.c | 581 | file_name( this_object() ), DEFAULT_LOG_DIRECTORY );
hospital.c | 598 | debug_printf("No name for zone %O\n", data);
hospital.c | 599 | hospital_log_file("COMPILE_ERROR", "No name for zone %O\n", data);
hospital.c | 620 | new(class zone_info, npcs : ([ ]), groups : ([ ]), zones : ([ ]));
hospital.c | 624 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 625 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 636 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 637 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 648 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 649 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 658 | keys(data) - ({ "zone", "group", "npc", "name", "busy" });
hospital.c | 663 | query_multiple_short(bits), name);
hospital.c | 666 | save_file();
hospital.c | 675 | debug_printf("No name for npc %O\n", data);
hospital.c | 676 | hospital_log_file("COMPILE_ERROR", "No name for npc %O\n", data);
hospital.c | 681 | hospital_log_file("COMPILE_ERROR", "Required path field not present for npc %s\n", name);
hospital.c | 686 | hospital_log_file("BAD_NPC_PATH", "Bad path for npc %s (%s)\n", name, data["path"]);
hospital.c | 696 | new(class npc_info, move_zones : ({ }), commands : ({ }));
hospital.c | 722 | keys(data) - ({ "unique", "path", "move_zone", "population", "name", "delay", "transient", "nocturnal" });
hospital.c | 727 | query_multiple_short(bits), name);
hospital.c | 741 | save_file();
hospital.c | 753 | debug_printf("No name for group %O\n", data);
hospital.c | 754 | hospital_log_file("COMPILE_ERROR", "No name for group %O\n", data);
hospital.c | 772 | debug_printf("Invalid data for group (%s) %O\n", name, bing);
hospital.c | 773 | hospital_log_file("COMPILE_ERROR", "Invalid data for group (%s) %O\n", name,  bing);
hospital.c | 793 | keys(data) - ({ "npc", "name", "population", "move_zone", "protect", "defend", "transient", });
hospital.c | 798 | query_multiple_short(bits), name);
hospital.c | 820 | parse_zone(fname, thing);
hospital.c | 825 | parse_npc(fname, thing);
hospital.c | 830 | parse_group(fname, thing);
hospital.c | 834 | debug_printf("Unknown data area %s in %s\n", name, fname);
hospital.c | 835 | hospital_log_file("COMPILE_ERROR", "Unknown data area %s in %s\n", name, fname);
hospital.c | 841 | save_file();
hospital.c | 853 | debug_printf("Scan for new data.");
hospital.c | 871 | get_dir(fname + "/");
hospital.c | 874 | filter(bits, (: $1[0] != '.' :));
hospital.c | 875 | map(bits, (: $2 + "/" + $1 :), fname);
hospital.c | 880 | debug_printf("Compiling %s", fname);
hospital.c | 881 | compile_file(fname, (: finish_compiling :));
hospital.c | 885 | unguarded( (: stat(__FILE__)[1] :));
hospital.c | 940 | children(npc_path(data->path));
hospital.c | 945 | filter(data->population, (: objectp($1) :));
hospital.c | 949 | sizeof(data->population);
hospital.c | 999 | map(group->storage, (: filter($1, (: objectp($1) :)) :));
hospital.c | 1000 | filter(group->storage, (: sizeof($1) :));
hospital.c | 1006 | if (sizeof(group->storage) >
hospital.c | 1025 | debug_printf("Unable to find npc %O", npc_name);
hospital.c | 1042 | find_object( npc_path(info->path) );
hospital.c | 1044 | debug_printf("Unique npc %O", info);
hospital.c | 1046 | hospital_log_file("BAD_NPC_PATH", "Error loading %s (%s)\n", npc_name, info->path);
hospital.c | 1050 | hospital_log_file("BAD_NPC_PATH", "Failed to load %s (%s)\n", npc_name, info->path);
hospital.c | 1058 | debug_printf("NPC unique and already exists %O", npc_name);
hospital.c | 1073 | clone_object( npc_path(info->path) );
hospital.c | 1075 | add_property("transient", 1);
hospital.c | 1076 | add_property("npc_id", npc_name);
hospital.c | 1077 | add_property("hospital", base_name(this_object()));
hospital.c | 1080 | debug_printf("Failed to clone %s", npc_path(info->path));
hospital.c | 1084 | clone_object( npc_path(info->path) );
hospital.c | 1087 | debug_printf("Npc path does not exist %O (%O)", npc, npc_path(info->path));
hospital.c | 1090 | debug_printf("NPC over max population %O", npc_name);
hospital.c | 1094 | debug_printf("Broken npc data %O", info->path);
hospital.c | 1102 | add_property("npc_id", npc_name);
hospital.c | 1104 | add_move_zone(zone);
hospital.c | 1107 | init_command(cmd, 2);
hospital.c | 1142 | roll_dice(quantity);
hospital.c | 1145 | load_npc_object(npc_name);
hospital.c | 1147 | move("/room/rubbish");
hospital.c | 1148 | return ({ });
hospital.c | 1153 | init_command(cmd, 2);
hospital.c | 1165 | add_property("group_id", group_name);
hospital.c | 1170 | add_follower(ob_bing);
hospital.c | 1172 | add_defender(ob_bing);
hospital.c | 1175 | add_protector(ob_bing);
hospital.c | 1231 | query_property("npc_id");
hospital.c | 1241 | query_property("group_id");
hospital.c | 1244 | sizeof(stuff);
hospital.c | 1248 | sizeof($1) :));
hospital.c | 1290 | return ({ });
hospital.c | 1296 | load_npc_object(npc);
hospital.c | 1299 | debug_printf("Reused %s in %s", npc, zone);
hospital.c | 1301 | debug_printf("Created %s in %s", npc, zone);
hospital.c | 1302 | return ({ ob });
hospital.c | 1312 | load_group_npcs(npc);
hospital.c | 1323 | load_random_npc(extra, -1, -1);
hospital.c | 1326 | return ({ });
hospital.c | 1344 | return ({ });
hospital.c | 1360 | return ({ });
hospital.c | 1365 | return ({ });
hospital.c | 1367 | count_chances_in_zone(zone);
hospital.c | 1369 | return ({ });
hospital.c | 1371 | random(chance);
hospital.c | 1372 | create_npcs_in_zone(zone, pos);
hospital.c | 1393 | reset_eval_cost();
hospital.c | 1394 | if(stringp(npc->path) && file_size(npc_path(npc->path) + ".c") >
hospital.c | 1395 | query_npc_current_population(name, 0);
hospital.c | 1415 | query_multiple_short(keys(group->npcs)));
hospital.c | 1419 | sizeof( group->storage ), group->max_population );
hospital.c | 1427 | sprintf("$I$5=Name: %s %d\n", name, sizeof(group));
hospital.c | 1431 | write("$P$Report$P$" + txt );
hospital.c | 1440 | this_player();
hospital.c | 1442 | add_command("report", "", (: do_report :));
hospital.c | 1443 | add_command("scan", "", (: scan_for_new_data :));
hospital.c | 1449 | query_property("npc_id")] = ({ ob });
hospital.c | 1450 | if(sizeof(_cache_inventory[ob->query_property("npc_id")]) >
hospital.c | 1452 | move("/room/rubbish");
hospital.c | 1454 | query_property("npc_id")] += ({ ob });
hospital.c | 1456 | move("/room/rubbish");
hospital.c | 1472 | allocate_mapping( sizeof( _group_info ) );
hospital.c | 1478 | allocate_mapping( sizeof( _npc_info) );
hospital.c | 1483 | return ([ file_name( this_object() ) : tmp, "npcs" : tmp2 ]);
hospital.c | 1511 | values( map( _group_info, (: $2->storage :) ) );
hospital.c | 1517 | copy(_cache_inventory);
hospital.c | 1527 | keys( _npc_info );
weapon_logic.c | 20 | query_attack_names() { return copy( attack_names );
weapon_logic.c | 21 | query_attack_types() { return uniq_array( attack_types );
weapon_logic.c | 22 | query_attack_data() { return copy( attack_data );
weapon_logic.c | 23 | query_special_messages() { return copy( special_messages );
weapon_logic.c | 112 | member_array( a_name, attack_names );
weapon_logic.c | 115 | delete(attack_names, i, 1);
weapon_logic.c | 116 | delete(attack_types, i, 1);
weapon_logic.c | 117 | delete( attack_data, i * W_ARRAY_SIZE, W_ARRAY_SIZE );
weapon_logic.c | 126 | roll_MdN( data[ F_NUM ], data[ F_DIE ] );
weapon_logic.c | 151 | sizeof( attack_names );
weapon_logic.c | 153 | shuffle( order );
weapon_logic.c | 155 | sizeof( order );
weapon_logic.c | 171 | member_array( a_name, attack_names );
weapon_logic.c | 197 | sizeof( attack_data );
weapon_logic.c | 214 | sizeof( attack_data );
weapon_logic.c | 247 | stats() { return weapon_stats();
container.c | 35 | create();
container.c | 36 | create();
container.c | 49 | sqrt(_max_weight);
container.c | 94 | query_complete_weight();
container.c | 154 | lower_case( word );
container.c | 177 | file_name( dest );
container.c | 190 | log_file( "/w/trilogy/CONTAINER", str + "\n" );
container.c | 194 | test_user( _ownership );
container.c | 202 | this_player()->zap_harry_shadow();
container.c | 204 | this_object(), ({ thing }) );
container.c | 205 | log_file( "/w/trilogy/CONTAINER", str + "\n" );
container.c | 210 | write( "An unseen force stays your hand.\n" );
container.c | 211 | log_file( "/w/trilogy/CONTAINER", str + "\n" );
container.c | 217 | this_player()->zap_harry_shadow();
container.c | 219 | this_object(), ({ thing }) );
container.c | 220 | log_file( "/w/trilogy/CONTAINER", str + "\n" );
container.c | 238 | if(ob->query_max_weight() >
container.c | 245 | if(this_object()->query_length() >
container.c | 249 | if(this_object()->query_width() >
container.c | 258 | sizeof(deep_inventory(ob))) < query_max_items());
container.c | 260 | sizeof(deep_inventory(this_object())) < query_max_items();
container.c | 287 | move( dest, messin, messout );
container.c | 303 | all_inventory( this_object() );
container.c | 307 | query_visible($2)) :), looker);
container.c | 321 | clone_object(PLAYER_RECEIPT);
container.c | 322 | setup_receipt(ob);
container.c | 324 | set_weight(0);
container.c | 325 | move(this_object());
container.c | 328 | dest_me();
container.c | 331 | move("/room/rubbish");
container.c | 347 | disable_item_tracking();
container.c | 348 | move(this_object());
container.c | 349 | enable_item_tracking();
container.c | 352 | do_restore_inventory_error(ob, move_flag);
container.c | 370 | int_query_static_auto_load();
container.c | 384 | catch(inventory = create_auto_load( all_inventory( this_object() ), 0 ) );
container.c | 399 | set_player(thing);
container.c | 436 | all_inventory()->event_container_move( mover, from, to );
container.c | 447 | all_inventory()->event_container_move( this_object(), from, to );
container.c | 448 | if (objectp(from)) from->remove_tracked_items( _n_tracked_items );
container.c | 449 | if (objectp( to )) to->add_tracked_items( _n_tracked_items );
container.c | 462 | all_inventory()->set_tracked_item_status( reason );
container.c | 474 | if (environment()) environment()->add_tracked_items( n_items );
container.c | 486 | if (environment()) environment()->remove_tracked_items( n_items );
container.c | 510 | environment();
container.c | 515 | environment(looker);
container.c | 517 | environment(looker);
container.c | 536 | init_dynamic_arg( bing[ "::" ] );
container.c | 544 | handle_restore_inventory($1) :);
container.c | 546 | this_player();
container.c | 549 | load_auto_load_to_inventory( bing["inv"], this_object(), _player, f );
container.c | 551 | load_auto_load_to_inventory( bing["inv"], this_object(), this_player(), f);
container.c | 559 | init_static_arg( bing[ "::" ] );
container.c | 568 | set_can_export_inventory();
container.c | 570 | reset_can_export_inventory();
container.c | 577 | int_query_static_auto_load();
container.c | 579 | return ([ ]);
container.c | 586 | reset_eval_cost();
container.c | 587 | dest_me();
container.c | 590 | dest_me();
bit_set.c | 20 | create();
bit_set.c | 22 | set_short("anonymous set of bits");
bit_set.c | 23 | set_long("This is an unknown set of bits of some creature.\n");
bit_set.c | 25 | set_weight(5);
bit_set.c | 26 | set_name("bit");
bit_set.c | 27 | add_property( "corpse bit", 1 );
bit_set.c | 28 | add_property("cureable", 1);
bit_set.c | 36 | set_short( "set of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 37 | set_main_plural( "sets of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 39 | add_a(race_name) + ".\n");
bit_set.c | 41 | set_short( "set of "+ bit_data[ BIT_NAME ] );
bit_set.c | 42 | set_main_plural( "sets of "+ bit_data[ BIT_NAME ] );
bit_set.c | 48 | set_short( "set of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 49 | set_main_plural( "sets of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 51 | add_a(race_name) + ".\n");
bit_set.c | 53 | set_short( "set of "+ bit_data[ BIT_NAME ] );
bit_set.c | 54 | set_main_plural( "sets of "+ bit_data[ BIT_NAME ] );
bit_set.c | 60 | set_short( "set of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 61 | set_main_plural( "sets of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 63 | add_a(race_name) + ".\n");
bit_set.c | 65 | set_short( "set of "+ bit_data[ BIT_NAME ] );
bit_set.c | 66 | set_main_plural( "sets of "+ bit_data[ BIT_NAME ] );
bit_set.c | 72 | set_short( "set of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 73 | set_main_plural( "sets of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 76 | add_a(race_name) + ".\n");
bit_set.c | 78 | set_short( "set of "+ bit_data[ BIT_NAME ] );
bit_set.c | 79 | set_main_plural( "sets of "+ bit_data[ BIT_NAME ] );
bit_set.c | 86 | set_short( "set of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 87 | set_main_plural( "sets of "+ race_name +" "+ bit_data[ BIT_NAME ] );
bit_set.c | 90 | add_a(race_name) + ".\n");
bit_set.c | 92 | set_short( "set of "+ bit_data[ BIT_NAME ] );
bit_set.c | 93 | set_main_plural( "sets of "+ bit_data[ BIT_NAME ] );
bit_set.c | 100 | set_long( query_long() +"It seems to have been pickled.\n" );
effect_shadow.c | 9 | shadow( player, 1 );
effect_shadow.c | 13 | if (i == id) { if( this_object() ) destruct( this_object() );
effect_shadow.c | 14 | remove_effect_shadow(i);
effect_shadow.c | 19 | sid_to_enum( id );
effect_shadow.c | 24 | file_name( player ) +"\n" );
effect_shadow.c | 26 | destruct( this_object() );
effect_shadow.c | 29 | return (mixed)player->arg_of( enum );
effect_shadow.c | 33 | set_arg_of(player->sid_to_enum(id), newarg);
effect_shadow.c | 37 | delete_effect( (int)player->sid_to_enum( id ) );
scroll.c | 10 | create();
scroll.c | 14 | add_command("scroll", "<word'forward|backward'>", (:this_object()->do_scroll($4[0]):));
scroll.c | 19 | set_read_mess( mess, lang, size );
scroll.c | 24 | set_read_mess( mess, lang, size );
scroll.c | 47 | set_read_mess( mess, lang, size );
scroll.c | 52 | notify_fail( "Syntax: scroll forward|backward\n" );
scroll.c | 61 | set_open_page( ++open_page );
scroll.c | 62 | write( "You roll the scroll forward to the next section.\n" );
scroll.c | 68 | notify_fail( "The scroll is already open at the first section.\n" );
scroll.c | 71 | set_open_page( --open_page );
scroll.c | 72 | write( "You roll the scroll backward to the previous section.\n" );
scroll.c | 103 | int_query_static_auto_load();
scroll.c | 107 | init_dynamic_arg( args[ "::" ] );
scroll.c | 112 | if ( args[ "::" ] ) ::init_static_arg( args[ "::" ] );
storeroom.c | 4 | create();
plant.c | 8 | add_alias(name);
plant.c | 27 | set_name("plant");
plant.c | 28 | set_short((: get_plant_short() :));
plant.c | 29 | set_long((: get_plant_long() :));
plant.c | 30 | add_property("plant",1);
plant.c | 46 | init_dynamic_arg( map["::"], bing );
leaflet.c | 6 | do_open(int page_no);
leaflet.c | 10 | create();
leaflet.c | 14 | this_object()->setup();
leaflet.c | 15 | add_help_file("leaflet");
leaflet.c | 21 | query_pages() { return copy( pages );
leaflet.c | 24 | add_command( "turn", "[a] page of <direct:object>" );
leaflet.c | 26 | do_open($4[1]) :));
leaflet.c | 42 | set_read_mess( mess, lang, size );
leaflet.c | 43 | query_read_mess();
leaflet.c | 49 | add_read_mess( mess, type, lang, size );
leaflet.c | 50 | query_read_mess();
leaflet.c | 61 | set_read_mess( pages[ page ] );
leaflet.c | 65 | set_open_page( page + 2 );
leaflet.c | 71 | add_failed_mess("The page no " + page_no + " does not exist.\n");
leaflet.c | 74 | set_open_page(page_no);
leaflet.c | 80 | return ([ ]);
leaflet.c | 82 | int_query_static_auto_load();
leaflet.c | 98 | init_dynamic_arg( map[ "::" ] );
leaflet.c | 103 | set_open_page( page + 1 );
leaflet.c | 112 | query_read_short(player, 1);
leaflet.c | 114 | query_read_short(player, 0);
book_dir.c | 35 | set_book_dir("/save/books/dead/dead_page");
book_dir.c | 42 | set_no_pages(10);
book_dir.c | 44 | set_ignore_saved_pages(1);
book_dir.c | 48 | set_default_page_object("/obj/misc/nroff_paper");
book_dir.c | 49 | set_open_page (0);
book_dir.c | 51 | while (file_size(dir+i) >
book_dir.c | 52 | set_open_page(i);
book_dir.c | 53 | set_read_mess("$$" + dir + i + "$$" , language, 0);
book_dir.c | 57 | set_no_pages(max);
book_dir.c | 62 | set_no_pages(i-1);
book_dir.c | 64 | set_open_page(0);
object.c | 32 | create();
object.c | 33 | create();
object.c | 34 | create();
object.c | 35 | create();
object.c | 36 | create();
object.c | 37 | create();
object.c | 40 | creator_file( file_name( this_object() ) ) );
object.c | 42 | this_player()->query_name();
object.c | 47 | this_object()->setup();
object.c | 59 | set_name(word);
object.c | 62 | set_name(word);
object.c | 66 | add_plural( pluralize( word ) );
object.c | 75 | enchant_string();
object.c | 93 | identify_colour( colour, player ) );
object.c | 97 | identify_material( _materials[0], player, 1 ) );
object.c | 113 | long( word, dark );
object.c | 114 | calc_extra_look();
object.c | 115 | query_long_details(word, dark, this_player());
object.c | 116 | replace_long_dollars( this_player(), stuff );
object.c | 156 | if(!_materials) _materials=({ });
object.c | 188 | add_adjective(word);
object.c | 202 | add_adjective(material);
object.c | 234 | add_property("quality", quality);
object.c | 242 | query_property("quality");
object.c | 249 | if(!_materials) _materials=({ });
object.c | 261 | stats() + misc::stats() + effects::stats();
object.c | 294 | return ([ ]);
object.c | 296 | int_query_static_auto_load();
object.c | 309 | if ( query_enchant() >
object.c | 310 | set_enchant(this_object()->query_max_enchant());
object.c | 324 | copy( map_prop );
object.c | 328 | save_player_properties();
object.c | 329 | copy(timed_properties);
object.c | 333 | effect_freeze();
object.c | 334 | effects_saving();
object.c | 341 | effect_unfreeze();
object.c | 345 | this_object()->query_special_info();
object.c | 349 | query_deity();
object.c | 364 | set_name(map[ "name" ]);
object.c | 367 | set_short( map[ "short" ] );
object.c | 370 | set_main_plural( map[ "main plural" ] );
object.c | 373 | set_long( map[ "long" ] );
object.c | 376 | set_aliases( map[ "alias" ] );
object.c | 379 | set_adjectives( map[ "adjective" ] );
object.c | 382 | set_plural_adjectives( map[ "plural adjective" ] );
object.c | 385 | set_plurals( map[ "plural" ] );
object.c | 388 | set_value( map[ "value" ] );
object.c | 394 | set_weight( map[ "weight" ] );
object.c | 397 | set_colour( map[ "colour" ] );
object.c | 400 | set_material( map[ "material" ] );
object.c | 403 | set_length( map[ "length" ] );
object.c | 406 | set_width( map[ "width" ] );
object.c | 432 | query_property("no recycling");
object.c | 436 | add_property("no recycling", recycle);
object.c | 439 | reload_player_properties();
object.c | 442 | set_read_mess( map[ "read mess" ] );
object.c | 446 | set_enchant(map["enchantment"]);
object.c | 447 | set_degrade_enchant(map["degrade enchantment"]);
object.c | 449 | set_enchant_set_time(map["enchantment time"]);
object.c | 451 | set_light( map[ "light" ] );
object.c | 454 | set_effs( map[ "effects" ][ 0 ] );
object.c | 455 | set_eeq( map[ "effects" ][ 1 ] );
object.c | 457 | move_object( environment() );
object.c | 459 | init_after_save();
object.c | 463 | setup_shadow( this_object(), player );
object.c | 464 | this_object()->set_special_info( map[ "special" ] );
object.c | 467 | set_deity( map[ "consecrated" ] );
object.c | 480 | query_readable_message(player);
object.c | 482 | this_object()->effects_matching( "object.label" );
object.c | 490 | find_inv_match( "" );
object.c | 498 | query_readable_message(player, 0);
object.c | 516 | query_read_short(player);
object.c | 518 | this_object()->effects_matching( "object.label" );
object.c | 522 | this_object()->arg_of( enums[ 0 ] );
object.c | 526 | find_inv_match( "" );
object.c | 550 | file_name(this_object()));
object.c | 551 | move("/room/rubbish");
object.c | 557 | effects_desting();
object.c | 558 | dest_me();
held.c | 17 | drop(dest);
held.c | 24 | unhold_ob(this_object());
held.c | 27 | move(dest, arrive, leave);
key.c | 12 | create();
key.c | 15 | set_name("key");
key.c | 16 | set_long("A key.  Wonder where it fits?.\n");
key.c | 17 | add_plural("keys");
key.c | 18 | set_short("key");
key.c | 19 | add_property(ENGRAVE_PROP, 1);
key.c | 22 | this_object()->setup();
key.c | 36 | set_short( str + " key" );
key.c | 37 | set_main_plural( str + " keys" );
key.c | 38 | set_name( "key" );
key.c | 39 | add_plural( "keys" );
key.c | 40 | explode( str, " " );
key.c | 41 | sizeof( bits );
key.c | 42 | add_adjective( bits[i] );
key.c | 44 | add_property( prop, 1 );
key.c | 45 | set_value( 0 );
key.c | 46 | set_weight( 1 );
key.c | 53 | int_query_static_auto_load();
key.c | 54 | return ([ ]);
bit.c | 19 | set_bits();
bit.c | 20 | make_bit(string which_bit);
bit.c | 21 | make_bits(string *what_bits);
bit.c | 22 | query_bits_left();
bit.c | 23 | query_possible_bits(string);
bit.c | 26 | create();
bit.c | 28 | set_short("anonymous bit");
bit.c | 29 | set_long("This is an unknown bit of some creature.\n");
bit.c | 31 | set_weight(5);
bit.c | 32 | set_name("bit");
bit.c | 33 | add_property( "corpse bit", 1 );
bit.c | 34 | add_property("cureable", 1);
bit.c | 38 | add_command("eat", "<direct:object>");
bit.c | 68 | move( "/room/rubbish" );
bit.c | 79 | query_unrottable(bit_data[BIT_NAME]);
bit.c | 109 | set_short( race_name +" "+ bit_data[ BIT_NAME ] );
bit.c | 110 | set_main_plural( race_name +" "+ pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 112 | add_a(race_name) + ".\n");
bit.c | 114 | set_short( bit_data[ BIT_NAME ] );
bit.c | 115 | set_main_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 121 | set_short( race_name +" "+ bit_data[ BIT_NAME ] );
bit.c | 122 | set_main_plural( race_name +" "+ pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 124 | add_a(race_name) + ".\n");
bit.c | 125 | set_short( bit_data[ BIT_NAME ] );
bit.c | 126 | set_main_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 132 | set_short( race_name +" "+ bit_data[ BIT_NAME ] );
bit.c | 133 | set_main_plural( race_name +" "+ pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 135 | add_a(race_name) + ".\n");
bit.c | 137 | set_short( bit_data[ BIT_NAME ] );
bit.c | 138 | set_main_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 144 | set_short( race_name +" "+ bit_data[ BIT_NAME ] );
bit.c | 145 | set_main_plural( race_name +" "+ pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 148 | add_a(race_name) + ".\n");
bit.c | 150 | set_short( bit_data[ BIT_NAME ] );
bit.c | 151 | set_main_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 158 | set_short( race_name +" "+ bit_data[ BIT_NAME ] );
bit.c | 159 | set_main_plural( race_name +" "+ pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 162 | add_a(race_name) + ".\n");
bit.c | 164 | set_short( bit_data[ BIT_NAME ] );
bit.c | 165 | set_main_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 171 | add_extra_look(this_object());
bit.c | 174 | set_long( query_long() +"It seems to have been pickled.\n" );
bit.c | 198 | query_bit(s);
bit.c | 203 | add_adjective(race_name);
bit.c | 205 | add_adjective("unknown");
bit.c | 207 | add_adjective( explode( s, " " ) );
bit.c | 209 | sizeof( bit_data[ BIT_EXTRA ][ EXTRA_VALUE ] ) >
bit.c | 210 | set_value(bit_data[BIT_EXTRA][EXTRA_VALUE][3]);
bit.c | 212 | add_alias( bit_data[ BIT_NAME ] );
bit.c | 213 | add_plural( pluralize( bit_data[ BIT_NAME ] ) );
bit.c | 215 | add_alias(bit_data[BIT_ALIAS]);
bit.c | 216 | add_plural( pluralize( bit_data[ BIT_ALIAS ] ) );
bit.c | 220 | set_weight(temp);
bit.c | 222 | set_weight(1);
bit.c | 230 | add_bit(this_object());
bit.c | 232 | setup_long();
bit.c | 233 | set_bits();
bit.c | 246 | move( "/room/rubbish" );
bit.c | 250 | environment()->query_property( "decay rate" );
bit.c | 256 | capitalize(the_short()) + " decays to dust.\n");
bit.c | 257 | move( "/room/rubbish" );
bit.c | 261 | setup_long();
bit.c | 295 | remove_bit(this_object());
bit.c | 296 | dest_me();
bit.c | 301 | int_query_static_auto_load();
bit.c | 307 | query_dynamic_auto_load() });
bit.c | 313 | init_dynamic_arg(arg);
bit.c | 323 | init_dynamic_arg(arg[7]);
bit.c | 326 | add_bit(this_object());
bit.c | 328 | setup_long();
bit.c | 330 | set_bits();
bit.c | 341 | remove_bit( this_object() );
bit.c | 342 | set_long( query_long() +"It seems to have been pickled.\n" );
bit.c | 343 | set_short( "cured " + query_short());
bit.c | 344 | set_main_plural( "cured " + query_main_plural() );
bit.c | 345 | add_adjective("cured");
bit.c | 425 | query_possible_bits(s);
bit.c | 447 | query_possible_plural_bits(s);
bit.c | 466 | query_bit_left(s);
bit.c | 467 | query_bit_left_pl(s);
bit.c | 470 | all_inventory();
bit.c | 473 | query_weapons();
bit.c | 482 | make_bit(bit);
bit.c | 483 | return ({ tmp  });
bit.c | 492 | return ({ });
bit.c | 496 | if (sizeof(bit_pl) >
bit.c | 497 | make_bits(bit_pl[0..4]);
bit.c | 499 | make_bits(bit_pl);
bit.c | 507 | if (sizeof(bit_pl) >
bit.c | 508 | make_bits(bit_pl[0..4]);
bit.c | 510 | make_bits(bit_pl);
bit.c | 520 | return ({ });
bit.c | 534 | query_bit(which_bit);
bit.c | 535 | if ((sizeof(bit[2][2]) >
bit.c | 536 | clone_object( bit[2][2] );
bit.c | 538 | clone_object("/std/bit");
bit.c | 540 | clone_object("/std/bit");
bit.c | 542 | set_race_ob(race_ob);
bit.c | 543 | if (race_name) bitobj->set_race_name(race_name);
bit.c | 544 | set_race_name(race_ob->query_name());
bit.c | 545 | set_corpse_weight(query_weight());
bit.c | 547 | set_bit(bit[0], 0);
bit.c | 549 | set_bit(bit[0], (decay * 2) / 3);
bit.c | 552 | sizeof(bits_gone);
bit.c | 553 | member_array(bits_gone[i], bit[BIT_EXTRA]);
bit.c | 555 | add_bit_gone(bits_gone[i]);
bit.c | 560 | move(environment());
bit.c | 575 | make_bit(bit) });
bit.c | 594 | query_bit( poss_bits[ 0 ] );
bit.c | 614 | sizeof( bits );
bit.c | 615 | add_bit_gone( bits[ i ] );
bit.c | 628 | query_bits();
bit.c | 630 | sizeof( bit_pl );
bit.c | 652 | query_bits();
bit.c | 654 | sizeof(these_bits[2]);
bit.c | 655 | sizeof(all_bits);
bit.c | 658 | delete(all_bits, j, 2);
bit.c | 666 | query_determinate(caller);
bit.c | 678 | explode( temp, " " );
bit.c | 679 | map( temp2, (: capitalize( $1 ) :) );
bit.c | 680 | implode( temp2, "" );
bit.c | 682 | capitalize( race_ob->query_name() ) ;
export_inventory.c | 103 | find_inv_match(words, looker);
setup.c | 28 | this_object()->setup();
setup.c | 37 | this_object()->reset();
wearable.c | 24 | create();
wearable.c | 25 | set_damage_chance( 25 );
wearable.c | 42 | cond_string();
wearable.c | 76 | set_wear_remove_func(base_name(this_object()), "do_fluff");
wearable.c | 82 | write(capitalize(the_short()) + " is being removed.\n");
wearable.c | 84 | write(capitalize(the_short()) + " is being worn.\n");
wearable.c | 106 | copy(wear_effects);
wearable.c | 137 | do_damage( type, amount );
wearable.c | 189 | this_object()->remove_hide_invis( "concealed" );
wearable.c | 194 | debug_printf( "Wear/Remove func is %O. Not called.\n", wear_remove_func );
wearable.c | 199 | call_other( wear_remove_func[ 0 ], wear_remove_func[ 1 ], 0, worn_by );
wearable.c | 202 | call_other( wear_remove_func[ 0 ], wear_remove_func[ 1 ], thing, thing );
wearable.c | 208 | sizeof( wear_effects );
wearable.c | 210 | taken_off( this_object(), wear_effects[ i ] );
wearable.c | 213 | add_effect( wear_effects[ i ], this_object() );
wearable.c | 215 | person_removing_item(this_object(), worn_by);
wearable.c | 225 | now_removed( this_object() );
wearable.c | 226 | this_object()->add_adjective("worn");
wearable.c | 227 | this_object()->remove_adjective("unworn");
wearable.c | 229 | this_object()->remove_adjective("worn");
wearable.c | 230 | this_object()->add_adjective("unworn");
wearable.c | 233 | now_worn( this_object() );
wearable.c | 261 | add_immune_to("sharp");
wearable.c | 269 | add_immune_to("sharp");
wearable.c | 279 | sizeof( args );
wearable.c | 280 | add_immune_to( args[ i ] );
wearable.c | 300 | sizeof( args );
wearable.c | 301 | remove_immune_to( args[ i ] );
wearable.c | 304 | member_array( args, immune_to );
wearable.c | 306 | delete( immune_to, i, 1 );
wearable.c | 332 | this_object()->query_property( "virtual name" );
wearable.c | 335 | this_object()->query_short(), type );
wearable.c | 338 | this_object()->query_short(), type );
wearable.c | 341 | write(str);
wearable.c | 343 | call_out("move", 2, "/room/broken");
wearable.c | 359 | log_bad_type(word);
wearable.c | 364 | query_equivilant_type(word);
wearable.c | 366 | log_bad_type( word );
wearable.c | 370 | sizeof(word);
wearable.c | 372 | query_equivilant_type(word[i]);
wearable.c | 374 | log_bad_type( word );
wearable.c | 389 | environment()->wear_armour( this_object() );
wearable.c | 395 | break_me();
wearable.c | 400 | this_object()->short( 0 ) +" breaks!\n", worn_by );
wearable.c | 401 | remove_armour( this_object() );
wearable.c | 404 | move_object("/room/rubbish");
wearable.c | 417 | sizeof( wear_effects );
wearable.c | 421 | sizeof( immune_to );
wearable.c | 425 | short() }) });
wearable.c | 456 | init_static_arg( map[ "condition" ] );
wearable.c | 479 | call_out( "player_wear", 0 );
wearable.c | 481 | init_dynamic_arg( map[ "condition" ] );
property.c | 54 | time();
property.c | 61 | file_name( previous_object() ), time(), tim });
property.c | 63 | time(), tim });
property.c | 77 | map_delete(map_prop, var);
property.c | 79 | map_delete(timed_properties, var);
property.c | 82 | map_delete(property_stats, var);
property.c | 102 | map_delete(timed_properties, str);
property.c | 103 | map_delete(map_prop, str);
property.c | 106 | map_delete(property_stats, str);
property.c | 123 | map_delete(timed_properties, str);
property.c | 124 | map_delete(map_prop, str);
property.c | 126 | map_delete(property_stats, str);
property.c | 145 | map_delete(timed_properties, str);
property.c | 146 | map_delete(map_prop, str);
property.c | 148 | map_delete(property_stats, str);
property.c | 152 | time();
property.c | 170 | map_delete(timed_properties, str);
property.c | 171 | map_delete(map_prop, str);
property.c | 173 | map_delete(property_stats, str);
property.c | 178 | undefinedp(map_prop[str]);
property.c | 189 | return ([ ]);
property.c | 199 | return ([ ]);
property.c | 230 | map_delete(timed_properties, prop);
property.c | 232 | time();
property.c | 244 | map_delete(timed_properties, prop);
property.c | 246 | time();
property.c | 257 | this_object()->query_properties();
property.c | 259 | return ({ });
property.c | 260 | keys( props );
property.c | 261 | values( props );
property.c | 270 | map_delete(timed_properties, k[ i ]);
property.c | 271 | map_delete(map_prop, k[ i ]);
property.c | 274 | map_delete(property_stats, k[i]);
property.c | 281 | time();
property.c | 289 | array_to_string( v[ i ] ) }) });
property.c | 294 | mapping_to_string( v[ i ] ) }) });
property.c | 314 | return ({ });
property.c | 328 | return ([ ]);
property.c | 333 | map_delete(property_stats, property1);
club_listing.c | 22 | query_multiple_short(sort_array(map(arr, (: capitalize :)), 0));
club_listing.c | 35 | environment(ob);
club_listing.c | 37 | environment(ob);
club_listing.c | 71 | query_members(club);
club_listing.c | 73 | filter(members, (: find_player($1) && find_player($1)->query_cap_name() :) );
club_listing.c | 80 | query_channel_members(lower_case(club));
club_listing.c | 83 | query_name():0 :));
club_listing.c | 87 | sort_and_capitalise(bing) + ".\n");
club_listing.c | 92 | map(members, (: add_flags_to_name($(club), $1, $1) :))) + ".\n");
club_listing.c | 117 | query_clubs();
club_listing.c | 119 | add_failed_mess("There are no clubs or families to list.\n");
club_listing.c | 123 | filter(clubs, (: CLUB_HANDLER->is_family($1) :));
club_listing.c | 126 | filter(clubs, (: !CLUB_HANDLER->is_family($1) :));
club_listing.c | 129 | sort_array(clubs, 1);
club_listing.c | 134 | sizeof(CLUB_HANDLER->query_members(club));
club_listing.c | 162 | write("$P$Family list$P$" + stuff);
club_listing.c | 164 | write("$P$Club list$P$" + stuff);
club_listing.c | 199 | is_member_of(name, person);
club_listing.c | 215 | query_club_description(name);
club_listing.c | 220 | filter(CLUB_HANDLER->query_members(name), (: find_player($1) :));
club_listing.c | 236 | query_valid_positions(name);
club_listing.c | 245 | query_election_status(name);
club_listing.c | 258 | query_nominated_for(name, pos);
club_listing.c | 284 | query_election_status(name);
club_listing.c | 298 | query_nominated_for(name, pos);
club_listing.c | 322 | query_minimum_next_election(name);
club_listing.c | 349 | add_failed_mess("There is no club called " + name + ".\n");
club_listing.c | 362 | club_info_string(name, show_election, person));
club_listing.c | 380 | test_family(player);
club_listing.c | 390 | query_club_region(family);
club_listing.c | 394 | strcmp($1->related_to, $2->related_to) :));
club_listing.c | 395 | test_gender(player);
club_listing.c | 400 | sizeof(wombles);
club_listing.c | 402 | capitalize(wombles[i]->related_to);
club_listing.c | 435 | query_club_description(name);
club_listing.c | 441 | capitalize(per);
club_listing.c | 445 | strcmp($1->related_to, $2->related_to) :));
club_listing.c | 446 | test_gender(per);
club_listing.c | 452 | sizeof(wombles);
club_listing.c | 453 | test_gender(wombles[i]->related_to);
club_listing.c | 458 | capitalize(wombles[i]->related_to);
club_listing.c | 489 | add_failed_mess("There is no family called " + name + ".\n");
club_listing.c | 494 | family_info_string(name, person));
club_listing.c | 526 | query_clubs();
club_listing.c | 531 | filter(clubs, (: CLUB_HANDLER->is_family($1) :));
club_listing.c | 534 | filter(clubs, (: !CLUB_HANDLER->is_family($1) :));
club_listing.c | 537 | sort_array(clubs, 1);
club_listing.c | 540 | sizeof(CLUB_HANDLER->query_members(club));
club_listing.c | 598 | is_member_of(name, person);
club_listing.c | 604 | query_club_description(name);
club_listing.c | 621 | query_club_description(name);
club_listing.c | 625 | query_members(name);
club_listing.c | 626 | sort_array(stuff, 0);
club_listing.c | 627 | map(stuff, (: www_finger_name(capitalize($1)) :) );
club_listing.c | 632 | query_recruiters(name);
club_listing.c | 633 | sort_array(stuff, 0);
club_listing.c | 634 | map(stuff, (: www_finger_name(capitalize($1)) :) );
club_listing.c | 649 | query_valid_positions(name);
club_listing.c | 659 | query_election_status(name);
club_listing.c | 673 | query_nominated_for(name, pos);
club_listing.c | 683 | query_nominators_for(name, pos, nom);
club_listing.c | 684 | sort_array(stuff, 0);
club_listing.c | 685 | map(stuff, (: www_finger_name(capitalize($1)) :) );
club_listing.c | 699 | query_election_status(name);
club_listing.c | 709 | query_nominated_for(name, pos);
club_listing.c | 711 | sort_array(stuff, 0);
club_listing.c | 712 | map(stuff, (: www_finger_name(capitalize($1)) :) );
club_listing.c | 770 | query_club_description(name);
club_listing.c | 776 | www_finger_name(capitalize(per));
club_listing.c | 781 | strcmp($1->related_to, $2->related_to) :));
club_listing.c | 783 | test_gender(per);
club_listing.c | 788 | sizeof(wombles);
club_listing.c | 789 | test_gender(wombles[i]->related_to);
club_listing.c | 808 | query_members(name);
club_listing.c | 809 | sort_array(stuff, 0);
club_listing.c | 810 | map(stuff, (: www_finger_name(capitalize($1)) :) );
expressions.c | 68 | parse_operator(string str, string token);
expressions.c | 69 | query_expression_string(class parse_node* expr, int brief);
expressions.c | 70 | evaluate_expression(class parse_node* expr, mixed args ...);
expressions.c | 71 | add_allowed_function(string name, int type, int* args, function value);
expressions.c | 72 | query_property(string name);
expressions.c | 73 | is_array_type(int type);
expressions.c | 74 | sizeof_function(mixed args ...);
expressions.c | 75 | filter_function(mixed args ...);
expressions.c | 127 | new(class variable_thing);
expressions.c | 144 | new(class function_thing);
expressions.c | 182 | keys(_variables);
expressions.c | 216 | keys(_functions);
expressions.c | 228 | return ({ });
expressions.c | 262 | keys(_user_functions);
expressions.c | 335 | map_delete(_user_functions, name);
expressions.c | 376 | query_type_name(type - EXPRESSION_TYPE_ARRAY_OFFSET);
expressions.c | 451 | new(class parse_node);
expressions.c | 465 | make_node(type, ({ }), ({ }));
expressions.c | 469 | make_node(type, 0, ({ }));
expressions.c | 471 | make_node(type, 0, ({ }));
expressions.c | 473 | make_node(type, "", ({ }));
expressions.c | 476 | make_node(type, ({ }), ({ }));
expressions.c | 478 | make_node(type, ([ ]), ({ }));
expressions.c | 480 | make_node(type, 0.0, ({ }));
expressions.c | 482 | make_node(EXPRESSION_TYPE_OPERATOR, EXPRESSION_FALSE, ({ }));
expressions.c | 484 | make_node(type, 0, ({ }));
expressions.c | 566 | is_number(type);
expressions.c | 579 | while (strlen(str) >
expressions.c | 584 | return ({ "", str });
expressions.c | 593 | while (strlen(str) >
expressions.c | 598 | return ({ str[0..i], str[i+1..] });
expressions.c | 603 | while (strlen(str) >
expressions.c | 608 | return ({ str[0..i], str[i+1..] });
expressions.c | 615 | while (strlen(str) >
expressions.c | 619 | return ({ str[0..i], str[i+1..] });
expressions.c | 624 | strsrch(str[i + 1..], "\"");
expressions.c | 630 | while (str[i - 1] == '\\');
expressions.c | 631 | return ({ str[0..i], str[i+1..] });
expressions.c | 636 | strsrch(str[i + 1..], "'");
expressions.c | 642 | while (str[i - 1] == '\\');
expressions.c | 643 | return ({ str[0..i], str[i+1..] });
expressions.c | 648 | if (strlen(str) >
expressions.c | 650 | return ({ str[0..1], str[2..] });
expressions.c | 652 | return ({ str[0..0], str[1..] });
expressions.c | 655 | while (strlen(str) >
expressions.c | 666 | return ({ str[0..i], str[i+1..] });
expressions.c | 669 | return ({ str[0..0], str[1..] });
expressions.c | 690 | query_token(str);
expressions.c | 705 | query_token(str);
expressions.c | 712 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 734 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 739 | query_token(str);
expressions.c | 744 | query_token(token_ret[1]);
expressions.c | 746 | while (token_ret[0] != ")");
expressions.c | 753 | sizeof(_functions[fname]->args);
expressions.c | 765 | query_token(str);
expressions.c | 780 | query_token(str);
expressions.c | 786 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 790 | sizeof(args);
expressions.c | 793 | sizeof(_user_functions[fname]->arg_types);
expressions.c | 802 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 807 | query_token(str);
expressions.c | 816 | query_token(token_ret[1]);
expressions.c | 818 | while (token_ret[0] != ")");
expressions.c | 825 | sizeof(_user_functions[fname]->arg_types);
expressions.c | 836 | make_node(EXPRESSION_TYPE_OPERATOR, EXPRESSION_TRUE, ({ }));
expressions.c | 840 | make_node(EXPRESSION_TYPE_OPERATOR, EXPRESSION_FALSE, ({ }));
expressions.c | 845 | query_token(str);
expressions.c | 850 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 871 | query_token(str);
expressions.c | 880 | query_token(token_ret[1]);
expressions.c | 885 | query_token(token_ret[1]);
expressions.c | 896 | make_node(EXPRESSION_TYPE_ARRAY_NULL, 0, ({ }));
expressions.c | 905 | sscanf(token, "%d", bing);
expressions.c | 906 | make_node(EXPRESSION_TYPE_INTEGER, bing, ({ }));
expressions.c | 909 | make_node(EXPRESSION_TYPE_MONEY, 0, ({ }));
expressions.c | 912 | query_property("place");
expressions.c | 916 | value_from_string(token[1..<2], place);
expressions.c | 918 | value_from_string(token[0..<2], place);
expressions.c | 921 | make_node(EXPRESSION_TYPE_MONEY, bing, ({ }));
expressions.c | 929 | make_node(EXPRESSION_TYPE_STRING, token[1..<2], ({ }));
expressions.c | 932 | query_variable_type(token);
expressions.c | 934 | query_function_variable_type(token);
expressions.c | 940 | query_function_variable_position(token);
expressions.c | 944 | make_node(EXPRESSION_TYPE_VARIABLE, token, ({ }));
expressions.c | 949 | return ({ ({ num }), str, type });
expressions.c | 959 | query_token(str);
expressions.c | 963 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 966 | query_token(str);
expressions.c | 982 | parse_node(str, token);
expressions.c | 997 | query_token(str);
expressions.c | 1003 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1014 | query_token(token_ret[1]);
expressions.c | 1015 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1022 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1026 | query_token(str);
expressions.c | 1046 | parse_bracket(str, token);
expressions.c | 1053 | query_token(str);
expressions.c | 1068 | query_token(token_ret[1]);
expressions.c | 1072 | parse_plus(token_ret[1], token_ret[0]);
expressions.c | 1082 | query_type_name(stuff2[EXPRESSION_TYPE]);
expressions.c | 1100 | parse_plus(str, token);
expressions.c | 1107 | query_token(str);
expressions.c | 1122 | query_token(token_ret[1]);
expressions.c | 1126 | parse_multiply(token_ret[1], token_ret[0]);
expressions.c | 1135 | query_type_name(stuff2[EXPRESSION_TYPE]);
expressions.c | 1153 | parse_multiply(str, token);
expressions.c | 1160 | query_token(str);
expressions.c | 1189 | query_token(token_ret[1]);
expressions.c | 1193 | parse_compare(token_ret[1], token_ret[0]);
expressions.c | 1205 | query_type_name(stuff2[EXPRESSION_TYPE]);
expressions.c | 1221 | query_token(str);
expressions.c | 1225 | parse_not(stuff[1], stuff[0]);
expressions.c | 1231 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1239 | parse_compare(str, token);
expressions.c | 1250 | parse_not(str, token);
expressions.c | 1257 | query_token(str);
expressions.c | 1273 | query_token(token_ret[1]);
expressions.c | 1277 | parse_boolean(token_ret[1], token_ret[0]);
expressions.c | 1286 | query_type_name(stuff2[EXPRESSION_TYPE]);
expressions.c | 1306 | query_token(str);
expressions.c | 1310 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1317 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1320 | query_token(stuff[EXPRESSION_PARSE_STRING]);
expressions.c | 1329 | query_token(token_ret[1]);
expressions.c | 1333 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1337 | query_token(stuff2[EXPRESSION_PARSE_STRING]);
expressions.c | 1342 | query_token(token_ret[1]);
expressions.c | 1346 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1366 | query_type_name(stuff3[EXPRESSION_TYPE]);
expressions.c | 1370 | query_token(stuff3[EXPRESSION_PARSE_STRING]);
expressions.c | 1375 | query_null_type(stuff2[EXPRESSION_TYPE]) }) });
expressions.c | 1393 | parse_boolean(str, token);
expressions.c | 1413 | query_token(lower_case(str));
expressions.c | 1417 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1420 | return ({ });
expressions.c | 1426 | return ({ });
expressions.c | 1431 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1432 | return ({ });
expressions.c | 1450 | query_token(lower_case(str));
expressions.c | 1454 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1458 | printf("%O", _error_string);
expressions.c | 1459 | return ({ });
expressions.c | 1465 | printf("%O", _error_string);
expressions.c | 1466 | return ({ });
expressions.c | 1471 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1472 | printf("%O", query_expression_string(stuff[EXPRESSION_TREE], 0));
expressions.c | 1473 | printf("%O", evaluate_expression(stuff[EXPRESSION_TREE]));
expressions.c | 1474 | return ({ });
expressions.c | 1477 | printf("%O", query_expression_string(stuff[EXPRESSION_TREE], 0));
expressions.c | 1478 | printf("%O", evaluate_expression(stuff[EXPRESSION_TREE]));
expressions.c | 1495 | query_token(lower_case(str));
expressions.c | 1499 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1503 | printf("%O", _error_string);
expressions.c | 1504 | return ({ });
expressions.c | 1510 | printf("%O", _error_string);
expressions.c | 1511 | return ({ });
expressions.c | 1516 | query_type_name(stuff[EXPRESSION_TYPE]);
expressions.c | 1517 | printf("%O", query_expression_string(stuff[EXPRESSION_TREE], 0));
expressions.c | 1518 | printf("%O", evaluate_expression(stuff[EXPRESSION_TREE]));
expressions.c | 1519 | return ({ });
expressions.c | 1522 | printf("%O", stuff[EXPRESSION_TREE]);
expressions.c | 1523 | printf("%O", query_expression_string(stuff[EXPRESSION_TREE], 0));
expressions.c | 1524 | printf("%O", evaluate_expression(stuff[EXPRESSION_TREE]));
expressions.c | 1542 | query_token(def);
expressions.c | 1549 | return ({ name, ({ }), ({ }) });
expressions.c | 1552 | query_token(def);
expressions.c | 1557 | query_token(token[1]);
expressions.c | 1561 | query_type_value(token[0]);
expressions.c | 1564 | query_token(token[1]);
expressions.c | 1565 | query_type_value(token[0]);
expressions.c | 1575 | query_token(token[1]);
expressions.c | 1582 | query_token(token[1]);
expressions.c | 1588 | query_token(token[1]);
expressions.c | 1596 | return ({ name, arg_types, arg_names });
expressions.c | 1624 | parse_user_expression_definition(def);
expressions.c | 1640 | sizeof(arg_types);
expressions.c | 1641 | new(class func_variable_thing);
expressions.c | 1647 | query_token(lower_case(str));
expressions.c | 1651 | parse_operator(token_ret[1], token_ret[0]);
expressions.c | 1659 | printf("%O", _error_string);
expressions.c | 1666 | printf("%O", _error_string);
expressions.c | 1670 | new(class user_function_thing);
expressions.c | 1690 | sizeof(old_fluff->arg_types) && i < sizeof(fluff->arg_types);
expressions.c | 1712 | sizeof(arr);
expressions.c | 1735 | query_property("place");
expressions.c | 1744 | sizeof(expr);
expressions.c | 1767 | query_expression_string(expr[i]->tree[0], brief);
expressions.c | 1769 | query_expression_string(expr[i]->tree[1], brief);
expressions.c | 1869 | money_value_string(expr[i]->value, place) });
expressions.c | 1921 | sizeof(thing->arg_types);
expressions.c | 1949 | make_node(EXPRESSION_TYPE_BOOLEAN, 0, ({ }));
expressions.c | 1961 | make_node(EXPRESSION_TYPE_BOOLEAN, !stack[<1]->value, 0);
expressions.c | 1967 | sizeof(args) }) ...);
expressions.c | 1969 | make_node(EXPRESSION_TYPE_BOOLEAN, 0, 0) });
expressions.c | 1973 | make_node(EXPRESSION_TYPE_BOOLEAN, new_node->value, 0) });
expressions.c | 1982 | make_node(EXPRESSION_TYPE_BOOLEAN, 1, 0) });
expressions.c | 1986 | make_node(EXPRESSION_TYPE_BOOLEAN, new_node->value, 0) });
expressions.c | 2072 | query_expression_string(expr, 1) + ")\n");
expressions.c | 2073 | query_null_type(EXPRESSION_TYPE_INTEGER) });
expressions.c | 2091 | make_node(EXPRESSION_TYPE_BOOLEAN, 1, 0) });
expressions.c | 2094 | make_node(EXPRESSION_TYPE_BOOLEAN, 0, 0) });
expressions.c | 2097 | printf("Unknown operator %O\n", bing);
expressions.c | 2106 | copy(bing) });
expressions.c | 2109 | copy(bing) });
expressions.c | 2112 | copy(bing) });
expressions.c | 2127 | printf("Unknown function %O\n", fname);
expressions.c | 2131 | sizeof(args) }) ...);
expressions.c | 2133 | printf("Broken return stuff.\n");
expressions.c | 2148 | printf("Unknown type %O\n", bing);
expressions.c | 2151 | printf("%O: %O\n", bing, stack);
item_chat.c | 37 | check_chat();
item_chat.c | 47 | check_chat();
item_chat.c | 90 | query_dynamic_auto_load(), ]);
item_chat.c | 96 | init_dynamic_arg(map["::"]);
item_chat.c | 98 | init_dynamic_arg(map["chat"]);
item_chat.c | 110 | write( "Incorrect args to item_chat.\n" );
item_chat.c | 121 | this_object()->poss_short() }) ) :) );
item_chat.c | 126 | check_chat();
item_chat.c | 138 | check_chat();
item_chat.c | 168 | random( sizeof(_chats[ 2 ]) );
item_chat.c | 171 | sizeof( _chats[ 2 ] );
item_chat.c | 181 | filter( all_inventory(env), (: interactive($1) :) );
item_chat.c | 187 | call_other( this_object(), stuff[ 1 .. ] );
item_chat.c | 189 | tell_room( env, stuff + "\n" );
item_chat.c | 194 | random( _chats[ 1 ] - _chats[ 0 ] + 1 ) );
item_chat.c | 214 | random( _chats[ 1 ] - _chats[ 0 ] + 1 ) ) / 2 );
item_chat.c | 234 | sscanf( chat, "%*s$%*s_short:%s$%*s", old_ob );
item_chat.c | 236 | replace( chat, old_ob, file_name(this_object()) );
item_chat.c | 248 | if( (info = map["_chats"]) && arrayp(info) && sizeof(info) >
item_chat.c | 249 | map( info[2], "fix_saved_chat", this_object() );
item_chat.c | 250 | item_chat( info );
item_chat.c | 253 | chat_on();
item_chat.c | 255 | chat_off();
cute_look.c | 25 | process_living( object *int_livings );
cute_look.c | 26 | process_non_living( object *int_non_livings, int start );
cute_look.c | 27 | set_ignore_livings_in_inventory( int ignore );
cute_look.c | 28 | ignore_livings_in_inventory();
cute_look.c | 33 | env_check(object ob) { return environment(ob) == this_object();
cute_look.c | 35 | living_check(object ob) { return living(ob);
cute_look.c | 37 | there_check(object ob) { return ob->query_property("there");
cute_look.c | 64 | ignore_livings_in_inventory();
cute_look.c | 69 | this_object()->find_inv_match( "", this_player() );
cute_look.c | 70 | this_player() });
cute_look.c | 71 | filter_array( things, "env_check", this_object());
cute_look.c | 79 | filter(things, "living_check", this_object());
cute_look.c | 86 | process_living( livings );
cute_look.c | 94 | process_non_living( non_livings, groups );
cute_look.c | 127 | keys( positions );
cute_look.c | 140 | a_short();
cute_look.c | 145 | if ( sizeof( positions[ current_pos ] ) >
cute_look.c | 180 | return ({ int_ret_string, sizeof( all_positions ) }) ;
cute_look.c | 197 | this_object()->query_property( "here" );
cute_look.c | 202 | unique_mapping( non_livings, "there_check", this_object());
cute_look.c | 206 | map_delete( positions, 0 );
cute_look.c | 218 | query_how_many() >
cute_look.c | 222 | a_short() + " is " + position });
cute_look.c | 224 | a_short() + " are " + position });
cute_look.c | 245 | list_contents( string words ) { write( query_contents( words ) );
cute_look.c | 252 | ctime( time() ), file_name( this_object() ) );
cute_look.c | 261 | ctime( time() ), file_name( this_object() ) );
id.c | 32 | id_adjective(string);
id.c | 33 | id_plural(string str);
id.c | 34 | faux_id_allowed();
id.c | 40 | new( class Id );
id.c | 58 | set_name("rabbit");
id.c | 93 | capitalize(_id->name);
id.c | 97 | setup_id_class();
id.c | 131 | set_name("tub");
id.c | 132 | set_short("green bath tub");
id.c | 133 | add_alias("bathtub");
id.c | 134 | add_adjective("green");
id.c | 135 | add_adjective("bath");
id.c | 157 | member_array(str, _id->alias);
id.c | 208 | add_faux_alias( aka );
id.c | 238 | member_array(str, _id->faux_alias);
id.c | 304 | member_array(str, query_alias()) != -1) );
id.c | 313 | explode(str, " ") - ({ "" });
id.c | 374 | member_array(str, _id->plurals);
id.c | 409 | return (member_array(str, _id->plurals) != -1);
id.c | 437 | sizeof(str);
id.c | 438 | add_adjective(str[i]);
id.c | 443 | explode(str, " ");
id.c | 446 | sizeof(str);
id.c | 464 | sizeof(str);
id.c | 465 | remove_adjective(str[i]);
id.c | 469 | delete(_id->adjectives, i, 1);
id.c | 493 | add_faux_adjective( adj );
id.c | 498 | explode(str, " ");
id.c | 528 | remove_faux_adjective( adj );
id.c | 532 | member_array(str, _id->faux_adjectives);
id.c | 594 | return (member_array(word, query_adjectives()) != -1);
id.c | 625 | sizeof(str);
id.c | 626 | add_plural_adjective(str[i]);
id.c | 631 | explode(str, " ");
id.c | 633 | sizeof(str);
id.c | 651 | sizeof(str);
id.c | 652 | remove_plural_adjective(str[i]);
id.c | 656 | delete(_id->plural_adjectives, i, 1);
id.c | 679 | return (member_array(word, _id->plural_adjectives) != -1);
id.c | 685 | return ({ _id->name, file_name(this_object()) }) + query_alias();
id.c | 690 | query_plurals();
id.c | 695 | query_adjectives();
id.c | 700 | query_plural_adjectives();
id.c | 706 | this_object();
id.c | 714 | this_object();
id.c | 718 | this_object();
id.c | 721 | this_object();
id.c | 739 | this_object();
id.c | 745 | this_object();
trap.c | 66 | this_object()->set_open_trap(this_object(), "basic_trap");
trap.c | 68 | this_object()->set_lock_trap(this_object(), "basic_trap");
trap.c | 152 | write(_trap_message[0]);
trap.c | 153 | say(_trap_message[1], this_player());
trap.c | 155 | write(_trap_message);
trap.c | 159 | this_player()->do_death();
trap.c | 161 | this_player()->adjust_hp(-(_trap_effect));
trap.c | 164 | this_player()->add_effect(_trap_effect[0], _trap_effect[1]);
trap.c | 166 | this_player()->add_effect(_trap_effect[0], _trap_effect[1..]);
trap.c | 168 | this_player()->add_effect(_trap_effect);
misc.c | 28 | check_log_status( object *parray );
misc.c | 32 | create();
misc.c | 35 | call_out( "check_log_status", 1, previous_object(-1) );
misc.c | 82 | environment()->add_weight(w);
misc.c | 114 | environment()->add_weight(w-weight);
misc.c | 135 | query_complete_weight() { return (int)this_object()->query_weight();
misc.c | 148 | query_total_value(amt);
misc.c | 154 | query_total_value( ({ coin, amt }) );
misc.c | 183 | return (mixed *)MONEY_HAND->create_money_array(value);
misc.c | 205 | create_money_array(value);
misc.c | 206 | member_array(type, m_a);
misc.c | 250 | m_delete( value_info, word );
misc.c | 300 | this_object()->query_value();
misc.c | 301 | m_indices( value_info );
misc.c | 302 | sizeof( info );
misc.c | 303 | query_property( info[ i ] +" valued" );
misc.c | 314 | this_object()->query_max_enchant();
misc.c | 319 | query_material(), how );
misc.c | 343 | this_object()->query_value();
misc.c | 344 | m_indices( value_info );
misc.c | 345 | sizeof( info );
misc.c | 355 | this_object()->query_max_enchant();
misc.c | 360 | query_material(), place );
misc.c | 377 | find_object(dest);
misc.c | 379 | load_object(dest);
misc.c | 384 | this_object()->query_complete_weight();
misc.c | 389 | environment();
misc.c | 391 | move(dest, messin, messout);
misc.c | 394 | add_weight(-w);
misc.c | 399 | add_weight(-w);
misc.c | 403 | inform_of_light_level_change(from);
misc.c | 404 | inform_of_light_level_change(dest);
misc.c | 413 | environment()->add_weight( -(int)this_object()->query_complete_weight() );
misc.c | 415 | adjust_light( -query_my_light() );
misc.c | 417 | dest_me();
misc.c | 429 | m_indices( value_info );
misc.c | 430 | sizeof( info );
misc.c | 443 | base_name( this_object() ), parray[2]->query_name() );
misc.c | 444 | this_object()->add_property( "CT", time() );
misc.c | 447 | base_name( this_object() ) ), "cheat" );
auto_load.c | 21 | query_dynamic_auto_load();
auto_load.c | 22 | add_auto_load_value(map, AUTO_LOAD_TAG, "name", name);
auto_load.c | 48 | query_dynamic_auto_load();
auto_load.c | 49 | add_auto_load_value(map, AUTO_LOAD_TAG, "name", name);
move.c | 68 | move(find_player("pinkfish"));
move.c | 70 | move("/d/am/am/mendeddrum");
move.c | 74 | the_short()+" flaps away hopelessly.\n");
move.c | 90 | environment();
move.c | 97 | event( prev, "exit", messout, dest );
move.c | 106 | this_object()->remove_property( "there" );
move.c | 108 | move_object (dest);
move.c | 110 | this_object()->event_move_object( prev, dest );
move.c | 113 | event( dest, "enter", messin, prev );
move.c | 115 | this_object()->remove_hide_invis( "concealed" );
move.c | 116 | this_object()->remove_hide_invis( "secreted" );
move.c | 165 | event( environment(), "dest_me" );
move.c | 167 | this_object()->event_destruct();
move.c | 168 | destruct( this_object() );
move.c | 183 | destruct( this_object() );
hide_invis.c | 25 | copy( _hide_invis );
hide_invis.c | 44 | event( environment( this_object() ), "hide_invis", 1, type, 0 );
hide_invis.c | 69 | call_other( gone[0], gone[1], quiet );
hide_invis.c | 71 | call_other( gone[0], gone[1] );
hide_invis.c | 72 | map_delete( _hide_invis, type );
hide_invis.c | 75 | event( environment( this_object() ), "hide_invis", 0, type, quiet );
hide_invis.c | 89 | query_skill_bonus( SKILL );
hide_invis.c | 135 | keys( _hide_invis );
hide_invis.c | 140 | sizeof( types );
hide_invis.c | 148 | if( perception_check( thing ) >
hide_invis.c | 178 | keys( _hide_invis );
hide_invis.c | 184 | sizeof( types );
read_desc.c | 24 | add_read_mess(mixed str, string type, string lang, int size);
read_desc.c | 25 | query_property(string name);
read_desc.c | 97 | query_read_mess() { return copy( _read_mess );
read_desc.c | 134 | query_language_size(lang, str));
read_desc.c | 141 | query_language_size(lang, str));
read_desc.c | 168 | sizeof(_read_mess);
read_desc.c | 202 | this_player();
read_desc.c | 204 | query_read_mess();
read_desc.c | 214 | evaluate( mess );
read_desc.c | 218 | unguarded( (: read_file, file +".txt" :) );
read_desc.c | 220 | unguarded( (: NROFF_HAND->cat_file($(file)+"_nroff", 1) :) );
read_desc.c | 224 | unguarded((: NROFF_HAND->cat_file($(file)+"_nroff", 0) :));
read_desc.c | 232 | garble_text(lang, mess, this_object(), player);
read_desc.c | 235 | strsrch(mess, "Written in ");
read_desc.c | 244 | strsrch(mess[pos + 5..], "Written in ");
read_desc.c | 279 | query_read_mess();
read_desc.c | 284 | query_property("read id");
close_lock_container.c | 19 | set_closed();
close_lock_container.c | 21 | environment()->remove_inventory_container(this_object());
close_lock_container.c | 27 | set_closed();
close_lock_container.c | 29 | environment()->add_inventory_container(this_object());
close_lock_container.c | 43 | remove_inventory_container(this_object());
close_lock_container.c | 46 | add_inventory_container(this_object());
close_lock_container.c | 55 | environment()->remove_inventory_container(this_object());
help_files.c | 8 | query_property(string name);
help_files.c | 9 | add_property(string name, mixed value);
help_files.c | 19 | query_property(ROOM_HELP_FILE_PROPERTY);
help_files.c | 27 | add_property(ROOM_HELP_FILE_PROPERTY, help);
help_files.c | 37 | query_property(ROOM_HELP_FILE_PROPERTY);
help_files.c | 40 | add_property(ROOM_HELP_FILE_PROPERTY, help);
help_files.c | 49 | query_property(ROOM_HELP_FILE_PROPERTY);
help_files.c | 70 | replace(name, "/", ".");
help_files.c | 72 | html_file(nroff_fn, 1);
help_files.c | 74 | cat_file(nroff_fn, 1);
help_files.c | 77 | create_nroff(name, nroff_fn);
help_files.c | 79 | html_file(nroff_fn, 0);
help_files.c | 81 | cat_file(nroff_fn, 0);
help_files.c | 97 | query_property(ROOM_HELP_FILE_PROPERTY);
help_files.c | 102 | nroff_file($(bing), 0) :) }) });
help_files.c | 118 | query_property(ROOM_HELP_FILE_PROPERTY);
help_files.c | 122 | nroff_file(bing, 0);
surface.c | 40 | clone_object( SURFACE_SHADOW );
surface.c | 41 | setup_shadow( thing, this_object() );
surface.c | 42 | if ( !surface_shadows ) surface_shadows = ({ });
surface.c | 56 | sizeof( surface_shadows );
surface.c | 60 | destruct_shadow( surface_shadows[ i ] );
surface.c | 69 | call_out( "check_environment", 0 );
surface.c | 79 | make_shadow( environment() );
surface.c | 87 | sizeof( surface_shadows );
surface.c | 89 | destruct_shadow( surface_shadows[ i ] );
holdable.c | 14 | held_this_item(int held, object holder, mixed arg);
holdable.c | 15 | set_no_limbs(int num);
holdable.c | 33 | set_no_limbs(arg["no limbs"]);
holdable.c | 57 | held_this_item(2, environment(), new_arg);
holdable.c | 90 | this_object()->remove_hide_invis( "concealed" );
holdable.c | 166 | set_unhold(this_object());
holdable.c | 199 | return ({});
holdable.c | 204 | return ({});
holdable.c | 214 | query_holding();
holdable.c | 218 | if (pos == -1)  num_limbs = this_object()->query_no_limbs();
holdable.c | 222 | this_object() );
holdable.c | 223 | tell_creator( who, "Dropped things: %O\n", dropped_things );
holdable.c | 227 | sizeof( held_things );
holdable.c | 228 | tell_creator( who, "freeing limbs\n" );
holdable.c | 242 | if( who->query_free_limbs() >
holdable.c | 244 | set_hold( this_object(), pos, num_limbs );
holdable.c | 248 | this_object()->a_short() + ".\n" );
holdable.c | 249 | return ({ });
extra_look.c | 53 | sizeof(extra_looks);
extra_look.c | 55 | extra_look(this_object()));
extra_look.c | 59 | delete(extra_looks, i, 1);
extra_look.c | 81 | find_object((string)ob);
extra_look.c | 95 | member_array(ob, extra_looks);
extra_look.c | 99 | delete(extra_looks, i, 1);
scroll_book_react.c | 39 | environment(player);
scroll_book_react.c | 41 | environment(env);
scroll_book_react.c | 51 | query_spell_book() :));
scroll_book_react.c | 54 | query_spell_power_level();
scroll_book_react.c | 60 | query_power_level();
scroll_book_react.c | 67 | environment(player);
scroll_book_react.c | 72 | environment(ob);
scroll_book_react.c | 117 | query_ac("magic", level * 10);
scroll_book_react.c | 120 | adjust_hp(-level, this_object());
scroll_book_react.c | 121 | adjust_tmp_int(-2 + random(2));
scroll_book_react.c | 123 | destroy_this_scroll();
print_object.c | 27 | write("                   "[0..off]);
print_object.c | 29 | write(ob+"\n");
print_object.c | 33 | write("\""+ob+"\"\n");
print_object.c | 37 | write(file_name(ob)+"  ");
print_object.c | 39 | write("(short) "+ob->short()+"\n");
print_object.c | 41 | write("(name)  "+ob->query_name()+"\n");
print_object.c | 43 | write("(Argghhhh)\n");
print_object.c | 48 | write("({ })\n");
print_object.c | 50 | write("({  -- size "+sizeof(ob)+"\n");
print_object.c | 51 | sizeof(ob);
print_object.c | 52 | print_object(ob[i], off+3);
print_object.c | 53 | write("                       "[0..off]+"})\n");
consecrate.c | 16 | lower_case( deity );
consecrate.c | 26 | lower_case( deity );
consecrate.c | 49 | lower_case( god );
consecrate.c | 54 | this_object()->query_property( god );
virtual_quit_control.c | 14 | check_start_pos(environment(place));
virtual_quit_control.c | 16 | add_property(START_PLACE, pos, 10);
virtual_quit_control.c | 17 | player_quitting(player, environment(place));
virtual_quit_control.c | 22 | move(player->query_property(START_PLACE));
virtual_quit_control.c | 42 | query_quit_handler( player );
virtual_quit_control.c | 49 | player_quitting( player, place );
virtual_quit_control.c | 51 | file_name( place );
virtual_quit_control.c | 54 | query_start_pos();
virtual_quit_control.c | 62 | query_property( "test character" );
virtual_quit_control.c | 65 | query_name();
virtual_quit_control.c | 74 | query_start_pos();
virtual_quit_control.c | 96 | query_quit_handler();
virtual_quit_control.c | 103 | file_name( place );
virtual_quit_control.c | 106 | query_start_pos();
virtual_quit_control.c | 113 | query_property( "test character" );
virtual_quit_control.c | 116 | query_name();
virtual_quit_control.c | 126 | query_start_pos();
virtual_quit_control.c | 131 | query_co_ord();
close_lock.c | 42 | do_open();
close_lock.c | 43 | do_close();
close_lock.c | 44 | do_lock(object *keys);
close_lock.c | 45 | do_unlock(object *keys);
close_lock.c | 88 | event( ({ environment(), TO, }), "open", TP);
close_lock.c | 90 | event( ({ TO->query_my_room(), TO, }), "open", TP);
close_lock.c | 109 | event( ({ environment(), TO, }), "close", TP);
close_lock.c | 111 | event( ({ TO->query_my_room(), TO, }), "close", TP);
close_lock.c | 158 | event( ({ environment(), TO, }), "lock", TP);
close_lock.c | 160 | event( ({ TO->query_my_room(), TO, }), "lock", TP);
close_lock.c | 174 | event( ({ environment(), TO, }), "unlock", TP);
close_lock.c | 176 | event( ({ TO->query_my_room(), TO, }), "unlock", TP);
close_lock.c | 244 | evaluate(_key);
close_lock.c | 496 | do_open() :) );
close_lock.c | 499 | do_close() :) );
close_lock.c | 503 | do_lock(0) :) );
close_lock.c | 506 | do_lock($1) :) );
close_lock.c | 509 | do_unlock(0) :) );
close_lock.c | 512 | do_unlock($1) :) );
close_lock.c | 521 | add_close_lock_commands(this_player());
close_lock.c | 556 | query_hide_invis();
close_lock.c | 563 | query_light();
close_lock.c | 564 | environment(TP)->query_light();
close_lock.c | 568 | sizeof(CLOTHING_HANDLER->query_items_blocking(TO, TP));
close_lock.c | 575 | query_skill_bonus( SKILL ) );
close_lock.c | 583 | random(3) ] + "%^RESET%^\n" );
close_lock.c | 596 | query_key();
close_lock.c | 625 | all_inventory(TP);
close_lock.c | 628 | filter(keys, (: $1->query_property( $(key) ) :) );
close_lock.c | 641 | use_key(TO);
close_lock.c | 650 | set_unlocked();
close_lock.c | 676 | add_succeeded_mess (TO, "$N $V $D.\n", ({ }));
close_lock.c | 688 | query_key();
close_lock.c | 717 | all_inventory(TP);
close_lock.c | 720 | filter(keys, (: $1->query_property( $(key) ) :) );
close_lock.c | 723 | add_failed_mess(TO, "You cannot lock $D with $I.\n", keys);
close_lock.c | 726 | add_failed_mess(TO, "You cannot lock $D.\n", ({ }) );
close_lock.c | 729 | use_key(TO);
close_lock.c | 738 | set_locked();
close_lock.c | 763 | add_succeeded_mess (TO, "$N lock$s $D.\n", ({ }));
close_lock.c | 778 | set_locked();
close_lock.c | 798 | set_unlocked();
close_lock.c | 831 | set_open();
close_lock.c | 877 | set_closed();
close_lock.c | 879 | set_locked();
close_lock.c | 909 | return ({ "closed", "locked" });
close_lock.c | 911 | return ({ "closed", "unlocked" });
close_lock.c | 913 | return ({ "open", "locked" });
close_lock.c | 915 | return ({ "open", "unlocked" });
close_lock.c | 932 | query_pick_skill()}),});
version.c | 11 | base_name( this_object() ) ] = ctime( time() );
version.c | 14 | base_name( temp ) ] = temp->query_version();
version.c | 18 | write( "File:\tTime:\n" );
version.c | 20 | printf( "%s\t%s.\n", temp, version_control[ temp ] );
virtual_update.c | 11 | query_property(string name);
virtual_update.c | 12 | add_property(string name, mixed prop);
virtual_update.c | 13 | init_static_arg(mapping data);
virtual_update.c | 24 | clone_object("/obj/misc/al_receipt");
virtual_update.c | 25 | set_name("receipt");
virtual_update.c | 26 | set_object(file_name(this_object()));
virtual_update.c | 27 | set_virtobname(query_property(VIRTUAL_NAME_PROP));
virtual_update.c | 28 | set_value(this_object()->query_value());
virtual_update.c | 29 | fragile_auto_str_ob(this_object());
virtual_update.c | 31 | set_static_save(als);
virtual_update.c | 32 | set_short("destructed item receipt");
virtual_update.c | 33 | add_adjective(({ "destructed", "item" }));
virtual_update.c | 34 | set_long("This seems to be a small piece of paper.\n");
virtual_update.c | 38 | move(environment());
virtual_update.c | 39 | set_weight(1);
virtual_update.c | 40 | destruct(this_object());
virtual_update.c | 54 | query_property(VIRTUAL_NAME_PROP);
virtual_update.c | 57 | other_file(virt_name);
virtual_update.c | 59 | add_property(VIRTUAL_NAME_PROP, new_name);
virtual_update.c | 63 | call_out("replace_me", 1);
virtual_update.c | 65 | add_missing(virt_name);
virtual_update.c | 71 | new_data(virt_name);
virtual_update.c | 73 | init_static_arg(stat_temp);
virtual_update.c | 74 | add_property("virtual time", time());
artifact.c | 44 | call_out( "zapper_init", 1, this_object() );
artifact.c | 50 | init_artifact( thing );
artifact.c | 71 | call_other( zapper, "query_"+ type +"_name" );
effects.c | 57 | delete_effect(int i);
effects.c | 85 | submit_ee("function", interval, flags, event_args );
effects.c | 92 | new(class effect_data);
effects.c | 114 | remove_call_out("effect_timer");
effects.c | 135 | this_object();
effects.c | 139 | query_shadowing(this);
effects.c | 156 | remove_call_out( "effect_timer" );
effects.c | 161 | time() % 1000,this_object()->query_name(),_data->current_enum,timeleft);
effects.c | 167 | time();
effects.c | 182 | sizeof( effs );
effects.c | 191 | catch( (void)effn->saving( affected_object(), arg, i ) );
effects.c | 205 | sizeof( effs );
effects.c | 214 | catch( (void)effn->quiting( affected_object(), arg, i ) );
effects.c | 228 | sizeof( effs );
effects.c | 237 | catch( (void)effn->desting( affected_object(), arg, i ) );
effects.c | 256 | time() % 1000,this_object()->query_name(),_data->current_enum,eeq[ 0 ]->inctime);
effects.c | 258 | find_call_out( "effect_timer" );
effects.c | 260 | remove_call_out( "effect_timer" );
effects.c | 262 | call_out( "effect_timer", eeq[ 0 ]->inctime );
effects.c | 293 | random(interval[1] - interval[0] + 1);
effects.c | 298 | random(interval[1] - interval[0] + 1);
effects.c | 312 | sizeof(eeq);
effects.c | 317 | sizeof( eeq );
effects.c | 333 | sizeof(eeq);
effects.c | 421 | map(_data->shadows, (: $1 && (((class effect_shadow)$1)->shad_ob == previous_object()) :)));
effects.c | 423 | error("Can not submit from that object");
effects.c | 427 | effect_freeze();
effects.c | 428 | int_submit_ee(enumb, fun, interval, flags, event_args );
effects.c | 429 | effect_unfreeze();
effects.c | 459 | error("Can't submit from that object");
effects.c | 461 | effect_freeze();
effects.c | 462 | int_submit_ee(enum, fun, interval, flags, event_args );
effects.c | 463 | effect_unfreeze();
effects.c | 496 | effect_freeze();
effects.c | 499 | sizeof(eeq);
effects.c | 503 | effect_unfreeze();
effects.c | 507 | effect_unfreeze();
effects.c | 550 | effect_freeze();
effects.c | 556 | sizeof( eeq );
effects.c | 561 | effect_unfreeze();
effects.c | 569 | effect_unfreeze();
effects.c | 609 | return ({});
effects.c | 614 | return ({});
effects.c | 619 | return ({});
effects.c | 622 | effect_freeze();
effects.c | 628 | sizeof( eeq );
effects.c | 636 | effect_unfreeze();
effects.c | 666 | time() % 1000,this_object()->query_name(),current_enum,eff,arg);
effects.c | 668 | query_secs_between_hb();
effects.c | 670 | query_heart_beat_frequency();
effects.c | 678 | find_object(eff);
effects.c | 680 | error("bad effect object");
effects.c | 682 | sizeof(effs);
effects.c | 707 | query_shadow_ob();
effects.c | 709 | clone_object(shad);
effects.c | 711 | error("Failed to clone shadow object " + shad + ".\n");
effects.c | 712 | new(class effect_shadow, shad_ob : 0, idnum : _data->next_id) });
effects.c | 714 | new(class effect_shadow, shad_ob : ob, idnum : _data->next_id) });
effects.c | 715 | attach_to_player(affected_object(), _data->next_id);
effects.c | 718 | new(class effect_shadow, shad_ob : 0, idnum : _data->next_id) });
effects.c | 720 | sizeof(effs);
effects.c | 726 | new(class effect, ob_name : eff, arg : arg) });
effects.c | 729 | beginning(affected_object(), arg, _data->next_id);
effects.c | 738 | submit_ee("effect_heart_beat", hbf, EE_CONTINUOUS | EE_OLD);
effects.c | 766 | allocate(neffs);
effects.c | 775 | allocate(neeq);
effects.c | 798 | convert_arrays();
effects.c | 802 | sizeof( eeq );
effects.c | 814 | sizeof(effs);
effects.c | 816 | allocate(neffs);
effects.c | 820 | new(class effect_shadow, idnum : _data->next_id);
effects.c | 826 | clone_object(shad);
effects.c | 828 | attach_to_player(affected_object(), _data->next_id);
effects.c | 836 | catch(effn->restart(affected_object(), arg, _data->next_id++));
effects.c | 839 | allocate(sizeof(effs));
effects.c | 840 | sizeof(eeq);
effects.c | 845 | delete_effect(i);
effects.c | 849 | delete_effect(i);
effects.c | 854 | effect_unfreeze();
effects.c | 876 | sizeof(effs);
effects.c | 881 | query_classification();
effects.c | 910 | this_object()->query_name(),current_enum,i, sizeof(eeq));
effects.c | 919 | effect_freeze();
effects.c | 920 | sizeof(eeq);
effects.c | 924 | delete(eeq, j--, 1);
effects.c | 931 | delete(effs, i, 1);
effects.c | 934 | delete(_data->shadows, i, 1);
effects.c | 936 | effect_unfreeze();
effects.c | 945 | this_object()->query_name(),current_enum);
effects.c | 947 | find_object(effect_file);
effects.c | 949 | catch(effect_object = load_object(effect_file));
effects.c | 954 | end(affected_object(), arg[1], id);
effects.c | 956 | end(affected_object(), arg, id);
effects.c | 961 | this_object()->query_name(),_data->current_enum);
effects.c | 965 | remove_effect_shadow(id);
effects.c | 1029 | copy(arg[1]);
effects.c | 1030 | copy(arg);
effects.c | 1063 | this_object()->query_name(),current_enum,sizeof(eeq));
effects.c | 1075 | effect_unfreeze();
effects.c | 1084 | effect_unfreeze();
effects.c | 1093 | effect_unfreeze();
effects.c | 1095 | find_object(effs[enum]->ob_name);
effects.c | 1098 | load_object(effs[enum]->ob_name);
effects.c | 1106 | delete_effect(enum);
effects.c | 1113 | tell_creator("pinkfish", "%O %O %O", effect_object, enum, thisee);
effects.c | 1122 | delete_effect(enum);
effects.c | 1133 | delete_effect(enum);
effects.c | 1143 | delete_effect(enum);
effects.c | 1150 | delete_effect(enum);
effects.c | 1163 | sizeof(effs);
effects.c | 1191 | sizeof( effs );
effects.c | 1198 | delete_effect(i);
effects.c | 1221 | allocate( neffs );
effects.c | 1243 | allocate( neeq );
desc.c | 33 | set_short("red rose");
desc.c | 44 | pluralize(evaluate(short_d)) :);
desc.c | 47 | pluralize( words );
desc.c | 80 | set_main_plural("green wombles");
desc.c | 102 | evaluate(short_d);
desc.c | 116 | if(this_object()->query_str() >
desc.c | 118 | if(this_object()->query_dex() >
desc.c | 120 | if(this_object()->query_int() >
desc.c | 122 | if(this_object()->query_wis() >
desc.c | 132 | query_guild_data();
desc.c | 152 | this_object()->query_gender() == 2? "lass" : "lad");
desc.c | 166 | pluralize( query_short_desc() );
desc.c | 178 | evaluate(long_d);
desc.c | 202 | return (string)evaluate(short_d);
desc.c | 218 | return (string)evaluate(long_d);
desc.c | 236 | pluralize(short( dark ));
desc.c | 238 | return (string)evaluate(plural_d);
desc.c | 250 | add_property("determinate", "the");
desc.c | 262 | return (string)this_object()->query_property( "determinate" );
desc.c | 285 | check_dark( (int)this_object()->query_light() );
desc.c | 287 | query_verbose("names");
desc.c | 290 | return (string)this_object()->short( dark, verbose );
desc.c | 307 | check_dark( (int)this_object()->query_light() );
desc.c | 308 | return (string)this_object()->query_plural( dark );
desc.c | 335 | log_file( "SHORT", "a_short from "+ implode( map_array( previous_object( -1 ) + ({ this_object() }), (: file_name( $1 ) :) ), ", " ) +"\n" );
desc.c | 336 | return (string)thing->a_short();
desc.c | 340 | this_object()->remove_hide_invis( "hiding" );
desc.c | 376 | this_object()->remove_hide_invis( "hiding" );
desc.c | 415 | this_object()->remove_hide_invis( "hiding" );
desc.c | 425 | this_object()->remove_hide_invis( "hiding" );
desc.c | 454 | log_file( "SHORT", "the_short from "+ implode( map_array( previous_object( -1 ) + ({ this_object() }), (: file_name( $1 ) :) ), ", " ) +"\n" );
desc.c | 455 | return (string)thing->the_short();
desc.c | 459 | this_object()->remove_hide_invis( "hiding" );
theft_callback.c | 24 | call_other( temp->path, temp->func_name, this_object(), thief, victim );
theft_callback.c | 44 | debug_printf( "Added theft callback: %s %s.\n", func_name, path );
theft_callback.c | 76 | sprintf( "%d. %s: %s.\n", count, temp->func_name, temp->path );
stat_adjustments.c | 30 | add_effect(STAT_ADJUSTMENT_EFFECT, ({ this_object(), adjs }));
stat_adjustments.c | 38 | remove_stat_adjustment_ob(player, this_object());
stat_adjustments.c | 39 | map_delete(_adjs, player);
stat_adjustments.c | 51 | remove_stat_adjustment_ob(play, this_object());
stat_adjustments.c | 52 | map_delete(_adjs, play);
condition.c | 36 | capitalize(this_object()->the_short()) + " breaks!\n");
condition.c | 39 | capitalize(this_object()->the_short()) + " breaks!\n");
condition.c | 43 | move_object("/room/rubbish");
condition.c | 60 | capitalize(this_object()->query_pronoun());
condition.c | 145 | this_object()->break_me();
condition.c | 172 | this_object()->break_me();
condition.c | 243 | set_cond((query_max_cond() * i) / 100);
condition.c | 244 | set_lowest_cond((query_cond()*(random(30) + 70)) / 100);
condition.c | 300 | random( damage_chance ) + random( damage_chance ) );
condition.c | 305 | adjust_cond( -wholes );
light.c | 44 | new_recalc_light();
light.c | 45 | query_property(string name);
light.c | 46 | add_property(string name, mixed value);
light.c | 47 | remove_property(string name);
light.c | 63 | new_recalc_light();
light.c | 95 | all_inventory(this_object());
light.c | 99 | query_my_light();
light.c | 101 | query_light();
light.c | 107 | if (_light >= 0)  _light = sqrt(_light);
light.c | 108 | sqrt(-_light);
light.c | 109 | event_light_change(this_object(), 0, _light);
light.c | 129 | light_level_changed();
light.c | 132 | light_level_changed();
light.c | 133 | environment(ob);
light.c | 161 | add_property( "opaque", 1 );
light.c | 171 | remove_property( "opaque" );
light.c | 179 | query_property("opaque");
light.c | 192 | inform_of_light_level_change(this_object());
light.c | 231 | adjust_light(number - _my_light);
scroll_base.c | 42 | query_power_level();
scroll_base.c | 43 | sqrt( level );
scroll_base.c | 44 | this_player()->query_skill_bonus( SKILL ) - ( level - width );
scroll_base.c | 49 | if ( random( 100 ) >
scroll_base.c | 100 | query_power_level();
scroll_base.c | 114 | query_spell_name() { return (string)_spell->query_name();
scroll_base.c | 124 | return (int)TASKER->perform_task(this_player(), SKILL, level, TM_FREE);
scroll_base.c | 138 | random( 3 ) ] +".%^RESET%^\n" );
scroll_base.c | 153 | test_skill();
scroll_base.c | 155 | notify_fail( "You can't figure out how to use the scroll.\n" );
scroll_base.c | 160 | clear_spell( outcome == AWARD );
scroll_base.c | 175 | test_skill();
scroll_base.c | 177 | notify_fail( "You can't figure out how to use the scroll.\n" );
scroll_base.c | 182 | clear_spell( outcome == AWARD );
enchant.c | 104 | this_object()->query_max_enchant();
enchant.c | 135 | this_object()->query_property("talisman_mess");
enchant.c | 199 | this_object()->query_max_enchant();
enchant.c | 201 | time();
enchant.c | 215 | set_enchant(this_object()->query_enchant() + number);
enchant.c | 234 | this_object()->query_max_enchant();
enchant.c | 239 | this_object()->query_degrade_enchant();
enchant.c | 242 | time();
enchant.c | 252 | tell_creator("pinkfish", "Max %d start %d tmp %d enchant %d\n", max, tmp2, tmp, _enchanted);
id_match.c | 84 | sizeof(input) >
id_match.c | 91 | this_object()->parse_command_id_list();
id_match.c | 92 | this_object()->parse_command_plural_id_list();
id_match.c | 109 | this_object()->parse_command_adjectiv_id_list();
id_match.c | 110 | this_object()->parse_command_plural_adjectiv_id_list();
id_match.c | 200 | is_matching_object(input, viewer, context);
id_match.c | 212 | return ({ ret, ({ this_object() }) });
club_insignia.c | 25 | query_not_voted_for(string name);
club_insignia.c | 26 | do_recruit(object *players, string club);
club_insignia.c | 27 | club_chat(string str, int emote);
club_insignia.c | 28 | do_history();
club_insignia.c | 29 | do_channel_off(int new_value);
club_insignia.c | 30 | do_resign();
club_insignia.c | 31 | do_resign_position(string name);
club_insignia.c | 32 | do_disbar(string name);
club_insignia.c | 33 | do_brief_mode(int mode);
club_insignia.c | 34 | do_brief_string(string str);
club_insignia.c | 35 | query_has_nominated_someone(string name);
club_insignia.c | 36 | check_announce(object player);
club_insignia.c | 37 | do_announcement();
club_insignia.c | 38 | query_club();
club_insignia.c | 43 | this_object());
club_insignia.c | 55 | this_object());
club_insignia.c | 58 | query_club_name(club);
club_insignia.c | 59 | add_broadcaster();
club_insignia.c | 85 | replace(lower_case(query_club()), " ", "_");
club_insignia.c | 87 | do_announcement() :));
club_insignia.c | 91 | do_resign_position($4[0]) :) );
club_insignia.c | 96 | time();
club_insignia.c | 100 | this_player());
club_insignia.c | 107 | time();
club_insignia.c | 108 | query_not_voted_for(this_player()->query_name());
club_insignia.c | 113 | this_player());
club_insignia.c | 121 | query_announcement_time(query_club());
club_insignia.c | 124 | remove_call_out(_callout_id);
club_insignia.c | 125 | call_out((: check_announce :), 0, this_player());
club_insignia.c | 132 | add_elected_commands(per);
club_insignia.c | 144 | replace(lower_case(query_club()), " ", "_");
club_insignia.c | 148 | do_recruit($1, $4[1]) :) );
club_insignia.c | 152 | club_members(query_club(), 0, this_player()->query_name()) :));
club_insignia.c | 156 | do_recruit($1, query_club()) :));
club_insignia.c | 161 | this_player()->query_name()) :));
club_insignia.c | 166 | this_player()->query_name()) :));
club_insignia.c | 169 | club_chat($4[0], 0) :));
club_insignia.c | 172 | club_chat($4[0], 1) :));
club_insignia.c | 175 | do_history() :));
club_insignia.c | 178 | do_resign() :));
club_insignia.c | 181 | do_disbar($4[0]) :));
club_insignia.c | 185 | do_channel_off($4[0] == "on") :));
club_insignia.c | 189 | do_brief_mode($4[0] == "on") :));
club_insignia.c | 193 | do_brief_string($4[0]) :));
club_insignia.c | 197 | add_club_commands(per);
club_insignia.c | 200 | add_elected_commands(this_player());
club_insignia.c | 212 | this_player()->add_player_club(query_club());
club_insignia.c | 213 | add_club_commands(this_player());
club_insignia.c | 215 | this_player()->remove_player_club(query_club());
club_insignia.c | 226 | query_announcement_time(query_club());
club_insignia.c | 230 | remove_call_out(_callout_id);
club_insignia.c | 231 | call_out((: check_announce :), 15 * 60, player);
club_insignia.c | 249 | query_valid_positions(query_club());
club_insignia.c | 251 | query_nominated_for(query_club(), pos);
club_insignia.c | 268 | query_valid_positions(query_club());
club_insignia.c | 271 | sizeof(CLUB_HANDLER->query_nominated_for(query_club(), $1)) > 1 :));
club_insignia.c | 311 | add_failed_mess("You can only chat to clubs you are a member of.\n");
club_insignia.c | 316 | add_failed_mess("You have your club channel turned off.\n");
club_insignia.c | 320 | this_player()->query_cap_name();
club_insignia.c | 322 | this_player()->query_family_name();
club_insignia.c | 330 | query_club();
club_insignia.c | 333 | normalise_name(query_club()), "%^CYAN%^");
club_insignia.c | 370 | environment();
club_insignia.c | 388 | query_cap_name();
club_insignia.c | 390 | query_family_name();
club_insignia.c | 395 | query_club();
club_insignia.c | 398 | normalise_name(query_club()), "%^CYAN%^");
club_insignia.c | 419 | query_club();
club_insignia.c | 425 | query_dynamic_auto_load(map);
club_insignia.c | 432 | set_club(map[SAVE_START + "club"]);
club_insignia.c | 440 | query_club_name(query_club());
club_insignia.c | 446 | init_dynamic_arg(map);
club_insignia.c | 479 | sizeof(CLUB_HANDLER->query_members(query_club())) >
club_insignia.c | 499 | query_club() + "'.\n");
club_insignia.c | 501 | query_club());
club_insignia.c | 509 | if (sizeof(already) >
club_insignia.c | 511 | query_club() + "'.\n", already);
club_insignia.c | 514 | query_club() + "'.\n", already);
club_insignia.c | 519 | sizeof(not_player) >
club_insignia.c | 529 | sizeof(invites) >
club_insignia.c | 552 | query_channel_history(lower_case(query_club()));
club_insignia.c | 555 | add_failed_mess("No history for this channel.\n");
club_insignia.c | 560 | normalise_name(query_club()), "%^CYAN%^");
club_insignia.c | 565 | if (sizeof(data) >
club_insignia.c | 583 | write("History for the '" + query_club() + "' club channel.\n");
club_insignia.c | 594 | add_failed_mess("You must be a member of the channel to turn it off.\n");
club_insignia.c | 600 | add_failed_mess("The channel is already muted.\n");
club_insignia.c | 602 | add_failed_mess("You are already listening to the channel.\n");
club_insignia.c | 609 | add_succeeded_mess(({ "Muting the channel '" + query_club() + "'.\n", "" }));
club_insignia.c | 635 | write("Set the channel '" + query_club() + "' into verbose mode,\n");
club_insignia.c | 646 | if (strlen(str) >
club_insignia.c | 665 | add_failed_mess("This badge is not associated with any clubs!\n");
club_insignia.c | 685 | query_club() + "'? ");
club_insignia.c | 686 | input_to("confirm_resign", 0, position);
club_insignia.c | 687 | add_succeeded_mess("");
club_insignia.c | 698 | add_failed_mess("This badge is not associated with any clubs!\n");
club_insignia.c | 710 | query_club() + "'? ");
club_insignia.c | 711 | input_to("confirm_resign");
club_insignia.c | 712 | add_succeeded_mess("");
club_insignia.c | 721 | query_club();
club_insignia.c | 726 | set_club(0);
club_insignia.c | 740 | lower_case(str);
club_insignia.c | 743 | write("Aborted resignation.\n");
club_insignia.c | 751 | write("You have resigned from the club '" + query_club() + "'.\n");
club_insignia.c | 752 | query_club();
club_insignia.c | 753 | set_club(0);
club_insignia.c | 754 | call_out( (: do_fixup_badges :), 0, club);
club_insignia.c | 764 | query_club() + "'.\n");
club_insignia.c | 767 | query_club() + "'.\n");
club_insignia.c | 771 | write("You need to answer yes or no.\n");
club_insignia.c | 774 | query_club() + "'? ");
club_insignia.c | 777 | query_club() + "'? ");
club_insignia.c | 779 | input_to("confirm_resign", 0, position);
club_insignia.c | 808 | lower_case(name);
club_insignia.c | 810 | add_failed_mess("You cannot disbar yourself.\n");
club_insignia.c | 821 | query_club() + "'? ");
club_insignia.c | 822 | add_succeeded_mess("");
club_insignia.c | 823 | input_to("confirm_disbar", 0, name);
club_insignia.c | 837 | write("Aborting disbar.\n");
club_insignia.c | 844 | query_club() + "'.\n");
club_insignia.c | 847 | query_club() + "'.\n");
club_insignia.c | 850 | write("You must type yes or no.\n");
club_insignia.c | 852 | query_club() + "'? ");
club_insignia.c | 853 | input_to("confirm_disbar", 0, name);
club_insignia.c | 864 | query_announcement(query_club());
club_insignia.c | 866 | add_failed_mess("There is no announcement to read.\n");
club_insignia.c | 887 | add_club_commands(environment());
club_insignia.c | 898 | call_out( (: add_elected_commands(environment()) :), 0);
club_discuss.c | 21 | query_club();
club_discuss.c | 22 | do_vote(int id, string choice);
club_discuss.c | 23 | do_nominate(int id, string person);
club_discuss.c | 24 | do_withdraw(int id);
club_discuss.c | 25 | do_list_all();
club_discuss.c | 26 | do_list_item(int id);
club_discuss.c | 27 | do_list_archives();
club_discuss.c | 28 | do_archive(int num);
club_discuss.c | 44 | query_all_discussion_items(query_club());
club_discuss.c | 150 | replace(lower_case(query_club()), " ", "_");
club_discuss.c | 154 | do_vote($4[1], $4[0]) :));
club_discuss.c | 158 | do_nominate($4[1], $4[0]) :));
club_discuss.c | 162 | do_withdraw($4[0]) :));
club_discuss.c | 166 | do_list_all() :));
club_discuss.c | 170 | do_list_item($4[0]) :));
club_discuss.c | 174 | do_list_archives() :));
club_discuss.c | 178 | do_archive($4[0]) :));
club_discuss.c | 182 | time();
club_discuss.c | 183 | query_all_discussion_items(query_club());
club_discuss.c | 187 | this_player()->query_name()) :) );
club_discuss.c | 191 | this_player()->query_name()) :) );
club_discuss.c | 209 | discussion_item_list(this_player()->query_name());
club_discuss.c | 210 | write("$P$Discussion items$P$" + ret);
club_discuss.c | 224 | add_failed_mess("There is no discussion item #" + id + ".\n");
club_discuss.c | 228 | discussion_item(id, this_player()->query_name());
club_discuss.c | 229 | write("$P$Discussion item$P$" + ret);
club_discuss.c | 246 | add_failed_mess("There is no discussion item #" + id + ".\n");
club_discuss.c | 297 | add_failed_mess("There is no discussion item #" + id + ".\n");
club_discuss.c | 351 | add_failed_mess("There is no discussion item #" + id + ".\n");
club_discuss.c | 357 | for (and therefor withdrawn from).\n");
club_discuss.c | 365 | add_failed_mess("You have not been nominated for this position.\n");
club_discuss.c | 395 | query_archives(query_club());
club_discuss.c | 397 | add_failed_mess("This club has no archives currently.\n");
club_discuss.c | 408 | write("$P$Club Archives$P$" + bing);
club_discuss.c | 422 | query_archives(query_club());
club_discuss.c | 424 | add_failed_mess("This club has no archives currently.\n");
club_discuss.c | 430 | sizeof(archives) + ".\n");
club_discuss.c | 438 | write("$P$Club Archives$P$" + bing);
telnet.c | 68 | sprintf("%c%c%c",IAC,DONT,TELOPT_ECHO);
telnet.c | 69 | sprintf("%c%c%c",IAC,DO  ,TELOPT_ECHO);
telnet.c | 70 | sprintf("%c%c%c",IAC,WONT,TELOPT_ECHO);
telnet.c | 71 | sprintf("%c%c%c",IAC,WILL,TELOPT_ECHO);
telnet.c | 72 | sprintf("%c%c%c",IAC,DONT,TELOPT_SGA);
telnet.c | 73 | sprintf("%c%c%c",IAC,DO  ,TELOPT_SGA);
telnet.c | 74 | sprintf("%c%c%c",IAC,WONT,TELOPT_SGA);
telnet.c | 75 | sprintf("%c%c%c",IAC,WILL,TELOPT_SGA);
telnet.c | 76 | sprintf("%c%c%c",IAC,WONT,TELOPT_TTYPE);
telnet.c | 77 | sprintf("%c%c%c",IAC,WONT,TELOPT_NAWS);
telnet.c | 78 | sprintf("%c",    IAC);
telnet.c | 79 | sprintf("%c%c",  DONT,TELOPT_ECHO);
telnet.c | 80 | sprintf("%c%c",  DO,  TELOPT_ECHO);
telnet.c | 91 | init_tel_neg();
telnet.c | 94 | set_callback("handler");
telnet.c | 111 | call_other(this_object(), callback, "close");
telnet.c | 117 | call_other(this_object(), callback, "open");
telnet.c | 127 | socket_write(fd, write_message);
telnet.c | 137 | my_socket_write(conn_fd,s_iac_dont_sga+s_iac_dont_echo);
telnet.c | 138 | write("SENT dont SUPPRESS GO AHEAD\nSENT dont ECHO\n");
telnet.c | 139 | return(1);
telnet.c | 141 | return(0);
telnet.c | 147 | my_socket_write(conn_fd,s_iac_do_sga+s_iac_do_echo);
telnet.c | 148 | write("SENT do SUPPRESS GO AHEAD\nSENT do ECHO\n");
telnet.c | 149 | return(1);
telnet.c | 151 | return(0);
telnet.c | 158 | if(!str) return(0);
telnet.c | 159 | socket_create(STREAM,"socket_shutdown");
telnet.c | 160 | socket_connect(conn_fd,str,"receive_data","write_data");
telnet.c | 162 | notify_fail("unable to connect: " + socket_error(ret) + "\n");
telnet.c | 163 | return(0);
telnet.c | 165 | connected();
telnet.c | 166 | return(1);
telnet.c | 173 | write("Sending CR.\n");
telnet.c | 174 | my_socket_write(conn_fd,"\n");
telnet.c | 175 | return(1);
telnet.c | 177 | my_socket_write(conn_fd,str + "\n");
telnet.c | 178 | return(1);
telnet.c | 180 | return(0);
telnet.c | 187 | socket_close(conn_fd);
telnet.c | 189 | notify_fail("unable to disconnect.\n");
telnet.c | 190 | return(0);
telnet.c | 192 | disconnected();
telnet.c | 193 | return(1);
telnet.c | 201 | this_object()->recieve_message(msg);
telnet.c | 206 | my_socket_write(fd,"");
telnet.c | 214 | environment(this_object());
telnet.c | 215 | disconnected();
pumpkin.c | 4 | set_name( "pumpkin" );
pumpkin.c | 5 | set_information( "Pumpkin is a large orange ball shaped town.\n");
pumpkin.c | 20 | set_language("pumpkin");
pumpkin.c | 21 | set_currency_area("Pumpkin");
pumpkin.c | 22 | set_default_start_location("/d/am/buildings/drum/mendeddrum");
basic.c | 30 | do_setup();
basic.c | 179 | keys(_regions);
accent_base.c | 21 | query_nat_accent( accent_lang );
round.c | 11 | query_accent_name() );
square.c | 11 | query_accent_name() );
ken_mangle.c | 179 | replace(" "+str+" ", replace_matrix);
ken_mangle.c | 180 | explode(tmp, " ");
ken_mangle.c | 181 | sizeof(bits);
ken_mangle.c | 188 | implode(bits, " ");
ken_mangle.c | 210 | replace(tmp, ({ " !", "!", " .", ".", " ?", "?" }));
newbie_eff_shadow.c | 31 | destruct(this_object());
newbie_eff_shadow.c | 34 | remove_effect_shadow(i);
newbie_eff_shadow.c | 75 | if (random(100) >
newbie_eff_shadow.c | 76 | random(sizeof(says)))]);
newbie_eff_shadow.c | 120 | random(sizeof(emotes_female)))]);
newbie_eff_shadow.c | 123 | random(sizeof(emotes_male)))]);
newbie_eff_shadow.c | 129 | return (int)my_player->do_say(newbie(str));
newbie_eff_shadow.c | 133 | return (int)my_player->do_tell(newbie(str));
newbie_eff_shadow.c | 137 | return (int)my_player->do_loud_say(newbie(str));
newbie_eff_shadow.c | 141 | return (int)my_player->do_echo(newbie(str));
newbie_eff_shadow.c | 145 | return (int)my_player->do_emote_all(newbie_emote(str));
newbie_eff_shadow.c | 149 | return (int)my_player->do_emote(newbie_emote(str));
newbie_eff_shadow.c | 153 | return (int)my_player->do_whisper(newbie(str));
newbie_eff_shadow.c | 157 | return (int)my_player->do_echo_to(newbie(str));
newbie_eff_shadow.c | 161 | return (int)my_player->do_shout(newbie(str));
newbie_eff_shadow.c | 165 | return (int)my_player->do_talk(newbie(str));
ken_curse.c | 23 | seteuid((string)"/secure/master"->creator_file(str));
ken_curse.c | 24 | return (int)clone_object(str)->init_curse(pl);
ken_curse.c | 27 | add_curse(MY_NAME, str);
ken_curse.c | 29 | remove_curse(MY_NAME);
ken_curse.c | 40 | return (int)my_player->query_remove(name);
ken_curse.c | 51 | this_player();
ken_curse.c | 52 | clone_object(HERE+"ken_curse");
ken_curse.c | 53 | init_curse(pl);
ken_curse.c | 61 | destruct(this_object());
ken_curse.c | 63 | destruct_curse(str);
ken_curse.c | 67 | return (int)my_player->do_emote_all((HERE+"ken_mangle")->do_transmute(str));
ken_curse.c | 71 | return (int)my_player->do_shout((HERE+"ken_mangle")->do_transmute(str));
ken_curse.c | 75 | return (int)my_player->do_say((HERE+"ken_mangle")->do_transmute(str));
ken_curse.c | 79 | return (int)my_player->do_loud_say((HERE+"ken_mangle")->do_transmute(str));
ken_curse.c | 83 | return (int)my_player->do_emote((HERE+"ken_mangle")->do_transmute(str));
ken_curse.c | 90 | return (int)my_player->do_tell(str);
ken_curse.c | 91 | return (int)my_player->do_tell(s1+" "+(HERE+"ken_mangle")->do_transmute(str));
shout_curse.c | 23 | seteuid((string)"/secure/master"->creator_file(str));
shout_curse.c | 24 | return (int)clone_object(str)->init_curse(pl);
shout_curse.c | 27 | printf("%O, %O\n", pl, this_object());
shout_curse.c | 28 | add_curse(MY_NAME, str);
shout_curse.c | 30 | remove_curse(MY_NAME);
shout_curse.c | 50 | this_player();
shout_curse.c | 51 | clone_object(HERE+"shout_curse");
shout_curse.c | 52 | init_curse(pl);
shout_curse.c | 60 | destruct(this_object());
shout_curse.c | 62 | destruct_curse(str);
shout_curse.c | 66 | write("Your voice is too hoarse to shout.\n");
shout_curse.c | 71 | write("Your voice is too hoarse to shout.\n");
newbie_curse.c | 30 | seteuid((string)"/secure/master"->creator_file(str));
newbie_curse.c | 31 | return (int)clone_object(str)->init_curse(pl);
newbie_curse.c | 34 | add_curse(MY_NAME, str);
newbie_curse.c | 36 | remove_curse(MY_NAME);
newbie_curse.c | 54 | this_player();
newbie_curse.c | 55 | clone_object(file_name(this_object()));
newbie_curse.c | 56 | init_curse(pl);
newbie_curse.c | 64 | destruct(this_object());
newbie_curse.c | 66 | destruct_curse(str);
newbie_curse.c | 106 | if (random(100) >
newbie_curse.c | 107 | random(sizeof(says)))]);
newbie_curse.c | 151 | random(sizeof(emotes_female)))]);
newbie_curse.c | 154 | random(sizeof(emotes_male)))]);
newbie_curse.c | 160 | return (int)my_player->do_say(newbie(str));
newbie_curse.c | 164 | return (int)my_player->do_tell(newbie(str));
newbie_curse.c | 168 | return (int)my_player->do_loud_say(newbie(str));
newbie_curse.c | 172 | return (int)my_player->do_echo(newbie(str));
newbie_curse.c | 176 | return (int)my_player->do_echo_all(newbie_emote(str));
newbie_curse.c | 180 | return (int)my_player->do_emote(newbie_emote(str));
newbie_curse.c | 184 | return (int)my_player->do_whisper(newbie(str));
newbie_curse.c | 188 | return (int)my_player->do_echo_to(newbie(str));
newbie_curse.c | 192 | return (int)my_player->do_shout(newbie(str));
newbie_curse.c | 196 | return (int)my_player->do_talk(newbie(str));
chef_curse.c | 23 | seteuid((string)"/secure/master"->creator_file(str));
chef_curse.c | 24 | return (int)clone_object(str)->init_curse(pl);
chef_curse.c | 27 | add_curse(MY_NAME, str);
chef_curse.c | 29 | remove_curse(MY_NAME);
chef_curse.c | 40 | return (int)my_player->query_remove(name);
chef_curse.c | 51 | this_player();
chef_curse.c | 52 | clone_object(HERE+"chef_curse");
chef_curse.c | 53 | init_curse(pl);
chef_curse.c | 61 | destruct(this_object());
chef_curse.c | 63 | destruct_curse(str);
chef_curse.c | 67 | return (int)my_player->do_emote_all((HERE+"chef_mangle")->do_transmute(str));
chef_curse.c | 71 | return (int)my_player->do_shout((HERE+"chef_mangle")->do_transmute(str));
chef_curse.c | 75 | return (int)my_player->do_say((HERE+"chef_mangle")->do_transmute(str));
chef_curse.c | 79 | return (int)my_player->do_loud_say((HERE+"chef_mangle")->do_transmute(str));
chef_curse.c | 83 | return (int)my_player->do_emote((HERE+"chef_mangle")->do_transmute(str));
chef_curse.c | 90 | return (int)my_player->do_tell(str);
chef_curse.c | 91 | return (int)my_player->do_tell(s1+" "+(HERE+"chef_mangle")->do_transmute(str));
upper_case.c | 25 | seteuid((string)"/secure/master"->creator_file(str));
upper_case.c | 26 | return (int)clone_object(str)->init_curse(pl);
upper_case.c | 29 | add_curse(MY_NAME, str);
upper_case.c | 31 | remove_curse(MY_NAME);
upper_case.c | 49 | this_player();
upper_case.c | 50 | clone_object(file_name(this_object()));
upper_case.c | 51 | init_curse(pl);
upper_case.c | 59 | destruct(this_object());
upper_case.c | 61 | destruct_curse(str);
upper_case.c | 69 | strlen(str);
upper_case.c | 70 | capitalize(str[i..i]);
upper_case.c | 75 | return (int)my_player->do_say(upper_case(str));
upper_case.c | 79 | return (int)my_player->do_tell(upper_case(str));
upper_case.c | 83 | return (int)my_player->do_loud_say(upper_case(str));
upper_case.c | 87 | return (int)my_player->do_echo(upper_case(str));
upper_case.c | 91 | return (int)my_player->do_echo_all(upper_case(str));
upper_case.c | 95 | return (int)my_player->do_emote(upper_case(str));
upper_case.c | 99 | return (int)my_player->do_whisper(upper_case(str));
upper_case.c | 103 | return (int)my_player->do_echo_to(upper_case(str));
upper_case.c | 107 | return (int)my_player->do_shout(upper_case(str));
sign_writer.c | 30 | do_load();
sign_writer.c | 36 | create();
sign_writer.c | 37 | do_load();
sign_writer.c | 38 | add_help_file("sign_writer");
sign_writer.c | 47 | evaluate(_open_func);
sign_writer.c | 107 | save_object(_save_file);
sign_writer.c | 117 | restore_object(_save_file);
sign_writer.c | 144 | new(class sign_type);
sign_writer.c | 166 | new(class sign_making);
sign_writer.c | 175 | do_save();
sign_writer.c | 189 | add_failed_mess(the_short() + " is not currently open.\n");
sign_writer.c | 197 | sprintf("%c", 'a' + sizeof(_signtypes) - 1) + "'.\n");
sign_writer.c | 202 | sprintf("%c", 'a' + sizeof(_signtypes) - 1) + "'.\n");
sign_writer.c | 206 | query_property("place");
sign_writer.c | 241 | write("Aborting sign writing process.\n");
sign_writer.c | 246 | if (strlen(replace(mess, ({ "\n", "", }))) >
sign_writer.c | 255 | if (sizeof(explode(mess, "\n")) >
sign_writer.c | 267 | query_property("place");
sign_writer.c | 273 | money_value_string(cost, place)));
sign_writer.c | 276 | write("What colour paint would you like? ");
sign_writer.c | 277 | input_to("finish_sign", 0, type, mess);
sign_writer.c | 286 | lower_case(colour);
sign_writer.c | 289 | write("Aborting the sign process.\n");
sign_writer.c | 294 | write("I am sorry, we do not stock " + colour + ".\n");
sign_writer.c | 296 | query_multiple_short(keys(_paintcolours)) + ".\n");
sign_writer.c | 297 | write("What colour paint would you like? ");
sign_writer.c | 298 | input_to("finish_sign", 0, type, mess);
sign_writer.c | 302 | query_property("place");
sign_writer.c | 308 | strlen(replace(mess, ({ "\n", "", " ", "" })));
sign_writer.c | 320 | input_to("validate_sign", 0, type, mess, colour, cost);
sign_writer.c | 330 | query_property("place");
sign_writer.c | 343 | lower_case(choice);
sign_writer.c | 346 | write("You did not enter 'yes' or 'no'.  Please try again.\n");
sign_writer.c | 351 | input_to("validate_sign", 0, type, mess, colour);
sign_writer.c | 379 | add_failed_mess(the_short() + " is not currently open.\n");
sign_writer.c | 384 | add_failed_mess("You have no signs to pick up.\n");
sign_writer.c | 391 | if (time() >
sign_writer.c | 396 | clone_object("/std/room/furniture/basic");
sign_writer.c | 397 | explode(type->short, " ");
sign_writer.c | 398 | set_name(bits[<1]);
sign_writer.c | 399 | add_adjective(bits[0..<2]);
sign_writer.c | 400 | set_short(type->short);
sign_writer.c | 401 | set_long(type->long);
sign_writer.c | 402 | set_weight(type->weight);
sign_writer.c | 404 | query_language(), 1);
sign_writer.c | 405 | add_property("sign");
sign_writer.c | 407 | move(this_object());
sign_writer.c | 417 | add_succeeded_mess("$N pick$s up $I.\n", ok);
sign_writer.c | 441 | add_failed_mess(the_short() + " is not currently open.\n");
sign_writer.c | 445 | query_property("place");
sign_writer.c | 454 | sprintf("%c", 'a' + sizeof(_signtypes) - 1) + "'.\n");
sign_writer.c | 459 | sprintf("%c", 'a' + sizeof(_signtypes) - 1) + "'.\n");
sign_writer.c | 490 | add_failed_mess(the_short() + " is not currently open.\n");
sign_writer.c | 494 | query_property("place");
sign_writer.c | 500 | sizeof(_signtypes);
sign_writer.c | 513 | money_value_string(cost, place));
sign_writer.c | 516 | write("$P$Sign browse$P$" + ret);
sign_writer.c | 518 | the_short() + ".\n" }) );
sign_writer.c | 523 | add_command("list", "", (: do_list() :));
sign_writer.c | 524 | add_command("browse", "<string'sign'>", (: do_browse($4[0]) :));
sign_writer.c | 525 | add_command("collect", "sign", (: do_collect() :));
sign_writer.c | 526 | add_command("buy", "<string'sign'>", (: do_order($4[0]) :));
sign_writer.c | 527 | add_command("order", "<string'sign'>", (: do_order($4[0]) :));
player_craft_shop.c | 21 | create();
player_craft_shop.c | 23 | create();
player_craft_shop.c | 25 | create();
player_craft_shop.c | 26 | add_help_file("craft_shop");
player_craft_shop.c | 27 | add_help_file("craft_shop_category");
player_craft_shop.c | 28 | add_help_file("player_craft_shop");
player_craft_shop.c | 34 | init();
player_craft_shop.c | 36 | init();
player_craft_shop.c | 38 | init();
player_craft_shop.c | 44 | dest_me();
player_craft_shop.c | 46 | dest_me();
player_craft_shop.c | 48 | dest_me();
player_craft_shop.c | 56 | set_save_file(dir + "_main");
player_craft_shop.c | 58 | set_save_dir(dir);
player_craft_shop.c | 84 | event_exit(ob, mess, to);
player_craft_shop.c | 86 | event_exit(ob, mess, to);
player_craft_shop.c | 88 | event_exit(ob, mess, to);
player_craft_shop.c | 94 | ownership_change(old_owner, new_owner);
player_craft_shop.c | 95 | ownership_change(old_owner, new_owner);
bank.c | 24 | do_withdraw(int num, string type);
bank.c | 25 | do_deposit(string str);
bank.c | 36 | add_help_file("bank");
bank.c | 37 | create();
bank.c | 41 | add_command( "balance", "" );
bank.c | 43 | do_withdraw($4[0], $4[1]) :) );
bank.c | 44 | add_command( "open", "account" );
bank.c | 45 | add_command( "close", "account" );
bank.c | 46 | add_command( "deposit", "<string>", (: do_deposit($4[0]) :) );
bank.c | 47 | init();
bank.c | 94 | query_money_place() { return query_place();
bank.c | 102 | if ( file_size( save_file +".o" ) >
bank.c | 103 | unguarded((: restore_object, save_file :));
bank.c | 110 | unguarded( (: save_object, save_file :) );
bank.c | 117 | adjust_account( NAME, bank_name, amount );
bank.c | 118 | this_player()->remove_property( "bank "+ OLD_BANK );
bank.c | 120 | do_save();
bank.c | 122 | return (int)HANDLER->query_account( NAME, bank_name );
bank.c | 126 | set_account( NAME, bank_name, amount );
bank.c | 132 | get_account();
bank.c | 134 | notify_fail( "You do not have an account here.\n" );
bank.c | 156 | get_account();
bank.c | 159 | notify_fail( "You do not have an account here.\n" );
bank.c | 164 | notify_fail( "You must withdraw something.\n" );
bank.c | 168 | clone_object( MONEY_OBJECT );
bank.c | 169 | set_money_array( (mixed *)MONEY_HAND->query_values_in( place ) );
bank.c | 171 | notify_fail( "That currency is not legal tender here.  Sorry.\n" );
bank.c | 172 | dest_me();
bank.c | 179 | notify_fail( "You don't have enough money in your account.  Sorry.\n" );
bank.c | 180 | dest_me();
bank.c | 183 | set_money_array( ({ type, number }) );
bank.c | 184 | set_account( total - amount );
bank.c | 186 | do_save();
bank.c | 197 | move( this_object() );
bank.c | 199 | this_player()->save();
bank.c | 213 | get_account();
bank.c | 215 | notify_fail("You don't have an account here.\n");
bank.c | 219 | parse_money( words, this_player(), place );
bank.c | 223 | notify_fail( "You do not have \""+ words +"\".\n" );
bank.c | 225 | notify_fail( "You can only deposit money.\n" );
bank.c | 227 | notify_fail( "You can only deposit legal tender.\n" );
bank.c | 235 | filter_legal_tender( money, place);
bank.c | 239 | query_value_in(place);
bank.c | 241 | query_value_in("default");
bank.c | 248 | move( environment( this_player() ) );
bank.c | 252 | this_player() );
bank.c | 256 | move( environment( this_player() ) );
bank.c | 260 | this_player() );
bank.c | 262 | add_failed_mess("That is too small an amount to deposit.\n");
bank.c | 269 | set_account( total + amount );
bank.c | 271 | do_save();
bank.c | 277 | move( environment( this_player() ) );
bank.c | 281 | this_player() );
bank.c | 286 | the_short();
bank.c | 287 | move( "/room/rubbish" );
bank.c | 288 | this_player()->save();
bank.c | 290 | add_failed_mess("Unable to find any legal money to deposit.\n");
bank.c | 294 | write( "You give the teller "+ howmuch +".\n" );
bank.c | 296 | money_value_string( amount, place ) +".\n" );
bank.c | 312 | if ( get_account() >
bank.c | 313 | notify_fail( "You already have an account here.\n" );
bank.c | 318 | notify_fail( "You do not have any money.\n" );
bank.c | 321 | query_value_in( place );
bank.c | 323 | query_value_in( "default" );
bank.c | 325 | notify_fail( "You do not have enough money to open an account.\n" );
bank.c | 331 | input_to( "check_open" );
bank.c | 334 | set_account( 0 );
bank.c | 343 | lower_case( word );
bank.c | 345 | write( "Okay, not opening an account.\n" );
bank.c | 349 | write( "Do you want to open an account? Answer \"yes\" or \"no\".\n" );
bank.c | 350 | input_to( "check_open" );
bank.c | 353 | set_account( 0 );
bank.c | 354 | write( "You now have an account here.\n" );
bank.c | 355 | present( MONEY_ALIAS, this_player() );
bank.c | 356 | pay_amount_from( account_cost, money, place );
bank.c | 358 | do_save();
bank.c | 359 | this_player()->save();
bank.c | 367 | get_account();
bank.c | 369 | notify_fail( "You do not have an account here.\n" );
bank.c | 380 | move( this_object() );
bank.c | 390 | write( "You close your account.\n" );
bank.c | 393 | set_account( -1 );
bank.c | 394 | do_save();
bank.c | 395 | this_player()->save();
bank.c | 415 | random( 4 );
bank.c | 416 | users();
bank.c | 417 | sizeof( players );
bank.c | 418 | query_name();
bank.c | 439 | adjust_account( player_name, bank_name, -loss );
bank.c | 449 | do_save();
bank.c | 450 | create_money_array( amount / number, place );
bank.c | 451 | allocate( number );
bank.c | 452 | allocate( number );
bank.c | 453 | allocate( number );
bank.c | 455 | clone_object( MONEY_OBJECT );
bank.c | 456 | set_money_array( mon_array );
bank.c | 457 | clone_object( "/obj/container" );
bank.c | 458 | set_name( "bag" );
bank.c | 459 | set_short( "money bag" );
bank.c | 460 | add_adjective( "money" );
bank.c | 461 | add_property( "determinate", "a " );
bank.c | 462 | set_main_plural( "money bags" );
bank.c | 465 | set_weight( 10 );
bank.c | 466 | set_max_weight( 3 * (int)money[ i ]->query_weight() + 10 );
bank.c | 467 | clone_object( "/obj/monster" );
bank.c | 468 | set_name( "robber" );
bank.c | 469 | set_short( "bank robber" );
bank.c | 470 | add_adjective( "bank" );
bank.c | 471 | add_property( "determinate", "a " );
bank.c | 472 | set_main_plural( "bank robbers" );
bank.c | 475 | set_race( "human" );
bank.c | 476 | set_guild( "thief" );
bank.c | 477 | set_gender( 1 + random( 1 ) );
bank.c | 478 | set_level( 20 + random( 30 ) + random( 40 ) );
bank.c | 479 | reset_all();
bank.c | 480 | move( bags[ i ] );
bank.c | 481 | move( robbers[ i ] );
bank.c | 482 | move( this_object() );
vault_entry.c | 25 | add_help_file("vault_entry");
vault_entry.c | 26 | create();
vault_entry.c | 33 | init();
vault_entry.c | 34 | init();
auction_house.c | 10 | create();
auction_house.c | 11 | create();
auction_house.c | 12 | add_help_file("auction_house");
auction_house.c | 16 | init();
auction_house.c | 17 | init();
money_changer.c | 9 | change(string str1, string str2);
money_changer.c | 12 | add_help_file("money_changer");
money_changer.c | 13 | create();
money_changer.c | 17 | init();
money_changer.c | 19 | change($4[0], $4[2]) :) );
money_changer.c | 41 | query_property( "place" );
money_changer.c | 46 | query_values_in( place );
money_changer.c | 47 | set_money_array( values );
money_changer.c | 48 | find_best_fit( type );
money_changer.c | 54 | parse_money( words, this_player(), place );
money_changer.c | 58 | notify_fail( "You do not have \""+ words +"\".\n" );
money_changer.c | 60 | notify_fail( "You can only change money here.\n" );
money_changer.c | 62 | notify_fail( "You can only change legal tender.\n" );
money_changer.c | 68 | filter_legal_tender(money, "default");
money_changer.c | 69 | if (monies[0])  monies[0]->move(this_player());
money_changer.c | 71 | notify_fail( "You can only change legal tender.\n" );
money_changer.c | 76 | query_value_in( place );
money_changer.c | 83 | query_value_in( "default" );
money_changer.c | 86 | member_array(values[val_index], money->query_money_array());
money_changer.c | 90 | query_property("rate");
money_changer.c | 98 | move( this_player() );
money_changer.c | 104 | printf("%O %O %O %O\n", value, value_unit, value_change, value_type);
money_changer.c | 106 | clone_object( MONEY_OBJECT );
money_changer.c | 109 | create_money_array( value_change, place );
money_changer.c | 118 | query_multiple_short( (string)changed->half_short( 1 ) ) +".\n" );
money_changer.c | 119 | move( "/room/rubbish" );
money_changer.c | 121 | adjust_money( change );
money_changer.c | 128 | move( this_object() );
player_pub.c | 20 | create();
player_pub.c | 21 | create();
player_pub.c | 24 | this_object()->setup();
player_pub.c | 25 | this_object()->reset();
player_pub.c | 31 | init();
player_pub.c | 32 | init();
player_pub.c | 37 | dest_me();
player_pub.c | 38 | dest_me();
item_shop.c | 22 | create();
item_shop.c | 23 | create();
item_shop.c | 27 | this_object()->setup();
item_shop.c | 28 | this_object()->reset();
item_shop.c | 34 | init();
item_shop.c | 35 | init();
item_shop.c | 42 | event_theft( command_ob, thief, victim, stolen );
item_shop.c | 43 | event_theft( command_ob, thief, victim, stolen );
item_shop.c | 48 | dest_me();
item_shop.c | 49 | dest_me();
vault.c | 38 | add_exit(direc, dest, type);
vault.c | 39 | modify_exit( direc, ({ "function", "check_done" }) );
vault.c | 40 | modify_exit( direc, ({ "closed", 1 }) );
vault.c | 62 | query_name();
vault.c | 63 | clone_object( "/obj/cont_save" );
vault.c | 64 | set_max_weight( 1000 );
vault.c | 65 | set_open();
vault.c | 66 | set_stuck( 1 );
vault.c | 67 | set_can_recurse(1);
vault.c | 68 | reset_get();
vault.c | 72 | add_property( "owner", owner );
vault.c | 73 | do_save();
vault.c | 76 | move(this_object());
vault.c | 77 | add_property("there", "here");
vault.c | 78 | this_object()->setup_container(container);
vault.c | 79 | add_property( "owner", owner );
vault.c | 80 | query_property("there");
vault.c | 95 | query_name();
vault.c | 110 | remove_hidden_object( _container );
vault.c | 111 | dest_me();
vault.c | 116 | init_container(thing);
vault.c | 117 | call_out("fix_owner", 2, owner);
vault.c | 129 | add_property( "owner", owner );
vault.c | 131 | add_property("there", _there);
vault.c | 141 | tell_room( this_object(), "The door swings shut.\n" );
vault.c | 144 | notify_fail( "" );
vault.c | 154 | remove_hidden_object(_container);
vault.c | 155 | move("/room/void");
vault.c | 156 | call_out((: _container->dest_me() :), 1);
vault.c | 159 | save_me();
vault.c | 178 | set_name( "drawer" );
vault.c | 179 | set_short( "drawer" );
vault.c | 180 | add_alias( "drawer" );
vault.c | 193 | if( sscanf( str,"%s %s", str, st1 ) );
vault.c | 213 | move_with_look(_entry);
vault.c | 220 | init();
vault.c | 221 | this_player()->command_override( (: trap_action :) );
real_estate_auction.c | 19 | add_house(string house);
real_estate_auction.c | 28 | create();
real_estate_auction.c | 29 | add_help_file("real_estate");
real_estate_auction.c | 34 | call_out("after_reset", 10);
real_estate_auction.c | 68 | query_vacant(area);
real_estate_auction.c | 73 | call_out("add_house", i++, house);
real_estate_auction.c | 103 | set_rent(house, 0);
real_estate_auction.c | 104 | clone_object(AGREEMENT);
real_estate_auction.c | 105 | set_city(_city);
real_estate_auction.c | 106 | set_language(_language);
real_estate_auction.c | 107 | set_house(house);
real_estate_auction.c | 108 | query_address(house);
real_estate_auction.c | 109 | query_last_auction_finish_time();
real_estate_auction.c | 113 | time();
real_estate_auction.c | 118 | set_under_offer(house);
real_estate_auction.c | 121 | log_file("REAS", ctime(time()) + ": Added house %s\n", house);
real_estate_auction.c | 153 | write("House is not currently under offer!\n");
real_estate_auction.c | 157 | set_for_sale(house);
real_estate_auction.c | 158 | log_file("REAS", ctime(time()) + ": %s back to For Sale.\n", house);
real_estate_auction.c | 162 | set_owner(house, buyer);
real_estate_auction.c | 163 | set_value(house, cost);
real_estate_auction.c | 164 | set_city(_city);
real_estate_auction.c | 165 | set_language(_language);
real_estate_auction.c | 166 | set_house(house);
real_estate_auction.c | 169 | money_value_string(cost, query_property("place")));
real_estate_auction.c | 171 | clone_object(BOOK);
real_estate_auction.c | 174 | move(this_object());
real_estate_auction.c | 177 | write("A nice new house owner's guide pops up for you.\n");
real_estate_auction.c | 192 | query_property("place");
real_estate_auction.c | 204 | this_player()->query_name());
real_estate_auction.c | 206 | add_failed_mess("You are not renting any houses.\n");
real_estate_auction.c | 209 | sizeof(houses);
real_estate_auction.c | 212 | query_region(houses[i]));
real_estate_auction.c | 218 | write("Which house to choose? ");
real_estate_auction.c | 219 | input_to("new_agreement_choice", 0, houses);
real_estate_auction.c | 233 | query_property("place");
real_estate_auction.c | 234 | lower_case(choice);
real_estate_auction.c | 236 | write("Ok, canceling agreement check.\n");
real_estate_auction.c | 242 | write("Choice out of bounds.\n");
real_estate_auction.c | 256 | create_money_array(NEW_AGREEMENT_COST, place));
real_estate_auction.c | 257 | clone_object(AGREEMENT);
real_estate_auction.c | 258 | set_city(_city);
real_estate_auction.c | 259 | set_language(_language);
real_estate_auction.c | 260 | set_house(houses[index]);
real_estate_auction.c | 262 | write("Unable to move the agreement into your inventory.\n");
real_estate_auction.c | 266 | query_address(houses[index]) + ".\n");
real_estate_auction.c | 288 | query_name());
real_estate_auction.c | 315 | init();
real_estate_auction.c | 316 | add_command("request", "[agreement]", (: do_agreement() :));
real_estate_auction.c | 328 | set_under_offer(auc->extra);
general_shop.c | 75 | shop_list(mixed arr, int detail);
general_shop.c | 78 | find_free_exit();
general_shop.c | 79 | do_buy(object *ob);
general_shop.c | 80 | do_list_these(object *obs);
general_shop.c | 81 | do_buy_things( object *obs, int cost, object pl );
general_shop.c | 84 | create_mercenary(object rep);
general_shop.c | 85 | event_shoplift(object command_ob, object thief, object victim);
general_shop.c | 86 | query_store_room();
general_shop.c | 87 | creator_object (object);
general_shop.c | 104 | add_help_file("shop");
general_shop.c | 106 | create();
general_shop.c | 112 | remove_property("inventory_loss");
general_shop.c | 114 | call_out("send_out_reps", 2);
general_shop.c | 295 | func(obs, client, money, extra);
general_shop.c | 305 | set_sell_message("You sell $ob$ for $money$.\n");
general_shop.c | 327 | func(obs, client, money, extra);
general_shop.c | 337 | set_buy_message("You buy $ob$ for $money$.\n");
general_shop.c | 359 | func(obs, client, money, extra);
general_shop.c | 369 | set_value_message("$ob$ is valued at $money$.\n");
general_shop.c | 392 | func(obs, client, money, extra);
general_shop.c | 402 | set_browse_message("$ob$ is worth too much to be sold here.\n");
general_shop.c | 425 | func(obs, client, money, extra);
general_shop.c | 435 | set_not_worthy_message("$ob$ is not worth enough to be sold here.\n");
general_shop.c | 458 | func(obs, client, money, extra);
general_shop.c | 468 | set_browse_message("$ob$ costs $money$, it looks like:\n$extra$");
general_shop.c | 491 | func(obs, client, money, extra);
general_shop.c | 501 | set_list_message("$extra$.\n");
general_shop.c | 524 | set_open_function(str);
general_shop.c | 526 | set_open_function( (: $(str) :) );
general_shop.c | 528 | set_open_function( (: call_other($(str[0]), $(str[1]), $1) :) );
general_shop.c | 530 | set_open_function( (: call_other( this_object(), $(str), $1 ) :) );
general_shop.c | 691 | match_objects_for_existence(str, ({ query_store_room() }));
general_shop.c | 741 | init();
general_shop.c | 745 | file_name(our_storeroom);
general_shop.c | 750 | add_command("sell", "<indirect:object:me>");
general_shop.c | 751 | add_command("buy", "<indirect:object:"+room+">");
general_shop.c | 752 | add_command("list", "[all]");
general_shop.c | 754 | do_list_these($1) :));
general_shop.c | 755 | add_command("browse", "<indirect:object:"+room+">");
general_shop.c | 756 | add_command("value", "<indirect:object:me>");
general_shop.c | 794 | return (int)thing->query_property("cost here");
general_shop.c | 797 | return (int)thing->query_value_at( this_object() );
general_shop.c | 851 | uniq_array( in_obs );
general_shop.c | 853 | filter_array(in_obs, (: !$1->query_keep() :));
general_shop.c | 854 | filter (obs, (: creator_object ($1) :));
general_shop.c | 863 | move ("/room/rubbish");
general_shop.c | 867 | query_multiple_short (cre) + "!\n");
general_shop.c | 872 | query_property( "virtual name" );
general_shop.c | 874 | base_name (thing);
general_shop.c | 882 | query_multiple_short (text), file_name (this_object())));
general_shop.c | 894 | this_player()->query_holding() + this_player()->query_armours();
general_shop.c | 895 | filter(obs, (: member_array($1, $2) != -1 :), in_obs);
general_shop.c | 912 | rabbit_away();
general_shop.c | 913 | find_object(our_storeroom);
general_shop.c | 915 | if(sizeof(all_inventory(storeob)) >
general_shop.c | 918 | call_out("tidy_inventory", random(20));
general_shop.c | 922 | if(sizeof(obs) >
general_shop.c | 923 | write("The shopkeeper can't cope with all those objects.\n");
general_shop.c | 927 | query_property("place");
general_shop.c | 931 | sizeof(obs);
general_shop.c | 936 | remove_property("stolen");
general_shop.c | 938 | if((this_object()->query_value(obs[i], 1) >
general_shop.c | 949 | this_object()->query_value(obs[i], 1);
general_shop.c | 951 | scaled_value( amt );
general_shop.c | 960 | being_sold();
general_shop.c | 964 | move(this_player());
general_shop.c | 975 | call_other(this_object(), cannot_sell_func, this_player(), cannot);
general_shop.c | 977 | evaluate(cannot_sell_func, this_player(), cannot);
general_shop.c | 982 | if(sizeof(stolen) >
general_shop.c | 991 | event_shoplift(this_object(), this_player(), this_object());
general_shop.c | 1002 | move(this_player());
general_shop.c | 1008 | create_money_array(total_amt, place);
general_shop.c | 1009 | clone_object(MONEY_OBJECT);
general_shop.c | 1010 | set_money_array(m_array);
general_shop.c | 1013 | call_other(this_object(), cannot_sell_func, this_player(), cannot);
general_shop.c | 1015 | evaluate(cannot_sell_func, this_player(), cannot);
general_shop.c | 1017 | write("You cannot sell "+query_multiple_short(cannot)+".\n");
general_shop.c | 1018 | move(this_player());
general_shop.c | 1021 | call_other(this_object(), sell_func, this_player(), obs);
general_shop.c | 1023 | evaluate(sell_func, this_player(), obs);
general_shop.c | 1026 | money_string(m_array), "");
general_shop.c | 1031 | move(this_object());
general_shop.c | 1033 | this_object()->made_transaction(-total_amt, selling);
general_shop.c | 1072 | if(sizeof(obs) >
general_shop.c | 1073 | write("The shopkeeper can't cope with all those objects.\n");
general_shop.c | 1076 | filter( obs, (: creator_object( $1 ) :) );
general_shop.c | 1085 | query_property("place");
general_shop.c | 1089 | present(MONEY_ALIAS, this_player());
general_shop.c | 1092 | call_other(this_object(), too_costly_func, this_player(), obs);
general_shop.c | 1094 | evaluate(too_costly_func, this_player(), obs);
general_shop.c | 1100 | query_value_in(place);
general_shop.c | 1102 | query_value_in("default");
general_shop.c | 1105 | this_object()->query_value(obs[i], 0);
general_shop.c | 1110 | delete(obs, i, 1);
general_shop.c | 1121 | move(this_object());
general_shop.c | 1136 | call_other(this_object(), too_costly_func, this_player(), cannot);
general_shop.c | 1138 | evaluate(too_costly_func, this_player(), cannot);
general_shop.c | 1146 | do_buy_things(to_buy, total_cost, this_player());
general_shop.c | 1157 | query_property("place");
general_shop.c | 1161 | present(MONEY_ALIAS, pl);
general_shop.c | 1164 | call_other(this_object(), too_costly_func, this_player(), obs);
general_shop.c | 1166 | evaluate(too_costly_func, this_object(), obs);
general_shop.c | 1172 | clone_object(MONEY_OBJECT);
general_shop.c | 1173 | create_money_array(cost, place);
general_shop.c | 1174 | sizeof(m_array);
general_shop.c | 1180 | sizeof(p_array[0]);
general_shop.c | 1181 | adjust_money(-p_array[0][j + 1], p_array[0][j]);
general_shop.c | 1183 | adjust_money(p_array[1]);
general_shop.c | 1186 | money_string(m_array), "");
general_shop.c | 1188 | call_other(this_object(), buy_func, pl, obs);
general_shop.c | 1190 | evaluate(buy_func, pl, obs);
general_shop.c | 1195 | move(this_object());
general_shop.c | 1197 | this_object()->made_transaction(cost, obs);
general_shop.c | 1215 | load_object( original_storeroom );
general_shop.c | 1225 | call_other(this_object(), list_func, this_player());
general_shop.c | 1227 | evaluate(list_func, this_player());
general_shop.c | 1230 | shop_list(all_inventory(ob), 0));
general_shop.c | 1245 | this_player(), "", shop_list(obs, 1));
general_shop.c | 1261 | query_property("place");
general_shop.c | 1266 | call_other(this_object(), browse_func, this_player(), obs);
general_shop.c | 1268 | evaluate(browse_func, this_player(), obs);
general_shop.c | 1270 | sizeof(obs);
general_shop.c | 1271 | this_object()->query_value(obs[i], 0);
general_shop.c | 1274 | long());
general_shop.c | 1294 | query_property("place");
general_shop.c | 1298 | sizeof(obs);
general_shop.c | 1305 | this_object()->query_value(obs[i], 1);
general_shop.c | 1310 | scaled_value(val);
general_shop.c | 1314 | do_not_sell());
general_shop.c | 1318 | do_not_sell());
general_shop.c | 1323 | do_not_sell());
general_shop.c | 1364 | all_inventory(this_object());
general_shop.c | 1368 | sizeof(list);
general_shop.c | 1369 | short();
general_shop.c | 1384 | m_indices(inv);
general_shop.c | 1393 | query_property("place");
general_shop.c | 1397 | sizeof(shorts);
general_shop.c | 1399 | sizeof(ind);
general_shop.c | 1401 | query_amount();
general_shop.c | 1409 | query_plural());
general_shop.c | 1414 | query_plural());
general_shop.c | 1417 | query_plural();
general_shop.c | 1422 | sizeof(ind);
general_shop.c | 1423 | this_object()->query_value(ind[j], 0);
general_shop.c | 1424 | money_value_string(value, place);
general_shop.c | 1433 | if(sizeof(m_values(costs)[0]) >
general_shop.c | 1440 | m_indices(costs);
general_shop.c | 1441 | sizeof(vals);
general_shop.c | 1458 | set_store_room(PATH+"store_room");
general_shop.c | 1463 | find_object(ob);
general_shop.c | 1465 | load_object(ob);
general_shop.c | 1479 | create_mercenary(0);
general_shop.c | 1480 | move(environment(tp));
general_shop.c | 1481 | attack_ob(tp);
general_shop.c | 1512 | this_player()->add_succeeded_mess(this_object(), "", ob);
general_shop.c | 1514 | evaluate(arr, ob, client, money, extra);
general_shop.c | 1540 | replace(str, "$ob$", query_multiple_short(ob, which));
general_shop.c | 1542 | replace(str, "$ob$", call_other(ob, which +"_short"));
general_shop.c | 1545 | replace(str, "$client$", client->the_short());
general_shop.c | 1547 | replace(str, ({"$money$", money, "$extra$", extra}));
general_shop.c | 1632 | clone_object("/obj/monster");
general_shop.c | 1633 | set_name("rep");
general_shop.c | 1634 | set_short("sales rep");
general_shop.c | 1635 | add_adjective("sales");
general_shop.c | 1638 | add_alias("Sales rep alias");
general_shop.c | 1639 | set_guild("fighter");
general_shop.c | 1640 | set_race("human");
general_shop.c | 1641 | adjust_bon_str(15);
general_shop.c | 1642 | set_level(60);
general_shop.c | 1643 | request_weapon("dagger", 100)->move(ob);
general_shop.c | 1644 | request_armour("cloth robe", 100)->move(ob);
general_shop.c | 1645 | init_equip();
general_shop.c | 1646 | add_property("rep type", shop_type);
general_shop.c | 1647 | all_inventory(ob)->add_property("mine", 1);
general_shop.c | 1664 | sizeof(other_shops);
general_shop.c | 1665 | this_object()->create_rep();
general_shop.c | 1666 | add_property("goto destination", other_shops[i]);
general_shop.c | 1667 | add_property("goto property", "shop");
general_shop.c | 1671 | file_name(this_object()), "rep_made_it");
general_shop.c | 1685 | previous_object()->init_command("'Oh no!  I am utterly lost!");
general_shop.c | 1686 | previous_object()->init_command("sigh");
general_shop.c | 1687 | call_out("set_up_return", 5, previous_object());
general_shop.c | 1691 | previous_object()->query_current_room());
general_shop.c | 1692 | previous_object()->query_current_room())->query_stock(shop_type);
general_shop.c | 1697 | this_object()->none_to_sell();
general_shop.c | 1698 | call_out("set_up_return", 5, previous_object());
general_shop.c | 1701 | sizeof(obs);
general_shop.c | 1706 | call_out("do_rep_buy", 5, ({previous_object(), obs, cost}));
general_shop.c | 1708 | call_out("do_rep_buy", 5, ({previous_object(), obs, cost}));
general_shop.c | 1709 | previous_object()->adjust_value(cost);
general_shop.c | 1723 | implode(rep->query_adjectives(), " ")+" "+rep->query_name();
general_shop.c | 1725 | clone_object("/obj/monster");
general_shop.c | 1726 | set_name("mercenary");
general_shop.c | 1727 | add_alias("troll");
general_shop.c | 1728 | add_adjective("troll");
general_shop.c | 1729 | set_short("troll mercenary");
general_shop.c | 1730 | set_main_plural("troll mercenaries");
general_shop.c | 1731 | set_race("troll");
general_shop.c | 1732 | set_class("fighter");
general_shop.c | 1733 | set_level(200 + random(200));
general_shop.c | 1738 | move(environment(rep));
general_shop.c | 1739 | do_command("follow "+nam);
general_shop.c | 1740 | do_command("protect "+nam);
general_shop.c | 1741 | add_property("merchant", rep);
general_shop.c | 1743 | request_weapon("spiked club", 100)->move(ob);
general_shop.c | 1745 | set_natural(1);
general_shop.c | 1746 | init_equip();
general_shop.c | 1747 | set_join_fights("Troll yells something incomprehensible.\n");
general_shop.c | 1748 | set_join_fight_type(0);
general_shop.c | 1776 | query_shop_type_mapping();
general_shop.c | 1778 | return ({ });
general_shop.c | 1794 | adjust_money(cost, "brass");
general_shop.c | 1795 | query_current_room()->do_buy(obs, cost, rep);
general_shop.c | 1796 | move(present("Sales rep alias", rep->query_current_room()));
general_shop.c | 1797 | call_out("set_up_return", 5, rep);
general_shop.c | 1805 | add_property("goto destination", file_name(this_object()));
general_shop.c | 1807 | this_object(), "rep_came_back");
general_shop.c | 1817 | previous_object()->find_inv_match("all", previous_object());
general_shop.c | 1819 | sizeof(obs);
general_shop.c | 1826 | move(our_storeroom);
general_shop.c | 1831 | query_multiple_short(obs2)+" into the stock.\n");
general_shop.c | 1834 | previous_object()->query_current_room());
general_shop.c | 1835 | all_inventory(this_object());
general_shop.c | 1837 | sizeof(obs);
general_shop.c | 1844 | query_multiple_short(obs2+({previous_object()}), "one")+" go away.\n");
general_shop.c | 1846 | tell_room(this_object(), previous_object()->short()+" goes away.\n");
general_shop.c | 1848 | dest_me();
general_shop.c | 1849 | previous_object()->dest_me();
general_shop.c | 1867 | environment(tp)->create_mercenary(0);
general_shop.c | 1873 | attack_ob(tp);
general_shop.c | 1874 | random(5);
general_shop.c | 1875 | create_mercenary(0);
general_shop.c | 1878 | attack_ob(tp);
general_shop.c | 1912 | handle_shoplift(thief, victim);
general_shop.c | 1915 | evaluate(shoplift_handler, thief, victim);
general_shop.c | 1917 | handle_shoplift(thief, victim);
general_shop.c | 1937 | rabbit_away();
general_shop.c | 1938 | find_object(our_storeroom);
general_shop.c | 1944 | all_inventory(storeob);
general_shop.c | 1946 | while(sizeof(inventory) >
general_shop.c | 1947 | random(sizeof(inventory));
general_shop.c | 1949 | dest_me();
general_shop.c | 1955 | all_inventory(storeob);
general_shop.c | 1964 | dest_me();
general_shop.c | 1965 | dest_me();
item_shop_outside.c | 21 | create();
item_shop_outside.c | 22 | create();
item_shop_outside.c | 27 | init();
item_shop_outside.c | 28 | init();
item_shop_outside.c | 35 | event_theft( command_ob, thief, victim, stolen );
item_shop_outside.c | 36 | event_theft( command_ob, thief, victim, stolen );
item_shop_outside.c | 41 | dest_me();
item_shop_outside.c | 42 | dest_me();
bank_franchise.c | 21 | add_help_file("bank");
bank_franchise.c | 22 | create();
bank_franchise.c | 36 | file_name(this_object());
bank_franchise.c | 68 | if ( file_size( _save_file +".o" ) >
bank_franchise.c | 69 | unguarded((: restore_object, _save_file :));
bank_franchise.c | 80 | unguarded( (: save_object, _save_file :) );
bank_franchise.c | 86 | query_save_file() }) });
bank_franchise.c | 94 | random( 4 );
bank_franchise.c | 95 | users();
bank_franchise.c | 96 | sizeof( players );
bank_franchise.c | 97 | query_name();
bank_franchise.c | 118 | adjust_account( player_name, query_bank_name(), -loss );
bank_franchise.c | 128 | event_save(this_object());
bank_franchise.c | 129 | create_money_array( amount / number, _place );
bank_franchise.c | 130 | allocate( number );
bank_franchise.c | 131 | allocate( number );
bank_franchise.c | 132 | allocate( number );
bank_franchise.c | 134 | clone_object( MONEY_OBJECT );
bank_franchise.c | 135 | set_money_array( mon_array );
bank_franchise.c | 136 | clone_object( "/obj/container" );
bank_franchise.c | 137 | set_name( "bag" );
bank_franchise.c | 138 | set_short( "money bag" );
bank_franchise.c | 139 | add_adjective( "money" );
bank_franchise.c | 140 | add_property( "determinate", "a " );
bank_franchise.c | 141 | set_main_plural( "money bags" );
bank_franchise.c | 144 | set_weight( 10 );
bank_franchise.c | 145 | set_max_weight( 3 * (int)money[ i ]->query_weight() + 10 );
bank_franchise.c | 146 | clone_object( "/obj/monster" );
bank_franchise.c | 147 | set_name( "robber" );
bank_franchise.c | 148 | set_short( "bank robber" );
bank_franchise.c | 149 | add_adjective( "bank" );
bank_franchise.c | 150 | add_property( "determinate", "a " );
bank_franchise.c | 151 | set_main_plural( "bank robbers" );
bank_franchise.c | 154 | set_race( "human" );
bank_franchise.c | 155 | set_guild( "thief" );
bank_franchise.c | 156 | set_gender( 1 + random( 1 ) );
bank_franchise.c | 157 | set_level( 20 + random( 30 ) + random( 40 ) );
bank_franchise.c | 158 | reset_all();
bank_franchise.c | 159 | move( bags[ i ] );
bank_franchise.c | 160 | move( robbers[ i ] );
bank_franchise.c | 161 | move( this_object() );
bank_franchise.c | 167 | init();
bank_franchise.c | 168 | init();
craft_shop_category.c | 13 | add_help_file("craft_shop");
craft_shop_category.c | 14 | add_help_file("craft_shop_category");
craft_shop_category.c | 15 | create();
craft_shop_category.c | 16 | create();
craft_shop_category.c | 21 | init();
craft_shop_category.c | 22 | init();
craft_shop_category.c | 27 | dest_me();
craft_shop_category.c | 28 | dest_me();
binding.c | 20 | add_command("bind", "<object:indirect:me'pages'> into book");
binding.c | 33 | query_read_mess();
binding.c | 34 | sizeof(stuff);
binding.c | 77 | query_property("place");
binding.c | 82 | sizeof(paper);
binding.c | 87 | if (this_player()->query_value(place) >
binding.c | 98 | clone_object("/std/book");
binding.c | 100 | add_page_after(ob, book->query_num_pages() + 1);
binding.c | 103 | move(this_player());
book_shop.c | 12 | browse_pages(object *obs);
book_shop.c | 22 | init();
book_shop.c | 23 | file_name(query_controller()->query_sell_list());
book_shop.c | 25 | browse_pages($1) :) );
book_shop.c | 26 | set_extra_sell_check((: choose_which_page :));
book_shop.c | 51 | query_controller()->create_all_real_objects(this_player(), obs);
book_shop.c | 55 | sizeof(obs);
book_shop.c | 57 | query_property(READ_PAGE_PROPERTY);
book_shop.c | 60 | add_property(READ_PAGE_PROPERTY, number);
book_shop.c | 61 | query_controller()->update_craft_object(obs[i], real_obs[i]);
book_shop.c | 66 | set_open_page(number);
book_shop.c | 67 | the_short() + ":\n" + ob->long();
book_shop.c | 68 | query_readable_message();
book_shop.c | 73 | query_readable_message();
book_shop.c | 79 | add_succeeded_mess(({ mess, "$N browses a page of $I.\n" }), ok);
book_shop.c | 98 | browse (0 for the cover only)? ");
book_shop.c | 99 | input_to((: finish_choose :), 0, end_func, value, name, sellables);
book_shop.c | 112 | write("Aborting sale.\n");
book_shop.c | 116 | write("Need to actually enter a number.\n");
book_shop.c | 119 | input_to((: finish_choose :), 0, end_func, value, name, sellables);
book_shop.c | 123 | write("Need to specify a page number greator than zero.\n");
book_shop.c | 126 | input_to((: finish_choose :), 0, end_func, value, name, sellables);
book_shop.c | 129 | filter(sellables, (: $1->query_num_pages() < $(page) :) );
book_shop.c | 132 | query_multiple_short(invalid) + ".\n");
book_shop.c | 135 | input_to((: finish_choose :), 0, end_func, value, name, sellables);
book_shop.c | 138 | add_property(READ_PAGE_PROPERTY, page);
book_shop.c | 139 | set_open_page(0);
book_shop.c | 140 | evaluate(end_func, value, name, sellables);
pub_shop.c | 39 | add_help_file("pub_shop");
pub_shop.c | 41 | create();
pub_shop.c | 42 | create();
pub_shop.c | 45 | this_object()->setup();
pub_shop.c | 46 | this_object()->reset();
pub_shop.c | 54 | init();
pub_shop.c | 55 | init();
pub_shop.c | 60 | dest_me();
pub_shop.c | 61 | dest_me();
print_shop.c | 8 | set_office_room(room_path);
print_shop.c | 14 | set_no_collection();
print_shop.c | 59 | price_object(object ob, int num, string language);
print_shop.c | 60 | do_print_copies(object *obs, int num, string language);
print_shop.c | 61 | do_print(object *obs, string language);
print_shop.c | 62 | do_claim(object *obs);
print_shop.c | 63 | do_collect();
print_shop.c | 64 | do_print_run(object ob, int number, int cost, string language);
print_shop.c | 65 | print_pricing(object ob, string language);
print_shop.c | 66 | remove_print_run(string name, mixed *info);
print_shop.c | 67 | query_print_run(string name);
print_shop.c | 68 | add_print_run(string name, object ob, int number, string language);
print_shop.c | 69 | load_it();
print_shop.c | 70 | save_it();
print_shop.c | 71 | query_print_shop_name();
print_shop.c | 72 | query_static_auto_load_info(int num);
print_shop.c | 73 | query_dynamic_auto_load_info(int num);
print_shop.c | 74 | add_auto_load_info(string static, string dynamic);
print_shop.c | 75 | create_fly_leaf(object book, string language);
print_shop.c | 76 | remove_auto_load_info(int num);
print_shop.c | 90 | create();
print_shop.c | 91 | load_it();
print_shop.c | 92 | add_help_file("print_shop");
print_shop.c | 101 | do_print($1, default_language) :));
print_shop.c | 103 | do_print_copies($1, $4[0], default_language) :) );
print_shop.c | 104 | add_command("claim", "copyright on <indirect:object>", (: do_claim :));
print_shop.c | 107 | implode(keys(translation_costs) + ({ default_language }), "|");
print_shop.c | 109 | do_print($1, $4[1]) :));
print_shop.c | 112 | do_print_copies($1, $4[0], $4[2]) :) );
print_shop.c | 116 | add_command("collect", "", (: do_collect :));
print_shop.c | 139 | query_book_owner(book->query_book_num());
print_shop.c | 162 | this_player()->query_name();
print_shop.c | 175 | add_failed_mess("You cannot copyright $I.\n", cannot_copyright);
print_shop.c | 187 | query_property( "place" );
print_shop.c | 195 | price_object(ob, COPYRIGHT_NUMBER, default_language);
print_shop.c | 198 | this_player()->query_value_in( place );
print_shop.c | 200 | this_player()->query_value_in( "default" );
print_shop.c | 207 | write("Do you wish to continue? ");
print_shop.c | 208 | input_to("check_copyright", 0, new_copyright, value);
print_shop.c | 210 | write("Although you do not currently have enough money.\n");
print_shop.c | 224 | write("Ok, never mind.  See you again soon.\n");
print_shop.c | 229 | query_property( "place" );
print_shop.c | 238 | add_book(ob, 0, this_player()->query_name());
print_shop.c | 239 | set_book_num(new_num);
print_shop.c | 240 | add_property(BH_COPYRIGHT, this_player()->query_name());
print_shop.c | 278 | this_object();
print_shop.c | 280 | query_print_run(this_player()->query_name());
print_shop.c | 282 | add_failed_mess("No books available for collection.\n");
print_shop.c | 298 | query_static_auto_load_info(auto_load_num);
print_shop.c | 299 | query_dynamic_auto_load_info(auto_load_num);
print_shop.c | 306 | remove_print_run(this_player()->query_name(), info);
print_shop.c | 308 | remove_print_run(this_player()->query_name(), info);
print_shop.c | 312 | clone_object(ob_name);
print_shop.c | 314 | init_static_arg(static_arg);
print_shop.c | 317 | init_dynamic_arg(dynamic_arg);
print_shop.c | 321 | set_open_page(0);
print_shop.c | 324 | query_num_pages();
print_shop.c | 326 | query_selected_page(j);
print_shop.c | 328 | set_open_page(0);
print_shop.c | 334 | create_fly_leaf(new_ob, language);
print_shop.c | 337 | replace_page_with(fly_leaf, j);
print_shop.c | 340 | add_page_after(fly_leaf, j - 1);
print_shop.c | 342 | query_selected_page(j + 1);
print_shop.c | 346 | query_read_mess();
print_shop.c | 356 | set_read_mess(stuff);
print_shop.c | 359 | query_static_auto_load();
print_shop.c | 360 | query_dynamic_auto_load();
print_shop.c | 362 | dest_me();
print_shop.c | 365 | clone_object(ob_name);
print_shop.c | 366 | set_player(this_player());
print_shop.c | 368 | init_static_arg(static_arg, this_player());
print_shop.c | 371 | init_dynamic_arg(dynamic_arg, this_player());
print_shop.c | 374 | move(this_object());
print_shop.c | 393 | create_default_page_object();
print_shop.c | 406 | add_property(BH_IGNORE_PAGE, 1);
print_shop.c | 420 | query_read_mess();
print_shop.c | 421 | sizeof(stuff);
print_shop.c | 443 | query_read_mess();
print_shop.c | 444 | sizeof(stuff);
print_shop.c | 479 | copyright_holder(ob);
print_shop.c | 488 | query_open_page();
print_shop.c | 489 | query_num_pages();
print_shop.c | 490 | set_open_page(page);
print_shop.c | 500 | set_open_page(old_page);
print_shop.c | 528 | add_failed_mess("Unable to print $I as they are not a book or paper.\n", nothing);
print_shop.c | 533 | if (sizeof(books + paper) >
print_shop.c | 536 | query_multiple_short(books + paper) + ".\n");
print_shop.c | 540 | if (sizeof(books) >
print_shop.c | 564 | find_book_or_paper(obs);
print_shop.c | 569 | print_pricing(ob, language);
print_shop.c | 570 | write("Use: print <number> of <book>\n");
print_shop.c | 598 | add_failed_mess("Must print at least one copy.\n", obs);
print_shop.c | 608 | query_property( "place" );
print_shop.c | 613 | find_book_or_paper(obs);
print_shop.c | 618 | price_object(ob, number, language);
print_shop.c | 621 | this_player()->query_value_in( place );
print_shop.c | 623 | this_player()->query_value_in( "default" );
print_shop.c | 635 | write("NOTE:  You are printing a copyright document.\n");
print_shop.c | 647 | input_to("check_cost", 0, ob, number, cost, language);
print_shop.c | 655 | write("Ok, don't worry.  See you again.\n");
print_shop.c | 658 | do_print_run(ob, number, cost, language);
print_shop.c | 676 | query_property( "place" );
print_shop.c | 682 | this_player()->query_value_in( place );
print_shop.c | 684 | this_player()->query_value_in( "default" );
print_shop.c | 688 | write("You do not seem to have enough money any more.\n");
print_shop.c | 701 | query_print_run(this_player()->query_name());
print_shop.c | 708 | amtime(stuff[<1][COLLECT_TIME]) + " for 'collect'ion.\n");
print_shop.c | 730 | set_open_page(0);
print_shop.c | 731 | query_read_mess();
print_shop.c | 732 | sizeof(stuff);
print_shop.c | 734 | strlen(stuff[i][READ_MESS]);
print_shop.c | 754 | query_num_pages();
print_shop.c | 755 | set_open_page(i + 1);
print_shop.c | 757 | price_object(ob->query_current_page(), 1, to_language);
print_shop.c | 766 | sizeof(discount_schedule);
print_shop.c | 785 | query_property( "place" );
print_shop.c | 794 | write("The cost for the different numbers of " + ob->the_short() + " is:\n");
print_shop.c | 798 | amtime(time_to_collect + time_per_copy + time()) + ".\n");
print_shop.c | 799 | sizeof(discount_schedule);
print_shop.c | 805 | amtime(time_to_collect + time_per_copy * num + time()) ));
print_shop.c | 814 | if (sizeof(translation_costs) >
print_shop.c | 819 | write("\n");
print_shop.c | 821 | write(sprintf("   %3d%% %s", cost, language));
print_shop.c | 823 | write("\n");
print_shop.c | 893 | allocate(COLLECT_ARR_SIZE);
print_shop.c | 897 | base_name(ob);
print_shop.c | 899 | query_dynamic_auto_load());
print_shop.c | 902 | save_it();
print_shop.c | 927 | member_array(info, collectables[name]);
print_shop.c | 930 | remove_auto_load_info(info[COLLECT_AUTO_LOAD_NUM]);
print_shop.c | 934 | map_delete(collectables, name);
print_shop.c | 936 | save_it();
print_shop.c | 952 | while (unguarded( (: file_size(save_dir + "/" + $(num)) :) ) >
print_shop.c | 967 | unguarded( (: rm(save_dir + "/" + $(num) ) :) );
print_shop.c | 980 | if (unguarded( (: file_size(save_dir + "/" + $(num)) :) ) >
print_shop.c | 981 | unguarded( (: read_file(save_dir + "/" + $(num)) :) );
print_shop.c | 983 | restore_variable(tmp);
print_shop.c | 1000 | if (unguarded( (: file_size(save_dir + "/" + $(num)) :) ) >
print_shop.c | 1001 | unguarded( (: read_file(save_dir + "/" + $(num)) :) );
print_shop.c | 1003 | restore_variable(tmp);
print_shop.c | 1039 | unguarded((: restore_object(save_dir + "/main") :));
print_shop.c | 1053 | unguarded((: save_object(save_dir + "/main") :));
print_shop.c | 1181 | map_delete(translation_costs, lang);
pub_shop_outside.c | 39 | add_help_file("pub_shop");
pub_shop_outside.c | 41 | create();
pub_shop_outside.c | 42 | create();
pub_shop_outside.c | 45 | this_object()->setup();
pub_shop_outside.c | 46 | this_object()->reset();
pub_shop_outside.c | 54 | init();
pub_shop_outside.c | 55 | init();
pub_shop_outside.c | 60 | dest_me();
pub_shop_outside.c | 61 | dest_me();
laundry_entry_inherit.c | 52 | add_exit(direc, dest, type);
laundry_entry_inherit.c | 53 | modify_exit( direc, ({ "function", "check_customer" }) );
laundry_entry_inherit.c | 54 | modify_exit( direc, ({ "closed", 1}));
laundry_entry_inherit.c | 68 | query_name();
laundry_entry_inherit.c | 71 | load_me();
laundry_entry_inherit.c | 72 | find_object( laundry_room );
laundry_entry_inherit.c | 76 | tell_object(thing, LO + " intercepts you.\n");
laundry_entry_inherit.c | 83 | do_command("emote taps his head implying madness.");
laundry_entry_inherit.c | 84 | notify_fail( "" );
laundry_entry_inherit.c | 88 | remove_property(owner);
laundry_entry_inherit.c | 94 | call_out("check_idler", TIME_LIMIT, thing);
laundry_entry_inherit.c | 100 | tell_object( thing, LO + " intercepts you.\n" );
laundry_entry_inherit.c | 107 | do_command("emote sniffs.\n" );
laundry_entry_inherit.c | 108 | notify_fail( "" );
potion_shop.c | 27 | shopkeeper_say( string message );
potion_shop.c | 28 | is_potion_or_salve( object ob );
potion_shop.c | 29 | set_message_function( function wossname );
potion_shop.c | 44 | set_message_function( (: shopkeeper_say :) );
potion_shop.c | 45 | create();
potion_shop.c | 46 | set_allowed_to_sell( (: is_potion_or_salve :) );
potion_shop.c | 103 | match_objects_for_existence( _shopkeeper, this_object() );
potion_shop.c | 105 | init_command( "' "+ message );
potion_shop.c | 114 | write( message );
potion_shop.c | 134 | tell_creator( this_player(), "ob has 0 volume.\n" );
potion_shop.c | 139 | this_player()->the_short() +".\n" ) );
potion_shop.c | 143 | tell_creator( this_player(), "ob does not contain enough stuff.\n" );
potion_shop.c | 147 | this_player()->the_short() +".\n" ) );
potion_shop.c | 151 | all_inventory( ob );
potion_shop.c | 153 | tell_creator( this_player(), "No contents.\n" );
potion_shop.c | 157 | this_player()->the_short() +"!\n" ) );
potion_shop.c | 167 | query_short(), thing->query_eat_effects()  );
potion_shop.c | 170 | sizeof( contents ) >
potion_shop.c | 180 | this_player()->the_short() +"." ) );
storeroom.c | 17 | create();
storeroom.c | 18 | random(10);
storeroom.c | 19 | set_keep_room_loaded(1);
storeroom.c | 20 | call_out("test_cont", 1);
storeroom.c | 35 | query_property("shop type");
storeroom.c | 40 | short();
storeroom.c | 45 | if (sizeof(room_cont[shr]) >
storeroom.c | 46 | call_out("do_dest", 1, ob);
storeroom.c | 57 | all_inventory();
storeroom.c | 58 | sizeof(obs);
storeroom.c | 59 | add_thing(obs[i]);
storeroom.c | 69 | query_property("shop type");
storeroom.c | 72 | short();
storeroom.c | 79 | m_delete(room_cont, sh);
storeroom.c | 81 | delete(arr, i, 1);
storeroom.c | 85 | call_out("add_thing", 1, ob);
storeroom.c | 89 | call_out("remove_thing", 1, ob);
storeroom.c | 95 | move( "/room/rubbish" );
craft_shop.c | 13 | add_help_file("craft_shop");
craft_shop.c | 14 | create();
craft_shop.c | 15 | create();
craft_shop.c | 20 | init();
craft_shop.c | 21 | init();
craft_shop.c | 26 | dest_me();
craft_shop.c | 27 | dest_me();
bank_master.c | 21 | add_help_file("bank");
bank_master.c | 22 | create();
bank_master.c | 63 | if ( file_size( _save_file +".o" ) >
bank_master.c | 64 | unguarded((: restore_object, _save_file :));
bank_master.c | 75 | unguarded( (: save_object, _save_file :) );
bank_master.c | 81 | query_save_file() }) });
bank_master.c | 89 | random( 4 );
bank_master.c | 90 | users();
bank_master.c | 91 | sizeof( players );
bank_master.c | 92 | query_name();
bank_master.c | 113 | adjust_account( player_name, query_bank_name(), -loss );
bank_master.c | 123 | event_save(this_object());
bank_master.c | 124 | create_money_array( amount / number, _place );
bank_master.c | 125 | allocate( number );
bank_master.c | 126 | allocate( number );
bank_master.c | 127 | allocate( number );
bank_master.c | 129 | clone_object( MONEY_OBJECT );
bank_master.c | 130 | set_money_array( mon_array );
bank_master.c | 131 | clone_object( "/obj/container" );
bank_master.c | 132 | set_name( "bag" );
bank_master.c | 133 | set_short( "money bag" );
bank_master.c | 134 | add_adjective( "money" );
bank_master.c | 135 | add_property( "determinate", "a " );
bank_master.c | 136 | set_main_plural( "money bags" );
bank_master.c | 139 | set_weight( 10 );
bank_master.c | 140 | set_max_weight( 3 * (int)money[ i ]->query_weight() + 10 );
bank_master.c | 141 | clone_object( "/obj/monster" );
bank_master.c | 142 | set_name( "robber" );
bank_master.c | 143 | set_short( "bank robber" );
bank_master.c | 144 | add_adjective( "bank" );
bank_master.c | 145 | add_property( "determinate", "a " );
bank_master.c | 146 | set_main_plural( "bank robbers" );
bank_master.c | 149 | set_race( "human" );
bank_master.c | 150 | set_guild( "thief" );
bank_master.c | 151 | set_gender( 1 + random( 1 ) );
bank_master.c | 152 | set_level( 20 + random( 30 ) + random( 40 ) );
bank_master.c | 153 | reset_all();
bank_master.c | 154 | move( bags[ i ] );
bank_master.c | 155 | move( robbers[ i ] );
bank_master.c | 156 | move( this_object() );
bank_master.c | 162 | init();
bank_master.c | 163 | init();
bureau_de_change.c | 16 | do_buy(object *obs, string country);
bureau_de_change.c | 40 | keys( exchanges );
bureau_de_change.c | 41 | sizeof( places );
bureau_de_change.c | 46 | smallest_value_in( places[ i ] );
bureau_de_change.c | 47 | if (value % smallest != 0)  value += smallest - (value % smallest);
bureau_de_change.c | 48 | money_value_string( value, places[ i ] );
bureau_de_change.c | 69 | create();
bureau_de_change.c | 75 | this_object()->setup();
bureau_de_change.c | 76 | this_object()->reset();
bureau_de_change.c | 81 | init();
bureau_de_change.c | 83 | do_buy( $1, $4[0] ) :) );
bureau_de_change.c | 87 | this_object()->sell($1):));
bureau_de_change.c | 89 | add_command("list", "", (:this_object()->list():));
bureau_de_change.c | 102 | debug_printf( "%O, %O, %O\n", things, args, pattern );
bureau_de_change.c | 108 | query_money_array());
bureau_de_change.c | 110 | add_to_list(thing);
bureau_de_change.c | 112 | move("/room/rubbish");
bureau_de_change.c | 133 | this_player()->adjust_money(change);
bureau_de_change.c | 139 | this_player()->adjust_money(change);
bureau_de_change.c | 144 | filter_legal_money_to_array(change, place);
bureau_de_change.c | 148 | filter_legal_money_to_array(monies[0], "default");
bureau_de_change.c | 150 | merge_money_arrays(no_value, monies[0]);
bureau_de_change.c | 155 | this_player()->adjust_money(no_value);
bureau_de_change.c | 157 | money_string(no_value) + " to buy currency here.\n");
bureau_de_change.c | 167 | smallest_value_in(country);
bureau_de_change.c | 168 | if (value % smallest != 0)  value += smallest - (value % smallest);
bureau_de_change.c | 169 | create_money_array(value, country);
bureau_de_change.c | 171 | this_player()->adjust_money(monies[0]);
bureau_de_change.c | 177 | money_string(monies[0]) + ".\n");
bureau_de_change.c | 180 | get_money_ob();
bureau_de_change.c | 182 | clone_object(MONEY_OBJECT);
bureau_de_change.c | 184 | set_money_array(change);
bureau_de_change.c | 188 | move(this_object());
bureau_de_change.c | 191 | say(this_player()->one_short() + " exchanges some currency.\n");
bureau_de_change.c | 215 | query_money_array());
bureau_de_change.c | 217 | add_to_list(thing);
bureau_de_change.c | 219 | move("/room/rubbish");
bureau_de_change.c | 225 | notify_fail("You can only sell currency here.  Sorry.\n");
bureau_de_change.c | 228 | m_indices(exchanges);
bureau_de_change.c | 234 | filter_legal_money_to_array(m_array_a, a_place);
bureau_de_change.c | 245 | filter_legal_money_to_array(monies[0], "default");
bureau_de_change.c | 247 | merge_money_arrays(m_array_c, monies[0]);
bureau_de_change.c | 256 | merge_money_arrays(m_array_b, monies[0]);
bureau_de_change.c | 259 | merge_money_arrays(m_array_c, monies[0]);
bureau_de_change.c | 267 | merge_money_arrays(m_array_a, m_array_c);
bureau_de_change.c | 271 | money_string(m_array_a) + " here.\n");
bureau_de_change.c | 272 | this_player()->adjust_money(m_array_a);
bureau_de_change.c | 279 | create_money_array(value, place);
bureau_de_change.c | 281 | this_player()->adjust_money(m_array_b);
bureau_de_change.c | 288 | money_string(change) + ".\n");
bureau_de_change.c | 291 | get_money_ob();
bureau_de_change.c | 293 | clone_object(MONEY_OBJECT);
bureau_de_change.c | 295 | set_money_array(change);
bureau_de_change.c | 299 | move(this_object());
bureau_de_change.c | 302 | say(this_player()->one_short() + " exchanges some currency.\n");
bureau_de_change.c | 308 | write( exchanges_list() +"\n" );
engrave_inherit.c | 10 | init();
engrave_inherit.c | 11 | engrave_init();
engrave_inherit.c | 26 | set_engrave_language(string str);
engrave_inherit.c | 27 | do_engrave( object *things, string message);
engrave_inherit.c | 28 | query_property(string name);
engrave_inherit.c | 36 | this_object()->add_help_file("engrave");
engrave_inherit.c | 67 | do_engrave($1, $4[0]) :));
engrave_inherit.c | 137 | add_failed_mess("There is noone here to engrave $I for you.\n", things);
engrave_inherit.c | 141 | filter(things, (: living($1) :));
engrave_inherit.c | 143 | add_failed_mess("Cannot engrave messages on $I, they are living things.\n", liv);
engrave_inherit.c | 155 | query_short() != "holy blade of Soyin" :) );
engrave_inherit.c | 164 | query_property("place");
engrave_inherit.c | 168 | replace_string(message, " ", "");
engrave_inherit.c | 169 | strlen(coststring) * 80) * sizeof(engravable);
engrave_inherit.c | 202 | engrave_init();
craft_shop_controller.c | 100 | load_it();
craft_shop_controller.c | 101 | save_it();
craft_shop_controller.c | 102 | update_sellable(string name);
craft_shop_controller.c | 107 | adjust_royalty(string player, int amt);
craft_shop_controller.c | 108 | create_craft_sellable();
craft_shop_controller.c | 109 | adjust_royalty(string player, int amt);
craft_shop_controller.c | 110 | query_class_of_shop_object(object ob);
craft_shop_controller.c | 111 | find_shop_object(class craft_object frog);
craft_shop_controller.c | 112 | query_sell_list_obs();
craft_shop_controller.c | 113 | query_id_of_shop_object(object ob);
craft_shop_controller.c | 114 | remove_shop_id(string id);
craft_shop_controller.c | 115 | setup_timeout_call();
craft_shop_controller.c | 116 | query_items_with_shop_id(string id);
craft_shop_controller.c | 120 | clone_object("/std/container");
craft_shop_controller.c | 162 | catch(auto_load = this_player()->create_auto_load(({ ob })));
craft_shop_controller.c | 165 | catch(auto_load = PLAYER_OB->create_auto_load(({ ob })));
craft_shop_controller.c | 169 | create_auto_load(({ ob }));
craft_shop_controller.c | 174 | printf("Error!  Dammit!\n");
craft_shop_controller.c | 184 | while (tmp);
craft_shop_controller.c | 208 | load_auto_load_to_array(auto_load, player);
craft_shop_controller.c | 210 | this_player()->load_auto_load_to_array(auto_load, player);
craft_shop_controller.c | 212 | load_auto_load_to_array(auto_load, player);
craft_shop_controller.c | 217 | clone_object("/std/object");
craft_shop_controller.c | 248 | create_craft_sellable();
craft_shop_controller.c | 262 | update_sellable(name);
craft_shop_controller.c | 293 | lower_case(owner);
craft_shop_controller.c | 296 | create_craft_object(ob, cap_owner, cost, category) }));
craft_shop_controller.c | 303 | save_it();
craft_shop_controller.c | 322 | sizeof(data);
craft_shop_controller.c | 327 | member_array(ob, (class craft_object)_sellables[name]->objects[owner]);
craft_shop_controller.c | 331 | map_delete(((class craft_sellable)_sellables[name])->objects, owner);
craft_shop_controller.c | 333 | map_delete(_sellables, name);
craft_shop_controller.c | 334 | find_shop_object(ob);
craft_shop_controller.c | 335 | remove_shop_id(query_id_of_shop_object(us));
craft_shop_controller.c | 338 | save_it();
craft_shop_controller.c | 339 | remove_auto_load_file(ob->ob_num);
craft_shop_controller.c | 340 | find_shop_object(ob);
craft_shop_controller.c | 341 | dest_me();
craft_shop_controller.c | 343 | printf("Unable to find the object to remove? %O, %O\n", name, owner);
craft_shop_controller.c | 355 | create_real_auto_load_object(craft->ob_num, player);
craft_shop_controller.c | 365 | create_real_objects(this_player(), obs);
craft_shop_controller.c | 378 | query_class_of_shop_object(ob);
craft_shop_controller.c | 379 | create_real_object(player, craft);
craft_shop_controller.c | 381 | move("/room/rubbish");
craft_shop_controller.c | 382 | return ({ });
craft_shop_controller.c | 404 | new (class craft_object);
craft_shop_controller.c | 405 | create_auto_load_file(ob, 0);
craft_shop_controller.c | 410 | query_short();
craft_shop_controller.c | 421 | new(class craft_sellable);
craft_shop_controller.c | 433 | query_property(SELL_OBJECT_OWNER_PROP);
craft_shop_controller.c | 443 | query_property(SELL_OBJECT_NAME_PROP);
craft_shop_controller.c | 453 | query_property(SELL_OBJECT_ID_PROP);
craft_shop_controller.c | 462 | add_property(SELL_OBJECT_ID_PROP, id);
craft_shop_controller.c | 463 | add_alias(id);
craft_shop_controller.c | 474 | query_class_of_shop_object(ob);
craft_shop_controller.c | 489 | query_class_of_shop_object(ob);
craft_shop_controller.c | 509 | query_class_of_shop_object(craft_ob);
craft_shop_controller.c | 511 | create_auto_load_file(replacement_ob, craft->ob_num);
craft_shop_controller.c | 558 | query_property(SELL_OBJECT_CLASS_PROP);
craft_shop_controller.c | 590 | query_items_with_shop_id(query_id_of_shop_object(ob));
craft_shop_controller.c | 593 | query_owner_of_shop_object(ob);
craft_shop_controller.c | 594 | query_name_of_shop_object(ob);
craft_shop_controller.c | 595 | query_class_of_shop_object(ob);
craft_shop_controller.c | 597 | set_value(value);
craft_shop_controller.c | 605 | find_shop_object(wombat);
craft_shop_controller.c | 606 | set_value(value);
craft_shop_controller.c | 611 | save_it();
craft_shop_controller.c | 632 | query_items_with_shop_id(query_id_of_shop_object(ob));
craft_shop_controller.c | 636 | query_owner_of_shop_object(ob);
craft_shop_controller.c | 637 | query_name_of_shop_object(ob);
craft_shop_controller.c | 638 | query_class_of_shop_object(ob);
craft_shop_controller.c | 641 | tell_creator("pinkfish", "The name %O does not exist.\n", name);
craft_shop_controller.c | 646 | tell_creator("pinkfish", "Unable to find the class.\n");
craft_shop_controller.c | 659 | add_to_sellables(new_name, owner, ({ ob }));
craft_shop_controller.c | 661 | create_craft_sellable();
craft_shop_controller.c | 672 | sizeof(fluff);
craft_shop_controller.c | 680 | map_delete(((class craft_sellable)_sellables[name])->objects, owner);
craft_shop_controller.c | 683 | map_delete(_sellables, name);
craft_shop_controller.c | 689 | update_sellable(name);
craft_shop_controller.c | 690 | update_sellable(new_name);
craft_shop_controller.c | 691 | save_it();
craft_shop_controller.c | 709 | query_items_with_shop_id(query_id_of_shop_object(ob));
craft_shop_controller.c | 711 | query_owner_of_shop_object(ob);
craft_shop_controller.c | 712 | query_name_of_shop_object(ob);
craft_shop_controller.c | 723 | save_it();
craft_shop_controller.c | 740 | query_owner_of_shop_object(ob);
craft_shop_controller.c | 741 | query_name_of_shop_object(ob);
craft_shop_controller.c | 742 | remove_list_object(name, owner, query_class_of_shop_object(ob));
craft_shop_controller.c | 759 | match_objects_in_environments(str, ({ _sell_list }));
craft_shop_controller.c | 778 | query_class_of_shop_object(ob);
craft_shop_controller.c | 817 | query_class_of_shop_object(ob);
craft_shop_controller.c | 819 | if (player->query_value_in(place) >
craft_shop_controller.c | 821 | create_real_object(player, craft);
craft_shop_controller.c | 832 | remove_shop_object(ob);
craft_shop_controller.c | 849 | all_inventory( _sell_list );
craft_shop_controller.c | 852 | query_property( SELL_OBJECT_ID_PROP ) == $(id) :) );
craft_shop_controller.c | 855 | remove_shop_object( ob );
craft_shop_controller.c | 885 | move("/room/rubbish");
craft_shop_controller.c | 906 | clone_object("/std/object");
craft_shop_controller.c | 907 | reset_get();
craft_shop_controller.c | 908 | explode(lower_case(name), " ");
craft_shop_controller.c | 911 | set_name("error");
craft_shop_controller.c | 914 | set_name(bits[<1]);
craft_shop_controller.c | 915 | add_adjective(bits[0..<2]);
craft_shop_controller.c | 919 | add_adjective(owner);
craft_shop_controller.c | 923 | add_adjective(lower_case(owner) + "'s");
craft_shop_controller.c | 924 | set_short(craft->cap_owner + "'s " + name);
craft_shop_controller.c | 926 | set_short(capitalize(name));
craft_shop_controller.c | 928 | add_property(SELL_OBJECT_NAME_PROP, name);
craft_shop_controller.c | 929 | add_property(SELL_OBJECT_OWNER_PROP, owner);
craft_shop_controller.c | 930 | add_property(SELL_OBJECT_CLASS_PROP, craft);
craft_shop_controller.c | 931 | add_property("determinate", "");
craft_shop_controller.c | 932 | set_value(cost);
craft_shop_controller.c | 942 | printf("Unable to move %O into the sell list (%O).\n", ob, _sell_list);
craft_shop_controller.c | 951 | all_inventory(_sell_list);
craft_shop_controller.c | 999 | filter(data, (: $1 :));
craft_shop_controller.c | 1004 | new(class craft_object);
craft_shop_controller.c | 1014 | find_shop_object(womble);
craft_shop_controller.c | 1018 | move("/room/rubbish");
craft_shop_controller.c | 1023 | find_shop_object(womble);
craft_shop_controller.c | 1028 | query_id_of_shop_object(shop_ob);
craft_shop_controller.c | 1041 | query_next_shop_id();
craft_shop_controller.c | 1043 | set_id_of_shop_objects(need_ids[1], need_ids[0]);
craft_shop_controller.c | 1051 | query_next_shop_id();
craft_shop_controller.c | 1053 | set_id_of_shop_objects(need_ids[1], need_ids[0]);
craft_shop_controller.c | 1078 | allocate(sizeof(womble), (: $(name) :) );
craft_shop_controller.c | 1095 | lower_case(owner);
craft_shop_controller.c | 1157 | evaluate(_load_function, CRAFT_SHOP_MAIN_SAVE_FILE);
craft_shop_controller.c | 1163 | reset_eval_cost();
craft_shop_controller.c | 1164 | update_sellable(name);
craft_shop_controller.c | 1174 | reset_eval_cost();
craft_shop_controller.c | 1175 | update_sellable(name);
craft_shop_controller.c | 1181 | setup_timeout_call();
craft_shop_controller.c | 1193 | save_it();
craft_shop_controller.c | 1213 | copy(_royalties);
craft_shop_controller.c | 1227 | find_player(player);
craft_shop_controller.c | 1232 | adjust_money(MONEY_HAND->create_money_array(amount, place));
craft_shop_controller.c | 1235 | map_delete(_royalties, player);
craft_shop_controller.c | 1237 | save_it();
craft_shop_controller.c | 1270 | new(class craft_category);
craft_shop_controller.c | 1272 | query_name() });
craft_shop_controller.c | 1277 | save_it();
craft_shop_controller.c | 1289 | map_delete(_categories, category);
craft_shop_controller.c | 1290 | save_it();
craft_shop_controller.c | 1302 | new(class craft_category);
craft_shop_controller.c | 1309 | save_it();
craft_shop_controller.c | 1323 | save_it();
craft_shop_controller.c | 1349 | save_it();
craft_shop_controller.c | 1430 | query_name() });
craft_shop_controller.c | 1431 | save_it();
craft_shop_controller.c | 1443 | filter(keys(_categories), (: is_valid_category($1) :));
craft_shop_controller.c | 1485 | map_delete(_categories, name);
craft_shop_controller.c | 1492 | map_delete(_categories, name);
craft_shop_controller.c | 1505 | save_it();
craft_shop_controller.c | 1506 | setup_timeout_call();
craft_shop_controller.c | 1525 | remove_call_out(_category_callout);
craft_shop_controller.c | 1528 | call_out((: do_timeout_categories() :), bing);
craft_shop_controller.c | 1535 | all_inventory(_sell_list)->move("/room/rubbish");
craft_shop_controller.c | 1536 | dest_me();
craft_shop_controller.c | 1538 | destruct(this_object());
person_expressions.c | 12 | add_allowed_function(string name, int type, int* args, function value);
person_expressions.c | 13 | add_allowed_variable(string name, int type, function value);
person_expressions.c | 17 | test_level(seller);
person_expressions.c | 23 | test_guild(seller);
person_expressions.c | 25 | query_name();
person_expressions.c | 33 | test_guild(seller);
person_expressions.c | 35 | query_wizard_order();
person_expressions.c | 37 | replace_string(lower_case(guild), "_", " ");
person_expressions.c | 44 | lower_case(seller);
person_expressions.c | 50 | test_deity(seller);
person_expressions.c | 60 | test_family(seller);
person_expressions.c | 68 | is_member_of(club, seller);
person_expressions.c | 72 | is_citizen_of(region, seller);
player_craft_shop.c | 126 | confirm_approval(string answer, class approval_obs approve, int final_cost);
player_craft_shop.c | 127 | parse_or(string str);
player_craft_shop.c | 128 | variable_player_level(string seller, int cost, object* ob);
player_craft_shop.c | 129 | variable_player_guild(string seller, int cost, object* ob);
player_craft_shop.c | 130 | variable_player_deity(string seller, int cost, object* ob);
player_craft_shop.c | 131 | variable_player_family(string seller, int cost, object* ob);
player_craft_shop.c | 132 | variable_player_order(string seller, int cost, object* ob);
player_craft_shop.c | 133 | variable_objects(string seller, int cost, object* ob);
player_craft_shop.c | 134 | function_object_type(object*, string seller, int cost, object* ob);
player_craft_shop.c | 135 | function_object_value(object*, string seller, int cost, object* ob);
player_craft_shop.c | 136 | function_object_base_value(object*, string seller, int cost, object* ob);
player_craft_shop.c | 137 | function_object_condition(object*, string seller, int cost, object* ob);
player_craft_shop.c | 138 | function_object_enchant(object*, string seller, int cost, object* ob);
player_craft_shop.c | 139 | function_object_stolen(object*, string seller, int cost, object* ob);
player_craft_shop.c | 140 | function_object_warded(object*, string seller, int cost, object* ob);
player_craft_shop.c | 141 | function_object_charges(object*, string seller, int cost, object *ob);
player_craft_shop.c | 142 | variable_sale_cost(string seller, int cost, object* ob, string name, string category);
player_craft_shop.c | 143 | variable_sale_name(string seller, int cost, object* ob, string name, string category);
player_craft_shop.c | 144 | variable_sale_category(string seller, int cost, object* ob, string name, string category);
player_craft_shop.c | 145 | function_club_member(string club, string seller, int cost, object* ob);
player_craft_shop.c | 146 | function_object_contains_spell(object*, string spell, string seller, int cost, object* ob);
player_craft_shop.c | 147 | function_object_contains_imbue(object*, string spell, string seller, int cost, object* ob);
player_craft_shop.c | 148 | function_object_percentage_liquid(object*, string liquid, string seller, int cost, object* ob);
player_craft_shop.c | 149 | function_object_matching(object*, string match, string seller, int cost, object* ob);
player_craft_shop.c | 150 | function_object_short(object* obs, string match, string seller, int cost, object* fluff);
player_craft_shop.c | 151 | function_inventory_number(string short, string seller, int cost, object* ob);
player_craft_shop.c | 152 | function_contents(object ob, string seller, int cost, object* obs);
player_craft_shop.c | 158 | query_owner();
player_craft_shop.c | 159 | is_allowed(string person);
player_craft_shop.c | 160 | do_save();
player_craft_shop.c | 161 | event_save(object thing);
player_craft_shop.c | 162 | query_allowed();
player_craft_shop.c | 163 | set_short(string short);
player_craft_shop.c | 164 | add_property(string name, mixed value);
player_craft_shop.c | 180 | new(class approval);
player_craft_shop.c | 198 | time();
player_craft_shop.c | 215 | set_cut(100);
player_craft_shop.c | 217 | create();
player_craft_shop.c | 218 | create();
player_craft_shop.c | 220 | set_short(_shop_name);
player_craft_shop.c | 221 | add_property("determinate", "");
player_craft_shop.c | 223 | set_always_ask_price(1);
player_craft_shop.c | 225 | parse_boolean_string("false");
player_craft_shop.c | 229 | parse_boolean_string("false");
player_craft_shop.c | 388 | add_property("determinate", "");
player_craft_shop.c | 389 | set_short(_shop_name);
player_craft_shop.c | 437 | lower_case(name);
player_craft_shop.c | 438 | sizeof(query_controller()->query_owner_sellables(name));
player_craft_shop.c | 441 | sizeof(bing->saved);
player_craft_shop.c | 453 | query_controller()->query_royalty(name);
player_craft_shop.c | 462 | query_controller()->adjust_royalty(name, amount);
player_craft_shop.c | 499 | lower_case(seller);
player_craft_shop.c | 519 | query_short();
player_craft_shop.c | 649 | evaluate_expression(_use_expression, person, 0, ({ }), 0, 0);
player_craft_shop.c | 663 | if (sizeof(query_approval_list(0)) + sizeof(query_approval_list(1)) >
player_craft_shop.c | 664 | add_failed_mess("Unable to sell things, the shop is full.\n");
player_craft_shop.c | 670 | add_failed_mess("You are not allowed to use this shop.\n");
player_craft_shop.c | 675 | add_failed_mess("The shop is currently closed.\n");
player_craft_shop.c | 686 | set_controller(name);
player_craft_shop.c | 687 | query_controller()->set_dont_use_name(1);
player_craft_shop.c | 699 | query_number_of_items_listed(name) + sizeof(obs);
player_craft_shop.c | 716 | add_failed_mess("You are not allowed to sell things here.\n");
player_craft_shop.c | 723 | sizeof(query_controller()->query_sell_list_obs());
player_craft_shop.c | 724 | if (num + sizeof(obs) >
player_craft_shop.c | 762 | query_short();
player_craft_shop.c | 790 | return ({ max_accept, max_deny });
player_craft_shop.c | 806 | query_maximum_sale_value_both(person, ob);
player_craft_shop.c | 826 | query_maximum_sale_value_both(seller, ob);
player_craft_shop.c | 836 | query_property("place");
player_craft_shop.c | 843 | money_value_string(max[0], place);
player_craft_shop.c | 850 | money_value_string(max[1], place);
player_craft_shop.c | 871 | catch(auto_load = this_player()->create_auto_load(({ ob })));
player_craft_shop.c | 874 | catch(auto_load = PLAYER_OB->create_auto_load(({ ob })));
player_craft_shop.c | 878 | create_auto_load(({ ob }));
player_craft_shop.c | 883 | printf("Error!  Dammit!\n");
player_craft_shop.c | 892 | while (tmp);
player_craft_shop.c | 914 | load_auto_load_to_array(auto_load, player);
player_craft_shop.c | 916 | this_player()->load_auto_load_to_array(auto_load, player);
player_craft_shop.c | 918 | load_auto_load_to_array(auto_load, player);
player_craft_shop.c | 937 | create_real_auto_load_object(id, player);
player_craft_shop.c | 939 | add_effect("/std/effects/object/no_save");
player_craft_shop.c | 940 | add_property(PLAYER_CRAFT_SHOP_CHECK_PROP, ({ approve, id }));
player_craft_shop.c | 941 | member_array(id, approve->saved);
player_craft_shop.c | 943 | event_save(this_object());
player_craft_shop.c | 970 | effects_matching("/std/effects/object/no_save"->query_classification());
player_craft_shop.c | 972 | delete_effect(id);
player_craft_shop.c | 977 | member_array(id, approve->saved);
player_craft_shop.c | 980 | remove_property(PLAYER_CRAFT_SHOP_CHECK_PROP);
player_craft_shop.c | 981 | create_auto_load_file(ob, id);
player_craft_shop.c | 982 | event_save(this_object());
player_craft_shop.c | 997 | query_property(PLAYER_CRAFT_SHOP_CHECK_PROP);
player_craft_shop.c | 1024 | create_auto_load_file(ob, 0) });
player_craft_shop.c | 1030 | event_save(this_object());
player_craft_shop.c | 1037 | new(class approval_obs);
player_craft_shop.c | 1043 | time();
player_craft_shop.c | 1046 | create_auto_load_file(ob, 0) });
player_craft_shop.c | 1050 | allocate(sizeof(stuff->saved));
player_craft_shop.c | 1057 | event_save(this_object());
player_craft_shop.c | 1070 | sizeof(_approved);
player_craft_shop.c | 1082 | event_save(this_object());
player_craft_shop.c | 1086 | sizeof(_waiting_for_approval);
player_craft_shop.c | 1098 | event_save(this_object());
player_craft_shop.c | 1119 | query_multiple_short(objects, 0, 1);
player_craft_shop.c | 1121 | new(class shop_transaction);
player_craft_shop.c | 1122 | time();
player_craft_shop.c | 1130 | event_save(this_object());
player_craft_shop.c | 1145 | query_property("place");
player_craft_shop.c | 1150 | money_value_string(trans->amount, place);
player_craft_shop.c | 1191 | query_property("place");
player_craft_shop.c | 1207 | query_multiple_short(sellable) + " to " + the_short() + ".\n");
player_craft_shop.c | 1235 | the_short() + ".\n");
player_craft_shop.c | 1241 | the_short() + ".\n");
player_craft_shop.c | 1251 | sprintf("%c%c", 'A' + (pos / 26), 'A' + (pos % 26));
player_craft_shop.c | 1264 | lower_case(letter);
player_craft_shop.c | 1270 | if (strlen(letter) >
player_craft_shop.c | 1275 | return (letter[0] - 'a') * 26 + (letter[1] - 'a');
player_craft_shop.c | 1292 | query_number_value(name[1..]);
player_craft_shop.c | 1294 | query_number_value(name);
player_craft_shop.c | 1297 | add_failed_mess(name + " is not a valid number.\n");
player_craft_shop.c | 1303 | add_failed_mess("There is nothing in the approval list currently.\n");
player_craft_shop.c | 1336 | new(class approval);
player_craft_shop.c | 1346 | time();
player_craft_shop.c | 1349 | parse_boolean_string("false");
player_craft_shop.c | 1362 | adjust_royalty(query_owner(), value);
player_craft_shop.c | 1363 | sizeof(obs);
player_craft_shop.c | 1373 | new(class shop_stats);
player_craft_shop.c | 1390 | filter(deep_inventory(ob), (: is_checkout_object($1) :));
player_craft_shop.c | 1405 | return ({ });
player_craft_shop.c | 1412 | check_for_checkout(ob);
player_craft_shop.c | 1417 | move("/room/rubbish");
player_craft_shop.c | 1423 | check_for_checkout(ob);
player_craft_shop.c | 1425 | dest_me();
player_craft_shop.c | 1437 | filter(deep_inventory(this_object()), (: is_checkout_object($1) :));
player_craft_shop.c | 1440 | destroy_checkout_object(ob);
player_craft_shop.c | 1450 | dest_me();
player_craft_shop.c | 1459 | is_allowed(this_player()->query_name());
player_craft_shop.c | 1466 | query_royalty(query_owner());
player_craft_shop.c | 1473 | adjust_royalty(query_owner(), amt);
player_craft_shop.c | 1488 | reset_get();
player_craft_shop.c | 1503 | create_auto_load(({ ob }));
player_craft_shop.c | 1504 | reset_get();
player_craft_shop.c | 1509 | event_save(this_object());
player_craft_shop.c | 1532 | add_failed_mess("You cannot buy anything at this shop.\n");
player_craft_shop.c | 1535 | do_buy(obs);
player_craft_shop.c | 1541 | sizeof(app_obs->saved);
player_craft_shop.c | 1544 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 1547 | move("/room/rubbish");
player_craft_shop.c | 1582 | remove_from_approval_list(app_obs);
player_craft_shop.c | 1584 | sizeof(sellables);
player_craft_shop.c | 1586 | sizeof(sellables));
player_craft_shop.c | 1588 | sizeof(sellables));
player_craft_shop.c | 1589 | event_save(this_object());
player_craft_shop.c | 1611 | query_property("place");
player_craft_shop.c | 1618 | query_maximum_sale_value_both(this_player()->query_name(), ob);
player_craft_shop.c | 1622 | money_value_string(stuff[0], place);
player_craft_shop.c | 1629 | money_value_string(stuff[1], place);
player_craft_shop.c | 1633 | write("$P$Check Sell$P$" + ret);
player_craft_shop.c | 1634 | add_succeeded_mess(({ "", "$N checks the sale of $I.\n" }), obs);
player_craft_shop.c | 1658 | query_property("place");
player_craft_shop.c | 1663 | is_allowed(this_player()->query_name());
player_craft_shop.c | 1676 | query_controller()->query_sell_list_obs());
player_craft_shop.c | 1685 | sizeof(filter(approve->checkout, (: $1 :)));
player_craft_shop.c | 1688 | sizeof(approve->saved);
player_craft_shop.c | 1690 | create_real_auto_load_object(fluff, this_player()) });
player_craft_shop.c | 1693 | query_short();
player_craft_shop.c | 1694 | move("/room/rubbish");
player_craft_shop.c | 1699 | lower_case(approve->name)] = sizeof(result);
player_craft_shop.c | 1726 | dest_me();
player_craft_shop.c | 1730 | add_failed_mess("No items to approve at the moment.\n");
player_craft_shop.c | 1734 | write("$P$Approval list$P$The current approval items are:\n" + ret);
player_craft_shop.c | 1757 | query_approval_class(name);
player_craft_shop.c | 1770 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop.c | 1775 | return_all_checkedout_objects();
player_craft_shop.c | 1778 | sizeof(approve->saved);
player_craft_shop.c | 1781 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 1783 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 1791 | query_property("place");
player_craft_shop.c | 1799 | sizeof(checkout);
player_craft_shop.c | 1800 | make_new_amount( value, place);
player_craft_shop.c | 1801 | move(this_player());
player_craft_shop.c | 1802 | sizeof(checkout);
player_craft_shop.c | 1817 | remove_from_approval_list(approve);
player_craft_shop.c | 1820 | add_succeeded_mess("$N $V $I.\n", map(ok, (: $1->poss_short() :)));
player_craft_shop.c | 1824 | map(ok, (: $1->poss_short() :)));
player_craft_shop.c | 1845 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop.c | 1849 | query_approval_class(name);
player_craft_shop.c | 1854 | query_property("place");
player_craft_shop.c | 1865 | sizeof(query_controller()->query_sell_list_obs());
player_craft_shop.c | 1866 | if (num + sizeof(approve->saved) >
player_craft_shop.c | 1872 | sizeof(obs);
player_craft_shop.c | 1881 | value_from_string(money_str, place);
player_craft_shop.c | 1889 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop.c | 1896 | input_to("confirm_approval", 0, approve, final_cost);
player_craft_shop.c | 1897 | add_succeeded_mess( ({ "", "$N approves something in the shop.\n" }) );
player_craft_shop.c | 1902 | confirm_approval("y", approve, final_cost);
player_craft_shop.c | 1919 | write("Ok, canceled the approval of the item.\n");
player_craft_shop.c | 1923 | query_property("place");
player_craft_shop.c | 1934 | sizeof(approve->saved);
player_craft_shop.c | 1937 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 1939 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 1959 | sizeof(obs) + sizeof(checkout));
player_craft_shop.c | 1962 | remove_from_approval_list(approve);
player_craft_shop.c | 1963 | adjust_royalty(lower_case(approve->seller), cost);
player_craft_shop.c | 1967 | if (query_owners_money() >
player_craft_shop.c | 1968 | if (query_owners_money() >
player_craft_shop.c | 1969 | adjust_owners_money(-cost);
player_craft_shop.c | 1972 | query_owners_money();
player_craft_shop.c | 1973 | adjust_owners_money(-query_owners_money());
player_craft_shop.c | 1977 | if (this_player()->query_value_in(place) >
player_craft_shop.c | 1978 | this_player()->query_value_in(place);
player_craft_shop.c | 1986 | this_player()->pay_money(MONEY_HAND->create_money_array(bing, place), place);
player_craft_shop.c | 1990 | adjust_owners_money(-cost);
player_craft_shop.c | 1995 | money_value_string(approve->value, place) + ".\n");
player_craft_shop.c | 1996 | add_succeeded_mess( ({ "", "$N approves something in the shop.\n" }) );
player_craft_shop.c | 2026 | query_approval_class(name);
player_craft_shop.c | 2035 | do_return(name);
player_craft_shop.c | 2039 | add_failed_mess("You're not allowed to reject items.\n");
player_craft_shop.c | 2044 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop.c | 2049 | return_all_checkedout_objects();
player_craft_shop.c | 2071 | sizeof(approve->saved);
player_craft_shop.c | 2076 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 2078 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 2102 | sizeof(checkout));
player_craft_shop.c | 2114 | write("Nothing to give back or send off.\n");
player_craft_shop.c | 2119 | find_player(lower_case(approve->seller));
player_craft_shop.c | 2142 | write("You reject the item.\n");
player_craft_shop.c | 2145 | add_failed_mess("Eeek!  No parcel post defined on this room.\n");
player_craft_shop.c | 2152 | deposit_parcel(obs, lower_case(approve->seller), 1);
player_craft_shop.c | 2157 | move("/room/rubbish");
player_craft_shop.c | 2159 | write("Still sending the message to the person.\n");
player_craft_shop.c | 2166 | move("/room/rubbish");
player_craft_shop.c | 2171 | move("/room/rubbish");
player_craft_shop.c | 2175 | move("/room/rubbish");
player_craft_shop.c | 2198 | event_save(this_object());
player_craft_shop.c | 2205 | remove_from_approval_list(approve);
player_craft_shop.c | 2207 | add_succeeded_mess(({ "", "$N reject$s a sellable object.\n" }));
player_craft_shop.c | 2215 | lower_case(str);
player_craft_shop.c | 2221 | input_to("check_reject_note", 0, ob_str, name);
player_craft_shop.c | 2225 | write("ok, bye then!\n");
player_craft_shop.c | 2230 | this_object(), 0, name);
player_craft_shop.c | 2236 | write("Aborted.\n");
player_craft_shop.c | 2239 | write("Sending to " + name + ".\n");
player_craft_shop.c | 2256 | query_approval_class(name);
player_craft_shop.c | 2265 | do_return(name);
player_craft_shop.c | 2269 | add_failed_mess("You are not allowed to reject items.\n");
player_craft_shop.c | 2280 | query_property("place");
player_craft_shop.c | 2290 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop.c | 2301 | long();
player_craft_shop.c | 2302 | query_readable_message();
player_craft_shop.c | 2307 | query_readable_message();
player_craft_shop.c | 2311 | move("/room/rubbish");
player_craft_shop.c | 2313 | write("$P$Browse list$P$" + ret);
player_craft_shop.c | 2315 | add_succeeded_mess("$N browse$s an item waiting for approval.\n");
player_craft_shop.c | 2331 | query_approval_class(name);
player_craft_shop.c | 2340 | do_return(name);
player_craft_shop.c | 2344 | add_failed_mess("You are not allowed to reject items.\n");
player_craft_shop.c | 2360 | sizeof(approve->saved);
player_craft_shop.c | 2363 | create_checkout_object(approve, pos, this_player());
player_craft_shop.c | 2365 | write("Unable to create " + pos + approve->name + ", weird...\n");
player_craft_shop.c | 2370 | create_checkout_object(approve, pos, this_player()) });
player_craft_shop.c | 2374 | move("/room/rubbish");
player_craft_shop.c | 2378 | if (sizeof(checkout) >
player_craft_shop.c | 2379 | add_failed_mess("$I are already checked out.\n", checkout);
player_craft_shop.c | 2381 | add_failed_mess("$I is already checked out.\n", checkout);
player_craft_shop.c | 2390 | destroy_checkout_object(ob);
player_craft_shop.c | 2403 | add_succeeded_mess("$N check$s out $I.\n", obs);
player_craft_shop.c | 2419 | destroy_checkout_object(ob);
player_craft_shop.c | 2425 | add_failed_mess("None of $I have been checked out.\n", obs);
player_craft_shop.c | 2429 | add_succeeded_mess("$N check$s $I back in.\n", ok);
player_craft_shop.c | 2442 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop.c | 2452 | query_approval_class(name);
player_craft_shop.c | 2457 | add_succeeded_mess( ({ "", "$N messes with the approval items.\n" }));
player_craft_shop.c | 2458 | event_save(this_object());
player_craft_shop.c | 2471 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop.c | 2475 | query_approval_class(name);
player_craft_shop.c | 2486 | query_real_category_name(new_category);
player_craft_shop.c | 2489 | add_failed_mess("You must choose a category that exists.\n");
player_craft_shop.c | 2497 | event_save(this_object());
player_craft_shop.c | 2509 | query_property("place");
player_craft_shop.c | 2515 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2525 | value_from_string(cost, place);
player_craft_shop.c | 2527 | event_save(this_object());
player_craft_shop.c | 2550 | query_property("place");
player_craft_shop.c | 2556 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2566 | value_from_string(cost, place);
player_craft_shop.c | 2576 | event_save(this_object());
player_craft_shop.c | 2593 | query_property("place");
player_craft_shop.c | 2599 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2609 | value_from_string(cost, place);
player_craft_shop.c | 2619 | event_save(this_object());
player_craft_shop.c | 2640 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2650 | query_property("place");
player_craft_shop.c | 2655 | value_from_string(money, place);
player_craft_shop.c | 2657 | add_failed_mess("The value " + money + " is invalid.\n");
player_craft_shop.c | 2665 | strip_quotes(item);
player_craft_shop.c | 2666 | strip_quotes(list_name);
player_craft_shop.c | 2676 | money_value_string(value, place) + ".\n");
player_craft_shop.c | 2681 | value_from_string(money_str, place);
player_craft_shop.c | 2683 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop.c | 2688 | new(class approval_item);
player_craft_shop.c | 2695 | query_property("place");
player_craft_shop.c | 2697 | event_save(this_object());
player_craft_shop.c | 2728 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2738 | query_property("place");
player_craft_shop.c | 2743 | value_from_string(money, place);
player_craft_shop.c | 2745 | add_failed_mess("The value " + money + " is invalid.\n");
player_craft_shop.c | 2750 | value_from_string(money_str, place);
player_craft_shop.c | 2752 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop.c | 2763 | strip_quotes(list_name);
player_craft_shop.c | 2765 | query_short();
player_craft_shop.c | 2774 | new(class approval_item);
player_craft_shop.c | 2783 | event_save(this_object());
player_craft_shop.c | 2816 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2826 | query_property("place");
player_craft_shop.c | 2831 | parse_money_string(expr);
player_craft_shop.c | 2833 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 2838 | value_from_string(money_str, place);
player_craft_shop.c | 2840 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop.c | 2849 | strip_quotes(item);
player_craft_shop.c | 2850 | strip_quotes(list_name);
player_craft_shop.c | 2852 | new(class approval_item);
player_craft_shop.c | 2859 | event_save(this_object());
player_craft_shop.c | 2886 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 2896 | parse_money_string(expr);
player_craft_shop.c | 2898 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 2903 | query_property("place");
player_craft_shop.c | 2904 | value_from_string(money_str, place);
player_craft_shop.c | 2906 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop.c | 2914 | strip_quotes(list_name);
player_craft_shop.c | 2916 | query_short();
player_craft_shop.c | 2917 | new(class approval_item);
player_craft_shop.c | 2924 | event_save(this_object());
player_craft_shop.c | 2952 | is_allowed(this_player()->query_name());
player_craft_shop.c | 2954 | query_property("place");
player_craft_shop.c | 2986 | query_short() + ").\n");
player_craft_shop.c | 3021 | write("$I$5=The item " + ob->the_short() + " will be denied sale.\n");
player_craft_shop.c | 3039 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 3049 | strip_quotes(item);
player_craft_shop.c | 3051 | add_failed_mess("The item " + item + " is not in the list.\n");
player_craft_shop.c | 3055 | map_delete(_automatic_approval->items, item);
player_craft_shop.c | 3056 | event_save(this_object());
player_craft_shop.c | 3074 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 3087 | query_short();
player_craft_shop.c | 3092 | map_delete(_automatic_approval->items, name);
player_craft_shop.c | 3095 | event_save(this_object());
player_craft_shop.c | 3118 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 3128 | parse_boolean_string(expression);
player_craft_shop.c | 3130 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 3135 | parse_money_string(value_str);
player_craft_shop.c | 3137 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 3142 | strip_quotes(list_name);
player_craft_shop.c | 3143 | new(class expression_type);
player_craft_shop.c | 3150 | event_save(this_object());
player_craft_shop.c | 3176 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 3186 | query_number_value(idstr);
player_craft_shop.c | 3188 | add_failed_mess("The id " + idstr + " is invalid.\n");
player_craft_shop.c | 3196 | event_save(this_object());
player_craft_shop.c | 3212 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop.c | 3223 | add_failed_mess("The percentage to add must be greator than 0.\n");
player_craft_shop.c | 3252 | if (to_int(limit) >
player_craft_shop.c | 3253 | to_int(limit);
player_craft_shop.c | 3277 | lower_case(name);
player_craft_shop.c | 3280 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop.c | 3284 | to_int(value);
player_craft_shop.c | 3287 | new(class seller_information);
player_craft_shop.c | 3293 | map_delete(_sellers, name);
player_craft_shop.c | 3324 | lower_case(name);
player_craft_shop.c | 3327 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop.c | 3331 | lower_case(money);
player_craft_shop.c | 3335 | query_property("place");
player_craft_shop.c | 3340 | value_from_string(money, place);
player_craft_shop.c | 3350 | new(class seller_information);
player_craft_shop.c | 3356 | map_delete(_sellers, name);
player_craft_shop.c | 3392 | lower_case(name);
player_craft_shop.c | 3395 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop.c | 3399 | lower_case(money);
player_craft_shop.c | 3403 | query_property("place");
player_craft_shop.c | 3408 | value_from_string(money, place);
player_craft_shop.c | 3418 | new(class seller_information);
player_craft_shop.c | 3424 | map_delete(_sellers, name);
player_craft_shop.c | 3452 | lower_case(name);
player_craft_shop.c | 3459 | map_delete(_sellers, name);
player_craft_shop.c | 3460 | event_save(this_object());
player_craft_shop.c | 3472 | add_failed_mess("You are not allowed to add people to the black list.\n");
player_craft_shop.c | 3476 | lower_case(name);
player_craft_shop.c | 3479 | add_failed_mess("Sorry, " + name + " does not play here.\n");
player_craft_shop.c | 3495 | event_save(this_object());
player_craft_shop.c | 3511 | add_failed_mess("You are not allowed to add people to the black list.\n");
player_craft_shop.c | 3515 | this_player()->query_property("ignoring");
player_craft_shop.c | 3517 | add_failed_mess("You are not ignoring anyone.\n");
player_craft_shop.c | 3524 | lower_case(name);
player_craft_shop.c | 3535 | event_save(this_object());
player_craft_shop.c | 3537 | add_failed_mess("Your ignore list is already added to the black list.\n");
player_craft_shop.c | 3558 | lower_case(name);
player_craft_shop.c | 3561 | add_failed_mess("The person " + name + " is not in the black list.\n");
player_craft_shop.c | 3565 | event_save(this_object());
player_craft_shop.c | 3583 | add_failed_mess("You are not allowed to add functions to this store.\n");
player_craft_shop.c | 3590 | parse_user_expression(def, expr);
player_craft_shop.c | 3595 | query_last_expression_warning());
player_craft_shop.c | 3597 | write("You successfully add:\n" + query_user_function_string(name));
player_craft_shop.c | 3600 | event_save(this_object());
player_craft_shop.c | 3604 | add_failed_mess(query_last_expression_error() + "\n");
player_craft_shop.c | 3617 | add_failed_mess("You are not allowed to remove functions from this store.\n");
player_craft_shop.c | 3632 | add_failed_mess(query_last_expression_error() + "\n");
player_craft_shop.c | 3646 | add_failed_mess("You are not allowed to see the status of this store.\n");
player_craft_shop.c | 3650 | query_function_names();
player_craft_shop.c | 3660 | query_variable_names();
player_craft_shop.c | 3665 | write("$P$Internal functions$P$" + ret);
player_craft_shop.c | 3682 | add_failed_mess("There is no help for the function '" + name + "'.\n");
player_craft_shop.c | 3686 | replace(fname, "/", ".");
player_craft_shop.c | 3687 | cat_file(nroff_fn, 1);
player_craft_shop.c | 3689 | create_nroff(fname, nroff_fn);
player_craft_shop.c | 3690 | cat_file(nroff_fn, 0);
player_craft_shop.c | 3693 | write("$P$function: " + name + "$P$" + str);
player_craft_shop.c | 3704 | get_dir(CRAFT_SHOP_EXPRESSION_HELP_DIR);
player_craft_shop.c | 3706 | add_failed_mess("There is no help on any functions.\n");
player_craft_shop.c | 3712 | write(sprintf("%-#*s\n", this_player()->query_cols(), implode(names, "\n")));
player_craft_shop.c | 3726 | add_failed_mess("You are not allowed to see the status of this store.\n");
player_craft_shop.c | 3730 | query_user_function_names();
player_craft_shop.c | 3732 | add_failed_mess("Could not find any user defined expressions.\n");
player_craft_shop.c | 3743 | write("$P$User functions$P$" + ret);
player_craft_shop.c | 3768 | add_failed_mess("You are not allowed to see the status of this store.\n");
player_craft_shop.c | 3772 | query_property("place");
player_craft_shop.c | 3865 | limit (per item)");
player_craft_shop.c | 3866 | sort_array(keys(_sellers), 0);
player_craft_shop.c | 3872 | money_value_string(stuff->deny_value_limit, place):"disabled"));
player_craft_shop.c | 3904 | new(class approval_item);
player_craft_shop.c | 3907 | map_delete(_automatic_approval->items, str);
player_craft_shop.c | 3909 | sprintf("$I$10=   %-20s", "* " + str);
player_craft_shop.c | 3925 | money_value_string(approval->final_cost, place);
player_craft_shop.c | 3929 | printf("%O\n", str);
player_craft_shop.c | 3930 | query_expression_string(expr, 0);
player_craft_shop.c | 3937 | money_value_string(expr, place);
player_craft_shop.c | 3979 | new(class expression_type);
player_craft_shop.c | 3984 | event_save(this_object());
player_craft_shop.c | 3988 | query_expression_string(bing->value, 0);
player_craft_shop.c | 4041 | write("$P$Status$P$" + ret);
player_craft_shop.c | 4057 | the_short() + ".\n");
player_craft_shop.c | 4061 | if (query_owners_money() >
player_craft_shop.c | 4062 | add_failed_mess("There is no deficit here to pay off.\n");
player_craft_shop.c | 4066 | query_property("place");
player_craft_shop.c | 4071 | query_owners_money();
player_craft_shop.c | 4072 | if (this_player()->query_value_in(place) >
player_craft_shop.c | 4073 | adjust_royalty(query_owner(), cost);
player_craft_shop.c | 4075 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
player_craft_shop.c | 4076 | add_succeeded_mess("$N pay$s off the deficit in " + the_short() + ".\n");
player_craft_shop.c | 4094 | add_failed_mess("You are not allowed to add restrictions to the shop.\n");
player_craft_shop.c | 4102 | the_short() + " a bit.\n"}));
player_craft_shop.c | 4105 | parse_boolean_string(str);
player_craft_shop.c | 4108 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 4118 | event_save(this_object());
player_craft_shop.c | 4131 | add_failed_mess("You are not allowed to add restrictions to the shop.\n");
player_craft_shop.c | 4139 | the_short() + " a bit.\n" }));
player_craft_shop.c | 4142 | parse_boolean_string(str);
player_craft_shop.c | 4145 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop.c | 4155 | event_save(this_object());
player_craft_shop.c | 4166 | add_failed_mess("You are not allowed to add categories.\n");
player_craft_shop.c | 4171 | add_failed_mess("The category already exists.\n");
player_craft_shop.c | 4175 | add_shop_category(category);
player_craft_shop.c | 4176 | add_succeeded_mess("$N add$s a new category.\n");
player_craft_shop.c | 4188 | add_failed_mess("You are not allowed to remove categories.\n");
player_craft_shop.c | 4192 | query_real_category_name(category);
player_craft_shop.c | 4195 | add_failed_mess("The category " + category + " does not exist.\n");
player_craft_shop.c | 4200 | add_failed_mess("You cannot remove the default category.\n");
player_craft_shop.c | 4205 | query_controller()->query_sell_list_obs();
player_craft_shop.c | 4206 | filter(obs, (: query_controller()->query_category_of_shop_object($1)  == $2:), category );
player_craft_shop.c | 4215 | the_short() + " (y/n)?");
player_craft_shop.c | 4216 | input_to("check_remove_category", 0, category);
player_craft_shop.c | 4217 | add_succeeded_mess(({ "", "$N removes a category from the shop.\n" }));
player_craft_shop.c | 4231 | add_failed_mess("You are not allowed to rename categories.\n");
player_craft_shop.c | 4235 | query_real_category_name(category);
player_craft_shop.c | 4238 | add_failed_mess("The category " + category + " does not exist.\n");
player_craft_shop.c | 4243 | add_failed_mess("You cannot remove the default category.\n");
player_craft_shop.c | 4247 | add_shop_category(new_category);
player_craft_shop.c | 4248 | query_controller()->query_sell_list_obs();
player_craft_shop.c | 4249 | filter(obs, (: query_controller()->query_category_of_shop_object($1)  == $2:), category );
player_craft_shop.c | 4253 | query_controller()->change_category_of_shop_object(ob, new_category);
player_craft_shop.c | 4256 | remove_shop_category(category);
player_craft_shop.c | 4273 | write("Aborting deleting the category " + category + ".\n");
player_craft_shop.c | 4277 | remove_shop_category(category);
player_craft_shop.c | 4278 | write("Removed the shop category " + category + ".\n");
player_craft_shop.c | 4281 | query_default_category();
player_craft_shop.c | 4286 | query_default_category();
player_craft_shop.c | 4289 | event_save(this_object());
player_craft_shop.c | 4299 | add_failed_mess("You are not allowed to set the default category.\n");
player_craft_shop.c | 4303 | query_real_category_name(default_cat);
player_craft_shop.c | 4306 | add_failed_mess("The category " + default_cat + " does not exist.\n");
player_craft_shop.c | 4310 | set_default_category(default_cat);
player_craft_shop.c | 4313 | event_save(this_object());
player_craft_shop.c | 4334 | write("$P$Category list$P$The current categories are:\n" + ret);
player_craft_shop.c | 4335 | add_succeeded_mess(({ "", "$N browses the categories.\n" }));
player_craft_shop.c | 4344 | add_failed_mess("You cannot set the name of " + the_short() + ".\n");
player_craft_shop.c | 4348 | set_shop_name(name);
player_craft_shop.c | 4349 | add_succeeded_mess("$N set$s the shop name to '" + name + "'.\n");
player_craft_shop.c | 4367 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop.c | 4377 | query_property("place");
player_craft_shop.c | 4384 | sort_array(keys(_sell_stats), (: _sell_stats[$1]->num_sold - _sell_stats[$2]->num_sold :));
player_craft_shop.c | 4387 | sort_array(keys(_sell_stats), (: _sell_stats[$1]->value_sold - _sell_stats[$2]->value_sold :));
player_craft_shop.c | 4390 | sort_array(keys(_sell_stats), 0);
player_craft_shop.c | 4401 | write("$P$Sold stats$P$" + ret);
player_craft_shop.c | 4402 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop.c | 4416 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop.c | 4425 | write("$P$Sold stats$P$" + ret);
player_craft_shop.c | 4426 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop.c | 4441 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop.c | 4445 | query_property("place");
player_craft_shop.c | 4457 | query_value();
player_craft_shop.c | 4465 | if (query_owners_money() >
player_craft_shop.c | 4475 | write(ret);
player_craft_shop.c | 4476 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop.c | 4489 | add_failed_mess("You cannot set the sign for the shop.\n");
player_craft_shop.c | 4493 | if (sizeof(obs) >
player_craft_shop.c | 4494 | add_failed_mess("You must only specifiy one sign.\n");
player_craft_shop.c | 4505 | add_failed_mess("Cannot set something as a sign that you cannot get.\n");
player_craft_shop.c | 4509 | query_sign_object();
player_craft_shop.c | 4511 | set_sign_object(obs[0]);
player_craft_shop.c | 4513 | add_failed_mess("Unable to move $I off you.\n", obs[0..0]);
player_craft_shop.c | 4518 | set_get();
player_craft_shop.c | 4520 | move(this_object());
player_craft_shop.c | 4535 | move(this_player());
player_craft_shop.c | 4536 | add_failed_mess("You cannot set the sign for some reason.\n");
player_craft_shop.c | 4548 | add_failed_mess("You cannot set the sign for the shop.\n");
player_craft_shop.c | 4553 | add_failed_mess("You cannot remove the sign since there is no sign.\n");
player_craft_shop.c | 4557 | query_sign_object();
player_craft_shop.c | 4558 | set_get();
player_craft_shop.c | 4562 | set_sign_object(0);
player_craft_shop.c | 4565 | reset_get();
player_craft_shop.c | 4566 | add_failed_mess("You cannot remove the sign, unable to hold it?\n");
player_craft_shop.c | 4582 | add_failed_mess("Only the owner can do this.\n");
player_craft_shop.c | 4586 | query_property("place");
player_craft_shop.c | 4590 | value_from_string(amount, place);
player_craft_shop.c | 4598 | add_failed_mess("You cannot collect more money than you have.\n");
player_craft_shop.c | 4602 | query_controller()->pay_out_royalty(this_player()->query_name(), place, amt);
player_craft_shop.c | 4611 | test_level(seller);
player_craft_shop.c | 4617 | test_guild(seller);
player_craft_shop.c | 4619 | query_name();
player_craft_shop.c | 4627 | test_guild(seller);
player_craft_shop.c | 4629 | query_wizard_order();
player_craft_shop.c | 4631 | replace_string(lower_case(guild), "_", " ");
player_craft_shop.c | 4640 | test_deity(seller);
player_craft_shop.c | 4650 | test_family(seller);
player_craft_shop.c | 4664 | query_base_value();
player_craft_shop.c | 4679 | query_value();
player_craft_shop.c | 4695 | query_cond();
player_craft_shop.c | 4696 | query_max_cond();
player_craft_shop.c | 4734 | query_enchant();
player_craft_shop.c | 4735 | query_max_enchant();
player_craft_shop.c | 4780 | filter(obs, (: $1->query_property("stolen") :));
player_craft_shop.c | 4787 | query_classification();
player_craft_shop.c | 4788 | filter(obs, (: sizeof($1->effects_matching($2)) :), classification);
player_craft_shop.c | 4794 | lower_case(name);
player_craft_shop.c | 4801 | lower_case(category);
player_craft_shop.c | 4834 | lower_case($1->query_spell_name()) == lower_case($2)) :), spell_name);
player_craft_shop.c | 4841 | return ({ });
player_craft_shop.c | 4847 | lower_case($1->query_ritual_name()) == lower_case($2)) :), ritual_name );
player_craft_shop.c | 4869 | filter(all_inventory(ob), (: $1->query_liquid() :));
player_craft_shop.c | 4874 | query_weight() * 100 / ob->query_max_weight();
player_craft_shop.c | 4888 | query_water_volume() * 100 / ob->query_max_volume();
player_craft_shop.c | 4909 | query_charges();
player_craft_shop.c | 4911 | query_static_auto_load();
player_craft_shop.c | 4931 | explode(match, ",");
player_craft_shop.c | 4948 | explode(match, ",");
player_craft_shop.c | 4961 | lower_case(inventory_type);
player_craft_shop.c | 4970 | sizeof(result);
player_craft_shop.c | 4977 | is_member_of(club, seller);
player_craft_shop.c | 4982 | return ({ });
player_craft_shop.c | 4984 | all_inventory(ob);
player_craft_shop.c | 4993 | tell_object(player, "You have some royalties to pick up.\n");
player_craft_shop.c | 4999 | call_out("inform_of_royalties", 5);
player_craft_shop.c | 5001 | add_command("waiting", "", (: do_list_approval(1) :));
player_craft_shop.c | 5002 | add_command("waiting", "unapproved", (: do_list_approval(0) :));
player_craft_shop.c | 5004 | do_approve_reject($4[0], 0, -1) :));
player_craft_shop.c | 5005 | add_command("retrieve", "<string'id'>", (: do_return($4[0]) :) );
player_craft_shop.c | 5006 | add_command("return", "<string'id'>", (: do_return($4[0]) :) );
player_craft_shop.c | 5008 | do_approve_auto_item_test($1) :));
player_craft_shop.c | 5010 | init();
player_craft_shop.c | 5014 | add_command("approve", "<string'id'>", (: do_approve_item($4[0], 0) :));
player_craft_shop.c | 5016 | do_approve_item($4[0], $4[1]) :));
player_craft_shop.c | 5018 | do_approve_reject($4[0], 0, $4[1]) :));
player_craft_shop.c | 5020 | do_approve_reject($4[0], $4[1], -1) :));
player_craft_shop.c | 5022 | do_approve_reject($4[0], $4[2], $4[1]) :));
player_craft_shop.c | 5025 | do_approve_reject_num($4[0], $4[1]) :));
player_craft_shop.c | 5028 | do_approve_auto_low($4[0]) :));
player_craft_shop.c | 5036 | do_approve_auto_expression_remove($4[0]) :));
player_craft_shop.c | 5038 | do_approve_percentage($4[0]) :));
player_craft_shop.c | 5040 | do_approve_auto_item_add($4[0], $4[1], 0, 0, 0) :));
player_craft_shop.c | 5042 | do_approve_auto_item_add($4[0], $4[1], 0, 0, $4[2]) :));
player_craft_shop.c | 5044 | do_approve_auto_item_add($4[0], $4[1], 0, $4[2], 0) :));
player_craft_shop.c | 5046 | do_approve_auto_item_add($4[0], $4[1], $4[2], 0, 0) :));
player_craft_shop.c | 5048 | do_approve_auto_item_add($4[0], $4[1], $4[2], 0, $4[3]) :));
player_craft_shop.c | 5050 | do_approve_auto_item_add($4[0], $4[1], $4[2], $4[3], 0) :));
player_craft_shop.c | 5052 | do_approve_auto_item_add_expr($4[0], $4[1], 0, 0, 0) :));
player_craft_shop.c | 5054 | do_approve_auto_item_add_expr($4[0], $4[1], 0, $4[2], 0) :));
player_craft_shop.c | 5056 | do_approve_auto_item_add_expr($4[0], $4[1], 0, 0, $4[2]) :));
player_craft_shop.c | 5058 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], 0, 0) :));
player_craft_shop.c | 5060 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], $4[3], 0) :));
player_craft_shop.c | 5062 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], 0, $4[3]) :));
player_craft_shop.c | 5064 | do_approve_auto_item_add_object($1, $4[1], 0, 0, 0) :));
player_craft_shop.c | 5066 | do_approve_auto_item_add_object($1, $4[1], 0, $4[2], 0) :));
player_craft_shop.c | 5068 | do_approve_auto_item_add_object($1, $4[1], 0, 0, $4[2]) :));
player_craft_shop.c | 5070 | do_approve_auto_item_add_object($1, $4[1], $4[2], 0, 0) :));
player_craft_shop.c | 5072 | do_approve_auto_item_add_object($1, $4[1], $4[2], $4[3], 0) :));
player_craft_shop.c | 5074 | do_approve_auto_item_add_object($1, $4[1], $4[2], 0, $4[3]) :));
player_craft_shop.c | 5076 | do_approve_auto_item_add_object_expr($1, $4[1], 0, 0, 0) :));
player_craft_shop.c | 5078 | do_approve_auto_item_add_object_expr($1, $4[1], 0, $4[2], 0) :));
player_craft_shop.c | 5080 | do_approve_auto_item_add_object_expr($1, $4[1], 0, 0, $4[2]) :));
player_craft_shop.c | 5082 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], 0, 0) :));
player_craft_shop.c | 5084 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], $4[3], 0) :));
player_craft_shop.c | 5086 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], 0, $4[3]) :));
player_craft_shop.c | 5088 | do_approve_auto_item_remove($4[0]) :));
player_craft_shop.c | 5090 | do_approve_auto_item_remove_object($1) :));
player_craft_shop.c | 5092 | do_approve_auto_high($4[0]) :));
player_craft_shop.c | 5094 | do_approve_auto_high_deny($4[0]) :));
player_craft_shop.c | 5096 | do_approve_limit($4[0]) :));
player_craft_shop.c | 5098 | do_approve_limit_person_items($4[1], $4[0]) :));
player_craft_shop.c | 5100 | do_approve_limit_person_value($4[1], $4[0]) :));
player_craft_shop.c | 5102 | do_approve_limit_person_value_deny($4[1], $4[0]) :));
player_craft_shop.c | 5104 | do_approve_limit_person_remove($4[0]) :));
player_craft_shop.c | 5106 | do_approve_black_list_add($4[0]) :));
player_craft_shop.c | 5108 | do_approve_black_list_add_ignore() :));
player_craft_shop.c | 5110 | do_approve_black_list_remove($4[0]) :));
player_craft_shop.c | 5113 | do_user_function_add($4[0], $4[1]) :));
player_craft_shop.c | 5116 | do_user_function_remove($4[0]) :));
player_craft_shop.c | 5118 | do_approve_status(0) :));
player_craft_shop.c | 5120 | do_approve_status(2) :));
player_craft_shop.c | 5122 | do_approve_status_internal_functions() :));
player_craft_shop.c | 5124 | do_approve_status_functions(0) :));
player_craft_shop.c | 5126 | do_function_help_list() :));
player_craft_shop.c | 5128 | do_function_help($4[0]) :));
player_craft_shop.c | 5130 | do_approve_status_functions(1) :));
player_craft_shop.c | 5132 | do_approve_status(3) :));
player_craft_shop.c | 5134 | do_approve_status(1) :));
player_craft_shop.c | 5136 | do_approve_browse($4[0]) :));
player_craft_shop.c | 5138 | do_approve_checkout($4[0]) :));
player_craft_shop.c | 5140 | do_approve_checkin($1) :));
player_craft_shop.c | 5142 | do_approve_pay_deficit() :));
player_craft_shop.c | 5144 | do_approve_buy_expression($4[0]) :));
player_craft_shop.c | 5146 | do_approve_use_expression($4[0]) :));
player_craft_shop.c | 5149 | do_name_shop($4[0]) :));
player_craft_shop.c | 5152 | do_set_sign($1) :) );
player_craft_shop.c | 5154 | do_remove_sign() :) );
player_craft_shop.c | 5156 | add_command("stats", "items by name", (: do_stats_items(0) :));
player_craft_shop.c | 5157 | add_command("stats", "items by number", (: do_stats_items(1) :));
player_craft_shop.c | 5158 | add_command("stats", "items by value", (: do_stats_items(2) :));
player_craft_shop.c | 5160 | add_command("stats", "transactions", (: do_stats_transactions() :));
player_craft_shop.c | 5162 | add_command("stats", "money", (: do_stats_money() :));
player_craft_shop.c | 5165 | do_check_sell($1) :));
player_craft_shop.c | 5167 | add_command("category", "list", (: do_list_categories() :));
player_craft_shop.c | 5169 | do_set_default_category($4[0]) :));
player_craft_shop.c | 5171 | do_add_new_category($4[0]) :));
player_craft_shop.c | 5173 | do_remove_category($4[0]) :));
player_craft_shop.c | 5175 | do_rename_category($4[0], $4[1]) :));
player_craft_shop.c | 5178 | do_collect_partial_royalties($4[0]) :));
player_craft_shop.c | 5180 | init();
craft_shop_category_modify.c | 67 | create();
craft_shop_category_modify.c | 89 | if (sizeof(voted) >
craft_shop_category_modify.c | 94 | if (sizeof(voted) >
craft_shop_category_modify.c | 95 | if (yes * 100 / (no + yes) >
craft_shop_category_modify.c | 101 | if (sizeof(voted) >
craft_shop_category_modify.c | 102 | if (yes * 100 / (no + yes) >
commercial.c | 63 | variable_use_type(string seller);
commercial.c | 72 | time();
commercial.c | 73 | new(class weekly_status);
commercial.c | 76 | create();
commercial.c | 77 | create();
commercial.c | 89 | set_short(_property_name);
commercial.c | 90 | add_property("determinate", "");
commercial.c | 93 | create();
commercial.c | 97 | set_expression_type("room");
commercial.c | 98 | add_help_file("commercial");
commercial.c | 101 | parse_boolean_string("false");
commercial.c | 109 | time();
commercial.c | 113 | call_out("mail_weekly_status", 0);
commercial.c | 117 | time());
commercial.c | 130 | set_short(_property_name);
commercial.c | 131 | add_property("determinate", "");
commercial.c | 133 | short();
commercial.c | 145 | set_short(_property_name);
commercial.c | 146 | add_property("determinate", "");
commercial.c | 148 | long(word, dark);
commercial.c | 172 | evaluate_expression(_use_expression, this_player()->query_name());
commercial.c | 176 | this_player()->query_name());
commercial.c | 188 | this_object();
commercial.c | 199 | load_me();
commercial.c | 209 | save_me();
commercial.c | 243 | new(class weekly_status);
commercial.c | 254 | time());
commercial.c | 257 | query_owner()])->last_withdrawl = time();
commercial.c | 265 | time());
commercial.c | 268 | time();
commercial.c | 273 | event_save(this_object());
commercial.c | 293 | query_owners_money();
commercial.c | 362 | add_property("determinate", "");
commercial.c | 363 | set_short(_property_name);
commercial.c | 377 | dest_me();
commercial.c | 393 | reset_get();
commercial.c | 408 | create_auto_load(({ ob }));
commercial.c | 409 | reset_get();
commercial.c | 414 | event_save(this_object());
commercial.c | 419 | printf("ERROR!  Do not use set_save_file.\n");
commercial.c | 431 | set_save_file(dir + "_main");
commercial.c | 451 | all_inventory();
commercial.c | 452 | while (file_size(query_save_dir() + _commercial_id) >
commercial.c | 453 | file_size(query_save_dir() + _commercial_id + ".o") >
commercial.c | 454 | file_size(query_save_dir() + _commercial_id + ".o.gz") >
commercial.c | 459 | event_save(this_object());
commercial.c | 488 | new(class weekly_status);
commercial.c | 492 | reset_weekly_status();
commercial.c | 509 | query_property("place");
commercial.c | 512 | new(class weekly_status);
commercial.c | 535 | query_weekly_status_string();
commercial.c | 574 | map_delete(_royalties, person);
commercial.c | 579 | catch(str = query_weekly_status_string());
commercial.c | 591 | file_name(this_object()) + "\n");
commercial.c | 593 | convert_message(str);
commercial.c | 600 | time();
commercial.c | 604 | adjust_royalty(query_owner(), -ob->query_weekly_upkeep_cost());
commercial.c | 607 | event_save(this_object());
commercial.c | 608 | reset_weekly_status();
commercial.c | 609 | event_save(this_object());
commercial.c | 623 | query_commercial_name() == $2 :), type);
commercial.c | 639 | parse_boolean_string("true");
commercial.c | 649 | add_failed_mess("You cannot set the name of " + the_short() + ".\n");
commercial.c | 653 | set_property_name(name);
commercial.c | 654 | add_succeeded_mess("$N set$s the property name to '" + name + "'.\n");
commercial.c | 667 | add_failed_mess("You cannot set the sign for the property.\n");
commercial.c | 671 | if (sizeof(obs) >
commercial.c | 672 | add_failed_mess("You must only specifiy one sign.\n");
commercial.c | 683 | add_failed_mess("Cannot set something as a sign that you cannot get.\n");
commercial.c | 687 | query_sign_object();
commercial.c | 689 | set_sign_object(obs[0]);
commercial.c | 691 | add_failed_mess("Unable to move $I off you.\n", obs[0..0]);
commercial.c | 696 | set_get();
commercial.c | 698 | move(this_object());
commercial.c | 713 | move(this_player());
commercial.c | 714 | add_failed_mess("You cannot set the sign for some reason.\n");
commercial.c | 726 | add_failed_mess("You cannot set the sign for the property.\n");
commercial.c | 731 | add_failed_mess("You cannot remove the sign since there is no sign.\n");
commercial.c | 735 | query_sign_object();
commercial.c | 736 | set_get();
commercial.c | 740 | set_sign_object(0);
commercial.c | 743 | reset_get();
commercial.c | 744 | add_failed_mess("You cannot remove the sign, unable to hold it?\n");
commercial.c | 759 | add_failed_mess("You are not allowed to see the status of this store.\n");
commercial.c | 763 | query_property("place");
commercial.c | 816 | query_main_status(hint);
commercial.c | 823 | write("$P$Status$P$" + ret);
commercial.c | 830 | add_failed_mess("You are not allowed to see the status of this store.\n");
commercial.c | 834 | write("$P$Weekly Status$P$" + query_weekly_status_string());
commercial.c | 846 | add_failed_mess("You are not allowed to add restrictions to the property.\n");
commercial.c | 854 | the_short() + " a bit.\n" }));
commercial.c | 857 | parse_boolean_string(str);
commercial.c | 860 | add_failed_mess(query_last_expression_error() + ".\n");
commercial.c | 870 | event_save(this_object());
commercial.c | 883 | add_failed_mess("You are not allowed to add restrictions to the property.\n");
commercial.c | 899 | the_short() + " a bit.\n" }));
commercial.c | 902 | parse_boolean_string(str);
commercial.c | 905 | add_failed_mess(query_last_expression_error() + ".\n");
commercial.c | 916 | event_save(this_object());
commercial.c | 940 | time());
commercial.c | 946 | add_failed_mess("You have no money owed to you here.\n");
commercial.c | 952 | write("Your royalties timed out before you could claim them.\n");
commercial.c | 953 | map_delete(_royalties, this_player()->query_name());
commercial.c | 958 | add_failed_mess("You owe money to " + the_short() + ".\n");
commercial.c | 963 | map_delete(_royalties, this_player()->query_name());
commercial.c | 966 | query_property("place");
commercial.c | 991 | add_failed_mess("Only the property owners can do this.\n");
commercial.c | 996 | add_failed_mess("No one has royalties here currently.\n");
commercial.c | 1000 | query_property("place");
commercial.c | 1005 | new(class royalty_data, value : value, last_withdrawl : time());
commercial.c | 1011 | money_value_string(data->value, place);
commercial.c | 1019 | map_delete(_royalties, person);
commercial.c | 1023 | query_property("place");
commercial.c | 1028 | write("$P$Royalties$P$" + ret);
commercial.c | 1046 | query_property("place");
commercial.c | 1051 | this_player()->query_name();
commercial.c | 1056 | time());
commercial.c | 1063 | add_failed_mess("You have no royalties to collect.\n");
commercial.c | 1069 | write("Your royalties timed out before you could claim them.\n");
commercial.c | 1070 | map_delete(_royalties, name);
commercial.c | 1076 | map_delete(_royalties, this_player()->query_name());
commercial.c | 1080 | this_player()->query_refresh_time() >
commercial.c | 1081 | add_failed_mess("You have refreshed since your last collection.\n");
commercial.c | 1082 | map_delete(_royalties, name);
commercial.c | 1087 | query_owner();
commercial.c | 1092 | this_player()->adjust_money(MONEY_HAND->create_money_array(data->value, place));
commercial.c | 1096 | time() ) });
commercial.c | 1098 | event_save(this_object());
commercial.c | 1105 | map_delete(_royalties, name);
commercial.c | 1109 | add_failed_mess("You have no royalties to collect.\n");
commercial.c | 1123 | map_delete(_royalties, name);
commercial.c | 1142 | add_failed_mess("Only the owners can do this.\n");
commercial.c | 1146 | query_property("place");
commercial.c | 1150 | value_from_string(amount, place);
commercial.c | 1158 | add_failed_mess("You cannot collect more money than you have.\n");
commercial.c | 1162 | this_player()->adjust_money(MONEY_HAND->create_money_array(amt, place));
commercial.c | 1165 | map_delete(_royalties, query_owner());
commercial.c | 1168 | new(class weekly_status);
commercial.c | 1173 | time() ) });
commercial.c | 1174 | event_save(this_object());
commercial.c | 1191 | add_failed_mess("Entry into " + the_short() + " is free.\n");
commercial.c | 1201 | evaluate_expression(_entry_cost, this_player()->query_name());
commercial.c | 1216 | the_short() + ".\n");
commercial.c | 1229 | add_failed_mess("You cannot add to the float.\n");
commercial.c | 1233 | query_property("place");
commercial.c | 1237 | value_from_string(amount, place);
commercial.c | 1259 | time());
commercial.c | 1265 | the_short() + ".\n" }));
commercial.c | 1275 | clone_object(COMMERCIAL_SALESPERSON);
commercial.c | 1276 | move(this_object(), "$N arrives in a flash.\n");
commercial.c | 1277 | set_commercial_type(query_commercial_type());
commercial.c | 1278 | do_start_speil(this_player());
commercial.c | 1291 | filter(obs, (: $1->id(MONEY_ALIAS) :));
commercial.c | 1293 | add_failed_mess("YOu cannot deposit any of $I.\n", obs);
commercial.c | 1298 | query_property("place");
commercial.c | 1299 | filter_legal_tender(money, place);
commercial.c | 1301 | move(this_player());
commercial.c | 1302 | write(monies[0]->the_short());
commercial.c | 1305 | add_failed_mess("You must use legal tender.\n");
commercial.c | 1309 | adjust_royalty(query_owner(), monies[0]->query_value_in(place));
commercial.c | 1310 | move("/room/rubbish");
commercial.c | 1314 | event_save(this_object());
commercial.c | 1324 | add_failed_mess("You are not allowed to add people to the black list.\n");
commercial.c | 1328 | lower_case(name);
commercial.c | 1331 | add_failed_mess("Sorry, " + name + " does not play here.\n");
commercial.c | 1347 | event_save(this_object());
commercial.c | 1363 | add_failed_mess("You are not allowed to add people to the black list.\n");
commercial.c | 1367 | this_player()->query_property("ignoring");
commercial.c | 1369 | add_failed_mess("You are not ignoring anyone.\n");
commercial.c | 1376 | lower_case(name);
commercial.c | 1387 | event_save(this_object());
commercial.c | 1389 | add_failed_mess("Your ignore list is already added to the black list.\n");
commercial.c | 1410 | lower_case(name);
commercial.c | 1413 | add_failed_mess("The person " + name + " is not in the black list.\n");
commercial.c | 1417 | event_save(this_object());
commercial.c | 1444 | init();
commercial.c | 1445 | init();
commercial.c | 1446 | add_command("collect", "royalties", (: do_collect() :));
commercial.c | 1447 | add_command("royalties", "", (: do_royalties() :));
commercial.c | 1448 | add_command("royalty", "", (: do_royalties() :));
commercial.c | 1449 | add_command("measure", "property", (: do_measure() :) );
commercial.c | 1456 | add_command("royalty", "list", (: do_royalty_list() :));
commercial.c | 1457 | add_command("royalties", "list", (: do_royalty_list() :));
commercial.c | 1459 | do_collect_partial_royalties($4[0]) :));
commercial.c | 1461 | do_add_royalties($4[0]) :));
commercial.c | 1466 | do_status(0) :));
commercial.c | 1468 | do_status(1) :));
commercial.c | 1470 | do_weekly_status() :));
commercial.c | 1473 | do_name_property($4[0]) :));
commercial.c | 1476 | do_use_expression($4[0]) :));
commercial.c | 1479 | do_use_expression_type($4[0], $4[1]) :));
commercial.c | 1481 | do_set_sign($1) :) );
commercial.c | 1483 | do_remove_sign() :) );
commercial.c | 1486 | do_black_list_add($4[0]) :));
commercial.c | 1488 | do_black_list_add_ignore() :));
commercial.c | 1490 | do_black_list_remove($4[0]) :));
commercial.c | 1492 | add_command("purchase", "stuff", (: do_purchase() :));
vault_entry.c | 30 | add_exit(string name, string dest, string type);
vault_entry.c | 31 | modify_exit(string name, mixed* stuff);
vault_entry.c | 32 | query_property(string name);
vault_entry.c | 33 | add_property(string name, mixed value);
vault_entry.c | 34 | remove_property(string name);
vault_entry.c | 87 | add_exit(direc, dest, type);
vault_entry.c | 88 | modify_exit( direc, ({ "function", "check_customer" }) );
vault_entry.c | 89 | modify_exit( direc, ({ "closed", 1}));
vault_entry.c | 106 | this_player()->add_succeeded_mess( this_object(), "", ({ }) );
vault_entry.c | 108 | write("You ask for an account.\n");
vault_entry.c | 109 | say((string)this_player()->one_short() +" asks for an account.\n");
vault_entry.c | 111 | this_player()->query_name();
vault_entry.c | 119 | do_command( "glare "+ this_player()->query_name() );
vault_entry.c | 122 | notify_fail("");
vault_entry.c | 125 | do_command( "say You already have an account!" );
vault_entry.c | 126 | this_player()->add_property( "vault warned", 1, SPAM_GUARD );
vault_entry.c | 132 | do_command( "glare "+ this_player()->query_name() );
vault_entry.c | 133 | do_command( "say I just said, you don't have enough money!" );
vault_entry.c | 134 | notify_fail("");
vault_entry.c | 141 | this_player()->add_property( "vault warned", 1, SPAM_GUARD );
vault_entry.c | 152 | write( "You pay "+PTS+".\n" );
vault_entry.c | 162 | add_property( owner, 1 );
vault_entry.c | 165 | init_container(this_player());
vault_entry.c | 166 | dest_me();
vault_entry.c | 175 | add_command( "apply", "for [an] account", (: apply_for_account :) );
vault_entry.c | 195 | query_name();
vault_entry.c | 207 | do_command( "glare "+ thing->query_name() );
vault_entry.c | 210 | notify_fail("");
vault_entry.c | 213 | do_command("say You do not have an account!");
vault_entry.c | 219 | add_property( "vault warned", 1, SPAM_GUARD );
vault_entry.c | 220 | notify_fail( "" );
vault_entry.c | 224 | load_me();
vault_entry.c | 225 | find_object( vault_room );
vault_entry.c | 229 | tell_object( thing, PTS+" intercepts you.\n" );
vault_entry.c | 234 | do_command( "glare "+ thing->query_name() );
vault_entry.c | 237 | notify_fail("");
vault_entry.c | 240 | do_command("say Someone is using the facility at the moment!");
vault_entry.c | 241 | add_property( "vault warned", 1, SPAM_GUARD );
vault_entry.c | 242 | notify_fail( "" );
vault_entry.c | 246 | remove_property(owner);
vault_entry.c | 247 | tell_object(thing, PTS+" waves you through.\n" );
vault_entry.c | 250 | call_out( "check_idler", TIME_LIMIT, thing );
vault_entry.c | 255 | tell_object( thing, PTS+" intercepts you.\n" );
vault_entry.c | 260 | do_command( "glare "+ thing->query_name() );
vault_entry.c | 263 | notify_fail("");
vault_entry.c | 270 | add_property( "vault warned", 1, SPAM_GUARD );
vault_entry.c | 271 | notify_fail( "" );
vault_entry.c | 277 | tell_object( thing, "You pay "+PTS+" who waves you through.\n" );
vault_entry.c | 282 | remove_call_out("check_idler");
vault_entry.c | 283 | call_out("check_idler", TIME_LIMIT, thing);
auction_house.c | 60 | next_auction_finish();
auction_house.c | 61 | query_property(string name);
auction_house.c | 62 | query_auction_item(string id);
auction_house.c | 63 | retry_auction(class auction auction);
auction_house.c | 83 | create();
auction_house.c | 90 | query_auctions() { return copy(_auctions);
auction_house.c | 96 | query_finished_auctions() { return copy(_finished_auctions);
auction_house.c | 102 | unguarded( (: restore_object(_save_file, 1) :));
auction_house.c | 103 | allocate(sizeof(_auctions));
auction_house.c | 107 | next_auction_finish();
auction_house.c | 114 | unguarded( (: save_object(_save_file) :));
auction_house.c | 123 | load_me();
auction_house.c | 165 | map_delete(_auction_times, index);
auction_house.c | 218 | if (sizeof(_auctions) + sizeof(_finished_auctions) >
auction_house.c | 226 | new(class auction);
auction_house.c | 227 | create_auto_load(obs);
auction_house.c | 231 | time();
auction_house.c | 241 | save_me();
auction_house.c | 242 | next_auction_finish();
auction_house.c | 258 | sizeof(_auctions);
auction_house.c | 261 | load_auto_load_to_array(auct->save_stuff);
auction_house.c | 266 | return ({ });
auction_house.c | 299 | query_auction_item(id);
auction_house.c | 315 | sizeof(_finished_auctions);
auction_house.c | 329 | sizeof(_auctions);
auction_house.c | 332 | move("/room/rubbish");
auction_house.c | 353 | query_property("place");
auction_house.c | 354 | remove_auction_item(auction);
auction_house.c | 361 | save_me();
auction_house.c | 374 | retry_auction(auction);
auction_house.c | 388 | query_auction_item(id);
auction_house.c | 396 | query_property("place");
auction_house.c | 397 | remove_auction_item(auction);
auction_house.c | 404 | save_me();
auction_house.c | 431 | query_property("place");
auction_house.c | 432 | remove_finished_auction_item(auction);
auction_house.c | 437 | time();
auction_house.c | 444 | save_me();
auction_house.c | 464 | lower_case(id);
auction_house.c | 484 | if ((left / AM_SECONDS_PER_DAY) >
auction_house.c | 489 | if ((left / (AM_SECONDS_PER_MINUTE * AM_MINUTES_PER_HOUR)) >
auction_house.c | 500 | if ((left / (AM_SECONDS_PER_MINUTE * AM_MINUTES_PER_HOUR)) >
auction_house.c | 508 | if ((left / (AM_SECONDS_PER_MINUTE)) >
auction_house.c | 544 | time());
auction_house.c | 574 | time();
auction_house.c | 576 | finish_auction(auct);
auction_house.c | 588 | time();
auction_house.c | 590 | retry_auction(auct);
auction_house.c | 591 | time();
auction_house.c | 601 | remove_call_out(_callout_id);
auction_house.c | 605 | call_out("next_auction_finish", next);
auction_house.c | 619 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 624 | add_failed_mess("Nothing currently on auction.\n");
auction_house.c | 628 | query_property("place");
auction_house.c | 631 | sprintf("%c) %s", pos + 'A', bing->name);
auction_house.c | 646 | write("$P$Auctions$P$" + str);
auction_house.c | 663 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 667 | query_auction_item(id);
auction_house.c | 669 | add_failed_mess("There is no auction item " + id + ".\n");
auction_house.c | 673 | query_property("place");
auction_house.c | 679 | money_value_string(bing->reserve, place);
auction_house.c | 687 | query_auction_objects(bing);
auction_house.c | 690 | long();
auction_house.c | 698 | write("$P$Browse Auction$P$" + str);
auction_house.c | 716 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 720 | query_auction_item(id);
auction_house.c | 724 | add_failed_mess("There is no auction item " + id + ".\n");
auction_house.c | 729 | query_property("place");
auction_house.c | 730 | value_from_string(bid, place);
auction_house.c | 756 | money_value_string(auct->reserve, place) + ".\n");
auction_house.c | 761 | bid_on_item(auct, value, this_player()->query_cap_name());
auction_house.c | 762 | save_me();
auction_house.c | 785 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 789 | query_auction_item(id);
auction_house.c | 793 | add_failed_mess("There is no auction item " + id + ".\n");
auction_house.c | 798 | query_property("place");
auction_house.c | 818 | query_auction_objects(auct);
auction_house.c | 821 | remove_auction_item(auct);
auction_house.c | 822 | save_me();
auction_house.c | 829 | move(this_object());
auction_house.c | 836 | add_succeeded_mess("$N remove$s " + auct->name + " from auction.\n");
auction_house.c | 842 | add_failed_mess("You cannot withdraw that item from auction.\n");
auction_house.c | 861 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 865 | query_property("place");
auction_house.c | 866 | this_player()->query_value_in(place);
auction_house.c | 869 | remove_finished_auction_item(auction);
auction_house.c | 881 | create_money_array(auction->bid, place), place);
auction_house.c | 886 | load_auto_load_to_array(auction->save_stuff);
auction_house.c | 889 | move(this_object());
auction_house.c | 899 | query_multiple_short(obs) + ".\n");
auction_house.c | 901 | remove_finished_auction_item(auction);
auction_house.c | 902 | save_me();
auction_house.c | 916 | add_failed_mess("You cannot find anything to claim.\n");
auction_house.c | 937 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 941 | query_property("place");
auction_house.c | 945 | if (sizeof(_auctions) >
auction_house.c | 948 | add_failed_mess("The auction house is full.\n");
auction_house.c | 954 | value_from_string(res_str, place);
auction_house.c | 968 | query_time_end_string(len);
auction_house.c | 971 | money_value_string(reserve, place);
auction_house.c | 975 | write(ret + ".\n");
auction_house.c | 976 | write("Are you sure you wish to do this? ");
auction_house.c | 978 | input_to("confirm_auction", 0, name, obs, reserve, len);
auction_house.c | 979 | add_succeeded_mess(({ "", "$N put$s $I up for auction.\n" }), obs);
auction_house.c | 988 | query_property("place");
auction_house.c | 989 | lower_case(check);
auction_house.c | 993 | write("Ok, Aborting.\n");
auction_house.c | 999 | this_player()->query_cap_name(), len, 0, 0);
auction_house.c | 1002 | query_time_end_string(len);
auction_house.c | 1009 | write(ret + ".\n");
auction_house.c | 1013 | move("/room/rubbish");
auction_house.c | 1028 | add_failed_mess(this_object()->the_short() + " is not open.\n");
auction_house.c | 1037 | write("$P$Auction lengths$P$" + ret);
auction_house.c | 1043 | add_command("list", "", (: do_list() :));
auction_house.c | 1044 | add_command("browse", "<string'auction id'>", (: do_browse($4[0]) :));
auction_house.c | 1046 | do_bid($4[0], $4[1]) :));
auction_house.c | 1048 | do_bid($4[1], $4[0]) :));
auction_house.c | 1049 | add_command("claim", "", (: do_claim() :));
auction_house.c | 1051 | do_withdraw($4[0]) :));
auction_house.c | 1054 | implode(keys(_auction_times), "|");
auction_house.c | 1056 | add_command("info", "", (: do_info() :));
auction_house.c | 1059 | do_add($4[2], $1, 0, $4[0]) :));
auction_house.c | 1062 | do_add($4[2], $1, $4[3], $4[0]) :));
newspaper_archive.c | 16 | query_property(string name);
newspaper_archive.c | 19 | create();
newspaper_archive.c | 67 | query_property("place");
newspaper_archive.c | 72 | query_papers_in_area(_area);
newspaper_archive.c | 86 | if (NEWSPAPER_HANDLER->query_last_edition_num(paper) >
newspaper_archive.c | 88 | query_last_edition_num(paper);
newspaper_archive.c | 92 | money_value_string(cost, place);
newspaper_archive.c | 101 | write("$P$Archives$P$" + str);
newspaper_archive.c | 120 | query_property("place");
newspaper_archive.c | 125 | query_papers_in_area(_area);
newspaper_archive.c | 133 | sizeof(papers);
newspaper_archive.c | 143 | add_failed_mess("There is no paper called " + paper + ".\n");
newspaper_archive.c | 170 | clone_object("/obj/misc/newspaper");
newspaper_archive.c | 171 | set_paper(found_paper);
newspaper_archive.c | 172 | set_edition(edition);
newspaper_archive.c | 176 | move(this_object());
newspaper_archive.c | 181 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
newspaper_archive.c | 187 | money_value_string(cost, place) + ".\n");
newspaper_archive.c | 191 | this_player()->query_property("Paper " + found_paper);
newspaper_archive.c | 197 | this_player()->add_property("Paper " + found_paper, editions);
newspaper_archive.c | 205 | add_command("list", "[papers]", (: do_list_papers() :));
newspaper_archive.c | 207 | do_buy($4[1], $4[0]) :));
item_shop.c | 33 | setup_safe();
item_shop.c | 34 | do_banking();
item_shop.c | 35 | do_word_buy(string str);
item_shop.c | 36 | do_word_browse(string str);
item_shop.c | 37 | do_buy( object *things );
item_shop.c | 38 | do_browse( object *things );
item_shop.c | 39 | remove_property(string name);
item_shop.c | 40 | query_property(string name);
item_shop.c | 41 | set_max_float( int );
item_shop.c | 42 | query_max_float();
item_shop.c | 49 | create();
item_shop.c | 50 | create();
item_shop.c | 51 | this_object()->add_help_file("item_shop");
item_shop.c | 53 | setup_safe();
item_shop.c | 55 | set_max_float( 20000 + random( 50000 ) );
item_shop.c | 72 | clone_object( ITEM_SHOP_ITEMS + "item_shop_safe" );
item_shop.c | 73 | set_difficulty( 2 + random( 7 ) );
item_shop.c | 74 | set_ownership( "shop" );
item_shop.c | 77 | this_object()->add_hidden_object( _safe );
item_shop.c | 79 | move( this_object() );
item_shop.c | 91 | set_ownership( "shop" );
item_shop.c | 94 | this_object()->add_hidden_object( _safe );
item_shop.c | 96 | move( this_object() );
item_shop.c | 103 | reset();
item_shop.c | 105 | remove_property("inventory_loss");
item_shop.c | 108 | do_banking();
item_shop.c | 112 | return ({ TYPE, DISPLAY });
item_shop.c | 133 | query_num_items_left($1) > 0 :));
item_shop.c | 144 | create_real_object(ob);
item_shop.c | 159 | set_open_function(func);
item_shop.c | 170 | set_open_function(func);
item_shop.c | 297 | add_command( "list", "[all]" );
item_shop.c | 298 | add_command( "browse", "<indirect:object:"+file_name(query_cont())+">" );
item_shop.c | 299 | add_command( "browse", "<word>", (: do_word_browse($4[0]) :) );
item_shop.c | 300 | add_command( "buy", "<indirect:object:"+file_name(query_cont())+">" );
item_shop.c | 301 | add_command( "buy", "<word>", (: do_word_buy($4[0]) :) );
item_shop.c | 308 | all_inventory( query_cont() );
item_shop.c | 310 | add_failed_mess( "There is no item with that label.\n" );
item_shop.c | 314 | sort_array(things, _sort_func);
item_shop.c | 323 | if (sizeof(things) >
item_shop.c | 337 | all_inventory( query_cont() );
item_shop.c | 338 | letter_name(0, things);
item_shop.c | 344 | all_inventory( query_cont() );
item_shop.c | 345 | letter_name(sizeof(things) - 1, things);
item_shop.c | 352 | all_inventory( query_cont() );
item_shop.c | 353 | if (sizeof(things) >
item_shop.c | 357 | lower_case(name);
item_shop.c | 374 | lower_case(name);
item_shop.c | 399 | query_property( "cost here" );
item_shop.c | 404 | query_value_at( this_object() );
item_shop.c | 405 | query_property( "place" );
item_shop.c | 411 | create_money_array( cost, place ), place );
item_shop.c | 413 | add_property( "cost here", cost );
item_shop.c | 431 | add_failed_mess("The shop is not open.\n");
item_shop.c | 438 | query_property( "place" );
item_shop.c | 444 | add_failed_mess( "There is nothing to buy here.\n" );
item_shop.c | 449 | all_inventory( query_cont() );
item_shop.c | 451 | sort_array(things, _sort_func);
item_shop.c | 455 | query_num_items_left(thing);
item_shop.c | 460 | query_property( DISPLAY );
item_shop.c | 462 | a_short();
item_shop.c | 467 | this_object()->query_cost( thing ), place );
item_shop.c | 479 | add_failed_mess( "There is nothing to buy here.\n" );
item_shop.c | 484 | convert_message(list);
item_shop.c | 487 | add_succeeded_mess(({ "", "$N list$s the inventory.\n" }), ({ }));
item_shop.c | 490 | evaluate(_list_func, this_player(), listed);
item_shop.c | 502 | add_failed_mess("The shop is not open.\n");
item_shop.c | 508 | query_number_from_string( str );
item_shop.c | 512 | start_letter() + " to " + end_letter() + ".\n" );
item_shop.c | 516 | find_object_from_number(i);
item_shop.c | 520 | do_buy( ({ thing }) );
item_shop.c | 534 | add_failed_mess("The shop is not open.\n");
item_shop.c | 540 | sizeof(things);
item_shop.c | 544 | query_plural() +".\n" );
item_shop.c | 548 | query_property( "place" );
item_shop.c | 552 | this_player()->query_value_in( place );
item_shop.c | 555 | this_player()->query_value_in( "default" );
item_shop.c | 558 | this_object()->query_cost( things[i] );
item_shop.c | 561 | add_failed_mess("You cannot afford to buy $I.\n", ({ things[i] }));
item_shop.c | 564 | create_real_object(things[i]);
item_shop.c | 577 | create_money_array( cost, place );
item_shop.c | 578 | clone_object( "/obj/money" );
item_shop.c | 579 | set_money_array( money_arr );
item_shop.c | 580 | move( _safe );
item_shop.c | 581 | set_closed();
item_shop.c | 582 | set_locked();
item_shop.c | 585 | all_inventory( _safe );
item_shop.c | 589 | query_money_array();
item_shop.c | 590 | query_total_value( temp, place );
item_shop.c | 594 | do_banking();
item_shop.c | 598 | add_succeeded_mess("$N $V $I.\n", ({ thing }) );
item_shop.c | 600 | this_object()->something_bought( thing, this_player(), cost );
item_shop.c | 602 | this_object()->package_item( thing );
item_shop.c | 605 | move( this_object() );
item_shop.c | 613 | evaluate(_buy_func, this_player(), sold);
item_shop.c | 625 | add_failed_mess("The shop is not open.\n");
item_shop.c | 631 | query_number_from_string( words );
item_shop.c | 635 | start_letter() + " to " + end_letter() + ".\n" );
item_shop.c | 639 | find_object_from_number(i);
item_shop.c | 643 | do_browse( ({ thing }) );
item_shop.c | 657 | add_failed_mess("The shop is not open.\n");
item_shop.c | 662 | query_property( "place" );
item_shop.c | 667 | sizeof(things);
item_shop.c | 672 | long();
item_shop.c | 678 | add_failed_mess("The shop is sold out of $I.\n", things);
item_shop.c | 683 | write("$P$Browse things$P$" + mess);
item_shop.c | 684 | add_succeeded_mess(({ "", "$N $V $I.\n", }), things);
item_shop.c | 687 | evaluate(_browse_func, this_player(), things);
item_shop.c | 694 | dest_me();
item_shop.c | 705 | query_property( "stolen from" );
item_shop.c | 707 | add_property( "stolen from", 1 );
item_shop.c | 709 | add_property( "stolen from", stolen_from + 1 );
item_shop.c | 713 | query_difficulty();
item_shop.c | 715 | set_difficulty( difficulty + 2 );
item_shop.c | 718 | set_difficulty( difficulty + 1 );
item_shop.c | 728 | handle_shoplift(thief, victim);
item_shop.c | 731 | handle_shoplift(thief, victim);
item_shop.c | 738 | debug_printf( "Doing banking.\n" );
item_shop.c | 740 | all_inventory( _safe );
item_shop.c | 743 | move( "/room/rubbish" );
clone_on_demand.c | 16 | do_buy( objects *obs );
clone_on_demand.c | 19 | set_name("shop");
clone_on_demand.c | 20 | set_short("widget shop");
clone_on_demand.c | 21 | add_object( "sprocket" );
clone_on_demand.c | 26 | clone_object( "/path/of/sprocket" );
clone_on_demand.c | 31 | base_name( query_cont() ) + ">");
clone_on_demand.c | 37 | create_real_object(ob);
clone_on_demand.c | 38 | move( this_player() );
clone_on_demand.c | 40 | add_succeeded_mess( "$N buy$s $I.\n", obs );
clone_on_demand.c | 72 | clone_object("/std/container");
clone_on_demand.c | 73 | set_name( "clone_on_demand-store" );
clone_on_demand.c | 80 | check_cont();
clone_on_demand.c | 82 | remove_property(NUM_REMOVED);
clone_on_demand.c | 93 | set_object_domain("cwc");
clone_on_demand.c | 118 | add_object( "frog", 1 + random( 3 ) );
clone_on_demand.c | 122 | add_object( "/obj/food/apple.food", 0 );
clone_on_demand.c | 133 | clone_object("/std/container");
clone_on_demand.c | 134 | set_name( "clone_on_demand-store" );
clone_on_demand.c | 138 | request_item(name, 100, _domain);
clone_on_demand.c | 144 | set_decay_speed(0);
clone_on_demand.c | 146 | move(_cont);
clone_on_demand.c | 149 | add_property( DISPLAY, display_as);
clone_on_demand.c | 152 | add_property( REFERENCE, name);
clone_on_demand.c | 153 | add_property( MAX_PROP, max_per_reset );
clone_on_demand.c | 168 | query_property( MAX_PROP );
clone_on_demand.c | 169 | query_property( NUM_REMOVED );
clone_on_demand.c | 189 | query_short() == $(name) :) );
clone_on_demand.c | 194 | query_num_items_left( things[0] );
clone_on_demand.c | 212 | return ({ });
clone_on_demand.c | 213 | map( names, (: query_number_left($1) :) );
clone_on_demand.c | 228 | this_object()->switch_extra_properties();
clone_on_demand.c | 233 | add_property( prop, original->query_property( prop ) );
clone_on_demand.c | 234 | remove_property( prop );
clone_on_demand.c | 238 | set_decay_speed( newone->query_decay_speed() );
clone_on_demand.c | 239 | set_decay_speed(0);
clone_on_demand.c | 258 | query_property( REFERENCE );
clone_on_demand.c | 262 | this_object()->create_object( name );
clone_on_demand.c | 264 | clone_object(name);
clone_on_demand.c | 267 | request_item( name, 80 + random( 20 ), _domain );
clone_on_demand.c | 271 | switch_properties( new_thing, thing );
clone_on_demand.c | 274 | all_inventory(_cont);
clone_on_demand.c | 275 | member_array( thing, continv );
clone_on_demand.c | 276 | move("/room/void");
clone_on_demand.c | 277 | clone_object("/std/container");
clone_on_demand.c | 278 | move("/room/void");
clone_on_demand.c | 280 | move(_cont);
clone_on_demand.c | 283 | move(temp_cont);
clone_on_demand.c | 284 | move(_cont);
clone_on_demand.c | 286 | dest_me();
clone_on_demand.c | 289 | query_property( MAX_PROP );
clone_on_demand.c | 290 | query_property( NUM_REMOVED );
clone_on_demand.c | 292 | add_property( NUM_REMOVED, num + 1 );
clone_on_demand.c | 301 | dest_me();
clone_on_demand.c | 309 | add_object(name, max_per_reset, display_as);
clone_on_demand.c | 314 | add_object(name, max_per_reset, display_as);
expression_util.c | 6 | is_allowed(string person);
expression_util.c | 7 | event_save(object ob);
expression_util.c | 43 | add_failed_mess("You are not allowed to add functions to this store.\n");
expression_util.c | 50 | parse_user_expression(def, expr);
expression_util.c | 55 | query_last_expression_warning());
expression_util.c | 57 | write("You successfully add:\n" + query_user_function_string(name));
expression_util.c | 60 | event_save(this_object());
expression_util.c | 64 | add_failed_mess(query_last_expression_error() + "\n");
expression_util.c | 77 | add_failed_mess("You are not allowed to remove functions from this store.\n");
expression_util.c | 92 | add_failed_mess(query_last_expression_error() + "\n");
expression_util.c | 106 | add_failed_mess("You are not allowed to see the status of this store.\n");
expression_util.c | 110 | query_function_names();
expression_util.c | 120 | query_variable_names();
expression_util.c | 125 | write("$P$Internal functions$P$" + ret);
expression_util.c | 142 | add_failed_mess("There is no help for the function '" + name + "'.\n");
expression_util.c | 146 | replace(fname, "/", ".");
expression_util.c | 147 | cat_file(nroff_fn, 1);
expression_util.c | 149 | create_nroff(fname, nroff_fn);
expression_util.c | 150 | cat_file(nroff_fn, 0);
expression_util.c | 153 | write("$P$function: " + name + "$P$" + str);
expression_util.c | 164 | get_dir(CRAFT_SHOP_EXPRESSION_HELP_DIR);
expression_util.c | 166 | add_failed_mess("There is no help on any functions.\n");
expression_util.c | 172 | write(sprintf("%-#*s\n", this_player()->query_cols(), implode(names, "\n")));
expression_util.c | 186 | add_failed_mess("You are not allowed to see the status of this store.\n");
expression_util.c | 190 | query_user_function_names();
expression_util.c | 192 | add_failed_mess("Could not find any user defined expressions.\n");
expression_util.c | 203 | write("$P$User functions$P$" + ret);
expression_util.c | 216 | do_user_function_add($4[0], $4[1]) :));
expression_util.c | 219 | do_user_function_remove($4[0]) :));
expression_util.c | 221 | do_approve_status_internal_functions() :));
expression_util.c | 223 | do_approve_status_functions(0) :));
expression_util.c | 225 | do_function_help_list() :));
expression_util.c | 227 | do_function_help($4[0]) :));
expression_util.c | 229 | do_approve_status_functions(1) :));
pawn_shop.c | 112 | create() ;
pawn_shop.c | 115 | add_help_file( "pawn_shop" ) ;
pawn_shop.c | 116 | remove_help_file( "shop" );
pawn_shop.c | 126 | set_min_amount( 400 ) ;
pawn_shop.c | 127 | add_property( "no steal", 1 ) ;
pawn_shop.c | 130 | setup() ;
pawn_shop.c | 131 | reset() ;
pawn_shop.c | 138 | init() ;
pawn_shop.c | 139 | add_command( "pawn", "<indirect:object:me'items'>" ) ;
pawn_shop.c | 159 | uniq_array( in_obs ) ;
pawn_shop.c | 162 | filter( in_obs, (: creator_object($1) :) ) ;
pawn_shop.c | 168 | sizeof(cre) >
pawn_shop.c | 170 | move( "/room/rubbish" ) ;
pawn_shop.c | 174 | sizeof(cre) >
pawn_shop.c | 180 | query_property( "virtual name" ) ;
pawn_shop.c | 182 | base_name( ob ) ;
pawn_shop.c | 189 | file_name( TO ) ) ;
pawn_shop.c | 195 | filter_array( in_obs, (: $1->query_keep() :) ) ;
pawn_shop.c | 199 | sizeof(kept) >
pawn_shop.c | 205 | filter( in_obs, (: $1->query_holder() || $1->query_worn_by() :) ) ;
pawn_shop.c | 209 | sizeof(worn) > 1 ? "them" : "it" ) + ".\n" ) ;
pawn_shop.c | 214 | filter( in_obs, (: $1->query_property( "stolen" ) :) ) ;
pawn_shop.c | 218 | sizeof(stolen) >
pawn_shop.c | 224 | filter( in_obs, (: $1->do_not_sell() || TO->do_not_buy($1) :) ) ;
pawn_shop.c | 227 | query_multiple_short( nobuy ) + ".\n" ) ;
pawn_shop.c | 232 | filter( in_obs, (: $1->query_value() < TO->query_min_amount() :) ) ;
pawn_shop.c | 236 | sizeof(cheap) >
pawn_shop.c | 243 | query_value() > TO->query_max_amount() :) ) ;
pawn_shop.c | 247 | sizeof(expensive) >
pawn_shop.c | 254 | add_failed_mess( "You have nothing to pawn.\n" ) ;
pawn_shop.c | 271 | scaled_value( ob->query_value() ) ;
pawn_shop.c | 275 | clone_object( RECEIPT ) ;
pawn_shop.c | 282 | setup_receipt( ob ) ;
pawn_shop.c | 283 | set_shop_path( TO ) ;
pawn_shop.c | 284 | set_item_value( value ) ;
pawn_shop.c | 285 | set_expiry_time( time() + query_pawn_ttl() ) ;
pawn_shop.c | 286 | setup_read_mess( _shop_language );
pawn_shop.c | 287 | move( TP ) ;
pawn_shop.c | 288 | move( "/room/rubbish" ) ;
pawn_shop.c | 292 | query_property( "place" ) ;
pawn_shop.c | 298 | create_money_array(total, place);
pawn_shop.c | 299 | clone_object(MONEY_OBJECT);
pawn_shop.c | 306 | set_money_array(m_array);
pawn_shop.c | 312 | move( TO ) ;
pawn_shop.c | 316 | money_string( m_array ), "" ) ;
bank_franchise.c | 22 | create();
bank_franchise.c | 38 | query_main_branch_owner();
bank_franchise.c | 70 | copy(_notes);
bank_franchise.c | 98 | add_failed_mess("The bank is not open for creating credit notes.\n");
bank_franchise.c | 102 | query_total_difference() - query_outstanding_credit_value();
bank_franchise.c | 110 | clone_object(BANK_CREDIT_NOTE);
bank_franchise.c | 111 | set_credit_num(++_credit_num);
bank_franchise.c | 112 | set_franchise(query_franchise());
bank_franchise.c | 113 | set_bank_name(query_bank_name());
bank_franchise.c | 114 | set_amount(query_total_difference());
bank_franchise.c | 115 | add_property("place", query_money_place());
bank_franchise.c | 116 | setup_read_messages();
bank_franchise.c | 117 | move(this_player());
bank_franchise.c | 124 | time()) });
bank_franchise.c | 125 | event_save(this_object());
bank_franchise.c | 126 | adjust_total_difference(-query_total_difference());
bank_franchise.c | 127 | add_succeeded_mess("$N $V " + ob->a_short() + ".\n");
bank_franchise.c | 138 | add_failed_mess("The bank is not open for listing credit notes.\n");
bank_franchise.c | 142 | query_money_place();
bank_franchise.c | 145 | add_failed_mess("No credit notes to list.\n");
bank_franchise.c | 157 | write("$P$Credit Notes$P$" + ret);
bank_franchise.c | 168 | add_failed_mess("The bank is not open for listing credit notes.\n");
bank_franchise.c | 172 | sizeof(_notes);
bank_franchise.c | 175 | query_money_place();
bank_franchise.c | 181 | money_value_string(note->amt, place) + "\n", "" }));
bank_franchise.c | 186 | add_failed_mess("Unable to find credit note #" + id + ".\n");
bank_franchise.c | 198 | sizeof(_notes);
bank_franchise.c | 217 | sizeof(_notes);
bank_franchise.c | 219 | adjust_total_difference(-_notes[i]->amt);
bank_franchise.c | 224 | event_save(this_object());
bank_franchise.c | 230 | init();
bank_franchise.c | 231 | add_command("create", "credit note");
bank_franchise.c | 232 | add_command("list", "credit notes");
bank_franchise.c | 233 | add_command("recind", "credit note <number'id'>", (: do_recind($4[0]) :));
object_expressions.c | 13 | query_owner();
object_expressions.c | 14 | query_allowed();
object_expressions.c | 16 | add_allowed_function(string name, int type, int* args, function value);
object_expressions.c | 17 | add_allowed_variable(string name, int type, function value);
object_expressions.c | 26 | query_base_value();
object_expressions.c | 41 | query_value();
object_expressions.c | 57 | query_cond();
object_expressions.c | 58 | query_max_cond();
object_expressions.c | 96 | query_enchant();
object_expressions.c | 97 | query_max_enchant();
object_expressions.c | 138 | filter(obs, (: $1->query_property("stolen") :));
object_expressions.c | 145 | query_classification();
object_expressions.c | 146 | filter(obs, (: sizeof($1->effects_matching($2)) :), classification);
object_expressions.c | 173 | lower_case($1->query_spell_name()) == lower_case($2)) :), spell_name);
object_expressions.c | 179 | return ({ });
object_expressions.c | 185 | lower_case($1->query_ritual_name()) == lower_case($2)) :), ritual_name );
object_expressions.c | 206 | filter(all_inventory(ob), (: $1->query_liquid() :));
object_expressions.c | 211 | query_weight() * 100 / ob->query_max_weight();
object_expressions.c | 225 | query_water_volume() * 100 / ob->query_max_volume();
object_expressions.c | 246 | query_charges();
object_expressions.c | 248 | query_static_auto_load();
object_expressions.c | 267 | explode(match, ",");
object_expressions.c | 283 | explode(match, ",");
object_expressions.c | 291 | return ({ });
object_expressions.c | 293 | all_inventory(ob);
craft_shop_category.c | 31 | do_list_category(string category);
craft_shop_category.c | 32 | do_change_category(object* obs, string category);
craft_shop_category.c | 35 | set_extra_sell_check( (: setup_category :) );
craft_shop_category.c | 39 | create();
craft_shop_category.c | 45 | init();
craft_shop_category.c | 48 | file_name(query_controller()->query_sell_list());
craft_shop_category.c | 51 | do_change_category($1, $4[1]) :));
craft_shop_category.c | 53 | add_command("list", "<string'category'>", (: do_list_category($4[0]) :));
craft_shop_category.c | 62 | query_controller()->add_category_accepted(category);
craft_shop_category.c | 71 | query_controller()->set_category_description(category, description);
craft_shop_category.c | 80 | query_controller()->set_category_information(category, information);
craft_shop_category.c | 88 | query_controller()->remove_category_accepted(category);
craft_shop_category.c | 94 | add_shop_category(_default_category);
craft_shop_category.c | 108 | set_controller(name);
craft_shop_category.c | 109 | setup_default_category();
craft_shop_category.c | 125 | query_controller()->query_sell_list_obs();
craft_shop_category.c | 128 | query_controller()->change_category_of_shop_object(ob, _default_category);
craft_shop_category.c | 141 | query_controller()->query_categories();
craft_shop_category.c | 170 | this_player()->query_name());
craft_shop_category.c | 172 | evaluate(func, value, name, sellables, cat);
craft_shop_category.c | 174 | query_controller()->query_categories();
craft_shop_category.c | 178 | evaluate(func, value, name, sellables, categories[0]);
craft_shop_category.c | 180 | write("Categories:\n");
craft_shop_category.c | 181 | sizeof(categories);
craft_shop_category.c | 182 | write(sprintf("%c) %s\n", i + 'A', categories[i]));
craft_shop_category.c | 184 | write("Which category do you wish to put '" + name + "' into? ");
craft_shop_category.c | 201 | evaluate(func, value, name, sellables, category);
craft_shop_category.c | 221 | write("Ok, stopping the sell.\n");
craft_shop_category.c | 226 | lower_case(category);
craft_shop_category.c | 229 | write("Sorry, " + category + " is out of range.  Try again.\n");
craft_shop_category.c | 230 | write("Which category do you wish to put '" + name + "' into? ");
craft_shop_category.c | 243 | query_real_category_name(category);
craft_shop_category.c | 245 | write("Sorry, " + category + " is not a category.\n");
craft_shop_category.c | 246 | write("Which category do you wish to put '" + name + "' into? ");
craft_shop_category.c | 258 | setup_category(func, value, name, sellables);
craft_shop_category.c | 265 | complete_cat_sale(value, name, sellables, real_category, func);
craft_shop_category.c | 288 | query_real_category_name(category);
craft_shop_category.c | 292 | add_failed_mess("The category " + category + " does not exist.\n");
craft_shop_category.c | 296 | query_controller()->query_category_information(list);
craft_shop_category.c | 298 | query_controller()->query_sell_list_obs();
craft_shop_category.c | 300 | add_failed_mess("The shop is empty.\n", ({ }));
craft_shop_category.c | 304 | query_property("place");
craft_shop_category.c | 309 | filter(obs, (: query_controller()->query_category_of_shop_object($1)  == $2:), list );
craft_shop_category.c | 315 | unique_array(obs, (: query_controller()->query_id_of_shop_object($1) :));
craft_shop_category.c | 318 | query_controller()->query_id_of_shop_object($2[0])) :) );
craft_shop_category.c | 326 | write("$P$Shop list" + list + "$P$" + ret);
craft_shop_category.c | 327 | add_succeeded_mess( ({ "", "$N browses through the inventory.\n" }) );
craft_shop_category.c | 351 | query_controller()->query_sell_list_obs();
craft_shop_category.c | 353 | add_failed_mess("The shop is empty.\n", ({ }));
craft_shop_category.c | 357 | query_property("place");
craft_shop_category.c | 362 | query_controller()->query_categories();
craft_shop_category.c | 363 | unique_array(obs, (: query_controller()->query_category_of_shop_object($1) :), 12 );
craft_shop_category.c | 370 | query_default_category());
craft_shop_category.c | 372 | query_default_category();
craft_shop_category.c | 374 | query_controller()->query_category_of_shop_object(obs[0]);
craft_shop_category.c | 375 | query_controller()->query_category_of_shop_object(obs[0]) });
craft_shop_category.c | 376 | query_controller()->query_category_description(cat);
craft_shop_category.c | 378 | unique_array(obs, (: query_controller()->query_id_of_shop_object($1) :));
craft_shop_category.c | 379 | unique_array(obs, (: $1->query_short() :));
craft_shop_category.c | 381 | sizeof(morestuff)>
craft_shop_category.c | 387 | if (sizeof(categories) >
craft_shop_category.c | 396 | write("$P$Shop list$P$" + ret);
craft_shop_category.c | 397 | add_succeeded_mess( ({ "", "$N browses through the inventory.\n" }) );
craft_shop_category.c | 409 | filter(obs, (: $1->short() == $2->short() :), obs[0]);
craft_shop_category.c | 417 | add_failed_mess("You do not own $I.\n", obs);
craft_shop_category.c | 421 | query_real_category_name(new_category);
craft_shop_category.c | 424 | add_failed_mess("You must choose a category that exists.\n");
craft_shop_category.c | 434 | add_failed_mess("Unable to change to category " + new_category + ".\n", obs);
pub.c | 47 | add_hidden_object(object ob);
pub.c | 60 | add_menu_alias( mixed alias, string actual );
pub.c | 61 | calc_standard_aliases( string *aliases );
pub.c | 62 | do_buy( object *obs, string dir, string indir, mixed *args );
pub.c | 63 | query_discount( object ob );
pub.c | 64 | make_counter();
pub.c | 68 | create();
pub.c | 81 | clone_object( PUB_MENU_FILE );
pub.c | 82 | set_pub( this_object() );
pub.c | 83 | add_hidden_object( _menu_object );
pub.c | 85 | make_counter();
pub.c | 91 | this_player()->add_command( "buy", this_object(), "<string>" );
pub.c | 95 | do_buy( $1, $2, $3, $4 ) :) );
pub.c | 98 | do_buy( $1, $2, $3, $4 ) :) );
pub.c | 194 | new( class menu_item );
pub.c | 205 | add_menu_alias( lower_case( name ), name );
pub.c | 209 | explode( lower_case( name ), " " );
pub.c | 213 | calc_standard_aliases( adjectives );
pub.c | 216 | add_menu_alias( implode( ({ alias, noun }), " " ), name );
pub.c | 226 | return ({ 0 });
pub.c | 229 | return ({ array[0], 0 });
pub.c | 231 | calc_standard_aliases( array[0..sizeof( array ) - 2] );
pub.c | 233 | sizeof( aliases );
pub.c | 236 | sizeof( array ) - 1] });
pub.c | 237 | implode( new_alias, " " ) });
pub.c | 291 | map_delete( _menu_items, name );
pub.c | 301 | this_object()->query_property( "place" );
pub.c | 306 | sizeof(items);
pub.c | 322 | keys( _menu_items );
pub.c | 324 | sizeof(items);
pub.c | 341 | query_items_of_type( type );
pub.c | 350 | string_menu( items );
pub.c | 351 | sprintf( "%-=*s\n", (int)this_player()->query_cols(), str );
pub.c | 375 | string_menu_of_type( PUB_APPETISER );
pub.c | 376 | string_menu_of_type( PUB_MAINCOURSE );
pub.c | 377 | string_menu_of_type( PUB_DESSERT );
pub.c | 378 | string_menu_of_type( PUB_ALCOHOL );
pub.c | 379 | string_menu_of_type( PUB_SOFTDRINK );
pub.c | 380 | string_menu_of_type( PUB_HOTDRINK );
pub.c | 489 | add_menu_alias( "lancre ale", "Ale from Lancre" );
pub.c | 500 | add_menu_alias(bing, actual);
pub.c | 527 | add_menu_alias( alias, actual );
pub.c | 559 | map_delete( _menu_aliases, alias );
pub.c | 606 | clone_object( _menu_items[name]->container );
pub.c | 615 | this_object()->create_item( _menu_items[name]->item );
pub.c | 617 | clone_object( _menu_items[name]->item );
pub.c | 620 | request_item( _menu_items[name]->item, 100 );
pub.c | 625 | set_amount( _menu_items[name]->volume );
pub.c | 631 | query_volume() );
pub.c | 637 | the_short() + ".  Please file a bug report.\n" );
pub.c | 638 | move( "/room/rubbish" );
pub.c | 679 | add_failed_mess( "Sorry, " + str + " is not on the menu.\n" );
pub.c | 686 | broadcast_shop_event(PUB_EVENT_NOT_OPEN, this_player());
pub.c | 691 | this_player() });
pub.c | 706 | query_discount( this_player() );
pub.c | 707 | this_object()->query_property( "place" );
pub.c | 711 | this_player()->query_value_in( place );
pub.c | 713 | this_player()->query_value_in( "default" );
pub.c | 721 | create_real_object( str );
pub.c | 735 | move( this_object() );
pub.c | 746 | add_succeeded_mess( this_object(), "", ({ }) );
pub.c | 755 | add_a(str) }) );
pub.c | 767 | sizeof( deadpeople ) >
pub.c | 777 | query_multiple_short( failedpeople, "one" ) + ".\n" );
pub.c | 785 | query_multiple_short( poorpeople, "one" ) + ".\n" );
pub.c | 797 | dest_me();
pub.c | 838 | clone_object( PUB_COUNTER_FILE );
pub.c | 839 | add_hidden_object( ob );
player_craft_shop_base.c | 148 | confirm_approval(string answer, class approval_obs approve, int final_cost);
player_craft_shop_base.c | 149 | variable_objects(string seller, int cost, object* ob);
player_craft_shop_base.c | 150 | variable_sale_cost(string seller, int cost, object* ob, string name, string category);
player_craft_shop_base.c | 151 | variable_sale_name(string seller, int cost, object* ob, string name, string category);
player_craft_shop_base.c | 152 | variable_sale_category(string seller, int cost, object* ob, string name, string category);
player_craft_shop_base.c | 153 | function_inventory_number(string short, string seller, int cost, object* ob);
player_craft_shop_base.c | 159 | query_owner();
player_craft_shop_base.c | 160 | is_allowed(string person);
player_craft_shop_base.c | 161 | event_save(object thing);
player_craft_shop_base.c | 162 | is_open_for(string type, string name);
player_craft_shop_base.c | 176 | new(class approval);
player_craft_shop_base.c | 197 | time();
player_craft_shop_base.c | 209 | new(class weekly_stats);
player_craft_shop_base.c | 216 | set_cut(100);
player_craft_shop_base.c | 218 | create();
player_craft_shop_base.c | 219 | create();
player_craft_shop_base.c | 220 | set_always_ask_price(1);
player_craft_shop_base.c | 231 | set_expression_type("shop");
player_craft_shop_base.c | 232 | create();
player_craft_shop_base.c | 233 | create();
player_craft_shop_base.c | 234 | set_no_royalty_commands(1);
player_craft_shop_base.c | 248 | is_allowed(person);
player_craft_shop_base.c | 318 | query_controller()->query_royalty(person);
player_craft_shop_base.c | 326 | query_royalty(query_owner());
player_craft_shop_base.c | 335 | query_controller()->adjust_royalty(person, amount);
player_craft_shop_base.c | 343 | adjust_royalty(query_owner(), amount);
player_craft_shop_base.c | 383 | lower_case(name);
player_craft_shop_base.c | 384 | sizeof(query_controller()->query_owner_sellables(name));
player_craft_shop_base.c | 387 | sizeof(bing->saved);
player_craft_shop_base.c | 428 | lower_case(seller);
player_craft_shop_base.c | 448 | query_short();
player_craft_shop_base.c | 573 | is_open_for("use", person));
player_craft_shop_base.c | 586 | if (sizeof(query_approval_list(0)) + sizeof(query_approval_list(1)) >
player_craft_shop_base.c | 587 | add_failed_mess("Unable to sell things, the shop is full.\n");
player_craft_shop_base.c | 593 | add_failed_mess("The shop is currently closed.\n");
player_craft_shop_base.c | 604 | set_controller(name);
player_craft_shop_base.c | 605 | query_controller()->set_dont_use_name(1);
player_craft_shop_base.c | 617 | query_number_of_items_listed(name) + sizeof(obs);
player_craft_shop_base.c | 633 | if (sizeof(filter(obs, (: $1->query_property("money") :))) >
player_craft_shop_base.c | 634 | add_failed_mess("You cannot sell money.\n");
player_craft_shop_base.c | 641 | sizeof(query_controller()->query_sell_list_obs());
player_craft_shop_base.c | 642 | if (num + sizeof(obs) >
player_craft_shop_base.c | 681 | return ({ 0, 0 });
player_craft_shop_base.c | 684 | query_short();
player_craft_shop_base.c | 712 | return ({ max_accept, max_deny });
player_craft_shop_base.c | 728 | query_maximum_sale_value_both(person, ob);
player_craft_shop_base.c | 748 | query_maximum_sale_value_both(seller, ob);
player_craft_shop_base.c | 758 | query_property("place");
player_craft_shop_base.c | 765 | money_value_string(max[0], place);
player_craft_shop_base.c | 772 | money_value_string(max[1], place);
player_craft_shop_base.c | 792 | catch(auto_load = this_player()->create_auto_load(({ ob })));
player_craft_shop_base.c | 795 | catch(auto_load = PLAYER_OB->create_auto_load(({ ob })));
player_craft_shop_base.c | 799 | create_auto_load(({ ob }));
player_craft_shop_base.c | 804 | printf("Error!  Dammit!\n");
player_craft_shop_base.c | 813 | while (tmp);
player_craft_shop_base.c | 835 | load_auto_load_to_array(auto_load, player);
player_craft_shop_base.c | 837 | this_player()->load_auto_load_to_array(auto_load, player);
player_craft_shop_base.c | 839 | load_auto_load_to_array(auto_load, player);
player_craft_shop_base.c | 858 | create_real_auto_load_object(id, player);
player_craft_shop_base.c | 860 | add_effect("/std/effects/object/no_save");
player_craft_shop_base.c | 861 | add_property(PLAYER_CRAFT_SHOP_CHECK_PROP, ({ approve, id }));
player_craft_shop_base.c | 862 | member_array(id, approve->saved);
player_craft_shop_base.c | 864 | event_save(this_object());
player_craft_shop_base.c | 887 | add_property("destroy checkout object", 1, 2);
player_craft_shop_base.c | 891 | debug_printf("Destroying the checkout object %O\n", ob);
player_craft_shop_base.c | 895 | effects_matching("/std/effects/object/no_save"->query_classification());
player_craft_shop_base.c | 897 | delete_effect(id);
player_craft_shop_base.c | 902 | member_array(id, approve->saved);
player_craft_shop_base.c | 905 | remove_property(PLAYER_CRAFT_SHOP_CHECK_PROP);
player_craft_shop_base.c | 906 | create_auto_load_file(ob, id);
player_craft_shop_base.c | 907 | event_save(this_object());
player_craft_shop_base.c | 922 | query_property(PLAYER_CRAFT_SHOP_CHECK_PROP);
player_craft_shop_base.c | 949 | create_auto_load_file(ob, 0) });
player_craft_shop_base.c | 951 | query_short() });
player_craft_shop_base.c | 956 | event_save(this_object());
player_craft_shop_base.c | 963 | new(class approval_obs);
player_craft_shop_base.c | 970 | time();
player_craft_shop_base.c | 973 | create_auto_load_file(ob, 0) });
player_craft_shop_base.c | 974 | query_short() });
player_craft_shop_base.c | 978 | allocate(sizeof(stuff->saved));
player_craft_shop_base.c | 985 | event_save(this_object());
player_craft_shop_base.c | 998 | sizeof(_approved);
player_craft_shop_base.c | 1010 | event_save(this_object());
player_craft_shop_base.c | 1014 | sizeof(_waiting_for_approval);
player_craft_shop_base.c | 1026 | event_save(this_object());
player_craft_shop_base.c | 1047 | query_multiple_short(objects, 0, 1);
player_craft_shop_base.c | 1049 | new(class shop_transaction);
player_craft_shop_base.c | 1050 | time();
player_craft_shop_base.c | 1058 | event_save(this_object());
player_craft_shop_base.c | 1073 | query_property("place");
player_craft_shop_base.c | 1078 | money_value_string(trans->amount, place);
player_craft_shop_base.c | 1119 | query_property("place");
player_craft_shop_base.c | 1135 | query_multiple_short(sellable) + " to " + the_short() + ".\n");
player_craft_shop_base.c | 1164 | the_short() + ".\n");
player_craft_shop_base.c | 1170 | the_short() + ".\n");
player_craft_shop_base.c | 1180 | sprintf("%c%c", 'A' + (pos / 26), 'A' + (pos % 26));
player_craft_shop_base.c | 1193 | lower_case(letter);
player_craft_shop_base.c | 1199 | if (strlen(letter) >
player_craft_shop_base.c | 1204 | return (letter[0] - 'a') * 26 + (letter[1] - 'a');
player_craft_shop_base.c | 1221 | query_number_value(name[1..]);
player_craft_shop_base.c | 1223 | query_number_value(name);
player_craft_shop_base.c | 1226 | add_failed_mess(name + " is not a valid number.\n");
player_craft_shop_base.c | 1232 | add_failed_mess("There is nothing in the approval list currently.\n");
player_craft_shop_base.c | 1267 | new(class approval);
player_craft_shop_base.c | 1277 | time();
player_craft_shop_base.c | 1279 | parse_boolean_string("false");
player_craft_shop_base.c | 1290 | adjust_royalty(query_owner(), value);
player_craft_shop_base.c | 1291 | sizeof(obs);
player_craft_shop_base.c | 1304 | new(class shop_stats);
player_craft_shop_base.c | 1315 | new(class item_stats);
player_craft_shop_base.c | 1337 | filter(deep_inventory(ob), (: is_checkout_object($1) :));
player_craft_shop_base.c | 1347 | call_out("verify_destroy_checkout_object", 2, ob);
player_craft_shop_base.c | 1353 | return ({ });
player_craft_shop_base.c | 1373 | check_for_checkout(ob);
player_craft_shop_base.c | 1378 | move("/room/rubbish");
player_craft_shop_base.c | 1384 | check_for_checkout(ob);
player_craft_shop_base.c | 1395 | filter(deep_inventory(this_object()), (: is_checkout_object($1) :));
player_craft_shop_base.c | 1398 | destroy_checkout_object(ob);
player_craft_shop_base.c | 1408 | dest_me();
player_craft_shop_base.c | 1418 | is_helper(this_player()->query_name());
player_craft_shop_base.c | 1427 | add_failed_mess("You cannot buy anything at this shop.\n");
player_craft_shop_base.c | 1430 | do_buy(obs, force);
player_craft_shop_base.c | 1444 | query_property("place");
player_craft_shop_base.c | 1451 | query_maximum_sale_value_both(this_player()->query_name(), ob);
player_craft_shop_base.c | 1455 | money_value_string(stuff[0], place);
player_craft_shop_base.c | 1462 | money_value_string(stuff[1], place);
player_craft_shop_base.c | 1466 | write("$P$Check Sell$P$" + ret);
player_craft_shop_base.c | 1467 | add_succeeded_mess(({ "", "$N checks the sale of $I.\n" }), obs);
player_craft_shop_base.c | 1491 | query_property("place");
player_craft_shop_base.c | 1497 | is_helper(this_player()->query_name());
player_craft_shop_base.c | 1517 | sizeof(filter(approve->checkout, (: $1 :)));
player_craft_shop_base.c | 1527 | sizeof(approve->saved);
player_craft_shop_base.c | 1529 | create_real_auto_load_object(fluff, this_player()) });
player_craft_shop_base.c | 1532 | query_short();
player_craft_shop_base.c | 1533 | move("/room/rubbish");
player_craft_shop_base.c | 1537 | query_controller()->query_short_of_shop_object($1) :));
player_craft_shop_base.c | 1546 | lower_case(approve->name)] = sizeof(result);
player_craft_shop_base.c | 1573 | dest_me();
player_craft_shop_base.c | 1577 | add_failed_mess("No items to approve at the moment.\n");
player_craft_shop_base.c | 1581 | write("$P$Approval list$P$The current approval items are:\n" + ret);
player_craft_shop_base.c | 1604 | query_approval_class(name);
player_craft_shop_base.c | 1617 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop_base.c | 1622 | return_all_checkedout_objects();
player_craft_shop_base.c | 1625 | sizeof(approve->saved);
player_craft_shop_base.c | 1628 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 1630 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 1638 | query_property("place");
player_craft_shop_base.c | 1646 | sizeof(checkout);
player_craft_shop_base.c | 1647 | make_new_amount( value, place);
player_craft_shop_base.c | 1648 | move(this_player());
player_craft_shop_base.c | 1649 | sizeof(checkout);
player_craft_shop_base.c | 1664 | remove_from_approval_list(approve);
player_craft_shop_base.c | 1667 | add_succeeded_mess("$N return$s $I.\n", map(ok, (: $1->poss_short() :)));
player_craft_shop_base.c | 1671 | map(ok, (: $1->poss_short() :)));
player_craft_shop_base.c | 1693 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop_base.c | 1697 | query_approval_class(name);
player_craft_shop_base.c | 1702 | query_property("place");
player_craft_shop_base.c | 1713 | sizeof(query_controller()->query_sell_list_obs());
player_craft_shop_base.c | 1714 | if (num + sizeof(approve->saved) >
player_craft_shop_base.c | 1720 | sizeof(obs);
player_craft_shop_base.c | 1729 | value_from_string(money_str, place);
player_craft_shop_base.c | 1737 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop_base.c | 1744 | input_to("confirm_approval", 0, approve, final_cost);
player_craft_shop_base.c | 1745 | add_succeeded_mess( ({ "", "$N approves something in the shop.\n" }) );
player_craft_shop_base.c | 1750 | confirm_approval("y", approve, final_cost);
player_craft_shop_base.c | 1758 | new(class weekly_stats);
player_craft_shop_base.c | 1781 | query_property("place");
player_craft_shop_base.c | 1845 | new(class weekly_stats);
player_craft_shop_base.c | 1854 | new(class item_stats);
player_craft_shop_base.c | 1860 | this_player()->query_name();
player_craft_shop_base.c | 1862 | new(class helper_stats);
player_craft_shop_base.c | 1885 | new(class weekly_stats);
player_craft_shop_base.c | 1890 | this_player()->query_name();
player_craft_shop_base.c | 1892 | new(class helper_stats);
player_craft_shop_base.c | 1911 | write("Ok, canceled the approval of the item.\n");
player_craft_shop_base.c | 1915 | query_property("place");
player_craft_shop_base.c | 1926 | sizeof(approve->saved);
player_craft_shop_base.c | 1929 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 1931 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 1947 | remove_property("dropped");
player_craft_shop_base.c | 1952 | sizeof(obs) + sizeof(checkout));
player_craft_shop_base.c | 1955 | remove_from_approval_list(approve);
player_craft_shop_base.c | 1956 | adjust_royalty(lower_case(approve->seller), cost);
player_craft_shop_base.c | 1960 | if (query_owners_money() >
player_craft_shop_base.c | 1961 | if (query_owners_money() >
player_craft_shop_base.c | 1962 | adjust_owners_money(-cost);
player_craft_shop_base.c | 1965 | query_owners_money();
player_craft_shop_base.c | 1966 | adjust_owners_money(-query_owners_money());
player_craft_shop_base.c | 1970 | if (this_player()->query_value_in(place) >
player_craft_shop_base.c | 1971 | this_player()->query_value_in(place);
player_craft_shop_base.c | 1979 | this_player()->pay_money(MONEY_HAND->create_money_array(bing, place), place);
player_craft_shop_base.c | 1983 | adjust_owners_money(-cost);
player_craft_shop_base.c | 1988 | money_value_string(approve->value, place) + ".\n");
player_craft_shop_base.c | 1989 | add_succeeded_mess( ({ "", "$N approves something in the shop.\n" }) );
player_craft_shop_base.c | 1992 | sizeof(obs) + sizeof(checkout));
player_craft_shop_base.c | 2025 | query_approval_class(name);
player_craft_shop_base.c | 2034 | do_return(name);
player_craft_shop_base.c | 2039 | add_failed_mess("You're not allowed to reject items.\n");
player_craft_shop_base.c | 2044 | if (sizeof(filter(approve->checkout, (: $1 :))) >
player_craft_shop_base.c | 2049 | return_all_checkedout_objects();
player_craft_shop_base.c | 2071 | sizeof(approve->saved);
player_craft_shop_base.c | 2076 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 2078 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 2083 | filter(obs, (: $1 && objectp($1) :));
player_craft_shop_base.c | 2084 | filter(checkout, (: $1 && objectp($1) :));
player_craft_shop_base.c | 2102 | sizeof(checkout));
player_craft_shop_base.c | 2113 | inform_of_rejected_item(this_player()->query_name(), approve);
player_craft_shop_base.c | 2115 | write("Nothing to give back or send off.\n");
player_craft_shop_base.c | 2120 | find_player(lower_case(approve->seller));
player_craft_shop_base.c | 2143 | write("You reject the item.\n");
player_craft_shop_base.c | 2146 | add_failed_mess("Eeek!  No parcel post defined on this room.\n");
player_craft_shop_base.c | 2149 | add_failed_mess("Eeek!  Parcel post cannot be loaded.\n");
player_craft_shop_base.c | 2159 | query_parcel_post()->deposit_parcel(obs, lower_case(approve->seller), 1);
player_craft_shop_base.c | 2164 | move("/room/rubbish");
player_craft_shop_base.c | 2166 | write("Still sending the message to the person.\n");
player_craft_shop_base.c | 2173 | move("/room/rubbish");
player_craft_shop_base.c | 2178 | move("/room/rubbish");
player_craft_shop_base.c | 2182 | move("/room/rubbish");
player_craft_shop_base.c | 2205 | event_save(this_object());
player_craft_shop_base.c | 2212 | remove_from_approval_list(approve);
player_craft_shop_base.c | 2214 | add_succeeded_mess(({ "", "$N reject$s a sellable object.\n" }));
player_craft_shop_base.c | 2222 | lower_case(str);
player_craft_shop_base.c | 2228 | input_to("check_reject_note", 0, ob_str, name);
player_craft_shop_base.c | 2232 | write("ok, bye then!\n");
player_craft_shop_base.c | 2237 | this_object(), 0, name);
player_craft_shop_base.c | 2243 | write("Aborted.\n");
player_craft_shop_base.c | 2246 | write("Sending to " + name + ".\n");
player_craft_shop_base.c | 2264 | query_approval_class(name);
player_craft_shop_base.c | 2273 | do_return(name);
player_craft_shop_base.c | 2278 | add_failed_mess("You are not allowed to reject items.\n");
player_craft_shop_base.c | 2289 | query_property("place");
player_craft_shop_base.c | 2299 | create_real_auto_load_object(pos, this_player()) });
player_craft_shop_base.c | 2310 | long();
player_craft_shop_base.c | 2311 | query_readable_message();
player_craft_shop_base.c | 2313 | query_read_short(this_player());
player_craft_shop_base.c | 2320 | query_readable_message();
player_craft_shop_base.c | 2324 | move("/room/rubbish");
player_craft_shop_base.c | 2326 | write("$P$Browse list$P$" + ret);
player_craft_shop_base.c | 2328 | add_succeeded_mess("$N browse$s an item waiting for approval.\n");
player_craft_shop_base.c | 2344 | query_approval_class(name);
player_craft_shop_base.c | 2354 | do_return(name);
player_craft_shop_base.c | 2359 | add_failed_mess("You are not allowed to reject items.\n");
player_craft_shop_base.c | 2375 | sizeof(approve->saved);
player_craft_shop_base.c | 2378 | create_checkout_object(approve, pos, this_player());
player_craft_shop_base.c | 2380 | write("Unable to create " + pos + approve->name + ", weird...\n");
player_craft_shop_base.c | 2385 | create_checkout_object(approve, pos, this_player()) });
player_craft_shop_base.c | 2389 | move("/room/rubbish");
player_craft_shop_base.c | 2393 | if (sizeof(checkout) >
player_craft_shop_base.c | 2394 | add_failed_mess("$I are already checked out.\n", checkout);
player_craft_shop_base.c | 2396 | add_failed_mess("$I is already checked out.\n", checkout);
player_craft_shop_base.c | 2405 | destroy_checkout_object(ob);
player_craft_shop_base.c | 2418 | add_succeeded_mess("$N check$s out $I.\n", obs);
player_craft_shop_base.c | 2434 | destroy_checkout_object(ob);
player_craft_shop_base.c | 2440 | add_failed_mess("None of $I have been checked out.\n", obs);
player_craft_shop_base.c | 2444 | add_succeeded_mess("$N check$s $I back in.\n", ok);
player_craft_shop_base.c | 2458 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop_base.c | 2468 | query_approval_class(name);
player_craft_shop_base.c | 2473 | add_succeeded_mess( ({ "", "$N messes with the approval items.\n" }));
player_craft_shop_base.c | 2474 | event_save(this_object());
player_craft_shop_base.c | 2487 | add_failed_mess("You are not allowed to approve items.\n");
player_craft_shop_base.c | 2491 | query_approval_class(name);
player_craft_shop_base.c | 2502 | query_real_category_name(new_category);
player_craft_shop_base.c | 2505 | add_failed_mess("You must choose a category that exists.\n");
player_craft_shop_base.c | 2513 | event_save(this_object());
player_craft_shop_base.c | 2525 | query_property("place");
player_craft_shop_base.c | 2531 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2541 | value_from_string(cost, place);
player_craft_shop_base.c | 2543 | event_save(this_object());
player_craft_shop_base.c | 2566 | query_property("place");
player_craft_shop_base.c | 2572 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2582 | value_from_string(cost, place);
player_craft_shop_base.c | 2592 | event_save(this_object());
player_craft_shop_base.c | 2609 | query_property("place");
player_craft_shop_base.c | 2615 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2625 | value_from_string(cost, place);
player_craft_shop_base.c | 2635 | event_save(this_object());
player_craft_shop_base.c | 2656 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2666 | query_property("place");
player_craft_shop_base.c | 2671 | value_from_string(money, place);
player_craft_shop_base.c | 2673 | add_failed_mess("The value " + money + " is invalid.\n");
player_craft_shop_base.c | 2681 | strip_quotes(item);
player_craft_shop_base.c | 2682 | strip_quotes(list_name);
player_craft_shop_base.c | 2692 | money_value_string(value, place) + ".\n");
player_craft_shop_base.c | 2697 | value_from_string(money_str, place);
player_craft_shop_base.c | 2699 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop_base.c | 2704 | new(class approval_item);
player_craft_shop_base.c | 2711 | query_property("place");
player_craft_shop_base.c | 2713 | event_save(this_object());
player_craft_shop_base.c | 2744 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2754 | query_property("place");
player_craft_shop_base.c | 2759 | value_from_string(money, place);
player_craft_shop_base.c | 2761 | add_failed_mess("The value " + money + " is invalid.\n");
player_craft_shop_base.c | 2766 | value_from_string(money_str, place);
player_craft_shop_base.c | 2768 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop_base.c | 2779 | strip_quotes(list_name);
player_craft_shop_base.c | 2781 | query_short();
player_craft_shop_base.c | 2790 | new(class approval_item);
player_craft_shop_base.c | 2799 | event_save(this_object());
player_craft_shop_base.c | 2832 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2842 | query_property("place");
player_craft_shop_base.c | 2847 | parse_money_string(expr);
player_craft_shop_base.c | 2849 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop_base.c | 2854 | value_from_string(money_str, place);
player_craft_shop_base.c | 2856 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop_base.c | 2865 | strip_quotes(item);
player_craft_shop_base.c | 2866 | strip_quotes(list_name);
player_craft_shop_base.c | 2868 | new(class approval_item);
player_craft_shop_base.c | 2875 | event_save(this_object());
player_craft_shop_base.c | 2902 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 2912 | parse_money_string(expr);
player_craft_shop_base.c | 2914 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop_base.c | 2919 | query_property("place");
player_craft_shop_base.c | 2920 | value_from_string(money_str, place);
player_craft_shop_base.c | 2922 | add_failed_mess(money_str + " is an invalid money value.\n");
player_craft_shop_base.c | 2930 | strip_quotes(list_name);
player_craft_shop_base.c | 2932 | query_short();
player_craft_shop_base.c | 2933 | new(class approval_item);
player_craft_shop_base.c | 2940 | event_save(this_object());
player_craft_shop_base.c | 2969 | is_helper(this_player()->query_name());
player_craft_shop_base.c | 2971 | query_property("place");
player_craft_shop_base.c | 3003 | query_short() + ").\n");
player_craft_shop_base.c | 3040 | write("$I$5=The item " + ob->the_short() + " will be denied sale.\n");
player_craft_shop_base.c | 3058 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 3068 | strip_quotes(item);
player_craft_shop_base.c | 3070 | add_failed_mess("The item " + item + " is not in the list.\n");
player_craft_shop_base.c | 3074 | map_delete(_automatic_approval->items, item);
player_craft_shop_base.c | 3075 | event_save(this_object());
player_craft_shop_base.c | 3093 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 3106 | query_short();
player_craft_shop_base.c | 3111 | map_delete(_automatic_approval->items, name);
player_craft_shop_base.c | 3114 | event_save(this_object());
player_craft_shop_base.c | 3137 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 3147 | parse_boolean_string(expression);
player_craft_shop_base.c | 3149 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop_base.c | 3154 | parse_money_string(value_str);
player_craft_shop_base.c | 3156 | add_failed_mess(query_last_expression_error() + ".\n");
player_craft_shop_base.c | 3161 | strip_quotes(list_name);
player_craft_shop_base.c | 3162 | new(class expression_type);
player_craft_shop_base.c | 3169 | event_save(this_object());
player_craft_shop_base.c | 3195 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 3205 | query_number_value(idstr);
player_craft_shop_base.c | 3207 | add_failed_mess("The id " + idstr + " is invalid.\n");
player_craft_shop_base.c | 3215 | event_save(this_object());
player_craft_shop_base.c | 3231 | add_failed_mess("You are not allowed to set automatic approval items.\n");
player_craft_shop_base.c | 3242 | add_failed_mess("The percentage to add must be greator than 0.\n");
player_craft_shop_base.c | 3271 | if (to_int(limit) >
player_craft_shop_base.c | 3272 | to_int(limit);
player_craft_shop_base.c | 3296 | lower_case(name);
player_craft_shop_base.c | 3299 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop_base.c | 3303 | to_int(value);
player_craft_shop_base.c | 3306 | new(class seller_information);
player_craft_shop_base.c | 3312 | map_delete(_sellers, name);
player_craft_shop_base.c | 3343 | lower_case(name);
player_craft_shop_base.c | 3346 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop_base.c | 3350 | lower_case(money);
player_craft_shop_base.c | 3354 | query_property("place");
player_craft_shop_base.c | 3359 | value_from_string(money, place);
player_craft_shop_base.c | 3369 | new(class seller_information);
player_craft_shop_base.c | 3375 | map_delete(_sellers, name);
player_craft_shop_base.c | 3411 | lower_case(name);
player_craft_shop_base.c | 3414 | add_failed_mess("The person " + name + " does not exist.\n");
player_craft_shop_base.c | 3418 | lower_case(money);
player_craft_shop_base.c | 3422 | query_property("place");
player_craft_shop_base.c | 3427 | value_from_string(money, place);
player_craft_shop_base.c | 3437 | new(class seller_information);
player_craft_shop_base.c | 3443 | map_delete(_sellers, name);
player_craft_shop_base.c | 3471 | lower_case(name);
player_craft_shop_base.c | 3478 | map_delete(_sellers, name);
player_craft_shop_base.c | 3479 | event_save(this_object());
player_craft_shop_base.c | 3499 | add_failed_mess("You are not allowed to see the status of this store.\n");
player_craft_shop_base.c | 3503 | query_property("place");
player_craft_shop_base.c | 3565 | limit (per item)");
player_craft_shop_base.c | 3566 | sort_array(keys(_sellers), 0);
player_craft_shop_base.c | 3572 | money_value_string(stuff->deny_value_limit, place):"disabled"));
player_craft_shop_base.c | 3616 | query_property("place");
player_craft_shop_base.c | 3629 | new(class approval_item);
player_craft_shop_base.c | 3632 | map_delete(_automatic_approval->items, str);
player_craft_shop_base.c | 3634 | sprintf("$I$10=   %-20s", "* " + str);
player_craft_shop_base.c | 3650 | money_value_string(approval->final_cost, place);
player_craft_shop_base.c | 3654 | query_expression_string(expr, 0);
player_craft_shop_base.c | 3661 | money_value_string(expr, place);
player_craft_shop_base.c | 3703 | new(class expression_type);
player_craft_shop_base.c | 3708 | event_save(this_object());
player_craft_shop_base.c | 3712 | query_expression_string(bing->value, 0);
player_craft_shop_base.c | 3748 | add_failed_mess("Cannot do that!\n");
player_craft_shop_base.c | 3751 | write("$P$Status$P$" + query_main_status(hint));
player_craft_shop_base.c | 3763 | add_failed_mess("Cannot do that!\n");
player_craft_shop_base.c | 3766 | write("$P$Status$P$" + query_expression_status(hint));
player_craft_shop_base.c | 3782 | the_short() + ".\n");
player_craft_shop_base.c | 3786 | if (query_owners_money() >
player_craft_shop_base.c | 3787 | add_failed_mess("There is no deficit here to pay off.\n");
player_craft_shop_base.c | 3791 | query_property("place");
player_craft_shop_base.c | 3796 | query_owners_money();
player_craft_shop_base.c | 3797 | if (this_player()->query_value_in(place) >
player_craft_shop_base.c | 3798 | adjust_royalty(query_owner(), cost);
player_craft_shop_base.c | 3800 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
player_craft_shop_base.c | 3801 | add_succeeded_mess("$N pay$s off the deficit in " + the_short() + ".\n");
player_craft_shop_base.c | 3817 | add_failed_mess("You are not allowed to add categories.\n");
player_craft_shop_base.c | 3822 | add_failed_mess("The category doesn't exists.\n");
player_craft_shop_base.c | 3826 | set_category_description(category, desc);
player_craft_shop_base.c | 3827 | add_succeeded_mess("$N set$s the description of " + category + ".\n");
player_craft_shop_base.c | 3837 | add_failed_mess("You are not allowed to add categories.\n");
player_craft_shop_base.c | 3842 | add_failed_mess("The category doesn't exists.\n");
player_craft_shop_base.c | 3846 | set_category_information(category, desc);
player_craft_shop_base.c | 3847 | add_succeeded_mess("$N set$s the description of " + category + ".\n");
player_craft_shop_base.c | 3857 | add_failed_mess("You are not allowed to add categories.\n");
player_craft_shop_base.c | 3862 | add_failed_mess("The category already exists.\n");
player_craft_shop_base.c | 3866 | add_shop_category(category);
player_craft_shop_base.c | 3867 | add_succeeded_mess("$N add$s a new category.\n");
player_craft_shop_base.c | 3880 | add_failed_mess("You are not allowed to remove categories.\n");
player_craft_shop_base.c | 3885 | query_real_category_name(category);
player_craft_shop_base.c | 3888 | add_failed_mess("The category " + old_cat + " does not exist.\n");
player_craft_shop_base.c | 3893 | add_failed_mess("You cannot remove the default category.\n");
player_craft_shop_base.c | 3898 | query_controller()->query_sell_list_obs();
player_craft_shop_base.c | 3899 | filter(obs, (: query_controller()->query_category_of_shop_object($1)  == $2:), category );
player_craft_shop_base.c | 3908 | the_short() + " (y/n)?");
player_craft_shop_base.c | 3909 | input_to("check_remove_category", 0, category);
player_craft_shop_base.c | 3910 | add_succeeded_mess(({ "", "$N removes a category from the shop.\n" }));
player_craft_shop_base.c | 3924 | add_failed_mess("You are not allowed to rename categories.\n");
player_craft_shop_base.c | 3928 | query_real_category_name(category);
player_craft_shop_base.c | 3931 | add_failed_mess("The category " + category + " does not exist.\n");
player_craft_shop_base.c | 3936 | add_failed_mess("You cannot remove the default category.\n");
player_craft_shop_base.c | 3940 | add_shop_category(new_category);
player_craft_shop_base.c | 3941 | query_controller()->query_sell_list_obs();
player_craft_shop_base.c | 3942 | filter(obs, (: query_controller()->query_category_of_shop_object($1)  == $2:), category );
player_craft_shop_base.c | 3946 | query_controller()->change_category_of_shop_object(ob, new_category);
player_craft_shop_base.c | 3949 | remove_shop_category(category);
player_craft_shop_base.c | 3966 | write("Aborting deleting the category " + category + ".\n");
player_craft_shop_base.c | 3970 | remove_shop_category(category);
player_craft_shop_base.c | 3971 | write("Removed the shop category " + category + ".\n");
player_craft_shop_base.c | 3974 | query_default_category();
player_craft_shop_base.c | 3979 | query_default_category();
player_craft_shop_base.c | 3982 | event_save(this_object());
player_craft_shop_base.c | 3992 | add_failed_mess("You are not allowed to set the default category.\n");
player_craft_shop_base.c | 3996 | query_real_category_name(default_cat);
player_craft_shop_base.c | 3999 | add_failed_mess("The category " + default_cat + " does not exist.\n");
player_craft_shop_base.c | 4003 | set_default_category(default_cat);
player_craft_shop_base.c | 4006 | event_save(this_object());
player_craft_shop_base.c | 4027 | write("$P$Category list$P$The current categories are:\n" + ret);
player_craft_shop_base.c | 4028 | add_succeeded_mess(({ "", "$N browses the categories.\n" }));
player_craft_shop_base.c | 4046 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop_base.c | 4056 | query_property("place");
player_craft_shop_base.c | 4063 | sort_array(keys(_sold_stats), (: _sold_stats[$1]->num_sold - _sold_stats[$2]->num_sold :));
player_craft_shop_base.c | 4066 | sort_array(keys(_sold_stats), (: _sold_stats[$1]->value_sold - _sold_stats[$2]->value_sold :));
player_craft_shop_base.c | 4069 | sort_array(keys(_sold_stats), (: strcmp(((class shop_stats)_sold_stats[$1])->seller, ((class shop_stats)_sold_stats[$1])->seller) :));
player_craft_shop_base.c | 4072 | sort_array(keys(_sold_stats), (: strcmp(((class shop_stats)_sold_stats[$1])->name, ((class shop_stats)_sold_stats[$1])->name) :));
player_craft_shop_base.c | 4075 | sort_array(keys(_sold_stats), 0);
player_craft_shop_base.c | 4086 | write("$P$Sold stats$P$" + ret);
player_craft_shop_base.c | 4087 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop_base.c | 4101 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop_base.c | 4110 | write("$P$Sold stats$P$" + ret);
player_craft_shop_base.c | 4111 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop_base.c | 4126 | add_failed_mess("You cannot read " + the_short() + "'s ledger.\n");
player_craft_shop_base.c | 4130 | query_property("place");
player_craft_shop_base.c | 4142 | query_value();
player_craft_shop_base.c | 4150 | if (query_owners_money() >
player_craft_shop_base.c | 4160 | write(ret);
player_craft_shop_base.c | 4161 | add_succeeded_mess(({ "", "$N looks at the ledger.\n" }));
player_craft_shop_base.c | 4168 | query_multiple_short(_helpers) + ".\n");
player_craft_shop_base.c | 4175 | add_failed_mess("You are not allowed to mess with the helpers.\n");
player_craft_shop_base.c | 4179 | lower_case(helper);
player_craft_shop_base.c | 4181 | add_failed_mess(capitalize(helper) + " is already a helper.\n");
player_craft_shop_base.c | 4186 | add_failed_mess(capitalize(helper) + " is not a player.\n");
player_craft_shop_base.c | 4199 | add_failed_mess("You are not allowed to mess with the helpers.\n");
player_craft_shop_base.c | 4203 | lower_case(helper);
player_craft_shop_base.c | 4205 | add_failed_mess(capitalize(helper) + " is not a helper to remove.\n");
player_craft_shop_base.c | 4222 | lower_case(name);
player_craft_shop_base.c | 4229 | lower_case(category);
player_craft_shop_base.c | 4239 | init();
player_craft_shop_base.c | 4240 | init();
player_craft_shop_base.c | 4241 | add_command("waiting", "", (: do_list_approval(1) :));
player_craft_shop_base.c | 4242 | add_command("waiting", "unapproved", (: do_list_approval(0) :));
player_craft_shop_base.c | 4244 | do_approve_reject($4[0], 0, -1) :));
player_craft_shop_base.c | 4245 | add_command("retrieve", "<string'id'>", (: do_return($4[0]) :) );
player_craft_shop_base.c | 4246 | add_command("return", "<string'id'>", (: do_return($4[0]) :) );
player_craft_shop_base.c | 4248 | do_approve_auto_item_test($1) :));
player_craft_shop_base.c | 4254 | add_command("approve", "<string'id'>", (: do_approve_item($4[0], 0) :));
player_craft_shop_base.c | 4256 | do_approve_item($4[0], $4[1]) :));
player_craft_shop_base.c | 4258 | do_approve_reject($4[0], 0, $4[1]) :));
player_craft_shop_base.c | 4260 | do_approve_reject($4[0], $4[1], -1) :));
player_craft_shop_base.c | 4262 | do_approve_reject($4[0], $4[2], $4[1]) :));
player_craft_shop_base.c | 4264 | do_approve_browse($4[0]) :));
player_craft_shop_base.c | 4266 | do_approve_checkout($4[0]) :));
player_craft_shop_base.c | 4268 | do_approve_checkin($1) :));
player_craft_shop_base.c | 4275 | do_approve_auto_low($4[0]) :));
player_craft_shop_base.c | 4283 | do_approve_auto_expression_remove($4[0]) :));
player_craft_shop_base.c | 4285 | do_approve_percentage($4[0]) :));
player_craft_shop_base.c | 4287 | do_approve_auto_item_add($4[0], $4[1], 0, 0, 0) :));
player_craft_shop_base.c | 4289 | do_approve_auto_item_add($4[0], $4[1], 0, 0, $4[2]) :));
player_craft_shop_base.c | 4291 | do_approve_auto_item_add($4[0], $4[1], 0, $4[2], 0) :));
player_craft_shop_base.c | 4293 | do_approve_auto_item_add($4[0], $4[1], $4[2], 0, 0) :));
player_craft_shop_base.c | 4295 | do_approve_auto_item_add($4[0], $4[1], $4[2], 0, $4[3]) :));
player_craft_shop_base.c | 4297 | do_approve_auto_item_add($4[0], $4[1], $4[2], $4[3], 0) :));
player_craft_shop_base.c | 4299 | do_approve_auto_item_add_expr($4[0], $4[1], 0, 0, 0) :));
player_craft_shop_base.c | 4301 | do_approve_auto_item_add_expr($4[0], $4[1], 0, $4[2], 0) :));
player_craft_shop_base.c | 4303 | do_approve_auto_item_add_expr($4[0], $4[1], 0, 0, $4[2]) :));
player_craft_shop_base.c | 4305 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], 0, 0) :));
player_craft_shop_base.c | 4307 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], $4[3], 0) :));
player_craft_shop_base.c | 4309 | do_approve_auto_item_add_expr($4[0], $4[1], $4[2], 0, $4[3]) :));
player_craft_shop_base.c | 4311 | do_approve_auto_item_add_object($1, $4[1], 0, 0, 0) :));
player_craft_shop_base.c | 4313 | do_approve_auto_item_add_object($1, $4[1], 0, $4[2], 0) :));
player_craft_shop_base.c | 4315 | do_approve_auto_item_add_object($1, $4[1], 0, 0, $4[2]) :));
player_craft_shop_base.c | 4317 | do_approve_auto_item_add_object($1, $4[1], $4[2], 0, 0) :));
player_craft_shop_base.c | 4319 | do_approve_auto_item_add_object($1, $4[1], $4[2], $4[3], 0) :));
player_craft_shop_base.c | 4321 | do_approve_auto_item_add_object($1, $4[1], $4[2], 0, $4[3]) :));
player_craft_shop_base.c | 4323 | do_approve_auto_item_add_object_expr($1, $4[1], 0, 0, 0) :));
player_craft_shop_base.c | 4325 | do_approve_auto_item_add_object_expr($1, $4[1], 0, $4[2], 0) :));
player_craft_shop_base.c | 4327 | do_approve_auto_item_add_object_expr($1, $4[1], 0, 0, $4[2]) :));
player_craft_shop_base.c | 4329 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], 0, 0) :));
player_craft_shop_base.c | 4331 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], $4[3], 0) :));
player_craft_shop_base.c | 4333 | do_approve_auto_item_add_object_expr($1, $4[1], $4[2], 0, $4[3]) :));
player_craft_shop_base.c | 4335 | do_approve_auto_item_remove($4[0]) :));
player_craft_shop_base.c | 4337 | do_approve_auto_item_remove_object($1) :));
player_craft_shop_base.c | 4339 | do_approve_auto_high($4[0]) :));
player_craft_shop_base.c | 4341 | do_approve_auto_high_deny($4[0]) :));
player_craft_shop_base.c | 4343 | do_approve_limit($4[0]) :));
player_craft_shop_base.c | 4345 | do_approve_limit_person_items($4[1], $4[0]) :));
player_craft_shop_base.c | 4347 | do_approve_limit_person_value($4[1], $4[0]) :));
player_craft_shop_base.c | 4349 | do_approve_limit_person_value_deny($4[1], $4[0]) :));
player_craft_shop_base.c | 4351 | do_approve_limit_person_remove($4[0]) :));
player_craft_shop_base.c | 4353 | do_expression_status(0) :));
player_craft_shop_base.c | 4355 | do_expression_status(1) :));
player_craft_shop_base.c | 4357 | do_approve_pay_deficit() :));
player_craft_shop_base.c | 4359 | add_command("stats", "items by name", (: do_stats_items(4) :));
player_craft_shop_base.c | 4360 | add_command("stats", "items by seller", (: do_stats_items(3) :));
player_craft_shop_base.c | 4361 | add_command("stats", "items by number", (: do_stats_items(1) :));
player_craft_shop_base.c | 4362 | add_command("stats", "items by value", (: do_stats_items(2) :));
player_craft_shop_base.c | 4364 | add_command("stats", "transactions", (: do_stats_transactions() :));
player_craft_shop_base.c | 4366 | add_command("stats", "money", (: do_stats_money() :));
player_craft_shop_base.c | 4368 | add_command("status", "<direct:object>", (: do_main_status(0) :));
player_craft_shop_base.c | 4369 | add_command("status", "<direct:object> hints", (: do_main_status(1) :));
player_craft_shop_base.c | 4372 | do_check_sell($1) :));
player_craft_shop_base.c | 4374 | add_command("category", "list", (: do_list_categories() :));
player_craft_shop_base.c | 4376 | do_set_default_category($4[0]) :));
player_craft_shop_base.c | 4378 | do_add_new_category($4[0]) :));
player_craft_shop_base.c | 4380 | do_category_description($4[0], $4[1]) :));
player_craft_shop_base.c | 4382 | do_category_description($4[0], 0) :));
player_craft_shop_base.c | 4384 | do_category_information($4[0], $4[1]) :));
player_craft_shop_base.c | 4386 | do_category_information($4[0], 0) :));
player_craft_shop_base.c | 4388 | do_remove_category($4[0]) :));
player_craft_shop_base.c | 4390 | do_rename_category($4[0], $4[1]) :));
player_craft_shop_base.c | 4393 | do_helper_list() :));
player_craft_shop_base.c | 4395 | do_helper_add($4[0]) :));
player_craft_shop_base.c | 4397 | do_helper_remove($4[0]) :));
player_craft_shop_base.c | 4401 | do_buy($1, 1) :));
shop_event.c | 53 | debug_printf("Calling %O on %O\n", "event_shop_" + type, _events);
open_shop.c | 17 | set_open_function( (: ( barman ? 1 : 0 ) :) );
open_shop.c | 22 | set_open_function( (: do_open_check :) );
open_shop.c | 27 | add_failed_mess( "There appears to be no barman here!\n" );
open_shop.c | 31 | add_failed_mess( "The chef isn't here at the moment.\n" );
open_shop.c | 55 | evaluate(_open_func, player, type);
open_shop.c | 66 | is_open( this_player(), 0 );
craft_shop.c | 28 | do_sell(object *obs);
craft_shop.c | 29 | set_controller(string name);
craft_shop.c | 30 | do_buy(object *obs, int force);
craft_shop.c | 31 | do_delete(string id);
craft_shop.c | 32 | do_browse(object *obs);
craft_shop.c | 33 | do_change(object *obs, string str);
craft_shop.c | 34 | do_change_name(object *obs, string str);
craft_shop.c | 35 | set_allowed_to_sell(function f);
craft_shop.c | 36 | set_minimum_cost(int i);
craft_shop.c | 37 | sell_name(string name, object *sellable);
craft_shop.c | 38 | sell_choice(string choice, object *sellable, string *names);
craft_shop.c | 39 | determine_cost(string cost, string name, object *sellable);
craft_shop.c | 44 | complete_sale(int value, string name, object *sellable, string category);
craft_shop.c | 45 | do_confirm_sale(int value, string name, object *sellable);
craft_shop.c | 46 | set_cut(int value);
craft_shop.c | 47 | query_cut();
craft_shop.c | 48 | check_open(object player, string command);
craft_shop.c | 49 | query_property(string name);
craft_shop.c | 50 | the_short();
craft_shop.c | 51 | query_craft_shop_save_dir();
craft_shop.c | 56 | set_allowed_to_sell((: 1 :));
craft_shop.c | 60 | set_cut(10);
craft_shop.c | 64 | set_minimum_cost(12 * 4);
craft_shop.c | 67 | set_controller("/std/shops/controllers/craft_shop_controller");
craft_shop.c | 68 | load_it();
craft_shop.c | 78 | value_from_string(str, place);
craft_shop.c | 93 | debug_printf("attempting to write main");
craft_shop.c | 103 | debug_printf("writing main %s", file);
craft_shop.c | 104 | save_variable(value);
craft_shop.c | 107 | query_craft_shop_save_dir() + ".o.bak") :));
craft_shop.c | 110 | unguarded( (: rm($(file) + ".bak") :));
craft_shop.c | 112 | unguarded( (: rename($(file) + ".bak", $(file)) :));
craft_shop.c | 119 | replace_string(query_craft_shop_save_dir(), "/save/", "/save/ramdisk/");
craft_shop.c | 128 | debug_printf("writing data %s", file);
craft_shop.c | 130 | save_variable(value);
craft_shop.c | 132 | debug_printf("failed to write data to %s", file);
craft_shop.c | 139 | unguarded( (: rm($(file)) :) );
craft_shop.c | 141 | unguarded((: rm(query_craft_shop_save_dir() + "/" + $(fname)) :));
craft_shop.c | 145 | printf("Unknown file type to write in %O, of %O\n", __FILE__, type);
craft_shop.c | 164 | if(unguarded((: file_size($(tmp) + ".o") :)) >
craft_shop.c | 169 | query_craft_shop_save_dir();
craft_shop.c | 170 | if(unguarded((: file_size($(tmp) + ".o") :)) >
craft_shop.c | 174 | if(unguarded((: file_size($(tmp) + ".o.bak") :)) >
craft_shop.c | 181 | debug_printf("No file found at %s or %s\n", tmp + ".o", tmp + ".o.bak");
craft_shop.c | 185 | unguarded( (: read_file($(file)) :) );
craft_shop.c | 187 | restore_variable(tmp);
craft_shop.c | 194 | if(unguarded((: file_size($(tmp)) :)) >
craft_shop.c | 200 | debug_printf("reading %s", file);
craft_shop.c | 201 | unguarded( (: read_file($(file)) :) );
craft_shop.c | 203 | restore_variable(tmp);
craft_shop.c | 207 | printf("Unknown file type to read in %O, of %O\n", __FILE__, type);
craft_shop.c | 216 | set_controller("/std/shops/controllers/craft_shop_controller");
craft_shop.c | 217 | load_it();
craft_shop.c | 227 | dest_me();
craft_shop.c | 229 | clone_object(name);
craft_shop.c | 230 | set_save_function((: do_save_file($1, $2, $3) :));
craft_shop.c | 231 | set_load_function((: do_read_file($1, $2) :) );
craft_shop.c | 380 | match_objects_for_existence(str, ({ _controller->query_sell_list() }));
craft_shop.c | 427 | this_player()->query_name();
craft_shop.c | 439 | if ((sizeof(sellable_names)+sizeof(obs)) >
craft_shop.c | 455 | add_command("sell", "<indirect:object:me>");
craft_shop.c | 457 | do_sell_id($0, $4[1]) :));
craft_shop.c | 458 | add_command("list", "");
craft_shop.c | 460 | file_name(_controller->query_sell_list());
craft_shop.c | 462 | do_buy($1, 0) :));
craft_shop.c | 464 | do_browse($1) :));
craft_shop.c | 466 | do_change($1, $4[1]) :));
craft_shop.c | 468 | do_change_name($1, $4[1]) :));
craft_shop.c | 471 | add_command("collect", "royalties");
craft_shop.c | 472 | add_command("royalties", "");
craft_shop.c | 475 | do_delete($4[0]) :));
craft_shop.c | 499 | filter(obs, query_allowed_to_sell());
craft_shop.c | 501 | add_failed_mess("This shop does not deal in $I.\n", obs);
craft_shop.c | 505 | this_player()->query_holding() + this_player()->query_armours();
craft_shop.c | 506 | filter(sellable, (: member_array($1, $2) != -1 :), worn);
craft_shop.c | 515 | this_player()->query_name();
craft_shop.c | 555 | filter(obs, query_allowed_to_sell());
craft_shop.c | 557 | add_failed_mess("This shop does not deal in $I.\n", obs);
craft_shop.c | 561 | this_player()->query_holding() + this_player()->query_armours();
craft_shop.c | 562 | filter(sellable, (: member_array($1, $2) != -1 :), worn);
craft_shop.c | 571 | this_player()->query_name();
craft_shop.c | 585 | sell_name(query_multiple_short(sellable, 0, 1), sellable);
craft_shop.c | 591 | set_no_join();
craft_shop.c | 592 | query_owner_sellables(name);
craft_shop.c | 593 | uniq_array(sellable_names);
craft_shop.c | 598 | input_to((: sell_name :), 0, sellable);
craft_shop.c | 600 | query_property("place");
craft_shop.c | 604 | write("You currently have the following listed for sale:\n");
craft_shop.c | 605 | sizeof(sellable_names);
craft_shop.c | 607 | this_player()->query_name());
craft_shop.c | 609 | money_value_string(cost, place)));
craft_shop.c | 615 | input_to((: sell_choice :), 0, sellable, sellable_names);
craft_shop.c | 631 | if (strlen(name) >
craft_shop.c | 638 | write("Sorry, you cannot use colour sequences in names.\n");
craft_shop.c | 661 | input_to((: sell_name :), 0, sellable);
craft_shop.c | 663 | query_multiple_short(sellable) + " under? ");
craft_shop.c | 669 | input_to((: confirm_sell_name_choice :), 0, name, sellable);
craft_shop.c | 683 | lower_case(answer);
craft_shop.c | 684 | if (strlen(answer) >
craft_shop.c | 690 | write("Unknown selection.\n");
craft_shop.c | 693 | input_to( (: confirm_sell_name_choice :), 0, name, sellable);
craft_shop.c | 696 | write(query_extra_price_information(this_player()->query_name(), sellable));
craft_shop.c | 697 | write("How much money do you wish to sell the item '" + name + "' for? ");
craft_shop.c | 698 | input_to((: determine_cost :), 0, name, sellable);
craft_shop.c | 714 | if (sizeof(names) >
craft_shop.c | 725 | lower_case(answer);
craft_shop.c | 728 | query_multiple_short(sellables) + " as.\nList name: ");
craft_shop.c | 729 | input_to((: sell_name :), 0, sellables);
craft_shop.c | 732 | if (strlen(answer) >
craft_shop.c | 735 | sizeof(names) - 1));
craft_shop.c | 736 | input_to((: sell_choice :), 0, sellables, names);
craft_shop.c | 741 | this_player()->query_name());
craft_shop.c | 748 | input_to((: determine_cost :), 0, names[pos], sellables);
craft_shop.c | 750 | query_property("place");
craft_shop.c | 754 | do_confirm_sale(cost, names[pos], sellables);
craft_shop.c | 770 | query_property("place");
craft_shop.c | 774 | value_from_string(cost, place);
craft_shop.c | 778 | write("Aborting.\n");
craft_shop.c | 782 | money_value_string(_minimum_cost, place) + ".\n");
craft_shop.c | 785 | write("What do you wish to list " + name + " for? ");
craft_shop.c | 786 | input_to("determine_cost", 0, name, sellable);
craft_shop.c | 790 | query_maximum_sale_value(this_player()->query_name(), sellable);
craft_shop.c | 793 | money_value_string(max, place) + ".\n");
craft_shop.c | 796 | write("What do you wish to list " + name + " for? ");
craft_shop.c | 797 | input_to("determine_cost", 0, name, sellable);
craft_shop.c | 801 | do_confirm_sale(value, name, sellable);
craft_shop.c | 810 | query_property("place");
craft_shop.c | 817 | money_value_string(value, place) + " (y/n)? ");
craft_shop.c | 818 | input_to((: confirm_sale :), 0, value, name, sellables, category);
craft_shop.c | 834 | confirm_sale_question(value, name, sellables, 0);
craft_shop.c | 852 | write("Ok, aborting sale of " + query_multiple_short(sellable) + ".\n");
craft_shop.c | 856 | write("Please answer yes or no.\n");
craft_shop.c | 857 | confirm_sale_question(value, name, sellable, category);
craft_shop.c | 860 | complete_sale(value, name, sellable, category);
craft_shop.c | 881 | evaluate(_when_sold_func, ob);
craft_shop.c | 885 | this_player()->query_cap_name(), category);
craft_shop.c | 886 | query_property("place");
craft_shop.c | 897 | query_multiple_short(bought) + " to " + the_short() + ".\n");
craft_shop.c | 899 | write("Unable to sell " + query_multiple_short(sellable) + ".\n");
craft_shop.c | 923 | query_sell_list_obs();
craft_shop.c | 925 | add_failed_mess("The shop is empty.\n", ({ }));
craft_shop.c | 929 | query_property("place");
craft_shop.c | 934 | unique_array(obs, (: _controller->query_id_of_shop_object($1) :) );
craft_shop.c | 937 | query_id_of_shop_object($2[0])) :) );
craft_shop.c | 946 | write("$P$Shop list$P$" + ret);
craft_shop.c | 947 | add_succeeded_mess( ({ "", "$N browses through the inventory.\n" }) );
craft_shop.c | 973 | query_property("place");
craft_shop.c | 977 | this_player()->query_value_in(place);
craft_shop.c | 978 | value_of_objects(obs);
craft_shop.c | 981 | sizeof( obs ) >
craft_shop.c | 987 | map(obs, (: _controller->query_owner_of_shop_object($1) :));
craft_shop.c | 988 | map(obs, (: _controller->query_name_of_shop_object($1) :));
craft_shop.c | 989 | map(obs, (: _controller->query_category_of_shop_object($1) :));
craft_shop.c | 990 | map(obs, (: $1->query_value() :));
craft_shop.c | 993 | query_cut(), force, ref value);
craft_shop.c | 995 | if (sizeof(bought) >
craft_shop.c | 1004 | inform_of_buy(value, bought, this_player(), sellers, names, cats, values);
craft_shop.c | 1020 | add_failed_mess( "This command is reserved for directors.\n", ({ }) );
craft_shop.c | 1025 | add_failed_mess( "You have to choose a valid sell id.\n", ({ }) );
craft_shop.c | 1029 | delete_objects(id);
craft_shop.c | 1031 | add_succeeded_mess( "$N $V some things.\n", ({ }) );
craft_shop.c | 1052 | if (sizeof(obs) >
craft_shop.c | 1053 | add_failed_mess("You cannot browse more than 10 things at once.\n");
craft_shop.c | 1057 | create_all_real_objects(this_player(), obs);
craft_shop.c | 1060 | the_short() + ":\n" + ob->long();
craft_shop.c | 1061 | query_readable_message();
craft_shop.c | 1066 | query_readable_message();
craft_shop.c | 1069 | move("/room/rubbish");
craft_shop.c | 1070 | add_succeeded_mess(({ mess, "$N $V $I.\n" }), obs);
craft_shop.c | 1089 | filter(obs, (: $1->short() == $2->short() :), obs[0]);
craft_shop.c | 1097 | add_failed_mess("You do not own $I.\n", obs);
craft_shop.c | 1101 | query_property("place");
craft_shop.c | 1106 | value_from_string(change, place);
craft_shop.c | 1114 | change_value_of_shop_object(obs[0], value);
craft_shop.c | 1134 | filter(obs, (: $1->short() == $2->short() :), obs[0]);
craft_shop.c | 1142 | add_failed_mess("You do not own $I.\n", obs);
craft_shop.c | 1147 | add_failed_mess( "Try another name.\n", ({ }) );
craft_shop.c | 1158 | add_failed_mess("The name " + new_name + " is already in use.\n", obs);
craft_shop.c | 1178 | this_player()->query_name();
craft_shop.c | 1179 | query_royalty(name);
craft_shop.c | 1181 | add_failed_mess("You have no money owed to you here.\n");
craft_shop.c | 1186 | add_failed_mess("You owe money to " + the_short() + ".\n");
craft_shop.c | 1191 | query_property("place");
craft_shop.c | 1195 | pay_out_royalty(name, place);
craft_shop.c | 1221 | this_player()->query_name();
craft_shop.c | 1222 | query_royalty(name);
craft_shop.c | 1224 | add_failed_mess("You have no money owed to you here.\n");
craft_shop.c | 1229 | add_failed_mess("You owe money to " + the_short() + ".\n");
craft_shop.c | 1233 | query_property("place");
craft_shop.c | 1288 | set_when_sold_function( (: $1->set_open_page(0) :) );
craft_shop.c | 1312 | add_failed_mess("The shop is not open.\n");
craft_shop.c | 1360 | dest_me();
bank_master.c | 10 | query_float();
bank_master.c | 26 | query_money_place();
bank_master.c | 36 | query_credit_balance();
bank_master.c | 45 | add_failed_mess("None of $I are credit notes.\n", not_credit);
bank_master.c | 48 | add_failed_mess("None of $I are valid credit notes.\n", not_valid);
bank_master.c | 54 | query_amount();
bank_master.c | 85 | this_player()->adjust_money(MONEY_HAND->create_money_array(-amount, place));
bank_master.c | 96 | move("/room/rubbish");
bank_master.c | 102 | init();
bank_master.c | 103 | add_command("process", "<indirect:object>");
store_close.c | 11 | open_up();
store_close.c | 12 | close_up();
store_close.c | 27 | call_out("night_time_check", 1);
store_close.c | 29 | call_out("day_time_check", 1);
store_close.c | 38 | query_am_hour(time() );
store_close.c | 42 | close_up();
store_close.c | 47 | open_up();
store_close.c | 55 | query_am_hour(time() );
store_close.c | 59 | close_up();
store_close.c | 64 | open_up();
store_close.c | 97 | set_night_close(1, "/d/sur/chars/bob", ({"east", PATH+"flibble_room"}), "catch_thief");
store_close.c | 99 | set_night_close(0, "none", ({"up", "/d/ram/Snorkle/wibble_room"}));
store_close.c | 106 | weather_notify( this_object(), NOTIFY_DAY );
store_close.c | 111 | allocate(sizeof(outside)/2);
store_close.c | 112 | allocate(sizeof(outside)/2);
store_close.c | 115 | sizeof(outside);
store_close.c | 144 | children(_keeper);
store_close.c | 149 | call_out("close_up", 60);
store_close.c | 152 | do_command("'I'm sorry, it's time to close!");
store_close.c | 153 | do_command(":ushers you out of the store.");
store_close.c | 154 | move("/room/rubbish");
store_close.c | 157 | all_inventory( this_object() );
store_close.c | 158 | filter(obs, (: $1->query_property("player") :));
store_close.c | 161 | move_with_look(_outside_rooms[0]);
store_close.c | 164 | sizeof(_outside_rooms);
store_close.c | 177 | sizeof(_outside_rooms);
store_close.c | 184 | clone_object(_file);
store_close.c | 185 | move(this_object());
store_close.c | 202 | call_out(_burglar, 1, ob);
store_close.c | 207 | return ([ "keeper ob" : _keeper_ob ]);
bank_base.c | 25 | query_money_place();
bank_base.c | 26 | adjust_float(int amount);
bank_base.c | 27 | is_open_for(string type, string person);
bank_base.c | 28 | event_save(object ob);
bank_base.c | 112 | query_account( player, _bank_name );
bank_base.c | 121 | set_account( player, _bank_name, amount );
bank_base.c | 159 | if ( ( get_account( person ) + amount ) >
bank_base.c | 175 | query_bank_master_office(_bank_name);
bank_base.c | 179 | load_object(room);
bank_base.c | 198 | find_main_bank();
bank_base.c | 204 | lower_case(branch->query_owner());
bank_base.c | 214 | add_failed_mess("This is a forgotten bank in a dusty land.\n");
bank_base.c | 219 | add_failed_mess("The bank is not open for withdrawals.\n");
bank_base.c | 223 | get_account(this_player()->query_name());
bank_base.c | 225 | notify_fail( "You do not have an account here.\n" );
bank_base.c | 255 | add_failed_mess("This is a forgotten bank in a dusty land.\n");
bank_base.c | 260 | add_failed_mess("The bank is not open for withdrawals.\n");
bank_base.c | 263 | get_account(this_player()->query_name());
bank_base.c | 266 | notify_fail( "You do not have an account here.\n" );
bank_base.c | 270 | value_from_string(type, query_money_place());
bank_base.c | 273 | notify_fail( "You must withdraw something.\n" );
bank_base.c | 278 | add_failed_mess( "You don't have that much money in your account!\n" );
bank_base.c | 283 | add_failed_mess("The bank cannot handle this transaction.\n");
bank_base.c | 287 | get_money_ob();
bank_base.c | 289 | query_money_place()));
bank_base.c | 294 | move("/room/rubbish");
bank_base.c | 301 | set_account(this_player()->query_name(), total - amount );
bank_base.c | 302 | adjust_account(this_player()->query_name(), -amount);
bank_base.c | 304 | event_save(this_object());
bank_base.c | 314 | this_player()->save();
bank_base.c | 327 | add_failed_mess("This is a forgotten bank in a dusty land.\n");
bank_base.c | 332 | add_failed_mess("The bank is not open for deposits.\n");
bank_base.c | 335 | get_account(this_player()->query_name());
bank_base.c | 337 | notify_fail("You don't have an account here.\n");
bank_base.c | 341 | parse_money(words, this_player(), query_money_place());
bank_base.c | 344 | add_failed_mess( "Deposit what?\n" );
bank_base.c | 348 | add_failed_mess( "You can't deposit that.\n" );
bank_base.c | 353 | add_failed_mess( "You can only deposit legal tender.\n");
bank_base.c | 357 | query_value_in(query_money_place());
bank_base.c | 361 | move(this_player());
bank_base.c | 370 | move(this_player());
bank_base.c | 371 | add_failed_mess("The bank cannot handle this transaction.\n");
bank_base.c | 377 | adjust_float(tmp);
bank_base.c | 380 | set_account(this_player()->query_name(), total + amount );
bank_base.c | 382 | adjust_account(this_player()->query_name(), amount);
bank_base.c | 383 | adjust_float(amount);
bank_base.c | 384 | event_save(this_object());
bank_base.c | 385 | move("/room/rubbish");
bank_base.c | 387 | this_player()->save();
bank_base.c | 407 | add_failed_mess("The bank is not open for new accounts.\n");
bank_base.c | 410 | if ( get_account(this_player()->query_name()) >
bank_base.c | 411 | notify_fail( "You already have an account here.\n" );
bank_base.c | 415 | this_player()->query_value_in( query_money_place() );
bank_base.c | 417 | notify_fail( "You do not have enough money to open an account.\n" );
bank_base.c | 424 | input_to( "check_open" );
bank_base.c | 427 | set_account(this_player()->query_name(), 0 );
bank_base.c | 428 | add_succeeded_mess( "$N $V an account.\n" );
bank_base.c | 438 | lower_case( word );
bank_base.c | 440 | write( "Okay, not opening an account.\n" );
bank_base.c | 443 | this_player()->query_value_in( query_money_place() );
bank_base.c | 445 | write("You lost all your money!\n");
bank_base.c | 448 | set_account(this_player()->query_name(), 0 );
bank_base.c | 449 | write( "You now have an account here.\n" );
bank_base.c | 450 | this_player()->query_money_object(0);
bank_base.c | 452 | query_money_place()), query_money_place());
bank_base.c | 453 | pay_amount_from( _account_cost, money, query_money_place() );
bank_base.c | 455 | write("Your change is too heavy and you drop it on the floor.\n");
bank_base.c | 456 | move(this_object());
bank_base.c | 459 | query_franchise());
bank_base.c | 461 | find_main_bank();
bank_base.c | 463 | adjust_float(amount);
bank_base.c | 465 | adjust_float(_account_cost - amount);
bank_base.c | 474 | get_account(this_player()->query_name());
bank_base.c | 476 | notify_fail( "You do not have an account here.\n" );
bank_base.c | 487 | move( this_object() );
bank_base.c | 489 | adjust_float(-total);
bank_base.c | 497 | write( "You close your account.\n" );
bank_base.c | 499 | add_succeeded_mess("$N $V an account.\n");
bank_base.c | 500 | set_account(this_player()->query_name(), -1 );
bank_base.c | 501 | event_save(this_object());
bank_base.c | 502 | this_player()->save();
bank_base.c | 513 | query_money_place() }) });
bank_base.c | 517 | add_command( "balance", "" );
bank_base.c | 519 | do_withdraw($4[0]) :) );
bank_base.c | 520 | add_command( "open", "account" );
bank_base.c | 521 | add_command( "close", "account" );
bank_base.c | 522 | add_command( "deposit", "<string>", (: do_deposit($4[0]) :) );
counter.c | 15 | create();
counter.c | 16 | set_name( "counter" );
counter.c | 17 | set_short( "counter" );
counter.c | 20 | reset_get();
counter.c | 22 | add_property(CAN_POSITION_PROPERTY, 1);
counter.c | 30 | move( "/room/rubbish" );
counter.c | 37 | call_out( "clear_item", 3, ob );
counter.c | 26 | set_light(60);
counter.c | 27 | set_office( PATH+ "office" );
counter.c | 28 | set_directions( "west", "south", "east" );
counter.c | 30 | set_short( "behind the counter of Tarnach's shop" );
counter.c | 33 | add_exit( "south", PATH + "storeroom", "door" );
counter.c | 34 | add_exit( "east", PATH + "front", "path" );
counter.c | 35 | add_exit( "west", PATH + "office", "door" );
counter.c | 68 | action(string);
counter.c | 69 | add_money_ob(object);
counter.c | 70 | adjust_register(string, int);
counter.c | 71 | directions_to(string);
counter.c | 72 | do_calc(int,string,int);
counter.c | 73 | do_correction(mixed);
counter.c | 74 | do_log(mixed *);
counter.c | 75 | query_register();
counter.c | 76 | save_me(string);
counter.c | 77 | save_register(int);
counter.c | 78 | set_office(string);
counter.c | 79 | set_directions(string, string, string);
counter.c | 88 | create();
counter.c | 90 | add_property("no burial", 1);
counter.c | 91 | add_property("determinate", "");
counter.c | 94 | this_object()->setup();
counter.c | 95 | this_object()->reset();
counter.c | 99 | add_help_file("player_shop_counter");
counter.c | 109 | init();
counter.c | 111 | this_player()->command_override((: action :));
counter.c | 113 | do_calc($4[0],$4[1],$4[2]) :));
counter.c | 119 | do_log($4) :));
counter.c | 122 | do_correction($4) :));
counter.c | 138 | sscanf(str,"%s %s",str,st1);
counter.c | 142 | tell_object(this_player(), "You are not an active employee here!\n");
counter.c | 158 | LOG_ERROR("counter.c", "add_money_ob()");
counter.c | 162 | move( _register );
counter.c | 163 | save_register(TRUE);
counter.c | 182 | LOG_ERROR("counter.c", "adjust_register(" + player+","+amount+")");
counter.c | 186 | present(MONEY_ALIAS, _register);
counter.c | 188 | query_money_array() + ({});
counter.c | 189 | query_total_value(_money, _place);
counter.c | 191 | pay_amount_from( amount, cash, _place );
counter.c | 192 | if (change) change->move( _register );
counter.c | 194 | money_value_string(amount, _place), UNPAID);
counter.c | 195 | save_register(TRUE);
counter.c | 229 | sprintf("%d\n", a+b);
counter.c | 232 | sprintf("%d\n", a-b);
counter.c | 235 | sprintf("%d\n", a*b);
counter.c | 245 | sprintf("%02d",c);
counter.c | 246 | sprintf("%d.%s\n", a/b, temp[0..1]);
counter.c | 249 | tell_object(this_player(), result);
counter.c | 250 | add_succeeded_mess("$N use$s the calculator.\n");
counter.c | 265 | add_succeeded_mess("$N make$s a correction in the transaction log book.\n");
counter.c | 278 | add_succeeded_mess("$N make$s an entry in the transaction log book.\n");
counter.c | 292 | event_death(k, o, k2, r, k3);
counter.c | 304 | event_enter(ob, message, from);
counter.c | 314 | present(MONEY_ALIAS, _register);
counter.c | 317 | query_money_array() + ({});
counter.c | 318 | query_total_value(_money, _place);
counter.c | 335 | present(MONEY_ALIAS, _register);
counter.c | 336 | if (!cash) _money = ({});
counter.c | 337 | query_money_array() + ({});
counter.c | 339 | tell_creator(CREATOR, "Register contains: %O.\n", _money);
counter.c | 341 | save_register(_money);
counter.c | 343 | query_total_value(old, _place);
counter.c | 345 | adjust_takings(difference);
counter.c | 365 | remove_call_out(_call_save);
counter.c | 367 | this_player()->query_name():"shop")) :), 1);
counter.c | 379 | set_directions( "west", "south", "east" );
counter.c | 400 | set_long(long_desc);
counter.c | 407 | set_office( PATH + "tarnach's_office" );
counter.c | 415 | query_storeroom();
counter.c | 416 | query_mgr_office();
counter.c | 417 | query_shop_front();
counter.c | 418 | query_place();
counter.c | 420 | clone_object("/obj/misc/cash_register");
counter.c | 421 | set_name("register");
counter.c | 422 | set_short("cash register");
counter.c | 423 | add_adjective("cash");
counter.c | 427 | set_shop(this_object());
counter.c | 428 | add_hidden_object(_register);
counter.c | 429 | reset_get();
counter.c | 430 | restore_register();
counter.c | 432 | clone_object(MONEY_OBJECT);
counter.c | 433 | set_money_array(_money);
counter.c | 434 | move(_register);
mgr_office.c | 45 | set_light(60);
mgr_office.c | 46 | set_office( PATH+ "office" );
mgr_office.c | 48 | set_short( "Tarnach Fendertwin's office" );
mgr_office.c | 52 | add_exit( "north", PATH +"office", "door" );
mgr_office.c | 80 | cap_name(string);
mgr_office.c | 81 | do_accounts();
mgr_office.c | 82 | do_ban(mixed *);
mgr_office.c | 83 | do_check();
mgr_office.c | 84 | do_claim();
mgr_office.c | 85 | do_commend(string);
mgr_office.c | 86 | do_demote(string);
mgr_office.c | 87 | do_fire(mixed *);
mgr_office.c | 88 | do_leave(mixed *);
mgr_office.c | 89 | do_list(mixed *);
mgr_office.c | 90 | do_logs(mixed *, string);
mgr_office.c | 91 | do_mail(string);
mgr_office.c | 92 | do_memo();
mgr_office.c | 93 | do_office();
mgr_office.c | 94 | do_policies();
mgr_office.c | 95 | do_policy(mixed *,string);
mgr_office.c | 96 | do_project(string);
mgr_office.c | 97 | do_query(string);
mgr_office.c | 98 | do_remove();
mgr_office.c | 99 | do_rent();
mgr_office.c | 100 | do_retire();
mgr_office.c | 101 | do_set(mixed *, string);
mgr_office.c | 102 | do_suspend(mixed *);
mgr_office.c | 103 | do_transfer(mixed *);
mgr_office.c | 104 | do_unban(string);
mgr_office.c | 105 | do_view(string,string);
mgr_office.c | 106 | do_vote(mixed *, string);
mgr_office.c | 107 | do_warn(mixed *);
mgr_office.c | 108 | end_memo(string,string);
mgr_office.c | 109 | end_policy_suggest(string,string,int);
mgr_office.c | 110 | send_memo(string, string, string);
mgr_office.c | 111 | set_office(string);
mgr_office.c | 112 | write_memo(string);
mgr_office.c | 118 | create();
mgr_office.c | 120 | add_property("determinate", "");
mgr_office.c | 123 | this_object()->setup();
mgr_office.c | 124 | this_object()->reset();
mgr_office.c | 126 | add_help_file("player_shop_mgr_office");
mgr_office.c | 134 | init();
mgr_office.c | 140 | do_list($4) :));
mgr_office.c | 141 | add_command("memo", "", (: do_memo() :));
mgr_office.c | 142 | add_command("office", "", (: do_office() :));
mgr_office.c | 143 | add_command("claim", "", (: do_claim() :));
mgr_office.c | 144 | add_command("accounts", "", (: do_accounts() :));
mgr_office.c | 146 | do_logs($4,$5) :));
mgr_office.c | 147 | add_command("mail", ({"", "<string>"}), (: do_mail($4) :));
mgr_office.c | 148 | add_command("query", "{pay|employees}", (: do_query($4[0]) :));
mgr_office.c | 149 | add_command("view", ({VIEW_EMP, VIEW_APP}), (: do_view($4[0],$5) :));
mgr_office.c | 150 | add_command("project", "{pay|bonus}", (: do_project($4[0]) :));
mgr_office.c | 151 | add_command("vote", VOTE_POLICY, (: do_vote($4,$5) :));
mgr_office.c | 153 | do_policy($4,$5) :));
mgr_office.c | 154 | add_command("policies", "", (: do_policies() :));
mgr_office.c | 157 | add_command("rent", "cabinet", (: do_rent() :));
mgr_office.c | 158 | add_command("remove", "cabinet", (: do_remove() :));
mgr_office.c | 159 | add_command("retire", "", (: do_retire() :));
mgr_office.c | 160 | add_command("vote", VOTE_APPLICANT, (: do_vote($4,$5) :));
mgr_office.c | 161 | add_command("check", "votes", (: do_check() :));
mgr_office.c | 162 | add_command("commend", "<word'employee'>", (: do_commend($4[0]) :));
mgr_office.c | 164 | do_fire($4) :));
mgr_office.c | 166 | do_warn($4) :));
mgr_office.c | 167 | add_command("demote", "<word'employee'>", (: do_demote($4[0]) :));
mgr_office.c | 169 | do_suspend($4) :));
mgr_office.c | 171 | do_leave($4) :));
mgr_office.c | 173 | do_ban($4) :));
mgr_office.c | 174 | add_command("unban", "<word'person'>", (: do_unban($4[0]) :));
mgr_office.c | 175 | add_command("set", ({SET_EMPS, SET_PAY}), (: do_set($4,$5) :));
mgr_office.c | 178 | do_transfer($4) :));
mgr_office.c | 187 | query_cap_name(name);
mgr_office.c | 188 | capitalize(name);
mgr_office.c | 194 | if (_notice) _notice->dest_me();
mgr_office.c | 195 | dest_me();
mgr_office.c | 207 | money_value_string(_office->query_profit(), _place)));
mgr_office.c | 214 | do_ban(mixed *args) { return _office->do_ban(args);
mgr_office.c | 221 | this_player()->query_name();
mgr_office.c | 224 | add_succeeded_mess("");
mgr_office.c | 225 | get_applicants();
mgr_office.c | 226 | filter(applicants, (: $(applicants)[$1][APP_TYPE] == 1 :));
mgr_office.c | 244 | tell_object(this_player(), "$P$Votes cast$P$"+ results);
mgr_office.c | 259 | tell_object(this_player(), results + "\n");
mgr_office.c | 271 | clone_object(MGR_BOOK);
mgr_office.c | 274 | this_player()->query_short()+ "\n\n", "common", 100);
mgr_office.c | 275 | set_office(_office);
mgr_office.c | 278 | move(this_object());
mgr_office.c | 282 | add_succeeded_mess("$N $V a new handbook.\n");
mgr_office.c | 289 | do_commend(string emp) { return _office->do_commend(emp);
mgr_office.c | 293 | do_demote(string emp) { return _office->do_demote(emp);
mgr_office.c | 297 | do_fire(mixed *args) { return _office->do_fire(args);
mgr_office.c | 301 | do_leave(mixed *args) { return _office->do_leave(args);
mgr_office.c | 311 | if (!sizeof(args)) args = ({"employees"});
mgr_office.c | 312 | add_succeeded_mess("");
mgr_office.c | 318 | get_applicants();
mgr_office.c | 361 | sizeof(applicants[word][APP_ABSTAIN]));
mgr_office.c | 364 | tell_object(this_player(), "$P$Applications list$P$"+ results);
mgr_office.c | 381 | tell_object(this_player(), "$P$Baddies$P$\n"+ results);
mgr_office.c | 384 | do_list();
mgr_office.c | 394 | do_logs(args, pattern);
mgr_office.c | 400 | do_mail(string words) { return MAIL_TRACK->mail(words);
mgr_office.c | 406 | tell_object(this_player(), "Subject: (hit enter for general memo)\n");
mgr_office.c | 407 | input_to((: write_memo($1) :), 0);
mgr_office.c | 408 | add_succeeded_mess("");
mgr_office.c | 417 | query_retired(this_player()->query_name());
mgr_office.c | 454 | tell_object(this_player(), result+ "\n");
mgr_office.c | 455 | add_succeeded_mess("");
mgr_office.c | 464 | get_new_policies();
mgr_office.c | 466 | tell_object(this_player(), "There are no policies awaiting sanction.\n");
mgr_office.c | 492 | tell_object(this_player(), "This name is already in use.\n");
mgr_office.c | 496 | lower_case(args[1])),$((args[0] == "manager")?1:0)) :));
mgr_office.c | 497 | add_succeeded_mess("");
mgr_office.c | 502 | tell_object(this_player(), "This policy does not exist.\n");
mgr_office.c | 505 | lower_case(args[0]);
mgr_office.c | 508 | this_player()->query_name();
mgr_office.c | 509 | get_managers();
mgr_office.c | 510 | get_retired();
mgr_office.c | 511 | query_creator()});
mgr_office.c | 517 | add_policy_suggest(args[0], "", mgr);
mgr_office.c | 526 | add_succeeded_mess("");
mgr_office.c | 530 | calc_bonus();
mgr_office.c | 547 | add_succeeded_mess("");
mgr_office.c | 558 | query_maxemp()+ ".\n");
mgr_office.c | 568 | do_remove() { return _office->do_remove();
mgr_office.c | 572 | do_rent() { return _office->do_rent();
mgr_office.c | 576 | do_retire() { return _office->do_retire();
mgr_office.c | 582 | do_set(args, pattern);
mgr_office.c | 588 | do_suspend(mixed *args) { return _office->do_suspend(args);
mgr_office.c | 592 | do_transfer(mixed *args) { return _office->do_transfer(args);
mgr_office.c | 596 | do_unban( string person ) { return _office->do_unban(person);
mgr_office.c | 602 | view_record(person, pattern);
mgr_office.c | 611 | do_vote(args, pattern);
mgr_office.c | 617 | do_warn(mixed *args) { return _office->do_warn(args);
mgr_office.c | 625 | tell_object(this_player(), "Aborted.\n");
mgr_office.c | 630 | input_to((: send_memo($1,$(subject),$(text)) :), 0);
mgr_office.c | 642 | tell_object(this_player(), "Aborted.\n");
mgr_office.c | 646 | replace_string(text, "\n", " ");
mgr_office.c | 647 | replace_string(text, "  ", " ");
mgr_office.c | 648 | this_player()->query_name();
mgr_office.c | 649 | get_managers();
mgr_office.c | 650 | get_retired();
mgr_office.c | 651 | query_creator()});
mgr_office.c | 652 | lower_case(mgr)});
mgr_office.c | 657 | add_policy_suggest(name, text, mgr, type);
mgr_office.c | 665 | event_death(k, o, k2, r, k3);
mgr_office.c | 673 | event_enter(ob, message, from);
mgr_office.c | 683 | lower_case(ans);
mgr_office.c | 688 | input_to((: send_memo($1,$(subject),$(text)) :), 0);
mgr_office.c | 691 | get_managers();
mgr_office.c | 692 | get_retired();
mgr_office.c | 695 | lower_case(this_player()->query_name())});
mgr_office.c | 696 | query_creator()});
mgr_office.c | 698 | lower_case(this_player()->query_name())});
mgr_office.c | 701 | tell_object(this_player(), "\nNo recipients!\n");
mgr_office.c | 704 | tell_object(this_player(), "\nSending your memo.\n");
mgr_office.c | 718 | set_long( long_desc );
mgr_office.c | 724 | set_office( PATH+ "office" );
mgr_office.c | 730 | query_place();
mgr_office.c | 731 | query_shop_front();
mgr_office.c | 732 | query_counter();
mgr_office.c | 733 | query_storeroom();
mgr_office.c | 738 | clone_object(SHOP_NOTICE);
mgr_office.c | 739 | set_office(_office);
mgr_office.c | 740 | set_type(1);
mgr_office.c | 741 | add_hidden_object(_notice);
mgr_office.c | 748 | this_player()->do_edit(0, (: end_memo($1,$(text)) :));
office.c | 79 | set_light(60);
office.c | 80 | set_place("Lancre");
office.c | 81 | set_proprietor("Tarnach Fendertwin");
office.c | 82 | set_shop_name("Tarnach Fendertwin's Quality Consumables (Creel Springs)");
office.c | 83 | set_very_short("TFQC-CS");
office.c | 84 | set_channel("tarnachcs", 0);
office.c | 85 | set_shopkeeper(PATH + "shopkeeper");
office.c | 86 | set_stock_policy("magical spell components");
office.c | 88 | set_shop_front(PATH+ "front");
office.c | 89 | set_counter(PATH+ "counter");
office.c | 90 | set_storeroom(PATH+ "storeroom");
office.c | 91 | set_directions("east", "east", "east");
office.c | 93 | set_short("office of Tarnach's shop");
office.c | 102 | add_property( "there", "on one wall");
office.c | 103 | add_exit("east", PATH+ "counter", "door");
office.c | 104 | add_manager_exit("south", PATH + "mgr_office");
office.c | 202 | create();
office.c | 206 | this_object()->setup();
office.c | 207 | this_object()->reset();
office.c | 209 | seteuid("Room");
office.c | 210 | add_property("determinate", "");
office.c | 211 | add_help_file("player_shop_office");
office.c | 245 | add_manager_exit( "east", PATH + "tarnach's_man_office" );
office.c | 251 | add_exit(dir, path, "door");
office.c | 270 | load_applicants();
office.c | 271 | clear_applicants();
office.c | 272 | copy(_applicants + ([]));
office.c | 283 | get_baddies() { return copy(_baddies + ([]));
office.c | 295 | m_indices(_employees);
office.c | 301 | copy(sort_array(employees, 1));
office.c | 329 | load_new_policies();
office.c | 330 | clear_new_policies();
office.c | 331 | copy(_new_policies);
office.c | 343 | load_policies();
office.c | 344 | clear_policies();
office.c | 346 | copy(filter(_policies, (: _policies[$1][1] :)));
office.c | 348 | copy(filter(_policies, (: !_policies[$1][1] :)));
office.c | 360 | get_retired() { return copy(sort_array(_retired, 1));
office.c | 381 | copy(sort_array(supervisors, 1));
office.c | 400 | reset_employee(word, CLOCKED_IN);
office.c | 401 | shop_log(GENERAL, word, "was clocked out", UNPAID);
office.c | 417 | load_applicants();
office.c | 418 | clear_applicants();
office.c | 420 | if (_applicants[player]) return copy(_applicants[player][APP_TYPE]);
office.c | 433 | if (_baddies[player]) return copy(_baddies[player][BAD_TIME]);
office.c | 445 | query_bonus() { return copy(_accounts["bonus"]);
office.c | 452 | query_channel() { return copy(_channel);
office.c | 459 | query_counter() { return copy(_counter);
office.c | 466 | query_creator(string creator) { return copy(_creator);
office.c | 478 | if (_declined[player]) return copy(_declined[player]);
office.c | 494 | if (_employees[player]) return copy(_employees[player][EMP_POINTS]);
office.c | 506 | query_employees() { return copy(_employees + ([]));
office.c | 515 | query_list_array() { return copy(m_indices(_list) + ({}));
office.c | 523 | query_list_mapping() { return copy(_list) + ([]);
office.c | 536 | query_multiple_short(m_indices(_list));
office.c | 550 | if (_employees[player]) return (_employees[player][EMP_POINTS] & MANAGER);
office.c | 559 | query_maxemp() { return copy(_max_emp);
office.c | 565 | query_mgr_office() { return copy(_mgr_office);
office.c | 571 | query_num_cabinets() { return copy(_num_cabinets);
office.c | 579 | query_pay() { return copy(_pay_val);
office.c | 586 | query_place() { return copy(_place);
office.c | 597 | load_policies();
office.c | 598 | clear_policies();
office.c | 600 | load_new_policies();
office.c | 601 | clear_new_policies();
office.c | 614 | query_profit() { return copy(_accounts["profit"]);
office.c | 621 | query_proprietor() { return copy(_proprietor);
office.c | 638 | query_savedir() { return copy(_savedir);
office.c | 645 | query_shop_front() { return copy(_shop_front);
office.c | 652 | query_shop_name() { return copy(_shop_name);
office.c | 659 | query_shopkeeper() { return copy(_shopkeeper);
office.c | 668 | query_stock(string items) { return _storeroom->query_num_items(items, 0);
office.c | 675 | query_storeroom() { return copy(_storeroom);
office.c | 688 | return (_employees[player][EMP_POINTS] & SUPERVISOR);
office.c | 704 | remove_call_out(_call_emps);
office.c | 705 | call_out((: do_save_emps() :), SAVE_DELAY);
office.c | 720 | remove_call_out(_call_save);
office.c | 721 | call_out((: do_save() :), SAVE_DELAY);
office.c | 730 | set_channel( "tarnachcs", 0 );
office.c | 737 | lower_case(name);
office.c | 740 | clone_object("/obj/misc/board");
office.c | 741 | set_datafile(name);
office.c | 742 | move(this_object());
office.c | 751 | set_counter( PATH + "counter" );
office.c | 762 | set_creator( "ringo" );
office.c | 773 | set_directions( "southeast", "southeast", "southeast" );
office.c | 791 | set_place( "Lancre" );
office.c | 801 | set_proprietor( "Tarnach Fendertwin" );
office.c | 809 | set_shop_front( PATH + "shopfront" );
office.c | 819 | set_shop_name( "Tarnach Fendertwin's Quality Consumables (Creel Springs)" );
office.c | 827 | set_shopkeeper( PATH + "shopkeeper" );
office.c | 834 | query_name();
office.c | 844 | set_storeroom( PATH + "storeroom" );
office.c | 853 | set_stock_policy( "magical spell components" );
office.c | 864 | set_very_short( "TFQC-CS" );
office.c | 875 | lower_case(geteuid(this_object())), name);
office.c | 876 | if (file_size(_savedir+ "shop_data.o") >
office.c | 877 | unguarded((: restore_object, _savedir+ "shop_data" :));
office.c | 878 | if (file_size(_savedir+ "employees") >
office.c | 881 | if (file_size(_savedir+ "times") >
office.c | 884 | if (file_size(_savedir+ "list") >
office.c | 885 | restore_variable(unguarded((: read_file, _savedir+ "list" :)));
office.c | 894 | shop_very_short() { return copy(_very_short);
shop_front.c | 35 | tinkle_bell(opening);
shop_front.c | 47 | set_light(60);
shop_front.c | 48 | set_office( PATH+ "office" );
shop_front.c | 58 | query_list_string() +".  Employement enquyries wellcome!" );
shop_front.c | 59 | set_exit_counter( "west" );
shop_front.c | 60 | set_exit_out( "east", "/d/ram/Lancre_Kingdom/Creel_Springs_pt/creel_springs02" );
shop_front.c | 91 | abort_app(class applying_player);
shop_front.c | 92 | apply(class applying_player);
shop_front.c | 93 | cap_name(string);
shop_front.c | 94 | check_employee(string, object, string);
shop_front.c | 95 | confirm_abort(string, class applying_player);
shop_front.c | 96 | confirm_apply(string, string, class applying_player);
shop_front.c | 97 | continue_loop(class applying_player);
shop_front.c | 98 | directions_to(string);
shop_front.c | 99 | do_apply();
shop_front.c | 100 | do_cancel();
shop_front.c | 101 | do_complain();
shop_front.c | 102 | do_confirm();
shop_front.c | 103 | do_push();
shop_front.c | 104 | do_suggestion();
shop_front.c | 105 | end_app(class applying_player);
shop_front.c | 106 | end_complaint(string);
shop_front.c | 107 | end_suggestion(string);
shop_front.c | 108 | finish_edit(string, class applying_player);
shop_front.c | 109 | query_office();
shop_front.c | 110 | query_outside();
shop_front.c | 111 | set_exit_counter(string);
shop_front.c | 112 | set_exit_out(string, string);
shop_front.c | 113 | set_office(string);
shop_front.c | 114 | sign_text();
shop_front.c | 115 | tinkle_bell(string);
shop_front.c | 122 | create();
shop_front.c | 124 | add_property("no burial", 1);
shop_front.c | 125 | add_property("los", "closed");
shop_front.c | 126 | add_property("determinate", "");
shop_front.c | 141 | do_push() :)}));
shop_front.c | 144 | this_object()->setup();
shop_front.c | 145 | this_object()->reset();
shop_front.c | 147 | add_help_file("player_shop_shopfront");
shop_front.c | 157 | init();
shop_front.c | 159 | this_player()->query_name();
shop_front.c | 160 | summon_shopkeeper();
shop_front.c | 161 | add_command("complain", "", (: do_complain() :));
shop_front.c | 162 | add_command("suggestion", "", (: do_suggestion() :));
shop_front.c | 164 | add_command("apply", "", (: do_apply() :));
shop_front.c | 166 | add_command("confirm", "employment", (: do_confirm() :));
shop_front.c | 168 | add_command( "cancel", "application", (: do_cancel() :) );
shop_front.c | 178 | input_to((: confirm_abort($1,$(player_info)) :), 0);
shop_front.c | 186 | this_player();
shop_front.c | 187 | tell_object(tp, "\n\n");
shop_front.c | 195 | continue_loop(player_info);
shop_front.c | 204 | query_cap_name(name);
shop_front.c | 205 | capitalize(name);
shop_front.c | 213 | query_employee(thing->query_name());
shop_front.c | 221 | lower_case(confirm);
shop_front.c | 226 | input_to((: confirm_abort($1,$(player_info)) :), 0);
shop_front.c | 231 | continue_loop(player_info);
shop_front.c | 234 | tell_object(this_player(), "Application aborted.\n");
shop_front.c | 246 | lower_case( str );
shop_front.c | 250 | application (Yes or No)? ");
shop_front.c | 251 | input_to((: confirm_apply($1,$(message),$(player_info)) :), 0);
shop_front.c | 256 | confirm_abort("y", player_info);
shop_front.c | 259 | this_player()->query_name();
shop_front.c | 260 | get_managers();
shop_front.c | 261 | if (!sizeof(managers)) managers = ({ _office->query_creator() });
shop_front.c | 267 | add_applicant(from, message);
shop_front.c | 286 | this_player()->do_edit("", (: finish_edit($1,$(player_info)) :), 0);
shop_front.c | 295 | copy(_inside);
shop_front.c | 313 | this_player()->query_name();
shop_front.c | 318 | tell_object(this_player(), "You've already applied here!\n");
shop_front.c | 327 | get_applicants();
shop_front.c | 337 | new(class applying_player);
shop_front.c | 340 | call_out((: apply($(player_info)) :), 0);
shop_front.c | 341 | add_succeeded_mess("");
shop_front.c | 348 | do_cancel() { return _office->do_cancel();
shop_front.c | 363 | cap_name(_office->query_creator())+ ".\n");
shop_front.c | 365 | end_complaint($1) :));
shop_front.c | 366 | add_succeeded_mess("");
shop_front.c | 373 | do_confirm() { return _office->do_confirm();
shop_front.c | 383 | notify_fail("There's already an employee here: You!\n");
shop_front.c | 385 | notify_fail( "You push the bell, but no-one can hear you.\n" );
shop_front.c | 386 | this_player()->add_property("shop bell pressed", 1, BELL_TIMEOUT);
shop_front.c | 388 | query_short() + " called for assistance.");
shop_front.c | 391 | add_succeeded_mess("$N $V the bell.\n");
shop_front.c | 405 | tell_object(this_player(), SUGGEST_TEXT+ "\n");
shop_front.c | 407 | end_suggestion($1) :));
shop_front.c | 408 | add_succeeded_mess("");
shop_front.c | 419 | sizeof(APP_QUESTIONS);
shop_front.c | 423 | sprintf("      %-=*s\n\n", 72, player_info->answers[i]);
shop_front.c | 427 | input_to((: confirm_apply($1,$(message),$(player_info)) :), 0);
shop_front.c | 439 | tell_object(this_player(), "Aborted.\n");
shop_front.c | 443 | query_creator()});
shop_front.c | 460 | tell_object( this_player(), "Aborted.\n" );
shop_front.c | 464 | query_creator()});
shop_front.c | 477 | event_death(k,o,k2,r,k3);
shop_front.c | 487 | query_name();
shop_front.c | 491 | get_baddies();
shop_front.c | 496 | query_possessive()+ " will.\n", ({ob}));
shop_front.c | 500 | query_num(days)+ " days.\n");
shop_front.c | 501 | move(_outside);
shop_front.c | 518 | num_employees_in();
shop_front.c | 531 | abort_app(player_info);
shop_front.c | 536 | if (player_info->step == sizeof(APP_QUESTIONS)) end_app(player_info);
shop_front.c | 537 | continue_loop(player_info);
shop_front.c | 546 | query_office() { return copy(_office);
shop_front.c | 553 | query_outside() { return copy(_outside);
shop_front.c | 560 | set_exit_counter( "west" );
shop_front.c | 566 | add_exit(direction, _counter, "hidden");
shop_front.c | 567 | modify_exit(direction, ({"function", "check_employee"}));
shop_front.c | 577 | set_exit_out( "east", "/d/ram/Lancre_Kingdom/Creel_Springs_pt/creel_springs02" );
shop_front.c | 584 | add_exit(direction, path, "door");
shop_front.c | 593 | set_office( PATH + "office" );
shop_front.c | 599 | query_counter();
shop_front.c | 600 | query_mgr_office();
shop_front.c | 601 | query_storeroom();
shop_front.c | 602 | query_channel();
shop_front.c | 603 | set_short( path->query_shop_name() );
shop_front.c | 606 | add_property("there", "on one wall");
shop_front.c | 613 | query_eom();
shop_front.c | 615 | cap_name(eom[1]));
storeroom.c | 52 | set_light(60);
storeroom.c | 53 | set_directions( "north", "north", "north" );
storeroom.c | 54 | set_office( PATH+ "office" );
storeroom.c | 56 | set_short( "storeroom of Tarnach's shop" );
storeroom.c | 59 | add_exit( "north", PATH+ "counter", "door");
storeroom.c | 94 | add_cabinet();
storeroom.c | 95 | clear_cabinets();
storeroom.c | 96 | directions_to(string);
storeroom.c | 97 | do_add(object *, mixed *);
storeroom.c | 98 | do_list(mixed *, string);
storeroom.c | 99 | do_remove(mixed *);
storeroom.c | 100 | init_cabinets();
storeroom.c | 101 | pull_roll();
storeroom.c | 102 | query_content(int);
storeroom.c | 103 | query_num_items(string, int);
storeroom.c | 104 | query_office();
storeroom.c | 105 | query_stock(string);
storeroom.c | 106 | remove_cabinet();
storeroom.c | 107 | set_directions(string, string, string);
storeroom.c | 108 | set_office(string);
storeroom.c | 114 | create();
storeroom.c | 116 | add_property("no burial", 1);
storeroom.c | 117 | add_property("determinate", "");
storeroom.c | 127 | this_object()->setup();
storeroom.c | 128 | this_object()->reset();
storeroom.c | 130 | add_help_file("player_shop_storeroom");
storeroom.c | 138 | init();
storeroom.c | 142 | do_add($1,$4) :));
storeroom.c | 143 | add_command("pull", "roll", (: pull_roll() :));
storeroom.c | 149 | do_list($4,$5) :));
storeroom.c | 152 | do_remove($4) :));
storeroom.c | 156 | do_list($4,$5) :));
storeroom.c | 169 | LOG_ERROR("storeroom.c", "add_cabinet()");
storeroom.c | 173 | init_cabinets();
storeroom.c | 175 | clone_object(CABINET);
storeroom.c | 176 | set_name(cab_name);
storeroom.c | 177 | set_save_file(_office->query_savedir()+ cab_name);
storeroom.c | 189 | tell_creator(CREATOR, "Clearing cabinets.\n");
storeroom.c | 191 | foreach (object cabinet in _cabinets) cabinet->dest_me();
storeroom.c | 200 | remove_call_out(_call_cabs_clear);
storeroom.c | 201 | clear_cabinets();
storeroom.c | 202 | dest_me();
storeroom.c | 210 | if (place == _counter) return copy(_counter_dir);
storeroom.c | 211 | if (place == _office) return copy(_office_dir);
storeroom.c | 212 | if (place == _shop_front) return copy(_shop_dir);
storeroom.c | 225 | add_succeeded_mess("");
storeroom.c | 226 | if (sizeof(args) >
storeroom.c | 231 | tell_object(this_player(), "That cabinet does not exist!\n");
storeroom.c | 235 | init_cabinets();
storeroom.c | 241 | parse_command(plural, items, "%i", test);
storeroom.c | 259 | query_amount();
storeroom.c | 263 | sizeof(test);
storeroom.c | 273 | query_amount();
storeroom.c | 285 | tell_object(this_player(), "That cabinet is already full.\n");
storeroom.c | 300 | make_medium_clone(cab_i);
storeroom.c | 301 | adjust_amount(-cab_i);
storeroom.c | 303 | move(this_player());
storeroom.c | 317 | make_medium_clone(tot_i);
storeroom.c | 318 | adjust_amount(-tot_i);
storeroom.c | 320 | move(this_player());
storeroom.c | 334 | add_items(test, this_player());
storeroom.c | 338 | query_amount();
storeroom.c | 342 | sizeof(temp_fail);
storeroom.c | 359 | query_amount();
storeroom.c | 378 | make_medium_clone(cab_i);
storeroom.c | 379 | adjust_amount(-cab_i);
storeroom.c | 382 | add_items(({temp}), this_player());
storeroom.c | 388 | add_items(test[0 .. (cab_i - 1)], this_player());
storeroom.c | 397 | query_amount();
storeroom.c | 401 | sizeof(temp_fail);
storeroom.c | 409 | query_multiple_short(test)+ ".\n");
storeroom.c | 412 | query_amount();
storeroom.c | 416 | sizeof(test);
storeroom.c | 422 | adjust_bought(plural, temp_num);
storeroom.c | 426 | tell_creator(CREATOR,"Creating %s cache entry.\n", plural);
storeroom.c | 438 | query_multiple_short(failed);
storeroom.c | 441 | this_player()}));
storeroom.c | 447 | query_multiple_short(okay);
storeroom.c | 465 | add_succeeded_mess("");
storeroom.c | 466 | init_cabinets();
storeroom.c | 468 | sizeof(all_inventory(cabinet));
storeroom.c | 480 | query_shop_name(), ctime(time()));
storeroom.c | 484 | reset_eval_cost(MAX_STOCK);
storeroom.c | 489 | tell_object(this_player(), "$P$Stock list$P$"+ result);
storeroom.c | 500 | tell_object(this_player(), "That cabinet does not exist!\n");
storeroom.c | 510 | ctime(time()));
storeroom.c | 538 | ctime(time()), query_multiple_short(found_items));
storeroom.c | 539 | tell_object(this_player(), "$P$List of " + args[0]+ "$P$"+ result);
storeroom.c | 546 | tell_object(this_player(), "That cabinet does not exist!\n");
storeroom.c | 559 | tell_object(this_player(), "There are no "+ args[0]+ " in stock.\n");
storeroom.c | 565 | query_multiple_short(found_items)));
storeroom.c | 578 | add_succeeded_mess("");
storeroom.c | 579 | if (sizeof(args) >
storeroom.c | 586 | init_cabinets();
storeroom.c | 591 | for(int i = sizeof(_cabinets);
storeroom.c | 599 | if (stock[0]->query_amount() >
storeroom.c | 601 | make_medium_clone(number);
storeroom.c | 603 | adjust_amount(-number);
storeroom.c | 606 | move(environment(this_player()));
storeroom.c | 612 | query_amount();
storeroom.c | 614 | remove_items(stock, this_player());
storeroom.c | 619 | if (sizeof(stock) >
storeroom.c | 621 | remove_items(stock, this_player());
storeroom.c | 622 | sizeof(stock);
storeroom.c | 632 | remove_items(items, this_player());
storeroom.c | 638 | pluralize(args[1]);
storeroom.c | 645 | tell_creator(CREATOR,"Creating %s cache entry.\n", args[1]);
storeroom.c | 658 | this_player()}));
storeroom.c | 660 | query_multiple_short(failed)+ " on the floor.\n");
storeroom.c | 664 | query_shopkeeper()->set_failed(sizeof(failed));
storeroom.c | 673 | parse_command(plural, items, "%i", test);
storeroom.c | 675 | adjust_sold(plural, sizeof(test) - 1);
storeroom.c | 688 | event_death(k,o,k2,r,k3);
storeroom.c | 696 | event_enter(ob, message, from);
storeroom.c | 705 | long(word,dark), _num_cabinets);
storeroom.c | 716 | tell_creator(CREATOR, "Initialising cabinets.\n");
storeroom.c | 722 | clone_object(CABINET);
storeroom.c | 723 | set_name(cab_name);
storeroom.c | 724 | set_save_file(_office->query_savedir()+ cab_name);
storeroom.c | 728 | call_out((: clear_cabinets() :), CLEAR_DELAY);
storeroom.c | 739 | clone_object(SHOP_BAG);
storeroom.c | 740 | sscanf(amtime(time()), "%*s %s %s %s", day, day2, month);
storeroom.c | 746 | query_place());
storeroom.c | 748 | query_shop_name(), _office->query_place());
storeroom.c | 749 | set_read_mess(message);
storeroom.c | 750 | set_max_cond(400);
storeroom.c | 751 | set_cond(400);
storeroom.c | 754 | move(this_object());
storeroom.c | 773 | init_cabinets();
storeroom.c | 784 | query_amount();
storeroom.c | 788 | sizeof(obs);
storeroom.c | 793 | query_stock(item);
storeroom.c | 803 | query_office() { return copy(_office);
storeroom.c | 814 | init_cabinets();
storeroom.c | 819 | tell_creator(CREATOR,"Creating %s cache entry.\n", item);
storeroom.c | 826 | tell_creator("ringo","Updating %s in cache.\n", item);
storeroom.c | 828 | reset_eval_cost(MAX_STOCK);
storeroom.c | 836 | query_amount();
storeroom.c | 840 | sizeof(obs);
storeroom.c | 856 | LOG_ERROR("storeroom.c", "remove_cabinet()");
storeroom.c | 860 | init_cabinets();
storeroom.c | 864 | move("/room/rubbish");
storeroom.c | 865 | query_name();
storeroom.c | 894 | set_long(long_desc);
storeroom.c | 906 | query_counter();
storeroom.c | 907 | query_mgr_office();
storeroom.c | 908 | query_shop_front();
storeroom.c | 909 | query_num_cabinets();
shopkeeper.c | 50 | set_name( "betty" );
shopkeeper.c | 51 | set_short( "Miss Betty Scuttle" );
shopkeeper.c | 52 | basic_setup( "human" , "fighter" , 15 );
shopkeeper.c | 53 | set_gender( "female" );
shopkeeper.c | 54 | add_alias( ({ "scuttle", "betty scuttle", "miss betty scuttle" }) );
shopkeeper.c | 57 | set_office( PATH + "office" );
shopkeeper.c | 58 | set_dearie( ({ "love", "my dear", "dear", "honey" }) );
shopkeeper.c | 59 | set_work_hours( ({0,0,23,59,}) );
shopkeeper.c | 77 | do_command( "'I'm sorry, we don't buy uncharged magic wands." );
shopkeeper.c | 90 | do_command( "'We can't accept unpickled items." );
shopkeeper.c | 92 | return ( give_back_wand + give_back_unpickled );
shopkeeper.c | 146 | announce_number();
shopkeeper.c | 147 | announce_price();
shopkeeper.c | 148 | buy_something(object *);
shopkeeper.c | 149 | check_money(mixed);
shopkeeper.c | 150 | deposit_money();
shopkeeper.c | 151 | do_buy(string);
shopkeeper.c | 152 | do_browse(string);
shopkeeper.c | 153 | do_list(mixed  *);
shopkeeper.c | 154 | do_sell(object *);
shopkeeper.c | 155 | end_shift();
shopkeeper.c | 156 | get_from_store();
shopkeeper.c | 157 | get_money();
shopkeeper.c | 158 | get_more_stuff();
shopkeeper.c | 159 | give_stuff();
shopkeeper.c | 160 | how_many(string);
shopkeeper.c | 161 | how_much(string);
shopkeeper.c | 162 | look_chart();
shopkeeper.c | 163 | look_how_much();
shopkeeper.c | 164 | no_coins();
shopkeeper.c | 165 | outside_hours(int);
shopkeeper.c | 166 | put_in_store();
shopkeeper.c | 167 | query_busy();
shopkeeper.c | 168 | query_office();
shopkeeper.c | 169 | say_to_room(object, string, string);
shopkeeper.c | 170 | sell_something(string);
shopkeeper.c | 171 | item_test(object *);
shopkeeper.c | 172 | set_dearie(string *);
shopkeeper.c | 173 | set_failed(int);
shopkeeper.c | 174 | set_office(string);
shopkeeper.c | 175 | set_work_hours(int *);
shopkeeper.c | 176 | shuffle_to(string,function);
shopkeeper.c | 177 | sort_keys(string, string, int);
shopkeeper.c | 178 | start_shift();
shopkeeper.c | 179 | taken_over();
shopkeeper.c | 180 | what_items();
shopkeeper.c | 186 | create();
shopkeeper.c | 188 | add_property("determinate", "");
shopkeeper.c | 189 | add_property("unique", 1);
shopkeeper.c | 190 | add_property("run away", -1);
shopkeeper.c | 191 | add_alias("shopkeeper");
shopkeeper.c | 194 | this_object()->setup();
shopkeeper.c | 195 | this_object()->reset();
shopkeeper.c | 205 | query_num_items(_info);
shopkeeper.c | 210 | num_str(number) + " in stock.");
shopkeeper.c | 212 | reset_busy();
shopkeeper.c | 226 | reset_busy();
shopkeeper.c | 236 | this_object()->stop_fight(baddie);
shopkeeper.c | 237 | stop_fight(this_object());
shopkeeper.c | 238 | do_command("'Why are you attacking me, "+ baddie->query_cap_name()+ "?");
shopkeeper.c | 239 | do_command("'I'm not staying here for this!");
shopkeeper.c | 241 | query_cap_name()+ ".");
shopkeeper.c | 242 | call_out("shuffle_to", NPC_DELAY, _office, (: end_shift() :));
shopkeeper.c | 243 | event_death(this_object(), 0, baddie, 0, 0);
shopkeeper.c | 245 | tell_creator(CREATOR,  "Attacked by %s.\n", baddie->query_short());
shopkeeper.c | 255 | clone_object("/std/container");
shopkeeper.c | 257 | move(cont);
shopkeeper.c | 264 | move(_busy);
shopkeeper.c | 266 | query_multiple_short(give_back)+ " from you"+ DEARIE+ ".");
shopkeeper.c | 271 | query_amount();
shopkeeper.c | 275 | move(_busy);
shopkeeper.c | 277 | num_str(MAX_INVEN+ query_dex())+ " items.");
shopkeeper.c | 278 | dest_me();
shopkeeper.c | 279 | reset_busy();
shopkeeper.c | 283 | filter(_info, (: ($1)->query_continuous() :));
shopkeeper.c | 288 | query_multiple_short(give_back)+ " in.");
shopkeeper.c | 289 | move(_busy);
shopkeeper.c | 292 | item_test(_info);
shopkeeper.c | 295 | move(_busy);
shopkeeper.c | 300 | do_command("'You don't have anything to sell"+ DEARIE+ ".");
shopkeeper.c | 301 | dest_me();
shopkeeper.c | 302 | reset_busy();
shopkeeper.c | 306 | query_amount();
shopkeeper.c | 308 | tell_creator(CREATOR,  "Checking stock.\n");
shopkeeper.c | 311 | query_stock(pluralize(_info[0]->query_name()));
shopkeeper.c | 318 | query_stock(pluralize(alias))) >
shopkeeper.c | 323 | query_stock(pluralize(_info[0]->query_short()));
shopkeeper.c | 326 | do_command("'I'm afraid we don't need any of those"+ DEARIE+ ".");
shopkeeper.c | 327 | move(_busy);
shopkeeper.c | 328 | dest_me();
shopkeeper.c | 329 | reset_busy();
shopkeeper.c | 335 | num_str(spare)+ " from you.");
shopkeeper.c | 336 | move(_busy);
shopkeeper.c | 337 | dest_me();
shopkeeper.c | 338 | reset_busy();
shopkeeper.c | 344 | tell_creator(CREATOR,  "Checking money.\n");
shopkeeper.c | 352 | query_amount();
shopkeeper.c | 358 | query_multiple_short(_info) + " from you" + DEARIE+ ".");
shopkeeper.c | 359 | move(_busy);
shopkeeper.c | 360 | dest_me();
shopkeeper.c | 361 | reset_busy();
shopkeeper.c | 368 | tell_creator(CREATOR,  "Checking we can carry it.\n");
shopkeeper.c | 377 | tell_creator(CREATOR,  "Can't carry %O.\n", thing);
shopkeeper.c | 382 | query_multiple_short(_info) +".\n");
shopkeeper.c | 389 | move(_busy);
shopkeeper.c | 394 | query_multiple_short(obs, "the") +" from you"+ DEARIE+ ".");
shopkeeper.c | 395 | move(_busy);
shopkeeper.c | 397 | all_inventory(cont);
shopkeeper.c | 403 | tell_creator(CREATOR,  "Buying: %O\n", _info);
shopkeeper.c | 405 | do_command("'I'll be right back.");
shopkeeper.c | 406 | call_out("shuffle_to", NPC_DELAY, _counter, (: get_money() :));
shopkeeper.c | 408 | reset_busy();
shopkeeper.c | 409 | dest_me();
shopkeeper.c | 424 | tell_creator(CREATOR, "No correct change (%d).\n", query_value_in(_place));
shopkeeper.c | 426 | do_command("put coins in register");
shopkeeper.c | 427 | call_out("shuffle_to", NPC_DELAY, _shop_front, (: no_coins() :));
shopkeeper.c | 434 | query_value_in( _place ) );
shopkeeper.c | 436 | call_out("shuffle_to", NPC_DELAY, _storeroom, (: put_in_store() :));
shopkeeper.c | 448 | do_command("put coins in register");
shopkeeper.c | 450 | call_out("shuffle_to", NPC_DELAY, _storeroom, (: get_from_store() :));
shopkeeper.c | 459 | tell_creator(CREATOR,  "In do_buy()\n");
shopkeeper.c | 465 | init_command(":seems busy at the moment.", NPC_DELAY);
shopkeeper.c | 468 | set_busy(this_player());
shopkeeper.c | 469 | call_out((: sell_something($(stuff)) :), NPC_DELAY);
shopkeeper.c | 480 | tell_creator(CREATOR,  "In do_browse()\n");
shopkeeper.c | 483 | say_to_room(this_player(), "ask", "How much do "+ item +" cost?\n");
shopkeeper.c | 485 | init_command(":seems busy at the moment.", NPC_DELAY);
shopkeeper.c | 488 | set_busy(this_player());
shopkeeper.c | 489 | call_out((: how_much($(item)) :), NPC_DELAY);
shopkeeper.c | 500 | tell_creator(CREATOR,  "In do_list()\n");
shopkeeper.c | 505 | say_to_room( this_player(), "ask", "What items do you buy and sell?\n");
shopkeeper.c | 507 | init_command(":seems busy at the moment.", NPC_DELAY);
shopkeeper.c | 510 | set_busy(this_player());
shopkeeper.c | 511 | call_out((: what_items() :), NPC_DELAY);
shopkeeper.c | 515 | say_to_room(this_player(), "ask", "How many "+ args[0]+ " do you have?\n");
shopkeeper.c | 517 | init_command(":seems busy at the moment.", NPC_DELAY);
shopkeeper.c | 520 | set_busy(this_player());
shopkeeper.c | 521 | call_out((: how_many($(args[0])) :), NPC_DELAY);
shopkeeper.c | 532 | tell_creator(CREATOR,  "In do_sell()\n" );
shopkeeper.c | 536 | query_multiple_short(obs, "the")+ ", please.\n%^RESET%^");
shopkeeper.c | 538 | init_command(":seems busy at the moment.", NPC_DELAY);
shopkeeper.c | 541 | set_busy(this_player());
shopkeeper.c | 542 | call_out((: buy_something($(obs)) :), NPC_DELAY);
shopkeeper.c | 553 | do_command(_office->query_channel()+ "@ is clocking out.");
shopkeeper.c | 554 | do_command("clock out");
shopkeeper.c | 555 | move("/room/rubbish", "$N make$s some tea.", "$N go$s home for tea.");
shopkeeper.c | 566 | tell_creator(CREATOR,  "In event_person_say()\n" );
shopkeeper.c | 570 | lower_case(mess);
shopkeeper.c | 572 | set_busy(thing);
shopkeeper.c | 575 | call_out((: sell_something($(words)) :), NPC_DELAY);
shopkeeper.c | 580 | call_out((: how_many($(words)) :), NPC_DELAY);
shopkeeper.c | 585 | call_out((: how_much($(words)) :), NPC_DELAY);
shopkeeper.c | 592 | call_out((: taken_over() :), NPC_DELAY);
shopkeeper.c | 595 | reset_busy();
shopkeeper.c | 596 | event_person_say(thing, start, mess, lang);
shopkeeper.c | 606 | to_int(_info[1]);
shopkeeper.c | 610 | if (info1 > (MAX_INVEN + query_dex())) number = MAX_INVEN + query_dex();
shopkeeper.c | 613 | tell_creator(CREATOR, "Removing %d %s\n", number, _info[0]);
shopkeeper.c | 615 | all_inventory();
shopkeeper.c | 616 | do_command("remove " + number+ " "+ _info[0]);
shopkeeper.c | 619 | do_command("add "+ _failed+ " "+ _info[0]);
shopkeeper.c | 620 | do_command("get "+ _info[0]);
shopkeeper.c | 628 | query_weight();
shopkeeper.c | 634 | do_command("pull roll");
shopkeeper.c | 636 | do_command("put "+ _info[0]+ " in bag "+ (i+1));
shopkeeper.c | 641 | sprintf("%d",info1);
shopkeeper.c | 643 | get_more_stuff() :));
shopkeeper.c | 647 | call_out("shuffle_to", NPC_DELAY, _shop_front, (: give_stuff() :));
shopkeeper.c | 660 | sort_keys($1,$2,1) :));
shopkeeper.c | 662 | sort_keys($1,$2,0) :));
shopkeeper.c | 665 | tell_creator(CREATOR, "Singular: %O\n", sort_keys_sing);
shopkeeper.c | 666 | tell_creator(CREATOR, "Plural: %O\n", sort_keys_plural);
shopkeeper.c | 673 | tell_creator(CREATOR, "We have %d %s\n", sizeof(things), item);
shopkeeper.c | 678 | query_amount();
shopkeeper.c | 679 | query_buy(item);
shopkeeper.c | 682 | num_str(monies[1]) + ".");
shopkeeper.c | 691 | sizeof(sort_keys_sing);
shopkeeper.c | 699 | tell_creator(CREATOR, "Trying to get %s\n", coins);
shopkeeper.c | 701 | do_command("get "+ coins+ " from register");
shopkeeper.c | 706 | tell_creator(CREATOR, "New total: %d\n", total);
shopkeeper.c | 716 | call_out((: check_money($(monies)) :), 1);
shopkeeper.c | 719 | call_out("shuffle_to", NPC_DELAY, _storeroom, (: put_in_store() :));
shopkeeper.c | 729 | do_command("give all to "+ _busy->query_name());
shopkeeper.c | 730 | do_command("drop all");
shopkeeper.c | 734 | get_from_store() :) );
shopkeeper.c | 739 | do_command("'Well now.  I wonder where they could have gone.");
shopkeeper.c | 740 | do_command("ponder");
shopkeeper.c | 742 | do_command("drop all");
shopkeeper.c | 743 | reset_busy();
shopkeeper.c | 754 | do_command("give all to "+ _busy->query_name());
shopkeeper.c | 755 | do_command("'Thank you for your custom" + DEARIE+ ".");
shopkeeper.c | 759 | do_command("'Well now.  I wonder where they could have gone.");
shopkeeper.c | 760 | do_command("ponder");
shopkeeper.c | 762 | do_command("drop all");
shopkeeper.c | 763 | reset_busy();
shopkeeper.c | 777 | do_command("'I'm afraid we don't deal in those" + DEARIE+ ".");
shopkeeper.c | 778 | reset_busy();
shopkeeper.c | 781 | do_command("'"+ capitalize( _info ) +"?  I'll just go and see.");
shopkeeper.c | 782 | call_out("shuffle_to", NPC_DELAY, _office, (: look_chart() :));
shopkeeper.c | 795 | do_command("'I'm afraid we don't deal in those"+ DEARIE+ ".");
shopkeeper.c | 796 | reset_busy();
shopkeeper.c | 799 | do_command("'"+ capitalize( _info ) +"?  I'll just go and see.");
shopkeeper.c | 800 | call_out("shuffle_to", NPC_DELAY, _office, (: look_how_much() :));
shopkeeper.c | 808 | this_player();
shopkeeper.c | 811 | tell_creator(CREATOR,  "In init()\n" );
shopkeeper.c | 815 | tell_creator(CREATOR,  "Not in /room/rubbish\n");
shopkeeper.c | 817 | init();
shopkeeper.c | 819 | do_buy($4[0]) :));
shopkeeper.c | 821 | do_sell($1) :));
shopkeeper.c | 823 | do_list($4) :));
shopkeeper.c | 825 | do_browse($4[0]) :));
shopkeeper.c | 826 | outside_hours(TRUE);
shopkeeper.c | 834 | if (stringp(_info)) do_command("'Now, let me see, "+ _info +"...");
shopkeeper.c | 835 | call_out("shuffle_to", NPC_DELAY, _shop_front, (: announce_number() :));
shopkeeper.c | 843 | if (stringp(_info)) do_command("'Now, let me see, "+ _info +"...");
shopkeeper.c | 844 | call_out("shuffle_to", NPC_DELAY, _shop_front, (: announce_price() :));
shopkeeper.c | 854 | do_command("give all to "+ _busy->query_name());
shopkeeper.c | 860 | do_command("'Well now.  I wonder where they could have gone.");
shopkeeper.c | 861 | do_command("ponder");
shopkeeper.c | 863 | do_command("drop all");
shopkeeper.c | 864 | reset_busy();
shopkeeper.c | 887 | tell_creator(CREATOR, "Time is %02d:%02d%s.\n", hrs, mins, am_pm);
shopkeeper.c | 896 | tell_creator(CREATOR, "Which is %02d:%02d.\n", hrs, mins);
shopkeeper.c | 909 | move("/room/rubbish");
shopkeeper.c | 916 | call_out("shuffle_to", NPC_DELAY, _office, (: end_shift() :));
shopkeeper.c | 928 | if (pointerp(_info)) do_command("add all");
shopkeeper.c | 929 | do_command("drop all");
shopkeeper.c | 931 | do_command("get every "+ value);
shopkeeper.c | 932 | call_out("shuffle_to", NPC_DELAY, _shop_front, (: give_stuff() :));
shopkeeper.c | 943 | return (_busy != 0);
shopkeeper.c | 952 | query_office() { return copy(_office);
shopkeeper.c | 958 | tell_object(me, "You "+ t+ ": "+ message);
shopkeeper.c | 962 | query_short()+ " "+ t + "s: "+ message);
shopkeeper.c | 980 | do_command("'I'm afraid we don't deal in those"+ DEARIE+ ".");
shopkeeper.c | 981 | reset_busy();
shopkeeper.c | 986 | tell_creator(CREATOR, "Customer asked for %d %s.\n", number, _info);
shopkeeper.c | 994 | reset_busy();
shopkeeper.c | 998 | num_str(in_stock)+ ".");
shopkeeper.c | 999 | reset_busy();
shopkeeper.c | 1005 | do_command("'My, my.  You are amusing aren't you" + DEARIE+ "?");
shopkeeper.c | 1006 | do_command("peer "+ _busy->query_name());
shopkeeper.c | 1007 | reset_busy();
shopkeeper.c | 1010 | query_sell(_info);
shopkeeper.c | 1013 | num_str(number) + ".");
shopkeeper.c | 1017 | do_command("'I'm afraid you don't have enough money" + DEARIE+ ".");
shopkeeper.c | 1018 | reset_busy();
shopkeeper.c | 1023 | pay_money(money_array, _place);
shopkeeper.c | 1024 | adjust_money(money_array);
shopkeeper.c | 1026 | tell_creator(CREATOR, "Monies adjusted by %O.\n", money_array);
shopkeeper.c | 1030 | do_command("'I'll be right back"+ DEARIE+ ".");
shopkeeper.c | 1031 | sprintf("%d", number), sprintf("%d", each) });
shopkeeper.c | 1033 | tell_creator(CREATOR,  "Selling: %O\n", _info);
shopkeeper.c | 1035 | call_out("shuffle_to", NPC_DELAY, _counter, (: deposit_money() :));
shopkeeper.c | 1065 | do_command( "'We can't accept unpickled items, my dear." );
shopkeeper.c | 1068 | return ( give_back );
shopkeeper.c | 1074 | item_test(mixed * items) { return ({});
shopkeeper.c | 1079 | set_dearie( ({ "dearie", "my dear", ... }) );
shopkeeper.c | 1098 | query_place();
shopkeeper.c | 1099 | smallest_in( _place );
shopkeeper.c | 1100 | smallest_value_in(_place);
shopkeeper.c | 1101 | query_plural_for(_smallest_in);
shopkeeper.c | 1102 | query_mapped_values_in(_place);
shopkeeper.c | 1111 | tell_creator(CREATOR, "Singular values: %O.\n", _values_sing);
shopkeeper.c | 1112 | tell_creator(CREATOR, "Plural values: %O.\n", _values_plural);
shopkeeper.c | 1114 | query_storeroom();
shopkeeper.c | 1115 | query_counter();
shopkeeper.c | 1116 | query_shop_front();
shopkeeper.c | 1117 | add_respond_to_with(({ "@say", "hello" }), "'Hello, $hcname$.  What can I do for you?");
shopkeeper.c | 1118 | add_respond_to_with(({ "@smile", query_name() }), "smile at $hname$");
shopkeeper.c | 1135 | environment()->directions_to(location);
shopkeeper.c | 1143 | query_short().");
shopkeeper.c | 1147 | do_command("'I seem to be lost...");
shopkeeper.c | 1148 | do_command("sob");
shopkeeper.c | 1149 | move(_office, "$N runs in, sobbing.", "$N leave$s, sobbing.");
shopkeeper.c | 1150 | end_shift();
shopkeeper.c | 1153 | call_out("shuffle_to", NPC_DELAY, location, next_action);
shopkeeper.c | 1158 | do_command("smile brightly");
shopkeeper.c | 1159 | do_command("'Here we are.");
shopkeeper.c | 1160 | if (next_action) call_out(next_action, NPC_DELAY);
shopkeeper.c | 1161 | reset_busy();
shopkeeper.c | 1164 | do_command(direc);
shopkeeper.c | 1165 | call_out("shuffle_to", NPC_DELAY, location, next_action);
shopkeeper.c | 1183 | tell_creator(CREATOR,  "In start_shift()\n" );
shopkeeper.c | 1186 | set_busy(this_object());
shopkeeper.c | 1187 | move(_office, "$N arrive$s for " + query_possessive()+ " shift.");
shopkeeper.c | 1189 | do_command("clock out");
shopkeeper.c | 1190 | do_command("claim badge");
shopkeeper.c | 1191 | do_command("wear badge");
shopkeeper.c | 1192 | do_command("clock in");
shopkeeper.c | 1193 | do_command(_office->query_channel()+ "@ is clocking in.");
shopkeeper.c | 1194 | call_out("shuffle_to", NPC_DELAY, _shop_front, 0);
shopkeeper.c | 1202 | do_command("'Okay then" + DEARIE+ ".  See you later.");
shopkeeper.c | 1203 | set_busy(this_object());
shopkeeper.c | 1204 | call_out("shuffle_to", NPC_DELAY, _office, (: end_shift() :));
shopkeeper.c | 1213 | query_list_string()+ ".");
shopkeeper.c | 1214 | reset_busy();
review.c | 21 | m_indices(_employees);
review.c | 24 | ctime(time()), _very_short);
review.c | 28 | adjust_profit(_proprietor, -cabinet_cost);
review.c | 34 | if (_accounts["profit"] < 0) adjust_bonus("Shop",_accounts["profit"]);
review.c | 41 | to_int(_employees[word][EMP_PAY] * pay_multiplier);
review.c | 54 | money_value_string(pay, _place)+ " to "+ cap_name(word), UNPAID);
review.c | 100 | employee_log(_eom, _last_month+ "'s Employee Of The Month");
review.c | 109 | cap_name(_eom)));
review.c | 118 | to_int(_bonus_val * 1.5);
review.c | 127 | money_value_string(_bonus_val, _place), UNPAID);
review.c | 132 | save_me();
review.c | 133 | save_emps();
review.c | 152 | time();
review.c | 155 | m_indices(_employees);
review.c | 158 | ctime(time()), _very_short);
review.c | 167 | fire_them(_proprietor, word, "not existing");
review.c | 171 | fire_them(_proprietor, word, "being a creator");
review.c | 178 | save_emps();
review.c | 182 | employee_log(word, "Demoted by "+ _proprietor);
review.c | 183 | shop_log(PERSONNEL, _proprietor, "demoted "+ cap_name(word), UNPAID);
review.c | 197 | if ((time - _times[word]) >
review.c | 200 | demote( _proprietor, word );
review.c | 212 | employee_log(word, "Warned about inactivity");
review.c | 214 | cap_name(word) + " about inactivity", UNPAID);
review.c | 225 | demote( _proprietor, word );
review.c | 237 | employee_log(word, "Warned about inactivity");
review.c | 239 | cap_name(word) + " about inactivity", UNPAID);
review.c | 252 | set_employee(word, MANAGER);
review.c | 254 | cap_name(word)+ " to manager", UNPAID);
review.c | 255 | employee_log(word, "Promoted to manager");
review.c | 278 | fire_them(_proprietor, word, "serious inactivity");
review.c | 294 | cap_name(word)+ " about inactivity", UNPAID);
review.c | 295 | employee_log(word, "Warned about inactivity");
review.c | 316 | cap_name(word)+ " to supervisor", UNPAID);
review.c | 317 | employee_log(word, "Promoted to supervisor");
review.c | 337 | add_board_message("Promotions", promopost);
review.c | 343 | remove_baddie( word );
review.c | 348 | remove_declined(word);
review.c | 351 | remove_call_out(_call_hire_list);
review.c | 352 | call_out((: check_hire_list() :), 5);
review.c | 353 | save_emps();
review.c | 356 | sizeof(get_managers()) + sizeof(get_retired());
review.c | 357 | load_new_policies();
review.c | 362 | if (sizeof(_new_policies[word][POLICY_FOR]) >
review.c | 364 | add_policy(word);
review.c | 368 | if (sizeof(_new_policies[word][POLICY_FOR]) >
review.c | 371 | add_policy(word);
review.c | 373 | remove_policy(word);
review.c | 378 | clear_new_policies();
review.c | 381 | load_history();
review.c | 387 | map_delete(_times, word);
review.c | 388 | map_delete(_history, word);
review.c | 391 | save_hist();
review.c | 392 | save_times();
save.c | 14 | tell_creator(CREATOR,"Saving shop data to %s/.\n", _savedir);
save.c | 16 | unguarded((: save_object, _savedir+ "shop_data" :));
save.c | 32 | save_variable(_applicants), 1 :));
save.c | 33 | clear_applicants();
save.c | 48 | save_variable(_employees), 1 :));
save.c | 64 | save_variable(_history), 1 :));
save.c | 65 | clear_history();
save.c | 81 | save_variable(_new_policies), 1 :));
save.c | 82 | call_out((: _new_policies= 0 :), CLEAR_DELAY);
save.c | 98 | save_variable(_policies), 1 :));
save.c | 99 | clear_policies();
save.c | 115 | save_variable(_list), 1 :));
save.c | 127 | save_me();
save.c | 143 | save_variable(_times), 1 :));
memo.c | 11 | tell_object(this_player(), "Subject: (hit enter for general memo)\n");
memo.c | 12 | input_to((: write_memo($1) :), 0);
memo.c | 13 | add_succeeded_mess("");
memo.c | 24 | tell_object(this_player(), "Aborted.\n");
memo.c | 27 | tell_object(this_player(), "Do you want to keep a copy of the memo? ");
memo.c | 28 | input_to((: send_memo($1,$(subject),$(text)) :), 0);
memo.c | 39 | this_player();
memo.c | 41 | query_name();
memo.c | 43 | this_player();
memo.c | 44 | query_name();
memo.c | 45 | lower_case(ans);
memo.c | 50 | input_to((: send_memo($1,$(subject),$(text)) :), 0);
memo.c | 59 | if (ans[0] == 'n') employees -= ({tp_name});
memo.c | 63 | tell_creator(CREATOR, "No employees to send mail to.\n");
memo.c | 65 | tell_object(tp, "There is no-one to send a memo to!\n");
memo.c | 70 | implode(employees, "," ));
memo.c | 72 | tell_object( tp, "Sending your memo.\n" );
memo.c | 83 | this_player()->do_edit(0, (: end_memo($1,$(text)) :));
emp_cmd.c | 12 | this_player();
emp_cmd.c | 13 | query_name();
emp_cmd.c | 17 | tell_object(tp, "Creators don't get paid.\n");
emp_cmd.c | 20 | add_succeeded_mess( "" );
emp_cmd.c | 28 | sizeof(BANKS);
emp_cmd.c | 29 | sprintf("     %d: %s\n", x+1, BANKS[x][0]);
emp_cmd.c | 30 | tell_object(tp, message + "\n");
emp_cmd.c | 40 | save_emps();
emp_cmd.c | 41 | tell_object(tp, "You change your bank details.\n");
emp_cmd.c | 54 | this_player();
emp_cmd.c | 56 | query_name();
emp_cmd.c | 61 | clone_object(BADGE);
emp_cmd.c | 62 | set_props(file_name(this_object()), tp->query_name());
emp_cmd.c | 65 | clone_object(STAFF_BOOK);
emp_cmd.c | 68 | query_short()+ "\n\n", "common", 100);
emp_cmd.c | 69 | set_office(file_name(this_object()));
emp_cmd.c | 70 | add_property(_very_short+ " handbook",1);
emp_cmd.c | 89 | to_int(_bonus_val * 1.5);
emp_cmd.c | 111 | make_new_amount(give_bonus, _place);
emp_cmd.c | 113 | money_value_string(give_bonus, _place), UNPAID);
emp_cmd.c | 116 | move(environment(tp));
emp_cmd.c | 120 | save_me();
emp_cmd.c | 122 | money_value_string(give_bonus, _place )+ ".\n");
emp_cmd.c | 128 | move(this_object());
emp_cmd.c | 132 | add_succeeded_mess("$N $V a new "+ item+ ".\n");
emp_cmd.c | 144 | this_player();
emp_cmd.c | 145 | query_name();
emp_cmd.c | 150 | tell_object(tp, "Creators don't clock in or out.\n");
emp_cmd.c | 159 | tell_object(tp, "You are already clocked in!\n");
emp_cmd.c | 164 | remove_call_out(_call_summon);
emp_cmd.c | 171 | save_emps();
emp_cmd.c | 174 | set_employee(word, CLOCKED_IN);
emp_cmd.c | 179 | tell_object(tp, "You are already clocked out!\n");
emp_cmd.c | 184 | remove_call_out(_call_summon);
emp_cmd.c | 185 | call_out((: summon_shopkeeper() :), 60);
emp_cmd.c | 186 | reset_employee(word, CLOCKED_IN);
emp_cmd.c | 189 | add_succeeded_mess("$N $V "+ clock+ ".\n");
emp_cmd.c | 190 | shop_log(GENERAL, word, "clocked "+ clock, pay_them);
applications.c | 14 | LOG_ERROR("office.c", "add_applicant("+player+","+message+")");
applications.c | 17 | lower_case(player);
applications.c | 20 | load_applicants();
applications.c | 21 | if (!sizeof(_applicants)) _applicants = ([ player:APP_MAP ]);
applications.c | 23 | time();
applications.c | 25 | employee_log( player, "Applied for employment" );
applications.c | 26 | save_applicants();
applications.c | 39 | lower_case(applicant);
applications.c | 42 | if (!sizeof(_declined)) _declined = ([applicant:0]);
applications.c | 44 | time();
applications.c | 45 | save_me();
applications.c | 58 | this_player()->query_name();
applications.c | 59 | sizeof(get_managers());
applications.c | 62 | load_applicants();
applications.c | 63 | if (vote == VABSTAIN) _applicants[applicant][APP_ABSTAIN] += ({voter});
applications.c | 64 | if (vote == VFOR) _applicants[applicant][APP_FOR] += ({voter});
applications.c | 66 | shop_log(GENERAL, voter, "voted on "+ cap_name(applicant), PAID);
applications.c | 67 | save_applicants();
applications.c | 68 | sizeof(_applicants[applicant][APP_ABSTAIN]);
applications.c | 70 | if (sizeof(_applicants[applicant][APP_FOR]) >
applications.c | 81 | time();
applications.c | 82 | employee_log(applicant, "Application was accepted");
applications.c | 84 | if (sizeof(_applicants[applicant][APP_AGAINST]) >
applications.c | 90 | remove_applicant(applicant);
applications.c | 97 | employee_log(applicant, "Application was declined");
applications.c | 98 | add_declined(applicant);
applications.c | 116 | load_applicants();
applications.c | 127 | employee_log(word, "Lapsed their application");
applications.c | 128 | remove_applicant(word);
applications.c | 133 | if (sizeof(_applicants[word][APP_FOR]) >
applications.c | 142 | time();
applications.c | 143 | employee_log(word, "Application was accepted");
applications.c | 153 | remove_applicant(word);
applications.c | 160 | employee_log(word, "Application was declined");
applications.c | 161 | add_declined(word);
applications.c | 173 | time();
applications.c | 174 | employee_log(word, "Application was accepted");
applications.c | 179 | sizeof(_employees);
applications.c | 187 | if (count > sizeof(hirees)) count = sizeof( hirees );
applications.c | 190 | hire(hirees[n]);
applications.c | 191 | save_applicants();
applications.c | 202 | this_player();
applications.c | 204 | remove_applicant(tp->query_name());
applications.c | 205 | employee_log(tp->query_name(), "Cancelled application");
applications.c | 206 | tell_object(tp, "You cancel your application.\n");
applications.c | 218 | this_player();
applications.c | 219 | lower_case(tp->query_name());
applications.c | 223 | LOG_ERROR("office.c", "do_confirm()");
applications.c | 226 | load_applicants();
applications.c | 228 | time();
applications.c | 236 | save_applicants();
applications.c | 237 | employee_log(applicant, "Confirmed employment");
applications.c | 238 | tell_object(tp, "You confirm your employment.\n");
applications.c | 251 | this_player()->query_name();
applications.c | 255 | lower_case(args[0]);
applications.c | 268 | load_applicants();
applications.c | 280 | add_vote(args[0], VFOR);
applications.c | 282 | cap_name( args[0] ) + " to work for the shop.\n");
applications.c | 285 | add_vote(args[0], VABSTAIN);
applications.c | 287 | cap_name(args[0] ) + ".\n");
applications.c | 290 | add_vote(args[0], VAGAINST);
applications.c | 292 | cap_name( args[0] ) + " working for the shop.\n");
applications.c | 294 | clear_applicants();
applications.c | 296 | do_policy_vote(tp, args[0], args[1]);
applications.c | 313 | load_applicants();
applications.c | 317 | sizeof(hirees);
applications.c | 322 | clear_applicants();
applications.c | 334 | lower_case(applicant);
applications.c | 337 | load_applicants();
applications.c | 338 | map_delete(_applicants, applicant);
applications.c | 339 | save_applicants();
applications.c | 352 | lower_case(declined);
applications.c | 355 | map_delete(_declined, declined);
applications.c | 356 | save_me();
lists.c | 19 | environment(ob)->query_name() });
lists.c | 23 | find_player(CREATOR);
lists.c | 50 | query_idle(ob);
lists.c | 69 | query_idle(ob);
lists.c | 91 | query_idle(ob);
lists.c | 113 | query_idle(ob);
lists.c | 129 | sprintf("\n%s\n", query_multiple_short(results));
lists.c | 150 | find_player(word);
lists.c | 160 | find_player(word);
lists.c | 167 | list_stuff(word);
lists.c | 173 | find_player(word);
lists.c | 180 | list_stuff(word);
lists.c | 186 | find_player(word);
lists.c | 192 | cap_name(word)+ "%^RESET%^"+ list_stuff(word);
lists.c | 210 | tell_object(this_player(), "$P$Employees$P$"+ results);
lists.c | 211 | add_succeeded_mess("");
lists.c | 223 | this_player();
lists.c | 229 | add_succeeded_mess("");
lists.c | 230 | this_player();
lists.c | 231 | query_name();
lists.c | 262 | add_succeeded_mess("");
lists.c | 274 | if (!num_employees_in()) words = ({"No employees"});
lists.c | 277 | query_short()});
lists.c | 280 | find_player(word);
lists.c | 282 | query_cap_name()});
lists.c | 284 | query_multiple_short(words);
lists.c | 297 | this_player()->query_name();
lists.c | 320 | query_worked(word);
cabinets.c | 15 | sort_array(_list[word][CHART_CAB], 1);
cabinets.c | 16 | save_list();
cabinets.c | 30 | LOG_ERROR("office.c", "confirm_cabinet("+confirm+","+rent+")");
cabinets.c | 33 | lower_case(confirm);
cabinets.c | 39 | input_to("confirm_cabinet", 0, rent);
cabinets.c | 44 | tell_object(this_player(), "Ok.\n");
cabinets.c | 51 | adjust_profit(this_player()->query_name(), -CABINET_COST);
cabinets.c | 55 | save_me();
cabinets.c | 66 | if (file_size(_savedir+ _cab_name + ".o") >
cabinets.c | 69 | call_out((: rm_cab() :), 5);
cabinets.c | 71 | save_me();
cabinets.c | 74 | tell_object(this_player(), "Cabinet "+ (rent)?"rent":"remov" + "ed.\n");
cabinets.c | 90 | sprintf("Cabinet %2d: ", x+1);
cabinets.c | 93 | sprintf("%s (%d)", item, _list[item][CHART_MAX])});
cabinets.c | 94 | if (sizeof(items)) result += query_multiple_short( items );
cabinets.c | 98 | tell_object(this_player(), "$P$Cabinet assignments$P$"+ result);
cabinets.c | 112 | if (!((stock = _num_cabinets) >
cabinets.c | 130 | tell_object(this_player(), "Are you sure you wish to remove a cabinet? ");
cabinets.c | 131 | input_to("confirm_cabinet", 0, 0);
cabinets.c | 158 | money_value_string( CABINET_COST, _place ) + " per month? ");
cabinets.c | 159 | input_to("confirm_cabinet", 0, 1);
cabinets.c | 172 | return (!_list[item])?({}):copy(_list[item][CHART_CAB]);
cabinets.c | 201 | save_list();
cabinets.c | 217 | unguarded((: rm, _savedir+ _cab_name+ ".o" :));
admin.c | 35 | tell_creator(CREATOR, "No employees to send mail to.\n");
admin.c | 41 | tell_creator(CREATOR, "Sending mail %s to all employees.\n", subject);
admin.c | 66 | money_value_string( amount, _place ) ), UNPAID );
admin.c | 67 | save_me();
admin.c | 88 | money_value_string(amount, _place)), UNPAID);
admin.c | 89 | save_me();
admin.c | 102 | LOG_ERROR("office.c", "adjust_bought("+amt+")");
admin.c | 106 | save_me();
admin.c | 149 | money_value_string(bonus_val, _place)+ "\n");
admin.c | 177 | query_cap_name(name);
admin.c | 178 | capitalize(name);
admin.c | 191 | this_player();
admin.c | 192 | query_name();
admin.c | 196 | notify_fail( "You are not a manager here!\n" );
admin.c | 209 | if (place == _counter) return copy(_counter_dir);
admin.c | 210 | if (place == _storeroom) return copy(_store_dir);
admin.c | 211 | if (place == _shop_front) return copy(_shop_dir);
admin.c | 240 | clone_object( MONEY_OBJECT );
admin.c | 241 | set_money_array(MONEY_HAND->query_values_in(_place));
admin.c | 249 | dest_me();
admin.c | 257 | money_value_string(value, _place), PAID);
admin.c | 263 | money_value_string(value, _place)));
admin.c | 266 | tell_object(this_player(), "Ok.\n");
admin.c | 267 | save_me();
admin.c | 285 | tell_object(this_player(), "The point being?\n");
admin.c | 288 | this_player()->query_name();
admin.c | 289 | clone_object(MONEY_OBJECT);
admin.c | 290 | set_money_array(MONEY_HAND->query_values_in(_place));
admin.c | 298 | dest_me();
admin.c | 303 | tell_object(this_player(), "There isn't that much available.\n");
admin.c | 306 | adjust_register(tp, value);
admin.c | 307 | if (args[3] == "profit") adjust_profit(tp, value);
admin.c | 308 | adjust_bonus( tp, value );
admin.c | 313 | tell_object(this_player(), "There isn't that much available.\n");
admin.c | 316 | adjust_bonus(tp, -value);
admin.c | 317 | if (args[3] == "profit") adjust_profit(tp, value);
admin.c | 320 | make_new_amount(value, _place);
admin.c | 321 | add_money_ob(money);
admin.c | 323 | money_value_string(value, _place), UNPAID);
admin.c | 329 | tell_object(this_player(), "There isn't that much available.\n");
admin.c | 332 | adjust_profit(tp, -value);
admin.c | 333 | if (args[3] == "bonus") adjust_bonus( tp, value );
admin.c | 336 | make_new_amount(value, _place);
admin.c | 337 | add_money_ob(money);
admin.c | 339 | money_value_string(value, _place), UNPAID);
admin.c | 345 | tell_object(this_player(), "Ok.\n");
admin.c | 357 | if (file_size(_savedir+ "applications") >
admin.c | 371 | if (file_size(_savedir+ "history") >
admin.c | 385 | if ( file_size(_savedir+ "new_policies") >
admin.c | 399 | if ( file_size( _savedir+ "policies" ) >
admin.c | 408 | query_eom() { return ({_last_month,_eom,});
admin.c | 418 | lower_case(employee);
admin.c | 421 | map_delete(_employees, employee);
admin.c | 422 | save_emps();
admin.c | 424 | remove_applicant(employee);
admin.c | 425 | remove_retired(employee);
admin.c | 428 | remove_call_out(_call_hire_list);
admin.c | 429 | call_out((: check_hire_list() :), 5);
admin.c | 442 | lower_case(retired);
admin.c | 445 | save_me();
admin.c | 469 | if (bit != CLOCKED_IN) save_emps();
admin.c | 478 | restore_register() { return copy(_register + ({}));
admin.c | 502 | if (bit != CLOCKED_IN) save_emps();
admin.c | 516 | find_object(_shopkeeper);
admin.c | 523 | start_shift();
logging.c | 13 | add_succeeded_mess("");
logging.c | 18 | get_dir(_savedir +"general.log*");
logging.c | 22 | for (int i = sizeof(files);
logging.c | 31 | sizeof(files)-(i-2), start);
logging.c | 34 | sizeof(files)-(i-2), start, end);
logging.c | 48 | tell_object(this_player(),"$P$Logs$P$"+ words);
logging.c | 52 | get_dir(_savedir +"general.log*");
logging.c | 64 | sizeof(files) - (args[0]-1)] :)), "%*s\n%s", words);
logging.c | 65 | tell_object(this_player(),"$P$Log "+ args[0]+ "$P$"+ words);
logging.c | 70 | if (file_size(file) >
logging.c | 72 | sscanf(unguarded((: read_file, file :)), "%s", words);
logging.c | 73 | tell_object(this_player(),"$P$Chart log$P$"+ words);
logging.c | 77 | tell_object(this_player(), "The chart log is empty.\n");
logging.c | 84 | if (file_size( file ) >
logging.c | 86 | sscanf(unguarded((: read_file, file :)), "%s", words);
logging.c | 92 | tell_object(this_player(), "The "+ args[0]+ " log is empty.\n");
logging.c | 112 | load_history();
logging.c | 113 | if (!sizeof(_history)) _history = ([employee:({({}),({}),})]);
logging.c | 114 | if (!_history[employee]) _history += ([employee:({({}),({}),})]);
logging.c | 116 | time()});
logging.c | 118 | save_hist();
logging.c | 120 | remove_call_out(_call_times);
logging.c | 121 | if (!sizeof(_times)) _times = ([employee:0]);
logging.c | 122 | if (!_times[employee]) _times += ([ employee:0 ]);
logging.c | 124 | time();
logging.c | 125 | call_out((: save_times() :), PERS_DELAY);
logging.c | 143 | sscanf(amtime(time()), "%*s %*s %*s %s %*s", month);
logging.c | 144 | if (file_size(_savedir +"general.log") >
logging.c | 159 | force_load();
logging.c | 160 | call_out((: update_averages() :), 60);
logging.c | 161 | unguarded((: rename, _savedir +"general.log", logfile :));
logging.c | 162 | call_out((: review_employees() :), 5 );
logging.c | 172 | save_list();
logging.c | 182 | save_me();
logging.c | 191 | sscanf(file, "%*s-%s", date);
logging.c | 192 | if (time() - to_int(date) >
logging.c | 193 | unguarded((: rm, _savedir + "general.log-"+ date :));
logging.c | 208 | remove_call_out(_call_review);
logging.c | 209 | call_out((: monthly_review() :), 60);
logging.c | 227 | to_int(_pay_val * 1.5);
logging.c | 236 | set_emp_time(word);
logging.c | 237 | save_emps();
logging.c | 256 | amtime(time()), cap_name(word), words);
logging.c | 261 | amtime(time()), cap_name(word), words);
logging.c | 266 | amtime(time()), cap_name(word), words);
logging.c | 274 | cap_name(word) +"%^RESET%^ - "+ words +"\n" :));
policies.c | 13 | load_policies();
policies.c | 14 | load_new_policies();
policies.c | 23 | shop_log(GENERAL, "Shop", "accepted the "+ policy + " policy.", UNPAID);
policies.c | 27 | map_delete(_policies, policy);
policies.c | 32 | shop_log(GENERAL, "Shop", "removed the "+ policy + " policy.", UNPAID);
policies.c | 34 | map_delete(_new_policies, policy);
policies.c | 35 | save_policies();
policies.c | 36 | save_new_policies();
policies.c | 51 | LOG_ERROR("office.c", "add_policy_suggest("+name+","+text+","+mgr+")");
policies.c | 54 | load_new_policies();
policies.c | 55 | if (!sizeof(_new_policies)) _new_policies = ([ name:POLICY_MAP ]);
policies.c | 57 | load_policies();
policies.c | 59 | time();
policies.c | 63 | do_policy_vote(mgr, name, "y");
policies.c | 64 | clear_policies();
policies.c | 65 | save_new_policies();
policies.c | 79 | load_new_policies();
policies.c | 82 | tell_object(this_player(), "There is no such policy pending!\n");
policies.c | 88 | tell_object(this_player(), "You have already voted on this policy!\n");
policies.c | 94 | tell_object(this_player(), "You vote for the " + policy+ " policy.\n");
policies.c | 102 | shop_log(GENERAL, mgr, "voted on the "+ policy + " policy.", PAID);
policies.c | 103 | save_new_policies();
policies.c | 104 | sizeof(get_managers()) + sizeof(get_retired());
policies.c | 105 | if (sizeof(_new_policies[policy][POLICY_FOR]) >
policies.c | 106 | add_policy(policy);
policies.c | 107 | if (sizeof(_new_policies[policy][POLICY_AGAINST]) >
policies.c | 108 | remove_policy(policy);
policies.c | 118 | get_stock_policy() { return copy(_stock_policy);
policies.c | 127 | load_new_policies();
policies.c | 131 | shop_log(GENERAL, "Shop", "rejected the "+ policy + " policy.\n", UNPAID);
policies.c | 132 | map_delete(_new_policies, policy);
policies.c | 133 | save_new_policies();
personnel.c | 18 | set_emp_time(player);
personnel.c | 20 | save_me();
personnel.c | 21 | save_emps();
personnel.c | 39 | save_emps();
personnel.c | 43 | employee_log(demotee, "Demoted by "+ demoter);
personnel.c | 44 | shop_log(PERSONNEL, demoter, "demoted "+ cap_name(demotee), PAID);
personnel.c | 65 | tell_object(this_player(), "You can't commend a manager.\n");
personnel.c | 74 | this_player()->query_cap_name();
personnel.c | 79 | employee_log(emp, "Received a commendation from "+ commender);
personnel.c | 80 | shop_log(PERSONNEL, commender, "commended "+ cap_name(emp), PAID);
personnel.c | 82 | to_int(MANAGER_POINTS * 0.05 * 32) : to_int(SUPER_POINTS * 0.05 * 32);
personnel.c | 83 | save_emps();
personnel.c | 84 | tell_object(this_player(), "You commend "+ cap_name(emp)+ ".\n");
personnel.c | 96 | this_player();
personnel.c | 97 | lower_case(emp);
personnel.c | 100 | tell_object(tp, cap_name(emp)+ " is not an active employee!\n");
personnel.c | 115 | demote(tp->query_cap_name(), emp);
personnel.c | 116 | tell_object(tp, "You demote "+ cap_name(emp)+ ".\n");
personnel.c | 128 | lower_case(args[0]);
personnel.c | 148 | fire_them(this_player()->query_name(), args[0], args[1]);
personnel.c | 162 | this_player();
personnel.c | 163 | lower_case(args[0]);
personnel.c | 166 | tell_object(tp, cap_name(args[0])+ " is not an employee!\n");
personnel.c | 175 | time() + (args[1] * 86400);
personnel.c | 176 | remove_call_out(_call_times);
personnel.c | 177 | call_out((: save_times() :), PERS_DELAY);
personnel.c | 179 | ctime(time() + (args[1] * 86400))+ ".\n");
personnel.c | 181 | cap_name(args[0])+ " on leave for " + args[1]+ " days", PAID);
personnel.c | 196 | this_player();
personnel.c | 197 | add_succeeded_mess("");
personnel.c | 200 | tell_object(tp, "Creators don't get promoted.\n");
personnel.c | 213 | tell_object(tp, "Sorry, you cannot be promoted.\n");
personnel.c | 221 | save_emps();
personnel.c | 232 | this_player()->query_name();
personnel.c | 234 | add_succeeded_mess("$N $V.\n");
personnel.c | 235 | remove_employee(word);
personnel.c | 236 | shop_log(PERSONNEL, word, "resigned", UNPAID);
personnel.c | 237 | employee_log(word, "Resigned");
personnel.c | 249 | this_player()->query_name();
personnel.c | 251 | remove_employee(manager);
personnel.c | 253 | shop_log(PERSONNEL, manager, "retired from management", UNPAID);
personnel.c | 254 | employee_log(manager, "Retired from management");
personnel.c | 255 | save_me();
personnel.c | 256 | add_succeeded_mess("$N retire$s.\n");
personnel.c | 269 | this_player();
personnel.c | 271 | lower_case(args[0]);
personnel.c | 274 | tell_object(tp, cap_name(args[0])+ " is not an active employee!\n");
personnel.c | 290 | query_cap_name();
personnel.c | 292 | save_emps();
personnel.c | 317 | this_player();
personnel.c | 320 | lower_case(args[0]);
personnel.c | 323 | tell_object(tp, cap_name(args[0])+ " is not an active employee!\n");
personnel.c | 334 | tell_object(tp, "Don't be silly!  You can't warn $C$"+ args[0] +".\n");
personnel.c | 337 | query_cap_name();
personnel.c | 345 | cap_name( args[0] ) + " for "+ args[1], PAID);
personnel.c | 348 | to_int(MANAGER_POINTS * 0.05 * 32);
personnel.c | 356 | save_emps();
personnel.c | 377 | cap_name(them), UNPAID);
personnel.c | 388 | remove_employee(them);
personnel.c | 401 | remove_applicant(word);
personnel.c | 406 | add_employee(word);
personnel.c | 407 | employee_log(word, "Hired");
personnel.c | 408 | shop_log(PERSONNEL, _proprietor, "hired "+ cap_name(word), UNPAID);
personnel.c | 414 | test_gender(word);
personnel.c | 422 | remove_call_out(_call_mail_hirees);
personnel.c | 423 | call_out((: mail_hirees() :), 5);
personnel.c | 455 | if ((time() - _times[emp]) >
personnel.c | 457 | if ((time() - _times[emp]) >
personnel.c | 462 | if (( time() - _times[emp]) >
personnel.c | 464 | if ((time() - _times[emp]) >
personnel.c | 467 | if (( time() - _times[emp]) >
personnel.c | 469 | if ((time() - _times[emp]) >
personnel.c | 488 | save_emps();
personnel.c | 490 | if (!sizeof(_times)) _times = ([employee:0]);
personnel.c | 491 | if (!_times[employee]) _times += ([employee:0]);
personnel.c | 492 | time();
personnel.c | 493 | remove_call_out(_call_times);
personnel.c | 494 | call_out((: save_times() :), PERS_DELAY);
personnel.c | 510 | sprintf("Employment history of %s:\n\n", cap_name(person));
personnel.c | 511 | load_history();
personnel.c | 514 | tell_object(this_player(), "There is no history for that person.\n");
personnel.c | 517 | sizeof(_history[person][0]);
personnel.c | 521 | cap_name(person), text));
personnel.c | 522 | clear_history();
personnel.c | 532 | load_applicants();
personnel.c | 535 | cap_name(person), _applicants[person][APP_MESSAGE]));
personnel.c | 536 | clear_applicants();
baddies.c | 19 | lower_case(word);
baddies.c | 28 | remove_baddie( word );
baddies.c | 30 | if (!sizeof(_baddies)) _baddies = ([word:BAD_MAP]);
baddies.c | 34 | time();
baddies.c | 35 | save_me();
baddies.c | 40 | fire_them(_proprietor, word, reason);
baddies.c | 41 | remove_applicant(word);
baddies.c | 48 | query_possessive()+ " will.\n", ({ob}));
baddies.c | 53 | query_possessive()+ " will.\n", ({ob}));
baddies.c | 54 | move(_shop_front->query_outside());
baddies.c | 68 | tell_object(this_player(), args[0]+ " is not a player.\n");
baddies.c | 78 | add_baddie(args[0], args[1], this_player()->query_name());
baddies.c | 94 | tell_object(this_player(), person+ " is not currently banned.\n");
baddies.c | 97 | remove_baddie(person);
baddies.c | 99 | cap_name(person), PAID);
baddies.c | 101 | cap_name(person)+ ".\n" );
baddies.c | 114 | map_delete(_baddies, word);
baddies.c | 115 | save_me();
masked.c | 13 | if (remove_call_out(_call_save) != -1) do_save();
masked.c | 14 | if (remove_call_out(_call_apps) != -1) do_save_applicants();
masked.c | 15 | if (remove_call_out(_call_hist) != -1) do_save_hist();
masked.c | 16 | if (remove_call_out(_call_newpols) != -1) do_save_new_policies();
masked.c | 17 | if (remove_call_out(_call_pols) != -1) do_save_policies();
masked.c | 18 | if (remove_call_out(_call_times) != -1) save_times();
masked.c | 19 | if (remove_call_out(_call_emps) != -1) do_save_emps();
masked.c | 21 | if (_chart) _chart->dest_me();
masked.c | 22 | if (_board) _board->dest_me();
masked.c | 23 | if (_notice) _notice->dest_me();
masked.c | 24 | dest_me();
masked.c | 49 | query_name(), _proprietor);
masked.c | 59 | query_name(), _proprietor);
masked.c | 66 | query_name(), _proprietor);
masked.c | 83 | file_name(from);
masked.c | 87 | tell_creator(CREATOR, "%s arrived from %O.\n", ob->query_name(), from);
masked.c | 89 | fire_them(_proprietor, ob->query_name(), "for teleporting into the shop");
masked.c | 99 | this_player();
masked.c | 100 | query_name();
masked.c | 102 | init();
masked.c | 109 | add_command("claim", "{badge|handbook|bonus}", (: do_claim($4[0]) :));
masked.c | 110 | add_command("resign", "", (: do_resign() :));
masked.c | 111 | add_command("list", "", (: do_list() :));
masked.c | 112 | add_command("office", "", (: do_office() :));
masked.c | 117 | if (!_board) add_command("memo", "", (: do_memo() :));
masked.c | 123 | add_command("clock", "{in|out}", (: do_clock($4[0]) :));
masked.c | 124 | add_command("bank", ({ "", "<number>" }), (: do_bank($4) :));
masked.c | 126 | add_command( "promotion", "{on|off}", (: do_promote($4[0]) :) );
masked.c | 135 | do_chart($4,$5) :));
masked.c | 136 | add_command("check", "cabinets", (: do_check() :));
masked.c | 139 | do_logs($4,$5) :));
masked.c | 142 | do_logs($4,$5) :));
masked.c | 163 | query_name();
masked.c | 169 | remove_employee(emp_name);
masked.c | 173 | shop_log(PERSONNEL, emp_name, "deleted character", UNPAID);
masked.c | 174 | employee_log(emp_name, "Deleted character");
masked.c | 180 | shop_log(PERSONNEL, emp_name, "refreshed character", UNPAID);
masked.c | 181 | employee_log(emp_name, "Refreshed character");
masked.c | 188 | remove_employee(emp_name);
masked.c | 192 | shop_log(PERSONNEL, emp_name, "deleted character", UNPAID);
masked.c | 193 | employee_log(emp_name, "Deleted character");
masked.c | 199 | shop_log(PERSONNEL, emp_name, "refreshed character", UNPAID);
masked.c | 200 | employee_log(emp_name, "Refreshed character");
masked.c | 210 | shop_log(PERSONNEL, emp_name, "deleted character", UNPAID);
masked.c | 211 | employee_log(emp_name, "Deleted character");
masked.c | 212 | remove_employee(emp_name);
masked.c | 217 | shop_log(PERSONNEL, emp_name, "refreshed totally", UNPAID);
masked.c | 218 | employee_log(emp_name, "Refreshed totally");
masked.c | 219 | remove_employee(emp_name);
masked.c | 224 | shop_log(PERSONNEL, emp_name, "refreshed character", UNPAID);
masked.c | 225 | employee_log(emp_name, "Refreshed character");
masked.c | 227 | set_emp_time(emp_name);
masked.c | 229 | save_me();
masked.c | 241 | file_name(this_object());
masked.c | 246 | clone_object(SHOP_CHART);
masked.c | 247 | set_office(ob_file);
masked.c | 248 | add_hidden_object(_chart);
masked.c | 253 | clone_object(SHOP_NOTICE);
masked.c | 254 | set_office(ob_file);
masked.c | 255 | add_hidden_object(_notice);
masked.c | 259 | set_long(long_desc);
stock.c | 13 | LOG_ERROR("office.c", "adjust_bought("+item+","+amt+")");
stock.c | 17 | save_list();
stock.c | 29 | LOG_ERROR("office.c", "adjust_sold("+item+","+amt+")");
stock.c | 33 | save_list();
stock.c | 44 | this_player()->query_name();
stock.c | 46 | if (sizeof(args) >
stock.c | 59 | tell_object(this_player(), args[0] +" are not on the sales list.\n");
stock.c | 67 | add_succeeded_mess("$N put$s "+ args[0] +" on the sales list.\n");
stock.c | 68 | put_on_list(args[0]);
stock.c | 69 | shop_log(CHARTLOG, word, "put "+ args[0] +" on the sales list", PAID);
stock.c | 73 | add_succeeded_mess("$N take$s "+args[0] +" off the sales list.\n");
stock.c | 74 | take_off_list( args[0] );
stock.c | 75 | shop_log(CHARTLOG, word, "took "+args[0] +" off the sales list", PAID);
stock.c | 81 | tell_object(this_player(), "Maximum must be greater than zero.\n");
stock.c | 86 | set_max(args[0], number);
stock.c | 87 | shop_log(CHARTLOG, word, "set max of "+ args[0] +" to "+ number, PAID);
stock.c | 93 | tell_object(this_player(), "Price must be greater than zero.\n");
stock.c | 98 | set_buy(args[0], number);
stock.c | 99 | shop_log(CHARTLOG, word, "set buy of "+ args[0] +" to "+ number, PAID);
stock.c | 105 | tell_object(this_player(), "Price must be greater than zero.\n");
stock.c | 110 | set_sell(args[0], number);
stock.c | 111 | shop_log(CHARTLOG, word, "set sell of "+ args[0] +" to "+ number, PAID);
stock.c | 123 | tell_object(this_player(), "That cabinet does not exist.\n");
stock.c | 126 | add_chart_cabinet(args[0], number);
stock.c | 140 | remove_chart_cabinet(args[0], number);
stock.c | 160 | save_list();
stock.c | 173 | return (!_list[item])?0:copy(_list[item][CHART_AVE]);
stock.c | 187 | return (!_list[item])?0:copy(_list[item][CHART_BUY]);
stock.c | 199 | return (!_list[item])?0:copy(_list[item][CHART_MAX]);
stock.c | 221 | return (!_list[item])?0:copy(_list[item][CHART_SELL]);
stock.c | 233 | save_list();
stock.c | 245 | save_list();
stock.c | 257 | save_list();
stock.c | 268 | map_delete(_list, word);
stock.c | 269 | save_list();
stock.c | 280 | ctime(time()), _very_short);
stock.c | 286 | save_list();
voting_room.c | 30 | create();
voting_room.c | 32 | add_help_file("voting_room");
voting_room.c | 33 | create();
voting_room.c | 36 | this_object()->setup();
voting_room.c | 37 | this_object()->reset();
voting_room.c | 39 | seteuid("Room");
voting_room.c | 46 | init();
voting_room.c | 47 | init();
safe_room.c | 40 | create();
safe_room.c | 42 | set_light(90);
safe_room.c | 45 | add_property("warmth", 3);
safe_room.c | 46 | add_property( "los", "closed" );
safe_room.c | 49 | add_property("calm room", 1);
safe_room.c | 52 | this_object()->setup();
safe_room.c | 53 | this_object()->reset();
safe_room.c | 60 | if( sscanf( str,"%s %s",str,st1 ) );
safe_room.c | 118 | tell_object( this_player(), "You feel too peaceful to do that.\n");
safe_room.c | 126 | event_exit(object ob, string message, object to);
safe_room.c | 130 | this_player()->remove_hide_invis( "hiding" );
safe_room.c | 131 | clone_object( SHAD )->setup_shadow(TP);
safe_room.c | 132 | this_player()->command_override( (: trap_action :) );
safe_room.c | 133 | this_player()->add_command( "dream", this_object(), "" );
safe_room.c | 134 | this_player()->add_command( "rest", this_object(), "" );
safe_room.c | 136 | init();
safe_room.c | 147 | dest_shadow();
safe_room.c | 153 | do_leave();
safe_room.c | 157 | effects_matching( "fighting.combat" );
safe_room.c | 158 | foreach( int i in enums ) ob->delete_effect( i );
safe_room.c | 163 | do_rub();
safe_room.c | 167 | call_out("make_calm", 1, ob );
safe_room.c | 168 | call_out( "stop_sneaking", 1, ob );
safe_room.c | 174 | this_player()->adjust_hp( 4 );
safe_room.c | 175 | this_player()->adjust_gp( -( 2 + random( 4 ) ) );
safe_room.c | 177 | this_player()->adjust_social_points( -( 2 + random(8)));
safe_room.c | 187 | this_player()->adjust_hp( 4 );
safe_room.c | 188 | this_player()->adjust_gp( -( 2 + random( 4 ) ) );
safe_room.c | 190 | this_player()->adjust_social_points( -( 2 + random(8)));
safe_room.c | 198 | random(4) ] );
safe_room.c | 208 | stop_all_fight();
safe_room.c | 209 | stop_all_fight();
safe_room.c | 217 | effects_matching("fighting.combat");
safe_room.c | 220 | foreach( wibble in enums ) { blue->delete_effect( wibble );
safe_room.c | 221 | do_command("smile "+ blue->query_name() );
safe_room.c | 222 | tell_object( blue, "You feel a lot calmer.\n");
safe_room.c | 232 | effects_matching( "covert.sneaking" );
safe_room.c | 235 | foreach( wibble in enums ) { sneaker->delete_effect( wibble );
safe_room.c | 236 | do_command("hug "+ sneaker->query_name() );
safe_room.c | 237 | tell_object( sneaker, "You feel less sneaky.\n");
council_fine.c | 15 | create();
council_fine.c | 16 | add_help_file("fines");
council_fine.c | 48 | query_current_fine(this_player()->query_name());
council_fine.c | 50 | add_failed_mess("You do not have any fines due here.\n");
council_fine.c | 54 | query_property("place");
council_fine.c | 55 | this_player()->query_value_in(place);
council_fine.c | 57 | create_money_array(fine, place);
council_fine.c | 58 | this_player()->pay_money(m_array, place);
council_fine.c | 59 | pay_fine(this_player()->query_name(), fine);
council_fine.c | 61 | money_value_string(fine, place) + ".\n");
council_fine.c | 63 | create_money_array(value, place);
council_fine.c | 64 | this_player()->pay_money(m_array, place);
council_fine.c | 65 | pay_fine(this_player()->query_name(), value);
council_fine.c | 69 | money_value_string(fine, place) + ".\n");
council_fine.c | 71 | add_succeeded_mess(({ "", "$N $V $p fine.\n" }));
council_fine.c | 84 | query_property("place");
council_fine.c | 86 | query_current_fine(person);
council_fine.c | 94 | query_total_fine(person);
council_fine.c | 102 | query_total_payments(person);
council_fine.c | 118 | write(query_fine_information(this_player()->query_name()));
council_fine.c | 119 | add_succeeded_mess(({ "", "$N look$s up a fine.\n" }));
council_fine.c | 129 | add_failed_mess("You must find a fine for an existing person.\n");
council_fine.c | 133 | write(person + ":\n" + query_fine_information(person));
council_fine.c | 134 | add_succeeded_mess(({ "", "$N look$s up a fine.\n" }));
council_fine.c | 144 | query_current_fine(person);
council_fine.c | 149 | write("$P$Fines$P$" + ret);
council_fine.c | 153 | add_command("pay", "fine", (: do_pay() :));
council_fine.c | 154 | add_command("fine", "", (: do_fine() :));
council_fine.c | 157 | add_command("fine", "<string'player'>", (: do_show_fine($4[0]) :));
council_fine.c | 158 | add_command("fine", "all", (: do_show_all_fines :));
council_fine.c | 159 | add_command("list", "fines", (: do_show_all_fines :));
council_cases.c | 14 | add_punishment_type(string name, string file);
council_cases.c | 15 | query_punishment_type(string name);
council_cases.c | 21 | create();
council_cases.c | 23 | add_punishment_type("not guilty", NOMIC_PUNISHMENT_DIR + "not_guilty");
council_cases.c | 26 | add_punishment_type("dismissed", NOMIC_PUNISHMENT_DIR + "dismissed");
council_cases.c | 32 | add_help_file("cases");
council_cases.c | 76 | query_punishment_type(name);
council_cases.c | 81 | write("Big hairy error.\n");
council_cases.c | 95 | query_punishment_type(name);
council_cases.c | 100 | write("Big hairy error.\n");
council_cases.c | 121 | query_punishment_type(type);
council_cases.c | 126 | write("Big hairy error.\n");
council_cases.c | 141 | query_punishment_type(name);
council_cases.c | 143 | call_other(bing, "query_short", query_council_area(), the_case, name, data);
council_cases.c | 160 | query_punishment_type(name);
council_cases.c | 173 | keys(_types);
council_cases.c | 247 | write("Punishments:\n");
council_cases.c | 249 | write("   " + punish + "\n");
council_cases.c | 261 | write("Punishments:\n");
council_cases.c | 264 | add_failed_mess("No punishment of type " + type + ".\n");
council_cases.c | 268 | this_player()->more_string(file->query_description(), "punishment");
council_cases.c | 286 | add_failed_mess("You need to be a citizen to open a case.\n");
council_cases.c | 291 | replace_string(people, " and ", ",");
council_cases.c | 292 | replace_string(people, " ", "");
council_cases.c | 293 | explode(lower_case(people), ",");
council_cases.c | 302 | this_player()->query_name() });
council_cases.c | 316 | add_failed_mess("There have to be some people involved in the case.\n");
council_cases.c | 337 | write("Aborted.\n");
council_cases.c | 343 | write(desc);
council_cases.c | 344 | write("\nAre you sure you wish to add this? ");
council_cases.c | 345 | input_to("open_case_desc_confirm", 0, bits, short, desc);
council_cases.c | 354 | lower_case(response);
council_cases.c | 356 | write("Aborting the addition of the case.\n");
council_cases.c | 367 | write("Added the case into the system.\n");
council_cases.c | 368 | query_magistrates(query_council_area());
council_cases.c | 380 | query_multiple_short(bits) + ".\n", ({ this_player() }) );
council_cases.c | 382 | write("Unable to add the case for some reason.\n");
council_cases.c | 397 | ctime(the_case->time_opened);
council_cases.c | 416 | query_open_cases(query_council_area());
council_cases.c | 418 | add_failed_mess("There are no open cases.\n");
council_cases.c | 423 | query_open_case(query_council_area(), id);
council_cases.c | 424 | query_case_short(the_case);
council_cases.c | 427 | this_player()->more_string(ret, "open cases");
council_cases.c | 441 | query_recently_closed_cases(query_council_area());
council_cases.c | 443 | add_failed_mess("There are no recently closed cases.\n");
council_cases.c | 448 | query_recently_closed_case(query_council_area(), id);
council_cases.c | 449 | query_case_short(the_case);
council_cases.c | 452 | this_player()->more_string(ret, "closed cases");
council_cases.c | 469 | query_open_case(query_council_area(), case_id);
council_cases.c | 471 | add_failed_mess("Unable to find the case.\n");
council_cases.c | 474 | query_case_short(the_case);
council_cases.c | 491 | query_note(id);
council_cases.c | 497 | this_player()->more_string(ret, "open cases");
council_cases.c | 515 | query_recently_closed_cases(query_council_area());
council_cases.c | 517 | add_failed_mess("Unable to find the case.\n");
council_cases.c | 523 | add_failed_mess("Unable to find the case.\n");
council_cases.c | 526 | query_case_short(the_case);
council_cases.c | 543 | query_note(id);
council_cases.c | 549 | this_player()->more_string(ret, "open cases");
council_cases.c | 562 | query_open_case(query_council_area(), case_id);
council_cases.c | 564 | add_failed_mess("Unable to find the id of the case.\n");
council_cases.c | 582 | write("What reason to wish to give for adding this person?\n");
council_cases.c | 600 | write("Aborted " + type + "ing " + person + ".\n");
council_cases.c | 604 | query_open_case(query_council_area(), case_id);
council_cases.c | 606 | query_case_short(the_case) + ".\n");
council_cases.c | 607 | input_to("person_confirm", 0, case_id, person, type, desc);
council_cases.c | 621 | lower_case(response);
council_cases.c | 623 | write("Aborted " + type + "ing " + person + ".\n");
council_cases.c | 627 | query_open_case(query_council_area(), case_id);
council_cases.c | 633 | write("Sucessfully added " + person + " to the case.\n");
council_cases.c | 636 | write("Unable to add " + person + " to the case.\n");
council_cases.c | 643 | write("Sucessfully removed " + person + " from the case.\n");
council_cases.c | 645 | write("Unable to remove " + person + " from the case.\n");
council_cases.c | 663 | this_player() }) );
council_cases.c | 675 | query_open_case(query_council_area(), case_id);
council_cases.c | 677 | add_failed_mess("Unable to find the id of the case.\n");
council_cases.c | 696 | add_failed_mess("You cannot remove everyone from the case.\n");
council_cases.c | 701 | write("What reason to wish to give for removeing this person?\n");
council_cases.c | 715 | query_open_case(query_council_area(), case_id);
council_cases.c | 717 | add_failed_mess("Unable to find the id of the case.\n");
council_cases.c | 721 | write(query_case_short(the_case));
council_cases.c | 723 | write("\nAdd note:\n");
council_cases.c | 732 | write("Aborted.\n");
council_cases.c | 736 | query_case_short(the_case) + ".\n");
council_cases.c | 737 | write(desc + "\nAre you sure you wish to add this note? ");
council_cases.c | 738 | input_to("note_case_desc_confirm", 0, desc, the_case);
council_cases.c | 744 | lower_case(response);
council_cases.c | 746 | write("Aborting the addition of the note.\n");
council_cases.c | 752 | write("Added the note to the case.\n");
council_cases.c | 755 | this_player() }) );
council_cases.c | 757 | write("Unable to add the note to the case for some reason.\n");
council_cases.c | 763 | write("Please add in your closing summary.\n");
council_cases.c | 777 | query_open_case(query_council_area(), case_id);
council_cases.c | 779 | add_failed_mess("Cannot find the case.\n");
council_cases.c | 785 | add_failed_mess("You must be a magistrate to close the case.\n");
council_cases.c | 792 | query_multiple_short(query_all_punishment_types()) + ".\n");
council_cases.c | 804 | add_failed_mess("You cannot close a case you appealed.\n");
council_cases.c | 808 | start_punishment(type, the_case, (: close_case_bit :));
council_cases.c | 824 | write("Aborted.\n");
council_cases.c | 834 | query_punishment_short(type, the_case, data) + ".\n");
council_cases.c | 835 | write("Are sure you wish you wish to close this case? ");
council_cases.c | 836 | input_to("close_case_desc_confirm", 0, the_case, type, data, desc);
council_cases.c | 844 | lower_case(response);
council_cases.c | 846 | write("Aborting the closing of the note.\n");
council_cases.c | 854 | complete_punishment(type, the_case, data);
council_cases.c | 855 | write("Completed closing the case.\n");
council_cases.c | 860 | query_magistrates(query_council_area());
council_cases.c | 862 | query_last_appealer(the_case) });
council_cases.c | 877 | query_punishment_mail_info(type, the_case, data));
council_cases.c | 883 | this_player() }) );
council_cases.c | 885 | write("Unable to complete closing the case.\n");
council_cases.c | 900 | add_failed_mess("Cannot find the case.\n");
council_cases.c | 906 | add_failed_mess("You must be a magistrate to appeal the case.\n");
council_cases.c | 918 | add_failed_mess("You cannot appeal a case you closed.\n");
council_cases.c | 925 | write("What is the detailed reason for appealing this case?\n");
council_cases.c | 926 | this_player()->do_edit("", "appeal_case_desc", this_object(), 0, case_id);
council_cases.c | 935 | write("Aborted.\n");
council_cases.c | 944 | input_to("appeal_case_desc_confirm", 0, case_id, desc);
council_cases.c | 952 | lower_case(response);
council_cases.c | 954 | write("Aborting the closing of the note.\n");
council_cases.c | 967 | write("Appealed the case successfully.\n");
council_cases.c | 971 | query_open_case(query_council_area(), case_id);
council_cases.c | 972 | suspend_punishment(the_case);
council_cases.c | 989 | this_player() }) );
council_cases.c | 991 | write("Error trying to appeal the case!\n");
council_cases.c | 1015 | lower_case(person);
council_cases.c | 1016 | query_open_cases(query_council_area());
council_cases.c | 1018 | add_failed_mess("There are no open cases.\n");
council_cases.c | 1024 | query_open_case(query_council_area(), id);
council_cases.c | 1033 | query_last_appealer(the_case);
council_cases.c | 1040 | query_recently_closed_cases(query_council_area());
council_cases.c | 1044 | query_recently_closed_case(query_council_area(), id);
council_cases.c | 1053 | query_last_closer(the_case);
council_cases.c | 1073 | query_extra_player_status(person);
council_cases.c | 1077 | add_failed_mess("The player " + person + " has no record.\n");
council_cases.c | 1081 | write("$P$Status$P$" + ret);
council_cases.c | 1086 | add_command("list", "", (: do_list_open_cases() :));
council_cases.c | 1087 | add_command("list", "[case] <number>", (: do_list_case($4[0]) :));
council_cases.c | 1088 | add_command("list", "closed", (: do_list_closed_cases() :));
council_cases.c | 1089 | add_command("list", "{punishments|results}", (: do_list_punishments :));
council_cases.c | 1090 | add_command("list", "{punishment|punishments|results} <string'type'>", (: do_list_punishments_desc($4[1]) :));
council_cases.c | 1091 | add_command("list", "closed [case] <number>", (: do_list_closed_case($4[0]) :));
council_cases.c | 1093 | do_add_person($4[1], $4[0]) :));
council_cases.c | 1095 | do_remove_person($4[1], $4[0]) :));
council_cases.c | 1096 | add_command("case", "[add] note <number'case id'>", (: do_add_note($4[0]) :));
council_cases.c | 1098 | do_open_case($4[0], $4[1]) :));
council_cases.c | 1100 | do_close_case($4[0], $4[1]) :));
council_cases.c | 1102 | do_appeal_case($4[0]) :));
council_cases.c | 1104 | do_player_status($4[0]) :));
water_inside.c | 19 | init();
water_inside.c | 20 | init();
water_inside.c | 27 | is_allowed_position(poss);
water_inside.c | 34 | query_default_position(ob);
water_inside.c | 41 | add_exit(direc, dest, type);
water_inside.c | 42 | add_exit(direc, dest, type);
water_inside.c | 50 | update_water_light();
water_inside.c | 52 | query_light();
water_inside.c | 69 | set_light(number);
water_inside.c | 78 | set_use_surface_light(0);
water_inside.c | 80 | adjust_light(number);
water_inside.c | 90 | query_property(tag);
council_citizenship.c | 55 | variable_age_in_days(object player);
council_citizenship.c | 56 | variable_age_in_hours(object player);
council_citizenship.c | 57 | variable_level(object player);
council_citizenship.c | 58 | variable_denied_in_days(object player);
council_citizenship.c | 59 | function_citizen_of(string area, object player);
council_citizenship.c | 60 | function_magistrate_of(string area, object player);
council_citizenship.c | 62 | do_apply();
council_citizenship.c | 63 | do_sponsor(string person);
council_citizenship.c | 64 | do_approve(string person);
council_citizenship.c | 65 | do_deny(string person, string reason);
council_citizenship.c | 66 | do_list();
council_citizenship.c | 67 | do_add_blacklist(string person, string reason);
council_citizenship.c | 68 | do_remove_blacklist(string person);
council_citizenship.c | 69 | do_list_blacklist(int verbose);
council_citizenship.c | 70 | do_list_expression();
council_citizenship.c | 71 | do_set_expression(string expr, int applicant);
council_citizenship.c | 72 | do_list_denied();
council_citizenship.c | 73 | load_me();
council_citizenship.c | 80 | time();
council_citizenship.c | 81 | create();
council_citizenship.c | 82 | create();
council_citizenship.c | 101 | add_help_file("citizenship");
council_citizenship.c | 103 | create();
council_citizenship.c | 107 | add_command("apply", "[for] [citizenship]", (: do_apply() :));
council_citizenship.c | 109 | do_sponsor($4[0]) :));
council_citizenship.c | 111 | do_deny($4[0], $4[1]) :));
council_citizenship.c | 112 | add_command("list", "", (: do_list() :));
council_citizenship.c | 114 | do_list_expression() :));
council_citizenship.c | 119 | do_add_blacklist($4[0], $4[1]) :));
council_citizenship.c | 121 | do_remove_blacklist($4[0]) :));
council_citizenship.c | 123 | do_list_blacklist($4[0] == "verbose") :));
council_citizenship.c | 125 | do_set_expression($4[0], 0) :));
council_citizenship.c | 127 | do_set_expression($4[0], 1) :));
council_citizenship.c | 128 | add_command("list", "denied", (: do_list_denied :));
council_citizenship.c | 130 | do_approve($4[0]) :));
council_citizenship.c | 132 | init();
council_citizenship.c | 141 | load_me();
council_citizenship.c | 159 | unguarded( (: restore_object(_save_file, 1) :));
council_citizenship.c | 161 | parse_boolean_string("ageindays >= 2 and timesincedeniedindays > 14");
council_citizenship.c | 164 | parse_boolean_string("ageindays >= 10");
council_citizenship.c | 170 | remove_call_out("post_weekly_results");
council_citizenship.c | 171 | call_out("post_weekly_results", _last_posted + WEEK - time());
council_citizenship.c | 181 | unguarded( (: save_object(_save_file, 1) :));
council_citizenship.c | 194 | sort_array(keys(_approved), 1);
council_citizenship.c | 195 | if (sizeof(cit) >
council_citizenship.c | 205 | capitalize($1) :)));
council_citizenship.c | 218 | capitalize($1) :)));
council_citizenship.c | 228 | if (strlen(denied) >
council_citizenship.c | 237 | save_me();
council_citizenship.c | 239 | time();
council_citizenship.c | 240 | remove_call_out("post_weekly_results");
council_citizenship.c | 241 | call_out("post_weekly_results", _last_posted + WEEK - time());
council_citizenship.c | 258 | add_failed_mess("You are already a citizen.\n");
council_citizenship.c | 263 | add_failed_mess("You are not allowed to become a citizen here.\n");
council_citizenship.c | 268 | add_failed_mess("You are already asking for approval.\n");
council_citizenship.c | 273 | query_expression_string(_expression, 0);
council_citizenship.c | 280 | add_failed_mess("Creators cannot be citizens.\n");
council_citizenship.c | 289 | query_citizen(this_player()->query_name());
council_citizenship.c | 295 | add_citizen(query_council_area(), this_player()->query_name());
council_citizenship.c | 304 | new(class approval_list);
council_citizenship.c | 307 | time();
council_citizenship.c | 309 | save_me();
council_citizenship.c | 316 | query_council_area());
council_citizenship.c | 330 | add_failed_mess("Sorry, " + person + " is not a player.\n");
council_citizenship.c | 336 | add_failed_mess("Only citizens can sponsor someone.\n");
council_citizenship.c | 341 | add_failed_mess("You are not allowed to sponsor citizens.\n");
council_citizenship.c | 352 | query_expression_string(_sponsor_expression, 0);
council_citizenship.c | 360 | add_failed_mess("You are already sponsoring " + person + ".\n");
council_citizenship.c | 370 | this_player()->query_name() });
council_citizenship.c | 371 | save_me();
council_citizenship.c | 372 | add_succeeded_mess("$N $V someone for citizenship.\n");
council_citizenship.c | 381 | lower_case( person );
council_citizenship.c | 383 | add_failed_mess("Sorry, " + person + " is not a player.\n");
council_citizenship.c | 389 | add_failed_mess("Only citizens can sponsor someone.\n");
council_citizenship.c | 404 | add_citizen(query_council_area(), person);
council_citizenship.c | 405 | new(class approved_person);
council_citizenship.c | 407 | time();
council_citizenship.c | 408 | this_player()->query_name();
council_citizenship.c | 409 | map_delete(_waiting_approval, person);
council_citizenship.c | 410 | save_me();
council_citizenship.c | 413 | query_council_area());
council_citizenship.c | 414 | add_succeeded_mess("$N add$s " + person + " as a citizen.\n");
council_citizenship.c | 444 | add_failed_mess("Sorry, " + person + " is not a player.\n");
council_citizenship.c | 450 | add_failed_mess("Only citizens can deny someone.\n");
council_citizenship.c | 465 | map_delete(_waiting_approval, person);
council_citizenship.c | 466 | new(class denied);
council_citizenship.c | 468 | this_player()->query_name();
council_citizenship.c | 469 | time();
council_citizenship.c | 471 | save_me();
council_citizenship.c | 493 | add_failed_mess("You are already sponsoring " + person + ".\n");
council_citizenship.c | 504 | save_me();
council_citizenship.c | 507 | add_succeeded_mess("$N $V someone for citizenship.\n");
council_citizenship.c | 528 | add_failed_mess("No one is waiting for citizenship approval.\n");
council_citizenship.c | 540 | this_player()->query_name());
council_citizenship.c | 542 | keys(_waiting_approval);
council_citizenship.c | 549 | map_delete(_waiting_approval, person);
council_citizenship.c | 557 | capitalize($1) :)));
council_citizenship.c | 571 | sizeof(_waiting_approval[person]->against);
council_citizenship.c | 605 | this_player()->more_string(ret, "citizenship");
council_citizenship.c | 618 | add_failed_mess("No one has been denied yet.\n");
council_citizenship.c | 625 | add_failed_mess("Only magistrates can see the denied list.\n");
council_citizenship.c | 629 | keys(_denied);
council_citizenship.c | 630 | sort_array(people, 1);
council_citizenship.c | 638 | this_player()->more_string(ret, "denied");
council_citizenship.c | 649 | query_expression_string(_expression, 0);
council_citizenship.c | 652 | query_expression_string(_sponsor_expression, 0);
council_citizenship.c | 669 | add_failed_mess("Only magistrates can set an expression string.\n");
council_citizenship.c | 673 | parse_boolean_string(expression);
council_citizenship.c | 675 | add_failed_mess(query_last_expression_error() + ".\n");
council_citizenship.c | 684 | save_me();
council_citizenship.c | 686 | add_succeeded_mess("$N set$s the citizenship requirements.\n");
council_citizenship.c | 700 | add_failed_mess("Only magistrates can manipulate the blacklist.\n");
council_citizenship.c | 713 | add_failed_mess("You cannot blacklist someone that does not exist.\n");
council_citizenship.c | 717 | new(class blacklist);
council_citizenship.c | 718 | this_player()->query_name();
council_citizenship.c | 721 | save_me();
council_citizenship.c | 723 | add_succeeded_mess("$N add$s someone to the blacklist.\n");
council_citizenship.c | 734 | add_failed_mess("Only magistrates can manipulate the blacklist.\n");
council_citizenship.c | 744 | map_delete(_blacklist, person);
council_citizenship.c | 745 | save_me();
council_citizenship.c | 747 | add_succeeded_mess("$N remove$s someone from the blacklist.\n");
council_citizenship.c | 760 | keys(_blacklist);
council_citizenship.c | 761 | sort_array(people, 1);
council_citizenship.c | 763 | add_failed_mess("There is no one in the blacklist currently.\n");
council_citizenship.c | 768 | query_multiple_short(people);
council_citizenship.c | 776 | this_player()->more_string(ret, "blacklist");
council_citizenship.c | 784 | query_time_on();
council_citizenship.c | 792 | query_time_on();
council_citizenship.c | 798 | query_level();
council_citizenship.c | 804 | return (time() - _denied[player->query_name()]->time_denied) / (60 * 60 * 24);
council_citizenship.c | 811 | is_citizen_of(area, player->query_name());
council_citizenship.c | 816 | is_magistrate_of(area, player->query_name());
council_citizenship.c | 822 | is_magistrate_of(query_council_area(), person);
bath_house_inside.c | 12 | create();
bath_house_inside.c | 13 | create();
bath_house_inside.c | 18 | init();
bath_house_inside.c | 19 | init();
parcel_inherit.c | 20 | do_deposit( object *obs, string name, int show_sender );
parcel_inherit.c | 21 | do_collect();
parcel_inherit.c | 31 | clone_object( "/std/surface" );
parcel_inherit.c | 32 | set_name( short );
parcel_inherit.c | 33 | set_long( long );
parcel_inherit.c | 34 | set_max_weight( 10000 );
parcel_inherit.c | 35 | move( this_object() );
parcel_inherit.c | 36 | add_property( "there", "fixed to one wall" );
parcel_inherit.c | 37 | reset_get();
parcel_inherit.c | 81 | init();
parcel_inherit.c | 86 | do_deposit( $1, $4[1] ) :) );
parcel_inherit.c | 88 | do_collect() :) );
parcel_inherit.c | 157 | deep_inventory(ob);
parcel_inherit.c | 160 | if (sizeof(total_obs) >
parcel_inherit.c | 166 | sizeof(total_obs);
parcel_inherit.c | 172 | query_property("place")) + ".\n");
parcel_inherit.c | 177 | add_failed_mess("You cannot deposit things for yourself!\n");
parcel_inherit.c | 181 | deposit_parcel(obs, name, show_sender);
parcel_inherit.c | 188 | add_failed_mess("You cannot deposit things for yourself!\n");
parcel_inherit.c | 191 | add_failed_mess("You are not allowed to deposit parcels.\n");
parcel_inherit.c | 194 | add_failed_mess(upper_case(name)+" is not allowed to recieve parcels.\n");
parcel_inherit.c | 214 | lower_case(this_player()->query_name());
parcel_inherit.c | 217 | add_failed_mess("You are not allowed to collect things.\n");
player_housing.c | 16 | set_light(100);
player_housing.c | 17 | set_theft_handler(HOSPITAL);
player_housing.c | 18 | set_save_file("/save/player_housing/am/short/flat1");
player_housing.c | 20 | set_short("front room");
player_housing.c | 21 | set_base_desc("a small and cosy front room" );
player_housing.c | 22 | add_surface( "floor", "finished pine board" );
player_housing.c | 23 | add_surface( "ceiling", "plain plaster" );
player_housing.c | 24 | add_surface( "north wall", "plain plaster" );
player_housing.c | 25 | add_surface( "south wall", "plain plaster" );
player_housing.c | 26 | add_surface( "east wall", "plain plaster" );
player_housing.c | 27 | add_surface( "west wall", "plain plaster" );
player_housing.c | 28 | add_exit("out", PATH+"courtyard", "door");
player_housing.c | 29 | add_exit("north", PATH+"flat1bed", "door");
player_housing.c | 36 | setup_doors();
player_housing.c | 50 | add_help_file("player_housing");
player_housing.c | 52 | create();
player_housing.c | 53 | create();
player_housing.c | 56 | this_object()->setup();
player_housing.c | 57 | this_object()->reset();
player_housing.c | 59 | seteuid("Room");
player_housing.c | 60 | add_property("no burial", 1);
player_housing.c | 61 | add_property("no teleport", 1);
player_housing.c | 68 | query_long();
player_housing.c | 78 | add_exit(direc, dest, type);
player_housing.c | 79 | setup_exit(direc, 1);
player_housing.c | 88 | query_address(file_name(this_object()));
player_housing.c | 98 | my_process_non_living(int_non_livings);
player_housing.c | 99 | process_non_living(not_positioned, start);
player_housing.c | 104 | init();
player_housing.c | 105 | init();
player_housing.c | 110 | event_exit(ob, message, to);
player_housing.c | 111 | event_exit(ob, message, to);
player_housing.c | 118 | query_keep_room_loaded();
player_housing.c | 123 | dest_me();
player_housing.c | 124 | dest_me();
player_housing.c | 139 | this_player();
player_housing.c | 141 | test_remove(thing, flag, dest);
player_housing.c | 145 | find_player(thief->query_caster());
player_housing.c | 147 | query_owner();
player_housing.c | 149 | query_property("dropped");
player_housing.c | 159 | query_owner(), file_name());
player_housing.c | 161 | event(this_object(), "theft", thief, this_object(), ({ thing }));
player_housing.c | 164 | test_remove(thing, flag, dest);
player_housing.c | 174 | test_add(ob, flag);
player_housing.c | 176 | test_add(ob, flag);
room_save.c | 26 | create();
room_save.c | 27 | create();
room_save.c | 31 | this_object()->setup();
room_save.c | 32 | this_object()->reset();
room_save.c | 44 | test_remove(thing, flag, dest);
room_save.c | 47 | test_remove(thing, flag, dest);
room_save.c | 58 | test_add(ob, flag);
room_save.c | 59 | test_add(ob, flag);
room_save.c | 65 | dest_me();
room_save.c | 66 | dest_me();
outside.c | 24 | clean_up_room( int flag );
outside.c | 25 | query_fast_clean_up();
outside.c | 26 | set_fast_clean_up(int fast_clean_up);
outside.c | 70 | add_property("light change", s);
outside.c | 74 | query_property("light change");
outside.c | 106 | set_fast_clean_up(1);
outside.c | 108 | create();
outside.c | 110 | set_room_size( 50 );
outside.c | 111 | add_property( "location", "outside" );
outside.c | 112 | add_property( "here", "on the ground" );
outside.c | 116 | add_item("snow", ({ this_object(), "snow_look" }));
outside.c | 117 | add_item("rain", ({ this_object(), "rain_look" }));
outside.c | 118 | add_item("sleet", ({ this_object(), "sleet_look" }));
outside.c | 119 | add_item("cloud", ({ this_object(), "cloud_look" }));
outside.c | 123 | this_object()->setup();
outside.c | 124 | this_object()->reset();
outside.c | 127 | time();
outside.c | 138 | set_light(new_light);
outside.c | 140 | query_light();
outside.c | 145 | query_visibility(this_object());
outside.c | 159 | set_light(number);
outside.c | 171 | long( word, dark );
outside.c | 172 | query_day( this_object() );
outside.c | 175 | call_other( this_object(), query_light_change(), current_day );
outside.c | 178 | this_object()->query_weather_obscured(day_time);
outside.c | 181 | query_night_long();
outside.c | 183 | evaluate(bit, word, dark);
outside.c | 185 | replace(ret, "$long$", bit);
outside.c | 190 | query_long();
outside.c | 192 | evaluate(bit, word, dark);
outside.c | 194 | replace( ret, "$long$", bit);
outside.c | 196 | if ( time() >
outside.c | 198 | next_update();
outside.c | 221 | this_object()->query_light();
outside.c | 227 | remove_hidden_object(sunlight);
outside.c | 228 | dest_me();
outside.c | 231 | find_inv_match( word, looker );
outside.c | 238 | clone_object("/std/object");
outside.c | 239 | set_name("sunlight");
outside.c | 240 | set_weight(0);
outside.c | 241 | reset_get();
outside.c | 242 | move(this_object());
outside.c | 243 | add_alias("daylight");
outside.c | 244 | add_hidden_object(sunlight);
outside.c | 250 | set_long("The light here is currently quite dim.\n");
outside.c | 260 | find_inv_match( word, looker );
outside.c | 266 | dest_me();
outside.c | 268 | dest_me();
outside.c | 283 | remove_call_out(callout_handle);
outside.c | 284 | call_out("clean_up_room", FAST_CLEAN_UP, 0);
outside.c | 293 | call_out("clean_up_room", FAST_CLEAN_UP, 0) ;
outside.c | 295 | query_zones();
outside.c | 318 | cannot_walk() :));
outside.c | 328 | query_property("transient") :));
outside.c | 334 | dest_me();
newspaper_subscription.c | 48 | create();
newspaper_subscription.c | 50 | add_help_file( "newspaper_subscription" );
newspaper_subscription.c | 62 | query_paper_cost( _paper ) * 2 );
newspaper_subscription.c | 70 | query_paper_cost( _paper );
newspaper_subscription.c | 79 | query_paper_cost( _paper );
newspaper_subscription.c | 100 | unguarded( (: restore_object( _savefile + ".o", 1 ) :) );
newspaper_subscription.c | 109 | unguarded( (: save_object( _savefile, 1 ) :) );
newspaper_subscription.c | 114 | save_me();
newspaper_subscription.c | 115 | dest_me();
newspaper_subscription.c | 148 | if( BANK_HANDLER->query_account( name, bank ) >
newspaper_subscription.c | 149 | adjust_account( name, bank, -price );
newspaper_subscription.c | 152 | query_account( name, bank );
newspaper_subscription.c | 157 | query_account( name, bank );
newspaper_subscription.c | 160 | adjust_account( name, bank, -amount_in_account );
newspaper_subscription.c | 162 | adjust_account( name, bank, -amount );
newspaper_subscription.c | 179 | test_property( name, "Paper " + _paper );
newspaper_subscription.c | 194 | query_paper_cost( _paper ) );
newspaper_subscription.c | 197 | query_paper_cost( _paper ) );
newspaper_subscription.c | 199 | clone_object( NEWSPAPER_OB );
newspaper_subscription.c | 200 | set_paper( _paper );
newspaper_subscription.c | 201 | set_edition( issue );
newspaper_subscription.c | 203 | deposit( name, _paper, _parcel, ({ ob }) );
newspaper_subscription.c | 234 | query_last_edition_num( _paper );
newspaper_subscription.c | 240 | query_price_per_issue_subscriber();
newspaper_subscription.c | 245 | map_delete( _subscribers, name );
newspaper_subscription.c | 250 | deliver_issue( name, last_issue );
newspaper_subscription.c | 252 | map_delete( _subscribers, name );
newspaper_subscription.c | 255 | deliver_issue( name, last_issue );
newspaper_subscription.c | 258 | map_delete( _subscribers, name );
newspaper_subscription.c | 294 | remove_newspaper_inform(_paper, file_name(this_object()));
newspaper_subscription.c | 297 | add_newspaper_inform(_paper, file_name(this_object()));
newspaper_subscription.c | 308 | load_me();
newspaper_subscription.c | 331 | this_player()->query_name();
newspaper_subscription.c | 332 | query_price_per_issue_subscriber();
newspaper_subscription.c | 348 | save_me();
newspaper_subscription.c | 382 | save_me();
newspaper_subscription.c | 394 | map_delete( _subscribers, this_player()->query_name() );
newspaper_subscription.c | 398 | save_me();
newspaper_subscription.c | 410 | query_price_international_newspaper_box();
newspaper_subscription.c | 412 | query_price_newspaper_box();
newspaper_subscription.c | 419 | add_failed_mess( "You are too poor to afford this.\n" );
newspaper_subscription.c | 424 | add_succeeded_mess( "$N purchase$s a newspaper box.\n" );
newspaper_subscription.c | 425 | clone_object( NEWSPAPER_SUBSCRIPTION_OB );
newspaper_subscription.c | 426 | set_paper( _paper );
newspaper_subscription.c | 427 | set_international( international );
newspaper_subscription.c | 428 | set_issues_left( ISSUES_PER_BOX );
newspaper_subscription.c | 429 | set_last_issue( NEWSPAPER_HANDLER->query_last_edition_num( _paper ));
newspaper_subscription.c | 431 | move( environment( this_player() ) );
newspaper_subscription.c | 522 | do_subscribe( $4[0] ) :) );
newspaper_subscription.c | 525 | do_subscribe( -1 ) :) );
newspaper_subscription.c | 528 | do_unsubscribe() :) );
newspaper_subscription.c | 531 | do_buy( 0 ) :) );
newspaper_subscription.c | 534 | do_buy( 1 ) :) );
newspaper_subscription.c | 537 | do_check() :) );
newspaper_subscription.c | 540 | load_object( _office );
newspaper_subscription.c | 546 | do_list( $4[0] ) :) );
newspaper_subscription.c | 571 | init();
graffbase.c | 59 | query_drawingwith();
graffbase.c | 60 | do_check();
graffbase.c | 61 | done_check();
graffbase.c | 69 | this_player()->add_command( "scrawl", this_object(), "with charcoal on wall");
graffbase.c | 70 | this_player()->add_command( "scrawl", this_object(), "on wall with charcoal");
graffbase.c | 81 | this_player()->query_current_language();
graffbase.c | 91 | query_property("graffiti");
graffbase.c | 103 | call_out( "begin_writing", 0, this_player() );
graffbase.c | 112 | do_edit( 0, "end_writing" );
graffbase.c | 126 | this_player()->query_current_language();
graffbase.c | 128 | write( "You seem to have changed to using a non-written language.\n" );
graffbase.c | 135 | write( "You seem to have lost what you were scrawling on.\n" );
graffbase.c | 141 | write("The wall seems to have run away from you.\n" );
graffbase.c | 143 | this_player()->query_pronoun() +"'s lost something.\n" );
graffbase.c | 148 | add_read_mess( words, type, language, 0 );
graffbase.c | 154 | if(old) old->move("/room/rubbish");
graffbase.c | 155 | extra_stuff();
graffbase.c | 165 | present("graffiti",ETP);
graffbase.c | 166 | add_property("determinate","some ");
graffbase.c | 167 | add_property("there","on the wall");
graffbase.c | 168 | if(old) old->add_property("graffiti",words);
graffbase.c | 174 | this_object()->done_check();
npcroom.c | 77 | clone_object( func );
npcroom.c | 79 | evaluate( func );
npcroom.c | 88 | make_clone( reset_definitions[ i ][ CLONE ] );
npcroom.c | 97 | find_object( reset_definitions[ i ][ CLONE ] );
npcroom.c | 107 | allocate( sizeof( reset_definitions ) );
npcroom.c | 108 | for ( i = sizeof( reset_definitions );
npcroom.c | 114 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
npcroom.c | 116 | make_object( i );
npcroom.c | 123 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
npcroom.c | 125 | make_object( i );
water_outside.c | 19 | init();
water_outside.c | 20 | init();
water_outside.c | 27 | is_allowed_position(poss);
water_outside.c | 34 | query_default_position(ob);
water_outside.c | 41 | add_exit(direc, dest, type);
water_outside.c | 42 | add_exit(direc, dest, type);
water_outside.c | 50 | update_water_light();
water_outside.c | 52 | query_light();
water_outside.c | 69 | set_light(number);
water_outside.c | 78 | set_use_surface_light(0);
water_outside.c | 80 | adjust_light(number);
water_outside.c | 90 | query_property(tag);
guild-outside.c | 14 | create();
guild-outside.c | 15 | create();
guild-outside.c | 19 | init();
guild-outside.c | 20 | init();
delivery_room.c | 21 | create();
delivery_room.c | 22 | create();
delivery_room.c | 27 | dest_me();
delivery_room.c | 28 | dest_me();
delivery_room.c | 32 | stats() + basic_room::stats();
council_archive.c | 14 | create();
council_archive.c | 15 | add_help_file("council_archive");
council_archive.c | 29 | ctime(the_case->time_opened);
council_archive.c | 42 | query_closed_cases(query_council_area());
council_archive.c | 44 | add_failed_mess("There are no open cases.\n");
council_archive.c | 49 | query_open_case(query_council_area(), id);
council_archive.c | 53 | this_player()->more_string(ret, "closed cases");
council_archive.c | 70 | query_closed_case(query_council_area(), case_id);
council_archive.c | 72 | add_failed_mess("Unable to find the case.\n");
council_archive.c | 75 | query_case_short(the_case);
council_archive.c | 92 | query_note(id);
council_archive.c | 98 | this_player()->more_string(ret, "closed case");
council_archive.c | 110 | this_object()->query_council_area();
council_archive.c | 114 | query_visible( this_player() ) :) );
council_archive.c | 115 | sort_array(cits, (: strcmp($1->query_name(), $2->query_name()) :));
council_archive.c | 118 | query_multiple_short(cits);
council_archive.c | 119 | write("$P$Citizens Online$P$" + ret);
council_archive.c | 126 | add_command("list", "", (: do_list_all_cases() :));
council_archive.c | 127 | add_command("list", "[case] <number>", (: do_list_case($4[0]) :));
council_archive.c | 128 | add_command("list", "citizens", (: do_list_citizens() :));
room_rental.c | 18 | create();
room_rental.c | 23 | init();
player_housing_outside.c | 16 | set_light(100);
player_housing_outside.c | 17 | set_theft_handler(HOSPITAL);
player_housing_outside.c | 18 | set_save_file("/save/player_housing/am/short/flat1_garden");
player_housing_outside.c | 20 | set_short("front room");
player_housing_outside.c | 21 | set_base_desc("a small garden" );
player_housing_outside.c | 22 | add_surface( "floor", "grass" );
player_housing_outside.c | 23 | add_surface( "north wall", "red brick" );
player_housing_outside.c | 24 | add_surface( "south wall", "red brick" );
player_housing_outside.c | 25 | add_surface( "east wall", "red brick" );
player_housing_outside.c | 26 | add_surface( "west wall", "red brick" );
player_housing_outside.c | 27 | add_exit("south", PATH+"flat1", "door");
player_housing_outside.c | 42 | add_help_file("player_housing");
player_housing_outside.c | 44 | create();
player_housing_outside.c | 45 | create();
player_housing_outside.c | 48 | this_object()->setup();
player_housing_outside.c | 49 | this_object()->reset();
player_housing_outside.c | 51 | seteuid("Room");
player_housing_outside.c | 52 | add_property("no burial", 1);
player_housing_outside.c | 59 | query_long();
player_housing_outside.c | 66 | query_owner(base_name(this_object()));
player_housing_outside.c | 76 | add_exit(direc, dest, type);
player_housing_outside.c | 77 | setup_exit(direc, 0);
player_housing_outside.c | 88 | my_process_non_living(int_non_livings);
player_housing_outside.c | 89 | process_non_living(not_positioned, start);
player_housing_outside.c | 94 | init();
player_housing_outside.c | 95 | init();
player_housing_outside.c | 100 | event_exit(ob, message, to);
player_housing_outside.c | 101 | event_exit(ob, message, to);
player_housing_outside.c | 111 | dest_me();
player_housing_outside.c | 112 | dest_me();
player_housing_outside.c | 127 | this_player();
player_housing_outside.c | 129 | test_remove(thing, flag, dest);
player_housing_outside.c | 132 | find_player(thief->query_caster());
player_housing_outside.c | 134 | query_owner();
player_housing_outside.c | 136 | query_property("dropped");
player_housing_outside.c | 146 | query_owner(), file_name());
player_housing_outside.c | 148 | event(this_object(), "theft", thief, this_object(), ({ thing }));
player_housing_outside.c | 151 | test_remove(thing, flag, dest);
player_housing_outside.c | 161 | test_add(ob, flag);
player_housing_outside.c | 163 | test_add(ob, flag);
auction_room.c | 122 | as ([ "name": amount ]);
auction_room.c | 139 | save_file();
auction_room.c | 140 | load_file();
auction_room.c | 142 | set_location( string loc );
auction_room.c | 143 | set_currency( string cur );
auction_room.c | 144 | set_admin_cost( int value );
auction_room.c | 145 | set_commission( int percent );
auction_room.c | 146 | set_case_desc( string *bits );
auction_room.c | 147 | recover_lot( mixed lot_autoload );
auction_room.c | 149 | change_status( int lot_ident, string new_status );
auction_room.c | 150 | adjust_money( int amount, object player );
auction_room.c | 151 | generate_auto_load( object *obs );
auction_room.c | 152 | generate_store( object *things, int lot_id );
auction_room.c | 153 | query_status( int lot_ident );
auction_room.c | 157 | do_bid( string offer, object *boxes );
auction_room.c | 158 | do_collect( string pattern );
auction_room.c | 159 | do_list();
auction_room.c | 160 | do_withdraw( object *boxes);
auction_room.c | 161 | do_describe( object *boxes, string int_desc );
auction_room.c | 162 | do_exclude( object *cases, string excluded );
auction_room.c | 163 | do_browse( object *cases, string target, int identifier );
auction_room.c | 164 | do_unexclude( object *cases, string excluded );
auction_room.c | 165 | generate_advertising_string( c_lot lot );
auction_room.c | 166 | generate_random_adv_str();
auction_room.c | 174 | create();
auction_room.c | 178 | this_object()->setup();
auction_room.c | 179 | this_object()->reset();
auction_room.c | 182 | call_out( "load_file", 1 );
auction_room.c | 183 | call_out( "load_store", 2 );
auction_room.c | 184 | call_out( "lot_check", 5 );
auction_room.c | 194 | do_bid( $4[0], $1 ) :) );
auction_room.c | 199 | do_collect( $5 ) :) );
auction_room.c | 204 | do_deposit( $1, $4[1], $4[2], "" ) :) );
auction_room.c | 210 | do_deposit( $1, $4[1], $4[2], $4[3] ) :) );
auction_room.c | 212 | this_player()->add_command( "list", this_object(), "" );
auction_room.c | 215 | do_browse( $1, $4[0], 0 ) :) );
auction_room.c | 219 | do_browse( $1, $4[0], $4[1] ) :) );
auction_room.c | 223 | do_withdraw( $1 ) :) );
auction_room.c | 227 | do_describe( $1, $4[0] ) :) );
auction_room.c | 231 | do_exclude( $1, $4[0] ) :) );
auction_room.c | 235 | do_exclude( $1, "list" ) :) );
auction_room.c | 239 | do_exclude( $1, "ignore list" ) :) );
auction_room.c | 243 | do_unexclude( $1, $4[0] ) :) );
auction_room.c | 268 | previous_object()?file_name( previous_object()):"No previous object" ) );
auction_room.c | 276 | previous_object()?file_name( previous_object()):"No previous object" ) );
auction_room.c | 283 | previous_object()?file_name( previous_object()):"No previous object" ) );
auction_room.c | 292 | generate_store( things, lot_count );
auction_room.c | 295 | generate_auto_load( things );
auction_room.c | 301 | query_multiple_short( map( things, (: file_name( $1 ) :) ) ) );
auction_room.c | 307 | query_multiple_short( map( things, (: file_name( $1 ) :) ) ) );
auction_room.c | 328 | clone_object( "/obj/baggage" );
auction_room.c | 331 | set_name( "box" );
auction_room.c | 334 | set_weight( 500000 );
auction_room.c | 335 | set_max_weight( 500000 );
auction_room.c | 336 | set_volume( 500000 );
auction_room.c | 343 | create_auto_load( ({ box }), 0 );
auction_room.c | 349 | dest_me();
auction_room.c | 357 | query_multiple_short( map( obs, (: file_name( $1 ) :) ) ) );
auction_room.c | 361 | dest_me();
auction_room.c | 377 | GECM( query_multiple_short( things ) ) );
auction_room.c | 385 | enchant_string(), adjectives: temp3->query_adjectives() );
auction_room.c | 416 | filter( cases, (: objectp( $1 ) :) );
auction_room.c | 423 | values( cases );
auction_room.c | 430 | clone_object( "/std/object" );
auction_room.c | 431 | set_name( "case" );
auction_room.c | 432 | set_short( current_store->colour + " case" );
auction_room.c | 436 | add_adjective( current_store->colour );
auction_room.c | 437 | move( this_object() );
auction_room.c | 438 | reset_get();
auction_room.c | 439 | add_extra_look( this_object() );
auction_room.c | 446 | this_object()->add_new_case( all_new_cases );
auction_room.c | 451 | TCTP( "Looking at lot %d. ", temp_lot->case_code );
auction_room.c | 452 | TCTP( "Status is: %s\n", temp_lot->status );
auction_room.c | 455 | TCTP( "In open %s", "\n" );
auction_room.c | 465 | filter( cases, (: $2 == $(temp_lot)->case_code :) );
auction_room.c | 466 | map( exp_cases, (: this_object()->remove_lot( $1 ) :) );
auction_room.c | 474 | recover_lot( temp_lot->lot_autoload );
auction_room.c | 486 | time() + ( 2 * 60 * 60 );
auction_room.c | 505 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 523 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 536 | time() + ( 2 * 60 * 60 );
auction_room.c | 548 | map_delete( temp_lot->bids, name );
auction_room.c | 553 | time() + ( 2 * 60 * 60 );
auction_room.c | 559 | sort_array( values( temp_lot->bids ), -1 );
auction_room.c | 561 | TCTP( "bids is %O.\n", bids );
auction_room.c | 562 | filter( temp_lot->bids, (: $2 == $(bids[0]) :) );
auction_room.c | 578 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 584 | ctime( time() ), temp_lot->case_code );
auction_room.c | 586 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 590 | TCTP( "In closed %s", "" );
auction_room.c | 593 | log_file( "REAS", "%s: Closed lot %d\n", ctime( time() ), temp_lot->case_code );
auction_room.c | 600 | call_out( "lot_check", CHECK_CYCLE );
auction_room.c | 621 | value_from_string( res_price, currency );
auction_room.c | 643 | time() + ( auction_time * 60 );
auction_room.c | 646 | time() + ( auction_time * 60 * 60 );
auction_room.c | 654 | time() + ( auction_time * 60 * 60 * 24 );
auction_room.c | 663 | this_player()->add_failed_mess( this_player(), "You can't auction money.\n" );
auction_room.c | 664 | move( this_player(), "" );
auction_room.c | 666 | move( environment( this_player() ),  "$N falls to the floor!\n" );
auction_room.c | 675 | generate_store( things, lot_count );
auction_room.c | 678 | generate_auto_load( things );
auction_room.c | 682 | this_player()->add_failed_mess( this_player(), "You can't auction that.\n" );
auction_room.c | 683 | move( this_player(), "" );
auction_room.c | 685 | move( environment( this_player() ),  "$N falls to the floor!\n" );
auction_room.c | 700 | money_value_string( value, currency ) +".\n" );
auction_room.c | 706 | TCTP( "Generated lot %d.\n", lot_count );
auction_room.c | 717 | write( "There is nothing up for auction in this store.\n" );
auction_room.c | 724 | filter( lots, (: $1->case_code == $( cases[ _case ] ) :) );
auction_room.c | 739 | write("$P$Auctions$P$" + str);
auction_room.c | 753 | map_delete( cases, ob );
auction_room.c | 754 | dest_me();
auction_room.c | 770 | if ( sizeof( boxes ) >
auction_room.c | 785 | filter_array( lots, (: $1->case_code == cases[ $(box) ] :) );
auction_room.c | 801 | write( "You have been excluded from bidding on this object.\n" );
auction_room.c | 808 | ctime( time() ), temp->case_code );
auction_room.c | 810 | write( "Something has gone wrong. Please fetch a liaison post haste!\n" );
auction_room.c | 811 | printf( "Your lot code is: %d.\n", temp->case_code );
auction_room.c | 813 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 814 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 818 | value_from_string( offer, currency );
auction_room.c | 835 | money_value_string( temp->reserve_price, currency ) +".\n" );
auction_room.c | 842 | money_value_string( 400, currency ) + ".\n" );
auction_room.c | 863 | this_player()->query_name();
auction_room.c | 894 | if ( sizeof( boxes ) >
auction_room.c | 909 | TCTP( "Container: %O", container );
auction_room.c | 910 | TCTP( "The case code for this case is: %d.\n", container->case_code );
auction_room.c | 919 | uniq_array( names );
auction_room.c | 928 | TCTP( "Adding: %O\n", temp2 );
auction_room.c | 936 | TCTP( "Object list: %O", contents );
auction_room.c | 939 | explode( target, " " );
auction_room.c | 945 | TCTP( "Search Name: %s ", name );
auction_room.c | 946 | TCTP( "Search Adj: %O.\n", adjectives );
auction_room.c | 957 | TCTP( "Matches: %O\n", contenders );
auction_room.c | 965 | GECM( contender[0]) ) ) :) );
auction_room.c | 976 | pluralize( target ) + " in $I.\n", ({ box }) );
auction_room.c | 980 | add_a( target ) +" in $I.\n", ({ box }) );
auction_room.c | 982 | GECM( $(contenders[ identifier - 1 ][0]) ) ) :), 0 );
auction_room.c | 988 | sizeof( contenders ) +" objects like that in the case.\n" );
auction_room.c | 1009 | TCTP( "Contenders 2: %O\n", contenders );
auction_room.c | 1019 | if ( sizeof( contenders ) >
auction_room.c | 1031 | add_a( target ) +" in $I.\n", ({ box }) );
auction_room.c | 1033 | GECM( $(contender[0]) ) ) :), 0 );
auction_room.c | 1042 | pay_money(MONEY_HAND->create_money_array(-amount, currency ));
auction_room.c | 1045 | create_money_array( amount, currency );
auction_room.c | 1046 | adjust_money( money, currency );
auction_room.c | 1053 | unguarded( (: restore_object, location :) );
auction_room.c | 1061 | unguarded( (: save_object, location :) );
auction_room.c | 1074 | save_file();
auction_room.c | 1075 | if ( sizeof( cases ) ) keys( cases )->dest_me();
auction_room.c | 1076 | dest_me();
auction_room.c | 1083 | load_auto_load_to_array( lot_autoload, this_player() );
auction_room.c | 1093 | all_inventory( boxes[ 0 ] );
auction_room.c | 1104 | call_out( (: $(boxes)->dest_me() :), 5 );
auction_room.c | 1117 | if ( sizeof( boxes ) >
auction_room.c | 1132 | filter( lots, (: $1->case_code == cases[ $(box) ] :) );
auction_room.c | 1143 | time() + ( 2 * 60 * 60 );
auction_room.c | 1145 | recover_lot( _lots[0]->lot_autoload );
auction_room.c | 1148 | write( "Something has gone wrong. Please fetch a liaison post haste!\n" );
auction_room.c | 1149 | printf( "Your lot code is: %d.\n", _lots[0]->case_code );
auction_room.c | 1151 | time() + ( 7 * 24 * 60 * 60 );
auction_room.c | 1152 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1156 | move( this_player(), "You collect $N." );
auction_room.c | 1158 | move( environment( this_player() ), "$N falls to the floor!\n" );
auction_room.c | 1161 | this_object()->remove_lot( box );
auction_room.c | 1163 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1174 | if ( sizeof( boxes ) >
auction_room.c | 1192 | filter( lots, (: $1->case_code == $(code) :) );
auction_room.c | 1196 | sizeof( _lots ) );
auction_room.c | 1197 | printf( "Your lot code is: %d.\n", code );
auction_room.c | 1198 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1213 | printf( "You neatly letter %s on the case.\n", int_desc );
auction_room.c | 1214 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1229 | filter( lots, (: $1->case_code == $(code) :) );
auction_room.c | 1242 | money_value_string( temp->reserve_price, currency );
auction_room.c | 1270 | filter( lots, (: ((c_lot)$1)->status != OPEN :) );
auction_room.c | 1271 | filter( _exp_lots, (: ((c_lot)$1)->status != CLOSED :) );
auction_room.c | 1272 | filter( _exp_lots, (: ((c_lot)$1)->status != WAIT_CRE_INTERVENTION :) );
auction_room.c | 1275 | do_collect( "money" );
auction_room.c | 1276 | do_collect( "successful bids" );
auction_room.c | 1277 | do_collect( "expired lots" );
auction_room.c | 1284 | this_player()->query_name() );
auction_room.c | 1291 | amtime( tempy->expiration_time )+".\n" );
auction_room.c | 1297 | write( "You aren't owed any money!\n" );
auction_room.c | 1302 | adjust_money( amount - to_int( amount * commission ), this_player() );
auction_room.c | 1309 | map_delete( payments, this_player()->query_name() );
auction_room.c | 1313 | save_file();
auction_room.c | 1321 | this_player()->query_name() );
auction_room.c | 1324 | write( "You aren't expecting any bids!\n" );
auction_room.c | 1335 | sizeof( _lots ) >
auction_room.c | 1336 | money_value_string( amount, currency ) );
auction_room.c | 1337 | this_player()->add_failed_mess( this_object(), "" );
auction_room.c | 1341 | adjust_money( -amount, this_player() );
auction_room.c | 1344 | recover_lot( _lot->lot_autoload );
auction_room.c | 1352 | time() + ( 2 * 60 * 60 );
auction_room.c | 1355 | move( this_player(), "You collect $N." );
auction_room.c | 1357 | move( environment( this_player() ), "$N falls to the floor!\n" );
auction_room.c | 1361 | sizeof( _lots ) >
auction_room.c | 1362 | money_value_string( amount, currency ) );
auction_room.c | 1371 | this_player()->query_name() );
auction_room.c | 1379 | sizeof( _lots );
auction_room.c | 1386 | sizeof( _lots ) >
auction_room.c | 1387 | money_value_string( amount, currency ) );
auction_room.c | 1391 | adjust_money( -amount, this_player() );
auction_room.c | 1394 | recover_lot( _lot->lot_autoload );
auction_room.c | 1402 | time() + ( 2 * 60 * 60 );
auction_room.c | 1405 | move( this_player(), "You collect $N." );
auction_room.c | 1407 | move( environment( this_player() ), "$N falls to the floor!\n" );
auction_room.c | 1412 | sizeof( _lots ), sizeof( _lots ) >
auction_room.c | 1414 | money_value_string( amount, currency ) );
auction_room.c | 1425 | this_player()->query_property( "ignoring" );
auction_room.c | 1427 | if ( sizeof( boxes ) >
auction_room.c | 1445 | filter( lots, (: $1->case_code == $(code) :) );
auction_room.c | 1449 | sizeof( _lots ) );
auction_room.c | 1450 | printf( "Your lot code is: %d.\n", code );
auction_room.c | 1451 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1466 | write( "No one is being excluded from bidding on this lot.\n" );
auction_room.c | 1475 | write( excluded + " is already excluded from this lot.\n" );
auction_room.c | 1479 | notify_fail( excluded +" is not a player here!\n" );
auction_room.c | 1482 | uniq_array( _lot->excluded );
auction_room.c | 1484 | query_multiple_short( boxes ) +".\n" );
auction_room.c | 1489 | write( "You aren't ignoring anyone!\n" );
auction_room.c | 1493 | uniq_array( _lot->excluded );
auction_room.c | 1495 | query_multiple_short( boxes ) +".\n"  );
auction_room.c | 1496 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1508 | if ( sizeof( boxes ) >
auction_room.c | 1526 | filter( lots, (: $1->case_code == $(code) :) );
auction_room.c | 1530 | sizeof( _lots ) );
auction_room.c | 1531 | printf( "Your lot code is: %d.\n", code );
auction_room.c | 1532 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1547 | write( "No one is excluded from bidding on this case!\n" );
auction_room.c | 1557 | write( capitalize( excluded ) + " is now allowed to bid on this case.\n" );
auction_room.c | 1558 | this_player()->add_succeeded_mess( this_object(), "" );
auction_room.c | 1581 | money_value_string( lot->current_bid[ 0 ], currency );
auction_room.c | 1584 | money_value_string( lot->reserve_price, currency );
auction_room.c | 1590 | amtime( lot->expiration_time );
auction_room.c | 1593 | amtime( lot->expiration_time );
auction_room.c | 1609 | generate_advertising_string( temp );
meeting.c | 12 | add_help_file("meeting");
meeting.c | 13 | create();
meeting.c | 14 | create();
meeting.c | 19 | init();
meeting.c | 20 | init();
newspaper_office.c | 12 | create();
newspaper_office.c | 13 | create();
newspaper_office.c | 14 | add_help_file("newspaper_office");
newspaper_office.c | 18 | init();
newspaper_office.c | 19 | init();
complaints_room.c | 17 | add_help_file("complaints_room");
complaints_room.c | 19 | create();
complaints_room.c | 22 | set_not_replaceable( 1 );
complaints_room.c | 25 | this_object()->setup();
complaints_room.c | 26 | this_object()->reset();
complaints_room.c | 34 | init();
complaints_room.c | 35 | init();
room_rental_office.c | 17 | create();
room_rental_office.c | 18 | create();
room_rental_office.c | 23 | init();
room_rental_office.c | 24 | init();
council_chambers.c | 8 | create();
council_chambers.c | 21 | query_all_nomic_rules(query_council_area());
council_chambers.c | 23 | add_failed_mess("There are no rules, oh no!  Lawlessness!\n");
council_chambers.c | 27 | sort_array(rules, (: $1->id - $2->id :) );
council_chambers.c | 46 | rule_as_string(0, rule);
council_chambers.c | 49 | write("$P$Nomic rules$P$" + ret);
council_chambers.c | 62 | query_nomic_rule(query_council_area(), num);
council_chambers.c | 64 | add_failed_mess("There is no rule number " + num + ".\n");
council_chambers.c | 80 | rule_as_string(0, rule);
council_chambers.c | 82 | write("$P$Nomic rules$P$" + ret);
council_chambers.c | 97 | query_all_motions(query_council_area());
council_chambers.c | 99 | this_player()->query_name());
council_chambers.c | 101 | filter(rules, (: $1->state == NOMIC_STATE_CITIZEN_VOTE :));
council_chambers.c | 105 | add_failed_mess("No motion to look at or vote on.\n");
council_chambers.c | 119 | add_failed_mess("The motion " + num + " was not found.\n");
council_chambers.c | 123 | write("$P$New Nomic Rules$P$" + ret);
council_chambers.c | 138 | query_all_motions(query_council_area());
council_chambers.c | 140 | this_player()->query_name());
council_chambers.c | 142 | filter(rules, (: $1->state == NOMIC_STATE_CITIZEN_VOTE :));
council_chambers.c | 146 | add_failed_mess("No motion to look at or vote on.\n");
council_chambers.c | 156 | write("$P$New Nomic Rules$P$" + ret);
council_chambers.c | 171 | query_motion(query_council_area(), num);
council_chambers.c | 173 | this_player()->query_name());
council_chambers.c | 175 | add_failed_mess("Could not find the motion " + num + ".\n");
council_chambers.c | 181 | this_player()->do_edit("", "finish_comment_on", this_object(), 0, rule);
council_chambers.c | 188 | write("Aborting comment.\n");
council_chambers.c | 193 | write("Succeeded in making a comment on the rule.\n");
council_chambers.c | 195 | write("Could not make a comment on the rule for some reason.\n");
council_chambers.c | 211 | this_player()->query_name());
council_chambers.c | 213 | add_failed_mess("You cannot amend rules.\n");
council_chambers.c | 217 | query_motion(query_council_area(), num);
council_chambers.c | 219 | add_failed_mess("Could not find the motion " + num + ".\n");
council_chambers.c | 223 | add_failed_mess("You cannot amend the motion " + num + ".\n");
council_chambers.c | 228 | add_failed_mess("You cannot amend the motion " + num + ".\n");
council_chambers.c | 235 | this_player()->do_edit("", "finish_amend_motion", this_object(), 0, rule);
council_chambers.c | 242 | write("Aborting amendment.\n");
council_chambers.c | 247 | write("Succeeded in adding an amendment to the motion.\n");
council_chambers.c | 249 | write("Could not add an amendment to the rule for some reason.\n");
council_chambers.c | 264 | query_motion(query_council_area(), num);
council_chambers.c | 266 | this_player()->query_name());
council_chambers.c | 268 | add_failed_mess("Could not find the motion " + num + ".\n");
council_chambers.c | 274 | add_failed_mess("The rule is not in a state that you can vote on.\n");
council_chambers.c | 296 | add_failed_mess("You have already voted for this rule!\n");
council_chambers.c | 305 | add_failed_mess("Could not vote for the rule for some reason.\n");
council_chambers.c | 317 | query_nomic_rule(query_council_area(), num);
council_chambers.c | 319 | add_failed_mess("The rule " + num + " does not exist.\n");
council_chambers.c | 325 | add_failed_mess("You cannot do this until you are a magistrate.\n");
council_chambers.c | 330 | add_failed_mess("You cannot change that rule.\n");
council_chambers.c | 335 | rule_as_string(0, rule) + "\n");
council_chambers.c | 336 | this_player()->do_edit("", "amend_current_rule", this_object(), 0, rule);
council_chambers.c | 343 | write("Aborting the addition of an amendment.\n");
council_chambers.c | 348 | rule_as_string(0, rule) + "\nAre you sure you wish to do this? ");
council_chambers.c | 349 | input_to("amend_current_rule_check", 0, rule, str);
council_chambers.c | 356 | lower_case(str);
council_chambers.c | 358 | write("Aborting the addition of an amendment.\n");
council_chambers.c | 364 | write("Cannot add the rule amendment.\n");
council_chambers.c | 366 | write("Added a motion to amend the rule.\n");
council_chambers.c | 378 | query_nomic_rule(query_council_area(), num);
council_chambers.c | 380 | add_failed_mess("The rule " + num + " does not exist.\n");
council_chambers.c | 386 | add_failed_mess("You cannot do this until you are a magistrate.\n");
council_chambers.c | 391 | add_failed_mess("You cannot change that rule.\n");
council_chambers.c | 399 | input_to("remove_current_rule_check", 0, rule);
council_chambers.c | 406 | lower_case(str);
council_chambers.c | 408 | write("Aborting the removal of the rule.\n");
council_chambers.c | 414 | write("Cannot remove the rule.\n");
council_chambers.c | 416 | write("Added a motion to remove the rule.\n");
council_chambers.c | 428 | query_type_number(type);
council_chambers.c | 431 | add_failed_mess("The type " + type + " is invalid.\n");
council_chambers.c | 437 | add_failed_mess("You cannot do this until you are a magistrate.\n");
council_chambers.c | 441 | write("What rule would you like to create?\n");
council_chambers.c | 442 | this_player()->do_edit("", "create_motion", this_object(), 0, type_no);
council_chambers.c | 449 | write("Aborting the creation of the rule.\n");
council_chambers.c | 456 | input_to("create_motion_check", 0, type_no, str);
council_chambers.c | 463 | lower_case(str);
council_chambers.c | 465 | write("Aborting the creation of the rule.\n");
council_chambers.c | 471 | write("Cannot create the rule.\n");
council_chambers.c | 473 | write("Added a motion to create the rule.\n");
council_chambers.c | 488 | add_failed_mess("You cannot do this until you are a magistrate.\n");
council_chambers.c | 492 | query_nomic_rule(query_council_area(), num);
council_chambers.c | 494 | add_failed_mess("The rule " + num + " does not exist.\n");
council_chambers.c | 499 | add_failed_mess("You cannot change that rule.\n");
council_chambers.c | 503 | query_type_number(new_type);
council_chambers.c | 506 | add_failed_mess("The type " + new_type + " is not valid.\n");
council_chambers.c | 514 | input_to("transmogrify_current_rule_check", 0, rule, new_type_no);
council_chambers.c | 522 | lower_case(str);
council_chambers.c | 524 | write("Aborting the removal of the rule.\n");
council_chambers.c | 531 | write("Cannot transmogrify the rule.\n");
council_chambers.c | 533 | write("Added a motion to transmogrify the rule.\n");
council_chambers.c | 539 | init();
council_chambers.c | 540 | add_command("list", "[rules]", (: do_list_rules() :) );
council_chambers.c | 541 | add_command("list", "rule <number>", (: do_list_one_rule($4[0]) :) );
council_chambers.c | 543 | do_list_single_motion($4[0]) :));
council_chambers.c | 544 | add_command("list", "motions", (: do_list_motions(1) :));
council_chambers.c | 546 | do_list_motions($4[0] == "brief") :));
council_chambers.c | 548 | do_comment_on($4[0]) :) );
council_chambers.c | 550 | do_amend_motion($4[0]) :) );
council_chambers.c | 552 | do_vote_on($4[1], $4[0]) :));
council_chambers.c | 555 | do_amend_current_rule($4[0]) :) );
council_chambers.c | 557 | do_create_motion($4[0]) :) );
council_chambers.c | 559 | do_remove_current_rule($4[0]) :) );
council_chambers.c | 561 | do_transmogrify_current_rule($4[0], $4[1]) :) );
council_vote.c | 16 | create();
council_vote.c | 19 | query_name()) :));
council_vote.c | 20 | set_completion_action( (: post_results :));
council_vote.c | 21 | set_vote_duration( 7 * 24 * 60 * 60);
council_vote.c | 22 | set_open_voting(1);
council_vote.c | 23 | create();
council_vote.c | 24 | add_help_file("voting_booth");
council_vote.c | 25 | setup_after_load();
council_vote.c | 41 | add_failed_mess("You must be a citizen to see this information.\n");
council_vote.c | 45 | query_magistrates(query_council_area());
council_vote.c | 61 | sort_array(NOMIC_HANDLER->query_people_nominated(query_council_area()), 0);
council_vote.c | 69 | capitalize($1) :)));
council_vote.c | 88 | sort_array(NOMIC_HANDLER->query_can_vote_for(query_council_area()), 0);
council_vote.c | 106 | this_player()->more_string(ret, "Status");
council_vote.c | 118 | add_failed_mess("You must be a citizen to vote.\n");
council_vote.c | 123 | add_failed_mess("There is no election at the moment.\n");
council_vote.c | 129 | add_failed_mess("You have already voted.  You cannot vote twice!\n");
council_vote.c | 133 | explode(replace_string(lower_case(person), " ", ""), ",");
council_vote.c | 134 | uniq_array(bits);
council_vote.c | 153 | if (sizeof(bits) >
council_vote.c | 169 | add_failed_mess("Unable to vote for some reason.\n");
council_vote.c | 177 | lower_case(person);
council_vote.c | 180 | add_failed_mess("You must be a citizen to nominate someonej.\n");
council_vote.c | 185 | add_failed_mess("You can only nominate someone who is a citizen.\n");
council_vote.c | 190 | add_failed_mess("There is no election at the moment.\n");
council_vote.c | 195 | add_failed_mess("You cannot nominate a creator.\n");
council_vote.c | 202 | add_failed_mess("You have already nominated " + person + ".\n");
council_vote.c | 214 | add_failed_mess("Unable to nominate for some reason.\n");
council_vote.c | 229 | query_all_motions(query_council_area());
council_vote.c | 231 | this_player()->query_name());
council_vote.c | 233 | filter(rules, (: $1->state == NOMIC_STATE_CITIZEN_VOTE :));
council_vote.c | 237 | add_failed_mess("No motion to look at or vote on.\n");
council_vote.c | 243 | motion_as_string(0, query_council_area(), rule);
council_vote.c | 246 | write("$P$New Nomic Rules$P$" + ret);
council_vote.c | 261 | query_motion(query_council_area(), num);
council_vote.c | 263 | this_player()->query_name());
council_vote.c | 265 | add_failed_mess("Could not find the motion " + num + ".\n");
council_vote.c | 271 | add_failed_mess("The rule is not in a state that you can vote on.\n");
council_vote.c | 293 | add_failed_mess("You have already voted for this rule!\n");
council_vote.c | 302 | add_failed_mess("Could not vote for the rule for some reason.\n");
council_vote.c | 313 | sizeof(choices);
council_vote.c | 331 | add_vote(type, description, choices, ending);
council_vote.c | 343 | init();
council_vote.c | 344 | init();
council_vote.c | 345 | add_command("list", "elections", (: do_status() :));
council_vote.c | 346 | add_command("list", "motions", (: do_list_motions() :));
council_vote.c | 347 | add_command("information", "", (: do_status() :));
council_vote.c | 348 | add_command("status", "", (: do_status() :));
council_vote.c | 350 | do_vote_on($4[1], $4[0]) :));
council_vote.c | 351 | add_command("vote", "for <string'people'>", (: do_vote($4[0], 0) :));
council_vote.c | 352 | add_command("vote", "force for <string'people'>", (: do_vote($4[0], 1) :));
council_vote.c | 353 | add_command("nominate", "<string'person'>", (: do_nominate($4[0]) :));
council_vote.c | 356 | init_add_vote();
council_document.c | 15 | is_magistrate_of(query_council_area(), name);
council_treasury.c | 37 | do_deposit(int);
council_treasury.c | 38 | do_check();
council_treasury.c | 56 | debug_printf("Error: No save file set.\n");
council_treasury.c | 59 | unguarded((: save_object, _save_file :));
council_treasury.c | 71 | if (file_size(_save_file + ".o") >
council_treasury.c | 72 | unguarded((: restore_object, _save_file :));
council_treasury.c | 120 | return (person == 2);
council_treasury.c | 123 | return (person >= 1);
council_treasury.c | 141 | money_value_string(transactions[0]->amount, query_property("place"));
council_treasury.c | 146 | log_file(_archive, str, 0);
council_treasury.c | 172 | new (class transaction, person: player->query_name(), amount: amount, reason: reason, date: time(), action:action);
council_treasury.c | 174 | check_time();
council_treasury.c | 175 | save_me();
council_treasury.c | 189 | add_failed_mess("You aren't allowed to view the transactions.\n");
council_treasury.c | 195 | write("$P$Transactions$P$" + ret);
council_treasury.c | 200 | sizeof(transactions);
council_treasury.c | 215 | sizeof(transactions);
council_treasury.c | 227 | write("$P$Transactions$P$" + ret);
council_treasury.c | 236 | set_short("council treasury");
council_treasury.c | 237 | set_long("This is the treasury for the council.\n");
council_treasury.c | 238 | create();
council_treasury.c | 239 | load_me();
council_treasury.c | 240 | add_help_file( "council_treasury" );
council_treasury.c | 248 | init();
council_treasury.c | 252 | do_withdraw($4[0], $4[1], $4[2]) :));
council_treasury.c | 254 | do_deposit($4[0]) :));
council_treasury.c | 255 | this_player()->add_command("check", this_object(), "balance");
council_treasury.c | 258 | view_transactions() :));
council_treasury.c | 261 | view_transactions($4[0]) :));
council_treasury.c | 279 | add_property("place", word);
council_treasury.c | 305 | notify_fail("You must be a magistrate to withdraw funds.\n");
council_treasury.c | 310 | notify_fail("You must withdraw something.\n");
council_treasury.c | 314 | clone_object(MONEY_OBJECT);
council_treasury.c | 315 | set_money_array((mixed *) MONEY_HAND->query_values_in(query_property("place")));
council_treasury.c | 317 | notify_fail("That currency is not legal tender here.  Sorry.\n");
council_treasury.c | 318 | dest_me();
council_treasury.c | 324 | notify_fail("There isn't that much in the account.\n");
council_treasury.c | 325 | dest_me();
council_treasury.c | 328 | set_money_array(({ type, number }));
council_treasury.c | 330 | save_me();
council_treasury.c | 345 | move(this_object());
council_treasury.c | 349 | log_action(this_player(), amount, "withdrew", reason);
council_treasury.c | 352 | this_player()->save();
council_treasury.c | 370 | add_failed_mess("You are not allowed to deposit.\n");
council_treasury.c | 373 | parse_money(words, this_player(), query_property("place"));
council_treasury.c | 377 | notify_fail("You do not have \"" + words + "\".\n");
council_treasury.c | 379 | notify_fail("You can only deposit money.\n");
council_treasury.c | 381 | notify_fail("You can only deposit legal tender.\n");
council_treasury.c | 385 | filter_legal_tender(money, query_property("place"));
council_treasury.c | 389 | query_value_in(query_property("place"));
council_treasury.c | 393 | move(this_player());
council_treasury.c | 395 | move(this_player());
council_treasury.c | 397 | add_failed_mess("That is too small an amount to deposit.\n");
council_treasury.c | 402 | save_me();
council_treasury.c | 406 | move(this_player());
council_treasury.c | 410 | the_short();
council_treasury.c | 411 | move("/room/rubbish");
council_treasury.c | 412 | this_player()->save();
council_treasury.c | 414 | add_failed_mess("Unable to find any legal money to deposit.\n");
council_treasury.c | 418 | write("You give the teller " + howmuch + ".\n");
council_treasury.c | 431 | log_action(this_player(), amount, "deposited", "");
rooftop.c | 20 | set_fall_damage( "all", 500 );
rooftop.c | 21 | set_slope( 60, "ledge", PATH + "womble01" );
rooftop.c | 28 | set_weak_roof( 2000, PATH + "womble01" );
rooftop.c | 29 | set_jump( ({ "north", "n" }), PATH + "ledge01", PATH + "womble01", 6 );
rooftop.c | 41 | set_death_reason( string );
rooftop.c | 42 | set_fall_damage( string, int );
rooftop.c | 43 | query_fall_damage( string );
rooftop.c | 44 | calc_fall_damage( string );
rooftop.c | 45 | set_weak_roof( int, string );
rooftop.c | 46 | set_slope( int, string, string );
rooftop.c | 47 | process_string( string, mapping );
rooftop.c | 48 | process_mess( string, object, string );
rooftop.c | 101 | init();
rooftop.c | 103 | this_object()->do_roofjump( $4[0] ) :) );
rooftop.c | 109 | create();
rooftop.c | 179 | this_object()->setup();
rooftop.c | 317 | if( member_array( type, damage_types ) >
rooftop.c | 342 | query_fall_damage( type ) + random( query_fall_damage( type ) );
rooftop.c | 386 | set_jump( ({ "north", "n" }), RUN + "run12", FILIGREE + "filigree10", 6 );
rooftop.c | 399 | sort_array( dir, 1 );
rooftop.c | 412 | add_exit( dir[0], dest, "roof" );
rooftop.c | 429 | this_object()->do_fall( ob, dest, dam_type, messages, 0 );
rooftop.c | 430 | notify_fail( "" );
rooftop.c | 444 | remove_property( TOO_SOON );
rooftop.c | 446 | sizeof( messages );
rooftop.c | 447 | process_mess( messages[i], obj, dir );
rooftop.c | 463 | tell_object( obj, messages[0] );
rooftop.c | 464 | move_with_look( destob, messages[2], messages[1] );
rooftop.c | 468 | calc_fall_damage( dam_type );
rooftop.c | 470 | set_death_reason( "plummeting from the rooftops" );
rooftop.c | 471 | attack_by( this_object() );
rooftop.c | 472 | do_death();
rooftop.c | 474 | adjust_hp( -damage );
rooftop.c | 498 | add_property( TOO_SOON, 1, 5 );
rooftop.c | 503 | all_inventory( this_object() );
rooftop.c | 505 | sizeof(contents);
rooftop.c | 506 | query_weight();
rooftop.c | 507 | query_loc_weight();
rooftop.c | 511 | query_name(), objectweight );
rooftop.c | 522 | tell_room( environment( obj ), weak_messages[3] );
rooftop.c | 527 | sizeof(contents);
rooftop.c | 528 | move_with_look( "/room/void" );
rooftop.c | 531 | sizeof(contents);
rooftop.c | 548 | to_float( obj->query_max_weight() );
rooftop.c | 552 | to_int( diff + ( gradient * 2 ) ) );
rooftop.c | 561 | process_mess( corpse_slope_messages[0], obj, 0 ) );
rooftop.c | 565 | process_mess( item_slope_messages[0], obj, 0 ) );
rooftop.c | 574 | remove_property( TOO_SOON );
rooftop.c | 585 | query_name(), destination, diff );
rooftop.c | 589 | remove_property( TOO_SOON );
rooftop.c | 596 | random(2) ] + "%^RESET%^\n" );
rooftop.c | 605 | move_with_look( "/room/void" );
rooftop.c | 607 | do_fall( obj, destob, "slope", slope_messages, 0 );
rooftop.c | 625 | add_failed_mess( "You can't jump there!\n" );
rooftop.c | 642 | to_float( this_player()->query_loc_weight() );
rooftop.c | 643 | to_float( this_player()->query_max_weight() );
rooftop.c | 655 | write( process_mess( jump_success_messages[0], this_player(), dir ) );
rooftop.c | 658 | process_mess( jump_success_messages[1], this_player(), dir ), );
rooftop.c | 661 | write( process_mess( jump_failure_messages[0], this_player(), dir ) );
rooftop.c | 675 | call_out( (: death_reason = 0 :), 2 );
rooftop.c | 677 | convert_message( death_reason );
rooftop.c | 692 | if( bar ) str = replace_string( str, foo, bar );
rooftop.c | 693 | convert_message( str );
rooftop.c | 732 | test_remove( ob, flag, dest );
rooftop.c | 736 | file_name(dest);
rooftop.c | 741 | tell_object( ob, "You haven't quite caught your balance yet.\n" );
rooftop.c | 742 | notify_fail( "" );
rooftop.c | 745 | test_remove( ob, flag, dest );
club_control_room.c | 13 | create();
club_control_room.c | 14 | create();
club_control_room.c | 18 | this_object()->setup();
club_control_room.c | 19 | this_object()->reset();
club_control_room.c | 24 | init();
club_control_room.c | 25 | init();
guild.c | 13 | create();
guild.c | 14 | create();
guild.c | 18 | init();
guild.c | 19 | init();
basic_room.c | 65 | add_item( mixed shorts, mixed desc, int no_plural );
basic_room.c | 66 | remove_item( string word );
basic_room.c | 67 | setup_room_chat( );
basic_room.c | 68 | set_not_replaceable(int replace);
basic_room.c | 69 | query_not_replaceable();
basic_room.c | 70 | set_night_long( string str );
basic_room.c | 77 | create();
basic_room.c | 78 | create();
basic_room.c | 79 | create();
basic_room.c | 80 | create();
basic_room.c | 81 | create();
basic_room.c | 82 | create();
basic_room.c | 83 | set_can_export_inventory();
basic_room.c | 84 | set_ignore_livings_in_inventory( 0 );
basic_room.c | 92 | this_object() ) ) );
basic_room.c | 93 | add_property( "location", "inside" );
basic_room.c | 94 | add_property( "here", "on the floor" );
basic_room.c | 96 | this_object()->setup();
basic_room.c | 97 | this_object()->reset();
basic_room.c | 100 | catch( "/obj/handlers/map"->check_map( file_name( this_object() ) ) );
basic_room.c | 103 | all_inventory(virt_room);
basic_room.c | 104 | catch(npcs->real_room(file_name()));
basic_room.c | 108 | inherit_list(this_object());
basic_room.c | 114 | catch(replace_program(fname));
basic_room.c | 172 | time();
basic_room.c | 179 | time();
basic_room.c | 196 | time();
basic_room.c | 216 | time();
basic_room.c | 237 | time();
basic_room.c | 249 | copy(co_ord);
basic_room.c | 263 | write( "Warning: Co-ordinate must be an array.\n" );
basic_room.c | 267 | write( "Warning: The co-ordinate must have three elements.\n" );
basic_room.c | 332 | sizeof( dest_other );
basic_room.c | 341 | call_other( this_object(), tmp, dest_other[ i ] );
basic_room.c | 344 | call_other( tmp[ 0 ], tmp[ 1 ], dest_other[ i ] );
basic_room.c | 395 | query_aliases() { return copy( aliases );
basic_room.c | 410 | add_exit( "north", PATH +"dining_hall", "corridor" );
basic_room.c | 411 | add_alias( ({ "enter", "enter hall", "enter dining hall" }), "north" );
basic_room.c | 413 | add_exit( "board carriage", PATH +"carriage", "door" );
basic_room.c | 414 | add_alias( "board", "board carriage" );
basic_room.c | 424 | add_alias( name, word );
basic_room.c | 430 | call_out( "calc_exits", 1 );
basic_room.c | 447 | remove_exit( "board carriage" );
basic_room.c | 448 | remove_alias( "board", "board carriage" );
basic_room.c | 459 | remove_alias( name, word );
basic_room.c | 465 | delete( aliases, i, 2 );
basic_room.c | 477 | query_exits() { return copy(_exits);
basic_room.c | 485 | reset_exits() { _exits = ({ });
basic_room.c | 538 | query_hidden_objects() { return hidden_objects + ({ });
basic_room.c | 561 | clone_object(PATH + SIGN);
basic_room.c | 562 | add_hidden_object(sign);
basic_room.c | 566 | add_hidden_object(fluffy_container);
basic_room.c | 567 | filter(all_inventory(), (: living($1) :));
basic_room.c | 568 | move(ROOM_VOID);
basic_room.c | 571 | move(this_object());
basic_room.c | 598 | member_array( thing, hidden_objects );
basic_room.c | 641 | copy( door_control );
basic_room.c | 646 | debug_printf("Doing a door_control empty call %O\n", direc);
basic_room.c | 661 | copy( dest_other );
basic_room.c | 663 | member_array( direc, dest_other );
basic_room.c | 667 | copy( dest_other[ i + 1 ] );
basic_room.c | 734 | find_rel( dest_other[ i ] ) });
basic_room.c | 749 | query_destination("south");
basic_room.c | 751 | do_error();
basic_room.c | 753 | do_move("south");
basic_room.c | 759 | member_array( exit, dest_other );
basic_room.c | 790 | init();
basic_room.c | 792 | setup_daytime_stuff();
basic_room.c | 794 | setup_nighttime_stuff();
basic_room.c | 832 | add_property( "dark mess", word );
basic_room.c | 858 | set_bright_mess( string word ) { add_property( "bright mess", word );
basic_room.c | 876 | query_property( "room size" );
basic_room.c | 896 | query_room_size();
basic_room.c | 900 | return ({ room_size, room_size, room_size });
basic_room.c | 917 | add_property( "room size", number );
basic_room.c | 922 | add_property( "room size", number );
basic_room.c | 926 | write( "Room size must be an integer or an array of three integers.\n" );
basic_room.c | 938 | member_array( word, aliases );
basic_room.c | 961 | sizeof( dest_other );
basic_room.c | 970 | call_other( this_object(), tmp, dest_other[ i ] );
basic_room.c | 973 | call_other( tmp[ 0 ], tmp[ 1 ], dest_other[ i ] );
basic_room.c | 988 | strsrch(dest_other[i], " ");
basic_room.c | 1024 | calc_short_exit_string();
basic_room.c | 1038 | this_object()->query_property( "octarine_mess" );
basic_room.c | 1071 | calc_long_exit();
basic_room.c | 1095 | query_long();
basic_room.c | 1102 | calc_extra_look();
basic_room.c | 1107 | enchant_string();
basic_room.c | 1112 | mxp_tag("RoomDesc", ret, this_player());
basic_room.c | 1115 | query_contents( "" );
basic_room.c | 1120 | mxp_secure(this_player()) + ret + mxp_open(this_player());
basic_room.c | 1128 | check_dark( (int)this_object()->query_light() );
basic_room.c | 1130 | short( dark );
basic_room.c | 1181 | query_co_ord();
basic_room.c | 1199 | copy( other_co_ord );
basic_room.c | 1211 | member_array(delta, std_orders);
basic_room.c | 1217 | member_array( dest_other[ i ], std_orders );
basic_room.c | 1223 | copy( other_co_ord );
basic_room.c | 1224 | query_room_size_array() + (int *)other->query_room_size_array();
basic_room.c | 1265 | member_array( exit, tmp_al );
basic_room.c | 1275 | delete( tmp_al, j, 2 );
basic_room.c | 1276 | member_array( exit, tmp_al );
basic_room.c | 1295 | if(((!last_visited && uptime() >
basic_room.c | 1298 | this_player()->adjust_xp(random(random(50)), 0);
basic_room.c | 1300 | this_player()->adjust_xp(random(random(500)), 0);
basic_room.c | 1302 | time();
basic_room.c | 1306 | if(is_day != -1 && ((WEATHER_HANDLER->query_day() >
basic_room.c | 1311 | set_long(variablelongs[is_day]);
basic_room.c | 1315 | sizeof(variableitems[1-is_day]);
basic_room.c | 1316 | remove_item(variableitems[1-is_day][i]);
basic_room.c | 1318 | sizeof(variableitems[is_day]);
basic_room.c | 1319 | add_item(variableitems[is_day][i], variableitems[is_day][i+1]);
basic_room.c | 1323 | setup_room_chat();
basic_room.c | 1327 | check_chat();
basic_room.c | 1331 | check_situations();
basic_room.c | 1335 | calc_exits();
basic_room.c | 1339 | this_object()->calc_co_ord();
basic_room.c | 1344 | init();
basic_room.c | 1353 | find_inv_match("all", this_player())->init();
basic_room.c | 1361 | init();
basic_room.c | 1374 | query_property( "room zone" );
basic_room.c | 1376 | return ({ "nowhere" });
basic_room.c | 1392 | query_property( "room zone" );
basic_room.c | 1398 | add_property( "room zone", zones );
basic_room.c | 1412 | query_property( "room zone" );
basic_room.c | 1418 | add_property( "room zone", zones );
basic_room.c | 1429 | add_zone(zone);
basic_room.c | 1438 | return ( member_array( direc, dest_other ) != -1 );
basic_room.c | 1472 | add_alias("eel", "live eel");
basic_room.c | 1472 | add_alias("bing", "enter");
basic_room.c | 1476 | add_exit("north", PATH + "market2", "road");
basic_room.c | 1477 | add_alias("eel", "live eel");
basic_room.c | 1478 | add_exit("enter live eel", PATH + "live_eel", "secret");
basic_room.c | 1482 | clone_object(PATH + "fluffy_room");
basic_room.c | 1483 | add_exit("north", fluffy_room, "road");
basic_room.c | 1492 | if ( !dest_other ) dest_other = ({ });
basic_room.c | 1495 | file_name( dest );
basic_room.c | 1498 | query_exit_type( type, direc );
basic_room.c | 1503 | clone_object( DOOR_OBJECT );
basic_room.c | 1514 | call_out( "calc_exits", 1 );
basic_room.c | 1529 | sizeof(direc);
basic_room.c | 1530 | modify_exit(direc[k], data);
basic_room.c | 1537 | sizeof( data );
basic_room.c | 1555 | add_property( "no exit cache", 1 );
basic_room.c | 1585 | map_delete(door_control, door_control[ direc ]->query_dest() + " " + door_control[ direc ]->query_door_name());
basic_room.c | 1586 | set_dest( data[ j + 1 ] );
basic_room.c | 1595 | map_delete(door_control, door_control[ direc ]->query_dest() + " " + door_control[ direc ]->query_door_name());
basic_room.c | 1596 | set_door_name( data[ j + 1 ] );
basic_room.c | 1605 | set_lock_owner( data[ j + 1 ] );
basic_room.c | 1623 | set_closed();
basic_room.c | 1625 | set_open();
basic_room.c | 1632 | set_open();
basic_room.c | 1634 | set_closed();
basic_room.c | 1641 | reset_transparent();
basic_room.c | 1646 | set_stuck( data[ j + 1 ] );
basic_room.c | 1652 | set_closed();
basic_room.c | 1653 | set_locked();
basic_room.c | 1655 | set_unlocked();
basic_room.c | 1661 | set_locked();
basic_room.c | 1666 | set_autolock( data[ j + 1 ] );
basic_room.c | 1671 | set_key( data[ j + 1 ] );
basic_room.c | 1676 | set_other_id( data[ j + 1 ] );
basic_room.c | 1681 | set_difficulty( data[ j + 1 ] );
basic_room.c | 1686 | set_long( data[ j + 1 ] );
basic_room.c | 1691 | set_open_trap(data[j+1][0], data[j+1][1]);
basic_room.c | 1696 | set_lock_trap(data[j+1][0], data[j+1][1]);
basic_room.c | 1701 | set_short( data[ j + 1 ] );
basic_room.c | 1706 | set_how_many( data[ j + 1 ] );
basic_room.c | 1711 | set_one_way( data[ j + 1 ] );
basic_room.c | 1716 | remove_hide_invis( "secret" );
basic_room.c | 1726 | query_door_name() );
basic_room.c | 1727 | go_away();
basic_room.c | 1729 | map_delete( door_control, direc );
basic_room.c | 1730 | map_delete( door_control, dest_other[ i + 1 ][ ROOM_DEST ] );
basic_room.c | 1758 | member_array( direc, dest_other );
basic_room.c | 1762 | dest_me();
basic_room.c | 1764 | m_delete( door_control, direc );
basic_room.c | 1765 | m_delete( door_control, dest_other[ i + 1 ][ ROOM_DEST ] );
basic_room.c | 1767 | delete( dest_other, i, 2 );
basic_room.c | 1769 | call_out( "calc_exits", 1 );
basic_room.c | 1785 | return (int)door_control[ direc ]->query_open();
basic_room.c | 1796 | member_array( direc, dest_other );
basic_room.c | 1806 | member_array( direc, dest_other );
basic_room.c | 1811 | return (string)evaluate(dest_other[ i + 1 ][ ROOM_LOOK ]);
basic_room.c | 1832 | return (int)call_other( this_object(), dest_other[ i + 1 ][ ROOM_SIZE ] );
basic_room.c | 1841 | add_enchant( amount / 5 );
basic_room.c | 1849 | find_player(thief->query_caster());
basic_room.c | 1851 | query_owner();
basic_room.c | 1856 | query_short(), file_name() );
basic_room.c | 1916 | add_item("rotating hologram", (: query_current_hologram_string() :));
basic_room.c | 1936 | clone_object( ITEM_OBJECT );
basic_room.c | 1938 | setup_item( shorts, desc, no_plural );
basic_room.c | 1949 | add_item("frog", "Cute, green and sitting on a lilly pad.  Yes!\n");
basic_room.c | 1951 | remove_item("frog");
basic_room.c | 1956 | remove_item("big bad chicken");
basic_room.c | 1964 | return (int)item->remove_item( word );
basic_room.c | 1982 | return (int)item->modify_item( word, new_desc );
basic_room.c | 2007 | clone_object( LINKER_OBJECT );
basic_room.c | 2008 | setup_shadow( this_object(), rooms, d_prep, s_prep, r_name );
basic_room.c | 2016 | clone_object( TERRAIN_OBJECT );
basic_room.c | 2017 | setup_shadow( this_object(), terrain_name );
basic_room.c | 2018 | set_not_replaceable(1);
basic_room.c | 2024 | clone_object( WALL_OBJECT );
basic_room.c | 2025 | setup_shadow( this_object() );
basic_room.c | 2027 | set_wall( args );
basic_room.c | 2038 | add_property(DEFAULT_POSITION_PROPERTY, stuff);
basic_room.c | 2047 | query_property(DEFAULT_POSITION_PROPERTY);
basic_room.c | 2076 | move_with_look( ROOM_VOID, "$N fall$s into the void." );
basic_room.c | 2079 | dest_me();
basic_room.c | 2084 | dest_me();
basic_room.c | 2086 | dest_me();
basic_room.c | 2088 | destruct_shadow( linker );
basic_room.c | 2090 | destruct_shadow( terrain );
basic_room.c | 2092 | destruct_shadow(wall);
basic_room.c | 2094 | dest_me();
basic_room.c | 2099 | catch(thing->dest_me());
basic_room.c | 2105 | catch( thing->dest_me() );
basic_room.c | 2107 | destruct( this_object() );
basic_room.c | 2117 | add_property(ROOM_KEEP_PROP, flag);
basic_room.c | 2126 | query_property(ROOM_KEEP_PROP);
basic_room.c | 2138 | call_out("real_clean", 30 + random(120));
basic_room.c | 2159 | move("/room/rubbish", "$N wander$s in.", "$N wander$s out.");
basic_room.c | 2170 | dest_me();
basic_room.c | 2176 | short(0) && (!looker || item->query_visible(looker));
basic_room.c | 2189 | all_inventory( this_object() );
basic_room.c | 2199 | filter(things, "filter_inventory", this_object(), looker);
basic_room.c | 2223 | clone_object( "/std/object" );
basic_room.c | 2228 | explode(sign_name[0], " ");
basic_room.c | 2229 | set_name( bits[<1] );
basic_room.c | 2230 | add_adjective( bits[0..<2]);
basic_room.c | 2234 | pluralize(explode($1, " ")[<1]) :)), (: $1 | ({ $2 }) :), ({ })));
basic_room.c | 2236 | explode($1, " ")[0..<2] :)), (: $1 | ({ $2 }) :), ({ })));
basic_room.c | 2238 | explode(sign_name, " ");
basic_room.c | 2239 | set_name( bits[<1] );
basic_room.c | 2240 | add_adjective( bits[0..<2]);
basic_room.c | 2242 | set_long( sign_long );
basic_room.c | 2244 | set_read_mess( sign_read_mess, sign_language );
basic_room.c | 2245 | reset_get();
basic_room.c | 2247 | set_short( sign_short );
basic_room.c | 2248 | set_main_plural( pluralize( sign_short ) );
basic_room.c | 2249 | move( this_object() );
basic_room.c | 2250 | add_property("there", "here");
basic_room.c | 2253 | query_adjectives();
basic_room.c | 2254 | if (sizeof(bits) >
basic_room.c | 2255 | set_short(implode(bits, " ") + " " + sign->query_name());
basic_room.c | 2257 | set_short(sign->query_name());
basic_room.c | 2265 | tell_door( message, thing );
basic_room.c | 2290 | file_name( dest );
basic_room.c | 2315 | clone_object( DOOR_OBJECT );
basic_room.c | 2316 | member_array( direc, dest_other );
basic_room.c | 2317 | setup_door( direc, this_object(), dest, dest_other[ i + 1 ] );
basic_room.c | 2331 | dest_me();
basic_room.c | 2341 | if (chatter) chatter->set_chat_min_max(min,max);
basic_room.c | 2354 | add_room_chats( new_chats );
basic_room.c | 2369 | remove_room_chats( dead_chats );
basic_room.c | 2388 | query_room_chats();
basic_room.c | 2400 | clone_object( CHATTER_OBJECT );
basic_room.c | 2403 | file_name(this_object()), chatter);
basic_room.c | 2406 | query_day() > 0);
basic_room.c | 2410 | allocate(3);
basic_room.c | 2424 | setup_chatter( this_object(), chats );
basic_room.c | 2470 | write( "Error: second argument of room_chat args is not an array.\n" );
basic_room.c | 2477 | allocate(3);
basic_room.c | 2480 | setup_room_chat();
basic_room.c | 2501 | set_situation_changer(load_object("/w/me/mychanger"));
basic_room.c | 2507 | clone_object( changer );
basic_room.c | 2511 | clone_object( SITUATION_CHANGER_OBJECT );
basic_room.c | 2513 | return (sitchanger = sitchanger->set_room( this_object() ));
basic_room.c | 2597 | add_situation( "frogs", frogs );
basic_room.c | 2625 | add_situation( "pause", new(class situation) );
basic_room.c | 2629 | clone_object( SITUATION_CHANGER_OBJECT );
basic_room.c | 2630 | set_room( this_object() );
basic_room.c | 2632 | add_situation( label, sit );
basic_room.c | 2647 | if (sitchanger) sitchanger->set_seed(xval,yval);
basic_room.c | 2666 | start_situation( label, do_start_mess );
basic_room.c | 2680 | if (sitchanger) sitchanger->end_situation( label );
basic_room.c | 2713 | change_situation( ({ "sew1","sew2" }), ({ 60,60 }) );
basic_room.c | 2715 | if (over) shutdown_situation( handle, ({ "sew1","sew2" }) );
basic_room.c | 2717 | change_situation( ({ "background,sew1","background,sew2" }), 120 );
basic_room.c | 2719 | change_situation( ({ "building_falling","rubble" }), ({ 120, -1 }) );
basic_room.c | 2739 | change_situation( "boat1", 120, ({ "#1","Floating Egg" }) );
basic_room.c | 2743 | change_situation(label,duration,words,0);
basic_room.c | 2800 | automate_situation( "frog", 300, WHEN_ANY_TIME, 200 );
basic_room.c | 2827 | automate_situation(label,duration,when,chance,category);
basic_room.c | 2844 | if (sitchanger) sitchanger->shutdown_all_situations();
basic_room.c | 2860 | if (sitchanger) sitchanger->shutdown_situation(call,label);
basic_room.c | 2869 | query_property(ROOM_NOT_REPLACE_PROGRAM_PROP);
basic_room.c | 2882 | add_property(ROOM_NOT_REPLACE_PROGRAM_PROP, replace);
basic_room.c | 2918 | allocate(2);
basic_room.c | 2924 | query_day() > 0);
basic_room.c | 2928 | set_long(str);
basic_room.c | 2943 | this_object()->query_long();
basic_room.c | 2955 | allocate(2);
basic_room.c | 2960 | query_day() > 0);
basic_room.c | 2962 | set_long(str);
basic_room.c | 2976 | this_object()->query_long();
basic_room.c | 2986 | member_array("long", desc);
basic_room.c | 3011 | return_long(desc) });
basic_room.c | 3014 | query_day() > 0);
basic_room.c | 3016 | add_item(shorts, desc, no_plural);
basic_room.c | 3039 | return_long( desc ) });
basic_room.c | 3042 | query_day() > 0);
basic_room.c | 3045 | add_item(shorts, desc, no_plural);
basic_room.c | 3059 | allocate(3);
basic_room.c | 3065 | query_day() > 0);
basic_room.c | 3068 | setup_room_chat();
basic_room.c | 3080 | allocate(3);
basic_room.c | 3086 | query_day() > 0);
basic_room.c | 3089 | setup_room_chat();
basic_room.c | 3106 | return ({ });
basic_room.c | 3117 | return ({ });
basic_room.c | 3129 | return ({ });
basic_room.c | 3139 | return ({ });
basic_room.c | 3149 | return ({ });
stable.c | 10 | load_me();
stable.c | 26 | do_list();
stable.c | 27 | do_stable( object *obs );
stable.c | 28 | do_deposit( string mon );
stable.c | 29 | do_return( string num );
stable.c | 37 | add_help_file( "stable" );
stable.c | 38 | create();
stable.c | 42 | add_command( "list", "", (: do_list() :) );
stable.c | 43 | add_command( "stable", "<indirect:object:here>", (: do_stable($1) :) );
stable.c | 44 | add_command( "deposit", "<string'money'>", (: do_deposit($4[0]) :) );
stable.c | 45 | add_command( "return", "<string'horse num'>", (: do_return($4[0]) :) );
stable.c | 58 | load_me();
stable.c | 106 | unguarded( (: save_object(_directory + "main_account") :) );
stable.c | 113 | unguarded( (: restore_object(_directory + "main_account", 1) :) );
stable.c | 132 | save_me();
stable.c | 142 | save_me();
stable.c | 154 | query_balance( player->query_name() );
stable.c | 167 | query_balance( player->query_name() );
stable.c | 189 | set_balance( player->query_name(), balance );
stable.c | 231 | if ( !_stable_cache[name] && file_size( _directory + name + ".o" ) >
stable.c | 233 | read_file( _directory + name + ".o" );
stable.c | 235 | restore_variable( str );
stable.c | 250 | unguarded( (: rm(_directory + $(name) + ".o") :) );
stable.c | 253 | save_variable( $(value) ), 1 ) :) );
stable.c | 266 | query_stable( name );
stable.c | 286 | query_stable( name );
stable.c | 292 | new( class stable );
stable.c | 293 | time();
stable.c | 294 | time();
stable.c | 295 | query_short();
stable.c | 296 | create_auto_load( ({ horse }) );
stable.c | 299 | set_stable( name, bing );
stable.c | 300 | move("/room/rubbish");
stable.c | 312 | the_short() + ".\n" );
stable.c | 314 | query_multiple_short( horses ) + " into " + the_short() + ".\n" );
stable.c | 328 | query_property( "place" );
stable.c | 332 | query_stable( this_player()->query_name() );
stable.c | 337 | add_failed_mess( "$I is not able to be stabled here.\n", ({ horse }) );
stable.c | 360 | input_to( "check_stable", 0, cost, ok, place );
stable.c | 361 | add_succeeded_mess( "" );
stable.c | 364 | sizeof( ok );
stable.c | 377 | write("Oops!  You seem to have run out of money.\n" );
stable.c | 379 | remove_player_money( this_player(), cost, place );
stable.c | 380 | add_to_stable( this_player()->query_name(), ok );
stable.c | 381 | print_ok_message( this_player(), ok );
stable.c | 384 | write( "Ok, abandoning the check in.\n" );
stable.c | 400 | query_property( "place" );
stable.c | 404 | query_stable( this_player()->query_name() );
stable.c | 405 | query_balance( this_player()->query_name() );
stable.c | 408 | add_failed_mess( "You do not have any horses stabled here.\n" );
stable.c | 417 | sizeof( bing );
stable.c | 418 | query_stabling_cost( this_player()->query_name(), i );
stable.c | 422 | money_value_string( -cost, place );
stable.c | 424 | money_value_string( cost, place );
stable.c | 431 | money_value_string( balance, place ) + ".\n" );
stable.c | 434 | money_value_string( balance, place ) + " in debt.\n" );
stable.c | 436 | write( "You do not have a balance at this time.\n" );
stable.c | 439 | add_succeeded_mess( ({ "", "$N checks out $p horses.\n" }) );
stable.c | 454 | query_property( "place" );
stable.c | 458 | query_stable( this_player()->query_name() );
stable.c | 460 | add_failed_mess( "You do not have any horses stabled here.\n" );
stable.c | 464 | lower_case( num );
stable.c | 468 | sprintf( "%c", 'A' + sizeof( bing ) - 1 ) + "'.\n" );
stable.c | 472 | query_stabling_cost( this_player()->query_name(), pos );
stable.c | 481 | load_auto_load_to_array( bing[pos]->save_info );
stable.c | 482 | move( this_object() );
stable.c | 483 | set_owner( this_player()->query_name() );
stable.c | 485 | set_stable( this_player()->query_name(), bing );
stable.c | 487 | remove_player_money( this_player(), cost, place );
stable.c | 489 | add_succeeded_mess( "$N $V $I from " + the_short() + ".\n", horses );
stable.c | 503 | query_property( "place" );
stable.c | 508 | add_failed_mess( "You do not currently have a balance here.\n" );
stable.c | 512 | parse_money( mon, this_player(), place );
stable.c | 516 | add_failed_mess( "You do not have '" + mon + "'.\n" );
stable.c | 519 | add_failed_mess( "You can only deposit money.\n" );
stable.c | 522 | add_failed_mess( "You can only deposit legal tender.\n" );
stable.c | 527 | query_value_in( place );
stable.c | 529 | query_value_in( "default" );
stable.c | 532 | adjust_balance( this_player()->query_name(), amt );
bath_house_outside.c | 12 | create();
bath_house_outside.c | 13 | create();
bath_house_outside.c | 18 | init();
bath_house_outside.c | 19 | init();
basic_room_new.c | 64 | add_item( mixed shorts, mixed desc, int no_plural );
basic_room_new.c | 65 | remove_item( string word );
basic_room_new.c | 66 | room_chat( mixed *args, object chatobj );
basic_room_new.c | 67 | set_not_replaceable(int replace);
basic_room_new.c | 68 | query_not_replaceable();
basic_room_new.c | 69 | set_night_long( string str );
basic_room_new.c | 76 | create();
basic_room_new.c | 77 | create();
basic_room_new.c | 78 | create();
basic_room_new.c | 79 | create();
basic_room_new.c | 80 | create();
basic_room_new.c | 81 | set_can_export_inventory();
basic_room_new.c | 82 | set_ignore_livings_in_inventory( 0 );
basic_room_new.c | 90 | this_object() ) ) );
basic_room_new.c | 91 | add_property( "location", "inside" );
basic_room_new.c | 92 | add_property( "here", "on the floor" );
basic_room_new.c | 94 | this_object()->setup();
basic_room_new.c | 95 | this_object()->reset();
basic_room_new.c | 98 | catch( "/obj/handlers/map"->check_map( file_name( this_object() ) ) );
basic_room_new.c | 101 | all_inventory(virt_room);
basic_room_new.c | 102 | catch(npcs->real_room(file_name()));
basic_room_new.c | 106 | inherit_list(this_object());
basic_room_new.c | 112 | replace_program(fname);
basic_room_new.c | 170 | time();
basic_room_new.c | 177 | time();
basic_room_new.c | 194 | time();
basic_room_new.c | 214 | time();
basic_room_new.c | 235 | time();
basic_room_new.c | 247 | copy(co_ord);
basic_room_new.c | 261 | write( "Warning: Co-ordinate must be an array.\n" );
basic_room_new.c | 265 | write( "Warning: The co-ordinate must have three elements.\n" );
basic_room_new.c | 306 | sizeof( dest_other );
basic_room_new.c | 315 | call_other( this_object(), tmp, dest_other[ i ] );
basic_room_new.c | 318 | call_other( tmp[ 0 ], tmp[ 1 ], dest_other[ i ] );
basic_room_new.c | 362 | query_aliases() { return copy( aliases );
basic_room_new.c | 377 | add_exit( "north", PATH +"dining_hall", "corridor" );
basic_room_new.c | 378 | add_alias( ({ "enter", "enter hall", "enter dining hall" }), "north" );
basic_room_new.c | 380 | add_exit( "board carriage", PATH +"carriage", "door" );
basic_room_new.c | 381 | add_alias( "board", "board carriage" );
basic_room_new.c | 391 | add_alias( name, word );
basic_room_new.c | 397 | call_out( "calc_exits", 1 );
basic_room_new.c | 414 | remove_exit( "board carriage" );
basic_room_new.c | 415 | remove_alias( "board", "board carriage" );
basic_room_new.c | 426 | remove_alias( name, word );
basic_room_new.c | 432 | delete( aliases, i, 2 );
basic_room_new.c | 444 | query_exits() { return copy(exits);
basic_room_new.c | 452 | reset_exits() { exits = ({ });
basic_room_new.c | 512 | query_hidden_objects() { return hidden_objects + ({ });
basic_room_new.c | 535 | clone_object(PATH + SIGN);
basic_room_new.c | 536 | add_hidden_object(sign);
basic_room_new.c | 540 | add_hidden_object(fluffy_container);
basic_room_new.c | 541 | filter(all_inventory(), (: living($1) :));
basic_room_new.c | 542 | move(ROOM_VOID);
basic_room_new.c | 545 | move(this_object());
basic_room_new.c | 569 | member_array( thing, hidden_objects );
basic_room_new.c | 611 | copy( door_control );
basic_room_new.c | 627 | copy( dest_other );
basic_room_new.c | 629 | member_array( direc, dest_other );
basic_room_new.c | 633 | copy( dest_other[ i + 1 ] );
basic_room_new.c | 700 | find_rel( dest_other[ i ] ) });
basic_room_new.c | 715 | query_destination("south");
basic_room_new.c | 717 | do_error();
basic_room_new.c | 719 | do_move("south");
basic_room_new.c | 725 | member_array( exit, dest_other );
basic_room_new.c | 780 | add_property( "dark mess", word );
basic_room_new.c | 806 | set_bright_mess( string word ) { add_property( "bright mess", word );
basic_room_new.c | 824 | query_property( "room size" );
basic_room_new.c | 844 | query_room_size();
basic_room_new.c | 848 | return ({ room_size, room_size, room_size });
basic_room_new.c | 865 | add_property( "room size", number );
basic_room_new.c | 870 | add_property( "room size", number );
basic_room_new.c | 874 | write( "Room size must be an integer or an array of three integers.\n" );
basic_room_new.c | 886 | member_array( word, aliases );
basic_room_new.c | 907 | sizeof( dest_other );
basic_room_new.c | 916 | call_other( this_object(), tmp, dest_other[ i ] );
basic_room_new.c | 919 | call_other( tmp[ 0 ], tmp[ 1 ], dest_other[ i ] );
basic_room_new.c | 958 | calc_short_exit_string();
basic_room_new.c | 972 | this_object()->query_property( "octarine_mess" );
basic_room_new.c | 1005 | calc_long_exit();
basic_room_new.c | 1028 | query_long();
basic_room_new.c | 1035 | calc_extra_look();
basic_room_new.c | 1040 | enchant_string();
basic_room_new.c | 1046 | query_contents( "" );
basic_room_new.c | 1059 | check_dark( (int)this_object()->query_light() );
basic_room_new.c | 1061 | short( dark );
basic_room_new.c | 1082 | query_co_ord();
basic_room_new.c | 1090 | copy( other_co_ord );
basic_room_new.c | 1102 | member_array(delta, STD_ORDERS);
basic_room_new.c | 1108 | member_array( dest_other[ i ], STD_ORDERS );
basic_room_new.c | 1114 | copy( other_co_ord );
basic_room_new.c | 1115 | query_room_size_array() + (int *)other->query_room_size_array();
basic_room_new.c | 1156 | member_array( exit, tmp_al );
basic_room_new.c | 1166 | delete( tmp_al, j, 2 );
basic_room_new.c | 1167 | member_array( exit, tmp_al );
basic_room_new.c | 1181 | uptime() >
basic_room_new.c | 1182 | random(time() - last_visited) >
basic_room_new.c | 1183 | this_player()->adjust_xp(random(random(500)), 0);
basic_room_new.c | 1189 | if(is_day != -1 && ((WEATHER_HANDLER->query_day() >
basic_room_new.c | 1194 | set_long(variablelongs[is_day]);
basic_room_new.c | 1198 | sizeof(variableitems[1-is_day]);
basic_room_new.c | 1199 | remove_item(variableitems[1-is_day][i]);
basic_room_new.c | 1201 | sizeof(variableitems[is_day]);
basic_room_new.c | 1202 | add_item(variableitems[is_day][i], variableitems[is_day][i+1]);
basic_room_new.c | 1207 | room_chat(variablechats[is_day]);
basic_room_new.c | 1211 | check_chat();
basic_room_new.c | 1214 | check_situations();
basic_room_new.c | 1217 | calc_exits();
basic_room_new.c | 1220 | this_object()->calc_co_ord();
basic_room_new.c | 1224 | init();
basic_room_new.c | 1233 | find_inv_match("all", this_player())->init();
basic_room_new.c | 1241 | init();
basic_room_new.c | 1253 | query_property( "room zone" );
basic_room_new.c | 1255 | return ({ "nowhere" });
basic_room_new.c | 1271 | query_property( "room zone" );
basic_room_new.c | 1277 | add_property( "room zone", zones );
basic_room_new.c | 1287 | add_zone(zone);
basic_room_new.c | 1296 | return ( member_array( direc, dest_other ) != -1 );
basic_room_new.c | 1330 | add_alias("eel", "live eel");
basic_room_new.c | 1330 | add_alias("bing", "enter");
basic_room_new.c | 1334 | add_exit("north", PATH + "market2", "road");
basic_room_new.c | 1335 | add_alias("eel", "live eel");
basic_room_new.c | 1336 | add_exit("enter live eel", PATH + "live_eel", "secret");
basic_room_new.c | 1340 | clone_object(PATH + "fluffy_room");
basic_room_new.c | 1341 | add_exit("north", fluffy_room, "road");
basic_room_new.c | 1350 | if ( !dest_other ) dest_other = ({ });
basic_room_new.c | 1353 | file_name( dest );
basic_room_new.c | 1356 | query_exit_type( type, direc );
basic_room_new.c | 1360 | clone_object( DOOR_OBJECT );
basic_room_new.c | 1367 | call_out( "calc_exits", 1 );
basic_room_new.c | 1381 | sizeof(direc);
basic_room_new.c | 1382 | modify_exit(direc[k], data);
basic_room_new.c | 1389 | sizeof( data );
basic_room_new.c | 1407 | add_property( "no exit cache", 1 );
basic_room_new.c | 1437 | set_dest( data[ j + 1 ] );
basic_room_new.c | 1459 | set_open();
basic_room_new.c | 1465 | set_closed();
basic_room_new.c | 1471 | reset_transparent();
basic_room_new.c | 1476 | set_stuck( data[ j + 1 ] );
basic_room_new.c | 1482 | set_closed();
basic_room_new.c | 1483 | set_locked();
basic_room_new.c | 1485 | set_unlocked();
basic_room_new.c | 1491 | set_locked();
basic_room_new.c | 1496 | set_autolock( data[ j + 1 ] );
basic_room_new.c | 1501 | set_key( data[ j + 1 ] );
basic_room_new.c | 1506 | set_other_id( data[ j + 1 ] );
basic_room_new.c | 1511 | set_difficulty( data[ j + 1 ] );
basic_room_new.c | 1516 | set_long( data[ j + 1 ] );
basic_room_new.c | 1521 | set_open_trap(data[j+1][0], data[j+1][1]);
basic_room_new.c | 1526 | set_lock_trap(data[j+1][0], data[j+1][1]);
basic_room_new.c | 1531 | set_short( data[ j + 1 ] );
basic_room_new.c | 1536 | set_how_many( data[ j + 1 ] );
basic_room_new.c | 1541 | set_one_way( data[ j + 1 ] );
basic_room_new.c | 1546 | remove_hide_invis( "secret" );
basic_room_new.c | 1555 | go_away();
basic_room_new.c | 1557 | m_delete( door_control, direc );
basic_room_new.c | 1580 | member_array( direc, dest_other );
basic_room_new.c | 1584 | dest_me();
basic_room_new.c | 1586 | m_delete( door_control, direc );
basic_room_new.c | 1587 | m_delete( door_control, dest_other[ i + 1 ][ ROOM_DEST ] );
basic_room_new.c | 1589 | delete( dest_other, i, 2 );
basic_room_new.c | 1591 | call_out( "calc_exits", 1 );
basic_room_new.c | 1607 | return (int)door_control[ direc ]->query_open();
basic_room_new.c | 1618 | member_array( direc, dest_other );
basic_room_new.c | 1628 | member_array( direc, dest_other );
basic_room_new.c | 1633 | return (string)evaluate(dest_other[ i + 1 ][ ROOM_LOOK ]);
basic_room_new.c | 1654 | return (int)call_other( this_object(), dest_other[ i + 1 ][ ROOM_SIZE ] );
basic_room_new.c | 1663 | add_enchant( amount / 5 );
basic_room_new.c | 1672 | query_short(), file_name() );
basic_room_new.c | 1686 | time();
basic_room_new.c | 1738 | add_item("rotating hologram", (: query_current_hologram_string() :));
basic_room_new.c | 1758 | clone_object( ITEM_OBJECT );
basic_room_new.c | 1760 | setup_item( shorts, desc, no_plural );
basic_room_new.c | 1771 | add_item("frog", "Cute, green and sitting on a lilly pad.  Yes!\n");
basic_room_new.c | 1773 | remove_item("frog");
basic_room_new.c | 1778 | remove_item("big bad chicken");
basic_room_new.c | 1786 | return (int)item->remove_item( word );
basic_room_new.c | 1804 | return (int)item->modify_item( word, new_desc );
basic_room_new.c | 1809 | clone_object( "/std/shadows/misc/effects" );
basic_room_new.c | 1810 | setup_shadow( this_object() );
basic_room_new.c | 1811 | add_effect( eff, arg );
basic_room_new.c | 1836 | clone_object( LINKER_OBJECT );
basic_room_new.c | 1837 | setup_shadow( this_object(), rooms, d_prep, s_prep, r_name );
basic_room_new.c | 1845 | clone_object( TERRAIN_OBJECT );
basic_room_new.c | 1846 | setup_shadow( this_object(), terrain_name );
basic_room_new.c | 1847 | set_not_replaceable(1);
basic_room_new.c | 1853 | clone_object( WALL_OBJECT );
basic_room_new.c | 1854 | setup_shadow( this_object() );
basic_room_new.c | 1856 | set_wall( args );
basic_room_new.c | 1867 | add_property(DEFAULT_POSITION_PROPERTY, stuff);
basic_room_new.c | 1876 | query_property(DEFAULT_POSITION_PROPERTY);
basic_room_new.c | 1911 | all_inventory( this_object() );
basic_room_new.c | 1914 | move_with_look( ROOM_VOID, "$N fall$s into the void." );
basic_room_new.c | 1920 | move("/room/rubbish");
basic_room_new.c | 1924 | dest_me();
basic_room_new.c | 1926 | dest_me();
basic_room_new.c | 1928 | destruct_shadow( effects );
basic_room_new.c | 1930 | destruct_shadow( linker );
basic_room_new.c | 1932 | destruct_shadow( terrain );
basic_room_new.c | 1934 | destruct_shadow(wall);
basic_room_new.c | 1936 | dest_me();
basic_room_new.c | 1941 | catch(thing->dest_me());
basic_room_new.c | 1947 | catch( thing->dest_me() );
basic_room_new.c | 1949 | destruct( this_object() );
basic_room_new.c | 1959 | add_property(ROOM_KEEP_PROP, flag);
basic_room_new.c | 1968 | query_property(ROOM_KEEP_PROP);
basic_room_new.c | 1979 | call_out("real_clean", 30 + random(120));
basic_room_new.c | 2002 | dest_me();
basic_room_new.c | 2016 | all_inventory( this_object() );
basic_room_new.c | 2027 | query_visible($2)) :), looker);
basic_room_new.c | 2051 | clone_object( "/std/object" );
basic_room_new.c | 2056 | explode(sign_name[0], " ");
basic_room_new.c | 2057 | set_name( bits[<1] );
basic_room_new.c | 2058 | add_adjective( bits[0..<2]);
basic_room_new.c | 2059 | add_alias(sign_name[1..]);
basic_room_new.c | 2061 | explode(sign_name, " ");
basic_room_new.c | 2062 | set_name( bits[<1] );
basic_room_new.c | 2063 | add_adjective( bits[0..<2]);
basic_room_new.c | 2065 | set_long( sign_long );
basic_room_new.c | 2067 | set_read_mess( sign_read_mess, sign_language );
basic_room_new.c | 2068 | reset_get();
basic_room_new.c | 2070 | set_short( sign_short );
basic_room_new.c | 2071 | set_main_plural( pluralize( sign_short ) );
basic_room_new.c | 2072 | move( this_object() );
basic_room_new.c | 2073 | add_property("there", "here");
basic_room_new.c | 2081 | tell_door( message, thing );
basic_room_new.c | 2104 | file_name( dest );
basic_room_new.c | 2121 | clone_object( DOOR_OBJECT );
basic_room_new.c | 2122 | member_array( direc, dest_other );
basic_room_new.c | 2123 | setup_door( direc, this_object(), dest, dest_other[ i + 1 ] );
basic_room_new.c | 2137 | dest_me();
basic_room_new.c | 2147 | if (chatter) chatter->set_chat_min_max(min,max);
basic_room_new.c | 2159 | if (chatter) chatter->add_room_chats( new_chats );
basic_room_new.c | 2172 | if (chatter) chatter->remove_room_chats( dead_chats );
basic_room_new.c | 2189 | if (chatter) return chatter->query_room_chats();
basic_room_new.c | 2226 | write( "Error: second argument of room_chat args is not an array.\n" );
basic_room_new.c | 2230 | setup_chatter( this_object(), args );
basic_room_new.c | 2234 | clone_object( CHATTER_OBJECT );
basic_room_new.c | 2235 | setup_chatter( this_object(), args );
basic_room_new.c | 2256 | set_situation_changer(load_object("/w/me/mychanger"));
basic_room_new.c | 2262 | clone_object( changer );
basic_room_new.c | 2266 | clone_object( SITUATION_CHANGER_OBJECT );
basic_room_new.c | 2268 | return (sitchanger = sitchanger->set_room( this_object() ));
basic_room_new.c | 2352 | add_situation( "frogs", frogs );
basic_room_new.c | 2380 | add_situation( "pause", new(class situation) );
basic_room_new.c | 2384 | clone_object( SITUATION_CHANGER_OBJECT );
basic_room_new.c | 2385 | set_room( this_object() );
basic_room_new.c | 2387 | add_situation( label, sit );
basic_room_new.c | 2402 | if (sitchanger) sitchanger->set_seed(xval,yval);
basic_room_new.c | 2421 | start_situation( label, do_start_mess );
basic_room_new.c | 2435 | if (sitchanger) sitchanger->end_situation( label );
basic_room_new.c | 2468 | change_situation( ({ "sew1","sew2" }), ({ 60,60 }) );
basic_room_new.c | 2470 | if (over) shutdown_situation( handle, ({ "sew1","sew2" }) );
basic_room_new.c | 2472 | change_situation( ({ "background,sew1","background,sew2" }), 120 );
basic_room_new.c | 2474 | change_situation( ({ "building_falling","rubble" }), ({ 120, -1 }) );
basic_room_new.c | 2494 | change_situation( "boat1", 120, ({ "#1","Floating Egg" }) );
basic_room_new.c | 2498 | change_situation(label,duration,words,0);
basic_room_new.c | 2555 | automate_situation( "frog", 300, WHEN_ANY_TIME, 200 );
basic_room_new.c | 2582 | automate_situation(label,duration,when,chance,category);
basic_room_new.c | 2599 | if (sitchanger) sitchanger->shutdown_all_situations();
basic_room_new.c | 2615 | if (sitchanger) sitchanger->shutdown_situation(call,label);
basic_room_new.c | 2624 | query_property(ROOM_NOT_REPLACE_PROGRAM_PROP);
basic_room_new.c | 2637 | add_property(ROOM_NOT_REPLACE_PROGRAM_PROP, replace);
basic_room_new.c | 2673 | allocate(2);
basic_room_new.c | 2678 | query_day() > 0);
basic_room_new.c | 2681 | set_long(str);
basic_room_new.c | 2693 | allocate(2);
basic_room_new.c | 2698 | query_day() > 0);
basic_room_new.c | 2700 | set_long(str);
basic_room_new.c | 2714 | this_object()->query_long();
basic_room_new.c | 2724 | member_array("long", desc);
basic_room_new.c | 2749 | return_long(desc) });
basic_room_new.c | 2752 | query_day() > 0);
basic_room_new.c | 2754 | add_item(shorts, desc, no_plural);
basic_room_new.c | 2777 | return_long( desc ) });
basic_room_new.c | 2780 | query_day() > 0);
basic_room_new.c | 2782 | add_item(shorts, desc, no_plural);
basic_room_new.c | 2795 | allocate(2);
basic_room_new.c | 2800 | query_day() > 0);
basic_room_new.c | 2802 | room_chat(args);
basic_room_new.c | 2813 | allocate(2);
basic_room_new.c | 2818 | query_day() > 0);
basic_room_new.c | 2820 | room_chat(args);
linker.c | 19 | shadow(thing, 1);
linker.c | 37 | destruct(this_object());
linker.c | 39 | destruct_shadow(thing);
linker.c | 64 | explode((string)room->query_short(), " of ");
linker.c | 65 | if(sizeof(bits) >
linker.c | 73 | capitalize((string)room->the_short());
linker.c | 75 | capitalize(s_prep)+" "+(string)room->the_short();
linker.c | 84 | sizeof( rooms );
linker.c | 87 | compose_start() +", "+ start, rest, language, accent );
linker.c | 88 | event_person_say( person, start, rest, language, accent );
linker.c | 98 | explode( mess, " " );
linker.c | 117 | implode( words, " " );
linker.c | 124 | event_exit(person, message, to);
linker.c | 129 | query_dest_dir();
linker.c | 130 | sizeof(exits);
linker.c | 138 | member_array(direc, room->query_dest_other());
linker.c | 149 | query_static_preposition(),}));
linker.c | 151 | conjugate_verbs(link_mess);
linker.c | 155 | sizeof(rooms);
linker.c | 157 | tell_room(find_object(rooms[i]), link_mess);
linker.c | 162 | sizeof(rooms);
linker.c | 165 | the_short();
linker.c | 185 | sizeof(rooms);
linker.c | 187 | tell_room(find_object(rooms[i]), message);
linker.c | 195 | event_enter(person, message, from);
linker.c | 199 | sizeof(rooms);
linker.c | 207 | query_dest_dir();
linker.c | 208 | sizeof(exits);
linker.c | 215 | member_array(direc, room->query_dest_other());
linker.c | 225 | query_static_preposition(),}));
linker.c | 226 | conjugate_verbs(link_mess);
linker.c | 229 | sizeof(rooms);
linker.c | 230 | tell_room(find_object(rooms[i]), link_mess);
linker.c | 242 | sizeof(rooms);
linker.c | 243 | tell_room(find_object(rooms[i] ), message);
chatter.c | 53 | destruct( this_object() );
chatter.c | 62 | dest_me();
chatter.c | 72 | random( sizeof( _chats[ 2 ] ) );
chatter.c | 74 | sizeof( _chats[ 2 ] );
chatter.c | 80 | call_other( _room, stuff[ 1 .. 99 ] );
chatter.c | 82 | tell_room( _room, _chats[ 2 ][ saying ] +"\n" );
chatter.c | 89 | load_chat()'s?\n" ) :) );
chatter.c | 92 | random( _chats[ 1 ] - _chats[ 0 ] + 1 ) );
chatter.c | 107 | random( _chats[ 1 ] - _chats[ 0 ] + 1 ) ) / 2 );
chatter.c | 142 | destruct(this_object());
chatter.c | 167 | dest_me();
multichatter.c | 51 | if (sizeof(chats)) chats += chat_args + ({0,0});
multichatter.c | 56 | destruct( this_object() );
multichatter.c | 61 | check_interactive( object thing ) { return interactive( thing );
multichatter.c | 74 | time();
multichatter.c | 75 | sizeof(chats);
multichatter.c | 78 | random( sizeof( chats[ set+2 ] ) );
multichatter.c | 80 | sizeof( chats[ set+2 ] );
multichatter.c | 84 | call_other( room, stuff[ 1 .. 99 ] );
multichatter.c | 86 | tell_room( room, chats[ set+2 ][ saying ] +"\n" );
multichatter.c | 97 | add_chatter( this_object(), nextt );
multichatter.c | 114 | time();
multichatter.c | 116 | sizeof(chats);
multichatter.c | 117 | if (t>=chats[set+4]+chats[set]) chats[set+4]=t+random(chats[set+1]);
multichatter.c | 121 | add_chatter( this_object(), nextt );
multichatter.c | 157 | sizeof(chats);
multichatter.c | 186 | if (!room) dest_me();
graffbase.c | 36 | query_drawingwith();
graffbase.c | 37 | do_check();
graffbase.c | 38 | done_check();
graffbase.c | 46 | this_player()->add_command( "scrawl", this_object(), "with charcoal on wall");
graffbase.c | 47 | this_player()->add_command( "scrawl", this_object(), "on wall with charcoal");
graffbase.c | 58 | this_player()->query_current_language();
graffbase.c | 68 | query_property("graffiti");
graffbase.c | 80 | call_out( "begin_writing", 0, this_player() );
graffbase.c | 89 | do_edit( 0, "end_writing" );
graffbase.c | 103 | this_player()->query_current_language();
graffbase.c | 105 | write( "You seem to have changed to using a non-written language.\n" );
graffbase.c | 112 | write( "You seem to have lost what you were scrawling on.\n" );
graffbase.c | 118 | write("The wall seems to have run away from you.\n" );
graffbase.c | 120 | this_player()->query_pronoun() +"'s lost something.\n" );
graffbase.c | 125 | add_read_mess( words, type, language, 0 );
graffbase.c | 131 | if(old) old->move("/room/rubbish");
graffbase.c | 132 | extra_stuff();
graffbase.c | 142 | present("graffiti",ETP);
graffbase.c | 143 | add_property("determinate","some ");
graffbase.c | 144 | add_property("there","on the wall");
graffbase.c | 145 | if(old) old->add_property("graffiti",words);
graffbase.c | 151 | this_object()->done_check();
npcroom.c | 93 | clone_object( func );
npcroom.c | 95 | evaluate( func );
npcroom.c | 104 | make_clone( reset_definitions[ i ][ CLONE ] );
npcroom.c | 113 | find_object( reset_definitions[ i ][ CLONE ] );
npcroom.c | 123 | allocate( sizeof( reset_definitions ) );
npcroom.c | 124 | for ( i = sizeof( reset_definitions );
npcroom.c | 130 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
npcroom.c | 132 | make_object( i );
npcroom.c | 139 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
npcroom.c | 141 | make_object( i );
multiroom_situation_changer.c | 55 | destruct(this_object());
multiroom_situation_changer.c | 132 | if (!currentsits) currentsits=({ num });
multiroom_situation_changer.c | 136 | if (els && sizeof(els)) els+=({ sdata[2] });
multiroom_situation_changer.c | 139 | add_extra_look(this_object());
multiroom_situation_changer.c | 143 | tell_room(room, sdata[0]+"\n");
multiroom_situation_changer.c | 146 | tell_creator("shaggy","Adding: %O\n",chats);
multiroom_situation_changer.c | 148 | room_chat( ({ (roominfo[file_name(room)])[4],(roominfo[file_name(room)])[5], chats }) );
multiroom_situation_changer.c | 149 | query_chatter();
multiroom_situation_changer.c | 150 | check_chat();
multiroom_situation_changer.c | 152 | add_room_chats(chats);
multiroom_situation_changer.c | 156 | foreach(item in items) room->add_item(item[0],item[1]);
multiroom_situation_changer.c | 159 | if (functionp(sdata[5])) (*(sdata[5]))(num,do_start_mess);
multiroom_situation_changer.c | 190 | if (currentsits) currentsits=currentsits-({ num });
multiroom_situation_changer.c | 193 | if (!sizeof(els)) room->remove_extra_look(this_object());
multiroom_situation_changer.c | 198 | tell_creator("shaggy","Removing: %O\n",chats);
multiroom_situation_changer.c | 199 | remove_room_chats(chats);
multiroom_situation_changer.c | 203 | foreach(item in items) room->remove_item(item[0],item[1]);
multiroom_situation_changer.c | 206 | tell_room(room,sdata[1]+"\n");
multiroom_situation_changer.c | 228 | filter_array( all_inventory( room ),(: interactive($1) :)));
multiroom_situation_changer.c | 234 | tell_creator("shaggy","No abort \n");
multiroom_situation_changer.c | 250 | if (functionp(sit[2])) possible=(*(sit[2]))();
multiroom_situation_changer.c | 255 | RANDOM(1000,it*1147483647+cnt*2047483243) < sit[3]);
multiroom_situation_changer.c | 260 | sizeof(sit[0]);
multiroom_situation_changer.c | 263 | if (member_array(num,newsits)==-1) newsits=newsits+({ num });
multiroom_situation_changer.c | 272 | end_situation(num,room);
multiroom_situation_changer.c | 280 | start_situation(num,awake,room);
multiroom_situation_changer.c | 282 | if ((tstep/=SECTOCHECK)>
multiroom_situation_changer.c | 283 | if (!rooms[tstep]) rooms[tstep]=({ room });
multiroom_situation_changer.c | 301 | call_out("manage_rooms_situations",SECTOCHECK);
multiroom_situation_changer.c | 303 | foreach ( room in current_rooms ) manage_situations(room);
multiroom_situation_changer.c | 316 | interactive(this_player())) manage_situations(room);
multiroom_situation_changer.c | 382 | room_chat( chatargs );
multiroom_situation_changer.c | 388 | write("Invalid situation duration: "+sit[1]+"\n");
multiroom_situation_changer.c | 392 | if (!sittiming) sittiming=({ sit });
multiroom_situation_changer.c | 399 | manage_situations(room);
multiroom_situation_changer.c | 416 | foreach(num in currentsits) end_situation(num, room);
multiroom_situation_changer.c | 432 | allocate( MAXROOMS );
multiroom_situation_changer.c | 433 | manage_rooms_situations();
door.c | 49 | create();
door.c | 50 | create();
door.c | 51 | create();
door.c | 57 | add_property( "determinate", "the " );
door.c | 58 | set_unlocked();
door.c | 82 | add_property("group object", 1);
door.c | 84 | remove_property("group object");
door.c | 128 | explode( words, " " );
door.c | 133 | implode( map( bits, (: explode( $1, "-" ) :) ), (: $1 + $2 :) );
door.c | 134 | uniq_array( bits );
door.c | 136 | sizeof( bits ) - 1 ] });
door.c | 138 | pluralize( bits[ sizeof( bits ) - 1 ] ) });
door.c | 205 | add_command( "knock", "on <direct:object>" );
door.c | 206 | init();
door.c | 210 | short() { return query_short();
door.c | 215 | pretty_short() { return query_short();
door.c | 216 | query_plural() { return pluralize( query_short() );
door.c | 217 | pretty_plural() { return pluralize( query_short() );
door.c | 221 | long_status();
door.c | 278 | explode( word, " " );
door.c | 279 | sizeof( bits ) - 1 ] });
door.c | 281 | pluralize( bits[ sizeof( bits ) - 1 ] ) });
door.c | 283 | set_closed() : set_open();
door.c | 284 | set_locked() : set_unlocked();
door.c | 286 | set_key(args[ D_KEY ] );
door.c | 287 | set_difficulty(args[ D_DIFFICULTY ] );
door.c | 289 | add_hide_invis( "secret", 0, 200, 0 );
door.c | 291 | if(sizeof(args) >
door.c | 292 | set_transparent();
door.c | 294 | set_door_name(args[D_NAME]);
door.c | 300 | explode( word, " " );
door.c | 301 | sizeof( bits ) - 1 ] });
door.c | 303 | pluralize( bits[ sizeof( bits ) - 1 ] ) });
door.c | 317 | query_door( my_room, _door_name );
door.c | 322 | call_door(my_id, "query_door_name");
door.c | 323 | query_door(my_room, door_name);
door.c | 324 | modify_exit( my_id, ({ "other", direc }) );
door.c | 339 | set_closed();
door.c | 349 | add_door( this_object() );
door.c | 352 | modify_exit(other_id, ({ "closed", 0 }));
door.c | 357 | tell_door(other_id, "Someone opens the $D.\n", 0);
door.c | 368 | set_open();
door.c | 374 | modify_exit( other_id, ({ "closed", 1, "locked", 1 }) );
door.c | 378 | modify_exit( other_id, ({ "closed", 1 }) );
door.c | 379 | tell_door( other_id, "Someone closes the $D.\n", 0 );
door.c | 390 | set_unlocked();
door.c | 395 | modify_exit(other_id, ({ "locked", 1 }));
door.c | 396 | tell_door(other_id, "Someone locks the $D.\n", 0);
door.c | 407 | set_locked();
door.c | 412 | modify_exit(other_id, ({ "locked", 0 }));
door.c | 413 | tell_door(other_id, "Someone unlocks the $D.\n", 0);
door.c | 424 | check_door( ({ my_room, my_id }) );
door.c | 435 | tell_door( other_id, "Someone knocks on the $D.\n", 0 );
door.c | 436 | event(find_object(dest), "door_knock", this_player(), other_id);
door.c | 454 | set_locked();
door.c | 459 | modify_exit( other_id, ({ "locked", 0 }) );
door.c | 460 | tell_door( other_id, "Someone unlocks the $D.\n", 0 );
door.c | 478 | set_unlocked();
door.c | 483 | modify_exit( other_id, ({ "locked", 1 }) );
door.c | 484 | tell_door( other_id, "Someone locks the $D.\n", 0 );
door.c | 490 | return (this_player() ? name + ({ this_player()->find_rel(my_id) }) : name);
door.c | 498 | this_object();
door.c | 506 | this_object();
door.c | 510 | this_object();
door.c | 513 | this_object();
door.c | 523 | parse_match_object(input, viewer, context);
door.c | 528 | call_stack(1), call_stack(2));
door.c | 529 | destruct( this_object() );
door.c | 531 | dwep() { destruct( this_object() );
door.c | 532 | go_away() { call_out("dest_me", 0);
door.c | 540 | set_closed();
door.c | 545 | remove_hide_invis("sneaking");
door.c | 548 | modify_exit(other_id, ({ "closed", 0 }));
door.c | 549 | tell_door(other_id, (string)thing->a_short() + " opens the $D.\n", 0);
door.c | 552 | tell_object( thing, "You open the "+ shrt +".\n" );
door.c | 563 | set_open();
door.c | 569 | modify_exit( other_id, ({ "closed", 1, "locked", 1 }) );
door.c | 573 | modify_exit( other_id, ({ "closed", 1 }) );
door.c | 587 | call_door( other_id, "query_short" ) +".\n" );
door.c | 600 | modify_exit(other_id, ({ "locked", 0 }));
door.c | 602 | tell_object(thing, "You unlock the "+ shrt +".\n");
door.c | 614 | modify_exit(other_id, ({ "locked", 1 }));
door.c | 617 | call_door( other_id, "query_short" ) +".\n" );
door.c | 643 | if(query_how_many() >
item.c | 40 | this_player()->add_command(name, this_object(), _pattern[name]);
item.c | 59 | file_name(previous_object());
item.c | 100 | query_multiple_short(query_short_array());
item.c | 107 | query_short_array();
item.c | 110 | query_multiple_short(ret);
item.c | 119 | add_a( $1 ) + "$" :)), "");
item.c | 155 | pluralize(_shrt[i]) });
item.c | 157 | query_multiple_short(ret);
item.c | 165 | pluralize(_shrt[i]);
item.c | 181 | evaluate(_lng[ i ]) });
item.c | 270 | sizeof(bits);
item.c | 310 | allocate(POSITION_SIZE);
item.c | 346 | map_delete(_gather, index);
item.c | 349 | map_delete(_gather, frog);
item.c | 356 | map_delete(_position_stuff, index);
item.c | 359 | map_delete(_position_stuff, frog);
item.c | 368 | map_delete(value, index);
item.c | 370 | map_delete(_other_things, str);
item.c | 371 | map_delete(_pattern, str);
item.c | 375 | map_delete(value, frog);
item.c | 385 | sizeof(value);
item.c | 390 | member_array(adj, _adjs);
item.c | 397 | member_array(str, _name);
item.c | 408 | sizeof(value);
item.c | 432 | explode(name, " ");
item.c | 447 | pluralize(s);
item.c | 474 | sizeof(_lng);
item.c | 476 | if (sizeof(nam) >
item.c | 481 | pluralize(nam[0]) });
item.c | 485 | add_name_reference(index, str, no_plural);
item.c | 492 | pluralize(nam) });
item.c | 494 | add_name_reference(index, nam, no_plural);
item.c | 498 | setup_bits_for_item(index, long);
item.c | 517 | setup_bits_for_item(index, long);
item.c | 533 | member_array(str, _shrt);
item.c | 538 | modify_item_by_index(index, long);
item.c | 544 | modify_item_by_name(str, long);
item.c | 547 | modify_item_by_index(str, long);
item.c | 561 | add_item("frog", "It wombles!");
item.c | 565 | remove_item(_item_number);
item.c | 578 | remove_bits_for_item(index);
item.c | 589 | member_array(str, _shrt);
item.c | 594 | remove_item_by_index(index);
item.c | 600 | remove_item_by_name(str);
item.c | 603 | remove_item_by_index(str);
item.c | 624 | explode(arr[P_STR], " ");
item.c | 638 | sizeof(stuff);
item.c | 654 | this_object();
item.c | 666 | sizeof(stuff);
item.c | 683 | this_object();
item.c | 699 | sizeof(stuff);
item.c | 717 | this_object();
item.c | 722 | this_object();
item.c | 740 | debug_printf( "Input: %O\nPlayer: %O\nContext: %O\n", input, player, context );
item.c | 742 | if (input[<1] == "here" && sizeof(input) >
item.c | 752 | map(_cur_desc, (: explode(_shrt[$1], " ")[<1] :));
item.c | 767 | map(_cur_desc, (: explode(_shrt[$1], " ")[<1] :));
item.c | 789 | sizeof(sing);
item.c | 798 | debug_printf( "Singular: %O\nStuff: %O\nContext: %O\n", sing, stuff, context );
item.c | 809 | sizeof(plural);
item.c | 832 | sizeof(stuff);
item.c | 841 | sizeof(stuff);
item.c | 851 | return ({ ret, ({ this_object() }) });
item.c | 859 | destruct(this_object());
item.c | 865 | destruct(this_object());
item.c | 883 | sizeof(_cur_desc);
item.c | 911 | write(temp);
item.c | 913 | add_succeeded_mess(({ "", "$N $V $D.\n" }));
item.c | 945 | sizeof(_cur_desc);
item.c | 961 | sizeof(_cur_desc);
item.c | 977 | evaluate(_count[i]);
twilight.c | 120 | set_current_long();
twilight.c | 121 | return_long( mixed desc );
twilight.c | 122 | do_change();
twilight.c | 123 | change( int time_now );
twilight.c | 127 | this_object() ) ) );
twilight.c | 132 | destruct( thing );
twilight.c | 134 | destruct_shadow( thing );
twilight.c | 138 | shadow( this_room, 1 );
twilight.c | 143 | call_out( "changing_to_day", 0, 1 );
twilight.c | 146 | call_out( "changing_to_night", 0, 1 );
twilight.c | 150 | allocate( 2 );
twilight.c | 152 | allocate( 2 );
twilight.c | 154 | weather_notify( this_room, NOTIFY_DAY );
twilight.c | 161 | change( DAY );
twilight.c | 163 | change( NIGHT );
twilight.c | 165 | event_weather( whats_changed );
twilight.c | 173 | set_current_long();
twilight.c | 177 | sizeof( roomitems[ last_updated ] );
twilight.c | 181 | sizeof( roomitems[ 1 - last_updated ] );
twilight.c | 191 | stop_room_chats();
twilight.c | 193 | room_chat( roomchats[last_updated] );
twilight.c | 197 | changing_to_day( 0 );
twilight.c | 199 | changing_to_night( 0 );
twilight.c | 204 | set_current_long();
twilight.c | 209 | set_current_long();
twilight.c | 214 | set_long( roomlong[last_updated] );
twilight.c | 225 | return_long( desc ) });
twilight.c | 228 | this_object()->add_item( shorts, desc, no_plural );
twilight.c | 241 | return_long( desc ) });
twilight.c | 244 | add_item( shorts, desc, no_plural );
twilight.c | 251 | room_chat( args );
twilight.c | 257 | room_chat( args );
twilight.c | 267 | member_array( "long", desc );
situation_changer.c | 38 | tell_creator("shaggy","Room set: %O %O %O\n",room_o,this_object(),previous_object());
situation_changer.c | 40 | this_object();
situation_changer.c | 52 | choose_words( "frog", ({ "#1", "tadpole", "#2", "pond" }));
situation_changer.c | 62 | if (!sitwords) sitwords= ([ ]);
situation_changer.c | 66 | sizeof(sit->random_words);
situation_changer.c | 69 | RANDOM(sizeof((sit->random_words)[i]),choice+i*3347483647)] });
situation_changer.c | 87 | if (!sizeof(sit->chats)) return ({ });
situation_changer.c | 88 | foreach (s1 in sit->chats) outarray+= ({ replace(s1,words) });
situation_changer.c | 101 | if (!sizeof(sit->add_items)) return ({ });
situation_changer.c | 103 | if (sizeof(ai)>
situation_changer.c | 105 | if (arrayp(e0)) e0=explode(lower_case(replace(implode(e0,"|"),words)),"|");
situation_changer.c | 106 | lower_case(replace(e0,words));
situation_changer.c | 108 | if (arrayp(e1)) e1=explode(replace(implode(e1,"|"),words),"|");
situation_changer.c | 109 | replace(e1,words);
situation_changer.c | 129 | query_current_situations() { return ({ currentsits, autosits });
situation_changer.c | 144 | destruct(this_object());
situation_changer.c | 216 | add_situation( "frogs", frogs );
situation_changer.c | 259 | tell_creator("shaggy","label starting: %O\n",label);
situation_changer.c | 261 | if (!currentsits) currentsits=({ label });
situation_changer.c | 264 | tell_creator("shaggy","Start seed: %O\n",seed);
situation_changer.c | 268 | replace(sdata->extra_look,words) });
situation_changer.c | 270 | replace(sdata->extra_look,words) });
situation_changer.c | 271 | add_extra_look(this_object());
situation_changer.c | 275 | tell_room(ownerroom, replace(sdata->start_mess,words)+"\n");
situation_changer.c | 276 | insert_words_chats(sdata,words);
situation_changer.c | 278 | tell_creator("shaggy","Adding: %O %O %O\n",sdata->chat_rate,chats,ownerroom->query_chatter());
situation_changer.c | 286 | clone_object("/std/room/basic/multichatter")  );
situation_changer.c | 287 | query_chatter();
situation_changer.c | 291 | room_chat( ({ chatmin,chatmax, chats }) );
situation_changer.c | 292 | query_chatter();
situation_changer.c | 294 | check_chat();
situation_changer.c | 300 | dest_me();
situation_changer.c | 302 | clone_object("/std/room/basic/multichatter")  );
situation_changer.c | 303 | query_chatter();
situation_changer.c | 307 | check_chat();
situation_changer.c | 309 | add_room_chats(chats);
situation_changer.c | 312 | insert_words_items(sdata,words);
situation_changer.c | 315 | add_item(item[0],item[1]);
situation_changer.c | 316 | tell_creator("shaggy","Adding item: %O:%O\n",item[0],item[1]);
situation_changer.c | 343 | tell_creator("shaggy","label ending: %O\n",label);
situation_changer.c | 345 | if (currentsits) currentsits=currentsits-({ label });
situation_changer.c | 347 | replace(sdata->extra_look,words) });
situation_changer.c | 348 | if (!sizeof(els)) ownerroom->remove_extra_look(this_object());
situation_changer.c | 351 | insert_words_chats(sdata,words);
situation_changer.c | 353 | tell_creator("shaggy","Removing: %O\n",chats);
situation_changer.c | 354 | remove_room_chats(chats);
situation_changer.c | 356 | insert_words_items(sdata,words);
situation_changer.c | 360 | remove_item((item[0])[0]);
situation_changer.c | 362 | remove_item(item[0]);
situation_changer.c | 363 | tell_creator("shaggy","Removing item: %O:%O\n",item[0],item[1]);
situation_changer.c | 367 | tell_room(ownerroom,replace(sdata->end_mess,words)+"\n");
situation_changer.c | 411 | tell_creator("shaggy","CHANGE: %O %O\n",label,duration);
situation_changer.c | 413 | if (!cco) cco=({ 1, 0 });
situation_changer.c | 426 | if (stringp(frog)) frog=explode(frog,",");
situation_changer.c | 428 | foreach(bing in frog) end_situation(bing);
situation_changer.c | 434 | sizeof(label);
situation_changer.c | 436 | foreach (frog in label) duration+=({ bing });
situation_changer.c | 441 | if (arrayp(label) && sizeof(label)>1 && sizeof(label)>
situation_changer.c | 443 | if (stringp(frog)) ending=explode(frog,",");
situation_changer.c | 451 | if (stringp(frog)) frog=explode(frog,",");
situation_changer.c | 455 | foreach(bing in ending) end_situation(bing);
situation_changer.c | 459 | if (!sizeof(words)) choose_words( bing, time()*335423611 );
situation_changer.c | 460 | choose_words( bing, words );
situation_changer.c | 461 | start_situation(bing,1);
situation_changer.c | 471 | if (stringp(frog)) frog=explode(frog,",");
situation_changer.c | 475 | foreach(bing in ending) end_situation(bing);
situation_changer.c | 478 | foreach(bing in frog) start_situation(bing,1);
situation_changer.c | 493 | if (functionp(sit->when)) possible=(*(sit->when))(tod);
situation_changer.c | 499 | RANDOM(1000,it*1147483647+cnt*2047483243) < sit->chance);
situation_changer.c | 500 | tell_creator("shaggy","trying %O (%O %O %O %O %O %O)\n",sit->label,possible,sit->when,(1<<((AM_TIME_HANDLER)->query_am_hour(tod))),RANDOM(1000,it*1147483647+cnt*2047483243),tod,it);
situation_changer.c | 501 | tell_creator("shaggy","trying %O %O %O %O %O %O\n",time(),t,offset,ttmp,tod,it);
situation_changer.c | 511 | if (functionp(sit2->when)) possible2=(*(sit2->when))(tod2);
situation_changer.c | 516 | RANDOM(1000,it2*1147483647+cnt2*2047483243) < sit2->chance);
situation_changer.c | 517 | tell_creator("shaggy","Comparing %O (%O %O %O %O %O %O)\n",sit2->label,possible2,sit2->when,(1<<((AM_TIME_HANDLER)->query_am_hour(tod2))),RANDOM(1000,it2*1147483647+cnt2*2047483243),tod2,it2);
situation_changer.c | 544 | tell_creator("shaggy","Managing: %s %O\n",ownerroom->query_short(),sittiming);
situation_changer.c | 551 | tell_creator("shaggy","Time %O\n",time());
situation_changer.c | 572 | query_possible(sit, it, tod, cnt);
situation_changer.c | 575 | map_delete(sit->it_data,it-1);
situation_changer.c | 577 | tell_creator("shaggy","Test for %O cached %O\n",sit->label,possible);
situation_changer.c | 581 | if (sit->background) background_off+=explode(sit->background,",");
situation_changer.c | 596 | explode(label,",");
situation_changer.c | 598 | foreach(lb in label) choose_words(lb,it*1147483647+cnt*2047555777);
situation_changer.c | 602 | choose_words(label,it*1147483647+cnt*2047555777);
situation_changer.c | 606 | if (sit->background) background_on+=explode(sit->background,",");
situation_changer.c | 613 | query_possible(sit, it+1, tod+sit->duration, cnt);
situation_changer.c | 616 | map_delete(sit->it_data,it-1);
situation_changer.c | 627 | tell_creator("shaggy","newsits: %O tstep: %O t: %O/%O \n",newsits,tstep,dt,tc);
situation_changer.c | 629 | call_out("manage_situations",tstep+1);
situation_changer.c | 636 | foreach(label in changes) end_situation(label);
situation_changer.c | 643 | foreach(label in changes) start_situation(label,2-automate);
situation_changer.c | 658 | if (automate==2 && interactive(this_player())) manage_situations();
situation_changer.c | 714 | automate_situation( "frog", 300, WHEN_ANY_TIME, 200 );
situation_changer.c | 737 | tell_creator("shaggy","Automating %O\n",label);
situation_changer.c | 740 | tell_creator("shaggy","automate_sit: %O %O %O\n",ownerroom,this_object(),previous_object());
situation_changer.c | 741 | file_name(ownerroom);
situation_changer.c | 743 | write( "Bad file name" );
situation_changer.c | 756 | query_chatter())->query_room_chats();
situation_changer.c | 766 | write("Duration must be an array of the same length as label");
situation_changer.c | 771 | sizeof(duration);
situation_changer.c | 778 | if (background) background=implode(explode(background,",")+({ label[i] }),",");
situation_changer.c | 786 | sizeof(label);
situation_changer.c | 787 | sizeof(label) });
situation_changer.c | 793 | tell_creator("shaggy","%O endat %O\n",label,endat);
situation_changer.c | 821 | if (sizeof(cco)>
situation_changer.c | 823 | if (h) remove_call_out(h);
situation_changer.c | 828 | foreach(label in currentsits) end_situation(label);
situation_changer.c | 850 | if (handle && cco[handle]) remove_call_out(cco[handle]);
situation_changer.c | 857 | if (stringp(bing)) frog+=explode(bing,",");
situation_changer.c | 861 | if (stringp(label)) label=explode(label,",");
situation_changer_handler.c | 17 | if (!clonep()) ::add_situation( label, sit );
situation_changer_handler.c | 18 | write("You can't add situations to a clone of this object.");
situation_changer_handler.c | 23 | tell_creator("shaggy","set room on %O\n",this_object());
situation_changer_handler.c | 28 | find_object(base_name(this_object()));
situation_changer_handler.c | 30 | base_name(this_object()))->parp();
situation_changer_handler.c | 31 | find_object(base_name(this_object()));
situation_changer_handler.c | 33 | if (!base) tell_creator("shaggy","%O just wouldn't load!\n",base_name(this_object()));
situation_changer_handler.c | 36 | tell_creator("shaggy","Using %O instead of %O\n",base,this_object());
situation_changer_handler.c | 37 | call_out( "dest_me", 2 );
situation_changer_handler.c | 38 | set_situation_changer( base );
situation_changer_handler.c | 40 | query_situations();
situation_changer_handler.c | 43 | set_room( room_o );
situation_changer_handler.c | 48 | sizeof(children(base_name(this_object()))));
situation_changer_handler.c | 50 | if (clonep()) ::dest_me();
situation_changer_handler.c | 51 | if (sizeof(children(base_name(this_object())))==1) ::dest_me();
situation_changer_handler.c | 56 | tell_creator("shaggy","create on %O\n",this_object());
situation_changer_handler.c | 58 | if (!clonep()) this_object()->setup_situations();
water.c | 38 | query_property(string);
water.c | 39 | query_dest_other(string);
water.c | 40 | add_property(string, mixed, int);
water.c | 41 | modify_exit(mixed, mixed*);
water.c | 42 | query_destination(string);
water.c | 43 | query_exits();
water.c | 44 | set_water_light(int);
water.c | 45 | query_my_light();
water.c | 46 | query_dest_dir(object);
water.c | 47 | lives_in_water( object ob );
water.c | 49 | soak(object, int);
water.c | 50 | get_water();
water.c | 51 | water_override(string);
water.c | 52 | do_float();
water.c | 53 | do_drift();
water.c | 54 | do_swim();
water.c | 55 | get_swim_enum(object);
water.c | 56 | query_bottom();
water.c | 57 | query_surface();
water.c | 58 | get_exit_mess(object, string);
water.c | 59 | get_enter_mess(object, string);
water.c | 60 | query_above_room();
water.c | 61 | update_water_light();
water.c | 120 | set_bottom_mess("lying in the seaweed");
water.c | 143 | set_nonfloat_mess("drifting amid the seaweed");
water.c | 165 | set_float_mess("floating above the seaweed");
water.c | 187 | set_sinking_mess("sinking into the seaweed");
water.c | 215 | set_sink_in_mess("$N sink$s into the cavern from $F.");
water.c | 228 | replace(s_in_mess, ({"$down$", down_dir}));
water.c | 241 | set_sink_out_mess("$N sink$s $down$ out of the cavern.");
water.c | 254 | replace(s_out_mess, ({"$down$", down_dir}));
water.c | 269 | set_float_in_mess("$N float$s into the cavern from $F.");
water.c | 282 | replace(f_in_mess, ({"$up$", up_dir}));
water.c | 295 | set_float_out_mess("$N float$s $up$ out of the cavern.");
water.c | 308 | replace(f_out_mess, ({"$up$", up_dir}));
water.c | 374 | set_up_dir("upwest");
water.c | 399 | set_down_dir("downeast");
water.c | 475 | add_property("dark mess", "The water here is very murky.");
water.c | 478 | add_property("dark mess", "The water here is quite murky.");
water.c | 481 | add_property("dark mess", "The water here is slightly murky.");
water.c | 506 | set_clarity(100 - how_murky);
water.c | 518 | query_clarity();
water.c | 606 | query_above_room();
water.c | 608 | set_water_light(0);
water.c | 617 | query_water_surface_light();
water.c | 620 | query_my_light();
water.c | 622 | set_water_light(surface_light);
water.c | 637 | update_water_light();
water.c | 652 | query_above_room();
water.c | 657 | query_water_surface_light();
water.c | 659 | query_my_light();
water.c | 676 | set_use_surface_light(1);
water.c | 678 | update_water_light();
water.c | 681 | set_water_light(get_water_surface_light());
water.c | 701 | add_flow("north", -80);
water.c | 702 | add_flow("south", 80);
water.c | 716 | map_delete(flows, dir);
water.c | 729 | copy(flows);
water.c | 762 | random(buoyancy/3);
water.c | 775 | query_destination(up_dir);
water.c | 779 | load_object(destination);
water.c | 790 | query_destination(down_dir);
water.c | 794 | load_object(destination);
water.c | 808 | this_object();
water.c | 810 | query_above_room();
water.c | 812 | query_surface_room();
water.c | 828 | this_object();
water.c | 830 | query_below_room();
water.c | 832 | query_bottom_room();
water.c | 842 | effects_matching(SWIM_EFFECT->query_classification());
water.c | 849 | add_effect(SWIM_EFFECT, 2);
water.c | 857 | get_swim_enum(ob);
water.c | 858 | arg_of(effnum);
water.c | 862 | tell_object(ob, "You break the surface.\n");
water.c | 865 | tell_object(ob, "You break the surface and take a deep breath.\n");
water.c | 868 | set_arg_of(effnum, ({args[0], 0}));
water.c | 874 | calc_buoyancy(ob);
water.c | 876 | add_property("there", on_bottom);
water.c | 880 | add_property("there", floating);
water.c | 883 | add_property("there", sinking);
water.c | 886 | add_property("there", non_float);
water.c | 889 | return_to_default_position();
water.c | 930 | effects_matching(LIVING_WET_EFFECT->query_classification());
water.c | 932 | arg_of(effects[0]);
water.c | 936 | add_effect(LIVING_WET_EFFECT, wetness);
water.c | 940 | effects_matching(OBJECT_WET_EFFECT->query_classification());
water.c | 942 | arg_of(effects[0]);
water.c | 946 | add_effect(OBJECT_WET_EFFECT, wetness);
water.c | 950 | query_max_volume() - ob->query_volume() >
water.c | 951 | get_water();
water.c | 952 | set_amount(ob->query_max_volume() - ob->query_volume());
water.c | 953 | move(ob);
water.c | 957 | all_inventory(ob);
water.c | 960 | map(things, (: soak($1, 1) :));
water.c | 977 | request_item("water");
water.c | 980 | set_short("very muddy water");
water.c | 981 | add_adjective(({"very", "muddy"}));
water.c | 982 | set_long("This is $amount_size$ of very muddy water.\n");
water.c | 985 | set_short("muddy water");
water.c | 986 | add_adjective("muddy");
water.c | 987 | set_long("This is $amount_size$ of muddy water.\n");
water.c | 990 | set_short("slightly muddy water");
water.c | 991 | add_adjective(({"slightly", "muddy"}));
water.c | 992 | set_long("This is $amount_size$ of slightly muddy water.\n");
water.c | 996 | set_short("brine");
water.c | 997 | add_alias("brine");
water.c | 998 | set_long("This is $amount_size$ of very salty water.\n");
water.c | 1001 | set_short("salty water");
water.c | 1002 | add_adjective("salty");
water.c | 1003 | set_long("This is $amount_size$ of salty water.\n");
water.c | 1038 | get_swim_enum(ob);
water.c | 1039 | arg_of(effnum);
water.c | 1046 | calc_buoyancy(ob);
water.c | 1048 | query_weight();
water.c | 1050 | query_dest_dir();
water.c | 1051 | member_array(dir, places_to_go);
water.c | 1071 | query_water_traction_bonus(ob, buoyancy);
water.c | 1073 | random(query_turbulence());
water.c | 1083 | swim_difficulty(ob);
water.c | 1098 | random(4)]+" to swim "+dir+" at the moment.\n");
water.c | 1099 | notify_fail("");
water.c | 1103 | adjust_gp(-gp_cost);
water.c | 1117 | notify_fail("");
water.c | 1176 | query_dest_other(direc);
water.c | 1183 | get_enter_mess($1, $(direc)) :)}));
water.c | 1187 | add_property("no burial", 1);
water.c | 1255 | map_delete(exit_messes, file_name(ob));
water.c | 1278 | map_delete(enter_messes, file_name(ob));
water.c | 1289 | replace(retval, "$F", query_origin(direc));
water.c | 1297 | add_command("float", "", (: do_float() :));
water.c | 1298 | add_command("drift", "", (: do_drift() :));
water.c | 1299 | add_command("swim", "", (: do_swim() :));
water.c | 1314 | random(20);
water.c | 1318 | random(80);
water.c | 1321 | random(120);
water.c | 1324 | random(40);
water.c | 1334 | capitalize(garbled);
water.c | 1352 | random(40);
water.c | 1354 | get_swim_enum(ob);
water.c | 1355 | arg_of(effnum);
water.c | 1357 | set_arg_of(effnum, args);
water.c | 1358 | adjust_tmp_con(-random((last_speech_volume / 50) + 1));
water.c | 1361 | tell_object(ob, "You inhale a bit of water.\n");
water.c | 1364 | tell_object(ob, "You inhale some water.\n");
water.c | 1367 | tell_object(ob, "You inhale a fair amount of water.\n");
water.c | 1370 | tell_object(ob, "You inhale about a lungful of water.\n");
water.c | 1385 | get_swim_enum(this_player());
water.c | 1386 | this_player()->arg_of(effnum);
water.c | 1389 | add_failed_mess("You are already floating on the current.\n");
water.c | 1392 | add_failed_mess("You are already floating freely.\n");
water.c | 1396 | this_player()->set_arg_of(effnum, ({0, args[1]}));
water.c | 1398 | add_succeeded_mess(({"You begin to float freely on the current.\n", ""}));
water.c | 1401 | add_succeeded_mess(({"You begin to float freely.\n", ""}));
water.c | 1416 | get_swim_enum(this_player());
water.c | 1417 | this_player()->arg_of(effnum);
water.c | 1420 | add_failed_mess("You are already drifting with the current.\n");
water.c | 1423 | add_failed_mess("You are already drifting freely.\n");
water.c | 1427 | this_player()->set_arg_of(effnum, ({0, args[1]}));
water.c | 1433 | add_succeeded_mess(({"You begin to drift freely.\n", ""}));
water.c | 1448 | get_swim_enum(this_player());
water.c | 1449 | this_player()->arg_of(effnum);
water.c | 1452 | add_failed_mess("You are already swimming against the current.\n");
water.c | 1455 | add_failed_mess("You are already swimming.\n");
water.c | 1459 | this_player()->set_arg_of(effnum, ({1, args[1]}));
water.c | 1461 | add_succeeded_mess(({"You begin to swim against the current.\n", ""}));
water.c | 1464 | add_succeeded_mess(({"You begin to swim.\n", ""}));
water.c | 1478 | effects_matching(SWIM_EFFECT->query_classification());
water.c | 1480 | add_effect(SWIM_EFFECT, 1);
water.c | 1481 | effects_matching(SWIM_EFFECT->query_classification());
water.c | 1482 | call_out("soak", 1, thing);
water.c | 1484 | call_out("soak", 1, thing);
water.c | 1522 | query_surface();
water.c | 1537 | query_race_ob();
wall.c | 48 | shadow( thing, 1 );
wall.c | 57 | destruct( this_object() );
wall.c | 59 | destruct_shadow( thing );
wall.c | 62 | query_belows() { return copy( belows );
wall.c | 63 | query_bottom() { return copy( bottom );
wall.c | 64 | query_ghost_action() { return copy( ghost_action );
wall.c | 65 | query_moves() { return copy( moves );
wall.c | 66 | query_no_drop() { return copy( no_drop );
wall.c | 72 | member_array( word, moves );
wall.c | 81 | calc_co_ord();
wall.c | 85 | member_array( word, moves );
wall.c | 91 | copy( (int *)other->query_co_ord() );
wall.c | 100 | set_co_ord( co_ord );
wall.c | 115 | query_property( "here" );
wall.c | 116 | add_property( "here", "falling past you" );
wall.c | 125 | member_array( arg[ 0 ], moves );
wall.c | 147 | add_property( "here", old_here );
wall.c | 149 | remove_property( "here" );
wall.c | 160 | event_enter( thing, mess, from );
wall.c | 162 | call_out( "fall_down", 0, thing );
wall.c | 192 | if ( sizeof( bottom ) >
wall.c | 204 | query_complete_weight();
wall.c | 206 | query_ac( "blunt", damage );
wall.c | 211 | attack_by( room );
wall.c | 212 | adjust_hp(-damage, room);
wall.c | 214 | adjust_hp(-damage, room);
wall.c | 215 | tell_object( thing, "Ouch, that hurt!\n" );
terrain.c | 20 | shadow(thing, 1);
terrain.c | 21 | setup_location(thing, word);
terrain.c | 22 | add_property("terrain name", word);
terrain.c | 29 | delete_cloned_location(terrain_name, file_name(room));
terrain.c | 30 | destruct(this_object());
terrain.c | 32 | destruct_shadow( thing );
terrain.c | 38 | query_shadowing(this_object());
terrain.c | 42 | call_out("free_location", 10);
terrain.c | 45 | event_exit(thing, message, to);
terrain.c | 51 | delete_cloned_location(terrain_name, file_name(room));
terrain.c | 52 | dest_me();
terrain.c | 56 | allocate(3);
terrain.c | 64 | query_shadowing(this_object());
terrain.c | 66 | query_destination(direc);
terrain.c | 67 | query_room_size() + TERRAIN_MAP->get_room_size(dest_name);
terrain.c | 68 | query_co_ord();
terrain.c | 72 | find_location(terrain_name, new_co_ords);
terrain.c | 76 | modify_exit(direc, ({ "dest", file_name(destination) }));
terrain.c | 83 | query_co_ord() });
fixed_shadow.c | 116 | tell_creator("jeremy", "%O:query_dest_other(%s)\n", this_object(), direc);
fixed_shadow.c | 118 | query_dest_other(direc);
fixed_shadow.c | 120 | query_dest_other(direc);
fixed_shadow.c | 131 | file_name(room);
fixed_shadow.c | 140 | shadow(ob);
fixed_shadow.c | 159 | this_object()->add_exit("north", "/topography", other_types);
fixed_shadow.c | 161 | this_object()->add_exit("south", "/topography", other_types);
fixed_shadow.c | 163 | this_object()->add_exit("east", "/topography", other_types);
fixed_shadow.c | 165 | this_object()->add_exit("west", "/topography", other_types);
fixed_shadow.c | 168 | this_object()->add_exit("northeast", "/topography", other_types);
fixed_shadow.c | 170 | this_object()->add_exit("northwest", "/topography", other_types);
fixed_shadow.c | 172 | this_object()->add_exit("southeast", "/topography", other_types);
fixed_shadow.c | 174 | this_object()->add_exit("southwest", "/topography", other_types);
fixed_shadow.c | 177 | this_object()->add_exit(s, "/topography", other_types);
plain.c | 13 | query_dest_other(direc, plain::query_dest_other(direc));
plain.c | 17 | query_look(direc, plain::query_look(direc));
plain.c | 21 | set_not_replaceable(1);
plain.c | 22 | create();
mountain.c | 13 | query_dest_other(direc, mountain::query_dest_other(direc));
mountain.c | 17 | query_look(direc, mountain::query_look(direc));
mountain.c | 21 | set_not_replaceable(1);
mountain.c | 22 | create();
water_inside.c | 15 | query_dest_other(direc);
water_inside.c | 16 | printf("%O\n", fluff);
water_inside.c | 17 | query_dest_other(direc, fluff);
water_inside.c | 21 | query_look(direc, water_inside::query_look(direc));
water_inside.c | 25 | set_not_replaceable(1);
water_inside.c | 26 | create();
outside.c | 13 | query_dest_other(direc, outside::query_dest_other(direc));
outside.c | 17 | query_look(direc, outside::query_look(direc));
outside.c | 21 | set_not_replaceable(1);
outside.c | 22 | create();
water_outside.c | 15 | query_dest_other(direc);
water_outside.c | 16 | printf("%O\n", fluff);
water_outside.c | 17 | query_dest_other(direc, fluff);
water_outside.c | 21 | query_look(direc, water_outside::query_look(direc));
water_outside.c | 25 | set_not_replaceable(1);
water_outside.c | 26 | create();
woodland.c | 13 | query_dest_other(direc, woodland::query_dest_other(direc));
woodland.c | 17 | query_look(direc, woodland::query_look(direc));
woodland.c | 21 | set_not_replaceable(1);
woodland.c | 22 | create();
room.c | 21 | query_dest_other(direc, basic_room::query_dest_other(direc));
room.c | 25 | query_look(direc, basic_room::query_look(direc));
room.c | 29 | set_not_replaceable(1);
room.c | 30 | create();
plain.c | 24 | create();
plain.c | 28 | this_object()->setup();
plain.c | 29 | this_object()->reset();
plain.c | 32 | add_exit(motion_verb, "interroom", "hidden");
mountain.c | 24 | create();
mountain.c | 28 | this_object()->setup();
mountain.c | 29 | this_object()->reset();
mountain.c | 32 | add_exit(motion_verb, "interroom", "hidden");
outside.c | 24 | create();
outside.c | 28 | this_object()->setup();
outside.c | 29 | this_object()->reset();
outside.c | 32 | add_exit(motion_verb, "interroom", "hidden");
woodland.c | 24 | create();
woodland.c | 28 | this_object()->setup();
woodland.c | 29 | this_object()->reset();
woodland.c | 32 | add_exit(motion_verb, "interroom", "hidden");
room.c | 24 | create();
room.c | 28 | this_object()->setup();
room.c | 29 | this_object()->reset();
room.c | 32 | add_exit(motion_verb, "interroom", "hidden");
plain.c | 24 | create();
plain.c | 28 | this_object()->setup();
plain.c | 29 | this_object()->reset();
plain.c | 33 | add_exit(motion_verb, "interroom", "hidden");
plain.c | 34 | call_out("setup_milestone", 0);
mountain.c | 24 | create();
mountain.c | 28 | this_object()->setup();
mountain.c | 29 | this_object()->reset();
mountain.c | 33 | add_exit(motion_verb, "interroom", "hidden");
mountain.c | 34 | call_out("setup_milestone", 0);
outside.c | 24 | create();
outside.c | 28 | this_object()->setup();
outside.c | 29 | this_object()->reset();
outside.c | 33 | add_exit(motion_verb, "interroom", "hidden");
outside.c | 34 | call_out("setup_milestone", 0);
woodland.c | 24 | create();
woodland.c | 28 | this_object()->setup();
woodland.c | 29 | this_object()->reset();
woodland.c | 33 | add_exit(motion_verb, "interroom", "hidden");
woodland.c | 34 | call_out("setup_milestone", 0);
room.c | 24 | create();
room.c | 28 | this_object()->setup();
room.c | 29 | this_object()->reset();
room.c | 33 | add_exit(motion_verb, "interroom", "hidden");
room.c | 34 | call_out("setup_milestone", 0);
voting_room.c | 65 | list_votes();
voting_room.c | 66 | cast_vote( string words, int num );
voting_room.c | 67 | stand_for_election(string position);
voting_room.c | 68 | second_candidate(string who, string position);
voting_room.c | 69 | list_elections();
voting_room.c | 70 | do_create_vote(string choices);
voting_room.c | 76 | seteuid("Room");
voting_room.c | 86 | add_command("vote", "<string> on <number>", (: cast_vote($4[0], $4[1]) :) );
voting_room.c | 87 | add_command("list", "votes", (: list_votes :));
voting_room.c | 88 | add_command("votes", "", (: list_votes :));
voting_room.c | 92 | add_command( "stand", "[for] <string>", (: stand_for_election($4[0]) :));
voting_room.c | 94 | second_candidate($4[0], $4[1]) :) );
voting_room.c | 95 | add_command("list", "elections", (: list_elections :));
voting_room.c | 96 | add_command("elections", "", (: list_elections :));
voting_room.c | 107 | query_votes();
voting_room.c | 112 | return ([ ]);
voting_room.c | 134 | query_elections();
voting_room.c | 139 | return ([ ]);
voting_room.c | 160 | do_create_vote($4[0]) :));
voting_room.c | 176 | m_indices( query_our_votes() );
voting_room.c | 178 | sizeof( vote_ids );
voting_room.c | 180 | call_out( "end_vote", 10 * ( i + 1 ), vote_ids[ i ] );
voting_room.c | 189 | call_out( "start_election_vote", 30 * random(5), election);
voting_room.c | 207 | if( file_size( _vote_file + ".o" ) >
voting_room.c | 208 | unguarded( (: restore_object, _vote_file :) );
voting_room.c | 209 | setup_after_load();
voting_room.c | 227 | unguarded( (: save_object, _vote_file :) );
voting_room.c | 370 | cast_vote(which_str, vote_id);
voting_room.c | 374 | add_failed_mess("There is no vote " + vote_id + ".\n");
voting_room.c | 379 | member_array(which_str, this_vote->choices);
voting_room.c | 381 | if(strlen(which_str) >
voting_room.c | 397 | evaluate(_vote_cond, this_player(), this_vote->desc);
voting_room.c | 400 | call_other(_vote_cond[0], _vote_cond[1], this_player(), this_vote->desc);
voting_room.c | 413 | this_player()->query_name();
voting_room.c | 415 | add_succeeded_mess(({"You have already voted on this subject.\n", ""}));
voting_room.c | 424 | sizeof(this_vote->votes[which]);
voting_room.c | 428 | save_room();
voting_room.c | 447 | write( "There are no votes in progress.\n" );
voting_room.c | 451 | m_indices( query_our_votes() );
voting_room.c | 452 | if ( sizeof( vote_ids ) >
voting_room.c | 453 | write( "The following votes are in progress:\n" );
voting_room.c | 455 | write( "The following vote is in progress:\n" );
voting_room.c | 458 | sizeof( vote_ids );
voting_room.c | 462 | sizeof(this_vote->choices);
voting_room.c | 463 | sprintf("    %c. %s\n", 'A'+j, this_vote->choices[j]);
voting_room.c | 493 | add_vote(type, description, choices, ending);
voting_room.c | 497 | new(class vote);
voting_room.c | 502 | allocate(sizeof(choices), (: ({ }) :));
voting_room.c | 504 | allocate(sizeof(choices));
voting_room.c | 509 | time());
voting_room.c | 511 | time());
voting_room.c | 515 | add_our_vote(vote_counter, new_vote);
voting_room.c | 518 | call_out( "end_vote", new_vote->ending - time(), vote_counter );
voting_room.c | 520 | save_room();
voting_room.c | 526 | query_votes() { return query_our_votes() + ([ ]);
voting_room.c | 531 | query_elections() { return query_our_elections() + ([ ]);
voting_room.c | 547 | query_our_votes()[which]->voted);
voting_room.c | 551 | query_our_votes()[which]->voted);
voting_room.c | 554 | map_delete(query_our_votes(), which);
voting_room.c | 556 | save_room();
voting_room.c | 571 | sprintf( "%-=*s", 64, message));
voting_room.c | 584 | initiate_election(position);
voting_room.c | 589 | new(class election);
voting_room.c | 597 | add_our_election(position, tmp);
voting_room.c | 599 | call_out("start_election_vote", tmp->closes + 60, position);
voting_room.c | 601 | save_room();
voting_room.c | 627 | stand_for_election(position);
voting_room.c | 632 | evaluate(_stand_cond, this_player(), position);
voting_room.c | 634 | call_other(_stand_cond[0], _stand_cond[1], this_player(), position);
voting_room.c | 654 | sizeof(query_our_elections()[position]->candidates);
voting_room.c | 663 | query_our_elections()[position]->candidates += ({({ this_player()->query_name(), "" })});
voting_room.c | 664 | save_room();
voting_room.c | 684 | second_candidate(who, position);
voting_room.c | 689 | evaluate(_second_cond, this_player(), position);
voting_room.c | 691 | call_other(_second_cond[0], _second_cond[1], this_player(), position);
voting_room.c | 712 | sizeof(candidates);
voting_room.c | 724 | add_succeeded_mess(({"You cannot second yourself.\n", ""}));
voting_room.c | 736 | this_player()->query_name();
voting_room.c | 738 | save_room();
voting_room.c | 767 | sizeof(query_our_elections()[post]->candidates);
voting_room.c | 771 | query_our_elections()[post]->candidates[i][1]);
voting_room.c | 772 | query_our_elections()[post]->candidates[i][0] });
voting_room.c | 796 | map_delete(query_our_elections(), post);
voting_room.c | 797 | save_room();
voting_room.c | 810 | write( "There are no elections in progress.\n" );
voting_room.c | 814 | m_indices( query_our_elections() );
voting_room.c | 815 | if ( sizeof( posts ) >
voting_room.c | 816 | write( "The following elections are in progress:\n" );
voting_room.c | 818 | write( "The following election is in progress:\n" );
voting_room.c | 821 | sizeof( posts );
voting_room.c | 830 | sizeof(this_election->candidates);
voting_room.c | 875 | map(explode(choices, ","), (: strip_spaces($1) :)) - ({ "" });
voting_room.c | 876 | write("Choices: " + query_multiple_short(bits) + ".\n");
voting_room.c | 877 | write("What description would you like for your vote?\n");
voting_room.c | 878 | this_player()->do_edit("", "create_vote_desc", this_object(), 0, bits);
voting_room.c | 879 | add_succeeded_mess(({ "", "$N starts to create a new vote.\n" }));
voting_room.c | 886 | write("Aborting.\n");
voting_room.c | 892 | write("Please answer yes or no: ");
voting_room.c | 893 | input_to("create_vote_desc_confirm", 0, str, choices);
voting_room.c | 898 | lower_case(str);
voting_room.c | 901 | write("Please answer yes or no: ");
voting_room.c | 902 | input_to("create_vote_desc_confirm", 0, str, choices);
voting_room.c | 906 | write("Ok, quitting.\n");
voting_room.c | 913 | add_vote("freeform", desc, choices, 0);
voting_room.c | 914 | write("Added in the vote.\n");
voting_room.c | 926 | map_delete(query_our_elections(), election);
voting_room.c | 927 | save_room();
voting_room.c | 941 | map_delete(query_our_votes(), vote_id);
voting_room.c | 942 | save_room();
punishment_inherit.c | 16 | this_object()->setup();
punishment_inherit.c | 75 | unguarded( (: NROFF_HAND->cat_file(_desc_file+"_nroff", 1) :) );
punishment_inherit.c | 77 | unguarded( (: NROFF_HAND->create_nroff(_desc_file, _desc_file+"_nroff") :) );
punishment_inherit.c | 78 | unguarded( (: NROFF_HAND->cat_file(_desc_file+"_nroff", 1) :) );
punishment_inherit.c | 96 | evaluate(finish, the_case, type, 0);
owned_room.c | 15 | do_allow(string name);
owned_room.c | 16 | do_throwout(string name);
owned_room.c | 17 | do_disallow(string name);
owned_room.c | 18 | load_room();
owned_room.c | 24 | query_owner();
owned_room.c | 28 | load_room();
owned_room.c | 36 | do_allow($4[0]) :));
owned_room.c | 39 | do_disallow($4[0]) :));
owned_room.c | 42 | do_throwout($4[0]) :));
owned_room.c | 99 | lower_case(name);
owned_room.c | 101 | add_failed_mess("The person " + name + " is already allowed.\n");
owned_room.c | 105 | write("Ok, you have allowed " + name + " to enter your room.\n");
owned_room.c | 115 | lower_case(name);
owned_room.c | 117 | add_failed_mess("The person " + name + " is not allowed to disallow.\n");
owned_room.c | 121 | write("Ok, you have disallowed " + name + " from entering your room.\n");
owned_room.c | 143 | add_failed_mess("Unable to move $I for some reason.\n", people);
owned_room.c | 147 | add_succeeded_mess("$N throw$s $I out of the room.\n", moved);
owned_room.c | 174 | lower_case(person);
owned_room.c | 204 | restore_object(_save_file);
owned_room.c | 217 | save_object(_save_file);
honours.c | 26 | is_allowed_to_change(string person);
honours.c | 27 | save_me();
honours.c | 78 | new(class honour);
honours.c | 79 | time();
honours.c | 82 | query_cap_name(person);
honours.c | 84 | add_title_to_player(person, title);
honours.c | 86 | save_me();
honours.c | 100 | map_delete(_honours, person);
honours.c | 103 | find_player(person)->remove_player_title(title);
honours.c | 106 | save_me();
honours.c | 114 | classp(_honours[person]);
honours.c | 130 | add_failed_mess("There is no one on the honour roll.\n");
honours.c | 134 | sort_array(keys(_honours), (: _honours[$1]->time_added - _honours[$2]->time_added :));
honours.c | 141 | write("$P$Honour Roll$P$" + ret);
honours.c | 158 | add_failed_mess("They are already on the honour roll.\n");
honours.c | 162 | add_failed_mess("The person " + person + " does not exist.\n");
honours.c | 166 | write("Enter the reason for adding " + person + " to the honour roll:\n");
honours.c | 167 | this_player()->do_edit("", "end_honour_add", this_object(), 0, person);
honours.c | 168 | add_succeeded_mess("");
honours.c | 179 | write("Aborting.\n");
honours.c | 185 | input_to("honour_roll_confirm", 0, person, reason);
honours.c | 195 | lower_case(response);
honours.c | 197 | write("Aborting.\n");
honours.c | 201 | add_to_honour_roll(person, reason, this_player()->query_cap_name());
honours.c | 203 | this_player()->query_name());
honours.c | 204 | add_succeeded_mess("$N add$s " + person + " to the honour roll.\n");
honours.c | 221 | add_failed_mess("They are not on the honour roll.\n");
honours.c | 225 | remove_from_honour_roll(person);
honours.c | 227 | this_player()->query_cap_name());
honours.c | 228 | add_succeeded_mess("$N remove$s " + person + " to the honour roll.\n");
honours.c | 242 | add_title_to_player(person, title);
honours.c | 251 | add_command("list", "honour [roll]", (: do_list_honour() :));
honours.c | 255 | do_honour_add($4[0]) :));
honours.c | 258 | do_honour_remove($4[0], $4[1]) :));
scripting.c | 24 | init();
scripting.c | 30 | add_help_file( DOCS +"scripting" );
scripting.c | 90 | find_npc( string what );
scripting.c | 92 | is_allowed( string name );
scripting.c | 93 | event_save( object ob );
scripting.c | 125 | query_script( event );
scripting.c | 131 | new(class running_script);
scripting.c | 135 | query_name();
scripting.c | 136 | the_short();
scripting.c | 142 | add_running_script(running);
scripting.c | 174 | call_out( "repeat_loop", 2);
scripting.c | 178 | remove_call_out(_callout_tag);
scripting.c | 179 | call_out( "repeat_loop",  data->number);
scripting.c | 182 | find_npc( data->actor );
scripting.c | 185 | repeat_loop();
scripting.c | 189 | do_command( data->str );
scripting.c | 192 | evaluate_expresion(data->expr);
scripting.c | 194 | find_npc( data->actor );
scripting.c | 197 | repeat_loop();
scripting.c | 200 | do_command( data-> str );
scripting.c | 213 | call_out("repeat_loop");
scripting.c | 223 | event_save(this_object());
scripting.c | 234 | event_save(this_object());
scripting.c | 246 | event_save(this_object());
scripting.c | 262 | event_save(this_object());
scripting.c | 279 | event_save(this_object());
scripting.c | 299 | event_save(this_object());
scripting.c | 313 | action ( or another command such as \"wait\" ).\n" );
scripting.c | 314 | print_commands();
scripting.c | 315 | input_to( "menu_input", 0, name, script );
scripting.c | 322 | sizeof(script->data);
scripting.c | 324 | to_int(bits[2]);
scripting.c | 338 | explode(lower_case(input), " ");
scripting.c | 342 | show_help();
scripting.c | 346 | set_script(name, script);
scripting.c | 352 | input_to( "check_quit", 0, name, script );
scripting.c | 356 | write(query_script_string(script));
scripting.c | 362 | write("Syntax: add <person> <pos|end|begining>\n");
scripting.c | 369 | query_pos_from_string(bits[2]);
scripting.c | 373 | input_to("enter_command", 0, name, script, bits[1], pos);
scripting.c | 376 | sizeof(script->data) + " or 'begining' or 'end'.\n");
scripting.c | 383 | write("Syntax: delete <pos|end|begining>\n");
scripting.c | 385 | query_pos_from_string(bits[2]);
scripting.c | 389 | sizeof(script->data) + " or 'begining' or 'end'.\n");
scripting.c | 394 | write("Invalid command " + bits[1] + ".\n");
scripting.c | 397 | menu_prompt(name, script);
scripting.c | 409 | prompt_command();
scripting.c | 417 | action ( or another command such as \"wait\" ).\n" );
scripting.c | 418 | print_commands();
scripting.c | 419 | input_to( "input_name" );
scripting.c | 426 | tell_object( this_player(), "Command [ h for help ]:\n" );
scripting.c | 435 | unguarded((: NROFF_HAND->cat_file("/doc/room/scripting_nroff", 1) :));
scripting.c | 439 | unguarded((:NROFF_HAND->cat_file(PATH +"scripting_nroff", 0):));
scripting.c | 442 | write(str);
scripting.c | 450 | write("Okay, quitting.\n" );
scripting.c | 454 | call_other( this_object(), func );
scripting.c | 462 | write("Saving current script and exiting.\n" );
scripting.c | 466 | event_save( this_object() );
scripting.c | 484 | sizeof(_temp_script->script);
scripting.c | 500 | tell_object( this_player(), "Okay, removing script.\n" );
scripting.c | 513 | event_save( this_object() );
scripting.c | 529 | to_int( input );
scripting.c | 531 | tell_object( this_player(), "Invalid option, quitting.\n" );
scripting.c | 537 | sizeof(_script_data);
scripting.c | 540 | tell_object( this_player(), "Invalid option, quitting.\n" );
scripting.c | 554 | input_to( "edit_script", 0, which );
scripting.c | 556 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 564 | explode( input, " " );
scripting.c | 566 | if( sizeof(comm) >
scripting.c | 567 | if( sizeof(comm) >
scripting.c | 569 | implode(comm, " ");
scripting.c | 575 | tell_object( this_player(), "Done editing script.\n" );
scripting.c | 580 | tell_object( this_player(), "Quitting without saving changes.\n");
scripting.c | 584 | sizeof(_temp_script->script);
scripting.c | 587 | input_to( "edit_script", 0, which );
scripting.c | 589 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 594 | if( (line < 0) || ((line +1) >
scripting.c | 597 | input_to( "edit_script", 0, which );
scripting.c | 599 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n");
scripting.c | 613 | input_to( "edit_script", 0, which );
scripting.c | 615 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 620 | if( (line < 0) || ((line +1) >
scripting.c | 623 | input_to( "edit_script", 0, which );
scripting.c | 625 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 631 | input_to( "edit_script", 0, which );
scripting.c | 633 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 637 | if( (line < 0) || ((line +1) >
scripting.c | 640 | input_to( "edit_script", 0, which );
scripting.c | 642 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 654 | input_to( "edit_script", 0, which );
scripting.c | 656 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 660 | tell_object( this_player(),"%^BOLD%^Unknown command.\n%^RESET%^");
scripting.c | 661 | input_to( "edit_script", 0, which );
scripting.c | 663 | I(nsert), V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 677 | add_succeeded_mess( "" );
scripting.c | 691 | new(class fancy_hat, tag : input, script : ({}) );
scripting.c | 698 | print_commands();
scripting.c | 699 | input_to( "input_name" );
scripting.c | 700 | add_succeeded_mess( "$N begin$s to write a new script.\n" );
scripting.c | 715 | tell_object(this_player(), sizeof(_script_data) +" scripts found:\n\n");
scripting.c | 717 | sizeof(_script_data);
scripting.c | 718 | tell_object( this_player(), (i +1) +"  "+ _script_data[i]->tag +"\n");
scripting.c | 720 | add_succeeded_mess( "" );
scripting.c | 730 | get_index( input );
scripting.c | 733 | add_succeeded_mess( "" );
scripting.c | 745 | view_script(1);
scripting.c | 746 | add_succeeded_mess( "" );
scripting.c | 756 | get_index( input );
scripting.c | 759 | add_succeeded_mess( "" );
scripting.c | 766 | trigger_thingy( _script_data[num]->tag, file_name( this_player()) );
scripting.c | 767 | add_succeeded_mess( "" );
scripting.c | 777 | get_index( input );
scripting.c | 780 | add_succeeded_mess( "" );
scripting.c | 794 | input_to( "query_delete", 0, num );
scripting.c | 795 | add_succeeded_mess( "" );
scripting.c | 805 | get_index( input );
scripting.c | 808 | add_succeeded_mess( "" );
scripting.c | 823 | sizeof(_temp_script->script);
scripting.c | 824 | tell_object(this_player(),(i+1) +"  "+ _temp_script->script[i] +"\n");
scripting.c | 828 | V(iew), S(ave), Q(uit) ]:\nEg \"R 13 rabbit\".\n" );
scripting.c | 829 | input_to( "edit_script", 0, num );
scripting.c | 831 | add_succeeded_mess( "" );
scripting.c | 842 | do_add_script( $4[0] ) :) );
scripting.c | 845 | do_list_scripts() :) );
scripting.c | 848 | do_view_script( $4[0] ) :) );
scripting.c | 850 | do_view_script( $4[0] ) :) );
scripting.c | 853 | do_test_script( $4[0] ) :) );
scripting.c | 855 | do_test_script( $4[0] ) :) );
scripting.c | 858 | do_delete_script( $4[0] ) :) );
scripting.c | 860 | do_delete_script( $4[0] ) :) );
scripting.c | 863 | do_edit_script( $4[0] ) :) );
scripting.c | 865 | do_edit_script( $4[0] ) :) );
club_owned_room.c | 14 | query_owner_of(_club_owned_id);
player_housing.c | 27 | query_direc(object thing);
player_housing.c | 28 | query_relative(string direc);
player_housing.c | 29 | query_door_control(string direc);
player_housing.c | 30 | query_dest_other(string direc);
player_housing.c | 31 | modify_exit(string dir, mixed* arr);
player_housing.c | 32 | add_item(mixed shorts, mixed desc, int no_plural);
player_housing.c | 33 | the_short();
player_housing.c | 34 | query_exits();
player_housing.c | 35 | query_exit(string direc);
player_housing.c | 36 | setup_doors();
player_housing.c | 37 | update_doors();
player_housing.c | 38 | update_short_cache(string direc);
player_housing.c | 39 | test_occupier(string name);
player_housing.c | 40 | show_surface(string direc);
player_housing.c | 41 | allow_list();
player_housing.c | 42 | do_deny(string player, string location);
player_housing.c | 43 | do_allow(object player, string location);
player_housing.c | 44 | add_allowed(string pname);
player_housing.c | 45 | remove_allowed(string pname);
player_housing.c | 46 | query_owner();
player_housing.c | 100 | debug_printf(fmt + "\n", args ...);
player_housing.c | 103 | ctime(time())[4..18], base_name(this_object()), args ...);
player_housing.c | 110 | create();
player_housing.c | 115 | this_object()->add_item("left", (: show_surface("left") :));
player_housing.c | 116 | this_object()->add_item("right", (: show_surface("right") :));
player_housing.c | 117 | this_object()->add_item("forward", (: show_surface("forward") :));
player_housing.c | 118 | this_object()->add_item("backward", (: show_surface("backward") :));
player_housing.c | 119 | this_object()->add_item("up", (: show_surface("up") :));
player_housing.c | 120 | this_object()->add_item("down", (: show_surface("down") :));
player_housing.c | 129 | setup_doors();
player_housing.c | 130 | call_out("setup_doors", 0);
player_housing.c | 131 | call_out("setup_doors", 1);
player_housing.c | 149 | this_player()->query_facing();
player_housing.c | 150 | this_player()->find_abs(direc, tmp2[0]);
player_housing.c | 177 | replace(direc, ({ " wall", "" }));
player_housing.c | 180 | update_short_cache(direc);
player_housing.c | 189 | query_door_control(direc)->one_short();
player_housing.c | 197 | desc_surface(direc);
player_housing.c | 213 | desc_surface(direc);
player_housing.c | 228 | query_direc();
player_housing.c | 234 | sizeof(direcs);
player_housing.c | 235 | update_short_cache(direcs[i]);
player_housing.c | 238 | member_array(this_player()->find_rel(direcs[i]), REL_DIRS);
player_housing.c | 248 | query_door_control(direcs[i])->a_short();
player_housing.c | 253 | query_door_control(direcs[i]);
player_housing.c | 305 | sizeof(coverings[$1]) - sizeof(coverings[$2]) :));
player_housing.c | 308 | if(sizeof(tmparray) >
player_housing.c | 319 | if(i == sizeof(tmparray)-1 && sizeof(coverings[tmpstr]) >
player_housing.c | 322 | query_multiple_short(coverings[tmpstr], "", 1);
player_housing.c | 324 | if(sizeof(coverings[tmpstr]) >
player_housing.c | 355 | decoration_long();
player_housing.c | 361 | return (lstr + furniture_long() + exit_long() + "\n");
player_housing.c | 370 | modify_exit(direc, ({ "relative", 1 }));
player_housing.c | 372 | modify_exit(direc, ({ "closed", 1 }));
player_housing.c | 416 | base_name(this_object());
player_housing.c | 441 | add_item(tmp->short, (: show_surface($(tmp->short)) :));
player_housing.c | 442 | replace(short, ({" wall", ""}));
player_housing.c | 446 | add_item(dir+" corner", (: show_corner($(dir)) :));
player_housing.c | 454 | new(class decoration );
player_housing.c | 458 | add_item(tmp->short, (: show_surface($(tmp->short)) :));
player_housing.c | 459 | replace(short, ({" wall", ""}));
player_housing.c | 463 | add_item(dir+" corner", (: show_corner($(dir)) :));
player_housing.c | 479 | replace(tmp->short, ({" wall", ""})) });
player_housing.c | 499 | event(this_object(), "save");
player_housing.c | 510 | printf("%O\n", decorations);
player_housing.c | 517 | query_furniture() || thing->query_missing_item_receipt();
player_housing.c | 526 | test_remove(thing, flag, dest);
player_housing.c | 538 | query_property("current room hidden") :) );
player_housing.c | 544 | init();
player_housing.c | 553 | add_command("allow", "list", (: allow_list() :));
player_housing.c | 559 | do_allow($1[0], "room") :));
player_housing.c | 561 | do_deny($4[0], "room") :));
player_housing.c | 564 | do_allow($1[0], $4[1]) :));
player_housing.c | 566 | do_deny($4[0], $4[1]) :));
player_housing.c | 584 | query_name() });
player_housing.c | 595 | tell_object(ob, "Sorry, this area is only open to playtesters.\n");
player_housing.c | 596 | move(from);
player_housing.c | 599 | event_enter_checks(ob);
player_housing.c | 616 | add_failed_mess("You are not allowed to control this room.\n", ({ }));
player_housing.c | 660 | add_failed_mess("You are not allowed to control this room.\n", ({ }));
player_housing.c | 665 | add_failed_mess("$I is not here.\n", ({ player }));
player_housing.c | 668 | lower_case(player->query_name());
player_housing.c | 670 | add_failed_mess("$I is already able to control this room.\n");
player_housing.c | 675 | query_rooms(base_name(this_object()));
player_housing.c | 678 | add_allowed(pname);
player_housing.c | 681 | add_allowed(pname);
player_housing.c | 707 | add_failed_mess(player + " is not on the allow list.\n");
player_housing.c | 713 | add_failed_mess("You are not allowed to control this room.\n");
player_housing.c | 718 | add_failed_mess(player + " is already not allowed to control this room.\n");
player_housing.c | 723 | query_rooms(base_name(this_object()));
player_housing.c | 725 | remove_allowed(player);
player_housing.c | 727 | remove_allowed(player);
player_housing.c | 730 | find_player(player);
player_housing.c | 733 | the_short() + ".\n%^RESET%^");
player_housing.c | 754 | query_dest_other(direc)[0]->one_short();
player_housing.c | 756 | this_player()->convert_message(ostr);
player_housing.c | 758 | query_dest_other(direc)[0]->a_short();
player_housing.c | 760 | this_player()->convert_message(astr);
player_housing.c | 780 | setup_doors();
player_housing.c | 786 | query_door_control(exit);
player_housing.c | 807 | query_trap_data());
player_housing.c | 828 | debug_log("Setup doors called.");
player_housing.c | 832 | this_object()->calc_exits();
player_housing.c | 838 | debug_log("Leaving setup_doors, No exits to setup.");
player_housing.c | 844 | query_auto_loading(), query_inventory_loaded());
player_housing.c | 851 | query_door_control(exit);
player_housing.c | 854 | map_delete(exits, exit);
player_housing.c | 860 | catch(owner = HOUSING->query_owner(base_name(this_object())));
player_housing.c | 885 | set_trap_armed(1);
player_housing.c | 891 | query_dest();
player_housing.c | 892 | query_other_id();
player_housing.c | 904 | force_other();
player_housing.c | 905 | query_other_id();
player_housing.c | 911 | debug_log("No other_id, adding call_out.");
player_housing.c | 914 | call_out("setup_doors", 0);
player_housing.c | 927 | query_door_control(other_id);
player_housing.c | 935 | set_trap_armed();
player_housing.c | 948 | query_owner(base_name(this_object()));
player_housing.c | 967 | event(this_object(), "save");
player_housing.c | 983 | event(this_object(), "save");
player_housing.c | 1001 | catch(owner = HOUSING->query_owner(base_name(this_object())));
player_housing.c | 1014 | return (owner == name || (member_array(name, allowed) != -1));
player_housing.c | 1043 | return ({ });
player_housing.c | 1065 | update_doors();
player_housing.c | 1067 | dest_me();
player_housing.c | 1073 | debug_log("door opened by %s [%d]", opener->query_name(), done_setup);
player_housing.c | 1076 | event_open(door, opener);
player_housing.c | 1077 | update_doors();
player_housing.c | 1084 | debug_log("door closed by %s [%d]", closer->query_name(), done_setup);
player_housing.c | 1087 | event_close(door, closer);
player_housing.c | 1088 | update_doors();
player_housing.c | 1096 | query_name():"noone", done_setup);
player_housing.c | 1099 | event_unlock(door, unlocker);
player_housing.c | 1100 | update_doors();
player_housing.c | 1111 | event_lock(door, locker);
player_housing.c | 1112 | update_doors();
bath_house.c | 15 | add_wash_effect( string classification, function func );
bath_house.c | 16 | add_finished_func( function func );
bath_house.c | 17 | advanced_antiseptic( object ob, string classification, mixed arg, int effect_enum, object effect_ob );
bath_house.c | 18 | basic_cleaning( object ob, int effect_enum, string message );
bath_house.c | 19 | apply_soap( object ob, string *applied_effects );
bath_house.c | 20 | wet_person( object ob, string *applied_effects );
bath_house.c | 31 | add_wash_effect( "body.smell", (: advanced_antiseptic :) );
bath_house.c | 39 | add_finished_func( (: apply_soap :) );
bath_house.c | 40 | add_finished_func( (: wet_person :) );
bath_house.c | 42 | this_object()->add_setup_wash_command();
bath_house.c | 48 | this_object()->add_init_wash_command();
bath_house.c | 60 | add_wash_effect( "body.smell", (: advanced_antiseptic :) );
bath_house.c | 91 | keys( _wash );
bath_house.c | 101 | map_delete( _wash, classification );
bath_house.c | 115 | smell_string( ob, arg ) + ".\n" );
bath_house.c | 116 | delete_effect( effect_enum );
bath_house.c | 123 | tell_object( ob, message + "\n" );
bath_house.c | 124 | delete_effect( effect_enum );
bath_house.c | 131 | add_effect( SOAP_EFFECT, 10000 );
bath_house.c | 135 | add_effect( WET_EFFECT, 250 );
bath_house.c | 175 | effects_matching( eff );
bath_house.c | 180 | eff_of( eff_enum ) );
bath_house.c | 188 | evaluate( func, ob, cleaned );
terrain_map_room.c | 22 | query_feature_item_desc(string title);
terrain_map_room.c | 23 | do_gocoords(int x, int y);
terrain_map_room.c | 24 | add_extra_look(object ob);
terrain_map_room.c | 25 | setup_room_chat();
terrain_map_room.c | 26 | query_chatter();
terrain_map_room.c | 27 | room_chat(mixed* args, object chatob);
terrain_map_room.c | 28 | add_item(mixed type, mixed desc);
terrain_map_room.c | 29 | remove_item(string name);
terrain_map_room.c | 34 | query_coords() { return ({ _x_coord, _y_coord });
terrain_map_room.c | 52 | add_extra_look(this_object());
terrain_map_room.c | 53 | setup_room_chat();
terrain_map_room.c | 71 | tell_creator(this_player(), "Coords: (%d, %d)\n", _x_coord, _y_coord);
terrain_map_room.c | 73 | add_command("gocoords", "<number'x'> <number'y'>", (: do_gocoords($4[0], $4[1]) :));
terrain_map_room.c | 94 | query_map_handler()->load_room_at(x, y);
terrain_map_room.c | 95 | this_player()->query_mmsgin();
terrain_map_room.c | 96 | this_player()->query_mmsgout();
terrain_map_room.c | 105 | replace(msgin, ({ "$N", this_player()->a_short() }) );
terrain_map_room.c | 106 | replace(msgout, ({ "$N", this_player()->a_short() }) );
terrain_map_room.c | 108 | add_succeeded_mess("Move attempt failed.\n");
terrain_map_room.c | 123 | query_map_handler()->reset_handler();
terrain_map_room.c | 135 | explode(mess_class, ":");
terrain_map_room.c | 144 | if (sizeof(bits) >
terrain_map_room.c | 145 | to_int(bits[2]);
terrain_map_room.c | 149 | replace(message, ({ "$D", feature["direc"] }));
terrain_map_room.c | 151 | tell_creator("dek", "receive_message\n");
terrain_map_room.c | 152 | tell_room(this_object(), message);
terrain_map_room.c | 166 | query_map_handler();
terrain_map_room.c | 176 | tell_room(this_object(), chats[random(sizeof(chats))] + "\n");
terrain_map_room.c | 186 | query_map_handler()->get_an_outside_chat(_outside_types);
terrain_map_room.c | 189 | tell_room(this_object(), chat + "\n");
terrain_map_room.c | 204 | load_object(handler);
terrain_map_room.c | 267 | call_out("make_chat", 10);
terrain_map_room.c | 277 | query_chatter()->make_chat();
terrain_map_room.c | 296 | query_to_same(type);
terrain_map_room.c | 299 | map(result, (: replace($1, ({ "$T", $2, "$F", $3 }) ) :), to, from);
terrain_map_room.c | 309 | query_to_other(type);
terrain_map_room.c | 312 | map(result, (: replace($1, ({ "$T", $2, "$F", $3 }) ) :), to, from);
terrain_map_room.c | 322 | query_from_other(type);
terrain_map_room.c | 325 | map(result, (: replace($1, ({ "$T", $2, "$F", $3 }) ) :), to, from);
terrain_map_room.c | 372 | explode(room_path, ":");
terrain_map_room.c | 379 | load_object(bits[0]);
terrain_map_room.c | 380 | query_map_handler();
terrain_map_room.c | 382 | query_room(room_path);
terrain_map_room.c | 399 | add_item(items, (: query_feature_item_desc($(title)) :));
terrain_map_room.c | 416 | map_delete(_features, title);
terrain_map_room.c | 419 | remove_item(items);
terrain_map_room.c | 421 | remove_item(items[0]);
terrain_map_room.c | 449 | query_map_handler()->query_feature_item_desc(title);
terrain_map_room.c | 472 | find_player(name);
terrain_map_room.c | 476 | query_property("area_map_coords");
terrain_map_room.c | 477 | remove_property("area_map_coords");
terrain_map_room.c | 484 | remove_static_login_call(name, "login_restore", path);
terrain_map_room.c | 485 | move(query_map_handler()->load_room_at(x, y));
terrain_map_room.c | 507 | query_name();
terrain_map_room.c | 508 | add_property("area_map_coords", query_coords());
terrain_map_room.c | 509 | add_static_login_call(name, "login_restore", path);
room_save.c | 31 | set_save_file( string file, object thing );
room_save.c | 32 | do_load(object thing);
room_save.c | 33 | query_dynamic_auto_load();
room_save.c | 34 | init_dynamic_arg(mapping bing);
room_save.c | 45 | debug_printf(fmt + "\n", args ...);
room_save.c | 49 | ctime(time())[4..18], base_name(this_object()), args ...);
room_save.c | 59 | time();
room_save.c | 79 | explode(_ram_file, "/");
room_save.c | 83 | debug_printf("Creating %s", fname);
room_save.c | 84 | mkdir(fname);
room_save.c | 90 | do_load();
room_save.c | 114 | event(environment(this_object()), "save");
room_save.c | 120 | remove_call_out("do_save");
room_save.c | 130 | call_out("do_save", SAVE_TIME);
room_save.c | 140 | event_save(this_object());
room_save.c | 146 | base_name(this_object()));
room_save.c | 157 | remove_call_out("door_action");
room_save.c | 158 | call_out("door_action", 5);
room_save.c | 165 | remove_call_out("door_action");
room_save.c | 166 | call_out("door_action", 5);
room_save.c | 171 | debug_printf("Event unlock called %O", door);
room_save.c | 174 | remove_call_out("door_action");
room_save.c | 175 | call_out("door_action", 5);
room_save.c | 180 | debug_printf("Event lock called %O", door);
room_save.c | 183 | remove_call_out("door_action");
room_save.c | 184 | call_out("door_action", 5);
room_save.c | 195 | remove_call_out("do_save");
room_save.c | 201 | base_name(this_object()));
room_save.c | 207 | query_dynamic_auto_load();
room_save.c | 211 | unguarded((: save_object, _ram_file, 3 :));
room_save.c | 214 | unguarded((: save_object, _save_file, 3 :));
room_save.c | 220 | base_name(this_object()));
room_save.c | 224 | base_name(this_object()));
room_save.c | 233 | query_short(), sizeof(deep_inventory(ob)));
room_save.c | 236 | time();
room_save.c | 249 | file_size(_ram_file + ".o.gz") > 0 || file_size(_ram_file + ".o") >
room_save.c | 254 | if(file_size(fname + ".o.gz") > 0 || file_size(fname + ".o") >
room_save.c | 255 | this_object()->query_properties();
room_save.c | 256 | unguarded((: restore_object, fname :));
room_save.c | 257 | this_object()->set_properties(tmp);
room_save.c | 260 | init_dynamic_arg( details );
room_save.c | 271 | time();
room_save.c | 272 | remove_call_out("do_save");
room_save.c | 273 | remove_call_out("door_action");
room_save.c | 285 | event(this_object(), "save", thing);
room_save.c | 295 | event(this_object(), "save", ob);
room_save.c | 314 | effect_freeze();
room_save.c | 315 | effects_saving();
room_save.c | 322 | effect_unfreeze();
room_save.c | 327 | filter(all_inventory(this_object()), "test_save");
room_save.c | 330 | catch(obs = AUTO_LOAD_OB->create_auto_load( obs, 0 ) );
room_save.c | 341 | reset_get();
room_save.c | 343 | move(this_object());
room_save.c | 352 | ctime(time())[4..18]);
room_save.c | 357 | ctime(time())[4..18]);
room_save.c | 363 | set_effs( bing[ "effects" ][ 0 ] );
room_save.c | 364 | set_eeq( bing[ "effects" ][ 1 ] );
room_save.c | 366 | move_object( environment() );
room_save.c | 367 | init_after_save();
room_save.c | 372 | ctime(time())[4..18]);
room_save.c | 383 | ctime(time())[4..18]);
room_save.c | 387 | move_to_dest($1) :) );
room_save.c | 392 | ctime(time())[4..18]);
room_save.c | 397 | ctime(time())[4..18]);
room_save.c | 402 | query_short(), sizeof(deep_inventory(ob)));
room_save.c | 406 | ctime(time())[4..18]);
room_save.c | 415 | seteuid( geteuid( previous_object() ) );
room_save.c | 429 | do_save();
p_library.c | 101 | do_add( object *obs, string title, string author );
p_library.c | 102 | do_remove_book( int id );
p_library.c | 103 | do_borrow( mixed arg );
p_library.c | 104 | do_return( object *obs );
p_library.c | 105 | do_list( string arg, string to, string from, string specific );
p_library.c | 106 | do_status( string player );
p_library.c | 107 | do_book_status( int id );
p_library.c | 108 | do_set( string player, string type );
p_library.c | 109 | do_mark( int id, int flag );
p_library.c | 110 | do_set_fine( int i );
p_library.c | 111 | do_set_loan_length( int days );
p_library.c | 112 | do_set_max_loans( int i );
p_library.c | 113 | do_lost_damaged_fine( int i );
p_library.c | 114 | do_report( int id, string arg, string player );
p_library.c | 116 | query_loans( string name );
p_library.c | 117 | query_borrowed_by( int id );
p_library.c | 118 | query_fine( string name );
p_library.c | 120 | clear_loan( mixed player, int id, int calc_fines );
p_library.c | 123 | set_access( string player, int access );
p_library.c | 124 | query_access( mixed player );
p_library.c | 125 | do_set( string player, string type );
p_library.c | 126 | save_me();
p_library.c | 128 | make_pretty_catalog( string arg, string from, string to, string specific );
p_library.c | 129 | compare_widgets( object new_ob, int existing_id );
p_library.c | 138 | lower_case(book->cap_author) ] += ({ id });
p_library.c | 140 | lower_case(book->cap_author) ] = ({ id });
p_library.c | 143 | lower_case(book->cap_title) ] += ({ id });
p_library.c | 145 | lower_case(book->cap_title) ] = ({ id });
p_library.c | 154 | create();
p_library.c | 165 | unguarded( (: restore_object, _save_file :) );
p_library.c | 177 | build_catalogs();
p_library.c | 179 | add_help_file("p_library_user");
p_library.c | 180 | add_help_file("p_library_librarian");
p_library.c | 188 | add_extra_look( this_object() );
p_library.c | 189 | set_read_mess( 0, 0, 0 );
p_library.c | 193 | this_object()->setup();
p_library.c | 202 | set_short("small library");
p_library.c | 203 | set_long("A library. Lots of books everywhere.\n");
p_library.c | 204 | set_light(70);
p_library.c | 216 | do_add( $1, $4[1], $4[2] ) :) );
p_library.c | 218 | do_remove_book( $4[0] ) :));
p_library.c | 221 | add_command( "borrow", "<number'book id'>", (: do_borrow( $4[0] ) :) );
p_library.c | 222 | add_command( "return", "<indirect:object:me-here>" );
p_library.c | 223 | add_command( "pay", "[fine]"  );
p_library.c | 225 | add_command( "view", "catalogue by {author|title}", (: do_list( $4[0], "a", "z", 0 ) :) );
p_library.c | 227 | do_list( $4[0], $4[1], $4[2], 0 ) :) );
p_library.c | 230 | do_list( "author", 0, 0, $4[0] ) :) );
p_library.c | 232 | do_list( "title", 0, 0, $4[0] ) :) );
p_library.c | 234 | add_command( "status", "", (: do_status(0) :) );
p_library.c | 237 | do_book_status( $4[0] ) :) );
p_library.c | 240 | do_report( $4[0], $4[1], 0 ) :) );
p_library.c | 245 | do_set( $4[0], $4[1] ) :) );
p_library.c | 248 | do_set_fine( $4[0] ) :) );
p_library.c | 251 | do_set_loan_length( $4[0] ) :) );
p_library.c | 254 | do_set_max_loans( $4[0] ) :) );
p_library.c | 257 | do_lost_damaged_fine( $4[0] ) :) );
p_library.c | 260 | do_mark( $4[0], 1) :) );
p_library.c | 263 | do_mark( $4[0], 0) :) );
p_library.c | 265 | add_command( "status", "<word'player'>", (: do_status($4[0]) :) );
p_library.c | 268 | do_report( $4[0], $4[1], $4[2] ) :) );
p_library.c | 292 | this_player();
p_library.c | 293 | this_object();
p_library.c | 295 | debug_printf( "Obs: %O\n", obs );
p_library.c | 298 | add_failed_mess("Only librians can do this.\n");
p_library.c | 302 | if( strlen(author) >
p_library.c | 303 | add_failed_mess("The author's name is too long. It has to be less than 13 characters.\n");
p_library.c | 307 | if( strlen(title) >
p_library.c | 308 | add_failed_mess("The title is too long. It can only use less than 27 characters.\n");
p_library.c | 312 | if( sizeof(obs) >
p_library.c | 313 | add_failed_mess("You can only add one item at a time.\n");
p_library.c | 318 | add_failed_mess( "The library does not lend items like $I.\n", obs);
p_library.c | 323 | add_failed_mess( "This library does not deal in magical works.\n" );
p_library.c | 328 | add_failed_mess( "This item belongs to a library and cannot be added.\n" );
p_library.c | 350 | add_book_to_library( id, 1 );
p_library.c | 352 | id_to_name(id)+ " to the library.\n" );
p_library.c | 353 | move( "/room/rubbish" );
p_library.c | 365 | add_book_to_library( base_name(obs[0]), 1, title, author, 1 );
p_library.c | 367 | add_book_to_library( obs[0], 1, title, author, 1 );
p_library.c | 369 | add_succeeded_mess( "$N $V an item to the library.\n" );
p_library.c | 370 | move( "/room/rubbish" );
p_library.c | 385 | sizeof(book->loaned));
p_library.c | 387 | clone_object( book->path );
p_library.c | 391 | move( this_object() );
p_library.c | 394 | lower_case(book->cap_title)] -= ({ id });
p_library.c | 395 | lower_case(book->cap_author)] -= ({ id });
p_library.c | 398 | map_delete( _catalog_by_title, lower_case(book->cap_title) );
p_library.c | 400 | map_delete( _catalog_by_author, lower_case(book->cap_author) );
p_library.c | 402 | map_delete( _catalog, id );
p_library.c | 403 | save_me();
p_library.c | 414 | add_failed_mess("Only librians can do this.\n");
p_library.c | 418 | to_int(id);
p_library.c | 420 | add_failed_mess("There is no item with that id.\n");
p_library.c | 441 | add_succeeded_mess("$N $V " +id_to_name(id) + " from the library.\n" );
p_library.c | 442 | remove_book(id);
p_library.c | 443 | tell_object( this_player(), "Any remaining copies will be placed on the floor.\n");
p_library.c | 457 | this_player()->query_name();
p_library.c | 458 | to_int(arg);
p_library.c | 461 | add_failed_mess("You do not have access to this library.\n");
p_library.c | 466 | evaluate( _borrow_func, this_player(), id );
p_library.c | 472 | add_failed_mess("You can't borrow a book whilst having outstanding fines.\n" );
p_library.c | 477 | add_failed_mess("There is no book with an id of " +id+ ".\n" );
p_library.c | 483 | if( _accounts[name] && sizeof(_accounts[name]->loans) >
p_library.c | 484 | add_failed_mess("You have already borrowed the maximum number of books.\n");
p_library.c | 490 | id_to_name(id) + " are out on loan.\n");
p_library.c | 498 | id_to_name(id) + ".\n");
p_library.c | 505 | clone_object( book->path );
p_library.c | 517 | add_property( TITLE_PROP, book->cap_title );
p_library.c | 518 | add_property( AUTHOR_PROP, book->cap_author );
p_library.c | 519 | add_property( FROM_LIBRARY_PROP, _library_name );
p_library.c | 520 | add_property( BORROWED_BY_PROP, name );
p_library.c | 521 | add_property( DUE_BACK_PROP, t );
p_library.c | 527 | new( class _loan, id : id, due_back : t );
p_library.c | 544 | move( this_object() );
p_library.c | 545 | reset_get();
p_library.c | 546 | add_property( "there", "sitting on a lecturn" );
p_library.c | 547 | add_property( REFERENCE_ONLY_PROP, 1 );
p_library.c | 551 | move( this_player() );
p_library.c | 553 | save_me();
p_library.c | 554 | add_succeeded_mess( "$N $V " +id_to_name(id)+ ".\n");
p_library.c | 566 | this_player()->query_name();
p_library.c | 572 | add_failed_mess( "You don't have any books out on loan.\n" );
p_library.c | 590 | map_delete( _catalog[id]->loaned, name );
p_library.c | 591 | move("/room/rubbish");
p_library.c | 598 | move("/room/rubbish");
p_library.c | 612 | clear_loan( this_player(), i, 1 );
p_library.c | 614 | tell_object(this_player(), "Note: You have fines that are due.\n");
p_library.c | 615 | add_succeeded_mess( "$N $V $I.\n", returned );
p_library.c | 621 | add_failed_mess( "$I " +bit+ " belong to this library.\n", not_ours );
p_library.c | 638 | add_failed_mess( "The ranges must be letters.\n");
p_library.c | 643 | tell_object( this_player(), make_pretty_catalog( arg, 0, 0, lower_case(specific) ) );
p_library.c | 646 | tell_object( this_player(), make_pretty_catalog( arg, from, to, 0 ) );
p_library.c | 657 | query_property( "place" );
p_library.c | 661 | this_player()->query_value_in( place );
p_library.c | 663 | this_player()->query_value_in( "default" );
p_library.c | 666 | add_failed_mess("You have money!.\n");
p_library.c | 672 | add_failed_mess("You have no outstanding fines to pay.\n");
p_library.c | 679 | this_player()->pay_money( MONEY_HAND->create_money_array(cash, place), place );
p_library.c | 684 | money_value_string( cash, place );
p_library.c | 685 | add_succeeded_mess("$N pay$s all $p fines ("+str+").\n");
p_library.c | 686 | map_delete( _fines, this_player()->query_name() );
p_library.c | 687 | save_me();
p_library.c | 690 | money_value_string( fine - cash, place );
p_library.c | 691 | add_succeeded_mess("$N pay$s some of $p fine, but sill owe$s ("+str+").\n");
p_library.c | 692 | save_me();
p_library.c | 705 | this_player()->query_name();
p_library.c | 707 | lower_case(player);
p_library.c | 711 | add_failed_mess("You do not have access to see other accounts.\n");
p_library.c | 719 | sprintf( "%|4s%|=30s%|=20s%|9s\n", "Id", "Item", "Due back", "Overdue" );
p_library.c | 721 | if( loan->due_back - time() >
p_library.c | 726 | id_to_name(loan->id), am_time( loan->due_back ), bit );
p_library.c | 733 | query_property( "place" );
p_library.c | 740 | money_value_string( fine, place ) );
p_library.c | 746 | money_value_string( _accounts[player]->total_fines_paid, place );
p_library.c | 751 | tell_object( this_player(), str );
p_library.c | 752 | add_succeeded_mess("");
p_library.c | 762 | to_int(id);
p_library.c | 765 | add_failed_mess("The id " +id+ ", does not point to an item.\n");
p_library.c | 772 | sprintf( "%|=14s%|=30s\n", "On loan to", "Date Due Back " );
p_library.c | 775 | query_cap_name(name), am_time(date) );
p_library.c | 791 | tell_object( this_player(), str);
p_library.c | 792 | add_succeeded_mess("$N look$s at the status of a library item.\n");
p_library.c | 800 | lower_case(player);
p_library.c | 803 | add_failed_mess( "You do not have permission to do this.\n");
p_library.c | 809 | set_access( player, USER_ACCESS );
p_library.c | 812 | save_me();
p_library.c | 819 | set_access( player, 0 );
p_library.c | 822 | save_me();
p_library.c | 832 | add_failed_mess("You do not have permission to do this.\n");
p_library.c | 837 | add_failed_mess("There is no item with that id.\n");
p_library.c | 842 | add_succeeded_mess("$N $V " + id_to_name(id) + " to reference only.\n");
p_library.c | 846 | add_succeeded_mess("$N $V " + id_to_name(id) + " to not reference only.\n");
p_library.c | 850 | save_me();
p_library.c | 857 | add_failed_mess("You do not have permission to do this.\n");
p_library.c | 861 | query_property( "place" );
p_library.c | 865 | to_int(i);
p_library.c | 868 | add_failed_mess("Don't be silly, thats a negative value!\n");
p_library.c | 874 | money_value_string( 4000, place ) + ").\n" );
p_library.c | 879 | money_value_string( i, place ) + ").\n" );
p_library.c | 881 | save_me();
p_library.c | 890 | add_failed_mess("You do not have permission to do this.\n");
p_library.c | 893 | to_int(days);
p_library.c | 896 | add_failed_mess("The maximum loan length is 10 days.\n");
p_library.c | 901 | add_failed_mess("The minimum loan length is 1 day.\n");
p_library.c | 907 | query_num(days) + str + ".\n" );
p_library.c | 909 | save_me();
p_library.c | 917 | add_failed_mess("You do not have permission to do this.\n");
p_library.c | 920 | to_int(i);
p_library.c | 923 | add_failed_mess("The minimum amount of loans is one.\n");
p_library.c | 928 | add_failed_mess("The maximum amount of loans a player can have is ten.\n");
p_library.c | 933 | query_num(i) + " items.\n" );
p_library.c | 935 | save_me();
p_library.c | 944 | add_failed_mess("You do not have permission to do this.\n");
p_library.c | 947 | to_int(i);
p_library.c | 948 | query_property( "place" );
p_library.c | 953 | add_failed_mess("Don't be silly, thats a negative value!\n");
p_library.c | 959 | money_value_string( 20000, place ) + ").\n" );
p_library.c | 964 | money_value_string( i, place ) + ").\n" );
p_library.c | 966 | save_me();
p_library.c | 977 | add_failed_mess("You can only report your damaged or lost books.\n");
p_library.c | 983 | lower_case(player);
p_library.c | 986 | this_player()->query_name();
p_library.c | 990 | add_failed_mess(str + " not have any items on loan.\n");
p_library.c | 995 | add_failed_mess("The id " + id + " does not exist.\n");
p_library.c | 1006 | add_failed_mess(str + " not have " + id_to_name(id) + " out on loan.\n");
p_library.c | 1011 | map_delete( _catalog[id]->loaned, player );
p_library.c | 1017 | query_cap_name(player);
p_library.c | 1025 | add_succeeded_mess("You report the loss of " + id_to_name(id) + str + ".\n");
p_library.c | 1027 | save_me();
p_library.c | 1031 | add_succeeded_mess("You report the damaging of " +id_to_name(id) + str + ".\n");
p_library.c | 1033 | save_me();
p_library.c | 1048 | lower_case(from);
p_library.c | 1053 | lower_case(to);
p_library.c | 1076 | sort_array( keys(_catalog_by_title), 0 );
p_library.c | 1085 | sizeof(_catalog[id]->loaned) );
p_library.c | 1099 | sort_array( keys(_catalog_by_author), 0 );
p_library.c | 1108 | sizeof(_catalog[id]->loaned) );
p_library.c | 1131 | query_name();
p_library.c | 1148 | save_me();
p_library.c | 1157 | sort_array( keys(_catalog), -1 );
p_library.c | 1162 | sizeof(ids);
p_library.c | 1182 | save_me();
p_library.c | 1185 | lower_case(new_book->cap_author)] += ({ id });
p_library.c | 1187 | lower_case(new_book->cap_author)] = ({ id });
p_library.c | 1190 | lower_case(new_book->cap_title)] += ({ id });
p_library.c | 1192 | lower_case(new_book->cap_title)] = ({ id });
p_library.c | 1226 | add_book_to_library( id, 1 );
p_library.c | 1231 | new( class _book );
p_library.c | 1240 | find_blank_id();
p_library.c | 1241 | add_book_to_catalogs( book, id );
p_library.c | 1246 | new( class _book );
p_library.c | 1247 | create_auto_load( ({ thing }) );
p_library.c | 1255 | find_blank_id();
p_library.c | 1256 | add_book_to_catalogs( book, id );
p_library.c | 1278 | clone_object( book->path );
p_library.c | 1311 | move( "/room/rubbish" );
p_library.c | 1330 | filter( keys(_access), (: _access[$1] == LIBRARIAN_ACCESS :) );
p_library.c | 1336 | if( sizeof(libs) >
p_library.c | 1337 | map( libs, (: PLAYER_HANDLER->query_cap_name($1) :) );
p_library.c | 1341 | query_property("place");
p_library.c | 1361 | unguarded( (: save_object, _save_file :) );
p_library.c | 1367 | call_out( "save_it", 2 );
p_library.c | 1374 | filter( all_inventory(), (: $1->query_property(REFERENCE_ONLY_PROP) :) ) );
p_library.c | 1391 | return ([ ]);
p_library.c | 1410 | return ([ ]);
p_library.c | 1480 | map_delete( _access, player );
p_library.c | 1484 | save_me();
p_library.c | 1490 | query_name();
p_library.c | 1493 | lower_case(player);
room_rental.c | 11 | query_exits();
room_rental.c | 15 | check_tenant( player_ob, room_ob );
room_rental.c | 50 | query_property( "costume" ) :) );
room_rental.c | 52 | move( "/room/rubbish", query_costume_mess( costume ) );
meeting.c | 11 | do_bang();
meeting.c | 12 | do_recover();
meeting.c | 13 | do_start();
meeting.c | 14 | do_finish();
meeting.c | 15 | create_floor();
meeting.c | 16 | add_property(string name, mixed data);
meeting.c | 20 | create_floor();
meeting.c | 21 | move(this_object());
meeting.c | 26 | add_command("bang", "gavel", (: do_bang() :));
meeting.c | 27 | add_command("recover", "floor", (: do_recover() :));
meeting.c | 28 | add_command("start", "meeting", (: do_start() :));
meeting.c | 29 | add_command("finish", "meeting", (: do_finish() :));
meeting.c | 39 | clone_object("/std/object");
meeting.c | 40 | set_name("floor");
meeting.c | 41 | set_short( "floor" );
meeting.c | 42 | add_property( "determinate", "the " );
meeting.c | 43 | add_property( "no burial", 1);
meeting.c | 64 | this_player()->query_name();
meeting.c | 65 | add_succeeded_mess("$N $V the meeting.\n");
meeting.c | 75 | add_failed_mess("Only the leader can bang the gavel!\n");
meeting.c | 79 | add_succeeded_mess("$N $V the gavel.\n\nSTOP STOP!\n\n");
meeting.c | 89 | add_failed_mess("Only the leader can recover the floor.\n");
meeting.c | 93 | move(this_player());
meeting.c | 94 | add_succeeded_mess("$N recovers the floor.\n");
meeting.c | 104 | add_failed_mess("Only the leader can stop the meeting!\n");
meeting.c | 109 | add_succeeded_mess("$N $V the meeting.\n");
meeting.c | 125 | deep_inventory(ob);
meeting.c | 127 | move(this_object());
meeting.c | 131 | tell_object(ob, "The floor zips out of your hands.\n");
meeting.c | 146 | deep_inventory(ob);
meeting.c | 148 | move(this_object());
meeting.c | 152 | tell_object(ob, "The floor zips out of your hands.\n");
meeting.c | 167 | deep_inventory(ob);
meeting.c | 169 | move(this_object());
meeting.c | 173 | tell_object(ob, "The floor zips out of your hands.\n");
newspaper_office.c | 71 | show_article(class our_article art, int source);
newspaper_office.c | 72 | query_all_reporters();
newspaper_office.c | 73 | query_all_setters();
newspaper_office.c | 74 | query_all_editors();
newspaper_office.c | 75 | query_all_sponsors();
newspaper_office.c | 76 | query_all_payees();
newspaper_office.c | 77 | is_reporter(string word);
newspaper_office.c | 78 | is_setter(string word);
newspaper_office.c | 79 | is_editor(string word);
newspaper_office.c | 80 | is_sponsor(string word);
newspaper_office.c | 81 | add_reporter(string word);
newspaper_office.c | 82 | add_setter(string word);
newspaper_office.c | 83 | add_editor(string word);
newspaper_office.c | 84 | add_sponsor(string word);
newspaper_office.c | 85 | remove_reporter(string word);
newspaper_office.c | 86 | remove_setter(string word);
newspaper_office.c | 87 | remove_editor(string word);
newspaper_office.c | 88 | remove_sponsor(string word);
newspaper_office.c | 89 | update_commands(string word);
newspaper_office.c | 90 | query_log_file_name();
newspaper_office.c | 91 | query_article_log_file_name();
newspaper_office.c | 92 | query_current_edition();
newspaper_office.c | 93 | query_paper_name();
newspaper_office.c | 94 | query_next_article_file_name();
newspaper_office.c | 95 | query_bank_branch();
newspaper_office.c | 96 | query_property(string);
newspaper_office.c | 97 | query_owner();
newspaper_office.c | 98 | is_owner(string word);
newspaper_office.c | 119 | unguarded( (: save_object(_save_dir + "main") :) );
newspaper_office.c | 131 | printf("%O %O\n", _save_dir, _proxy);
newspaper_office.c | 133 | unguarded( (: restore_object(_save_dir + "main", 1) :) );
newspaper_office.c | 134 | printf("%O %O\n", _save_dir, _proxy);
newspaper_office.c | 147 | sizeof(_articles);
newspaper_office.c | 149 | new(class article);
newspaper_office.c | 181 | load_me();
newspaper_office.c | 193 | write_file(_save_dir + $(art->art->file_name), save_variable(({ $(art), $(text) })), 1) :) );
newspaper_office.c | 194 | unguarded( (: rm(_save_dir + $(art->art->file_name) + ".proc" ) :) );
newspaper_office.c | 195 | unguarded( (: rm(_save_dir + $(art->art->file_name) + ".nroff.o" ) :) );
newspaper_office.c | 204 | strlen(text);
newspaper_office.c | 224 | unguarded( (: read_file(_save_dir + $(art->art->file_name)) :) );
newspaper_office.c | 226 | restore_variable(str);
newspaper_office.c | 238 | sizeof(_articles);
newspaper_office.c | 240 | load_article_text(_articles[i]);
newspaper_office.c | 252 | sizeof(_articles);
newspaper_office.c | 254 | strlen(text);
newspaper_office.c | 255 | update_article_info(_articles[i], text);
newspaper_office.c | 256 | save_article_text(_articles[i], text);
newspaper_office.c | 268 | sizeof(_articles);
newspaper_office.c | 271 | save_me();
newspaper_office.c | 283 | unguarded( (: rm(_save_dir + $(article->art->file_name)) :) );
newspaper_office.c | 284 | unguarded( (: rm(_save_dir + $(article->art->file_name) + ".proc" ) :) );
newspaper_office.c | 285 | unguarded( (: rm(_save_dir + $(article->art->file_name) + ".nroff.o" ) :) );
newspaper_office.c | 295 | lower_case(match);
newspaper_office.c | 297 | sscanf(match, "%d", index);
newspaper_office.c | 325 | query_article_index(match);
newspaper_office.c | 340 | lower_case(category);
newspaper_office.c | 372 | query_current_edition_num(query_paper_name());
newspaper_office.c | 440 | do_apply();
newspaper_office.c | 448 | this_player()->do_edit(0, "mail_application");
newspaper_office.c | 449 | add_succeeded_mess(({ "", "$N start$s writing an application.\n" }));
newspaper_office.c | 460 | tell_object(this_player(), "You decide not to apply just yet.\n");
newspaper_office.c | 473 | query_paper_name() + " application", "", text, 0, 0);
newspaper_office.c | 476 | query_the_paper_name() + ".\n");
newspaper_office.c | 477 | tell_object(this_player(), "Your application has been submitted.  Thanks!\n");
newspaper_office.c | 480 | query_the_paper_name() + ".\n", this_player());
newspaper_office.c | 488 | tell_object(this_player(), "The article must have a name!\n");
newspaper_office.c | 491 | this_player());
newspaper_office.c | 501 | this_player()->do_edit(0, "write_it", this_object(), 0, ({ str, author, html }));
newspaper_office.c | 509 | do_submit(str, author, html);
newspaper_office.c | 524 | this_player()->query_cap_name();
newspaper_office.c | 526 | add_succeeded_mess(({ "", "$N start$s writing an article.\n" }));
newspaper_office.c | 527 | part_two(str, author, html);
newspaper_office.c | 547 | tell_object(this_player(), "You decide not to submit your story after all.\n");
newspaper_office.c | 549 | this_player());
newspaper_office.c | 552 | this_player()->query_cap_name();
newspaper_office.c | 554 | new(class our_article);
newspaper_office.c | 555 | new(class article);
newspaper_office.c | 558 | query_next_article_file_name();
newspaper_office.c | 560 | time();
newspaper_office.c | 566 | update_article_info(cur_art, article);
newspaper_office.c | 571 | save_article_text(cur_art, article);
newspaper_office.c | 572 | save_me();
newspaper_office.c | 578 | tell_object(this_player(), "Article submitted!\n");
newspaper_office.c | 581 | this_player());
newspaper_office.c | 590 | do_retrieve(edn, source);
newspaper_office.c | 592 | add_succeeded_mess("");
newspaper_office.c | 598 | query_article(edn);
newspaper_office.c | 607 | add_failed_mess("You can only read your own articles.\n");
newspaper_office.c | 610 | show_article(article, source);
newspaper_office.c | 626 | sizeof(_articles);
newspaper_office.c | 632 | sizeof(_articles);
newspaper_office.c | 641 | unique_array(_adverts, (: $1->category :));
newspaper_office.c | 659 | restore_variable(text);
newspaper_office.c | 660 | convert_html(bits[1]);
newspaper_office.c | 678 | load_article_text(article);
newspaper_office.c | 692 | do_logs(article_log);
newspaper_office.c | 695 | read_file(query_article_log_file_name());
newspaper_office.c | 697 | read_file(query_log_file_name());
newspaper_office.c | 700 | add_failed_mess("There don't appear to be any logs.\n");
newspaper_office.c | 703 | this_player()->more_string("The log contains:\n" + logfile + "\n");
newspaper_office.c | 704 | add_succeeded_mess("");
newspaper_office.c | 717 | do_articles(scroll);
newspaper_office.c | 720 | is_editor(this_player()->query_name());
newspaper_office.c | 740 | a_flags(article->art->type) & NEWSPAPER_ARTICLE_NO_XP_FLAG?" (no xp)":"") );
newspaper_office.c | 748 | sprintf("$I$5=Page %2d) Adverts\n", pos);
newspaper_office.c | 760 | write("$P$Articles$P$" + str);
newspaper_office.c | 762 | write(str);
newspaper_office.c | 775 | do_resign();
newspaper_office.c | 777 | this_player()->query_name();
newspaper_office.c | 778 | remove_reporter(person);
newspaper_office.c | 780 | remove_editor(person);
newspaper_office.c | 783 | remove_setter(person);
newspaper_office.c | 787 | query_the_paper_name() + ".\n");
newspaper_office.c | 789 | this_player());
newspaper_office.c | 792 | dest_me();
newspaper_office.c | 799 | query_the_paper_name() + ".\n" }));
newspaper_office.c | 810 | do_delete(str);
newspaper_office.c | 812 | query_article(str);
newspaper_office.c | 814 | add_failed_mess("There is no article referenced by " + str + ".\n");
newspaper_office.c | 820 | add_failed_mess("You cannot delete this article.\n");
newspaper_office.c | 824 | delete_article(article);
newspaper_office.c | 825 | sizeof(_articles);
newspaper_office.c | 830 | save_me();
newspaper_office.c | 848 | do_hire(person, setter);
newspaper_office.c | 850 | lower_case(person);
newspaper_office.c | 854 | query_the_paper_name() + "!\n");
newspaper_office.c | 861 | query_the_paper_name() + "!\n");
newspaper_office.c | 867 | add_failed_mess("There is nobody called " + capitalize(person) + "!\n");
newspaper_office.c | 870 | find_player(person);
newspaper_office.c | 875 | query_the_paper_name() + ".\n");
newspaper_office.c | 878 | add_setter(person);
newspaper_office.c | 880 | add_reporter(person);
newspaper_office.c | 884 | capitalize(person) + " as a " + bing + ".\n");
newspaper_office.c | 887 | query_the_paper_name() + " as a " + bing + ".\n");
newspaper_office.c | 897 | do_dismiss(person);
newspaper_office.c | 901 | query_the_paper_name() + "!\n");
newspaper_office.c | 904 | remove_reporter(person);
newspaper_office.c | 905 | remove_editor(person);
newspaper_office.c | 906 | remove_setter(person);
newspaper_office.c | 907 | find_player(person);
newspaper_office.c | 915 | capitalize(person) + ".\n");
newspaper_office.c | 918 | query_the_paper_name() + ".\n");
newspaper_office.c | 926 | do_sponsor_add(person);
newspaper_office.c | 928 | lower_case(person);
newspaper_office.c | 931 | query_the_paper_name() + "!\n");
newspaper_office.c | 936 | add_failed_mess("I am sorry, but " + person + " does not exist.\n");
newspaper_office.c | 940 | add_sponsor(person);
newspaper_office.c | 942 | query_the_paper_name() + ".\n");
newspaper_office.c | 950 | do_sponsor_remove(person);
newspaper_office.c | 952 | lower_case(person);
newspaper_office.c | 955 | query_the_paper_name() + "!\n");
newspaper_office.c | 959 | remove_sponsor(person);
newspaper_office.c | 962 | query_the_paper_name() + " anymore.\n");
newspaper_office.c | 972 | do_promote(person);
newspaper_office.c | 974 | lower_case(person);
newspaper_office.c | 977 | query_the_paper_name() + "!\n");
newspaper_office.c | 981 | add_failed_mess(capitalize(person) + " is already an editor!\n");
newspaper_office.c | 984 | add_editor(person);
newspaper_office.c | 985 | find_player(person);
newspaper_office.c | 989 | this_player()->the_short() + "!\n");
newspaper_office.c | 996 | query_the_paper_name() + ".\n");
newspaper_office.c | 1006 | do_demote(person, editor);
newspaper_office.c | 1008 | lower_case(person);
newspaper_office.c | 1013 | query_the_paper_name() + "!\n");
newspaper_office.c | 1016 | remove_editor(person);
newspaper_office.c | 1021 | query_the_paper_name() + "!\n");
newspaper_office.c | 1024 | remove_setter(person);
newspaper_office.c | 1026 | add_reporter(person);
newspaper_office.c | 1027 | find_player(person);
newspaper_office.c | 1031 | query_the_paper_name() + "!\n");
newspaper_office.c | 1038 | query_the_paper_name() + ".\n");
newspaper_office.c | 1049 | do_everyone_status();
newspaper_office.c | 1067 | write("$P$Status$P$" + ret);
newspaper_office.c | 1079 | do_status();
newspaper_office.c | 1103 | query_last_edition_num(_paper_name);
newspaper_office.c | 1115 | write("$P$Status$P$" + ret);
newspaper_office.c | 1127 | do_claim();
newspaper_office.c | 1129 | deep_inventory(this_player()) + ({ this_player() });
newspaper_office.c | 1130 | filter(deepinv, (: $1->query_paper_name() == query_paper_name() :));
newspaper_office.c | 1137 | clone_object(NEWSPAPER_PRESS_CREDITIALS);
newspaper_office.c | 1138 | set_drop();
newspaper_office.c | 1139 | set_paper_name(query_paper_name());
newspaper_office.c | 1141 | move(this_object());
newspaper_office.c | 1146 | reset_drop();
newspaper_office.c | 1162 | do_publish(headline);
newspaper_office.c | 1164 | filter(_articles, (: !$1->flags & NEWSPAPER_POSTPONE_FLAG :));
newspaper_office.c | 1166 | add_failed_mess("You cannot publish with no articles!\n");
newspaper_office.c | 1171 | add_succeeded_mess("");
newspaper_office.c | 1172 | input_to("really_publish", 0, headline);
newspaper_office.c | 1192 | load_article_text(bing);
newspaper_office.c | 1193 | if (strlen(text) >
newspaper_office.c | 1204 | query_last_edition_num(_paper_name);
newspaper_office.c | 1205 | query_edition_date(_paper_name, edition);
newspaper_office.c | 1240 | query_property("place");
newspaper_office.c | 1241 | lower_case(char);
newspaper_office.c | 1248 | tell_object(this_player(), "Okay, publishing aborted.\n");
newspaper_office.c | 1256 | copy(bing->art) });
newspaper_office.c | 1257 | load_article_text(bing) });
newspaper_office.c | 1258 | if (strlen(text[<1]) >
newspaper_office.c | 1264 | query_total_profit(article_count);
newspaper_office.c | 1268 | sizeof(query_all_editors() - ({ query_owner() }));
newspaper_office.c | 1286 | tell_object(this_player(), "There was an error making the new issue!\n");
newspaper_office.c | 1296 | delete_article(bing);
newspaper_office.c | 1299 | filter(_articles, (: $1->flags & NEWSPAPER_POSTPONE_FLAG :));
newspaper_office.c | 1308 | if (sizeof(query_all_editors() - ({ query_owner() })) >
newspaper_office.c | 1324 | adjust_account(temp, query_bank_branch(), data->paid);
newspaper_office.c | 1355 | query_the_paper_name() + ".\n");
newspaper_office.c | 1356 | time();
newspaper_office.c | 1359 | query_current_edition() + ".log");
newspaper_office.c | 1360 | save_me();
newspaper_office.c | 1388 | do_summary();
newspaper_office.c | 1392 | query_last_edition_num(_paper_name);
newspaper_office.c | 1402 | query_property("place");
newspaper_office.c | 1405 | load_article_text(bing);
newspaper_office.c | 1406 | if (strlen(text) >
newspaper_office.c | 1422 | query_total_profit(article_count);
newspaper_office.c | 1426 | sizeof(query_all_editors() - ({ query_owner() }));
newspaper_office.c | 1460 | new(class payee_data);
newspaper_office.c | 1469 | write("$P$Profits$P$" + ret);
newspaper_office.c | 1479 | do_deposit(amt);
newspaper_office.c | 1483 | add_failed_mess("Only the owner can do this.\n");
newspaper_office.c | 1487 | query_property("place");
newspaper_office.c | 1488 | value_from_string(amt, place);
newspaper_office.c | 1490 | add_failed_mess("The amount " + amt + " is invalid.\n");
newspaper_office.c | 1499 | query_bank_branch() + ".\n");
newspaper_office.c | 1504 | save_me();
newspaper_office.c | 1505 | adjust_account(this_player()->query_name(), _bank_branch, -amt_int);
newspaper_office.c | 1520 | do_set_bank_branch(branch);
newspaper_office.c | 1522 | query_accounts(this_player()->query_name());
newspaper_office.c | 1531 | save_me();
newspaper_office.c | 1532 | add_succeeded_mess("$N set$s the bank branch to " + branch + ".\n");
newspaper_office.c | 1548 | do_pay(person, amt);
newspaper_office.c | 1550 | query_property("place");
newspaper_office.c | 1554 | value_from_string(amt, place);
newspaper_office.c | 1563 | query_the_paper_name() + "!\n");
newspaper_office.c | 1568 | add_failed_mess("The owner gets paid anyway.\n");
newspaper_office.c | 1572 | query_total_profit(-1);
newspaper_office.c | 1587 | new(class payee_data);
newspaper_office.c | 1594 | map_delete(_payees, person);
newspaper_office.c | 1595 | save_me();
newspaper_office.c | 1599 | add_succeeded_mess(({ "Ok, amount owing set to nothing.\n", "" }));
newspaper_office.c | 1600 | map_delete(_payees, person);
newspaper_office.c | 1601 | save_me();
newspaper_office.c | 1609 | save_me();
newspaper_office.c | 1618 | do_pay_tag(person, tag);
newspaper_office.c | 1626 | query_the_paper_name() + "!\n");
newspaper_office.c | 1631 | add_failed_mess("The owner gets paid anyway.\n");
newspaper_office.c | 1645 | capitalize(person) + ".\n", "" }));
newspaper_office.c | 1651 | save_me();
newspaper_office.c | 1661 | do_title(id, title);
newspaper_office.c | 1663 | query_article(id);
newspaper_office.c | 1665 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1671 | add_failed_mess("You can only edit your own articles.\n");
newspaper_office.c | 1676 | save_me();
newspaper_office.c | 1688 | do_author(id, author);
newspaper_office.c | 1690 | query_article(id);
newspaper_office.c | 1692 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1698 | add_failed_mess("You can only edit your own articles.\n");
newspaper_office.c | 1703 | save_me();
newspaper_office.c | 1715 | do_change(id, type);
newspaper_office.c | 1717 | query_article(id);
newspaper_office.c | 1719 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1725 | add_failed_mess("You can only edit your own articles.\n");
newspaper_office.c | 1730 | a_flags(art->art->type);
newspaper_office.c | 1732 | a_flags(art->art->type);
newspaper_office.c | 1734 | save_me();
newspaper_office.c | 1735 | unguarded( (: rm(_save_dir + $(art->art->file_name) + ".proc" ) :) );
newspaper_office.c | 1736 | unguarded( (: rm(_save_dir + $(art->art->file_name) + ".nroff.o" ) :) );
newspaper_office.c | 1748 | do_change_xp(id, type);
newspaper_office.c | 1750 | query_article(id);
newspaper_office.c | 1752 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1756 | add_failed_mess("Only the editors can do this.\n");
newspaper_office.c | 1765 | save_me();
newspaper_office.c | 1777 | do_change_colour(id, colour);
newspaper_office.c | 1779 | query_article(id);
newspaper_office.c | 1781 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1787 | add_failed_mess("You can only edit your own articles.\n");
newspaper_office.c | 1792 | upper_case(colour);
newspaper_office.c | 1796 | save_me();
newspaper_office.c | 1809 | do_editing(id);
newspaper_office.c | 1816 | query_article(id);
newspaper_office.c | 1818 | add_failed_mess("The article you wish to edit doesn't exist!\n");
newspaper_office.c | 1823 | add_failed_mess("You can only edit your own articles.\n");
newspaper_office.c | 1828 | add_failed_mess("This article is locked.\n");
newspaper_office.c | 1832 | load_article_text(art);
newspaper_office.c | 1833 | add_succeeded_mess("");
newspaper_office.c | 1834 | this_player()->do_edit(contents, "finish_editing", this_object(), 0, art);
newspaper_office.c | 1856 | save_me();
newspaper_office.c | 1865 | save_me();
newspaper_office.c | 1879 | do_move(article, up_down);
newspaper_office.c | 1881 | query_article_index(article);
newspaper_office.c | 1883 | add_failed_mess("Article reference " + index + " is out of bounds.\n");
newspaper_office.c | 1889 | add_failed_mess("Unable to move the article.\n");
newspaper_office.c | 1905 | do_move_pos(article, pos);
newspaper_office.c | 1907 | query_article_index(article);
newspaper_office.c | 1909 | add_failed_mess("Article reference " + index + " is out of bounds.\n");
newspaper_office.c | 1912 | query_article_index(pos);
newspaper_office.c | 1914 | add_failed_mess("Article reference " + pos + " is out of bounds.\n");
newspaper_office.c | 1934 | save_me();
newspaper_office.c | 1946 | do_postpone(id, on_off);
newspaper_office.c | 1948 | query_article(id);
newspaper_office.c | 1950 | add_failed_mess("The article reference " + id + " does not exist.\n");
newspaper_office.c | 1965 | save_me();
newspaper_office.c | 1974 | do_lock_article(id, on_off);
newspaper_office.c | 1976 | query_article(id);
newspaper_office.c | 1978 | add_failed_mess("The article reference " + id + " does not exist.\n");
newspaper_office.c | 1993 | save_me();
newspaper_office.c | 2005 | do_category_list();
newspaper_office.c | 2008 | add_failed_mess("There are no categories.\n");
newspaper_office.c | 2013 | query_property("place");
newspaper_office.c | 2017 | money_value_string(data->cost_per_add, place);
newspaper_office.c | 2035 | write("$P$Category$P$" + ret);
newspaper_office.c | 2049 | do_advert_list();
newspaper_office.c | 2052 | add_failed_mess("There are no adverts.\n");
newspaper_office.c | 2057 | query_property("place");
newspaper_office.c | 2058 | is_editor(this_player()->query_name());
newspaper_office.c | 2077 | add_failed_mess("There are no adverts.\n");
newspaper_office.c | 2080 | write("$P$Category$P$" + ret);
newspaper_office.c | 2089 | do_advert_remove(id);
newspaper_office.c | 2092 | add_failed_mess("There are no adverts.\n");
newspaper_office.c | 2097 | add_failed_mess("You must be an editor to remove adverts.\n");
newspaper_office.c | 2102 | add_failed_mess("The id " + id + " is invalid.\n");
newspaper_office.c | 2108 | add_succeeded_mess("$N remove$s an advert by " + fluff->author + ".\n");
newspaper_office.c | 2115 | do_category_remove(category);
newspaper_office.c | 2117 | query_category(category);
newspaper_office.c | 2119 | add_failed_mess("You must have a category to delete it.\n");
newspaper_office.c | 2129 | map_delete(_category, category);
newspaper_office.c | 2130 | save_me();
newspaper_office.c | 2141 | do_category_add(category);
newspaper_office.c | 2143 | query_category(category);
newspaper_office.c | 2145 | add_failed_mess("You must have a category to delete it.\n");
newspaper_office.c | 2153 | save_me();
newspaper_office.c | 2162 | do_category_open(category, open);
newspaper_office.c | 2164 | query_category(category);
newspaper_office.c | 2166 | add_failed_mess("You must have a category to delete it.\n");
newspaper_office.c | 2171 | save_me();
newspaper_office.c | 2183 | do_category_cost(category, cost);
newspaper_office.c | 2185 | query_category(category);
newspaper_office.c | 2187 | add_failed_mess("You must change a cost for a category.\n");
newspaper_office.c | 2191 | query_property("place");
newspaper_office.c | 2195 | value_from_string(cost, place);
newspaper_office.c | 2204 | save_me();
newspaper_office.c | 2219 | do_category_cost_per_ten_chars(category, cost);
newspaper_office.c | 2221 | query_category(category);
newspaper_office.c | 2223 | add_failed_mess("You must change a cost for a category.\n");
newspaper_office.c | 2227 | query_property("place");
newspaper_office.c | 2231 | value_from_string(cost, place);
newspaper_office.c | 2240 | save_me();
newspaper_office.c | 2254 | do_submit_section(name);
newspaper_office.c | 2257 | add_failed_mess("The newspaper office is currently locked.\n");
newspaper_office.c | 2260 | new(class our_article);
newspaper_office.c | 2261 | new(class article);
newspaper_office.c | 2263 | this_player()->query_name();
newspaper_office.c | 2264 | this_player()->query_name();
newspaper_office.c | 2265 | time();
newspaper_office.c | 2269 | save_me();
newspaper_office.c | 2270 | add_succeeded_mess("$N $V a section.\n");
newspaper_office.c | 2277 | do_submit_add(category);
newspaper_office.c | 2280 | add_failed_mess("The newspaper office is currently locked.\n");
newspaper_office.c | 2284 | query_category(category);
newspaper_office.c | 2300 | write("Please submit the text of your add:\n");
newspaper_office.c | 2301 | this_player()->do_edit(0, "finish_add", this_object(), 0, category);
newspaper_office.c | 2310 | do_lock(locked);
newspaper_office.c | 2314 | add_succeeded_mess("$N lock$s " + this_object()->the_short() + ".\n");
newspaper_office.c | 2316 | add_succeeded_mess("$N unlock$s " + this_object()->the_short() + ".\n");
newspaper_office.c | 2327 | write("Ok, Aborted writing an add.\n");
newspaper_office.c | 2335 | input_to("confirm_add", 0, str, category, 0);
newspaper_office.c | 2337 | query_property("place");
newspaper_office.c | 2350 | input_to("confirm_add", 0, str, category, value);
newspaper_office.c | 2367 | write("Ok, aborting.\n");
newspaper_office.c | 2372 | query_property("place");
newspaper_office.c | 2384 | new(class advert);
newspaper_office.c | 2385 | this_player()->query_cap_name();
newspaper_office.c | 2389 | time();
newspaper_office.c | 2408 | save_me();
newspaper_office.c | 2409 | write("Ok, your advertisement is added.\n");
newspaper_office.c | 2416 | tell_object(this_player(), "Ok, no editing saved.\n");
newspaper_office.c | 2419 | save_article_text(art, story);
newspaper_office.c | 2432 | add_failed_mess("You must be the owner to transfer the ownership.\n");
newspaper_office.c | 2437 | add_failed_mess("You must be in the main office to transfer ownership.\n");
newspaper_office.c | 2442 | add_failed_mess("You must transfer ownership to someone that exists.\n");
newspaper_office.c | 2450 | query_property("place");
newspaper_office.c | 2451 | query_value(base_name(this_object()));
newspaper_office.c | 2465 | input_to("check_transfer", 0, new_owner, value);
newspaper_office.c | 2466 | add_succeeded_mess("");
newspaper_office.c | 2474 | lower_case(test);
newspaper_office.c | 2476 | write("Aborted.\n");
newspaper_office.c | 2481 | query_property("place");
newspaper_office.c | 2492 | if (this_player()->query_value_in(place) >
newspaper_office.c | 2493 | this_player()->pay_money(MONEY_HAND->create_money_array(value, place), place);
newspaper_office.c | 2495 | adjust_account(this_player()->query_name(), query_bank_branch(), -value);
newspaper_office.c | 2498 | query_owner() + " to " + new_owner + ".\n");
newspaper_office.c | 2499 | set_owner(base_name(this_object()), new_owner);
newspaper_office.c | 2508 | keys(_reporters);
newspaper_office.c | 2517 | copy(_setters);
newspaper_office.c | 2526 | copy(_sponsors);
newspaper_office.c | 2535 | query_owner() });
newspaper_office.c | 2544 | copy(_payees);
newspaper_office.c | 2552 | map(_articles, (: copy($1->art) :) );
newspaper_office.c | 2598 | is_reporter(word);
newspaper_office.c | 2600 | classp(_reporters[word]);
newspaper_office.c | 2612 | is_setter(word);
newspaper_office.c | 2626 | is_sponsor(word);
newspaper_office.c | 2640 | is_editor(word);
newspaper_office.c | 2660 | is_owner(word);
newspaper_office.c | 2678 | new(class reporter);
newspaper_office.c | 2679 | time();
newspaper_office.c | 2680 | update_commands(word);
newspaper_office.c | 2681 | save_me();
newspaper_office.c | 2693 | update_commands(word);
newspaper_office.c | 2694 | save_me();
newspaper_office.c | 2706 | add_reporter(word);
newspaper_office.c | 2709 | update_commands(word);
newspaper_office.c | 2710 | save_me();
newspaper_office.c | 2722 | add_reporter(word);
newspaper_office.c | 2725 | update_commands(word);
newspaper_office.c | 2726 | save_me();
newspaper_office.c | 2739 | map_delete(_reporters, word);
newspaper_office.c | 2740 | update_commands(word);
newspaper_office.c | 2741 | save_me();
newspaper_office.c | 2754 | update_commands(word);
newspaper_office.c | 2755 | save_me();
newspaper_office.c | 2768 | update_commands(word);
newspaper_office.c | 2769 | save_me();
newspaper_office.c | 2782 | save_me();
newspaper_office.c | 2794 | find_player(word);
newspaper_office.c | 2796 | move("/room/void");
newspaper_office.c | 2797 | move(file_name(this_object()));
newspaper_office.c | 2807 | query_owner();
newspaper_office.c | 2818 | save_me();
newspaper_office.c | 2827 | set_owner(new_owner);
newspaper_office.c | 2857 | is_reporter(lower_case(name));
newspaper_office.c | 2859 | is_reporter(lower_case(name));
newspaper_office.c | 2863 | is_editor(name);
newspaper_office.c | 2871 | this_player()->query_name();
newspaper_office.c | 2872 | add_command("advert", "categories", (: do_category_list() :));
newspaper_office.c | 2873 | add_command("advert", "list", (: do_advert_list() :));
newspaper_office.c | 2874 | add_command("category", "list", (: do_category_list() :));
newspaper_office.c | 2876 | do_submit_add($4[1]) :));
newspaper_office.c | 2878 | do_submit_add($4[0]) :));
newspaper_office.c | 2880 | add_command("apply", "", (: do_apply() :));
newspaper_office.c | 2881 | add_command("status", "", (: do_everyone_status() :));
newspaper_office.c | 2885 | do_submit($4[0], $4[1], 0) :));
newspaper_office.c | 2887 | do_submit($4[0], $4[1], 1) :));
newspaper_office.c | 2889 | do_submit($4[0], 0, 0) :));
newspaper_office.c | 2891 | do_submit($4[0], 0, 1) :));
newspaper_office.c | 2892 | add_command("retrieve", "<string'article'>", (: do_retrieve($4[0], 0) :));
newspaper_office.c | 2894 | do_retrieve($4[0], 1) :));
newspaper_office.c | 2895 | add_command("resign", "", (: do_resign() :));
newspaper_office.c | 2896 | add_command("status", "", (: do_status() :));
newspaper_office.c | 2897 | add_command("status", "room", (: do_status() :));
newspaper_office.c | 2898 | add_command("claim", "", (: do_claim() :));
newspaper_office.c | 2899 | add_command("articles", "", (: do_articles(0) :));
newspaper_office.c | 2900 | add_command("articles", "scroll", (: do_articles(1) :));
newspaper_office.c | 2901 | add_command("edit", "<string'article'>", (: do_editing($4[0]) :));
newspaper_office.c | 2902 | add_command("delete", "<string'article'>", (: do_delete($4[0]) :));
newspaper_office.c | 2904 | do_title($4[0], $4[1]) :));
newspaper_office.c | 2906 | do_author($4[0], $4[1]) :));
newspaper_office.c | 2908 | do_change($4[0], $4[1]) :));
newspaper_office.c | 2913 | do_change_colour($4[0], $4[1]) :));
newspaper_office.c | 2915 | do_move($4[0], $4[1]) :));
newspaper_office.c | 2917 | do_move_pos($4[0], $4[1]) :));
newspaper_office.c | 2922 | do_change_xp($4[0], $4[1]) :));
newspaper_office.c | 2924 | do_submit_section($4[0]) :));
newspaper_office.c | 2925 | add_command("add", "reporter <string'person'>", (: do_hire($4[0], 0) :));
newspaper_office.c | 2926 | add_command("add", "setter <string'person'>", (: do_hire($4[0], 1) :));
newspaper_office.c | 2927 | add_command("add", "editor <string'person'>", (: do_promote($4[0]) :));
newspaper_office.c | 2928 | add_command("add", "sponsor <string'person'>", (: do_sponsor_add($4[0]) :));
newspaper_office.c | 2929 | add_command("promote", "<string'person'>", (: do_promote($4[0]) :));
newspaper_office.c | 2930 | add_command("remove", "editor <string'person'>", (: do_demote($4[0], 1) :));
newspaper_office.c | 2931 | add_command("remove", "setter <string'person'>", (: do_demote($4[0], 0) :));
newspaper_office.c | 2932 | add_command("remove", "reporter <string'person'>", (: do_dismiss($4[0]) :));
newspaper_office.c | 2933 | add_command("remove", "sponsor <string'person'>", (: do_sponsor_remove($4[0]) :));
newspaper_office.c | 2934 | add_command("log", "", (: do_logs(0) :));
newspaper_office.c | 2935 | add_command("log", "article", (: do_logs(1) :));
newspaper_office.c | 2936 | add_command("unmark", "<string'article'>", (: do_unmark($4[0]) :));
newspaper_office.c | 2938 | do_set_bank_branch($4[0]) :));
newspaper_office.c | 2940 | do_pay($4[0], $4[1]) :));
newspaper_office.c | 2942 | do_pay_tag($4[0], $4[1]) :));
newspaper_office.c | 2943 | add_command("profit", "", (: do_summary() :));
newspaper_office.c | 2945 | do_deposit($4[0]) :));
newspaper_office.c | 2947 | do_postpone($4[0], $4[1]) :));
newspaper_office.c | 2948 | add_command("lock", "articles {on|off}", (: do_lock($4[0] == "on") :));
newspaper_office.c | 2950 | do_lock_article($4[0], $4[1]) :));
newspaper_office.c | 2952 | do_publish($4[0]) :));
newspaper_office.c | 2954 | do_category_open($4[1], $4[0]) :));
newspaper_office.c | 2956 | do_category_add($4[0]) :));
newspaper_office.c | 2958 | do_category_remove($4[0]) :));
newspaper_office.c | 2960 | do_category_cost($4[0], $4[1]) :));
newspaper_office.c | 2962 | do_category_cost_per_ten_chars($4[0], $4[1]) :));
newspaper_office.c | 2963 | add_command("advert", "remove <number'id'>", (: do_advert_remove($4[0]) :));
newspaper_office.c | 2969 | do_transfer_ownership($4[0]) :));
complaints_room.c | 19 | add_command( "complain", "" );
complaints_room.c | 49 | this_player()->do_edit( 0, "finish_complaint", this_object() );
complaints_room.c | 59 | tell_object( this_player(), "Complaint aborted.\n" );
complaints_room.c | 83 | tell_creator("arienne",file_name(previous)+"\n");
complaints_room.c | 86 | return ( "/secure/master"->query_lord( name ) );
complaints_room.c | 90 | query_lord( name ) ) );
room_rental_office.c | 14 | do_rental( string room );
room_rental_office.c | 15 | add_room( string room, int cost );
room_rental_office.c | 16 | delete_room( string room );
room_rental_office.c | 17 | clear_rooms();
room_rental_office.c | 63 | set_location( "default" );
room_rental_office.c | 64 | set_domain( "default" );
room_rental_office.c | 68 | add_command( "list", "[rooms]" );
room_rental_office.c | 70 | do_rental( $4[0] ) :) );
room_rental_office.c | 73 | add_room( $4[0], $4[1] ) :) );
room_rental_office.c | 74 | add_command( "remove", "<string>", (: delete_room( $4[0] ) :) );
room_rental_office.c | 76 | add_command( "clear", "[list]", (: clear_rooms() :) );
room_rental_office.c | 90 | this_object();
room_rental_office.c | 93 | short(), office_ob );
room_rental_office.c | 95 | query_who_rents( room, office_ob );
room_rental_office.c | 97 | tell_creator( "goldenthread", "found %s\n", room );
room_rental_office.c | 100 | query_short();
room_rental_office.c | 129 | query_list();
room_rental_office.c | 131 | tell_object( this_player(), list );
room_rental_office.c | 190 | this_player();
room_rental_office.c | 191 | do_rental( ob, room, this_object() );
room_rental_office.c | 197 | query_domain() );
placement.c | 89 | get_pos_desc(int pos_int);
placement.c | 90 | do_place(object *obs, string, string, mixed *args, string);
placement.c | 91 | do_help(object *);
placement.c | 92 | get_pos_int(string str);
placement.c | 93 | extra_look(object);
placement.c | 94 | object_position_desc(object thing);
placement.c | 95 | object_desc(object thing);
placement.c | 96 | object_desc2(object thing);
placement.c | 97 | build_structure();
placement.c | 98 | find_opposite(int pos, object *structure);
placement.c | 99 | find_above(int pos, object *structure);
placement.c | 100 | find_below(int pos, object *structure);
placement.c | 101 | find_left(int pos, object *structure);
placement.c | 102 | find_right(int pos, object *structure);
placement.c | 103 | get_structure_index(object ob);
placement.c | 104 | is_beside_wall(int pos, int flag);
placement.c | 105 | is_in_corner(int pos, int flag);
placement.c | 125 | implode(ABOUT_PREPOSITIONS+HANGING_PREPOSITIONS+WALL_PREPOSITIONS+CORNER_PREPOSITIONS, "|")+"} the <string'location'> [wall|corner]");
placement.c | 131 | do_help(0) :));
placement.c | 134 | do_help($1[0]) :));
placement.c | 149 | get_pos_int(direction);
placement.c | 189 | get_pos_int(direction);
placement.c | 190 | query_wall_name_pos(pos);
placement.c | 199 | query_plural() == $(ob->query_plural()) :));
placement.c | 222 | query_plural() == $(ob->query_plural()) :));
placement.c | 241 | find_inv_match("all", ob);
placement.c | 242 | unique_array(things, (: $1->query_plural() :));
placement.c | 251 | query_multiple_short(things[0]);
placement.c | 267 | unique_array(obs, (: $1->query_plural() :));
placement.c | 276 | query_short();
placement.c | 279 | query_num(sizeof(group));
placement.c | 280 | query_more(group[0]);
placement.c | 281 | query_plural();
placement.c | 286 | query_multiple_short(strs);
placement.c | 296 | is_beside_wall(pos, 1);
placement.c | 312 | is_in_corner(pos, 1);
placement.c | 386 | filter(keys(ob->query_allowed_room_verbs()), (: $1 != "" :));
placement.c | 411 | write(str);
placement.c | 426 | debug_printf("Obs: %O, args: %O", obs, args);
placement.c | 436 | if(sizeof(obs) >
placement.c | 448 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) :));
placement.c | 452 | if(sizeof(placed) >
placement.c | 478 | replace_string(args[2], "ern ", " ");
placement.c | 491 | sizeof(args);
placement.c | 499 | query_allowed_room_verbs();
placement.c | 521 | keys(allowed_verbs);
placement.c | 523 | map(verb_keys, (: ("\"" + $1 + "\"") :));
placement.c | 541 | explode(args[2], " ");
placement.c | 554 | get_pos_int(args[3]);
placement.c | 569 | match_objects_in_environments(args[3], ({ this_object() }));
placement.c | 573 | add_failed_mess( match_objects_failed_mess( result ));
placement.c | 580 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 587 | the_short() }));
placement.c | 594 | if(sizeof(args) >
placement.c | 610 | the_short() + ".\n", ({ obs[0] }));
placement.c | 627 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) == -($(pos)) :));
placement.c | 628 | if(sizeof(already_around) >
placement.c | 658 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) == $(pos) :));
placement.c | 666 | get_pos_desc(pos) + ".\n", ({ already_there[0] }));
placement.c | 679 | map(preps, (: ("\"" + $1 + "\"") :));
placement.c | 693 | get_pos_desc(pos) + "." + extra + "\n", ({ obs[0] }));
placement.c | 705 | map(preps, (: ("\"" + $1 + "\"") :));
placement.c | 719 | get_pos_desc(pos) + "." + extra + "\n", ({ obs[0] }));
placement.c | 731 | map(preps, (: ("\"" + $1 + "\"") :));
placement.c | 744 | get_pos_desc(pos) + "." + extra + "\n", ({ obs[0] }));
placement.c | 758 | add_property(PLACEMENT_CURRENT_ROOM_VERB, args[1]);
placement.c | 759 | add_property(PLACEMENT_CURRENT_ROOM_OTHER, args[2]);
placement.c | 760 | add_property(PLACEMENT_CURRENT_ROOM_POSITION, pos);
placement.c | 764 | move(this_object());
placement.c | 771 | get_pos_desc(pos) + ".\n", ({ obs[0] }));
placement.c | 780 | the_short() + ".\n", ({ obs[0] }));
placement.c | 788 | get_pos_desc(pos) + ".\n", ({ obs[0] }));
placement.c | 791 | event(this_object(), "save", this_object());
placement.c | 802 | EXPAND_EXIT(dir);
placement.c | 930 | match_objects_for_existence(ob->query_plural(), ({ this_object() }));
placement.c | 932 | member_array(ob, obs);
placement.c | 937 | word_ordinal(index + 1);
placement.c | 943 | word_ordinal(index + 1);
placement.c | 959 | query_property(PLACEMENT_CURRENT_ROOM_VERB);
placement.c | 960 | query_property(PLACEMENT_CURRENT_ROOM_OTHER);
placement.c | 961 | get_pos_desc(thing->query_property(PLACEMENT_CURRENT_ROOM_POSITION));
placement.c | 1013 | query_property(PLACEMENT_CURRENT_ROOM_VERB);
placement.c | 1014 | query_allowed_room_verbs();
placement.c | 1023 | query_property(PLACEMENT_CURRENT_ROOM_OTHER);
placement.c | 1024 | get_pos_desc(thing->query_property(PLACEMENT_CURRENT_ROOM_POSITION));
placement.c | 1025 | a_short();
placement.c | 1042 | object_position_desc(thing) + " is " + thing->a_short();
placement.c | 1045 | object_position_desc(thing) + " is " + thing->a_short();
placement.c | 1062 | allocate(5);
placement.c | 1063 | find_opposite(index, structure);
placement.c | 1064 | find_above(index, structure);
placement.c | 1065 | find_below(index, structure);
placement.c | 1066 | find_right(index, structure);
placement.c | 1067 | find_left(index, structure);
placement.c | 1198 | query_property(PLACEMENT_CURRENT_ROOM_POSITION))) :));
placement.c | 1214 | query_wall_name_pos(pos);
placement.c | 1249 | find_relative_indexes(i, structure);
placement.c | 1252 | choose_relative(relatives, structure);
placement.c | 1259 | get_around(structure[i]);
placement.c | 1267 | desc_around_with(structure[i], around);
placement.c | 1302 | clutter_string(structure[i]);
placement.c | 1319 | desc_around_without(around, structure, i);
placement.c | 1326 | get_around(rel_ob);
placement.c | 1331 | desc_around_without(around, structure, relatives[rel_num]);
placement.c | 1346 | query_property(PLACEMENT_CURRENT_ROOM_POSITION));
placement.c | 1347 | query_property(PLACEMENT_CURRENT_ROOM_POSITION));
placement.c | 1371 | this_object() })));
placement.c | 1373 | this_object() })));
placement.c | 1400 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) :));
placement.c | 1404 | sort_array(orphans, (: room_order($1, $2, $(structure)) :));
placement.c | 1409 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1412 | desc_around_without(group, structure, pos);
placement.c | 1427 | map(obs, (: $1->query_property(PLACEMENT_CURRENT_ROOM_VERB) :));
placement.c | 1428 | unique_array(verbs, (: $1 :));
placement.c | 1441 | map(obs, (: $1->query_property(PLACEMENT_CURRENT_ROOM_OTHER) :));
placement.c | 1442 | unique_array(others, (: $1 :));
placement.c | 1465 | sizeof(indexes);
placement.c | 1468 | unique_array(things, (: $1->query_plural() :));
placement.c | 1469 | filter(things, (: sizeof($1) > 1 :) );
placement.c | 1471 | if(sizeof(things) >
placement.c | 1473 | sizeof(things);
placement.c | 1485 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) :));
placement.c | 1487 | debug_printf("rel_nums: %O", rel_nums);
placement.c | 1500 | debug_printf("4 corner: %s\n", desc);
placement.c | 1530 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) :));
placement.c | 1531 | sort_array(rel_nums, 1);
placement.c | 1560 | query_multiple_short(things[i]);
placement.c | 1581 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1586 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1595 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1600 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1614 | debug_printf("2 items: %s\n", desc);
placement.c | 1618 | if(sizeof(things[i]) >
placement.c | 1627 | sizeof(things[i]);
placement.c | 1631 | object_position_desc(things[i][j]) });
placement.c | 1634 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) });
placement.c | 1642 | query_multiple_short(strs), desc);
placement.c | 1662 | build_structure();
placement.c | 1666 | sizeof(structure);
placement.c | 1675 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) :));
placement.c | 1679 | describe_plural_objects(indexes, structure);
placement.c | 1680 | desc_obs_relatively(indexes, structure);
placement.c | 1681 | describe_remaining_objects(structure);
placement.c | 1683 | debug_printf("1: %s\n2:%s\n3:%s\n",d1, d2, d3);
placement.c | 1689 | trim_trailing_spaces(desc);
placement.c | 1705 | this_object()->the_short();
placement.c | 1709 | wall_or_corner(pos_int);
placement.c | 1713 | wall_or_corner(pos_int);
placement.c | 1717 | wall_or_corner(pos_int);
placement.c | 1721 | wall_or_corner(pos_int);
placement.c | 1725 | wall_or_corner(pos_int);
placement.c | 1729 | wall_or_corner(pos_int);
placement.c | 1733 | wall_or_corner(pos_int);
placement.c | 1737 | wall_or_corner(pos_int);
placement.c | 1770 | allocate(20);
placement.c | 1771 | all_inventory(this_object());
placement.c | 1772 | sizeof(positions);
placement.c | 1775 | query_property(PLACEMENT_CURRENT_ROOM_POSITION) == $(i) :));
placement.c | 1792 | member_array(ob, build_structure());
placement.c | 1811 | build_structure();
placement.c | 1821 | get_pos_int(dir);
placement.c | 1826 | sizeof(structure);
placement.c | 1832 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1851 | get_around(structure[i]);
placement.c | 1860 | desc_obs_relatively(indexes, structure);
placement.c | 1869 | remove_property(PLACEMENT_CURRENT_ROOM_VERB);
placement.c | 1870 | remove_property(PLACEMENT_CURRENT_ROOM_OTHER);
placement.c | 1871 | remove_property(PLACEMENT_CURRENT_ROOM_POSITION);
placement.c | 1887 | if(sizeof(obs) >
placement.c | 1897 | the_short() + " is not placed.\n", ({ }));
placement.c | 1908 | displace_object(obs[0]);
placement.c | 1910 | a_short() + " out of position.\n", ({ }));
placement.c | 1923 | displace_object(ob);
placement.c | 1933 | removed();
club_control_room.c | 20 | do_create(string name);
club_control_room.c | 21 | do_create_family(string name);
club_control_room.c | 22 | do_replace(string name);
club_control_room.c | 23 | do_vote(string name, string position, string club);
club_control_room.c | 24 | do_nominate(string name, string position, string club);
club_control_room.c | 25 | do_balance(string name);
club_control_room.c | 26 | do_deposit(string mon, string name, string account, string reason);
club_control_room.c | 27 | do_change(string name, string type);
club_control_room.c | 28 | do_change_option(string name, string type);
club_control_room.c | 29 | do_disband(string name);
club_control_room.c | 30 | do_insignia(string number, int num);
club_control_room.c | 31 | do_recruiter_add(string name, string recruit);
club_control_room.c | 32 | do_recruiter_remove(string name, string recruit);
club_control_room.c | 33 | do_financials(string name, string account);
club_control_room.c | 34 | do_describe(string name);
club_control_room.c | 35 | do_club_list_member(string name);
club_control_room.c | 36 | do_withdrawl(string money, string club, string account, string reason);
club_control_room.c | 39 | do_force_election(string name);
club_control_room.c | 40 | finish_description(string describe, string name);
club_control_room.c | 41 | do_announcement(string name);
club_control_room.c | 42 | check_member_func(string club, string person, string mem);
club_control_room.c | 45 | query_property(string name);
club_control_room.c | 46 | add_help_file(string name);
club_control_room.c | 66 | add_help_file("club_control_room");
club_control_room.c | 69 | do_create($4[0]) :));
club_control_room.c | 71 | club_list(this_player()->query_name(), 0, 0) :) );
club_control_room.c | 73 | do_club_list_member($4[0]) :));
club_control_room.c | 75 | club_info($4[0], 1, this_player()->query_name()) :) );
club_control_room.c | 78 | do_vote($4[0], $4[1], $4[2]) :));
club_control_room.c | 81 | do_nominate($4[0], $4[1], $4[2]) :));
club_control_room.c | 82 | add_command("disband", "<string'club name'>", (: do_disband($4[0]) :));
club_control_room.c | 84 | do_change($4[0], "elected") :) );
club_control_room.c | 86 | do_change_option($4[0], $4[1]) :) );
club_control_room.c | 88 | do_insignia($4[1], $4[0]) :));
club_control_room.c | 90 | do_insignia($4[0], 1) :));
club_control_room.c | 92 | do_recruiter_add($4[1], $4[0]) :));
club_control_room.c | 94 | do_recruiter_remove($4[1], $4[0]) :));
club_control_room.c | 96 | do_financials($4[0], CLUB_DEFAULT_ACCOUNT_NAME) :));
club_control_room.c | 98 | do_financials($4[0], $4[1]) :));
club_control_room.c | 100 | do_describe($4[0]) :));
club_control_room.c | 102 | do_announcement($4[0]) :));
club_control_room.c | 104 | do_withdrawl($4[0], $4[1], CLUB_DEFAULT_ACCOUNT_NAME, $4[2]) :));
club_control_room.c | 106 | do_withdrawl($4[0], $4[1], CLUB_DEFAULT_ACCOUNT_NAME, $4[2]) :));
club_control_room.c | 108 | do_withdrawl($4[0], $4[1], $4[2], $4[3]) :));
club_control_room.c | 110 | do_withdrawl($4[0], $4[1], $4[2], $4[3]) :));
club_control_room.c | 112 | do_transfer($4[0], $4[1], $4[2], $4[3], $4[4]) :));
club_control_room.c | 114 | do_transfer($4[0], $4[1], $4[2], $4[3], $4[4]) :));
club_control_room.c | 116 | do_force_election($4[0]) :));
club_control_room.c | 117 | init();
club_control_room.c | 121 | add_help_file("family_control_room");
club_control_room.c | 128 | do_create_family($4[0]) :));
club_control_room.c | 130 | club_list(this_player()->query_name(), 1, 0) :) );
club_control_room.c | 132 | family_info($4[0], this_player()->query_name()) :) );
club_control_room.c | 135 | do_describe($4[0]) :));
club_control_room.c | 137 | do_balance($4[0]) :));
club_control_room.c | 139 | do_deposit($4[0], $4[1], CLUB_DEFAULT_ACCOUNT_NAME, 0) :));
club_control_room.c | 141 | do_deposit($4[0], $4[1], CLUB_DEFAULT_ACCOUNT_NAME, $4[2]) :));
club_control_room.c | 143 | do_deposit($4[0], $4[1], $4[2], 0) :));
club_control_room.c | 145 | do_deposit($4[0], $4[1], $4[2], $4[3]) :));
club_control_room.c | 151 | if (strlen(name) >
club_control_room.c | 155 | strlen(name);
club_control_room.c | 174 | set_club_control_type(CLUB_ROOM_CLUB_ONLY);
club_control_room.c | 230 | query_property("place");
club_control_room.c | 246 | input_to("confirm_create", 0, name);
club_control_room.c | 259 | query_property("place");
club_control_room.c | 263 | lower_case(str);
club_control_room.c | 270 | input_to("confirm_create", 0, name);
club_control_room.c | 275 | write("Aborted.\n");
club_control_room.c | 295 | write("Created the club called '" + name + "'.\n");
club_control_room.c | 297 | clone_object(CLUB_BADGE);
club_control_room.c | 298 | set_club(name);
club_control_room.c | 308 | move(environment(this_player()));
club_control_room.c | 309 | set_worn_by(this_player());
club_control_room.c | 332 | add_failed_mess("The family name '" + name + "' is invalid.\n");
club_control_room.c | 338 | add_failed_mess("invalid.\n");
club_control_room.c | 345 | if (strlen(name) >
club_control_room.c | 347 | add_failed_mess("too long!\n");
club_control_room.c | 368 | write("exist\n");
club_control_room.c | 378 | query_property("place");
club_control_room.c | 393 | input_to("confirm_create_family", 0, name);
club_control_room.c | 405 | query_property("place");
club_control_room.c | 409 | lower_case(str);
club_control_room.c | 416 | input_to("confirm_create_family", 0, name);
club_control_room.c | 421 | write("Aborted.\n");
club_control_room.c | 443 | add_member(name, this_player()->query_name());
club_control_room.c | 448 | write("Created the family called '" + name + "'.\n");
club_control_room.c | 449 | this_player()->set_family_name(name);
club_control_room.c | 467 | this_player()->query_name();
club_control_room.c | 474 | lower_case(person);
club_control_room.c | 477 | this_player()->expand_nickname(person);
club_control_room.c | 480 | add_failed_mess("You can only nominate people in the club.\n");
club_control_room.c | 485 | add_failed_mess("This club is not having an election right now.\n");
club_control_room.c | 528 | query_club_name(club_name) + "'.\n");
club_control_room.c | 543 | query_club_name(club_name) + ".\n" }) );
club_control_room.c | 556 | query_club_name(club_name) + "'.\n");
club_control_room.c | 573 | this_player()->query_name();
club_control_room.c | 581 | this_player()->expand_nickname(person);
club_control_room.c | 584 | add_failed_mess("You can only vote for people in the club.\n");
club_control_room.c | 589 | add_failed_mess("This club is not having an election at the moment.\n");
club_control_room.c | 600 | add_failed_mess("This club is not accepting votes right now.\n");
club_control_room.c | 613 | query_nominated_for(club_name, position);
club_control_room.c | 628 | add_failed_mess("You can only vote for each position once.\n");
club_control_room.c | 641 | query_club_name(club_name) + ".\n" }));
club_control_room.c | 646 | query_club_name(club_name) + ".\n");
club_control_room.c | 677 | add_failed_mess("You must get a balance of an existing " + bit + ".\n");
club_control_room.c | 693 | query_property("place");
club_control_room.c | 698 | query_account_names(name);
club_control_room.c | 706 | query_balance(name, account);
club_control_room.c | 724 | query_club_name(name) + "'.\n" }));
club_control_room.c | 759 | add_failed_mess("You must deposit into an existing " + bit + ".\n");
club_control_room.c | 771 | add_failed_mess("Creators can only deposit to creator " + bit + "s.\n");
club_control_room.c | 783 | query_club_name(name) + "'\n");
club_control_room.c | 787 | if (strlen(reason) >
club_control_room.c | 788 | add_failed_mess("The reason must be less than 60 characters.\n");
club_control_room.c | 792 | query_property("place");
club_control_room.c | 797 | parse_money(mon, this_player(), place);
club_control_room.c | 801 | add_failed_mess("You do not have '" + mon + "'.\n");
club_control_room.c | 804 | add_failed_mess("You can only deposit money.\n");
club_control_room.c | 807 | add_failed_mess("You can only deposit legal tender.\n");
club_control_room.c | 812 | query_value_in(place);
club_control_room.c | 814 | query_value_in("default");
club_control_room.c | 823 | query_balance(name, account);
club_control_room.c | 824 | move("/room/rubbish");
club_control_room.c | 870 | add_failed_mess("You must withdraw from an existing " + bit + ".\n");
club_control_room.c | 888 | query_club_name(name) + "'\n");
club_control_room.c | 892 | if (strlen(reason) >
club_control_room.c | 893 | add_failed_mess("The reason must be less than 60 characters.\n");
club_control_room.c | 906 | query_account_allowed_positions(name, account);
club_control_room.c | 907 | query_multiple_short(stuff);
club_control_room.c | 908 | query_account_allowed_people(name, account);
club_control_room.c | 910 | query_multiple_short(stuff);
club_control_room.c | 913 | add_failed_mess(ret + " can withdraw from this account.\n");
club_control_room.c | 917 | query_property("place");
club_control_room.c | 922 | value_from_string(money, place);
club_control_room.c | 928 | make_new_amount(value, place);
club_control_room.c | 930 | add_failed_mess("Unable to create the money object.\n");
club_control_room.c | 940 | move(this_player());
club_control_room.c | 956 | dest_me();
club_control_room.c | 957 | add_failed_mess("Unable to remove the money from the account.\n");
club_control_room.c | 991 | add_failed_mess("You must transfer money in an existing " + bit + ".\n");
club_control_room.c | 1015 | query_club_name(name) + "'\n");
club_control_room.c | 1021 | query_club_name(name) + "'\n");
club_control_room.c | 1025 | if (strlen(reason) >
club_control_room.c | 1026 | add_failed_mess("The reason must be less than 60 characters.\n");
club_control_room.c | 1033 | query_account_allowed_positions(name, from_account);
club_control_room.c | 1034 | query_multiple_short(stuff);
club_control_room.c | 1035 | query_account_allowed_people(name, from_account);
club_control_room.c | 1037 | query_multiple_short(stuff);
club_control_room.c | 1040 | add_failed_mess(ret + " can withdraw from this account.\n");
club_control_room.c | 1044 | query_property("place");
club_control_room.c | 1049 | value_from_string(money, place);
club_control_room.c | 1084 | dest_me();
club_control_room.c | 1085 | add_failed_mess("Unable to remove the money from the account.\n");
club_control_room.c | 1094 | map(CLUB_HANDLER->query_members(club_name), (: find_player :));
club_control_room.c | 1097 | all_inventory(person)->event_club_change(this_player(), club_name);
club_control_room.c | 1112 | add_failed_mess("You must change a club that exists.\n");
club_control_room.c | 1136 | call_out((: do_change_inform :), 0, name);
club_control_room.c | 1138 | add_failed_mess("You are unable to change the club type.\n");
club_control_room.c | 1161 | add_failed_mess("You must change a club that exists.\n");
club_control_room.c | 1166 | add_failed_mess("You must change options through discussion items.\n");
club_control_room.c | 1187 | query_club_name(name) + "'.\n");
club_control_room.c | 1190 | add_failed_mess("Unable to change the club to a secret type.\n");
club_control_room.c | 1196 | query_club_name(name) + "'.\n");
club_control_room.c | 1199 | add_failed_mess("Unable to change the club to an open type.\n");
club_control_room.c | 1216 | add_failed_mess("You must disband a club that exists.\n");
club_control_room.c | 1221 | add_failed_mess("You cannot disband an elected club.\n");
club_control_room.c | 1232 | add_failed_mess("You must be the founder of the club to disband it.\n");
club_control_room.c | 1239 | input_to("disband_confirm", 0, name);
club_control_room.c | 1240 | add_succeeded_mess("");
club_control_room.c | 1255 | lower_case(str);
club_control_room.c | 1259 | write("Canceling disbanding of the club '" + name + "'.\n");
club_control_room.c | 1264 | write("The club appears to have been disbanded already.\n");
club_control_room.c | 1281 | write("You must be the founder of the club to disband it.\n");
club_control_room.c | 1285 | query_club_name(name);
club_control_room.c | 1286 | disband_club(name);
club_control_room.c | 1287 | write("You disband the club '" + club_name + "'.\n");
club_control_room.c | 1291 | write("You must answer yes or no.\n");
club_control_room.c | 1295 | input_to("disband_confirm", 0, name);
club_control_room.c | 1311 | add_failed_mess("You must create the insignia for a club that exists.\n");
club_control_room.c | 1316 | add_failed_mess("You cannot create insignia for a family.\n");
club_control_room.c | 1334 | add_failed_mess("You cannot ask for more than 20 insignia.\n");
club_control_room.c | 1338 | query_property("place");
club_control_room.c | 1347 | query_num(num) + " insignia.\n");
club_control_room.c | 1353 | clone_object(CLUB_HANDLER->query_insignia_path(name));
club_control_room.c | 1354 | set_cond(ob->query_max_cond());
club_control_room.c | 1355 | set_club(name);
club_control_room.c | 1361 | dest_me();
club_control_room.c | 1388 | add_failed_mess("You must remove a recruiter to a club that exists.\n");
club_control_room.c | 1394 | add_failed_mess("Only the founder can remove recruiters.\n");
club_control_room.c | 1405 | add_failed_mess("Unknown club type.\n");
club_control_room.c | 1410 | this_player()->expand_nickname($1) :));
club_control_room.c | 1412 | query_recruiters(name);
club_control_room.c | 1422 | remove_recruiter(name, one_name);
club_control_room.c | 1423 | lower_case(one_name);
club_control_room.c | 1440 | sizeof(all_names) >
club_control_room.c | 1456 | add_failed_mess("You must add a recruiter to a club that exists.\n");
club_control_room.c | 1462 | add_failed_mess("Only the founder can add recruiters.\n");
club_control_room.c | 1473 | add_failed_mess("Unknown club type.\n");
club_control_room.c | 1478 | this_player()->expand_nickname($1) :));
club_control_room.c | 1480 | query_members(name);
club_control_room.c | 1499 | add_recruiter(name, one_name);
club_control_room.c | 1500 | lower_case(one_name);
club_control_room.c | 1538 | add_failed_mess("The club '" + name + "' does not exist.\n");
club_control_room.c | 1556 | query_club_name(name) + "'\n");
club_control_room.c | 1560 | query_property("place");
club_control_room.c | 1575 | query_transactions(name, account);
club_control_room.c | 1576 | sizeof(transactions);
club_control_room.c | 1607 | write("$P$Club Financials$P$" + ret);
club_control_room.c | 1658 | add_failed_mess("Unknown club type.\n");
club_control_room.c | 1663 | query_club_name(name) + "' to?\n");
club_control_room.c | 1664 | this_player()->do_edit("", (: finish_description($1, $(name)) :));
club_control_room.c | 1665 | add_succeeded_mess("");
club_control_room.c | 1679 | write("Aborting setting the description.\n");
club_control_room.c | 1683 | set_club_description(name, describe);
club_control_room.c | 1687 | query_club_description(name) + "\n");
club_control_room.c | 1691 | query_club_description(name) + "\n");
club_control_room.c | 1727 | query_property("place");
club_control_room.c | 1812 | add_failed_mess(name + " does not play " + mud_name() + ".\n");
club_control_room.c | 1829 | write("Aborting.\n");
club_control_room.c | 1863 | write("What announcement do you wish to set?\n");
club_control_room.c | 1900 | if (CLUB_HANDLER->is_election_in_progress(name) >
club_control_room.c | 1906 | if (CLUB_HANDLER->query_minimum_next_election(name) >
club_control_room.c | 1915 | add_failed_mess("Could not start the election for some reason.\n");
club_control_room.c | 1920 | query_club_name(name) + ".\n");
guild.c | 14 | check_spells_commands(string *sk, int lvl);
guild.c | 15 | do_cost_primaries();
guild.c | 16 | do_cost_all(int brief);
guild.c | 17 | do_cost_to(string skill, int level);
guild.c | 18 | do_cost_by(string skill, int level);
guild.c | 19 | do_cost(string skill);
guild.c | 21 | do_advance(string skill);
guild.c | 22 | do_advance_to(string skill, int num);
guild.c | 23 | do_advance_by(string skill, int num);
guild.c | 31 | this_object()->add_help_file("guild");
guild.c | 38 | do_advance($4[0]) :));
guild.c | 41 | do_advance_to($4[0], $4[1]) :));
guild.c | 44 | do_advance_by($4[0], $4[1]) :));
guild.c | 45 | this_player()->add_command("join", this_object(), "");
guild.c | 46 | this_player()->add_command("info", this_object(), "");
guild.c | 48 | do_cost_primaries() :));
guild.c | 50 | do_cost_all(0) :));
guild.c | 52 | do_cost_all(1) :));
guild.c | 54 | do_cost($4[0]) :));
guild.c | 57 | do_cost_to($4[0], $4[1]) :));
guild.c | 59 | do_cost_by($4[0], $4[1]) :));
guild.c | 62 | this_player()->add_start(file_name(this_object()), start_pos);
guild.c | 97 | query_immediate_children(skill);
guild.c | 102 | query_skill_cost(skill);
guild.c | 112 | sizeof(next);
guild.c | 113 | query_skill_cost(next[i], offset);
guild.c | 136 | add_failed_mess("You cannot advance here!  Go to your own guild.\n");
guild.c | 139 | this_object()->query_property("place");
guild.c | 142 | explode(implode(explode(skill, " "), "."), ".");
guild.c | 144 | add_failed_mess("The skill " + skill + " does not exist.\n");
guild.c | 148 | query_inactive_skills();
guild.c | 149 | sizeof(bits);
guild.c | 154 | this_player()->query_skill(skill_name);
guild.c | 172 | skills (eg: other.movement.riding, or other).\n");
guild.c | 176 | explode(skill_name, ".");
guild.c | 177 | if (sizeof(bits) >
guild.c | 178 | implode(bits[0..<2], ".");
guild.c | 180 | sizeof(bits) - 1) * 5) >
guild.c | 196 | query_skill_max_level(skill_name);
guild.c | 203 | this_player()->query_value_in(place);
guild.c | 205 | this_player()->query_value_in("default");
guild.c | 208 | query_smallest_value_in(place);
guild.c | 212 | query_skill_cost(skill_name, i);
guild.c | 226 | if ((lvl + i) >
guild.c | 240 | money_value_string( tmp_cost, place ) + ".\n" );
guild.c | 255 | add_failed_mess("Oops, something has gone wrong.\n");
guild.c | 258 | this_player()->adjust_xp(-total_xp);
guild.c | 261 | create_money_array(total_cost, place), place);
guild.c | 263 | this_player()->add_skill_level(skill_name, i, total_xp);
guild.c | 264 | this_player()->reset_all();
guild.c | 265 | this_player()->dest_hide_shadow();
guild.c | 266 | event(this_object(), "guild_advance", bits, lvl, lvl + i);
guild.c | 267 | check_spells_commands(bits, lvl + i);
guild.c | 275 | this_player()->query_possessive() + ",their$V$ skills.\n");
guild.c | 281 | do_advance_internal(skill, 0, 1);
guild.c | 287 | do_advance_internal(skill, 0, num);
guild.c | 293 | do_advance_internal(skill, num, 0);
guild.c | 300 | add_failed_mess("You're already in this guild.\n");
guild.c | 304 | add_failed_mess("You cannot join a guild while a member of another.\n");
guild.c | 307 | write("You will only ever get to join one guild.  Are you sure? ");
guild.c | 308 | input_to("join2");
guild.c | 316 | lower_case(str);
guild.c | 319 | write("I do not understand.  Yes or no? ");
guild.c | 320 | input_to("join2");
guild.c | 324 | write("Ok, not joining the " + our_guild->query_name() + " guild.\n");
guild.c | 327 | this_player()->set_guild_ob(our_guild);
guild.c | 331 | this_player()->race_guild_commands();
guild.c | 336 | event(this_object(), "guild_join");
guild.c | 339 | query_name(), "guild");
guild.c | 347 | add_failed_mess("Syntax : leave guild\n");
guild.c | 351 | add_failed_mess("How can you leave a guild if you aren't in it.\n");
guild.c | 354 | if ((int) this_player()->query_level() >
guild.c | 355 | add_failed_mess("You are too high a level to leave this guild.\n");
guild.c | 358 | write("Are you sure you want to leave the guild (Y/N) : ");
guild.c | 359 | input_to("confirm_leave");
guild.c | 366 | lower_case(str);
guild.c | 368 | write("You are still in the guild.\n");
guild.c | 371 | write("Goodbye.\n");
guild.c | 372 | call_other(our_guild, "leaving_guild");
guild.c | 373 | this_player()->set_start_pos(CONFIG_START_LOCATION);
guild.c | 374 | this_player()->set_guild_ob(0);
guild.c | 375 | this_player()->set_guild_data(0);
guild.c | 376 | this_player()->guild_commands();
guild.c | 377 | this_player()->save_me();
guild.c | 387 | query_skills();
guild.c | 390 | sizeof(primaries);
guild.c | 408 | sizeof(tmp_skills);
guild.c | 446 | sizeof(arr);
guild.c | 448 | this_player()->query_skill(lpath);
guild.c | 452 | query_skill_max_level(lpath);
guild.c | 455 | query_only_leaf(lpath);
guild.c | 458 | if (only_leaf  &&  sizeof(arr[i + SKILL_BIT]) >
guild.c | 497 | query_skill_cost(lpath, 0);
guild.c | 508 | reset_eval_cost();
guild.c | 524 | add_failed_mess("You are not a member of this guild.\n");
guild.c | 527 | query_skills();
guild.c | 529 | add_failed_mess("Hmmm, we appear to have an error here.\n");
guild.c | 535 | rec_cost(arr, "", 1, our_guild, brief));
guild.c | 539 | this_player()->more_string(list, "All", 1);
guild.c | 552 | add_failed_mess("You are not a member of this guild.\n");
guild.c | 555 | copy((mixed *)SKILL_OB->query_skills());
guild.c | 557 | add_failed_mess("Hmmm, we appear to have an error here.\n");
guild.c | 561 | query_skills();
guild.c | 562 | filter_primaries(arr, "", primaries);
guild.c | 567 | rec_cost(arr, "", 1, our_guild, 0));
guild.c | 571 | this_player()->more_string(list, "Primaries", 1);
guild.c | 590 | add_failed_mess("You are not a member of this guild.\n");
guild.c | 594 | explode(implode(explode(skill, " "), "."), ".");
guild.c | 596 | add_failed_mess("There is no such skill as " + skill + ".\n");
guild.c | 600 | this_player()->query_skill(skill_name);
guild.c | 609 | add_failed_mess("We can't give refund xp for regressing skills!\n");
guild.c | 613 | explode(skill_name, ".");
guild.c | 614 | if (sizeof(bits) >
guild.c | 615 | implode(bits[0 .. <2], ".");
guild.c | 617 | sizeof(bits) - 1) * 5) >
guild.c | 632 | query_skill_max_level(skill_name);
guild.c | 640 | if ((lvl + i) >
guild.c | 646 | query_skill_cost(skill_name, i);
guild.c | 651 | this_object()->query_property("place");
guild.c | 657 | query_smallest_value_in(place);
guild.c | 659 | money_value_string(cost, place);
guild.c | 680 | add_failed_mess("You are not a member of this guild.\n");
guild.c | 683 | query_skills();
guild.c | 685 | add_failed_mess("Hmmm, we appear to have an error here.\n");
guild.c | 690 | query_skill(explode(implode(explode(skill, " "), "."), "."));
guild.c | 692 | add_failed_mess("There is no such skill as " + skill + ".\n");
guild.c | 697 | member_array(exp_skill, arr);
guild.c | 698 | query_only_leaf(exp_skill);
guild.c | 700 | explode(exp_skill, ".");
guild.c | 702 | member_array(skill, arr);
guild.c | 705 | member_array(sub_skills[<1], arr);
guild.c | 709 | if (sizeof(arr[i + 3]) >
guild.c | 718 | this_player()->more_string(list, capitalize(exp_skill), 1);
guild.c | 722 | do_cost_internal(exp_skill, 0, 1);
guild.c | 729 | do_cost_internal(skill, num, 0);
guild.c | 734 | do_cost_internal(skill, 0, num);
guild.c | 745 | copy((mixed *)SKILL_OB->query_skills());
guild.c | 747 | add_failed_mess("Hmmm, we appear to have an error here.\n");
guild.c | 750 | query_skills();
guild.c | 751 | filter_primaries(arr, "", primaries);
guild.c | 755 | rec_cost(arr, "", 1, our_guild, 0));
guild.c | 757 | this_player()->query_xp() + " points to spend <");
guild.c | 778 | implode(blue, ".");
guild.c | 790 | implode(blue, ".");
guild.c | 812 | keys(spells);
guild.c | 813 | sizeof(bits);
guild.c | 814 | this_player()->query_skill(bits[i]);
guild.c | 815 | sizeof(spells[bits[i]]);
guild.c | 820 | this_player()->query_name());
guild.c | 822 | keys(commands);
guild.c | 823 | sizeof(bits);
guild.c | 824 | this_player()->query_skill(bits[i]);
guild.c | 825 | sizeof(commands[bits[i]]);
guild.c | 830 | this_player()->query_name());
club_discuss.c | 18 | discuss_finish_description(string str, int open);
club_discuss.c | 19 | do_discuss(int open, string type, string club_name);
club_discuss.c | 45 | do_discuss(1, $4[0], $4[1]) :));
club_discuss.c | 51 | do_discuss(0, $4[0], $4[1]) :));
club_discuss.c | 76 | write("Discussion item: " + short + ".\n");
club_discuss.c | 78 | write("No description used.\n");
club_discuss.c | 80 | write(info);
club_discuss.c | 83 | write("\nDo you wish to add this? ");
club_discuss.c | 104 | lower_case(str);
club_discuss.c | 107 | write("Aborting.\n");
club_discuss.c | 119 | write("Added in the discussion item: " + short + ".\n");
club_discuss.c | 121 | write("Unable to add in the discussion item: " + short + ".\n");
club_discuss.c | 147 | query_club_name(club_name) + "'.\n");
club_discuss.c | 162 | write("Description aborted.\n");
club_discuss.c | 170 | description (yes/no/edit)? ");
club_discuss.c | 171 | input_to("description_confirm", 0, str, open, club_name);
club_discuss.c | 181 | lower_case(confirm);
club_discuss.c | 194 | write("Aborting.\n");
club_discuss.c | 206 | write("Successfuly added the item for discussion.\n");
club_discuss.c | 208 | write("Unable to add the item for discussion.\n");
club_discuss.c | 222 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 226 | input_to("discussion_add_name", 0, open, club_name);
club_discuss.c | 240 | write("Aborting.\n");
club_discuss.c | 244 | strip_colours(str);
club_discuss.c | 254 | if (strlen(str) >
club_discuss.c | 287 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 289 | write("Which member to do you wish to try and remove? ");
club_discuss.c | 290 | input_to("discussion_remove_member_name", 0, open, club_name);
club_discuss.c | 300 | write("Aborting.\n");
club_discuss.c | 313 | write("What do you want to say about removing " + str + "?\n");
club_discuss.c | 341 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 344 | write("What description to wish to use to make the club open?\n");
club_discuss.c | 347 | write("What description to wish to use to make the club secret?\n");
club_discuss.c | 374 | query_valid_positions(club_name);
club_discuss.c | 379 | query_multiple_short(choices) + ".\n");
club_discuss.c | 384 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 386 | write("Which one of the positions do you wish to remove?\n");
club_discuss.c | 388 | write("   " + bing + "\n");
club_discuss.c | 390 | write("Choice? ");
club_discuss.c | 391 | input_to("remove_position", 0, open, club_name, ok);
club_discuss.c | 399 | lower_case(str);
club_discuss.c | 404 | query_club_name(club_name) + ".\n");
club_discuss.c | 410 | write("Unable to remove the basic positions from the club.\n");
club_discuss.c | 440 | query_valid_positions(club_name);
club_discuss.c | 442 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 444 | write("Which one of the positions do you wish to change?\n");
club_discuss.c | 446 | write("   " + bing + "\n");
club_discuss.c | 448 | write("Choice? ");
club_discuss.c | 449 | input_to("change_position", 0, open, club_name);
club_discuss.c | 461 | lower_case(str);
club_discuss.c | 466 | query_club_name(club_name) + ".\n");
club_discuss.c | 470 | write("What name do you wish to change '" + str + "' to? ");
club_discuss.c | 471 | input_to("change_position_new_name", 0, str, open, club_name);
club_discuss.c | 486 | strip_colours(str);
club_discuss.c | 491 | query_club_name(club_name) + ".\n");
club_discuss.c | 495 | if (strlen(str) >
club_discuss.c | 530 | query_valid_positions(club_name);
club_discuss.c | 538 | write("   " + bing + "\n");
club_discuss.c | 540 | write("   " + CLUB_ALL_POSITIONS + "\n");
club_discuss.c | 541 | write("Choice? ");
club_discuss.c | 542 | input_to("no_confidence", 0, open, club_name);
club_discuss.c | 551 | lower_case(str);
club_discuss.c | 586 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 589 | write("What is the name of the special account you wish to close? ");
club_discuss.c | 590 | input_to("remove_account", 0, open, club_name);
club_discuss.c | 598 | lower_case(str);
club_discuss.c | 601 | write("You cannot remove an account that doesn't exist.\n");
club_discuss.c | 606 | write("You cannot remove the default account name.\n");
club_discuss.c | 631 | write("%^YELLOW%^This discussion item will be committee only!\n%^RESET%^");
club_discuss.c | 634 | write("What is the name of the special account you wish to open? ");
club_discuss.c | 635 | input_to("create_account", 0, open, club_name);
club_discuss.c | 643 | lower_case(str);
club_discuss.c | 646 | write("You cannot create an account that already exists.\n");
club_discuss.c | 668 | write("Subject: " + memo->subject + "\n");
club_discuss.c | 670 | write("No subject set.\n");
club_discuss.c | 673 | write("Choices: " + query_multiple_short(memo->choices) + "\n");
club_discuss.c | 675 | write("No choices set.\n");
club_discuss.c | 678 | write("Description:\n" + memo->description + "\n");
club_discuss.c | 680 | write("No description set.\n");
club_discuss.c | 689 | discuss_memo_show(memo);
club_discuss.c | 690 | write("\n");
club_discuss.c | 691 | write("a) Set subject\n");
club_discuss.c | 692 | write("b) Make a yes/no memo item\n");
club_discuss.c | 693 | write("c) Add new choice\n");
club_discuss.c | 694 | write("d) Remove choice\n");
club_discuss.c | 695 | write("e) Set completion time\n");
club_discuss.c | 697 | write("f) Change description\n");
club_discuss.c | 698 | write("g) Zap description\n");
club_discuss.c | 700 | write("f) Add description\n");
club_discuss.c | 702 | write("m) Redisplay this menu\n");
club_discuss.c | 703 | write("s) Save and Quit\n");
club_discuss.c | 704 | write("q) Quit\n\n");
club_discuss.c | 705 | write("Choice: ");
club_discuss.c | 706 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 711 | write("What do you wish the new subject to be? ");
club_discuss.c | 712 | input_to("discuss_memo_subject_name", 0, memo);
club_discuss.c | 719 | write("Not changing the subject.\n");
club_discuss.c | 720 | write("Choice: ");
club_discuss.c | 721 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 724 | if (strlen(name) >
club_discuss.c | 727 | write("Choice: ");
club_discuss.c | 728 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 733 | discuss_memo_menu(memo);
club_discuss.c | 738 | write("What is the name of the choice you wish to add? ");
club_discuss.c | 739 | input_to("discuss_memo_add_choice_response", 0, memo);
club_discuss.c | 745 | lower_case(implode(explode(response, " ") - ({ "" }), " "));
club_discuss.c | 746 | strip_colours(response);
club_discuss.c | 748 | write("Not adding any choices.\n");
club_discuss.c | 749 | write("Choice: ");
club_discuss.c | 750 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 753 | if (strlen(response) >
club_discuss.c | 756 | write("Choice: ");
club_discuss.c | 757 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 763 | query_multiple_short(memo->choices) + ".\n");
club_discuss.c | 764 | write("Choice: ");
club_discuss.c | 765 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 769 | discuss_memo_menu(memo);
club_discuss.c | 774 | write("What is the name of the choice you wish to remove? ");
club_discuss.c | 775 | input_to("discuss_memo_remove_choice_response", 0, memo);
club_discuss.c | 781 | lower_case(implode(explode(response, " ") - ({ "" }), " "));
club_discuss.c | 783 | write("The choice '" + response + "' is not in current memo.\n");
club_discuss.c | 784 | write("Choice: ");
club_discuss.c | 785 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 789 | discuss_memo_menu(memo);
club_discuss.c | 794 | write("What do you wish to change the length of the item to (in days)? ");
club_discuss.c | 795 | input_to("discuss_memo_timeout_response", 0, memo);
club_discuss.c | 804 | write("Must specify a number.\n");
club_discuss.c | 805 | write("Choice: ");
club_discuss.c | 806 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 812 | write("Choice: ");
club_discuss.c | 813 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 819 | write("Choice: ");
club_discuss.c | 820 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 824 | discuss_memo_menu(memo);
club_discuss.c | 831 | write("Not changing the description.\n");
club_discuss.c | 835 | discuss_memo_menu(memo);
club_discuss.c | 841 | write("Edit your description.\n");
club_discuss.c | 843 | write("Add your description.\n");
club_discuss.c | 855 | write("The memo must have a subject to save it!\n");
club_discuss.c | 856 | write("Choice: ");
club_discuss.c | 857 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 862 | sizeof(memo->choices) + ".\n");
club_discuss.c | 863 | write("Choice: ");
club_discuss.c | 864 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 876 | write("Successfuly added the memo item.\n");
club_discuss.c | 878 | write("Unable to add the memo item for some reason.\n");
club_discuss.c | 884 | lower_case(str);
club_discuss.c | 886 | write("Invalid choice\nChoice: ");
club_discuss.c | 887 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 893 | discuss_memo_subject(memo);
club_discuss.c | 897 | discuss_memo_menu(memo);
club_discuss.c | 900 | discuss_memo_add_choice(memo);
club_discuss.c | 903 | discuss_memo_remove_choice(memo);
club_discuss.c | 906 | discuss_memo_timeout(memo);
club_discuss.c | 909 | discuss_memo_description(memo);
club_discuss.c | 913 | write("Description zapped.\n");
club_discuss.c | 914 | discuss_memo_menu(memo);
club_discuss.c | 917 | write("Quiting memo addition!\n");
club_discuss.c | 920 | discuss_memo_save(memo);
club_discuss.c | 923 | discuss_memo_menu(memo);
club_discuss.c | 926 | write("Invalid choice\nChoice: ");
club_discuss.c | 927 | input_to("discuss_memo_menu_choice", 0, memo);
club_discuss.c | 964 | add_failed_mess("No such club '" + club_name + "'.\n");
club_discuss.c | 985 | do_discuss_description(open, club_name);
club_discuss.c | 987 | do_discuss_add_position(open, club_name);
club_discuss.c | 989 | do_discuss_change_position_name(open, club_name);
club_discuss.c | 991 | do_discuss_memo(open, club_name);
club_discuss.c | 993 | do_discuss_remove_member(open, club_name);
club_discuss.c | 995 | do_discuss_secret(open, club_name);
club_discuss.c | 997 | do_discuss_remove_position(open, club_name);
club_discuss.c | 999 | do_discuss_no_confidence(open, club_name);
club_discuss.c | 1001 | do_discuss_create_account(open, club_name);
club_discuss.c | 1003 | do_discuss_remove_account(open, club_name);
milestone.c | 87 | add_topo_exits_int();
milestone.c | 119 | set_actual_room_size(int *s) { actual_room_size = copy(s);
milestone.c | 262 | query(string s) { return fetch_variable(s);
milestone.c | 293 | setup_milestone(this_object());
milestone.c | 295 | add_topo_exits_int();
milestone.c | 311 | add_exit(s, dest, type);
milestone.c | 312 | add_exit(motion_verb + " " + s, "interroom", "hidden");
milestone.c | 315 | add_alias(motion_verb + " " + ss, motion_verb + " " + s);
milestone.c | 320 | remove_exit(motion_verb + " <" + short_mse + ">");
milestone.c | 326 | add_exit(motion_verb + " <" + short_mse + ">", "interroom", type);
milestone.c | 339 | modify_exit(s, ({ "function", "passing_mess" }) );
milestone.c | 353 | member_array(dir, milestone_dirs[handler]);
milestone.c | 357 | query_irooms_inv(milestone_index[handler], -1, i);
milestone.c | 362 | replace(pass_mess[2], "$O", query_multiple_short(obs));
milestone.c | 365 | tell_object(ob, mess1);
milestone.c | 370 | a_short() }));
milestone.c | 373 | tell_object(passed, mess2 + "\n");
milestone.c | 400 | query_dest_other(direc);
milestone.c | 402 | explode(direc, " ");
milestone.c | 405 | query_dest_other(direc);
milestone.c | 413 | file_name(room);
milestone.c | 418 | notify_fail(motion_verb + " which way?\n");
milestone.c | 421 | implode(words[1..], " ");
milestone.c | 423 | member_array(rest, milestone_dirs[handler]);
milestone.c | 428 | find_room_at_index(milestone_index[handler] - 1, -2);
milestone.c | 430 | find_room_at_index(milestone_index[handler], 0);
milestone.c | 435 | query_dest_other(direc);
milestone.c | 439 | file_name(room);
milestone.c | 464 | member_array(direc_s, milestone_dirs[h]);
milestone.c | 474 | evaluate(s);
milestone.c | 476 | query_dest_other(direc_s);
milestone.c | 486 | force_load();
milestone.c | 487 | this_player()->set_looked( find_object( dest ) );
milestone.c | 488 | this_player()->check_dark((int)dest->query_light());
milestone.c | 489 | long( 0, dark );
milestone.c | 521 | sizeof(other_exits);
milestone.c | 543 | add_exit(s, "/topography", other_types[i]);
iroom.c | 268 | sizeof(milestone_dirs);
iroom.c | 272 | modify_exit(s, ({ "function", "passing_mess" }) );
iroom.c | 274 | add_exit(motion_verb + " " + s, "interroom", "hidden");
iroom.c | 277 | add_alias(motion_verb + " " + ss, motion_verb + " " + s);
iroom.c | 281 | remove_exit(motion_verb + " <" + short_mse + ">");
iroom.c | 287 | add_exit(motion_verb + " <" + short_mse + ">", "interroom", exit_type);
iroom.c | 317 | member_array(dir, milestone_dirs);
iroom.c | 327 | replace(pass_mess[2], "$O", query_multiple_short(obs));
iroom.c | 330 | tell_object(ob, mess1);
iroom.c | 334 | a_short() }));
iroom.c | 337 | tell_object(passed, mess2 + "\n");
iroom.c | 354 | return ({ s, query_co_ord() });
iroom.c | 368 | if (sizeof(explode(file_name(this_object()), "#")) >
iroom.c | 373 | query_saved_co_ords());
iroom.c | 376 | query_saved_co_ords());
iroom.c | 377 | move(player->query_start_pos());
iroom.c | 382 | move(new_room);
iroom.c | 401 | tell_creator("jeremy", "%O:query_dest_other(%s)\n", this_object(), direc);
iroom.c | 403 | query_dest_other(direc);
iroom.c | 405 | explode(direc, " ");
iroom.c | 408 | query_dest_other(direc);
iroom.c | 416 | file_name(room);
iroom.c | 421 | notify_fail(motion_verb + " which way?\n");
iroom.c | 424 | implode(words[1..], " ");
iroom.c | 425 | member_array(rest, milestone_dirs);
iroom.c | 427 | notify_fail("You can't " + motion_verb + " that way.\n");
iroom.c | 435 | query_dest_other(direc);
iroom.c | 439 | file_name(room);
iroom.c | 461 | member_array(direc_s, milestone_dirs);
iroom.c | 469 | evaluate(s);
iroom.c | 471 | query_dest_other(direc_s);
iroom.c | 481 | force_load();
iroom.c | 482 | this_player()->set_looked( find_object( dest ) );
iroom.c | 483 | this_player()->check_dark((int)dest->query_light());
iroom.c | 484 | long( 0, dark );
iroom.c | 516 | sizeof(other_exits);
iroom.c | 538 | add_exit(s, "/topography", other_types[i]);
aroom.c | 45 | query_co_ord();
aroom.c | 46 | query_dest_other(string direc);
aroom.c | 47 | query_door_open(string direc);
aroom.c | 48 | query_exit(string str);
aroom.c | 49 | add_exit(string dir, string location, string type);
aroom.c | 96 | return ({ s, query_co_ord() });
aroom.c | 110 | if (sizeof(explode(file_name(this_object()), "#")) >
aroom.c | 115 | query_saved_co_ords());
aroom.c | 118 | query_saved_co_ords());
aroom.c | 119 | move(player->query_start_pos());
aroom.c | 124 | move(new_room);
aroom.c | 141 | printf("%O %O %O\n", dirs, direc, other_res);
aroom.c | 142 | tell_creator("jeremy", "%O:query_dest_other(%s)\n", this_object(), direc);
aroom.c | 148 | printf("%O %O %O\n", dirs[direc], direc, room);
aroom.c | 156 | file_name(room);
aroom.c | 183 | evaluate(s);
aroom.c | 185 | query_dest_other(direc_s);
aroom.c | 195 | force_load();
aroom.c | 196 | this_player()->set_looked( find_object( dest ) );
aroom.c | 197 | this_player()->check_dark((int)dest->query_light());
aroom.c | 198 | long( 0, dark );
aroom.c | 222 | add_exit("north", "/topography", other_types);
aroom.c | 225 | add_exit("south", "/topography", other_types);
aroom.c | 228 | add_exit("east", "/topography", other_types);
aroom.c | 231 | add_exit("west", "/topography", other_types);
aroom.c | 235 | add_exit("northeast", "/topography", other_types);
aroom.c | 238 | add_exit("northwest", "/topography", other_types);
aroom.c | 241 | add_exit("southeast", "/topography", other_types);
aroom.c | 244 | add_exit("southwest", "/topography", other_types);
aroom.c | 248 | add_exit(s, "/topography", other_types);
feature_base.c | 33 | dest_me();
feature_base.c | 37 | clone_object(region);
feature_base.c | 175 | filter(direcs, (: $2 <= _max_range :));
feature_base.c | 190 | query_feature_desc_from(x, y, z);
feature_base.c | 195 | filter_distances(bits);
feature_base.c | 198 | return ([ ]);
feature_base.c | 210 | is_inside_region(x1, y1, x2, y2, query_max_range());
feature_base.c | 216 | dest_me();
feature_base.c | 218 | destruct(this_object());
factory.c | 13 | create();
factory.c | 14 | this_object()->setup();
terrain_room.c | 57 | add_property(string var, mixed val, int tim);
terrain_room.c | 59 | query_feature_item_desc(string title);
terrain_room.c | 60 | query_handler_path();
terrain_room.c | 61 | terrain_chat( mixed *args, object chatobj );
terrain_room.c | 62 | do_outside_chats();
terrain_room.c | 63 | add_zone(string zone);
terrain_room.c | 64 | add_extra_look(object ob);
terrain_room.c | 65 | remove_item(string word);
terrain_room.c | 66 | add_item( mixed shorts, mixed desc, int no_plural );
terrain_room.c | 67 | query_co_ord();
terrain_room.c | 68 | query_visibility();
terrain_room.c | 69 | long(string str, int dark);
terrain_room.c | 70 | query_terrain_handler();
terrain_room.c | 84 | this_object()->add_help_file("terrain_room");
terrain_room.c | 85 | create();
terrain_room.c | 93 | long(str, dark);
terrain_room.c | 96 | query_visibility(), 9);
terrain_room.c | 99 | map(explode(map, "\n"), (: $1 + "   " :));
terrain_room.c | 120 | query_co_ord();
terrain_room.c | 154 | query_co_ord();
terrain_room.c | 164 | time() /period);
terrain_room.c | 195 | query_terrain_coords() { return ({ _x_coord, _y_coord, _z_coord });
terrain_room.c | 210 | add_property("terrain_map", 1);
terrain_room.c | 211 | add_extra_look(this_object());
terrain_room.c | 247 | load_object(query_terrain_handler());
terrain_room.c | 261 | query_map_handler()->reset_handler();
terrain_room.c | 279 | replace(message, ({ "$D", feature->direc_str }));
terrain_room.c | 283 | tell_room(this_object(), message);
terrain_room.c | 297 | query_map_handler();
terrain_room.c | 311 | tell_room(this_object(), chats[random(sizeof(chats))] + "\n");
terrain_room.c | 322 | query_map_handler()->get_an_outside_chat(_outside_types);
terrain_room.c | 325 | tell_room(this_object(), chat + "\n");
terrain_room.c | 545 | write( "Error: second argument of room_chat args is not an array.\n" );
terrain_room.c | 549 | setup_chatter( this_object(), args );
terrain_room.c | 555 | file_name(this_object()), chatobj);
terrain_room.c | 557 | clone_object( CHATTER_OBJECT );
terrain_room.c | 559 | file_name(this_object()), _terrain_chatter);
terrain_room.c | 561 | setup_chatter( this_object(), args );
terrain_room.c | 585 | add_zone(zone);
terrain_room.c | 587 | query_map_handler()->add_room_to_zone(this_object(), zone);
terrain_room.c | 692 | query_to_same(type, to, from);
terrain_room.c | 695 | map(result, (: stringp($1)?replace($1, ({ "$T", $2, "$F", $3 }) ):$1 :), to, from);
terrain_room.c | 708 | query_to_other(type, to, from);
terrain_room.c | 711 | map(result, (: stringp($1)?replace($1, ({ "$T", $2, "$F", $3 }) ):$1 :), to, from);
terrain_room.c | 724 | query_from_other(type, to, from);
terrain_room.c | 727 | map(result, (: stringp($1)?replace($1, ({ "$T", $2, "$F", $3 }) ):$1 :), to, from);
terrain_room.c | 777 | query_map_handler()->query_newline_mode();
terrain_room.c | 779 | query_visibility();
terrain_room.c | 828 | add_item(items, (: query_feature_item_desc($(title)) :));
terrain_room.c | 856 | map_delete(_features, title);
terrain_room.c | 859 | remove_item(items);
terrain_room.c | 861 | remove_item(items[0]);
terrain_room.c | 888 | query_map_handler()->query_feature_item_desc(title);
terrain_room.c | 954 | file_name(this_object());
terrain_room.c | 966 | to_int(x_str);
terrain_room.c | 967 | to_int(y_str);
terrain_room.c | 969 | query_map_handler()->load_room_at(x, y);
terrain_room.c | 1019 | sprintf("%s:%d:%d:%d", query_terrain_handler(), x, y, z);
terrain_room.c | 1031 | query_map_handler()->query_direction_distance(dir);
terrain_room.c | 1109 | query_map_handler()->find_next_room_from(_x_coord, _y_coord, _z_coord, exit[strlen(query_terrain_map_journey_exit())..]);
terrain_room.c | 1119 | query_direction_distance_str(num, cur) });
terrain_room.c | 1125 | query_map_handler()->query_direction_distance(dir);
terrain_room.c | 1126 | query_direction_distance_str(num, dir) });
terrain_room.c | 1127 | if (sizeof(bits) >
terrain_room.c | 1165 | sizeof(data);
terrain_room.c | 1168 | query_map_handler()->find_next_room_from(_x_coord, _y_coord, _z_coord, data[i]);
terrain_room.c | 1176 | query_map_handler()->find_next_room_from(_x_coord, _y_coord, _z_coord, data[i][strlen(query_terrain_map_journey_exit())..]);
terrain_room.c | 1192 | query_map_handler()->query_debug_map(_x_coord, _y_coord, 13, _x_coord, _y_coord);
terrain_room.c | 1193 | write(map);
terrain_room.c | 1194 | add_succeeded_mess("");
terrain_room.c | 1204 | query_map_handler()->query_debug_map(20, 20, 40, _x_coord, _y_coord);
terrain_room.c | 1205 | write(map);
terrain_room.c | 1206 | add_succeeded_mess("");
terrain_room.c | 1217 | tell_creator(this_player(), "Coords: (%d, %d, %d)\n", _x_coord, _y_coord, _z_coord);
terrain_room.c | 1219 | add_command("cremap", "", (: do_map :));
terrain_room.c | 1220 | add_command("cremap", "all", (: do_map_terrain :));
terrain_room.c | 1227 | query_terrain_map_block() }) });
terrain_room.c | 1233 | file_name(this_object()), _terrain_chatter);
terrain_room.c | 1234 | dest_me();
region_line.c | 29 | new(class vertex, x : x, y : y);
region_line.c | 69 | to_float(vert1->x - vert2->x);
region_line.c | 70 | to_float(vert1->y - vert2->y);
region_line.c | 71 | to_float(x - vert2->x);
region_line.c | 72 | to_float(y - vert2->y);
region_line.c | 77 | sqrt(pow(vert2->x - x, 2) + pow(vert2->y - y, 2));
region_line.c | 78 | printf("1) %O\n", distance);
region_line.c | 91 | sqrt(pow(vert1->x - x, 2) + pow(vert1->y - y, 2));
region_line.c | 93 | printf("2) %O\n", distance);
region_line.c | 106 | sqrt(pow(vm_x - x, 2) + pow(vm_y - y, 2));
region_line.c | 107 | printf("3) (%O, %O) %O\n", vm_x, vm_y, distance);
region_line.c | 137 | to_int(p->y);
region_line.c | 141 | to_int(p->y);
region_line.c | 150 | to_int(p->x);
region_line.c | 154 | to_int(p->x);
region_line.c | 171 | printf("%O of %O: %O %O\n", i, sizeof(_vertexes), direc, min_distance);
region_line.c | 174 | to_int(min_distance);
region_line.c | 177 | to_int(min_distance) });
region_line.c | 210 | sizeof(_vertexes);
region_line.c | 235 | destruct(this_object());
region_poly.c | 40 | new(class vertex, x : x, y : y);
region_poly.c | 81 | sizeof(_vertexes);
region_poly.c | 84 | to_float(vert1->x - vert2->x);
region_poly.c | 85 | to_float(vert1->y - vert2->y);
region_poly.c | 86 | to_float(x - vert2->x);
region_poly.c | 87 | to_float(y - vert2->y);
region_poly.c | 113 | sqrt(pow(vert2->x - x, 2) + pow(vert2->y - y, 2));
region_poly.c | 114 | printf("1) %O\n", distance);
region_poly.c | 131 | sqrt(pow(vert1->x - x, 2) + pow(vert1->y - y, 2));
region_poly.c | 132 | printf("2) %O\n", distance);
region_poly.c | 150 | sqrt(pow(vm_x - x, 2) + pow(vm_y - y, 2));
region_poly.c | 151 | printf("3) (%O, %O) %O\n", vm_x, vm_y, distance);
region_poly.c | 186 | to_int(p->y);
region_poly.c | 190 | to_int(p->y);
region_poly.c | 199 | to_int(p->x);
region_poly.c | 203 | to_int(p->x);
region_poly.c | 221 | printf("%O of %O: %O %O\n", i, sizeof(_vertexes), direc, min_distance);
region_poly.c | 229 | to_int(min_distance);
region_poly.c | 232 | to_int(min_distance) });
region_poly.c | 265 | sizeof(_vertexes);
region_poly.c | 290 | destruct(this_object());
handler_base.c | 144 | load_area_map();
handler_base.c | 145 | load_zone_map();
handler_base.c | 146 | query_char_map(int x, int y);
handler_base.c | 147 | setup_area_map();
handler_base.c | 148 | setup_room(object room, string base_path);
handler_base.c | 149 | find_adjacent_terrain(int x, int y);
handler_base.c | 166 | query_real_coords() { return ({ ({ _real_coords->x1, _real_coords->y1 }), ({ _real_coords->x2, _real_coords->y2 }) });
handler_base.c | 167 | query_dimensions() { return ({ _width, _height });
handler_base.c | 195 | new(class real_coords, x1:x1, y1:y1, x2:x2, y2:y2);
handler_base.c | 201 | to_float(_real_coords->ydiff) * to_float(_real_coords->ydiff)));
handler_base.c | 211 | set_real_coordinates_no_inform(x1, y1, x2, y2);
handler_base.c | 226 | new(class real_coords);
handler_base.c | 230 | to_float(_real_coords->ydiff) * to_float(_real_coords->ydiff)));
handler_base.c | 254 | new(class coord, x : 0, y : 0);
handler_base.c | 305 | setup_area_map();
handler_base.c | 306 | setup_handler();
handler_base.c | 319 | load_area_map();
handler_base.c | 320 | load_zone_map();
handler_base.c | 325 | allocate(_width) });
handler_base.c | 338 | query_terrain_coords();
handler_base.c | 347 | setup_room(room, "No base path");
handler_base.c | 373 | query_terrain_coords();
handler_base.c | 392 | debug_printf("Unable to find feature object for %O\n", title);
handler_base.c | 396 | query_feature_desc_from(x, y, z);
handler_base.c | 407 | map_delete(data, direc);
handler_base.c | 423 | map_delete(data, direc);
handler_base.c | 430 | add_feature(title, data, feature->f_items, feature->whole_sentance);
handler_base.c | 434 | filter(_feature_rooms[title], (: $1 && objectp($1) :));
handler_base.c | 451 | query_terrain_coords();
handler_base.c | 454 | sprintf("%d:%d", x, y);
handler_base.c | 457 | tell_creator("dek", "Looking for a sign: %s.\n", title);
handler_base.c | 467 | move(room);
handler_base.c | 479 | query_terrain_coords();
handler_base.c | 496 | add_zone(zone);
handler_base.c | 506 | query_terrain_coords();
handler_base.c | 513 | sizeof(descs);
handler_base.c | 521 | random(sizeof(descs), seed++);
handler_base.c | 522 | if (member_array(index, indices) >
handler_base.c | 530 | add_random_desc(desc["desc"]);
handler_base.c | 531 | add_item(desc["items"], desc["item_desc"]);
handler_base.c | 554 | query_char_map(x, y);
handler_base.c | 557 | query_dest_coordinate_string(x, y, z, direc, key);
handler_base.c | 571 | query_char_map(x, y);
handler_base.c | 572 | return ({ x, y, room_setup->height });
handler_base.c | 585 | query_ground_room_co_ords(x, y);
handler_base.c | 604 | query_char_map(x, y);
handler_base.c | 612 | explode(room_setup->path, "_edge");
handler_base.c | 613 | if(sizeof(tmp) && file_size(tmp[0] + ".c") >
handler_base.c | 617 | find_base_terrain_room(x, y, z, room_setup->path, map_room, ref base);
handler_base.c | 666 | query_climb_base_room(x, y, z, map_room, ref dest);
handler_base.c | 678 | query_terrain_coords();
handler_base.c | 710 | debug_printf("Unable to find room coordinates from %O\n", file_name(room));
handler_base.c | 713 | query_char_map(room_coords[0], room_coords[1]);
handler_base.c | 722 | add_item( room_setup->items, room_setup->item_desc );
handler_base.c | 727 | debug_printf( "Error, unequal arrays.  Item not set." );
handler_base.c | 731 | sizeof( room_setup->items );
handler_base.c | 745 | query_terrain_map_walk_exit();
handler_base.c | 746 | query_terrain_map_journey_exit();
handler_base.c | 752 | add_exit(exit["direc"], exit["dest"], exit["type"]);
handler_base.c | 754 | modify_exit(exit["direc"], exit["modifiers"]);
handler_base.c | 769 | base_name(this_object());
handler_base.c | 789 | query_base_room(x, y, z, TERRAIN_MAP_ROOM_EXACT);
handler_base.c | 792 | load_object(base);
handler_base.c | 799 | add_exit(direc, main_base + ":" + x + ":" + y + ":" + z, "path");
handler_base.c | 800 | get_to_same(tmp, direc, key, new_base_path);
handler_base.c | 802 | modify_exit(direc, exit_mods);
handler_base.c | 812 | allocate(3 * 3);
handler_base.c | 822 | find_adjacent_terrain(x, y);
handler_base.c | 826 | query_real_from_terrain_coord(x, y, z);
handler_base.c | 827 | query_terrain_from_real_coord(fluff->x, fluff->y, fluff->z);
handler_base.c | 828 | query_char_map(fluff->x, fluff->y);
handler_base.c | 830 | query_base_room(fluff->x, fluff->y, z, TERRAIN_MAP_ROOM_EXACT);
handler_base.c | 833 | load_object(tmp);
handler_base.c | 841 | query_char_map(x, y);
handler_base.c | 843 | query_base_room(x, y, z, TERRAIN_MAP_ROOM_EXACT);
handler_base.c | 846 | load_object(tmp);
handler_base.c | 893 | query_enter_exit_direction(key, key_here, direc, room, base_path);
handler_base.c | 895 | add_exit(tmp, base, "road");
handler_base.c | 900 | add_exit(direc, base, "road");
handler_base.c | 901 | add_exit(walk_pre + direc, base, "road");
handler_base.c | 902 | add_default_exit(direc, base);
handler_base.c | 906 | modify_exit(walk_full, coords[4]);
handler_base.c | 907 | modify_exit(direc, coords[4]);
handler_base.c | 913 | get_to_same(_direcs[direc][2], direc, key, new_base_path);
handler_base.c | 915 | modify_exit(direc, exit_mods);
handler_base.c | 916 | modify_exit(walk_full, exit_mods);
handler_base.c | 919 | modify_exit(direc, ({ "obvious", 0 }));
handler_base.c | 920 | modify_exit(walk_full, ({ "obvious", 0 }));
handler_base.c | 921 | add_variable_exit(journey_pre + direc);
handler_base.c | 922 | add_exit(journey_pre + direc, base, "road");
handler_base.c | 923 | get_to_same(walk_full, journey_pre + direc, key, new_base_path);
handler_base.c | 925 | modify_exit(journey_pre + direc, coords[4]);
handler_base.c | 928 | modify_exit(journey_pre + direc, exit_mods);
handler_base.c | 932 | get_to_other(_direcs[direc][2], direc, key, new_base_path);
handler_base.c | 934 | modify_exit(walk_full, exit_mods);
handler_base.c | 937 | get_from_other(_direcs[direc][2], direc, key_here, base_path);
handler_base.c | 939 | modify_exit(walk_full, exit_mods);
handler_base.c | 942 | modify_exit(direc, ({ "obvious", 0 }));
handler_base.c | 950 | if (adjacent && strlen(adjacent) >
handler_base.c | 978 | sizeof( room_setup->items );
handler_base.c | 995 | query_multiple_short(dirs, "the", 1));
handler_base.c | 997 | if (strlen(tmp) >
handler_base.c | 1019 | set_outside_types(outside_types);
handler_base.c | 1020 | add_signposts(room);
handler_base.c | 1021 | setup_zones(room);
handler_base.c | 1024 | calc_features(room);
handler_base.c | 1026 | query_real_from_terrain_coord(room_coords[0], room_coords[1], 0);
handler_base.c | 1031 | query_feature_desc_from(fluff->x, fluff->y, fluff->z);
handler_base.c | 1037 | map_delete(distant, direc);
handler_base.c | 1042 | add_distant_feature(title, distant);
handler_base.c | 1049 | calc_random_descs(room, key_here);
handler_base.c | 1050 | calc_random_chats(room, key_here);
handler_base.c | 1052 | set_extra_long(room_long);
handler_base.c | 1054 | set_installed(1);
handler_base.c | 1055 | calc_exits();
handler_base.c | 1078 | query_real_from_terrain_coord(x, y, 0);
handler_base.c | 1079 | printf("%O, %O) %O\n", x, y, real);
handler_base.c | 1081 | find_terrain_at(real->x, real->y);
handler_base.c | 1089 | find_adjacent_terrain(-1,-1);
handler_base.c | 1090 | find_adjacent_terrain(-1,0);
handler_base.c | 1091 | find_adjacent_terrain(-1,40);
handler_base.c | 1092 | find_adjacent_terrain(0,40);
handler_base.c | 1093 | find_adjacent_terrain(40,40);
handler_base.c | 1094 | find_adjacent_terrain(40,0);
handler_base.c | 1095 | find_adjacent_terrain(40,-1);
handler_base.c | 1096 | find_adjacent_terrain(0,-1);
handler_base.c | 1103 | find_adjacent_terrain(_width, 0) });
handler_base.c | 1137 | debug_printf("Bad direction %O\n", direc);
handler_base.c | 1145 | find_adjacent_terrain(x, y);
handler_base.c | 1149 | query_real_from_terrain_coord(x, y, 0);
handler_base.c | 1160 | sprintf("%d:%d:%d", x, y, z);
handler_base.c | 1161 | sprintf("%s:%s", base_name(this_object()), bit) });
handler_base.c | 1175 | find_adjacent_terrain(new_x, new_y);
handler_base.c | 1177 | query_real_from_terrain_coord(new_x, new_y, z);
handler_base.c | 1178 | query_terrain_from_real_coord(real->x, real->y, z);
handler_base.c | 1179 | query_char_map(real->x, real->y);
handler_base.c | 1184 | query_char_map(new_x, new_y);
handler_base.c | 1187 | printf("Found! %O %O %O\n", new_direc, room_setup->room_jump, jump_len);
handler_base.c | 1193 | printf("(%O, %O) %O %O %O\n", x, y, found, found_direc, jump_len);
handler_base.c | 1201 | query_char_map(x + data[0], y + data[1]);
handler_base.c | 1206 | while (num++ < len);
handler_base.c | 1233 | tell_creator("pinkfish", "%O: %O %O %O %O %O\n", base_name(this_object()), x, y, direc, road_jump, main_key);
handler_base.c | 1234 | query_terrain_from_real_coord(x, y, 0);
handler_base.c | 1235 | query_char_map(bing->x, bing->y);
handler_base.c | 1247 | query_char_map(new_x, new_y);
handler_base.c | 1255 | return ({ });
handler_base.c | 1274 | return ({ });
handler_base.c | 1298 | query_char_map(x, y);
handler_base.c | 1303 | find_object(test);
handler_base.c | 1305 | filter(all_inventory(ob), (: living($1) :));
handler_base.c | 1306 | if (sizeof(obs) >
handler_base.c | 1350 | query_char_map(x, y);
handler_base.c | 1355 | query_base_room(x, y, z, TERRAIN_MAP_ROOM_EXACT);
handler_base.c | 1364 | clone_object(base_path);
handler_base.c | 1366 | debug_printf("Unable to create room from %O at %O %O %O\n", base_path, x, y, z);
handler_base.c | 1368 | create_terrain_room();
handler_base.c | 1369 | set_terrain_coords(x, y, z);
handler_base.c | 1370 | query_real_from_terrain_coord(x, y, z);
handler_base.c | 1371 | set_co_ord(({ real->x, real->y, real->z }));
handler_base.c | 1373 | set_room_size(({ _real_coords->xdiff, _real_coords->ydiff, _real_coords->zdiff }));
handler_base.c | 1375 | set_terrain_handler(base_name(this_object()));
handler_base.c | 1376 | terrain_setup();
handler_base.c | 1377 | add_property("base path", base_path);
handler_base.c | 1379 | setup_room(room, base_path);
handler_base.c | 1382 | setup_in_terrain(room, x, y, z);
handler_base.c | 1408 | find_object(sprintf("%s:%d:%d:%d", base_name(this_object()), x, y, z));
handler_base.c | 1434 | query_room_at(h, v, z);
handler_base.c | 1467 | to_int(sqrt(pow(x - h, 2) + pow(y - v, 2)) + 0.4999);
handler_base.c | 1468 | tell_creator("dek", "Coords: (%d, %d), Range: %d, Dist: %d\n", h, v, max, dist);
handler_base.c | 1471 | query_room_at(h, v, z);
handler_base.c | 1493 | query_char_map(x, y);
handler_base.c | 1496 | debug_printf("Unable to load room at %d %d\n", x, y);
handler_base.c | 1504 | load_object(sprintf("%s:%d:%d:%d", base_name(this_object()), x, y, z));
handler_base.c | 1522 | debug_printf("The x value is out of range: %d > %d", x, sizeof(_area_map[y]));
handler_base.c | 1528 | copy(_char_map[type]);
handler_base.c | 1531 | debug_printf("There is no char type for '%s'", type);
handler_base.c | 1578 | find_adjacent_terrain(_width + 1, sy - j);
handler_base.c | 1580 | find_adjacent_terrain(-1, sy - j);
handler_base.c | 1582 | printf("Base %O (%d,%d)\n", base, sx + i, sy - j);
handler_base.c | 1592 | query_debug_map_char(sx + i - _width, sy - j);
handler_base.c | 1595 | query_debug_map_char(sx + i + _width, sy - j);
handler_base.c | 1609 | find_adjacent_terrain(sx + i, sy - j);
handler_base.c | 1622 | query_debug_map_char(sx + i, ny);
handler_base.c | 1624 | find_adjacent_terrain(sx + i, sy - j);
handler_base.c | 1632 | query_debug_map_char(sx + i - _width, ny);
handler_base.c | 1634 | query_debug_map_char(sx + i + _width, ny);
handler_base.c | 1683 | query_feature_desc_from(x, y, 0, 1);
handler_base.c | 1684 | sizeof(data);
handler_base.c | 1723 | query_real_from_terrain_coord(x, y, 0);
handler_base.c | 1724 | query_feature_desc_from(fluff->x, fluff->y, fluff->z);
handler_base.c | 1795 | query_char_map(x, y);
handler_base.c | 1806 | add_key(key, info->char, info->items);
handler_base.c | 1808 | add_key(key, info->char, info->room_desc);
handler_base.c | 1818 | query_base_room(x, y, z, TERRAIN_MAP_ROOM_MAP);
handler_base.c | 1820 | load_object(room);
handler_base.c | 1822 | query_terrain_map_character();
handler_base.c | 1823 | query_terrain_map_colour();
handler_base.c | 1824 | query_terrain_map_block();
handler_base.c | 1827 | query_key_desc();
handler_base.c | 1829 | query_short();
handler_base.c | 1832 | debug_printf("Room %s has no short.", base_name(ob));
handler_base.c | 1834 | add_key(key, char, tmp);
handler_base.c | 1842 | debug_printf("Unable to find %O\n", room);
handler_base.c | 1859 | debug_printf("No key for %s", char);
handler_base.c | 1932 | update_map(data, map, key, colours, x, y, z, offx, offy);
handler_base.c | 1958 | sprintf("%d", x % 10);
handler_base.c | 1981 | query_blocking_template(ady, adx, 0);
handler_base.c | 1983 | query_blocking_template(adx, ady, 0);
handler_base.c | 1987 | debug_printf("Error with the template");
handler_base.c | 2046 | sizeof(map);
handler_base.c | 2047 | sizeof(map[x]);
handler_base.c | 2055 | update_blocking(data, map, colours, x, y, distance);
handler_base.c | 2056 | update_blocking(data, map, colours, x, y-1, distance);
handler_base.c | 2059 | update_blocking(data, map, colours, x, y, distance);
handler_base.c | 2060 | update_blocking(data, map, colours, x, y + 1, distance);
handler_base.c | 2063 | update_blocking(data, map, colours, x, y, distance);
handler_base.c | 2064 | update_blocking(data, map, colours, x - 1, y - 1, distance);
handler_base.c | 2066 | update_blocking(data, map, colours, x, y, distance);
handler_base.c | 2069 | update_blocking(data, map, colours, x, y, distance);
handler_base.c | 2104 | query_map_template(distance);
handler_base.c | 2105 | query_map_template(distance);
handler_base.c | 2111 | if (max_size && sizeof(map) >
handler_base.c | 2115 | sizeof(map);
handler_base.c | 2127 | find_adjacent_terrain(x_c, -1);
handler_base.c | 2130 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2138 | find_adjacent_terrain(x_c, _height + 1);
handler_base.c | 2141 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2149 | find_adjacent_terrain(-1, y_c);
handler_base.c | 2152 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2160 | find_adjacent_terrain(_width + 1, y_c);
handler_base.c | 2163 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2171 | find_adjacent_terrain(_width + 1, -1);
handler_base.c | 2174 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2183 | find_adjacent_terrain(_width + 1, _height + 1);
handler_base.c | 2186 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2195 | find_adjacent_terrain(-1, _height + 1);
handler_base.c | 2198 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2207 | find_adjacent_terrain(-1, -1);
handler_base.c | 2210 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2223 | sizeof(map);
handler_base.c | 2225 | sizeof(map);
handler_base.c | 2259 | replace(ret, "%^", "");
handler_base.c | 2270 | implode(map(map[i], (: stringp($1) ? $1 : " " :)), "");
handler_base.c | 2304 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2308 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2312 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2316 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2331 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2335 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2339 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2343 | line_in_map(data, map, key, colours, offx, offy, x_c, y_c, endx, endy, z_c);
handler_base.c | 2349 | sizeof(map);
handler_base.c | 2384 | allocate(distance * 2 + 1, "\r") });
handler_base.c | 2385 | allocate(distance * 2 + 1, "\r") });
handler_base.c | 2392 | find_adjacent_terrain(x_c, -1);
handler_base.c | 2395 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2403 | find_adjacent_terrain(x_c, _height + 1);
handler_base.c | 2406 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2414 | find_adjacent_terrain(-1, y_c);
handler_base.c | 2417 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2425 | find_adjacent_terrain(_width + 1, y_c);
handler_base.c | 2428 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2436 | find_adjacent_terrain(_width + 1, -1);
handler_base.c | 2439 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2448 | find_adjacent_terrain(_width + 1, _height + 1);
handler_base.c | 2451 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2460 | find_adjacent_terrain(-1, _height + 1);
handler_base.c | 2463 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2472 | find_adjacent_terrain(-1, -1);
handler_base.c | 2475 | debug_printf("Unable to load %O\n", base);
handler_base.c | 2493 | sizeof(map);
handler_base.c | 2495 | sizeof(map);
handler_base.c | 2541 | implode(map[i], "");
handler_base.c | 2549 | replace_string(ret, "\r", " ");
handler_base.c | 2564 | query_terrain_from_real_coord(x, y, 0);
handler_base.c | 2565 | query_char_map(our->x, our->y);
handler_base.c | 2583 | return ({ });
handler_base.c | 2609 | query_rooms_in_zone(zone);
handler_base.c | 2612 | message(mess_class, message, rooms);
handler_base.c | 2635 | sprintf("feature:%s", title);
handler_base.c | 2647 | message(mess_class, message, _feature_rooms[title]);
handler_base.c | 2651 | sizeof(message);
handler_base.c | 2666 | query_tod() == "night");
handler_base.c | 2669 | calc_feature_desc(direcs, night, visibility);
handler_base.c | 2671 | return ({ str });
handler_base.c | 2673 | return ({ });
handler_base.c | 2687 | query_tod() == "night");
handler_base.c | 2700 | return ({ });
handler_base.c | 2704 | return ({ });
handler_base.c | 2711 | return ({ str });
handler_base.c | 2713 | return ({ });
handler_base.c | 2724 | debug_printf("Bad night description for %O", title);
handler_base.c | 2743 | replace_string(str, "$D", query_multiple_short(dirs)) });
handler_base.c | 2757 | query_tod() == "night");
handler_base.c | 2789 | query_tod() == "night");
handler_base.c | 2824 | replace(chat, ({ "$D", direc }));
handler_base.c | 2845 | sizeof(types);
handler_base.c | 2895 | throw("Bad type");
handler_base.c | 2925 | add_room_type(".", ROOMS + "field");
handler_base.c | 2948 | add_room_type(".", ROOMS + "field");
handler_base.c | 3017 | explode(base_path, "_edge");
handler_base.c | 3018 | if(sizeof(tmp) && file_size(tmp[0] + ".c") >
handler_base.c | 3025 | if (file_size(base_path + ".c") >
handler_base.c | 3026 | query_adjacent_items();
handler_base.c | 3028 | debug_printf("Incorrect room type %O", type);
handler_base.c | 3039 | query_follow_road());
handler_base.c | 3042 | debug_printf("Unable to add %O since %O doesn't exist.", type, base_path);
handler_base.c | 3122 | sprintf("%d:%d:%d", x, y, 0);
handler_base.c | 3162 | sprintf("%d:%d:%d", x, y, z);
handler_base.c | 3224 | sizeof(types);
handler_base.c | 3251 | sizeof(types);
handler_base.c | 3335 | clone_object(TERRAIN_MAP_REGION_RECTANGULAR);
handler_base.c | 3336 | add_feature_position(x, y, width, height);
handler_base.c | 3337 | clone_object(TERRAIN_MAP_FEATURE_BASE);
handler_base.c | 3338 | set_region(region);
handler_base.c | 3339 | set_max_day_range(range);
handler_base.c | 3340 | set_max_night_range(range);
handler_base.c | 3393 | clone_object(TERRAIN_MAP_REGION_RECTANGULAR);
handler_base.c | 3394 | add_feature_position(x, y, width, height);
handler_base.c | 3395 | clone_object(TERRAIN_MAP_FEATURE_BASE);
handler_base.c | 3396 | set_region(region);
handler_base.c | 3397 | set_max_day_range(range);
handler_base.c | 3398 | set_max_night_range(range);
handler_base.c | 3427 | clone_object(TERRAIN_MAP_REGION_POLYGON);
handler_base.c | 3428 | add_vertex(12, 13);
handler_base.c | 3429 | add_vertex(14,15);
handler_base.c | 3430 | add_vertex(17,18);
handler_base.c | 3454 | clone_object(TERRAIN_MAP_FEATURE_BASE);
handler_base.c | 3455 | set_region(region);
handler_base.c | 3456 | set_max_day_range(range);
handler_base.c | 3457 | set_max_night_range(range);
handler_base.c | 3485 | clone_object(TERRAIN_MAP_REGION_POLYGON);
handler_base.c | 3486 | add_vertex(12, 13);
handler_base.c | 3487 | add_vertex(14,15);
handler_base.c | 3488 | add_vertex(17,18);
handler_base.c | 3505 | set_distance_multiplier(_real_coords->xdiff);
handler_base.c | 3578 | map_delete(_features, title);
handler_base.c | 3585 | remove_feature(title);
handler_base.c | 3588 | map_delete(_feature_rooms, title);
handler_base.c | 3613 | sprintf("%d:%d", x, y);
handler_base.c | 3628 | add_zones("*", ({ "zone2", "zone1" }));
handler_base.c | 3648 | dest_me();
handler_base.c | 3653 | setup_area_map();
handler_base.c | 3673 | sizeof(line);
handler_base.c | 3700 | sizeof(line);
handler_base.c | 3710 | printf("Unable to open %O\n", map_path);
handler_base.c | 3722 | to_int(x_str);
handler_base.c | 3723 | to_int(y_str);
handler_base.c | 3724 | to_int(z_str);
handler_base.c | 3730 | query_room(x, y, z);
handler_base.c | 3743 | query_terrain_from_real_coord(x, y, z);
handler_base.c | 3747 | query_char_map(our->x, our->y);
handler_base.c | 3749 | debug_printf("Unable to load room at %d %d (%d %d)\n", our->x, our->y, x, y);
handler_base.c | 3757 | sprintf("%s:%d:%d:%d", base_name(this_object()), our->x, our->y, our->z);
handler_base.c | 3784 | dest_me();
handler_base.c | 3788 | destruct(this_object());
air_base.c | 37 | set_not_replaceable(1);
air_base.c | 38 | create();
air_base.c | 39 | create();
air_base.c | 43 | init();
air_base.c | 44 | init();
air_base.c | 51 | query_dest_other(exit);
air_base.c | 52 | query_dest_other(exit, data);
air_base.c | 59 | query_dest_dir(thing);
air_base.c | 60 | query_dest_dir(data);
air_base.c | 65 | stats() + terrain_room::stats();
geometry.c | 37 | to_float(sy2 - sy1) * to_float(lx2 - lx1) - to_float(sx2 - sx1) * to_float(ly2 - ly1);
geometry.c | 41 | to_float(lx2 - lx1) * to_float(ly1 - sy1) - to_float(ly2 - ly1) * to_float(lx1 - sx1);
geometry.c | 46 | to_float(sx2 - sx1) * to_float(ly1 - sy1) - to_float(sy2 - sy1) * to_float(lx1 - sx1);
geometry.c | 48 | printf("%O %O %O (%O %O)\n", den, ua, ub, ua / den, ub / den);
geometry.c | 49 | new(class point);
geometry.c | 50 | to_int(ua * (lx2 - lx1));
geometry.c | 51 | to_int(ub * (ly2 - ly1));
geometry.c | 52 | printf("%O\n", p);
geometry.c | 79 | to_float(x1 - x2);
geometry.c | 80 | to_float(y1 - y2);
geometry.c | 81 | to_float(point_x - x2);
geometry.c | 82 | to_float(point_y - y2);
geometry.c | 86 | sqrt(pow(x2 - point_x, 2) + pow(y2 - point_y, 2));
geometry.c | 91 | sqrt(pow(x1 - point_x, 2) + pow(y1 - point_y, 2));
geometry.c | 97 | sqrt(pow(vm_x - point_x, 2) + pow(vm_y - point_y, 2));
geometry.c | 100 | to_int(distance);
geometry.c | 139 | to_float(x2_1) - to_float(x1_1);
geometry.c | 140 | to_float(y2_1) - to_float(y1_1);
geometry.c | 141 | to_float(x2_2) - to_float(x1_2);
geometry.c | 142 | to_float(y2_2) - to_float(y1_2);
geometry.c | 143 | to_float(x1_1) - to_float(x1_2);
geometry.c | 144 | to_float(y1_1) - to_float(y1_2);
geometry.c | 193 | if ((-d + b) >
geometry.c | 205 | printf("%O / %O = %O, %O / %O = %O\n", sn, sd, sc, tn, td, tc);
geometry.c | 210 | printf("%O + %O = %O -- %O %O\n", dpx * dpx, dpy * dpy, dpx * dpx + dpy * dpy, sqrt(dpx * dpx + dpy * dpy), to_int(sqrt(dpx * dpx + dpy * dpy)));
geometry.c | 212 | sqrt(dpx * dpx + dpy * dpy);
geometry.c | 214 | to_int(pow(2, 30));
geometry.c | 217 | to_int(sqrt(dpx  * dpx + dpy * dpy));
simple_feature.c | 61 | query_range_offset() ;
simple_feature.c | 68 | query_distance_str(dist * _distance_multiplier) + " to the " + direc });
simple_feature.c | 72 | if (sizeof(bits) >
simple_feature.c | 89 | query_range_offset();
simple_feature.c | 98 | if (sizeof(bits) >
water_inside_base.c | 41 | set_not_replaceable(1);
water_inside_base.c | 42 | create();
water_inside_base.c | 43 | create();
water_inside_base.c | 47 | init();
water_inside_base.c | 48 | init();
water_inside_base.c | 55 | query_dest_other(exit);
water_inside_base.c | 56 | query_dest_other(exit, data);
water_inside_base.c | 63 | query_dest_dir(thing);
water_inside_base.c | 64 | query_dest_dir(data);
water_inside_base.c | 69 | stats() + terrain_room::stats();
water_inside_base.c | 82 | this_object();
water_inside_base.c | 84 | file_name(this_object());
water_inside_base.c | 86 | load_object(dest_path);
water_inside_base.c | 88 | query_surface_room();
water_inside_base.c | 90 | query_surface_room();
water_inside_base.c | 96 | file_name(this_object());
water_inside_base.c | 99 | load_object(above_path);
water_inside_base.c | 104 | to_float(above->query_water_surface_light());
water_inside_base.c | 106 | to_float(above->query_my_light());
water_inside_base.c | 109 | to_float(-query_terrain_coords()[2]);
water_inside_base.c | 110 | to_int(their_light * pow(their_clarity, our_depth));
water_outside_base.c | 41 | set_not_replaceable(1);
water_outside_base.c | 42 | create();
water_outside_base.c | 43 | create();
water_outside_base.c | 47 | init();
water_outside_base.c | 48 | init();
water_outside_base.c | 55 | query_dest_other(exit);
water_outside_base.c | 56 | query_dest_other(exit, data);
water_outside_base.c | 63 | query_dest_dir(thing);
water_outside_base.c | 64 | query_dest_dir(data);
water_outside_base.c | 69 | stats() + terrain_room::stats();
water_outside_base.c | 82 | this_object();
water_outside_base.c | 84 | file_name(this_object());
water_outside_base.c | 86 | load_object(dest_path);
water_outside_base.c | 88 | query_surface_room();
water_outside_base.c | 90 | query_surface_room();
water_outside_base.c | 96 | file_name(this_object());
water_outside_base.c | 99 | load_object(above_path);
water_outside_base.c | 104 | to_float(above->query_water_surface_light());
water_outside_base.c | 106 | to_float(above->query_my_light());
water_outside_base.c | 109 | to_float(-query_terrain_coords()[2]);
water_outside_base.c | 110 | to_int(their_light * pow(their_clarity, our_depth));
water_outside_base.c | 134 | query_water() || !second_type->query_water()));
inside_base.c | 41 | set_not_replaceable(1);
inside_base.c | 42 | create();
inside_base.c | 43 | create();
inside_base.c | 47 | init();
inside_base.c | 48 | init();
inside_base.c | 55 | query_dest_other(exit);
inside_base.c | 56 | query_dest_other(exit, data);
inside_base.c | 63 | query_dest_dir(thing);
inside_base.c | 64 | query_dest_dir();
inside_base.c | 68 | stats() + terrain_room::stats();
feature_local.c | 14 | do_setup();
feature_local.c | 15 | do_reset();
distance_str.c | 67 | query_distance_str_int(dist, 1);
distance_str.c | 76 | query_distance_str_int(dist, 0);
outside_base.c | 37 | set_not_replaceable(1);
outside_base.c | 39 | create();
outside_base.c | 40 | create();
outside_base.c | 44 | this_object()->setup();
outside_base.c | 45 | this_object()->reset();
outside_base.c | 50 | init();
outside_base.c | 51 | init();
outside_base.c | 58 | query_dest_other(exit);
outside_base.c | 59 | query_dest_other(exit, data);
outside_base.c | 66 | query_dest_dir(thing);
outside_base.c | 67 | query_dest_dir(data);
outside_base.c | 72 | stats() + terrain_room::stats();
outside_base.c | 76 | dest_me();
outside_base.c | 77 | dest_me();
region_rect.c | 75 | sqrt(pow(x - h, 2) + pow(y - v, 2));
region_rect.c | 87 | return ([ ]);
region_rect.c | 90 | return ([ direc : to_int(min_distance) ]);
region_rect.c | 95 | destruct(this_object());
carriage.c | 42 | do_ring();
carriage.c | 43 | query_environ_long();
carriage.c | 64 | create();
carriage.c | 67 | set_light(60);
carriage.c | 68 | set_keep_room_loaded(1);
carriage.c | 69 | set_short( "inside a carriage" );
carriage.c | 70 | add_property( "no teleport", 1 );
carriage.c | 72 | add_property("determinate", "");
carriage.c | 73 | add_property("no map", 1);
carriage.c | 74 | add_property("no godmother", 1);
carriage.c | 76 | add_item("window", (: query_environ_long :) );
carriage.c | 80 | clone_object("/std/object");
carriage.c | 81 | set_name("bell");
carriage.c | 82 | set_short("bell");
carriage.c | 83 | add_property("there","hanging here");
carriage.c | 87 | reset_get();
carriage.c | 88 | reset_drop();
carriage.c | 89 | move( this_object() );
carriage.c | 92 | this_object()->setup();
carriage.c | 93 | this_object()->reset();
carriage.c | 101 | this_player()->add_command("ring", _bell, "<direct:object>", (: do_ring :) );
carriage.c | 103 | init();
carriage.c | 150 | query_stop_info() { return ({ _current_stop, _next_stop });
carriage.c | 166 | sizeof(_route_info->stops);
carriage.c | 168 | sizeof(_route_info->stops);
carriage.c | 192 | log_file("NEW_CARRIAGE","%O: Invalid name: %O", this_object(),_carriage_name);
carriage.c | 197 | log_file("NEW_CARRIAGE","%O: Invalid class: %O", this_object(), _route_info);
carriage.c | 201 | call_out("make_stop",5);
carriage.c | 203 | sizeof(_route_info->stops);
carriage.c | 206 | create_carriage_driver();
carriage.c | 208 | route_setup(_carriage_name);
carriage.c | 209 | move(this_object());
carriage.c | 229 | query_stop_name(_route_info->stops[ _current_stop ]->id);
carriage.c | 230 | query_stop_location(_route_info->stops[ _current_stop ]->id);
carriage.c | 233 | query_stop_delay(_route_info->stops[ _current_stop ]->id);
carriage.c | 235 | query_stop_name(_route_info->stops[ _next_stop ]->id);
carriage.c | 236 | query_stop_location(_route_info->stops[ _next_stop ]->id);
carriage.c | 238 | load_object(path);
carriage.c | 242 | this_object());
carriage.c | 245 | call_out("make_stop", 1);
carriage.c | 255 | arrived_at_to_carriage( name, _n_name );
carriage.c | 257 | tell_room(this_object(), "The carriage has arrived at " + name + ".\n");
carriage.c | 262 | clone_object("/std/object");
carriage.c | 263 | set_name("carriage");
carriage.c | 264 | add_property("determinate", "the " );
carriage.c | 265 | set_short(_carriage_name + " Carriage");
carriage.c | 267 | lower_case($1) :) ) );
carriage.c | 271 | reset_get();
carriage.c | 274 | move( _outside );
carriage.c | 275 | add_property("there","waiting here");
carriage.c | 278 | add_exit("leave carriage", path, "corridor");
carriage.c | 287 | add_alias("out", "leave carriage");
carriage.c | 296 | do_command("leave carriage");
carriage.c | 302 | arrived_at_to_stop( capitalize(_n_name) );
carriage.c | 312 | add_exit(_exit_name, this_object(), "corridor");
carriage.c | 313 | explode(lower_case(_carriage_name), " ");
carriage.c | 315 | add_alias("enter " + np + " carriage", _exit_name);
carriage.c | 316 | add_alias("enter " + np + "s carriage", _exit_name);
carriage.c | 318 | add_alias("enter carriage", _exit_name);
carriage.c | 344 | base_name( _outside ) });
carriage.c | 352 | stop_room_chats();
carriage.c | 355 | call_out("give_warning", stop_time - 30, name, _n_name);
carriage.c | 356 | call_out("move_on", stop_time );
carriage.c | 360 | check_cannot_leave_carriage(person);
carriage.c | 367 | leaving_again_to_stop(next_stop_name);
carriage.c | 379 | do_command("mutter");
carriage.c | 392 | next_stop_from_carriage(_n_name);
carriage.c | 393 | tell_room(this_object(), "The carriage starts moving again.\n");
carriage.c | 395 | tell_room(this_object(), "The carriage leaves the current stop.\n");
carriage.c | 398 | remove_exit("leave carriage");
carriage.c | 399 | remove_alias("out", "leave carriage");
carriage.c | 405 | remove_exit(_exit_name);
carriage.c | 406 | explode(lower_case(_carriage_name), " ");
carriage.c | 408 | remove_alias("enter " + np + " carriage", _exit_name);
carriage.c | 409 | remove_alias("enter " + np + "s carriage", _exit_name);
carriage.c | 411 | remove_alias("enter carriage", _exit_name);
carriage.c | 414 | move("/std/room");
carriage.c | 416 | modify_item("carriage", 0);
carriage.c | 421 | sizeof(_route_info->stops);
carriage.c | 437 | this_object()->check_chat();
carriage.c | 439 | call_out("make_stop", 30 );
carriage.c | 449 | remove_exit(_exit_name);
carriage.c | 450 | explode(lower_case(_carriage_name), " ");
carriage.c | 452 | remove_alias("enter " + np + " carriage", _exit_name);
carriage.c | 453 | remove_alias("enter " + np + "s carriage", _exit_name);
carriage.c | 455 | remove_alias("enter carriage", _exit_name);
carriage.c | 456 | remove_extra_look(this_object());
carriage.c | 457 | modify_item("carriage", 0);
carriage.c | 460 | if (_fake_carriage) _fake_carriage->dest_me();
carriage.c | 461 | if (_bell) _bell->dest_me();
carriage.c | 462 | if (_car_driver) _car_driver->dest_me();
carriage.c | 464 | query_stop_location(_route_info->stops[ _current_stop ]->id);
carriage.c | 473 | dest_me();
carriage.c | 479 | query_stop_location(_route_info->stops[ _current_stop ]->id);
carriage.c | 483 | filter(call_out_info(),(: $1[0] == this_object() :));
carriage.c | 493 | bell_ring(_n_name);
carriage.c | 495 | tell_room(this_object(), "Nothing much happens.\n");
carriage.c | 500 | call_out("move_on",2);
carriage.c | 502 | do_command(":wakes with a start.");
carriage.c | 504 | tell_object( this_player(), "The carriage starts rolling again.\n");
carriage.c | 515 | long();
testhandler.c | 31 | load_data();
testhandler.c | 32 | map_carriages();
testhandler.c | 35 | unguarded((: save_object(_save_file) :));
testhandler.c | 39 | seteuid(getuid());
testhandler.c | 41 | this_object()->setup();
testhandler.c | 60 | unguarded((: restore_object(_save_file) :));
testhandler.c | 64 | load_data();
testhandler.c | 65 | map_carriages();
testhandler.c | 87 | query_route_names() { return keys(_routesactual);
testhandler.c | 149 | debug_printf("No id for stop %O\n", data);
testhandler.c | 150 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
testhandler.c | 154 | debug_printf("No name for stop %O\n", data);
testhandler.c | 155 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
testhandler.c | 160 | log_file("COMPILE_ERROR", "Required path field not present for stop %s\n", name);
testhandler.c | 164 | new(class stop_details);
testhandler.c | 173 | save_file();
testhandler.c | 182 | debug_printf("No id for route %O\n", data);
testhandler.c | 183 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
testhandler.c | 187 | debug_printf("No colour for route %O\n", data);
testhandler.c | 188 | log_file("COMPILE_ERROR", "No name for stop %O\n", data);
testhandler.c | 193 | new(class route_details, stops : ({ }));
testhandler.c | 199 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
testhandler.c | 200 | log_file("COMPILE_ERROR", "Invalid data for route (%s) %O\n", name,  bing);
testhandler.c | 208 | save_file();
testhandler.c | 221 | parse_stop(fname, thing);
testhandler.c | 226 | parse_route(fname, thing);
testhandler.c | 230 | debug_printf("Unknown data area %s in %s\n", name, fname);
testhandler.c | 231 | log_file("COMPILE_ERROR", "Unknown data area %s in %s\n", name, fname);
testhandler.c | 237 | save_file();
testhandler.c | 238 | map_carriages();
testhandler.c | 250 | debug_printf("Scan for new data.");
testhandler.c | 261 | get_dir(fname + "/");
testhandler.c | 264 | filter(bits, (: $1[0] != '.' :));
testhandler.c | 265 | map(bits, (: $2 + "/" + $1 :), fname);
testhandler.c | 269 | debug_printf("Compiling: %s", fname);
testhandler.c | 276 | unguarded( (: stat(__FILE__)[1] :));
testhandler.c | 290 | scan_for_new_data();
testhandler.c | 322 | query_stop_name(loc->id);
testhandler.c | 330 | query_stop_location(loc->id);
testhandler.c | 331 | load_object(str);
testhandler.c | 334 | query_property("test pole");
testhandler.c | 336 | clone_object(_pole);
testhandler.c | 338 | move(room);
testhandler.c | 339 | add_property(ROOM_KEEP_PROP);
testhandler.c | 353 | copy(rods);
testhandler.c | 362 | clone_object( _carriage );
testhandler.c | 363 | make_carriage( route, new_rods, this_object() );
testhandler.c | 364 | setup();
testhandler.c | 366 | update_route( route, new_rods, this_object() );
testhandler.c | 367 | setup();
testhandler.c | 383 | query_carriage_on_route(route);
testhandler.c | 385 | file_name(ob) })  });
testhandler.c | 388 | query_multiple_short(_routesactual[route]->stoplist) })  });
testhandler.c | 389 | query_current_stop()->name })  });
testhandler.c | 390 | query_next_stop()->name })  });
testhandler.c | 392 | file_name(ob->query_outside()) }) });
testcar.c | 42 | do_ring();
testcar.c | 43 | query_environ_long();
testcar.c | 64 | create();
testcar.c | 67 | set_light(60);
testcar.c | 68 | set_keep_room_loaded(1);
testcar.c | 69 | set_short( "inside a carriage" );
testcar.c | 70 | add_property( "no teleport", 1 );
testcar.c | 72 | add_property("determinate", "");
testcar.c | 73 | add_property("no map", 1);
testcar.c | 74 | add_property("no godmother", 1);
testcar.c | 76 | add_item("window", (: query_environ_long :) );
testcar.c | 80 | clone_object("/std/object");
testcar.c | 81 | set_name("bell");
testcar.c | 82 | set_short("bell");
testcar.c | 83 | add_property("there","hanging here");
testcar.c | 87 | reset_get();
testcar.c | 88 | reset_drop();
testcar.c | 89 | move( this_object() );
testcar.c | 92 | this_object()->setup();
testcar.c | 93 | this_object()->reset();
testcar.c | 101 | this_player()->add_command("ring", _bell, "<direct:object>", (: do_ring :) );
testcar.c | 103 | init();
testcar.c | 150 | query_stop_info() { return ({ _current_stop, _next_stop });
testcar.c | 166 | sizeof(_route_info->stops);
testcar.c | 168 | sizeof(_route_info->stops);
testcar.c | 192 | log_file("NEW_CARRIAGE","%O: Invalid name: %O", this_object(),_carriage_name);
testcar.c | 197 | log_file("NEW_CARRIAGE","%O: Invalid class: %O", this_object(), _route_info);
testcar.c | 201 | call_out("make_stop",5);
testcar.c | 203 | sizeof(_route_info->stops);
testcar.c | 206 | create_carriage_driver();
testcar.c | 208 | route_setup(_carriage_name);
testcar.c | 209 | move(this_object());
testcar.c | 229 | query_stop_name(_route_info->stops[ _current_stop ]->id);
testcar.c | 230 | query_stop_location(_route_info->stops[ _current_stop ]->id);
testcar.c | 233 | query_stop_delay(_route_info->stops[ _current_stop ]->id);
testcar.c | 235 | query_stop_name(_route_info->stops[ _next_stop ]->id);
testcar.c | 236 | query_stop_location(_route_info->stops[ _next_stop ]->id);
testcar.c | 238 | load_object(path);
testcar.c | 242 | this_object());
testcar.c | 245 | call_out("make_stop", 1);
testcar.c | 255 | arrived_at_to_carriage( name, _n_name );
testcar.c | 257 | tell_room(this_object(), "The carriage has arrived at " + name + ".\n");
testcar.c | 262 | clone_object("/std/object");
testcar.c | 263 | set_name("carriage");
testcar.c | 264 | add_property("determinate", "the " );
testcar.c | 265 | set_short(_carriage_name + " Carriage");
testcar.c | 267 | lower_case($1) :) ) );
testcar.c | 271 | reset_get();
testcar.c | 274 | move( _outside );
testcar.c | 275 | add_property("there","waiting here");
testcar.c | 278 | add_exit("leave carriage", path, "corridor");
testcar.c | 287 | add_alias("out", "leave carriage");
testcar.c | 299 | arrived_at_to_stop( capitalize(_n_name) );
testcar.c | 301 | tell_room(this_object(), "The carriage's next stop is " + _n_name + ".\n");
testcar.c | 308 | add_exit(_exit_name, this_object(), "corridor");
testcar.c | 309 | explode(lower_case(_carriage_name), " ");
testcar.c | 311 | add_alias("enter " + np + " carriage", _exit_name);
testcar.c | 312 | add_alias("enter " + np + "s carriage", _exit_name);
testcar.c | 314 | add_alias("enter carriage", _exit_name);
testcar.c | 340 | base_name( _outside ) });
testcar.c | 348 | stop_room_chats();
testcar.c | 351 | call_out("give_warning", stop_time - 30, name, _n_name);
testcar.c | 352 | call_out("move_on", stop_time );
testcar.c | 356 | check_cannot_leave_carriage(person);
testcar.c | 363 | leaving_again_to_stop(next_stop_name);
testcar.c | 375 | do_command("mutter");
testcar.c | 381 | tell_room(this_object(), "The carriage leaves the current stop.\n");
testcar.c | 384 | remove_exit("leave carriage");
testcar.c | 385 | remove_alias("out", "leave carriage");
testcar.c | 391 | remove_exit(_exit_name);
testcar.c | 392 | explode(lower_case(_carriage_name), " ");
testcar.c | 394 | remove_alias("enter " + np + " carriage", _exit_name);
testcar.c | 395 | remove_alias("enter " + np + "s carriage", _exit_name);
testcar.c | 397 | remove_alias("enter carriage", _exit_name);
testcar.c | 400 | move("/std/room");
testcar.c | 402 | modify_item("carriage", 0);
testcar.c | 406 | next_stop_from_carriage(_n_name);
testcar.c | 410 | sizeof(_route_info->stops);
testcar.c | 426 | this_object()->check_chat();
testcar.c | 428 | call_out("make_stop", 30 );
testcar.c | 437 | remove_exit(_exit_name);
testcar.c | 438 | explode(lower_case(_carriage_name), " ");
testcar.c | 440 | remove_alias("enter " + np + " carriage", _exit_name);
testcar.c | 441 | remove_alias("enter " + np + "s carriage", _exit_name);
testcar.c | 443 | remove_alias("enter carriage", _exit_name);
testcar.c | 444 | remove_extra_look(this_object());
testcar.c | 445 | modify_item("carriage", 0);
testcar.c | 448 | if (_fake_carriage) _fake_carriage->dest_me();
testcar.c | 449 | if (_bell) _bell->dest_me();
testcar.c | 450 | if (_car_driver) _car_driver->dest_me();
testcar.c | 452 | query_stop_location(_route_info->stops[ _current_stop ]->id);
testcar.c | 461 | dest_me();
testcar.c | 467 | query_stop_location(_route_info->stops[ _current_stop ]->id);
testcar.c | 471 | filter(call_out_info(),(: $1[0] == this_object() :));
testcar.c | 481 | do_command("scowl");
testcar.c | 488 | call_out("move_on",2);
testcar.c | 489 | do_command(":wakes with a start.");
testcar.c | 490 | tell_object( this_player(), "The carriage starts rolling again.\n");
testcar.c | 501 | long();
carriage_pole.c | 3 | setup_route(string *ss, string c, string r);
carriage_pole.c | 8 | set_name( "pole" );
carriage_pole.c | 10 | set_short("wooden pole");
carriage_pole.c | 11 | add_adjective( "wooden" );
carriage_pole.c | 13 | set_long("This is a wooden pole.  It's fairly unexciting.\n");
carriage_pole.c | 14 | set_weight( 10000 );
carriage_pole.c | 20 | random(4)]));
carriage_pole.c | 21 | add_extra_look(this_object());
carriage_pole.c | 23 | reset_get();
carriage_pole.c | 40 | file_name(environment(this_object()));
carriage_pole.c | 61 | clone_object(__DIR__ + "carriage_note");
carriage_pole.c | 62 | setup_route(stops, colour, route, language);
carriage_pole.c | 63 | environment(this_object())->add_hidden_object(note);
carriage_pole.c | 65 | this_object());
carriage_pole.c | 69 | add_a($1) :)))) + " attached to it") ;
carriage_pole.c | 78 | sizeof(notes) > 1) ? " are" : " is") + " attached to the pole.\n") ;
carriage_note.c | 4 | setup_route(string* a, string b, string c, string d);
carriage_note.c | 8 | set_name( "note" );
carriage_note.c | 10 | set_short(  "Test note" ) ;
carriage_note.c | 14 | reset_get();
carriage_note.c | 16 | add_alias( "table" );
carriage_note.c | 25 | set_short(route + " table");
carriage_note.c | 26 | add_adjective(map(explode(route, " "), (: lower_case($1) :)));
carriage_note.c | 27 | add_adjective(colour);
carriage_note.c | 28 | add_alias("table");
carriage_note.c | 29 | add_alias("cardboard");
carriage_note.c | 30 | add_adjective(({"piece", "of", colour}));
handler.c | 31 | load_data();
handler.c | 32 | map_carriages();
handler.c | 35 | unguarded((: save_object(_save_file) :));
handler.c | 39 | seteuid(getuid());
handler.c | 41 | this_object()->setup();
handler.c | 60 | unguarded((: restore_object(_save_file) :));
handler.c | 64 | load_data();
handler.c | 65 | map_carriages();
handler.c | 87 | query_route_names() { return keys(_routesactual);
handler.c | 149 | debug_printf("No id for stop %O\n", data);
handler.c | 150 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
handler.c | 154 | debug_printf("No name for stop %O\n", data);
handler.c | 155 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
handler.c | 160 | log_file("COMPILE_ERROR", "Required path field not present for stop %s\n", name);
handler.c | 164 | new(class stop_details);
handler.c | 173 | save_file();
handler.c | 182 | debug_printf("No id for route %O\n", data);
handler.c | 183 | log_file("COMPILE_ERROR", "No name for npc %O\n", data);
handler.c | 187 | debug_printf("No colour for route %O\n", data);
handler.c | 188 | log_file("COMPILE_ERROR", "No name for stop %O\n", data);
handler.c | 193 | new(class route_details, stops : ({ }));
handler.c | 199 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
handler.c | 200 | log_file("COMPILE_ERROR", "Invalid data for route (%s) %O\n", name,  bing);
handler.c | 208 | save_file();
handler.c | 221 | parse_stop(fname, thing);
handler.c | 226 | parse_route(fname, thing);
handler.c | 230 | debug_printf("Unknown data area %s in %s\n", name, fname);
handler.c | 231 | log_file("COMPILE_ERROR", "Unknown data area %s in %s\n", name, fname);
handler.c | 237 | save_file();
handler.c | 238 | map_carriages();
handler.c | 250 | debug_printf("Scan for new data.");
handler.c | 261 | get_dir(fname + "/");
handler.c | 264 | filter(bits, (: $1[0] != '.' :));
handler.c | 265 | map(bits, (: $2 + "/" + $1 :), fname);
handler.c | 269 | debug_printf("Compiling: %s", fname);
handler.c | 276 | unguarded( (: stat(__FILE__)[1] :));
handler.c | 290 | scan_for_new_data();
handler.c | 322 | query_stop_name(loc->id);
handler.c | 330 | query_stop_location(loc->id);
handler.c | 331 | load_object(str);
handler.c | 334 | query_property("carriage pole");
handler.c | 336 | clone_object(_pole);
handler.c | 338 | move(room);
handler.c | 339 | add_property(ROOM_KEEP_PROP);
handler.c | 353 | copy(rods);
handler.c | 362 | clone_object( _carriage );
handler.c | 363 | make_carriage( route, new_rods, this_object() );
handler.c | 364 | setup();
handler.c | 366 | update_route( route, new_rods, this_object() );
handler.c | 367 | setup();
handler.c | 383 | query_carriage_on_route(route);
handler.c | 385 | file_name(ob) })  });
handler.c | 388 | query_multiple_short(_routesactual[route]->stoplist) })  });
handler.c | 389 | query_current_stop()->name })  });
handler.c | 390 | query_next_stop()->name })  });
handler.c | 392 | file_name(ob->query_outside()) }) });
club_room_controller.c | 26 | setup_discussions();
club_room_controller.c | 27 | save_me();
club_room_controller.c | 28 | load_me();
club_room_controller.c | 34 | do_setup();
club_room_controller.c | 36 | call_out((: load_me() :), 0);
club_room_controller.c | 47 | create_club_board(club);
club_room_controller.c | 62 | remove_club_board(club);
club_room_controller.c | 98 | remove_board_from(_club);
club_room_controller.c | 101 | add_board_to(club);
club_room_controller.c | 124 | call_out((: setup_discussions :), 1);
club_room_controller.c | 125 | save_me();
club_room_controller.c | 148 | add_board_to(_club);
club_room_controller.c | 150 | remove_board_from(_club);
club_room_controller.c | 172 | undefinedp(_options[name]);
club_room_controller.c | 191 | map_delete(_options, name);
club_room_controller.c | 226 | new(class ownership);
club_room_controller.c | 231 | new(class ownership);
club_room_controller.c | 236 | save_me();
club_room_controller.c | 260 | save_me();
club_room_controller.c | 308 | query_multiple_short(nom);
club_room_controller.c | 311 | sizeof(nom) >
club_room_controller.c | 382 | query_multiple_short(nom);
club_room_controller.c | 385 | sizeof(nom) >
club_room_controller.c | 418 | map_delete(frog->choices, arg1);
club_room_controller.c | 425 | map_delete(frog->choices, name);
club_room_controller.c | 434 | map_delete(frog->choices, CLUB_ROOM_POSITION_START + arg1);
club_room_controller.c | 442 | map_delete(frog->choices, CLUB_ROOM_POSITION_START + arg1);
club_room_controller.c | 554 | map_delete(frog->choices, arg1);
club_room_controller.c | 561 | map_delete(frog->choices, CLUB_ROOM_POSITION_START + arg1);
club_room_controller.c | 569 | map_delete(frog->choices, CLUB_ROOM_POSITION_START + arg1);
club_room_controller.c | 598 | tell_creator("pinkfish", "Loading " + _save_file + "\n");
club_room_controller.c | 600 | unguarded( (: restore_object(_save_directory + CLUB_ROOM_CONTROLLER_SAVE_FILE ) :) );
club_room_controller.c | 601 | tell_creator("pinkfish", "%O, %O, %O\n", _options, _club, _ownership);
club_room_controller.c | 610 | unguarded( (: save_object(_save_directory + CLUB_ROOM_CONTROLLER_SAVE_FILE ) :) );
club_room_controller.c | 640 | file_name(fname);
area.c | 95 | query(string s) { return fetch_variable(s);
area.c | 100 | set_origin(int i, int *o) { areas[i]->origin = copy(o);
area.c | 101 | query_origin(int i) { return copy(areas[i]->origin);
area.c | 106 | create();
area.c | 111 | set_keep_room_loaded(1);
area.c | 114 | this_object()->setup();
area.c | 115 | this_object()->reset();
area.c | 123 | allocate(3);
area.c | 141 | copy(s);
area.c | 147 | query_size(int i) { return copy(areas[i]->size);
area.c | 152 | load_image(map_file, rle);
area.c | 155 | copy(areas[i]->bbox[0]);
area.c | 159 | quantize_to_origin(nw, i);
area.c | 166 | load_image(map_file, rle);
area.c | 169 | copy(areas[i]->bbox[0]);
area.c | 173 | quantize_to_origin(nw, i);
area.c | 178 | new(class AREA_INFO) });
area.c | 186 | error("Origin unset - setting to (0,0,0).\n");
area.c | 189 | copy(vs);
area.c | 191 | copy(vs[0]), copy(vs[0]) });
area.c | 197 | sizeof(areas[a]->vertices);
area.c | 233 | printf("Outside (bbox)...\n");
area.c | 238 | allocate(2);
area.c | 239 | sizeof(areas[a]->vertices);
area.c | 248 | printf("Outside (west)...\n");
area.c | 252 | printf("Outside (east)...\n");
area.c | 256 | printf("Outside (north)...\n");
area.c | 334 | return (crossings & 1);
area.c | 342 | clone_object(areas[a]->base);
area.c | 345 | set_room_size(areas[a]->size);
area.c | 347 | set_co_ord(coord_q);
area.c | 358 | add_exit(dir, "", "path");
area.c | 362 | add_property("image_cell", ({ i, j }));
area.c | 375 | sprintf("%d:%d:%d", coord[0], coord[1], coord[2]);
area.c | 381 | clone_room(ac, coord, coord_s);
area.c | 383 | sizeof(areas);
area.c | 385 | quantize_to_origin(coord, a);
area.c | 387 | sprintf("%d:%d:%d", coord_q[0], coord_q[1], coord_q[2]);
area.c | 393 | clone_room(ac, coord_q, coord_s);
area.c | 398 | clone_room(a, coord_q, coord_s);
area.c | 414 | file_name(this_object()), r, d, direc);
area.c | 419 | query_co_ord();
area.c | 421 | query_actual_room_size();
area.c | 423 | query_room_size();
area.c | 429 | allocate(3);
area.c | 430 | sizeof(areas);
area.c | 435 | sprintf("%d:%d:%d", coord_r[0], coord_r[1], coord_r[2]);
area.c | 436 | load_object(_handler + ":" + coord_s);
area.c | 443 | file_name(this_object()), room, coord_s);
area.c | 452 | file_name(this_object()), ac, coord_s);
area.c | 454 | clone_room(ac, coord_r, coord_s);
area.c | 456 | quantize_to_origin(coord_r, a);
area.c | 458 | sprintf("%d:%d:%d", coord_q[0], coord_q[1], coord_q[2]);
area.c | 464 | clone_room(ac, coord_q, coord_s);
area.c | 469 | clone_room(a, coord_q, coord_s);
area.c | 477 | this_player()->move_with_look(find_room_at_coord(coord));
area.c | 482 | environment(this_player()), d, direc));
area.c | 487 | printf("-------- Height:\n");
area.c | 488 | print_image(areas[a]->height);
area.c | 491 | printf("-------- Exits:\n");
area.c | 492 | print_image(areas[a]->exits);
area.c | 523 | write(l);
topography.c | 85 | query(string s) { return fetch_variable(s);
topography.c | 89 | inc_setup();
topography.c | 90 | create();
topography.c | 91 | dec_setup();
topography.c | 93 | do_setup();
topography.c | 145 | new(class bounding_box);
topography.c | 159 | load_object(h);
topography.c | 160 | set_handler(base_name(this_object()));
topography.c | 164 | error(sprintf("Couldn't find area handler %s.\n", h));
topography.c | 167 | set_handler(base_name(this_object()));
topography.c | 170 | error(sprintf("Couldn't find area handler %O.\n", h));
topography.c | 184 | load_object(h);
topography.c | 185 | set_handler(base_name(this_object()));
topography.c | 189 | error(sprintf("Couldn't find interroom handler %s.\n", h));
topography.c | 192 | set_handler(base_name(this_object()));
topography.c | 195 | error(sprintf("Couldn't find interroom handler %O.\n", h));
topography.c | 212 | new(class FIXED_INFO);
topography.c | 217 | sizeof(_fixed_rooms);
topography.c | 231 | load_object(f);
topography.c | 233 | error(sprintf("Couldn't load fixed room %s.\n", f));
topography.c | 237 | bounding_box(of->query_co_ord(), of->query_room_size()));
topography.c | 248 | bounding_box(of->query_co_ord(), of->query_room_size()));
topography.c | 260 | add_internal_fixed_room(f, 0, coord, bounding_box(coord, size));
topography.c | 271 | previous_object();
topography.c | 272 | clone_object(FIXED_SHADOW);
topography.c | 274 | error(sprintf("Couldn't create shadow for fixed room %O.\n", r));
topography.c | 277 | attach(r);
topography.c | 278 | set_area_handler(file_name(this_object()));
topography.c | 280 | error(sprintf("Couldn't find entry for fixed room %O.\n", r));
topography.c | 282 | set_co_ord(_fixed_rooms[i]->coord);
topography.c | 283 | tell_creator("jeremy", "%O coords = %O\n", r, r->query_co_ord());
topography.c | 298 | file_name(this_object()), coord);
topography.c | 301 | sizeof(_fixed_rooms);
topography.c | 304 | load_object(_fixed_rooms[i]->path);
topography.c | 310 | sizeof(_iroom_handlers);
topography.c | 316 | sizeof(_area_handlers);
topography.c | 335 | find_room_at_coord(({ x, y, z }));
topography.c | 357 | file_name(this_object()), r, d, direc);
topography.c | 362 | query_co_ord();
topography.c | 364 | query_actual_room_size();
topography.c | 366 | query_room_size();
topography.c | 372 | allocate(3);
topography.c | 381 | sizeof(_fixed_rooms);
topography.c | 384 | load_object(_fixed_rooms[i]->path);
topography.c | 387 | evaluate(_fixed_rooms[i]->ob->query_topo_barrier(direc));
topography.c | 392 | notify_fail(msg);
topography.c | 401 | bounding_box(coord, size_r);
topography.c | 402 | sizeof(_iroom_handlers);
topography.c | 403 | find_room_at_crossing(coord, coord_r);
topography.c | 404 | tell_creator("rhinehold", "ob = %O\n", ob);
topography.c | 410 | file_name(this_object()), _iroom_handlers[i], ob);
topography.c | 432 | if ((s = sizeof(irooms)) >
topography.c | 440 | query_co_ord();
topography.c | 454 | sizeof(_area_handlers);
topography.c | 459 | file_name(this_object()), _area_handlers[i], ob);
topography.c | 474 | this_player()->move_with_look(find_room_at_coord(coord));
topography.c | 493 | find_room_at_coord( ({ x, y, 0 }) );
topography.c | 499 | query_room_letter();
interroom.c | 92 | bbox(int *coord_a, int *coord_b);
interroom.c | 93 | in_bbox(int *coord_a, mixed bbox);
interroom.c | 124 | query(string s) { return fetch_variable(s);
interroom.c | 164 | copy(s);
interroom.c | 172 | allocate(sizeof(milestones));
interroom.c | 173 | allocate(sizeof(milestones)-1);
interroom.c | 174 | allocate(sizeof(milestones)-1);
interroom.c | 175 | sizeof(iroom_info);
interroom.c | 176 | new(class IROOM_INFO);
interroom.c | 177 | allocate(2);
interroom.c | 211 | copy(c);
interroom.c | 213 | bbox(milestone_coords[i-1], milestone_coords[i]);
interroom.c | 230 | copy(iroom_info[i-1]->bbox);
interroom.c | 247 | bbox(milestone_coords[i], milestone_coords[i+1]);
interroom.c | 264 | copy(iroom_info[i]->bbox);
interroom.c | 280 | printf("Setting room %d to %O\n", i, c);
interroom.c | 303 | sizeof(milestones) + ").\n");
interroom.c | 306 | sizeof(s);
interroom.c | 326 | sizeof(milestones) + ").\n");
interroom.c | 329 | sizeof(s);
interroom.c | 330 | allocate(3);
interroom.c | 340 | error("Illegal room size given (" + i + ").\n");
interroom.c | 354 | i (ie, to the "left");
interroom.c | 397 | sizeof(irooms[i]);
interroom.c | 398 | tell_creator("jeremy", "Checking irooms[%d][%d]\n", i, k);
interroom.c | 400 | all_inventory(irooms[i][k]);
interroom.c | 414 | sizeof(irooms[i]);
interroom.c | 420 | tell_creator("jeremy", "Checking irooms[%d][%d]\n", i, k);
interroom.c | 422 | all_inventory(irooms[i][k]);
interroom.c | 442 | coordinates (min, max);
interroom.c | 446 | allocate(2);
interroom.c | 447 | allocate(3);
interroom.c | 448 | allocate(3);
interroom.c | 499 | error("Interroom sizes don't match diagonal.\n");
interroom.c | 517 | clone_object(iroom_info[i]->base);
interroom.c | 519 | set_room_size(iroom_info[i]->size);
interroom.c | 520 | set_co_ord(icoord);
interroom.c | 521 | set_milestone_index( ({ i, idx }) );
interroom.c | 522 | add_exit(iroom_info[i]->exits[0], milestones[i], "road");
interroom.c | 523 | add_exit(iroom_info[i]->exits[1], milestones[i+1], "road");
interroom.c | 524 | add_milestone_dir(iroom_info[i]->exits[0]);
interroom.c | 525 | add_milestone_dir(iroom_info[i]->exits[1]);
interroom.c | 526 | add_topo_exits();
interroom.c | 528 | add_topo_exits_int();
interroom.c | 542 | error("This room (" + file_name(ms) + ") is not a milestone.\n");
interroom.c | 545 | set_milestone_index(file_name(this_object()), i);
interroom.c | 546 | query_co_ord();
interroom.c | 548 | set_milestone_coords(i, coord);
interroom.c | 553 | static_query_co_ord(file_name(ms));
interroom.c | 554 | set_milestone_coords(i, coord);
interroom.c | 556 | set_co_ord(coord);
interroom.c | 561 | query_dest_dir();
interroom.c | 574 | add_milestone_dir(file_name(this_object()), 0);
interroom.c | 577 | add_milestone_dir(file_name(this_object()), dir[idir-1]);
interroom.c | 581 | add_milestone_dir(file_name(this_object()), 0);
interroom.c | 590 | add_milestone_dir(file_name(this_object()), 0);
interroom.c | 593 | add_milestone_dir(file_name(this_object()), dir[idir-1]);
interroom.c | 619 | undefinedp(hint_idx)?"NULL":hint_idx+"");
interroom.c | 633 | sizeof(iroom_info);
interroom.c | 644 | file_name(this_object()), i, i+1, bbox);
interroom.c | 650 | file_name(this_object()), i, i+1);
interroom.c | 659 | file_name(this_object()), i, i+1);
interroom.c | 665 | to_float(milestone_coords[i][1] - milestone_coords[i+1][1]);
interroom.c | 671 | file_name(this_object()), i, i+1);
interroom.c | 683 | file_name(this_object()));
interroom.c | 707 | file_name(this_object()), idx);
interroom.c | 711 | load_object(milestones[i]);
interroom.c | 714 | allocate(number_of_irooms(i));
interroom.c | 718 | load_object(milestones[i+1]);
interroom.c | 726 | clone_iroom(i, idx, icoord);
interroom.c | 754 | file_name(this_object()), i, idx);
interroom.c | 764 | load_object(milestones[i]);
interroom.c | 767 | allocate(number_of_irooms(i));
interroom.c | 770 | load_object(milestones[i+1]);
interroom.c | 795 | clone_iroom(i, idx, icoord);
interroom.c | 856 | file_name(this_object()), coord_a, coord_b);
interroom.c | 863 | sizeof(iroom_info);
interroom.c | 868 | tell_creator("jeremy", "Boxes don't overlap (%d).\n", i);
interroom.c | 874 | allocate(3);
interroom.c | 875 | allocate(3);
interroom.c | 899 | tell_creator("jeremy", "Determinant is 0.\n");
interroom.c | 902 | allocate(3);
interroom.c | 903 | to_int(floor((a*f - e*c)/det + 0.5));
interroom.c | 904 | to_int(floor((e*d - b*f)/det + 0.5));
interroom.c | 915 | find_room_at_coord(isect, i);
interroom.c | 919 | file_name(this_object()), ret);
interroom.c | 924 | error("Couldn't find a room where there should be one!\n");
interroom.c | 936 | creator_file(file_name(this_object()));
interroom.c | 937 | seteuid(std_euid);
interroom.c | 939 | create();
interroom.c | 943 | this_object()->setup();
interroom.c | 944 | this_object()->reset();
interroom.c | 948 | set_keep_room_loaded(1);
interroom.c | 957 | unguarded( (: save_object, save_file :) );
interroom.c | 959 | dest_me();
interroom.c | 967 | this_player()->move_with_look(find_room_at_coord(coord));
interroom.c | 974 | this_player()->move_with_look(find_room_at_index(i, j));
interroom.c | 981 | this_player()->move_with_look(find_room_at_crossing(a, b));
interroom.c | 989 | 0 (or unspecified);
interroom.c | 996 | file_name(this_object()), idx, callouts));
interroom.c | 1001 | rm(save_file);
interroom.c | 1002 | this_object()->setup();
interroom.c | 1004 | this_player();
interroom.c | 1009 | call_out("recalc_milestones", 0, idx, callouts+1, tp);
interroom.c | 1014 | setup_milestone(ms);
interroom.c | 1021 | call_out("recalc_milestones", 0, idx, 0, tp);
interroom.c | 1024 | tell_object(tp, "IRoom info successfully recalculated.\n");
interroom.c | 1037 | sizeof(milestones);
interroom.c | 1040 | implode( explode( ms, "/" )[ 0..<2 ], "/" );
interroom.c | 1045 | del(directory, troom);
interroom.c | 1046 | printf("Deleting %s in %s from map handler.\n", directory, troom);
interroom.c | 1059 | sizeof(milestone_coords);
interroom.c | 1066 | sizeof(iroom_info);
fine.c | 26 | load_me();
fine.c | 30 | set_short("fine");
fine.c | 31 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "fine");
fine.c | 32 | seteuid(getuid());
fine.c | 33 | load_me();
fine.c | 39 | unguarded((: restore_object( _save_file ) :));
fine.c | 40 | call_out("remove_old_fines", 2);
fine.c | 46 | unguarded((: save_object( _save_file ) :));
fine.c | 61 | map_delete(_fines, player);
fine.c | 66 | time());
fine.c | 71 | map_delete(_fines, player);
fine.c | 76 | save_me();
fine.c | 124 | query_multiple_short(the_case->people) + "? ");
fine.c | 125 | input_to("fine_amount", 0, area, the_case, type, finish);
fine.c | 134 | money_value_string(data, _money_area);
fine.c | 144 | lower_case(amt);
fine.c | 146 | write("Aborting the fine.\n");
fine.c | 153 | value_from_string(amt, _money_area);
fine.c | 155 | write("You did not specify a positive money value.\n");
fine.c | 157 | query_multiple_short(the_case->people) + "? ");
fine.c | 158 | input_to("fine_amount", 0, area, the_case, type, finish);
fine.c | 162 | evaluate(finish, the_case, type, value);
fine.c | 176 | new(class fine_type);
fine.c | 179 | time();
fine.c | 181 | save_me();
fine.c | 197 | new(class fine_type);
fine.c | 200 | time();
fine.c | 202 | save_me();
fine.c | 220 | time();
fine.c | 221 | save_me();
fine.c | 269 | keys(_fines);
not_guilty.c | 11 | set_short("not guilty");
not_guilty.c | 12 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "not_guilty");
banishment.c | 14 | set_short("banishment");
banishment.c | 15 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "banishment");
banishment.c | 16 | create();
banishment.c | 52 | write("You cannot banish a magistrate.\n");
banishment.c | 58 | input_to("days_of_banishment", 0, area, the_case, type, finish);
banishment.c | 69 | lower_case(input);
banishment.c | 71 | write("Aborting banishment.\n");
banishment.c | 77 | evaluate(finish, the_case, type, num);
banishment.c | 81 | write("Invalid input.\n");
banishment.c | 84 | input_to("days_of_banishment", 0, area, the_case, type, finish);
banishment.c | 97 | banish_person(person, data);
banishment.c | 112 | banish_person_suspend(person);
title.c | 19 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "title");
title.c | 20 | set_short("title");
title.c | 21 | create();
title.c | 54 | sizeof(_titles);
title.c | 55 | write(sprintf("%c) %s\n", i + 'A', _titles[i]));
title.c | 58 | query_multiple_short(the_case->people) + " to have? ");
title.c | 59 | input_to("choose_title", 0, area, the_case, type, finish);
title.c | 79 | write("Aborting the title setting.\n");
title.c | 83 | lower_case(title);
title.c | 91 | write("You did not specify a valid title.\n");
title.c | 92 | sizeof(_titles);
title.c | 93 | write(sprintf("%c) %s\n", i + 'A', _titles[i]));
title.c | 96 | query_multiple_short(the_case->people) + "? ");
title.c | 97 | input_to("choose_title", 0, area, the_case, type, finish);
title.c | 105 | input_to("choose_timeout", 0, area, the_case, type, finish, title);
title.c | 113 | write("Aborting the title setting.\n");
title.c | 117 | to_int(str);
title.c | 119 | write("The timeout must be greator than 0 hours.\n");
title.c | 123 | input_to("choose_timeout", 0, area, the_case, type, finish, title);
title.c | 128 | write("The timeout must be less than 30 hours.\n");
title.c | 132 | input_to("choose_timeout", 0, area, the_case, type, finish, title);
title.c | 136 | evaluate(finish, the_case, type, ({ title, timeout }));
title.c | 149 | set_forced_title_on_player(person, data[0], data[1] * (60 * 60));
title.c | 165 | remove_forced_title(person, data[0]);
lose_citizenship.c | 12 | set_short("lose citizenship");
lose_citizenship.c | 13 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "lose_citizenship");
lose_citizenship.c | 28 | is_citizen_of($2, $1) :), area);
lose_citizenship.c | 36 | is_magistrate_of($2, $1) :), area);
lose_citizenship.c | 42 | evaluate(finish, the_case, type, 0);
lose_citizenship.c | 55 | remove_citizen(area, citizen);
lose_citizenship.c | 74 | add_citizen(area, citizen);
dismissed.c | 11 | set_short("dismissed");
dismissed.c | 12 | set_description_file(NOMIC_PUNISHMENT_DOCS_DIR + "dismissed");
commercial.c | 22 | query_main_status(int hints);
commercial.c | 42 | create();
commercial.c | 43 | create();
commercial.c | 44 | add_alias( "furniture" );
commercial.c | 45 | add_plural( "furniture" );
commercial.c | 46 | add_property("talisman", "no one");
commercial.c | 47 | set_opaque();
commercial.c | 49 | add_property( "shop type", "furniture" );
commercial.c | 54 | this_object()->setup();
commercial.c | 57 | set_no_all(1);
commercial.c | 58 | reset_get();
commercial.c | 95 | environment()->query_save_dir();
commercial.c | 103 | environment()->query_owner();
commercial.c | 111 | environment()->query_language();
commercial.c | 122 | environment()->query_property("place");
commercial.c | 131 | environment()->is_allowed(person);
commercial.c | 139 | environment()->query_allowed();
commercial.c | 147 | environment()->query_royalty(query_owner());
commercial.c | 156 | environment()->query_royalty(person);
commercial.c | 169 | environment()->adjust_royalty(person, amount);
commercial.c | 177 | adjust_royalty(query_owner(), amt);
commercial.c | 190 | environment()->is_open_for(type, person);
commercial.c | 280 | environment()->find_next_commercial_id();
commercial.c | 296 | environment()->query_parcel_post();
commercial.c | 330 | query_money_place();
commercial.c | 376 | find_object(dest);
commercial.c | 380 | write(the_short() + " resists being picked up and shocks you slightly.\n");
commercial.c | 393 | debug_printf("Added %d", t);
commercial.c | 396 | environment();
commercial.c | 397 | move(dest, messin, messout);
commercial.c | 400 | add_weight(-t);
commercial.c | 406 | add_weight(-f);
commercial.c | 410 | remove_commercial_thing(this_object());
commercial.c | 412 | add_commercial_thing(this_object());
commercial.c | 413 | register_use_types(_use_types);
commercial.c | 423 | write("You feel it would be wrong to take " + the_short() + ".\n");
commercial.c | 426 | get(dest);
commercial.c | 433 | query_main_status(hint);
commercial.c | 434 | write("$P$Status$P$" + ret);
commercial.c | 435 | add_succeeded_mess("$N get$s the status of $D.\n");
commercial.c | 444 | query_money_place();
commercial.c | 454 | init();
commercial.c | 457 | add_command("status", "<direct:object>", (: do_status, 0 :));
commercial.c | 458 | add_command("status", "hints <direct:object>", (: do_status, 1 :));
commercial.c | 459 | add_command("status", "hint <direct:object>", (: do_status, 1 :));
commercial.c | 460 | add_command("reset", "revenue on <direct:object>", (: do_reset :));
commercial.c | 467 | int_query_static_auto_load();
commercial.c | 469 | return ([ ]);
commercial.c | 476 | query_dynamic_auto_load();
commercial.c | 480 | query_bonded();
commercial.c | 481 | add_auto_load_value(junk, OBJECT_TAG, "revenue", query_revenue());
commercial.c | 482 | add_auto_load_value(junk, OBJECT_TAG, "commercial id", query_commercial_id());
commercial.c | 488 | init_dynamic_arg(map);
commercial.c | 490 | set_bonded(map["bonded"]);
commercial.c | 491 | set_revenue(query_auto_load_value(map, OBJECT_TAG, "revenue"));
commercial.c | 493 | set_commercial_id(query_auto_load_value(map, OBJECT_TAG, "commercial id"));
commercial.c | 508 | query_commercial_id() }) });
fuel_inherit.c | 27 | fuel_short();
fuel_inherit.c | 28 | fuel_long();
fuel_inherit.c | 31 | create();
fuel_inherit.c | 36 | set_short( (: fuel_short :) );
fuel_inherit.c | 37 | set_long( (: fuel_long :) );
fuel_inherit.c | 38 | add_property("no recycling", 1);
fuel_inherit.c | 39 | add_property("fuel", 1);
fuel_inherit.c | 85 | sizeof(_shorts);
fuel_inherit.c | 87 | if( (_amount + 1) >
fuel_inherit.c | 104 | sizeof(_longs);
fuel_inherit.c | 107 | if( ( _amount + 1 ) >
fuel_inherit.c | 125 | init_dynamic_arg(arg["::"]);
clock.c | 24 | environment(this_object())->query_co_ord();
clock.c | 27 | tell_room(environment(this_object()), mess);
clock.c | 35 | create();
clock.c | 36 | add_alias( "furniture" );
clock.c | 37 | add_plural( "furniture" );
clock.c | 38 | set_opaque();
clock.c | 39 | create();
clock.c | 43 | this_object()->setup();
clock.c | 48 | move(dest, messin, messout);
clock.c | 60 | find_object(dest);
clock.c | 64 | write(the_short() + " resists being picked up and shocks you slightly.\n");
clock.c | 77 | debug_printf("Added %d", t);
clock.c | 80 | move(dest, messin, messout);
clock.c | 83 | add_weight(-t);
clock.c | 87 | environment();
clock.c | 90 | add_weight(-f);
clock.c | 101 | write("You feel it would be wrong to take " + the_short() + ".\n");
clock.c | 104 | get(dest);
clock.c | 110 | int_query_static_auto_load();
clock.c | 112 | return ([ ]);
curtains.c | 22 | create();
curtains.c | 23 | add_alias( "furniture" );
curtains.c | 24 | add_plural( "furniture" );
curtains.c | 25 | set_opaque();
curtains.c | 27 | add_property( "shop type", "furniture" );
curtains.c | 29 | set_allowed_room_verbs((["hanging" : "hangs" ]));
curtains.c | 32 | this_object()->setup();
curtains.c | 41 | this_player()->add_command("open", this_object(), "<direct:object>");
curtains.c | 42 | this_player()->add_command("close", this_object(), "<direct:object>");
curtains.c | 47 | environment(this_object())->query_door_control(_window_id);
curtains.c | 61 | set_transparent();
curtains.c | 62 | this_player()->add_succeeded_mess(this_object(), "$N $V $D.\n", ({}));
curtains.c | 68 | environment(this_object())->query_door_control(_window_id);
curtains.c | 82 | reset_transparent();
curtains.c | 83 | this_player()->add_succeeded_mess(this_object(), "$N $V $D.\n", ({}));
curtains.c | 102 | this_object()->add_property("current room hidden", 1);
curtains.c | 104 | query_my_id();
curtains.c | 105 | query_long();
curtains.c | 110 | event(environment(), "save", this_object());
curtains.c | 121 | this_object()->remove_property("current room hidden");
curtains.c | 123 | environment(this_object())->query_door_control(_window_id);
curtains.c | 124 | set_long(_window_old_long);
curtains.c | 125 | set_transparent();
curtains.c | 152 | init_static_arg(map);
surface.c | 29 | create();
surface.c | 30 | create();
surface.c | 32 | add_alias( "furniture" );
surface.c | 33 | add_plural( "furniture" );
surface.c | 34 | set_opaque();
surface.c | 38 | this_object()->setup();
surface.c | 41 | set_no_all(1);
surface.c | 53 | cmd($1, $3, $4) :) );
surface.c | 55 | init();
surface.c | 95 | write(the_short() + " resists being picked up and shocks you slightly.\n");
surface.c | 101 | add_weight( -w );
surface.c | 109 | add_weight( w );
surface.c | 114 | find_object( dest );
surface.c | 116 | move( dest, messin, messout );
surface.c | 119 | add_weight( w );
surface.c | 121 | add_weight( -w );
surface.c | 125 | remove_use_internal_object(this_object());
surface.c | 127 | add_use_internal_object(this_object());
surface.c | 131 | inform_of_light_level_change(from);
surface.c | 133 | inform_of_light_level_change(dest);
surface.c | 144 | write("You feel it would be wrong to take " + the_short() + ".\n");
surface.c | 147 | get(dest);
surface.c | 160 | this_player();
surface.c | 162 | find_player(thief->query_caster());
surface.c | 164 | query_owner();
surface.c | 166 | query_property("dropped");
surface.c | 176 | event(environment(thief), "theft", thief, this_object(), ({ thing }));
surface.c | 184 | query_short());
surface.c | 186 | event(environment(), "save");
surface.c | 195 | event(environment(), "save");
surface.c | 202 | this_player() ? this_player()->query_name() : "Unknown");
surface.c | 218 | all_inventory( this_object() );
surface.c | 219 | sizeof( contents );
surface.c | 220 | query_complete_weight();
surface.c | 224 | query_complete_weight() + query_loc_weight();
surface.c | 243 | all_inventory(this_object());
surface.c | 244 | sizeof(ob);
surface.c | 245 | move(dest);
surface.c | 252 | this_object()->find_inv_match( "all", this_player() );
surface.c | 265 | all_inventory( this_object() );
surface.c | 268 | delete( things, i, 1 );
surface.c | 274 | delete( things, i, 1 );
surface.c | 303 | create_auto_load( all_inventory( this_object() ) ) );
surface.c | 320 | return (int)ob->move(this_object());
surface.c | 327 | init_dynamic_arg( bing[ "::" ] );
surface.c | 330 | handle_restore_inventory($1) :);
surface.c | 336 | this_player(), f);
surface.c | 339 | set_bonded(bing["bonded"]);
surface.c | 344 | init_static_arg(bing["::"]);
surface.c | 349 | set_allowed_positions(bing["allowed_positions"]);
surface.c | 356 | int_query_static_auto_load();
surface.c | 357 | return ([ ]);
surface.c | 364 | sizeof( _shadows );
surface.c | 366 | destruct_shadow( shadow );
surface.c | 369 | all_inventory()->dest_me();
surface.c | 370 | dest_me();
poker.c | 73 | query_hand_value(class playing_card* cards);
poker.c | 74 | query_hand_type(class playing_card* hand);
poker.c | 77 | create();
poker.c | 79 | set_minimum_needed(2);
poker.c | 80 | add_help_file("poker");
poker.c | 87 | set_shop_use_types(({ "poker" }));
poker.c | 89 | create();
poker.c | 91 | set_commercial_type("gambling");
poker.c | 92 | set_commercial_name("poker");
poker.c | 124 | query_card_string(bing->high_card);
poker.c | 149 | query_player_ids();
poker.c | 150 | query_money_place();
poker.c | 155 | query_player_data(id_bing);
poker.c | 174 | money_value_string(data->bet, place);
poker.c | 188 | if (sizeof(not_playing) >
poker.c | 206 | query_player_data(id);
poker.c | 215 | this_player()->query_cols());
poker.c | 220 | the_short() + ".\n", ({ id }));
poker.c | 224 | query_player_data(id);
poker.c | 226 | query_player_cap_name(id);
poker.c | 233 | this_player()->query_cols());
poker.c | 249 | long() + query_card_status(find_player_id_of_person(this_player()));
poker.c | 261 | query_player_data(id);
poker.c | 274 | call_out("complete_round", 2);
poker.c | 287 | query_current_player();
poker.c | 289 | increment_current_player();
poker.c | 290 | query_player_data(query_current_player());
poker.c | 292 | query_current_player() != start_id);
poker.c | 295 | printf("Force end of game.\n");
poker.c | 296 | call_out("complete_round", 2, 1);
poker.c | 299 | call_out("tell_current_player", 0, "%^BOLD%^Your turn!%^RESET%^\n");
poker.c | 310 | make_deck(1, 0);
poker.c | 311 | shuffle_deck(_deck);
poker.c | 313 | query_player_data(id);
poker.c | 314 | sort_cards(_deck[0..4], 3);
poker.c | 323 | query_hand_type(data->hand);
poker.c | 329 | query_hand_type_string(data->hand_type) + ".\n");
poker.c | 337 | next_person_turn();
poker.c | 340 | call_out("tell_current_player", 0, "%^BOLD%^Your turn!%^RESET%^\n");
poker.c | 341 | tell_current_player("%^BOLD%^Your turn!%^RESET%^\n");
poker.c | 350 | randomise_player_numbers();
poker.c | 355 | new(class player_data);
poker.c | 359 | set_player_data(id, data);
poker.c | 366 | tell_all_players("%^BOLD%^Place your ante to start playing.%^RESET%^\n");
poker.c | 380 | query_player_data(id);
poker.c | 381 | query_player_object(id);
poker.c | 393 | call_out("deal_cards", 2);
poker.c | 433 | new(class hand_type);
poker.c | 436 | sizeof(hand);
poker.c | 463 | sizeof(tmp_hand);
poker.c | 497 | sizeof(tmp_hand);
poker.c | 508 | sort_cards(tmp_hand, 3);
poker.c | 512 | sizeof(tmp_hand);
poker.c | 517 | sort_cards(tmp_hand, 3);
poker.c | 530 | sort_cards(tmp_hand, 3);
poker.c | 549 | sort_cards(hand, 3);
poker.c | 552 | sizeof(hand);
poker.c | 596 | sort_cards(hand, 3);
poker.c | 627 | sizeof(new_hand->kickers);
poker.c | 638 | sizeof(new_hand->kickers);
poker.c | 657 | sizeof(new_hand->kickers);
poker.c | 702 | sizeof(new_hand->kickers);
poker.c | 773 | new(class playing_card, suit: CARD_SUIT_HEARTS, number : 13) });
poker.c | 778 | new(class playing_card, suit: CARD_SUIT_HEARTS, number : 5) });
poker.c | 780 | query_hand_type_string(query_hand_type(other_tmp_hand)));
poker.c | 781 | printf("%O\n", sizeof(query_hand_type(tmp_hand)->kickers));
poker.c | 782 | printf("%O\n", sizeof(query_hand_type(other_tmp_hand)->kickers));
poker.c | 784 | query_hand_type(other_tmp_hand)) + "\n");
poker.c | 808 | query_money_place();
poker.c | 813 | query_player_data(id);
poker.c | 827 | query_hand_type(data->hand);
poker.c | 828 | is_greator_hand(data->hand_type, winning_hand_type);
poker.c | 850 | query_player_data(id);
poker.c | 867 | adjust_float((_pot * _house_cut) / 100);
poker.c | 871 | if (sizeof(winner) >
poker.c | 877 | sizeof(winner);
poker.c | 879 | query_player_object(id);
poker.c | 881 | adjust_money(MONEY_HAND->create_money_array(paid, place), place);
poker.c | 886 | adjust_float(paid);
poker.c | 896 | query_player_object(winner[0]);
poker.c | 897 | adjust_money(MONEY_HAND->create_money_array(_pot, place), place);
poker.c | 907 | finish_game(query_multiple_short(winner));
poker.c | 921 | query_player_data(id);
poker.c | 931 | query_player_data(id);
poker.c | 945 | next_person_turn();
poker.c | 946 | call_out("tell_current_player", 0, "%^BOLD%^Your turn!%^RESET%^\n");
poker.c | 959 | add_failed_mess("The game has not started.\n");
poker.c | 963 | find_player_id_of_person(this_player());
poker.c | 965 | add_failed_mess("You are not playing.\n");
poker.c | 969 | query_player_data(id);
poker.c | 971 | add_failed_mess("You have already put in your ante.\n");
poker.c | 975 | query_money_place();
poker.c | 989 | adjust_float(_ante_house);
poker.c | 993 | environment()->event_save(this_object());
poker.c | 996 | check_for_finish_ante();
poker.c | 1014 | lower_case(throw_away);
poker.c | 1017 | add_failed_mess("The game has not started.\n");
poker.c | 1021 | find_player_id_of_person(this_player());
poker.c | 1023 | add_failed_mess("You are not playing.\n");
poker.c | 1027 | query_player_data(id);
poker.c | 1035 | add_failed_mess("You are not in the discard phase.\n");
poker.c | 1040 | lower_case(replace_string(throw_away, " ", ""));
poker.c | 1041 | explode(throw_away, ",");
poker.c | 1042 | if (sizeof(filter(bits, (: strlen($1) > 1 :))) >
poker.c | 1049 | map(bits, (: $1[0] - 'a' :));
poker.c | 1050 | if (sizeof(filter(new_bits, (: $1 < 0 || $1 >= 5 :))) >
poker.c | 1057 | sizeof(new_bits);
poker.c | 1061 | sprintf("%c", 'A' + new_bits[i]) + " twice.\n");
poker.c | 1066 | sort_array(new_bits, (: $2 - $1 :));
poker.c | 1067 | sizeof(new_bits);
poker.c | 1075 | shuffle_array(_deck);
poker.c | 1080 | sort_cards(data->hand, 3);
poker.c | 1081 | query_hand_type(data->hand);
poker.c | 1084 | sizeof(new_bits) > 1?"s":"") + " on $D.\n" }));
poker.c | 1089 | this_player()->query_cols()));
poker.c | 1094 | add_succeeded_mess("$N do$es not discard any cards on $D.\n");
poker.c | 1097 | finish_discard();
poker.c | 1105 | add_failed_mess("The game has not started.\n");
poker.c | 1111 | add_failed_mess("Not a betting phase.\n");
poker.c | 1116 | add_failed_mess("Not your turn to bet.\n");
poker.c | 1121 | add_failed_mess("You cannot check since betting has started.\n");
poker.c | 1125 | add_succeeded_mess("$N check$s on $D.\n");
poker.c | 1126 | next_person_turn();
poker.c | 1137 | add_failed_mess("The game has not started.\n");
poker.c | 1143 | add_failed_mess("Not a betting phase.\n");
poker.c | 1148 | add_failed_mess("Not your turn to bet.\n");
poker.c | 1153 | add_failed_mess("No one has bet anything for you to call.\n");
poker.c | 1157 | query_money_place();
poker.c | 1158 | query_player_data(query_current_player());
poker.c | 1161 | call_out("complete_round", 2);
poker.c | 1181 | next_person_turn();
poker.c | 1201 | add_failed_mess("The game has not started.\n");
poker.c | 1207 | add_failed_mess("Not a betting phase.\n");
poker.c | 1212 | add_failed_mess("Not your turn to bet.\n");
poker.c | 1216 | query_money_place();
poker.c | 1217 | value_from_string(amount, place);
poker.c | 1238 | query_player_data(query_current_player());
poker.c | 1258 | next_person_turn();
poker.c | 1270 | add_failed_mess("The game has not started.\n");
poker.c | 1276 | add_failed_mess("Not a betting phase.\n");
poker.c | 1281 | add_failed_mess("Not your turn to bet.\n");
poker.c | 1285 | query_money_place();
poker.c | 1286 | value_from_string(amount, place);
poker.c | 1294 | do_call();
poker.c | 1320 | query_player_data(query_current_player());
poker.c | 1340 | next_person_turn();
poker.c | 1351 | add_failed_mess("The game has not started.\n");
poker.c | 1356 | add_failed_mess("Not your turn to bet.\n");
poker.c | 1360 | query_player_data(query_current_player());
poker.c | 1363 | add_succeeded_mess("$N fold$s on $D.\n");
poker.c | 1366 | query_player_data(id);
poker.c | 1372 | call_out("complete_round", 0, 1);
poker.c | 1375 | next_person_turn();
poker.c | 1387 | add_failed_mess("The poker table is not open.\n");
poker.c | 1396 | add_failed_mess("You must be playing the game to start it.\n");
poker.c | 1402 | add_failed_mess("You need at least two people to play poker.\n");
poker.c | 1406 | adjust_float(old_pot);
poker.c | 1408 | add_succeeded_mess("$N $V a game on $D.\n");
poker.c | 1419 | add_failed_mess("The game has not started.\n");
poker.c | 1423 | find_player_id_of_person(this_player());
poker.c | 1425 | add_failed_mess("You must actually be playing to finish the game.\n");
poker.c | 1429 | finish_game(0);
poker.c | 1430 | reset_game();
poker.c | 1440 | query_money_place();
poker.c | 1457 | money_value_string(amt, place));
poker.c | 1479 | query_money_place();
poker.c | 1480 | value_from_string(str, place);
poker.c | 1482 | add_failed_mess("Unable to parse the string " + str + ".\n");
poker.c | 1489 | money_value_string(value, place) + " on $D.\n");
poker.c | 1493 | money_value_string(value, place) + " on $D.\n");
poker.c | 1513 | query_money_place();
poker.c | 1514 | value_from_string(str, place);
poker.c | 1516 | add_failed_mess("Unable to parse the string " + str + ".\n");
poker.c | 1522 | money_value_string(value, place) + " on $D.\n");
poker.c | 1526 | money_value_string(value, place) + " on $D.\n");
poker.c | 1544 | add_failed_mess("You cannot set the cut less than 0.\n");
poker.c | 1548 | add_failed_mess("You cannot set the cut to greator than 100%.\n");
poker.c | 1554 | add_succeeded_mess("$N set$s the cut to " + percent + "% on $D.\n");
poker.c | 1571 | add_failed_mess("You cannot set the number of draws less than 0.\n");
poker.c | 1575 | add_failed_mess("You cannot set the draw to greator than 5.\n");
poker.c | 1581 | add_succeeded_mess("$N set$s the number of draw rounds to " + draw + " on $D.\n");
poker.c | 1593 | query_money_place();
poker.c | 1604 | money_value_string(_ante_house, place);
poker.c | 1605 | write("$P$Rules$P$" + ret);
poker.c | 1611 | add_succeeded_mess("$N clear$s the player stats.\n");
poker.c | 1617 | init();
poker.c | 1618 | init();
poker.c | 1620 | do_discard($4[0]) :));
poker.c | 1622 | do_ante() :));
poker.c | 1624 | do_check() :));
poker.c | 1626 | do_call() :));
poker.c | 1628 | do_bet($4[0]) :));
poker.c | 1630 | do_raise($4[0]) :));
poker.c | 1632 | do_fold() :));
poker.c | 1634 | do_finish() :));
poker.c | 1636 | do_start() :));
poker.c | 1638 | do_rules() :));
poker.c | 1640 | do_rules() :));
poker.c | 1644 | do_set_draw($4[0]) :));
poker.c | 1646 | do_set_cut($4[0]) :));
poker.c | 1648 | do_set_ante($4[0], 0) :));
poker.c | 1650 | do_set_ante($4[0], 1) :));
poker.c | 1652 | do_set_bet($4[0], 0) :));
poker.c | 1654 | do_set_bet($4[0], 1) :));
poker.c | 1662 | query_player_data(id);
poker.c | 1669 | query_player_data(id);
poker.c | 1675 | call_out("complete_round", 0, 1);
poker.c | 1682 | check_for_finish_ante();
poker.c | 1685 | check_end_round();
poker.c | 1688 | finish_discard();
poker.c | 1698 | find_player_id_of_person(ob);
poker.c | 1700 | resign_person(id);
poker.c | 1706 | resign_person(id);
poker.c | 1713 | query_dynamic_auto_load();
poker.c | 1714 | query_dynamic_auto_load(map);
poker.c | 1715 | add_auto_load_value(map, BOARD_TAG, "return", _return);
poker.c | 1716 | add_auto_load_value(map, BOARD_TAG, "revenue", _revenue);
poker.c | 1717 | add_auto_load_value(map, BOARD_TAG, "ante amount", _ante_amount);
poker.c | 1718 | add_auto_load_value(map, BOARD_TAG, "house cut", _house_cut);
poker.c | 1719 | add_auto_load_value(map, BOARD_TAG, "ante house", _ante_house);
poker.c | 1720 | add_auto_load_value(map, BOARD_TAG, "min bet", _min_bet);
poker.c | 1721 | add_auto_load_value(map, BOARD_TAG, "max bet", _max_bet);
poker.c | 1722 | add_auto_load_value(map, BOARD_TAG, "current bet", _current_bet);
poker.c | 1723 | add_auto_load_value(map, BOARD_TAG, "pot", _pot);
poker.c | 1724 | add_auto_load_value(map, BOARD_TAG, "deck", _deck);
poker.c | 1725 | add_auto_load_value(map, BOARD_TAG, "poker phase", _poker_phase);
poker.c | 1726 | add_auto_load_value(map, BOARD_TAG, "draw round", _draw_round);
poker.c | 1727 | add_auto_load_value(map, BOARD_TAG, "max draw rounds", _max_draw_rounds);
poker.c | 1728 | add_auto_load_value(map, BOARD_TAG, "discard", _discard);
poker.c | 1729 | add_auto_load_value(map, BOARD_TAG, "player stats", _player_stats);
poker.c | 1735 | init_dynamic_arg(map, player);
poker.c | 1736 | init_dynamic_arg(map, player);
poker.c | 1738 | query_auto_load_value(map, BOARD_TAG, "return");
poker.c | 1739 | query_auto_load_value(map, BOARD_TAG, "revenue");
poker.c | 1740 | query_auto_load_value(map, BOARD_TAG, "ante amount");
poker.c | 1741 | query_auto_load_value(map, BOARD_TAG, "ante house");
poker.c | 1742 | query_auto_load_value(map, BOARD_TAG, "house cut");
poker.c | 1743 | query_auto_load_value(map, BOARD_TAG, "deck");
poker.c | 1744 | query_auto_load_value(map, BOARD_TAG, "current bet");
poker.c | 1745 | query_auto_load_value(map, BOARD_TAG, "pot");
poker.c | 1746 | query_auto_load_value(map, BOARD_TAG, "min bet");
poker.c | 1747 | query_auto_load_value(map, BOARD_TAG, "max bet");
poker.c | 1748 | query_auto_load_value(map, BOARD_TAG, "poker phase");
poker.c | 1749 | query_auto_load_value(map, BOARD_TAG, "draw round");
poker.c | 1750 | query_auto_load_value(map, BOARD_TAG, "max draw rounds");
poker.c | 1751 | query_auto_load_value(map, BOARD_TAG, "discard");
poker.c | 1752 | query_auto_load_value(map, BOARD_TAG, "player stats");
dividor_room.c | 25 | query_parcel_post();
bank_franchise.c | 25 | time();
bank_franchise.c | 26 | create();
bank_franchise.c | 27 | set_shop_use_types(({ "use", "buy" }));
bank_franchise.c | 28 | create();
bank_franchise.c | 30 | set_commercial_name("bank");
bank_franchise.c | 37 | add_help_file("bank_franchise");
bank_franchise.c | 89 | adjust_float(amount);
bank_franchise.c | 97 | load_object(BANK_HANDLER->query_bank_master_office(query_bank_name()));
bank_franchise.c | 107 | query_bank_name() == query_bank_name() :));
bank_franchise.c | 131 | can_adjust_account(person, amount);
bank_franchise.c | 140 | previous_object()->query_money_place();
bank_franchise.c | 167 | add_failed_mess("You cannot set the cut less than 0.\n");
bank_franchise.c | 171 | add_failed_mess("You cannot set the cut to greator than 100%.\n");
bank_franchise.c | 175 | set_percentage(percent);
bank_franchise.c | 177 | add_succeeded_mess("$N set$s the cut to " + percent + "% on $D.\n");
bank_franchise.c | 194 | query_money_place();
bank_franchise.c | 195 | value_from_string(str, place);
bank_franchise.c | 197 | add_failed_mess("Unable to parse the string " + str + ".\n");
bank_franchise.c | 200 | set_account_cost(value);
bank_franchise.c | 202 | money_value_string(value, place) + " on $D.\n");
bank_franchise.c | 209 | is_allowed(name);
bank_franchise.c | 213 | init();
bank_franchise.c | 214 | init();
bank_franchise.c | 218 | do_set_cut($4[0]) :));
bank_franchise.c | 220 | do_set_open_cost($4[0]) :));
bank_franchise.c | 225 | file_name(environment());
bank_franchise.c | 229 | environment()->event_save(ob);
bank_franchise.c | 238 | query_bank_default_cost_to_open(bank);
bank_franchise.c | 240 | return ([ "branch" : ret ]);
bank_franchise.c | 246 | set_bank_name(name);
bank_franchise.c | 248 | file_name(room->query_main_room()));
bank_franchise.c | 259 | query_bank_name(), query_franchise());
bank_franchise.c | 267 | is_open_for(type, name);
bank_franchise.c | 277 | time();
bank_franchise.c | 279 | time();
bank_franchise.c | 280 | call_out("make_payment", tim);
bank_franchise.c | 288 | adjust_float(-query_monthly_fee());
bank_franchise.c | 289 | find_master_bank()->adjust_float(query_monthly_fee());
bank_franchise.c | 290 | setup_call_out();
bank_franchise.c | 298 | add_help_file("bank_franchise");
bank_franchise.c | 299 | query_money_place();
bank_franchise.c | 337 | query_dynamic_auto_load();
bank_franchise.c | 338 | add_auto_load_value(map, OBJECT_TAG, "bank", query_bank_name());
bank_franchise.c | 339 | add_auto_load_value(map, OBJECT_TAG, "open", query_account_cost());
bank_franchise.c | 340 | add_auto_load_value(map, OBJECT_TAG, "percentage", query_percentage());
bank_franchise.c | 341 | add_auto_load_value(map, OBJECT_TAG, "difference", query_total_difference());
bank_franchise.c | 342 | add_auto_load_value(map, OBJECT_TAG, "notes", query_credit_notes());
bank_franchise.c | 343 | add_auto_load_value(map, OBJECT_TAG, "credit num", query_credit_num());
bank_franchise.c | 344 | add_auto_load_value(map, OBJECT_TAG, "last paid", query_last_paid());
bank_franchise.c | 349 | init_dynamic_arg(map, player);
bank_franchise.c | 350 | set_bank_name(query_auto_load_value(map, OBJECT_TAG, "bank"));
bank_franchise.c | 351 | set_account_cost(query_auto_load_value(map, OBJECT_TAG, "open"));
bank_franchise.c | 352 | set_percentage(query_auto_load_value(map, OBJECT_TAG, "percentage"));
bank_franchise.c | 353 | set_total_difference(query_auto_load_value(map, OBJECT_TAG, "difference"));
bank_franchise.c | 354 | set_credit_notes(query_auto_load_value(map, OBJECT_TAG, "notes"));
bank_franchise.c | 355 | set_credit_num(query_auto_load_value(map, OBJECT_TAG, "credit num"));
bank_franchise.c | 356 | set_last_paid(query_auto_load_value(map, OBJECT_TAG, "last paid"));
bank_franchise.c | 357 | setup_call_out();
bank_franchise.c | 362 | ctime(_last_paid) }) });
shop_base.c | 21 | create();
shop_base.c | 22 | set_shop_use_types(({ "use", "buy" }));
shop_base.c | 23 | create();
shop_base.c | 24 | set_commercial_name("craft shop");
shop_base.c | 34 | find_commercial_items(query_commercial_name());
shop_base.c | 35 | sizeof(obs);
shop_base.c | 39 | query_royalty(person);
shop_base.c | 47 | adjust_royalty(person, amount);
shop_base.c | 51 | query_parcel_post();
shop_base.c | 55 | reset_weekly_status();
shop_base.c | 59 | query_weekly_status_string();
shop_base.c | 67 | if(unguarded((: file_size($(tmp) = ".o.gz") :)) >
shop_base.c | 68 | unguarded((: file_size($(tmp) = ".o") :)) >
shop_base.c | 77 | unguarded( (: restore_object($(fname)) :));
shop_base.c | 81 | unguarded( (: mkdir($(tmp)) :));
shop_base.c | 83 | unguarded( (: mkdir(query_craft_shop_save_dir()) :));
shop_base.c | 85 | reload_shop();
shop_base.c | 86 | add_property("place", environment()->query_property("place"));
shop_base.c | 90 | init();
shop_base.c | 91 | init();
shop_base.c | 110 | debug_printf("Saving to %O\n", fname);
shop_base.c | 111 | unguarded( (: save_object($(fname), 2) :));
shop_base.c | 116 | do_save();
shop_base.c | 117 | dest_me();
shop_base.c | 118 | dest_me();
shop_base.c | 137 | call_out("do_save", SAVE_TIME - (time() - _last_saved));
shop_base.c | 139 | call_out("do_save", SAVE_TIME);
shop_base.c | 142 | debug_printf("Adding call_out");
shop_base.c | 169 | set_short(_counter_short);
shop_base.c | 170 | explode(lower_case(_counter_short), " ");
shop_base.c | 171 | add_adjective(bits[0..<2]);
shop_base.c | 172 | add_alias(bits[<1]);
shop_base.c | 175 | sscanf(name, "%d", size);
shop_base.c | 176 | set_maximum_waiting_queue_size(size);
shop_base.c | 184 | query_dynamic_auto_load();
shop_base.c | 185 | add_auto_load_value(map, OBJECT_TAG, "stocksize", query_maximum_waiting_queue_size());
shop_base.c | 186 | add_auto_load_value(map, OBJECT_TAG, "counter short", _counter_short);
shop_base.c | 193 | init_dynamic_arg(map, player);
shop_base.c | 194 | query_auto_load_value(map, OBJECT_TAG, "stocksize");
shop_base.c | 195 | query_auto_load_value(map, OBJECT_TAG, "counter short");
shop_base.c | 198 | set_maximum_waiting_queue_size(size);
shop_base.c | 201 | explode(lower_case(_counter_short), " ");
shop_base.c | 202 | add_adjective(bits[0..<2]);
shop_base.c | 203 | add_alias(bits[<1]);
fireplace.c | 31 | set_light_produced(int b);
fireplace.c | 33 | set_lit_mess(string str);
fireplace.c | 34 | set_unlit_mess(string str);
fireplace.c | 36 | set_frequency(int i);
fireplace.c | 38 | set_lit_chats(string *str);
fireplace.c | 40 | add_lit_chat(string str);
fireplace.c | 41 | request_lit_chat();
fireplace.c | 43 | set_dying_chats(string *str);
fireplace.c | 44 | add_dying_chat(string str);
fireplace.c | 45 | request_dying_chat();
fireplace.c | 47 | set_turn_on_mess(string mess);
fireplace.c | 48 | set_turn_off_mess(string mess);
fireplace.c | 50 | set_out_of_fuel_mess(string mess);
fireplace.c | 53 | do_light(object *obs);
fireplace.c | 54 | do_zap();
fireplace.c | 55 | turn_on();
fireplace.c | 56 | do_dowse(object *obs);
fireplace.c | 57 | turn_off();
fireplace.c | 58 | calc_fuel();
fireplace.c | 63 | create();
fireplace.c | 66 | set_name("fireplace");
fireplace.c | 67 | add_alias( ({ "fireplace", "furniture", "hearth", "fire" }) );
fireplace.c | 68 | add_plural( "fireplaces" );
fireplace.c | 69 | add_property( "shop type", "furniture" );
fireplace.c | 70 | add_property( "degrees", 0 );
fireplace.c | 72 | set_light_produced( BRIGHT );
fireplace.c | 78 | set_unlit_mess("The hearth is blackened with ashes and old embers.\n");
fireplace.c | 80 | set_frequency(5);
fireplace.c | 94 | set_turn_on_mess("Soon a roaring fire is blazing in the grate.\n");
fireplace.c | 96 | set_turn_off_mess("The embers smoke slightly and their glow dims.\n");
fireplace.c | 98 | set_out_of_fuel_mess("The fire flickers and dies away.\n");
fireplace.c | 101 | this_object()->setup();
fireplace.c | 104 | this_object()->add_extra_look( this_object() );
fireplace.c | 106 | add_help_file("fireplace");
fireplace.c | 113 | this_player()->add_command("light", this_object(), "<direct:object> with <indirect:object>");
fireplace.c | 114 | this_player()->add_command("extinguish", this_object(), "<direct:object>", (: do_dowse :) );
fireplace.c | 115 | this_player()->add_command("dowse", this_object(), "<direct:object>");
fireplace.c | 118 | this_player()->add_command("zap", this_object(), "<direct:object>");
fireplace.c | 119 | this_player()->add_command("point", this_object(), "[finger] at <direct:object>", (: do_zap :) );
fireplace.c | 128 | query_fuel_left(){  return calc_fuel();
fireplace.c | 162 | query_name();
fireplace.c | 192 | turn_on();
fireplace.c | 199 | this_player();
fireplace.c | 202 | tell_object(tp, "You don't even have the energy for such a small task!\n");
fireplace.c | 207 | tell_object(tp, "There is already a merry fire burning in the fireplace.\n");
fireplace.c | 214 | adjust_gp( -10 );
fireplace.c | 215 | turn_on();
fireplace.c | 253 | tell_room(environment( this_object() ), query_turn_on_mess() );
fireplace.c | 260 | add_burner( this_object() );
fireplace.c | 262 | adjust_light( query_light_produced() );
fireplace.c | 265 | add_property("degrees", query_light_produced() * 4);
fireplace.c | 266 | environment( this_object() )->add_property("warmth", x );
fireplace.c | 268 | call_out( "msg_on", 7 );
fireplace.c | 282 | turn_off();
fireplace.c | 290 | tell_room(environment( this_object() ), query_turn_off_mess() );
fireplace.c | 297 | remove_burner( this_object() );
fireplace.c | 299 | adjust_light( -query_light_produced() );
fireplace.c | 300 | add_property( "degrees", 0 );
fireplace.c | 301 | environment( this_object() )->remove_property("warmth");
fireplace.c | 303 | call_out( "msg_off", 10 );
fireplace.c | 325 | turn_off();
fireplace.c | 326 | tell_room(environment( this_object() ), query_out_of_fuel_mess() );
fireplace.c | 436 | query_property("fuel") :));
fireplace.c | 439 | out_of_fuel();
fireplace.c | 443 | sizeof(inv);
fireplace.c | 446 | query_amount_left();
fireplace.c | 447 | query_weight();
fireplace.c | 452 | move("/room/rubbish");
fireplace.c | 453 | roll_MdN(4, 20);
fireplace.c | 454 | clone_object("/obj/cont_medium");
fireplace.c | 455 | set_name("ash");
fireplace.c | 456 | set_short("fine grey ash");
fireplace.c | 457 | add_property("determinate", "some ");
fireplace.c | 460 | add_plural("ash");
fireplace.c | 464 | set_weight_unit(({ 1, 50 }));
fireplace.c | 465 | set_medium_alias("FiNeGrEyAsH");
fireplace.c | 471 | set_continuous();
fireplace.c | 472 | set_amount(amount);
fireplace.c | 473 | move(this_object());
fireplace.c | 475 | set_amount_left( z );
fireplace.c | 481 | calc_fuel();
fireplace.c | 484 | environment( this_object() );
fireplace.c | 490 | if( calc_fuel() >
fireplace.c | 492 | request_lit_chat();
fireplace.c | 493 | tell_room( env, r + "\n");
fireplace.c | 497 | request_dying_chat();
fireplace.c | 498 | tell_room( env, r + "\n");
fireplace.c | 513 | all_inventory( this_object() );
fireplace.c | 519 | query_weight();
fireplace.c | 520 | query_amount_left();
fireplace.c | 533 | this_player();
fireplace.c | 534 | previous_object(-1);
fireplace.c | 546 | adjust_hp( -random(120) );
fireplace.c | 549 | test_remove(thing, flat, dest);
fireplace.c | 564 | random(2)] );
fireplace.c | 568 | call_out("calc_fuel",1);
fireplace.c | 576 | query_lit_mess();
fireplace.c | 579 | query_unlit_mess();
fireplace.c | 588 | remove_burner( this_object() );
fireplace.c | 590 | adjust_light( -query_light_produced() );
fireplace.c | 591 | environment()->query_property("warmth");
fireplace.c | 594 | query_light_produced() / 4));
fireplace.c | 596 | environment()->remove_property("warmth");
fireplace.c | 604 | remove_burner( this_object() );
fireplace.c | 606 | dest_me();
vessel.c | 17 | create();
vessel.c | 18 | create();
vessel.c | 19 | add_alias( "furniture" );
vessel.c | 20 | add_plural( "furniture" );
vessel.c | 21 | add_property("talisman", "no one");
vessel.c | 22 | set_opaque();
vessel.c | 24 | add_property( "shop type", "furniture" );
vessel.c | 29 | this_object()->setup();
vessel.c | 32 | set_no_all(1);
vessel.c | 36 | init();
vessel.c | 48 | find_object(dest);
vessel.c | 52 | write(the_short() + " resists being picked up and shocks you slightly.\n");
vessel.c | 65 | debug_printf("Added %d", t);
vessel.c | 68 | move(dest, messin, messout);
vessel.c | 71 | add_weight(-t);
vessel.c | 75 | environment();
vessel.c | 78 | add_weight(-f);
vessel.c | 90 | write("You feel it would be wrong to take " + the_short() + ".\n");
vessel.c | 93 | get(dest);
vessel.c | 98 | int_query_static_auto_load();
vessel.c | 100 | return ([ ]);
vessel.c | 107 | query_dynamic_auto_load();
vessel.c | 111 | query_bonded();
vessel.c | 117 | init_dynamic_arg(map);
vessel.c | 118 | set_bonded(map["bonded"]);
vessel.c | 129 | query_bonded() }) });
chime_inherit.c | 22 | chimes_short();
chime_inherit.c | 23 | chimes_long();
chime_inherit.c | 24 | set_chime_type( string type );
chime_inherit.c | 25 | chime_type();
chime_inherit.c | 26 | jingle();
chime_inherit.c | 27 | chime_verb();
chime_inherit.c | 28 | add_chime_verb( string verb );
chime_inherit.c | 29 | remove_chime_verb( string verb );
chime_inherit.c | 30 | query_chime_verbs();
chime_inherit.c | 31 | set_hung_up( int up );
chime_inherit.c | 32 | hung_up();
chime_inherit.c | 33 | set_hook( object hook );
chime_inherit.c | 34 | hook();
chime_inherit.c | 36 | do_hang( object hook );
chime_inherit.c | 37 | do_unhang();
chime_inherit.c | 45 | create();
chime_inherit.c | 46 | create();
chime_inherit.c | 51 | set_name( "chime" );
chime_inherit.c | 52 | set_short( (: chimes_short() :) );
chime_inherit.c | 53 | set_long( (: chimes_long() :) );
chime_inherit.c | 54 | add_adjective( ({ "wind", chime_type() }) );
chime_inherit.c | 55 | set_value( 420 );
chime_inherit.c | 61 | do_hang( $1[0] ) :) );
chime_inherit.c | 62 | add_command( "unhang", "<direct:object'chime'>" );
chime_inherit.c | 79 | remove_adjective( _chime_type );
chime_inherit.c | 80 | add_adjective( type );
chime_inherit.c | 89 | environment();
chime_inherit.c | 101 | query_wind_speed();
chime_inherit.c | 106 | query_windsp( this_object() );
chime_inherit.c | 114 | call_out( "jingle", TIME );
chime_inherit.c | 140 | remove_call_out( "jingle" );
chime_inherit.c | 142 | call_out( "jingle", 30 );
chime_inherit.c | 156 | jingling() { return find_call_out( "jingle" );
chime_inherit.c | 160 | set_chime_type( arg[ "type" ] );
chime_inherit.c | 161 | set_chime_verbs( arg[ "chime verbs" ] );
chime_inherit.c | 162 | set_hook( arg[ "hook" ] );
chime_inherit.c | 163 | set_hung_up( arg[ "hung up" ] );
chime_inherit.c | 166 | remove_property( "there" );
chime_inherit.c | 167 | set_hung_up( 0 );
chime_inherit.c | 177 | hook() ]);
chime_inherit.c | 182 | a_short();
chime_inherit.c | 186 | add_failed_mess( "The chime is already hanging up.\n" );
chime_inherit.c | 204 | add_property( "there", "hanging "+ where );
chime_inherit.c | 205 | reset_get();
chime_inherit.c | 206 | set_hung_up( 1 );
chime_inherit.c | 207 | set_hook( hook );
chime_inherit.c | 216 | add_failed_mess( "The chime isn't hanging from anything.\n" );
chime_inherit.c | 219 | remove_property( "there" );
chime_inherit.c | 220 | set_get();
chime_inherit.c | 221 | set_hung_up( 0 );
chime_inherit.c | 222 | move( this_player() );
storage.c | 36 | create();
storage.c | 37 | create();
storage.c | 40 | add_alias( "furniture" );
storage.c | 41 | add_plural( "furniture" );
storage.c | 42 | set_opaque();
storage.c | 46 | this_object()->setup();
storage.c | 49 | set_no_all(1);
storage.c | 90 | set_max_weight(query_max_weight() + amount);
storage.c | 118 | write(the_short() + " resists being picked up and shocks you slightly.\n");
storage.c | 124 | add_weight( -w );
storage.c | 132 | add_weight( w );
storage.c | 137 | find_object( dest );
storage.c | 139 | move( dest, messin, messout );
storage.c | 142 | add_weight( w );
storage.c | 144 | add_weight( -w );
storage.c | 147 | inform_of_light_level_change(from);
storage.c | 149 | inform_of_light_level_change(dest);
storage.c | 159 | write("You feel it would be wrong to take " + the_short() + ".\n");
storage.c | 162 | get(dest);
storage.c | 171 | long( word, dark );
storage.c | 175 | sizeof( _drawers );
storage.c | 178 | m_indices( types );
storage.c | 179 | sizeof( sizes );
storage.c | 198 | test_remove(thing, flag, dest);
storage.c | 201 | this_player();
storage.c | 203 | find_player(thief->query_caster());
storage.c | 205 | query_owner();
storage.c | 207 | query_property("dropped");
storage.c | 217 | event(environment(thief), "theft", thief, this_object(), ({ thing }));
storage.c | 225 | query_short());
storage.c | 227 | event(environment(), "save");
storage.c | 246 | sizeof( _drawers );
storage.c | 250 | if ( (int)thing->query_complete_weight() >
storage.c | 252 | the_short() +"'s drawers.\n" );
storage.c | 255 | event(environment(), "save", this_object());
storage.c | 257 | test_add(thing, flag);
storage.c | 276 | pick_unlock(player);
storage.c | 280 | environment()->query_owner();
storage.c | 284 | this_object()->query_short() + ".\n");
storage.c | 288 | pick_unlock(player);
storage.c | 296 | pick_unlock(player);
storage.c | 304 | pick_lock(player);
storage.c | 311 | stats();
storage.c | 312 | sizeof( _drawers );
storage.c | 331 | int_query_static_auto_load();
storage.c | 339 | init_static_arg( map[ "::" ] );
storage.c | 345 | set_allowed_positions(map["allowed_positions"]);
storage.c | 353 | set_trap_armed(map["trap armed"]);
storage.c | 365 | query_dynamic_auto_load();
storage.c | 369 | query_bonded();
storage.c | 375 | init_dynamic_arg(map, 0);
storage.c | 376 | set_bonded(map["bonded"]);
document_handler.c | 13 | create();
document_handler.c | 14 | create();
document_handler.c | 15 | add_help_file("document_handler");
document_handler.c | 23 | query_save_dir() + "/" + query_commercial_id();
document_handler.c | 29 | setup_new_commercial_id();
document_handler.c | 34 | unguarded( (: mkdir(query_save_dir()) :));
document_handler.c | 39 | environment()->event_save(this_object());
document_handler.c | 44 | add_command("list", "documents [from] <direct:object>", (: do_list() :));
document_handler.c | 46 | do_display($4[0]) :));
document_handler.c | 48 | do_add_document($4[1], ($4[0] == "html"?DOCUMENT_HTML:DOCUMENT_PLAIN)) :));
document_handler.c | 51 | do_delete_document($4[0]) :));
document_handler.c | 58 | query_dynamic_auto_load();
document_handler.c | 59 | query_dynamic_auto_load(map);
document_handler.c | 64 | init_dynamic_arg(map);
document_handler.c | 65 | init_dynamic_arg(map);
bank_master.c | 17 | add_help_file("bank_master");
bank_master.c | 18 | create();
bank_master.c | 19 | create();
bank_master.c | 21 | set_commercial_name("bank");
bank_master.c | 28 | environment()->event_save(ob);
bank_master.c | 33 | stats();
bank_master.c | 45 | load_object(franchise);
bank_master.c | 50 | query_bank_name() == query_bank_name() :));
bank_master.c | 68 | add_failed_mess("This bank has no franchises.\n");
bank_master.c | 72 | query_money_place();
bank_master.c | 76 | find_bank_object(franchise);
bank_master.c | 80 | money_value_string(BANK_HANDLER->query_bank_franchise_cost_per_month(query_bank_name(), franchise), place));
bank_master.c | 83 | write("$P$Franchises$P$" + ret);
bank_master.c | 94 | query_money_place();
bank_master.c | 95 | value_from_string(cost, place);
bank_master.c | 97 | add_failed_mess("Unknown amount " + cost + ".\n");
bank_master.c | 101 | set_bank_default_cost_to_open(query_bank_name(), amount);
bank_master.c | 103 | money_value_string(BANK_HANDLER->query_default_cost_to_start(query_bank_name()), place) + "\n");
bank_master.c | 114 | query_money_place();
bank_master.c | 115 | value_from_string(cost, place);
bank_master.c | 117 | add_failed_mess("Unknown amount " + cost + ".\n");
bank_master.c | 121 | set_bank_default_cost_per_month(query_bank_name(), amount);
bank_master.c | 123 | money_value_string(BANK_HANDLER->query_default_cost_to_start(query_bank_name()), place) + "\n");
bank_master.c | 136 | add_failed_mess("This bank already has a name.\n");
bank_master.c | 143 | query_banks();
bank_master.c | 154 | input_to("check_bank_name", 0, new_name);
bank_master.c | 155 | add_succeeded_mess("");
bank_master.c | 162 | write("Ok, aborting.\n");
bank_master.c | 165 | write("You set the bank name to " + new_name + ".\n");
bank_master.c | 166 | create_new_bank(new_name, file_name(environment()));
bank_master.c | 167 | set_bank_name(new_name);
bank_master.c | 182 | add_failed_mess("You cannot set the cut less than 0.\n");
bank_master.c | 186 | add_failed_mess("You cannot set the cut to greator than 100%.\n");
bank_master.c | 190 | set_percentage(percent);
bank_master.c | 192 | add_succeeded_mess("$N set$s the cut to " + percent + "% on $D.\n");
bank_master.c | 209 | query_money_place();
bank_master.c | 210 | value_from_string(str, place);
bank_master.c | 212 | add_failed_mess("Unable to parse the string " + str + ".\n");
bank_master.c | 215 | set_account_cost(value);
bank_master.c | 217 | money_value_string(value, place) + " on $D.\n");
bank_master.c | 233 | lower_case(id);
bank_master.c | 235 | add_failed_mess("Must be one letter.\n");
bank_master.c | 238 | query_franchises(query_bank_name());
bank_master.c | 242 | sprintf("%c", 'A' + sizeof(franchises) - 1) + ".\n");
bank_master.c | 246 | value_from_string(amount, query_money_place());
bank_master.c | 248 | add_failed_mess("The amount " + amount + " is invalid.\n");
bank_master.c | 266 | query_money_place();
bank_master.c | 301 | query_dynamic_auto_load();
bank_master.c | 302 | add_auto_load_value(map, OBJECT_TAG, "bank", query_bank_name());
bank_master.c | 303 | add_auto_load_value(map, OBJECT_TAG, "open", query_account_cost());
bank_master.c | 304 | add_auto_load_value(map, OBJECT_TAG, "percentage", query_percentage());
bank_master.c | 305 | add_auto_load_value(map, OBJECT_TAG, "difference", query_total_difference());
bank_master.c | 310 | init_dynamic_arg(map, player);
bank_master.c | 311 | set_bank_name(query_auto_load_value(map, OBJECT_TAG, "bank"));
bank_master.c | 312 | set_account_cost(query_auto_load_value(map, OBJECT_TAG, "open"));
bank_master.c | 313 | set_percentage(query_auto_load_value(map, OBJECT_TAG, "percentage"));
bank_master.c | 314 | set_total_difference(query_auto_load_value(map, OBJECT_TAG, "difference"));
bank_master.c | 318 | init();
bank_master.c | 319 | init();
bank_master.c | 323 | do_set_main_bank_name($4[0]) :));
bank_master.c | 325 | do_set_franchise_cost($4[0]) :));
bank_master.c | 327 | do_set_default_monthly_cost($4[0]) :));
bank_master.c | 329 | do_set_cut($4[0]) :));
bank_master.c | 331 | do_set_open_cost($4[0]) :));
bank_master.c | 333 | do_set_franchise_cost_per_month($4[1], $4[0]) :));
bath.c | 31 | zap_bad_effects( object who );
bath.c | 32 | do_wash(object *indirect_obs );
bath.c | 35 | create();
bath.c | 36 | add_property( "no recycling", 1 );
bath.c | 37 | this_object()->add_extra_look( this_object() );
bath.c | 38 | add_help_file("bath");
bath.c | 47 | all_inventory( this_object() );
bath.c | 70 | init();
bath.c | 71 | add_command( "lie", "in <direct:object>");
bath.c | 72 | add_command( "sit", "in <direct:object>");
bath.c | 73 | add_command( "kneel", "in <direct:object>");
bath.c | 74 | add_command( "stand", "in <direct:object>");
bath.c | 75 | add_command( "leave", "<direct:object>");
bath.c | 76 | add_command( "fill", "<direct:object>");
bath.c | 77 | add_command( "empty", "<direct:object>");
bath.c | 78 | add_command( "splash", "<indirect:living:here>");
bath.c | 79 | add_command( "wash", "<indirect:living:here>");
bath.c | 99 | this_object()->move(environment(this_player() ));
bath.c | 101 | this_object()->short()+".\n");
bath.c | 103 | this_object()->short()+".\n", this_player() );
bath.c | 116 | living($1) :) );
bath.c | 121 | add_effect( WET_EFFECT, 500 );
bath.c | 128 | wet_everyone_in();
bath.c | 134 | this_player();
bath.c | 140 | add_succeeded_mess( "", ({ }) );
bath.c | 141 | tell_object(player, "You fill the " + this_object()->short() + " with clean water.\n" );
bath.c | 143 | this_object()->short() + " with clean water.\n", player );
bath.c | 146 | wet_everyone_in();
bath.c | 153 | this_player();
bath.c | 159 | add_succeeded_mess( "", ({ }) );
bath.c | 175 | this_player();
bath.c | 176 | add_succeeded_mess( "", ({ }) );
bath.c | 179 | tell_object(player, "You are already lying in the pool.\n" );
bath.c | 182 | tell_object(player, "You lie in the " + this_object()->short() + ".\n" );
bath.c | 184 | this_object()->short() + ".\n", player );
bath.c | 187 | tell_object(player, "You step into the " + this_object()->short() + " and lie down.\n" );
bath.c | 189 | this_object()->short() + " and lies down.\n", player );
bath.c | 191 | add_effect( WET_EFFECT, 500 );
bath.c | 194 | set_position( "lying" );
bath.c | 195 | set_position_type( "in" );
bath.c | 196 | set_position_on( "the "+this_object()->short() );
bath.c | 207 | this_player();
bath.c | 208 | add_succeeded_mess( "", ({ }) );
bath.c | 211 | tell_object(player, "You are already sitting in the " + this_object()->short() + ".\n" );
bath.c | 214 | tell_object(player, "You sit in the " + this_object()->short() + ".\n" );
bath.c | 216 | this_object()->short() + ".\n", player );
bath.c | 219 | tell_object(player, "You step into the " + this_object()->short() + " and sit down.\n" );
bath.c | 221 | this_object()->short() + " and sits down.\n", player );
bath.c | 223 | add_effect( WET_EFFECT, 500 );
bath.c | 226 | set_position( "sitting" );
bath.c | 227 | set_position_type( "in" );
bath.c | 228 | set_position_on( "the "+this_object()->short() );
bath.c | 238 | add_succeeded_mess( "", ({ }) );
bath.c | 239 | this_player();
bath.c | 242 | tell_object(player, "You are already kneeling in the " + this_object()->short() + ".\n" );
bath.c | 245 | tell_object(player, "You kneel in the " + this_object()->short() + ".\n" );
bath.c | 247 | this_object()->short() + ".\n", player );
bath.c | 250 | tell_object(player, "You step into the " + this_object()->short() + " and kneel down.\n" );
bath.c | 252 | this_object()->short() + " and kneel down.\n", player );
bath.c | 254 | add_effect( WET_EFFECT, 500 );
bath.c | 257 | set_position( "kneeling" );
bath.c | 258 | set_position_type( "in" );
bath.c | 259 | set_position_on( "the "+this_object()->short() );
bath.c | 270 | add_succeeded_mess( "", ({ }) );
bath.c | 271 | this_player();
bath.c | 274 | tell_object(player, "You are already standing in the " + this_object()->short() + ".\n" );
bath.c | 277 | tell_object(player, "You stand in the " + this_object()->short() + ".\n" );
bath.c | 279 | this_object()->short() + ".\n", player );
bath.c | 282 | tell_object(player, "You step into the " + this_object()->short() + ".\n" );
bath.c | 284 | this_object()->short() + ".\n", player );
bath.c | 286 | add_effect( WET_EFFECT, 500 );
bath.c | 289 | set_position( "lying" );
bath.c | 290 | set_position_type( "in" );
bath.c | 291 | set_position_on( "the "+this_object()->short() );
bath.c | 299 | this_player()->return_to_default_position(1);
bath.c | 308 | this_player()->return_to_default_position(1);
bath.c | 309 | tell_object(this_player(), "You clamber out of the " + this_object()->short() + ".\n" );
bath.c | 311 | this_object()->short() + ".\n", this_player() );
bath.c | 317 | add_succeeded_mess( "", ({ }) );
bath.c | 336 | add_succeeded_mess( "$N splash$es $I.\n", indirect_obs );
bath.c | 374 | call_out( (: zap_bad_effects( $1 ) :), 0, victim );
bath.c | 377 | add_succeeded_mess( "$N wash$es $I using a bar of pleasant smelling soap.\n", indirect_obs );
bath.c | 381 | call_out( (: zap_bad_effects( $1 ) :), 0, this_player() );
bath.c | 408 | query_effs();
bath.c | 409 | effects_matching( "body.smell" );
bath.c | 410 | sizeof( enums );
bath.c | 412 | random( i );
bath.c | 417 | delete_effect( enums[ i ] );
bath.c | 421 | effects_matching("pie.cream");
bath.c | 423 | tell_object(who, "The cream washes right off your body.\n");
bath.c | 424 | delete_effect(enums[0]);
bath.c | 428 | effects_matching( "misc.ketchup" );
bath.c | 429 | sizeof( enums );
bath.c | 431 | random( i );
bath.c | 433 | write( "The soap rinses the ketchup off your face.\n" );
bath.c | 434 | delete_effect( enums[ i ] );
bath.c | 438 | effects_matching("exploded.apples");
bath.c | 440 | tell_object(who, "The apples wash right off your body.\n");
bath.c | 441 | delete_effect(enums[0]);
bath.c | 445 | effects_matching("object.label");
bath.c | 450 | delete_effect(enums[0]);
bath.c | 454 | effects_matching("body.frog-adhesive");
bath.c | 456 | tell_object(who, "The frog adhesive washes off in the water.\n");
bath.c | 457 | delete_effect(enums[0]);
bath.c | 461 | effects_matching("body.writing.soap");
bath.c | 465 | delete_effect(enums[0]);
bath.c | 471 | add_effect( SOAP_EFFECT, 10000 );
bath.c | 473 | add_effect( WET_EFFECT, 250 );
mirror.c | 12 | create();
mirror.c | 13 | add_extra_look(this_object());
mirror.c | 20 | environment(ob);
mirror.c | 24 | this_player()->check_dark((int)env->query_light());
dividor.c | 29 | setup_new_commercial_id();
dividor.c | 31 | query_commercial_id();
dividor.c | 65 | environment()->query_save_dir();
dividor.c | 66 | query_commercial_id();
dividor.c | 68 | mkdir(path);
dividor.c | 72 | explode(base_name(environment()), "/");
dividor.c | 73 | implode(bits[0..<2], "/");
dividor.c | 76 | mkdir(room_path);
dividor.c | 78 | query_commercial_id();
dividor.c | 80 | if (file_size(room_path + ".c") >
dividor.c | 88 | set_base_desc(\"" + environment()->query_base_desc() + "\");
dividor.c | 89 | set_main_room(\"" + base_name(environment()) + "\");
dividor.c | 90 | set_save_dir(\"" + path + "\");
dividor.c | 91 | set_theft_handler(\"" + environment()->query_theft_handler() + "\");
dividor.c | 92 | add_exit(\"" + ROOM_HANDLER->query_opposite_direction(query_exit_direction()) + "\", \"" + base_name(environment() + "\", \"door\");
dividor.c | 93 | set_property_size(" + _size + ");
dividor.c | 94 | add_property(\"place\", \"" + environment()->query_property("place") + "\");
dividor.c | 96 | write_file(room_path + ".c", stuff, 1);
dividor.c | 105 | environment()->add_exit(query_exit_direction(), query_exit_destination(), "door");
dividor.c | 112 | query_dynamic_auto_load();
dividor.c | 113 | add_auto_load_value(map, TAG, "exit", _exit_direction);
dividor.c | 114 | add_auto_load_value(map, TAG, "room", _our_room);
dividor.c | 115 | add_auto_load_value(map, TAG, "size", _size);
dividor.c | 121 | query_auto_load_value(map, TAG, "exit");
dividor.c | 122 | query_auto_load_value(map, TAG, "room");
dividor.c | 123 | query_auto_load_value(map, TAG, "size");
dividor.c | 124 | init_dynamic_arg(map);
furniture.c | 36 | create();
furniture.c | 40 | add_alias( "furniture" );
furniture.c | 41 | add_plural( "furniture" );
furniture.c | 42 | set_opaque();
furniture.c | 44 | add_property( "shop type", "furniture" );
furniture.c | 48 | this_object()->setup();
furniture.c | 89 | set_max_weight(query_max_weight() + amount);
furniture.c | 120 | add_weight( -w );
furniture.c | 128 | add_weight( w );
furniture.c | 133 | find_object( dest );
furniture.c | 135 | move( dest, messin, messout );
furniture.c | 138 | add_weight( w );
furniture.c | 140 | add_weight( -w );
furniture.c | 143 | inform_of_light_level_change(from);
furniture.c | 145 | inform_of_light_level_change(dest);
furniture.c | 156 | long( word, dark );
furniture.c | 160 | sizeof( _drawers );
furniture.c | 163 | m_indices( types );
furniture.c | 164 | sizeof( sizes );
furniture.c | 172 | sizeof(_on_top) == 1 ? "is " : "are " ), _on_top);
furniture.c | 178 | this_object()->find_inv_match( "", this_player() );
furniture.c | 179 | this_player() });
furniture.c | 180 | filter_array( things, (: environment( $1 ) == this_object() :) );
furniture.c | 183 | query_contents(start, things, ignore_living);
furniture.c | 195 | test_remove(thing, flag, dest);
furniture.c | 198 | query_property("dropped");
furniture.c | 211 | remove_property("_on_top");
furniture.c | 213 | event(environment(), "save");
furniture.c | 230 | test_add(thing, flag);
furniture.c | 237 | add_property("_on_top", 1);
furniture.c | 240 | sizeof( _drawers );
furniture.c | 244 | if ( (int)thing->query_complete_weight() >
furniture.c | 246 | the_short() +"'s drawers.\n" );
furniture.c | 248 | event(environment(), "save", this_object());
furniture.c | 257 | pick_unlock(player);
furniture.c | 260 | pick_unlock(player);
furniture.c | 264 | environment()->query_owner();
furniture.c | 268 | this_object()->query_short() + ".\n");
furniture.c | 272 | pick_unlock(player);
furniture.c | 289 | int_query_static_auto_load();
furniture.c | 297 | init_static_arg( map[ "::" ] );
furniture.c | 303 | set_allowed_positions( map["allowed_positions"]);
furniture.c | 311 | set_trap_armed(map["trap armed"]);
furniture.c | 318 | init_dynamic_arg(bing);
furniture.c | 335 | stats();
furniture.c | 337 | sizeof( _drawers );
basic.c | 21 | create();
basic.c | 22 | create();
basic.c | 24 | add_alias( "furniture" );
basic.c | 25 | add_plural( "furniture" );
basic.c | 26 | set_opaque();
basic.c | 30 | this_object()->setup();
basic.c | 34 | set_no_all(1);
basic.c | 46 | find_object(dest);
basic.c | 50 | write(the_short() + " resists being picked up and shocks you slightly.\n");
basic.c | 65 | move(dest, messin, messout);
basic.c | 68 | add_weight(-t);
basic.c | 72 | environment();
basic.c | 75 | add_weight(-f);
basic.c | 86 | write("You feel it would be wrong to take " + the_short() + ".\n");
basic.c | 89 | get(dest);
basic.c | 95 | int_query_static_auto_load();
basic.c | 97 | return ([ ]);
basic.c | 104 | query_dynamic_auto_load();
basic.c | 108 | query_bonded();
basic.c | 114 | init_dynamic_arg(map);
basic.c | 115 | set_bonded(map["bonded"]);
basic.c | 126 | query_bonded() }) });
sink_inherit.c | 29 | zap_bad_effects( object who );
sink_inherit.c | 30 | do_wash(object *indirect_obs );
sink_inherit.c | 33 | create();
sink_inherit.c | 34 | add_property( "no recycling", 1 );
sink_inherit.c | 35 | this_object()->add_extra_look( this_object() );
sink_inherit.c | 36 | add_help_file("bath");
sink_inherit.c | 45 | all_inventory( this_object() );
sink_inherit.c | 68 | init();
sink_inherit.c | 69 | add_command( "fill", "<direct:object>");
sink_inherit.c | 70 | add_command( "empty", "<direct:object>");
sink_inherit.c | 71 | add_command( "splash", "<indirect:living:here>");
sink_inherit.c | 72 | add_command( "wash", "<indirect:living:here>");
sink_inherit.c | 83 | living($1) :) );
sink_inherit.c | 88 | add_effect( WET_EFFECT, 500 );
sink_inherit.c | 95 | wet_everyone_in();
sink_inherit.c | 101 | this_player();
sink_inherit.c | 107 | add_succeeded_mess( "", ({ }) );
sink_inherit.c | 108 | tell_object(player, "You fill the " + this_object()->short() + " with clean water.\n" );
sink_inherit.c | 110 | this_object()->short() + " with clean water.\n", player );
sink_inherit.c | 113 | wet_everyone_in();
sink_inherit.c | 120 | this_player();
sink_inherit.c | 126 | add_succeeded_mess( "", ({ }) );
sink_inherit.c | 147 | add_succeeded_mess( "$N splash$es $I.\n", indirect_obs );
sink_inherit.c | 175 | call_out( (: zap_bad_effects( $1 ) :), 0, victim );
sink_inherit.c | 178 | add_succeeded_mess( "$N wash$es $I using a bar of pleasant smelling soap.\n", indirect_obs );
sink_inherit.c | 182 | call_out( (: zap_bad_effects( $1 ) :), 0, this_player() );
sink_inherit.c | 202 | query_effs();
sink_inherit.c | 203 | effects_matching( "body.smell" );
sink_inherit.c | 204 | sizeof( enums );
sink_inherit.c | 206 | random( i );
sink_inherit.c | 211 | delete_effect( enums[ i ] );
sink_inherit.c | 215 | effects_matching("pie.cream");
sink_inherit.c | 217 | tell_object(who, "The cream washes right off your body.\n");
sink_inherit.c | 218 | delete_effect(enums[0]);
sink_inherit.c | 222 | effects_matching( "misc.ketchup" );
sink_inherit.c | 223 | sizeof( enums );
sink_inherit.c | 225 | random( i );
sink_inherit.c | 227 | write( "The soap rinses the ketchup off your face.\n" );
sink_inherit.c | 228 | delete_effect( enums[ i ] );
sink_inherit.c | 232 | effects_matching("exploded.apples");
sink_inherit.c | 234 | tell_object(who, "The apples wash right off your body.\n");
sink_inherit.c | 235 | delete_effect(enums[0]);
sink_inherit.c | 239 | effects_matching("object.label");
sink_inherit.c | 244 | delete_effect(enums[0]);
sink_inherit.c | 248 | effects_matching("body.frog-adhesive");
sink_inherit.c | 250 | tell_object(who, "The frog adhesive washes off in the water.\n");
sink_inherit.c | 251 | delete_effect(enums[0]);
sink_inherit.c | 258 | add_effect( SOAP_EFFECT, 10000 );
sink_inherit.c | 260 | add_effect( WET_EFFECT, 250 );
furniture_base.c | 23 | add_property(string name, mixed type);
furniture_base.c | 24 | query_property(string name);
furniture_base.c | 25 | one_short();
furniture_base.c | 26 | query_light_needs_inform();
furniture_base.c | 27 | inform_of_light_level_change(object ob);
furniture_base.c | 28 | set_max_cond(int);
furniture_base.c | 29 | set_cond(int);
furniture_base.c | 39 | add_property( "shop type", "furniture" );
furniture_base.c | 41 | this_object()->set_max_cond(100000);
furniture_base.c | 42 | this_object()->set_cond(100000);
furniture_base.c | 49 | call_out("move", 2, "/room/void");
furniture_base.c | 107 | one_short();
furniture_base.c | 154 | find_player(player->query_caster());
furniture_base.c | 156 | query_owner();
furniture_base.c | 163 | this_object()->query_property("dropped");
furniture_base.c | 175 | query_owner(base_name(environment()));
furniture_base.c | 181 | return (!_bonded);
furniture_base.c | 213 | query_property(PLACEMENT_CURRENT_ROOM_VERB);
furniture_base.c | 222 | query_property(PLACEMENT_CURRENT_ROOM_OTHER);
furniture_base.c | 231 | query_property(PLACEMENT_CURRENT_ROOM_POSITION);
furniture_base.c | 239 | query_property(PLACEMENT_IMMOVABLE);
furniture_base.c | 249 | stringp(query_placement_other());
furniture_base.c | 258 | add_property(PLACEMENT_CURRENT_ROOM_VERB, verb);
furniture_base.c | 267 | add_property(PLACEMENT_CURRENT_ROOM_OTHER, other);
furniture_base.c | 276 | add_property(PLACEMENT_CURRENT_ROOM_POSITION, position);
furniture_base.c | 284 | query_property(PLACEMENT_IMMOVABLE);
one_armed_bandit_inherit.c | 9 | do_slot();
one_armed_bandit_inherit.c | 10 | do_pull_lever();
one_armed_bandit_inherit.c | 11 | do_read_dial();
one_armed_bandit_inherit.c | 13 | set_coin_type( string coin );
one_armed_bandit_inherit.c | 14 | set_chances( int c1, int c2, int c3, int c4, int c5 );
one_armed_bandit_inherit.c | 15 | set_prizes( int p1, int p2, int p3, int p4, int p5, int jackpot );
one_armed_bandit_inherit.c | 17 | query_prizes();
one_armed_bandit_inherit.c | 18 | query_chances();
one_armed_bandit_inherit.c | 19 | query_coin_type();
one_armed_bandit_inherit.c | 21 | rollem( object player );
one_armed_bandit_inherit.c | 22 | my_short();
one_armed_bandit_inherit.c | 39 | do_slot() :) );
one_armed_bandit_inherit.c | 41 | do_pull_lever() :) );
one_armed_bandit_inherit.c | 43 | do_read_dial() :) );
one_armed_bandit_inherit.c | 57 | query_main_plural_for( coin );
one_armed_bandit_inherit.c | 109 | add_a( _coin ) + " to play.\n", ({ }) );
one_armed_bandit_inherit.c | 122 | this_player()->adjust_money( -1, _coin );
one_armed_bandit_inherit.c | 123 | this_object()->adjust_money( 1 );
one_armed_bandit_inherit.c | 126 | add_a( _coin_short ) + " into $D.\n", ({ }) );
one_armed_bandit_inherit.c | 150 | call_out( "rollem", 0, this_player() );
one_armed_bandit_inherit.c | 161 | random( 10 );
one_armed_bandit_inherit.c | 163 | random( _chances[4] );
one_armed_bandit_inherit.c | 175 | random( _chances[4] );
one_armed_bandit_inherit.c | 187 | random( _chances[4] );
one_armed_bandit_inherit.c | 222 | adjust_money( _prizes[5] ,_coin );
one_armed_bandit_inherit.c | 223 | this_object()->adjust_money( -(_prizes[ 5 ]) );
one_armed_bandit_inherit.c | 230 | adjust_money( _prizes[ a1 ], _coin );
one_armed_bandit_inherit.c | 237 | my_short() + ".\n", ({player}) );
one_armed_bandit_inherit.c | 238 | this_object()->adjust_money( -(_prizes[ a1 ]) );
one_armed_bandit_inherit.c | 283 | this_object()->the_short();
document_handler.c | 27 | query_save_dir();
document_handler.c | 28 | save_me();
document_handler.c | 29 | is_open_for(string type, string name);
document_handler.c | 30 | add_auto_load_value(mapping map, string tag, string name, mixed value);
document_handler.c | 31 | query_auto_load_value(mapping map, string tag, string name);
document_handler.c | 60 | query_document_file_name(id);
document_handler.c | 62 | unguarded( (: read_file($(fname)) :) );
document_handler.c | 85 | query_document_file_name(id);
document_handler.c | 89 | unguarded( (: read_file($(fname)) :) );
document_handler.c | 92 | unguarded( (: NROFF_HAND->cat_file($(fname) + ".nroff", 1) :) );
document_handler.c | 95 | unguarded( (: read_file( $(fname)) :) );
document_handler.c | 97 | convert_html(text);
document_handler.c | 98 | unguarded( (: write_file($(fname) + ".proc", $(text), 1) :) );
document_handler.c | 127 | query_document_file_name(id);
document_handler.c | 131 | unguarded( (: read_file($(fname)) :) );
document_handler.c | 136 | unguarded( (: read_file($(fname)) :) );
document_handler.c | 139 | unguarded( (: read_file( $(fname)) :) );
document_handler.c | 141 | convert_html(text);
document_handler.c | 142 | unguarded( (: write_file($(fname) + ".proc", $(text), 1) :) );
document_handler.c | 170 | query_document_file_name(id);
document_handler.c | 172 | unguarded( (: write_file($(fname), $(text), 1) :));
document_handler.c | 183 | query_document_file_name(id);
document_handler.c | 185 | unguarded( (: rm($(fname) + ".proc") :));
document_handler.c | 186 | unguarded( (: rm($(fname) + ".nroff.o") :));
document_handler.c | 187 | unguarded( (: rm($(fname)) :));
document_handler.c | 188 | map_delete(_documents, id);
document_handler.c | 189 | save_me();
document_handler.c | 206 | new(class document);
document_handler.c | 210 | time();
document_handler.c | 214 | update_document_text(id, text);
document_handler.c | 215 | save_me();
document_handler.c | 229 | this_object() }));
document_handler.c | 235 | this_object() }));
document_handler.c | 244 | write("$P$Documents$P$" + ret);
document_handler.c | 246 | this_object() }));
document_handler.c | 259 | this_object() }));
document_handler.c | 263 | query_document_readable(id);
document_handler.c | 266 | this_object() }));
document_handler.c | 276 | write("$P$Document " + id + "$P$" + ret);
document_handler.c | 278 | this_object() }));
document_handler.c | 288 | this_object() }));
document_handler.c | 305 | write("Abandoning adding the document.\n");
document_handler.c | 309 | add_document(title, str, this_player()->query_cap_name(), type);
document_handler.c | 310 | write("Added the document into the collection.\n");
document_handler.c | 319 | this_object() }));
document_handler.c | 325 | this_object() }));
document_handler.c | 328 | delete_document(id);
document_handler.c | 329 | add_succeeded_mess("$N delete$s a document from $I.\n", ({ this_object() }));
document_handler.c | 336 | add_auto_load_value(map, TAG, "documents", _documents);
document_handler.c | 337 | add_auto_load_value(map, TAG, "doc id", _next_doc_id);
document_handler.c | 345 | query_auto_load_value(map, TAG, "documents");
document_handler.c | 349 | query_auto_load_value(map, TAG, "doc id");
document_handler.c | 357 | add_command("list", "documents [from] <direct:object>", (: do_list() :));
document_handler.c | 359 | do_display($4[0]) :));
document_handler.c | 361 | do_add_document($4[1], ($4[0] == "html"?DOCUMENT_HTML:DOCUMENT_PLAIN)) :));
document_handler.c | 364 | do_delete_document($4[0]) :));
document_handler.c | 371 | add_command("list", "[documents]", (: do_list() :));
document_handler.c | 373 | do_display($4[0]) :));
document_handler.c | 375 | do_add_document($4[1], ($4[0] == "html"?DOCUMENT_HTML:DOCUMENT_PLAIN)) :));
document_handler.c | 377 | do_delete_document($4[0]) :));
card_base.c | 10 | is_card_red(class playing_card card);
card_base.c | 24 | new(class playing_card);
card_base.c | 32 | new(class playing_card);
card_base.c | 52 | random(sizeof(deck));
card_base.c | 119 | sprintf("%s%-2d%s", colour, card->number, ret);
card_base.c | 160 | allocate(3, "%^BOLD%^%^RED%^");
card_base.c | 162 | allocate(3, "%^BOLD%^");
card_base.c | 221 | allocate(2);
card_base.c | 242 | sprintf("%2d", card->number);
card_base.c | 317 | map(hand, (: query_card_three :));
card_base.c | 319 | map(hand, (: ({ query_card_string($1) }) :));
card_base.c | 321 | map(hand, (: query_card_two :));
card_base.c | 346 | sizeof(card_str[0]);
card_base.c | 386 | compare_cards($1, $2, $(flags)) :));
multiplayer_base.c | 26 | query_currently_playing_ids();
multiplayer_base.c | 27 | delete_gone_players();
multiplayer_base.c | 28 | find_player_id_of_person(object person);
multiplayer_base.c | 40 | renumber_players();
multiplayer_base.c | 48 | delete_gone_players();
multiplayer_base.c | 54 | query_currently_playing_ids();
multiplayer_base.c | 129 | find_player_id_of_person(ob);
multiplayer_base.c | 140 | find_player_id_of_person(ob);
multiplayer_base.c | 158 | query_name();
multiplayer_base.c | 159 | query_cap_name();
multiplayer_base.c | 203 | keys(_players);
multiplayer_base.c | 206 | random(sizeof(ids));
multiplayer_base.c | 219 | new(class player_info);
multiplayer_base.c | 228 | map_delete(_players, id);
multiplayer_base.c | 270 | keys(_players);
multiplayer_base.c | 278 | filter(keys(_players), (: is_person_playing($1) :));
multiplayer_base.c | 308 | find_player(_players[id]->name);
multiplayer_base.c | 320 | query_player_object(id);
multiplayer_base.c | 322 | the_short();
multiplayer_base.c | 337 | query_player_object(id);
multiplayer_base.c | 339 | poss_short();
multiplayer_base.c | 379 | if (sizeof(query_currently_playing_ids()) >
multiplayer_base.c | 403 | sizeof(_players);
multiplayer_base.c | 404 | find_player_id_from_number(cur);
multiplayer_base.c | 431 | sizeof(_players)) % sizeof(_players);
multiplayer_base.c | 432 | find_player_id_from_number(cur);
multiplayer_base.c | 445 | find_next_player(_current_player);
multiplayer_base.c | 471 | find_player_id_from_number(0);
multiplayer_base.c | 494 | find_player(_players[id]->name);
multiplayer_base.c | 497 | tell_object(player, message);
multiplayer_base.c | 506 | tell_player(_current_player, message);
multiplayer_base.c | 523 | tell_player(id, message);
multiplayer_base.c | 575 | random(sizeof(arr));
multiplayer_base.c | 591 | add_failed_mess("Someone is already playing " + id + " on $D.\n");
multiplayer_base.c | 596 | add_failed_mess("You are already playing on $D.\n");
multiplayer_base.c | 609 | add_succeeded_mess("$N $V as " + id + " on $D.\n");
multiplayer_base.c | 610 | multiplayer_someone_joins(id);
multiplayer_base.c | 614 | add_failed_mess("Some weird error joining game on $D.\n");
multiplayer_base.c | 625 | find_player_id_of_person(this_player());
multiplayer_base.c | 627 | add_succeeded_mess("$N $V from the game on $D.\n");
multiplayer_base.c | 628 | multiplayer_someone_resigns(id, this_player()->query_cap_name());
multiplayer_base.c | 630 | increment_current_player();
multiplayer_base.c | 634 | add_failed_mess("You are not playing on $D to resign.\n");
multiplayer_base.c | 642 | implode(keys(_players), "|");
multiplayer_base.c | 644 | do_join($4[0]) :));
multiplayer_base.c | 646 | do_resign() :));
multiplayer_base.c | 654 | add_auto_load_value(map, LOAD_TAG, "players", _players);
multiplayer_base.c | 655 | add_auto_load_value(map, LOAD_TAG, "current player", _current_player);
multiplayer_base.c | 656 | add_auto_load_value(map, LOAD_TAG, "started ids", _ids_when_started);
multiplayer_base.c | 657 | add_auto_load_value(map, LOAD_TAG, "winner", _winner);
multiplayer_base.c | 658 | add_auto_load_value(map, LOAD_TAG, "game started", _game_started);
multiplayer_base.c | 667 | query_auto_load_value(map, LOAD_TAG, "players");
multiplayer_base.c | 668 | query_auto_load_value(map, LOAD_TAG, "current player");
multiplayer_base.c | 669 | query_auto_load_value(map, LOAD_TAG, "started ids");
multiplayer_base.c | 670 | query_auto_load_value(map, LOAD_TAG, "winner");
multiplayer_base.c | 671 | query_auto_load_value(map, LOAD_TAG, "game started");
ink.c | 15 | add_extra_look(this_object());
ink.c | 16 | add_property("splashed with", previous_object()->query_liquid_name());
ink.c | 25 | previous_object()->query_property("splashed with");
peace_shadow.c | 29 | shadow( person, 1 );
peace_shadow.c | 33 | dest_peace_shadow() { destruct(TO);
peace_shadow.c | 37 | dest_peace_shadow();
peace_shadow.c | 41 | dest_peace_shadow();
peace_shadow.c | 67 | tell_object(TP, GFR);
peace_shadow.c | 81 | tell_object(TP, GMR);
peace_shadow.c | 95 | tell_object(TP, GOR);
peace_shadow.c | 109 | tell_object(TP, GRR);
peace_shadow.c | 132 | tell_object(TP, GSR);
peace_shadow.c | 141 | tell_object(TO, GER);
death_ward.c | 16 | event_death( thing, killers, killer, room_mess, killer_mess );
death_ward.c | 21 | remove_armour( player );
death_ward.c | 22 | move( "/room/rubbish" );
death_ward.c | 26 | arg();
death_ward.c | 29 | query_ac( "fire", damage );
death_ward.c | 31 | adjust_hp( -damage );
death_ward.c | 33 | attack_by( player );
death_ward.c | 35 | remove_this_effect();
owned_weapon.c | 16 | this_object()->remove_hide_invis( "concealed" );
owned_weapon.c | 21 | return (mixed)player->set_holder( thing, pos );
owned_weapon.c | 25 | return (string) arg();
swim_fins.c | 5 | query_skill_bonus(skill);
basic_trap.c | 21 | tell_object(this_player(), "Trap triggered.\n");
talker.c | 17 | do_talker_control(mixed *args, string pattern);
talker.c | 18 | do_chat(string message, string pattern, string verb);
talker.c | 20 | handle_status_command(string mode, class talker_args args);
talker.c | 21 | handle_verbose_command(string mode, class talker_args args);
talker.c | 22 | handle_history_command(string channel, class talker_args args);
talker.c | 23 | handle_colour_list(mixed *colour_args, class talker_args args);
talker.c | 25 | handle_colour_command(string channel, string new_colour, class talker_args args);
talker.c | 26 | handle_colour_on_off_command( string str_status, class talker_args args);
talker.c | 27 | handle_colour_toggle_command( class talker_args args);
talker.c | 29 | handle_echo_command( string mode, class talker_args args);
talker.c | 36 | environment(player);
talker.c | 38 | tell_creator("taffyd", "%O, %O, %O.\n", player, this_player(), where);
talker.c | 47 | init();
talker.c | 51 | arg();
talker.c | 56 | set_arg(args);
talker.c | 77 | do_talker_control($4, $5) :) );
talker.c | 81 | do_chat($4[0], $5, $6) :) );
talker.c | 85 | do_chat(":" + $4[0], $5, $6) :) );
talker.c | 93 | set_arg(args);
talker.c | 98 | tell_creator("taffyd", "Adding channel. %O.\n", channel);
talker.c | 101 | do_chat($4[0], $5, $6) :) );
talker.c | 105 | do_chat(":" + $4[0], $5, $6) :) );
talker.c | 109 | init();
talker.c | 114 | environment(player);
talker.c | 128 | arg();
talker.c | 132 | handle_status_command(args[0], t_args);
talker.c | 134 | handle_verbose_command(args[0], t_args);
talker.c | 137 | tell_object(this_player(), "The eyes are asleep.\n");
talker.c | 144 | query_multiple_short( t_args->channels ) + ".\n" );
talker.c | 149 | handle_echo_command( args[0], t_args );
talker.c | 152 | add_succeeded_mess( ({ "", "" }) );
talker.c | 156 | tell_object(this_player(),  "The eyes are asleep.\n");
talker.c | 160 | normalise_name( args[ 0 ] );
talker.c | 168 | member_array(full_name, t_args->channels);
talker.c | 176 | if (sizeof(t_args->channels) >
talker.c | 190 | set_arg(t_args);
talker.c | 195 | tell_object(this_player(),  "The eyes are asleep.\n");
talker.c | 198 | normalise_name( args[ 0 ] );
talker.c | 200 | clear_cache(this_player()->query_name());
talker.c | 212 | set_arg(t_args);
talker.c | 213 | this_object()->init();
talker.c | 224 | normalise_name( args[0] );
talker.c | 225 | handle_colour_command( args[0], args[1], t_args );
talker.c | 228 | handle_colour_on_off_command( args[0], t_args );
talker.c | 231 | handle_colour_toggle_command(t_args);
talker.c | 234 | handle_colour_list( args, t_args );
talker.c | 238 | normalise_name( args[0] );
talker.c | 239 | handle_history_command(args[0], t_args);
talker.c | 242 | handle_history_command("one", t_args);
talker.c | 249 | tell_object(this_player(),  "The eyes are asleep.\n");
talker.c | 253 | add_succeeded_mess("");
talker.c | 256 | normalise_name( args[ 0 ] );
talker.c | 263 | list() );
talker.c | 294 | tell_object(this_player(), "The eyes are asleep.\n");
talker.c | 307 | add_succeeded_mess("");
talker.c | 312 | query_chat_history(lower_case( channel ) );
talker.c | 325 | tell_object(this_player(), result);
talker.c | 342 | DEFAULT_COLOUR_WITH( args->colour );
talker.c | 347 | set_arg( args );
talker.c | 357 | DEFAULT_COLOUR_WITH(colour);
talker.c | 361 | set_arg( args );
talker.c | 385 | handle_colour_on_off_command( "off", args );
talker.c | 388 | handle_colour_on_off_command( "on", args );
talker.c | 394 | query_colour_status( args );
talker.c | 399 | add_failed_mess( "Talker colours for $D are already on!\n" );
talker.c | 402 | set_colour_status( args, "on" );
talker.c | 410 | add_failed_mess("Talker colours for $D have already been turned off!\n");
talker.c | 413 | set_colour_status( args, "off" );
talker.c | 414 | add_succeeded_mess( ({ "The eyes on $D blink sadly.\n", "" }) );
talker.c | 419 | set_arg( args );
talker.c | 429 | query_colour_codes();
talker.c | 432 | upper_case( $1 ) :) );
talker.c | 435 | member_array( $1, $(valid_colours) ) > -1 :) );
talker.c | 450 | create_valid_colours( new_colour );
talker.c | 454 | implode( map( colours[ 1 ], (: "%^" + $1 + "%^" :) ), "" );
talker.c | 456 | set_channel_colour( args, channel, valid_colour );
talker.c | 462 | add_failed_mess( "The colour $I is invalid.\n", colours[ 0 ] );
talker.c | 466 | add_failed_mess( "The colours $I are invalid.\n", colours[ 0 ] );
talker.c | 497 | set_arg(args);
talker.c | 504 | tell_object(this_player(), "The eyes are asleep.\n");
talker.c | 511 | tell_object(this_player(), "The eyes ignore you completely.\n");
talker.c | 531 | set_arg(args);
talker.c | 545 | environment(player);
talker.c | 546 | arg();
talker.c | 579 | user_event( "inform", txt, "cheat" );
talker.c | 580 | log_file( "/d/admin/log/TALKER", txt + "\n" );
talker.c | 582 | this_player(1)->add_property( "talker cheat", 1, 3 );
talker.c | 586 | query_property("ignoring");
talker.c | 593 | fix_shorthand(text);
talker.c | 650 | tell_object(where, colour +  "$I$5=$C$"+ text + "%^RESET%^\n" );
talker.c | 656 | map(receivers, (: $1->query_player() :));
talker.c | 657 | this_player() });
talker.c | 682 | add_succeeded_mess("$N whisper$s lovingly to $D.\n");
talker.c | 686 | arg();
talker.c | 688 | tell_object(this_player(), "The eyes are asleep.\n");
talker.c | 697 | replace(message, ({ "%^", "" }) );
talker.c | 710 | add_failed_mess("Sorry, you are not allowed to use a talker.\n");
talker.c | 717 | add_failed_mess(environment(this_player())->query_property("no talker"));
talker.c | 719 | add_failed_mess("Your talker doesn't seem to work here.\n");
talker.c | 731 | add_failed_mess("You're too far away from $D to whisper into it.\n");
talker.c | 744 | this_player()->query_cap_name();
talker.c | 752 | fix_shorthand(message);
talker.c | 754 | children( PATH + "talker" );
talker.c | 757 | find_object( PATH + "talker" ) });
talker.c | 759 | this_object(), find_object( PATH + "talker" ) });
talker.c | 766 | map(things, (: $1->query_player() :));
talker.c | 767 | this_player() });
talker.c | 770 | short() + ".\n", receivers);
talker.c | 773 | receive(verb, sender, message, things);
talker.c | 781 | user_event( "intermud_tell", sender + " ", message[1..], "dwchat" );
talker.c | 783 | eventSendChannel(sender, "discworld-chat", message, 1);
talker.c | 786 | eventSendChannel( sender, "discworld-chat", message, 0 );
talker.c | 787 | user_event( "intermud_tell", sender +": ", message, "dwchat" );
talker.c | 794 | set_arg(args);
talker.c | 795 | add_failed_mess("You're no longer a playtester!\n");
talker.c | 806 | add_chat_history( verb , sender +" wisped: ", message );
talker.c | 827 | environment( player )->remove_object2( player, 1 );
talker.c | 828 | environment( player )->remove_object( player, 1 );
talker.c | 829 | init();
talker.c | 833 | remove_effect_shadow( i );
talker.c | 859 | format_channel_colour( args->colour[ channel ] ) + ".\n");
talker.c | 866 | format_channel_colour( args->colour[ "default" ] ) + ".\n");
talker.c | 879 | add_failed_mess( "Talker echo is already on for $D!\n" );
talker.c | 884 | add_succeeded_mess( ({ "The eyes on $D flash slowly.\n", "" }) );
talker.c | 887 | add_failed_mess( "Talker echo is already off for $D!\n" );
talker.c | 896 | set_arg( args );
newbie_shoes.c | 41 | move(dest, inmsg, outmsg);
newbie_shoes.c | 57 | taken_off(what, eff);
newbie_shoes.c | 59 | remove_this_effect();
identity_hold.c | 69 | remove_this_effect();
identity_hold.c | 91 | if ( strlen( tmp ) >
identity_hold.c | 102 | explode(word, " ");
identity_hold.c | 109 | remove_this_effect();
identity_hold.c | 124 | parse_command_id_list();
identity_hold.c | 136 | parse_command_adjectiv_id_list();
identity_hold.c | 148 | environment(player);
identity_hold.c | 151 | environment(ob);
identity_hold.c | 155 | remove_this_effect();
identity_hold.c | 162 | move( dest, messin, messout );
identity_hold.c | 166 | call_out((: check_move_stuff :), 2);
flu_shadow.c | 29 | this_player()->force_soul_command(soulverb[random(sizeof(soulverb))]+" "+souladverb[random(sizeof(souladverb))]);
flu_shadow.c | 37 | if (random(100) >
flu_shadow.c | 38 | tell_object(player, "You feel dizzy and bleary eyed.\n");
flu_shadow.c | 41 | look_me();
flu_shadow.c | 52 | if(random(100) >
flu_shadow.c | 53 | tell_object(player, "You feel too ill, and can't be bothered to attack.\n");
flu_shadow.c | 56 | attack_ob(target);
flu_shadow.c | 62 | if(random(100) >
flu_shadow.c | 65 | this_player()->force_soul_command("sneeze");
flu_shadow.c | 68 | cast(str);
headache_shadow.c | 11 | tell_object(player, "Your head hurts too much to try anything.\n");
headache_shadow.c | 20 | write("Your head hurts too much to muster your might.\n");
headache_shadow.c | 23 | command_shadowed(verb, arg);
ken_curse.c | 185 | mangle_speech( str );
ken_curse.c | 186 | replace(" "+(stringp(tmp)?tmp:str)+" ", replace_matrix);
ken_curse.c | 187 | explode(tmp, " ");
ken_curse.c | 188 | sizeof(bits);
ken_curse.c | 195 | implode(bits, " ");
ken_curse.c | 217 | replace(tmp, ({ " !", "!", " .", ".", " ?", "?" }));
ensmurfed.c | 35 | query_short();
ensmurfed.c | 36 | query_guild_ob();
ensmurfed.c | 43 | calc_extra_look();
ensmurfed.c | 44 | weather_extra_look();
ensmurfed.c | 45 | query_living_contents(0);
ensmurfed.c | 68 | mangle_speech( str );
ensmurfed.c | 70 | explode(tmp, " ");
ensmurfed.c | 71 | sizeof(bits);
ensmurfed.c | 72 | smurf( bits[i] );
ensmurfed.c | 74 | implode(bits, " ");
antisqeal.c | 30 | mangle_speech( s );
antisqeal.c | 36 | replace(s, replace_matrix);
chef_curse.c | 56 | mangle_speech( s );
no_player_title.c | 7 | tell_object( player, "You are not allowed to have a player title.\n" );
no_player_title.c | 11 | add_property( var, val, tim );
no_player_title.c | 19 | query_property( prop );
no_player_title.c | 23 | submit_ee2( player->sid_to_enum( id ), "spam", 5, EE_CONTINUOUS );
deaf_shadow.c | 19 | event_whisper(ob, start, mess, d, lang);
deaf_shadow.c | 29 | if (random(100) >
deaf_shadow.c | 30 | event_person_say(ob, start, mess, lang);
deaf_shadow.c | 37 | event_person_say(ob, start, mess, lang);
deaf_shadow.c | 47 | tell_object(player, sprintf("New Say: %O %O %O %O %O\n", ob, start, mess, lang, avoid));
terrain_dont_unload.c | 3 | tell_object( find_player("gerbil"), "BP.\n");
terrain_dont_unload.c | 17 | remove_this_effect();
hat_tent.c | 28 | remove_this_effect();
spell_effects.c | 16 | arg();
spell_effects.c | 18 | evaluate(bit, player, ob);
spell_effects.c | 20 | call_other(bit[0], bit[1], player, ob);
spell_effects.c | 22 | do_spell_effects(ob);
eat_corpse.c | 7 | move( dest, messin, messout );
eat_corpse.c | 9 | call_out( "find_corpse", 0 );
eat_corpse.c | 21 | return ({ });
eat_corpse.c | 24 | return ({ });
eat_corpse.c | 26 | query_edible_bits_left();
eat_corpse.c | 28 | return ({ });
eat_corpse.c | 30 | query_race_ob();
eat_corpse.c | 32 | return ({ });
eat_corpse.c | 35 | sizeof( $(race_obj)->query_bit($1)[2] ) == 3 :) );
eat_corpse.c | 42 | all_inventory( environment(player) );
eat_corpse.c | 46 | remove_call_out( "eat_corpse" );
eat_corpse.c | 47 | call_out( "eat_corpse", 1 + random(120), ob );
eat_corpse.c | 59 | call_out( "find_corpse", 1 + random(2*60) );
eat_corpse.c | 63 | query_valid_bits( corpse );
eat_corpse.c | 67 | add_bit_gone( which_bit );
eat_corpse.c | 74 | if( sizeof( valid_bits ) >
eat_corpse.c | 75 | remove_call_out( "eat_corpse" );
eat_corpse.c | 76 | call_out( "eat_corpse", 1 + random(2*60), corpse );
eat_corpse.c | 78 | call_out( "find_corpse", 1 + random(2*60) );
eat_corpse.c | 84 | event_enter( ob, mess, from );
eat_corpse.c | 87 | remove_call_out( "eat_corpse" );
eat_corpse.c | 88 | call_out( "eat_corpse", 10, ob );
sell_stuff.c | 20 | arg();
sell_stuff.c | 28 | all_inventory(player);
sell_stuff.c | 29 | sizeof(obs);
sell_stuff.c | 31 | call_out("sell_the_stuff", 1, obs[i]);
sell_stuff.c | 32 | call_out( "drop_the_stuff", 2, obs[ i ] );
sell_stuff.c | 34 | call_out( "bury_the_stuff", 3, query_multiple_short( obs ) );
sell_stuff.c | 36 | call_out("remove_this_effect", 4);
sell_stuff.c | 40 | do_command("sell "+ob->query_name());
sell_stuff.c | 44 | do_command( "drop "+ (string)thing->query_name() );
sell_stuff.c | 48 | do_command( "bury "+ words );
uu_staff_protection.c | 26 | arg();
uu_staff_protection.c | 32 | do_command(info[0]);
uu_staff_protection.c | 37 | the_short(), info[3]);
uu_staff_protection.c | 38 | add_property("Wizard attack", player->query_name(), 600);
uu_staff_protection.c | 50 | query_name();
uu_staff_protection.c | 55 | query_no_offences(name));
uu_staff_protection.c | 56 | arg();
uu_staff_protection.c | 59 | init_command(info[1], 1);
uu_staff_protection.c | 62 | init_command(info[2], 1);
uu_staff_protection.c | 63 | punishment(name);
uu_staff_protection.c | 67 | event_enter(ob, mess, from);
vampirebite_shadow.c | 12 | add_property( "no burial", 1 );
vampirebite_shadow.c | 13 | add_property( "vampire corpse", 1 );
vampirebite_shadow.c | 17 | query_short();
vampirebite_shadow.c | 20 | convert_message( player->a_short() );
vampirebite_shadow.c | 24 | copy( player->query_level() ), 0 }) );
vampirebite_shadow.c | 34 | effects_matching( "body.bite.vampire" );
vampirebite_shadow.c | 35 | call_out( "remove_this_effect", 2 );
vampirebite_shadow.c | 37 | do_death( thing, weapon, attack );
vampirebite_shadow.c | 38 | vamp_corpse( corpse );
vampirebite_shadow.c | 46 | make_corpse();
vampirebite_shadow.c | 47 | vamp_corpse( corpse );
eat_edible.c | 19 | real_eat(object ob);
eat_edible.c | 20 | do_eat_edible();
eat_edible.c | 25 | move(dest, messin, messout);
eat_edible.c | 27 | call_out((: do_eat_edible :), 0);
eat_edible.c | 36 | all_inventory(player);
eat_edible.c | 37 | sizeof(obs);
eat_edible.c | 39 | call_out((: real_eat :), 1, obs[i]);
eat_edible.c | 46 | do_command("eat "+ob->query_name());
eat_edible.c | 51 | event_enter(ob, mess, from);
eat_edible.c | 53 | call_out("real_eat", 2, ob);
ngood_fighter.c | 77 | query_skill(skill);
ngood_fighter.c | 79 | add_skill_level(skill, level - cur);
ngood_fighter.c | 99 | query_skill(skill);
ngood_fighter.c | 101 | add_known_command(command);
ngood_fighter.c | 116 | arg();
ngood_fighter.c | 125 | query_level();
ngood_fighter.c | 126 | check_skill("other.perception", lvl / 2);
ngood_fighter.c | 127 | check_skill("other.health", lvl);
ngood_fighter.c | 130 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
ngood_fighter.c | 131 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
ngood_fighter.c | 132 | check_skill("fighting.combat.melee.pierce", lvl + adjust);
ngood_fighter.c | 133 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
ngood_fighter.c | 135 | check_skill("fighting.combat.melee.blunt", lvl + adjust);
ngood_fighter.c | 136 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
ngood_fighter.c | 137 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
ngood_fighter.c | 138 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
ngood_fighter.c | 140 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
ngood_fighter.c | 141 | check_skill("fighting.combat.melee.sharp", lvl + adjust);
ngood_fighter.c | 142 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
ngood_fighter.c | 143 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
ngood_fighter.c | 145 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
ngood_fighter.c | 146 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
ngood_fighter.c | 147 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
ngood_fighter.c | 148 | check_skill("fighting.combat.melee.unarmed", lvl + adjust);
ngood_fighter.c | 150 | check_skill("fighting.combat.melee.blunt", lvl);
ngood_fighter.c | 151 | check_skill("fighting.combat.melee.sharp", lvl);
ngood_fighter.c | 152 | check_skill("fighting.combat.melee.pierce", lvl);
ngood_fighter.c | 153 | check_skill("fighting.combat.melee.unarmed", lvl);
ngood_fighter.c | 158 | check_skill("fighting.combat.dodging", lvl + adjust);
ngood_fighter.c | 159 | check_skill("fighting.combat.parry", lvl - adjust);
ngood_fighter.c | 160 | init_command("tactics response dodge", 1);
ngood_fighter.c | 162 | check_skill("fighting.combat.dodging", lvl - adjust);
ngood_fighter.c | 163 | check_skill("fighting.combat.parry", lvl + adjust);
ngood_fighter.c | 164 | init_command("tactics response parry", 1);
ngood_fighter.c | 166 | check_skill("fighting.combat.dodging", lvl);
ngood_fighter.c | 167 | check_skill("fighting.combat.parry", lvl);
ngood_fighter.c | 168 | init_command("tactics response neutral", 1);
ngood_fighter.c | 170 | check_skill("fighting.combat.special", lvl / 2);
ngood_fighter.c | 171 | check_skill("fighting.points", lvl * 2);
ngood_fighter.c | 173 | init_command("tactics attitude offensive", 1);
ngood_fighter.c | 177 | check_add_command("riposte", "fighting.combat.special", 15);
ngood_fighter.c | 179 | check_add_command("hack", "fighting.combat.special", 15);
ngood_fighter.c | 180 | check_add_command("slash", "fighting.combat.special", 15);
ngood_fighter.c | 181 | check_add_command("slice", "fighting.combat.special", 75);
ngood_fighter.c | 182 | check_add_command("chop", "fighting.combat.special", 75);
ngood_fighter.c | 184 | check_add_command("behead", "fighting.combat.special", 150);
ngood_fighter.c | 187 | check_add_command("stab", "fighting.combat.special", 15);
ngood_fighter.c | 188 | check_add_command("pierce", "fighting.combat.special", 75);
ngood_fighter.c | 190 | check_add_command("impale", "fighting.combat.special", 150);
ngood_fighter.c | 194 | check_add_command("bash", "fighting.combat.special", 15);
ngood_fighter.c | 195 | check_add_command("smash", "fighting.combat.special", 75);
ngood_fighter.c | 197 | check_add_command("crush", "fighting.combat.special", 150);
ngood_fighter.c | 199 | check_add_command("feint", "fighting.combat.special", 15);
ngood_fighter.c | 200 | check_add_command("trip", "fighting.combat.special", 15);
ngood_fighter.c | 201 | check_add_command("shove", "fighting.combat.special", 15);
ngood_fighter.c | 202 | add_known_command("concentrate");
ngood_fighter.c | 311 | event_fight_in_progress(attacker, opponent);
ngood_fighter.c | 322 | do_command("concentrate " + (attacker->query_short()));
ngood_fighter.c | 323 | query_concentrating();
ngood_fighter.c | 330 | fight_in_progress(attacker);
ngood_fighter.c | 353 | query_holding() - ({ 0 });
ngood_fighter.c | 359 | sizeof(specials);
ngood_fighter.c | 362 | query_short()) });
ngood_fighter.c | 372 | sizeof(specials);
ngood_fighter.c | 382 | debug_printf("Commands available: %O", candidates);
ngood_fighter.c | 386 | query_name());
ngood_fighter.c | 389 | debug_printf("Trying to perform: %O", cmd);
ngood_fighter.c | 391 | do_command(cmd, 1);
ngood_fighter.c | 394 | debug_printf("No command to perform");
ngood_fighter.c | 399 | debug_printf("Not doing a special this time");
ngood_fighter.c | 417 | return ({ ({ "good fighter", "unattached" }) });
given.c | 27 | if(sizeof(arg()) >
given.c | 28 | arg();
given.c | 30 | arg() });
given.c | 33 | evaluate(bit[0], player, ob, mess, from);
given.c | 35 | call_other(bit[0], bit[1], player, ob, mess, from);
given.c | 38 | event_enter(ob, mess, from);
savage_corpse.c | 23 | move(dest, messin, messout);
savage_corpse.c | 25 | call_out("do_savage_corpse", 0);
savage_corpse.c | 34 | all_inventory(environment(player));
savage_corpse.c | 35 | sizeof(obs);
savage_corpse.c | 37 | sizeof(obs[i]->query_edible_bits_left()) >
savage_corpse.c | 38 | remove_call_out("real_savage");
savage_corpse.c | 39 | call_out("real_savage", 1 + random(120), obs[i]);
savage_corpse.c | 51 | call_out("do_savage_corpse", 1 + random(2*60));
savage_corpse.c | 54 | query_edible_bits_left();
savage_corpse.c | 55 | if (sizeof(bits) >
savage_corpse.c | 56 | random(sizeof(bits));
savage_corpse.c | 57 | make_bit(bits[i]);
savage_corpse.c | 60 | a_short() + ".\n");
savage_corpse.c | 61 | move(environment(player));
savage_corpse.c | 64 | if (sizeof(bits) >
savage_corpse.c | 66 | remove_call_out("real_savage");
savage_corpse.c | 67 | call_out("real_savage", 1 + random(2*60), ob);
savage_corpse.c | 69 | call_out("do_savage_corpse", 1 + random(2*60));
savage_corpse.c | 74 | event_enter(ob, mess, from);
savage_corpse.c | 76 | remove_call_out("real_savage");
savage_corpse.c | 77 | call_out("real_savage", 10, ob);
guard_duty.c | 23 | move(ob, in_thing, out_thing);
guard_duty.c | 26 | remove_call_out(id);
guard_duty.c | 34 | environment($1) == environment(player) :));
guard_duty.c | 36 | add_effect(GOTO_DEST, arg());
i_died.c | 23 | arg();
i_died.c | 25 | evaluate(bit, player);
i_died.c | 27 | call_other(bit[0], bit[1], player);
i_died.c | 31 | second_life();
i_died.c | 34 | submit_ee2( player->effects_matching(CLASS)[0], 0, 0, EE_REMOVE );
death.c | 16 | arg();
death.c | 18 | evaluate(bit, player);
death.c | 20 | call_other(bit[0], bit[1], player);
death.c | 24 | second_life();
death.c | 27 | remove_this_effect();
no_follow.c | 13 | call_out("do_command", 0, "lose everyone");
no_follow.c | 14 | add_follower(ob);
controlled_monster.c | 19 | set_enemy( object enemy );
controlled_monster.c | 28 | init();
controlled_monster.c | 31 | this_player()->add_command( "help", this_object(), "<direct:living:here>" );
controlled_monster.c | 51 | call_out( "go_away", 1 );
controlled_monster.c | 54 | call_out( "run_away", 1 );
controlled_monster.c | 70 | query_name() );
controlled_monster.c | 113 | this_object()->query_attacker_list();
controlled_monster.c | 114 | sizeof(list);
controlled_monster.c | 115 | this_object()->stop_fight( list[i] );
controlled_monster.c | 116 | stop_fight( this_object() );
controlled_monster.c | 118 | attack_ob( my_enemy );
controlled_monster.c | 119 | attack_ob( list[ i ] );
controlled_monster.c | 122 | the_short() +".\n");
controlled_monster.c | 128 | call_out( "set_enemy", 1, my_owner );
controlled_monster.c | 130 | call_out( "go_away", 1);
controlled_monster.c | 134 | this_object()->attack_ob( my_enemy );
controlled_monster.c | 135 | call_out( "move_me", 1 );
controlled_monster.c | 144 | call_out( "do_leave", time ) ;
controlled_monster.c | 145 | call_out( "move_me", 1 );
controlled_monster.c | 151 | call_out( "go_away", 0 );
controlled_monster.c | 154 | call_out( "go_away", 0 );
controlled_monster.c | 156 | tell_object( my_owner, (string)my_enemy->the_short() +" has left DiscWorld\n" );
controlled_monster.c | 158 | call_out( "move_me",0);
controlled_monster.c | 164 | if ( !my_owner ) call_out( "go_away", 0 );
controlled_monster.c | 168 | the_short() +" has been killed!\n");
controlled_monster.c | 170 | call_out( "move_me", 0 );
controlled_monster.c | 175 | tell_object( ob, str );
controlled_monster.c | 182 | move( environment( my_enemy ), enter_msg, leave_msg );
controlled_monster.c | 183 | tell_object( my_enemy, this_object()->the_short() +" says: You cannot escape me!\n" );
controlled_monster.c | 188 | move( environment( my_owner ), enter_msg, leave_msg );
controlled_monster.c | 189 | this_object()->do_command( "protect "+ (string)my_owner->query_name() );
controlled_monster.c | 190 | this_object()->do_command( "follow "+ (string)my_owner->query_name() );
controlled_monster.c | 194 | call_out( "go_away", 0 );
controlled_monster.c | 196 | call_out( "run_away", 1 );
controlled_monster.c | 203 | say( this_object()->the_short() +" smiles happily.\n" );
controlled_monster.c | 205 | call_out( "go_away", 2 );
controlled_monster.c | 214 | call_out("go_away",0);
controlled_monster.c | 220 | the_short()+".\n");
controlled_monster.c | 223 | call_out( "go_away", 1 );
controlled_monster.c | 227 | set_enemy( my_owner );
controlled_monster.c | 232 | set_enemy( my_owner );
controlled_monster.c | 236 | attack_by( ob );
controlled_monster.c | 241 | call_out( "move_me", 1 );
controlled_monster.c | 245 | write( leave_msg );
controlled_monster.c | 246 | move( "/room/rubbish" );
goto_destination.c | 21 | arg();
goto_destination.c | 32 | query_mmsgout() );
goto_destination.c | 33 | call_out("remove_this_effect", 0);
goto_destination.c | 35 | move_me_to(file_name(environment(womble)));
goto_destination.c | 38 | call_out("remove_this_effect", 0);
goto_destination.c | 48 | arg();
goto_destination.c | 56 | move(ob, in_thing, out_thing);
goto_destination.c | 60 | stop_following_route();
goto_destination.c | 61 | remove_this_effect();
goto_destination.c | 65 | call_out("remove_this_effect", 4);
mock_block.c | 18 | set_arg( arg() - skills );
mock_block.c | 22 | remove_this_effect();
mock_block.c | 23 | return ({});
mock_block.c | 25 | arg();
light_change.c | 13 | call_out("delayed_event_light_change",0, ob, delta );
light_change.c | 20 | arg();
light_change.c | 22 | evaluate(bit, player, ob, delta);
light_change.c | 24 | call_other(bit[0], bit[1], player, ob, delta);
light_change.c | 26 | event_light_change(ob, delta);
basilisk_stare.c | 53 | tell_object(player, "Oh dear! How do I defend myself? I forgot!\n") ;
enter.c | 16 | arg();
enter.c | 18 | evaluate(bit, player, ob, mess);
enter.c | 20 | call_other(bit[0], bit[1], player, ob, mess);
enter.c | 22 | event_enter(ob, mess);
good_fighter.c | 77 | query_skill(skill);
good_fighter.c | 79 | add_skill_level(skill, level - cur);
good_fighter.c | 99 | query_skill(skill);
good_fighter.c | 101 | add_known_command(command);
good_fighter.c | 116 | arg();
good_fighter.c | 125 | query_level();
good_fighter.c | 126 | check_skill("other.perception", lvl / 2);
good_fighter.c | 127 | check_skill("other.health", lvl);
good_fighter.c | 130 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
good_fighter.c | 131 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
good_fighter.c | 132 | check_skill("fighting.combat.melee.pierce", lvl + adjust);
good_fighter.c | 133 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
good_fighter.c | 135 | check_skill("fighting.combat.melee.blunt", lvl + adjust);
good_fighter.c | 136 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
good_fighter.c | 137 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
good_fighter.c | 138 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
good_fighter.c | 140 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
good_fighter.c | 141 | check_skill("fighting.combat.melee.sharp", lvl + adjust);
good_fighter.c | 142 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
good_fighter.c | 143 | check_skill("fighting.combat.melee.unarmed", lvl - adjust);
good_fighter.c | 145 | check_skill("fighting.combat.melee.blunt", lvl - adjust);
good_fighter.c | 146 | check_skill("fighting.combat.melee.sharp", lvl - adjust);
good_fighter.c | 147 | check_skill("fighting.combat.melee.pierce", lvl - adjust);
good_fighter.c | 148 | check_skill("fighting.combat.melee.unarmed", lvl + adjust);
good_fighter.c | 150 | check_skill("fighting.combat.melee.blunt", lvl);
good_fighter.c | 151 | check_skill("fighting.combat.melee.sharp", lvl);
good_fighter.c | 152 | check_skill("fighting.combat.melee.pierce", lvl);
good_fighter.c | 153 | check_skill("fighting.combat.melee.unarmed", lvl);
good_fighter.c | 158 | check_skill("fighting.combat.dodging", lvl + adjust);
good_fighter.c | 159 | check_skill("fighting.combat.parry", lvl - adjust);
good_fighter.c | 160 | init_command("tactics response dodge", 1);
good_fighter.c | 162 | check_skill("fighting.combat.dodging", lvl - adjust);
good_fighter.c | 163 | check_skill("fighting.combat.parry", lvl + adjust);
good_fighter.c | 164 | init_command("tactics response parry", 1);
good_fighter.c | 166 | check_skill("fighting.combat.dodging", lvl);
good_fighter.c | 167 | check_skill("fighting.combat.parry", lvl);
good_fighter.c | 168 | init_command("tactics response neutral", 1);
good_fighter.c | 170 | check_skill("fighting.combat.special", lvl / 2);
good_fighter.c | 171 | check_skill("fighting.points", lvl * 2);
good_fighter.c | 173 | init_command("tactics attitude offensive", 1);
good_fighter.c | 177 | check_add_command("riposte", "fighting.combat.special", 15);
good_fighter.c | 179 | check_add_command("hack", "fighting.combat.special", 15);
good_fighter.c | 180 | check_add_command("slash", "fighting.combat.special", 15);
good_fighter.c | 181 | check_add_command("slice", "fighting.combat.special", 75);
good_fighter.c | 182 | check_add_command("chop", "fighting.combat.special", 75);
good_fighter.c | 184 | check_add_command("behead", "fighting.combat.special", 150);
good_fighter.c | 187 | check_add_command("stab", "fighting.combat.special", 15);
good_fighter.c | 188 | check_add_command("pierce", "fighting.combat.special", 75);
good_fighter.c | 190 | check_add_command("impale", "fighting.combat.special", 150);
good_fighter.c | 193 | check_add_command("bash", "fighting.combat.special", 15);
good_fighter.c | 194 | check_add_command("smash", "fighting.combat.special", 75);
good_fighter.c | 196 | check_add_command("crush", "fighting.combat.special", 150);
good_fighter.c | 198 | check_add_command("feint", "fighting.combat.special", 15);
good_fighter.c | 199 | check_add_command("trip", "fighting.combat.special", 15);
good_fighter.c | 200 | check_add_command("shove", "fighting.combat.special", 15);
good_fighter.c | 201 | add_known_command("concentrate");
good_fighter.c | 234 | return (member_array(command, weapon->query_attack_names()) != -1);
good_fighter.c | 266 | event_fight_in_progress(attacker, opponent);
good_fighter.c | 296 | queue_command("tactics attitude wimp", 1);
good_fighter.c | 298 | filter(player->query_holding(), (: $1 && $1->id("shield") :));
good_fighter.c | 303 | queue_command("tactics parry unarmed");
good_fighter.c | 305 | queue_command("tactics response dodge", 2);
good_fighter.c | 324 | sizeof(player->query_specials()) * 10);
good_fighter.c | 336 | sizeof(specials);
good_fighter.c | 339 | query_short()) });
good_fighter.c | 350 | sizeof(specials);
good_fighter.c | 359 | debug_printf("Commands available: %O", candidates);
good_fighter.c | 363 | query_name());
good_fighter.c | 366 | debug_printf("Trying to perform: %O", cmd);
good_fighter.c | 368 | do_command(cmd, 1);
good_fighter.c | 371 | debug_printf("No command to perform");
good_fighter.c | 390 | return ({ ({ "good fighter", "unattached" }) });
they_died.c | 16 | arg();
they_died.c | 18 | evaluate(bit, player, ob, mess);
they_died.c | 20 | call_other(bit[0], bit[1], player, ob, mess);
they_died.c | 22 | event_exit(ob, mess);
gossip.c | 45 | random(sizeof(_says));
gossip.c | 47 | random(sizeof(_says));
gossip.c | 59 | event_person_say(ob, start, mess, lang);
gossip.c | 66 | fixup_says();
gossip.c | 68 | query_filter();
gossip.c | 69 | explode(mess, " ");
gossip.c | 70 | sizeof(bits);
gossip.c | 72 | event_person_say(ob, start, mess, lang);
gossip.c | 79 | query_cap_name(), mess }) });
gossip.c | 83 | add_gossip(ob->query_cap_name(), mess);
gossip.c | 97 | arg();
gossip.c | 103 | fixup_says();
gossip.c | 106 | if (sizeof(_says) >
gossip.c | 107 | random(sizeof(_says));
gossip.c | 110 | query_random_gossip();
gossip.c | 113 | random(sizeof(_says));
gossip.c | 123 | do_command("say "+str);
exit.c | 16 | arg();
exit.c | 18 | evaluate(bit, player, ob, mess);
exit.c | 20 | call_other(bit[0], bit[1], player, ob, mess);
exit.c | 22 | event_exit(ob, mess);
pub_brawl.c | 16 | arg();
pub_brawl.c | 18 | evaluate(bit, player, ob, mess);
pub_brawl.c | 20 | call_other(bit[0], bit[1], player, ob, mess);
pub_brawl.c | 22 | event_pub_brawl(ob, mess);
team.c | 12 | shadow( thing, 1 );
team.c | 16 | destruct_team_shadow() { destruct( this_object() );
team.c | 20 | query_group( player );
team.c | 22 | call_out( "destruct_team_shadow", 1 );
team.c | 23 | return (string)player->extra_score();
team.c | 35 | return (int)player->adjust_xp( number );
team.c | 36 | query_group( player );
team.c | 38 | call_out( "destruct_team_shadow", 1 );
team.c | 39 | return (int)player->adjust_xp( number );
team.c | 41 | query_members( team );
team.c | 43 | call_out( "destruct_team_shadow", 1 );
team.c | 44 | return (int)player->adjust_xp( number );
team.c | 47 | return (int)player->adjust_xp( number );
team.c | 50 | sizeof(others)-1/ 2);
team.c | 59 | query_level();
team.c | 61 | adjust_xp( number, 0 );
team.c | 66 | return (int)player->adjust_xp(number * divisor);
team.c | 77 | return (int)player->add_skill_level( skill, lvl, exp );
team.c | 80 | previous_object();
team.c | 83 | query_group( player );
team.c | 85 | call_out( "destruct_team_shadow", 1 );
team.c | 86 | return (int)player->add_skill_level( skill, lvl, exp );
team.c | 88 | query_members( team );
team.c | 90 | call_out( "destruct_team_shadow", 1 );
team.c | 91 | return (int)player->add_skill_level( skill, lvl, exp );
team.c | 95 | return (int)player->add_skill_level( skill, lvl, exp );
team.c | 98 | return (int)player->add_skill_level( skill, lvl, exp );
team.c | 105 | query_skill_bonus(skill);
team.c | 106 | query_skill(skill);
team.c | 107 | stat_modify( 25 * 25, skill );
team.c | 115 | if(diff_0 - (int)other->query_skill_bonus(skill) >
team.c | 117 | query_skill_bonus( skill );
team.c | 119 | query_skill(skill);
team.c | 120 | stat_modify( width_0, skill );
poker_shadow.c | 16 | shadow( gambler, 1 );
poker_shadow.c | 22 | net_dead();
poker_shadow.c | 29 | call_out( "do_leave", 30 );
poker_shadow.c | 37 | call_out( "do_fold", 30 );
poker_shadow.c | 56 | environment( this_gambler )->do_fold( this_gambler );
poker_shadow.c | 70 | environment( this_gambler )->do_leave( this_gambler );
poker_shadow.c | 75 | tell_room( environment( this_gambler ), "The imp says, \"Time's up!\"\n" );
poker_shadow.c | 76 | environment( this_gambler )->do_check();
poker_shadow.c | 85 | query_short() + ".\n" );
poker_shadow.c | 89 | environment( this_gambler )->sit_out( this_gambler );
poker_shadow.c | 102 | environment( this_gambler )->do_leave( this_gambler );
poker_shadow.c | 103 | do_death();
poker_shadow.c | 108 | call_out( "zap", 0 );
poker_shadow.c | 113 | destruct( this_object() );
poker_shadow.c | 118 | call_out( "do_leave", 30 );
poker_shadow.c | 123 | call_out( "do_fold", delay );
poker_shadow.c | 128 | call_out( "do_check", delay );
poker_shadow.c | 133 | call_out("do_idle", delay);
poker_shadow.c | 155 | run_away();
poker_shadow.c | 166 | add_effect( eff, duration );
poker_shadow.c | 171 | environment( this_gambler )->event_exit( this_gambler, 0, 0 );
death_shadow.c | 72 | shadow( ob, 1 );
death_shadow.c | 76 | query_property( "death cost life" );
death_shadow.c | 77 | remove_property( "death cost life" );
death_shadow.c | 78 | query_property( "resurrect should add life" );
death_shadow.c | 79 | remove_property( "resurrect should add life" );
death_shadow.c | 84 | tell_object( ob, "This person is a ghost... You cannot attack them.\n" );
death_shadow.c | 85 | stop_fight( my_player );
death_shadow.c | 91 | write( "Your hand passes right through it!  You are just a ghost!\n" );
death_shadow.c | 99 | short();
death_shadow.c | 104 | destruct( this_object() );
death_shadow.c | 109 | write( "Casting spells when you are dead?\n" );
death_shadow.c | 115 | write( "You are dead, that is not possible.\n" );
death_shadow.c | 121 | write( "You are dead...\n" );
death_shadow.c | 127 | write( "You are dead!\n" );
death_shadow.c | 133 | write( "You are dead!\n" );
death_shadow.c | 152 | add_property( "death cost life", cost_life );
death_shadow.c | 155 | query_dynamic_auto_load();
death_shadow.c | 157 | return ([ ]);
surrender_shadow.c | 14 | explode(file_name(environment(thing)), "/") - ({ "", "." });
surrender_shadow.c | 15 | if (sizeof(bits) >
surrender_shadow.c | 17 | load_object(implode(bits[0..1] + ({ "master" }), "/"));
surrender_shadow.c | 19 | query_protector_string();
surrender_shadow.c | 23 | shadow( thing, 1 );
surrender_shadow.c | 26 | call_out( "dest_surrender_shadow", 60 * 5 );
surrender_shadow.c | 39 | all_inventory(environment(player));
surrender_shadow.c | 50 | tell_object( player, "You lose "+ protector +"'s protection.\n" );
surrender_shadow.c | 51 | call_out( "dest_surrender_shadow", 1 );
surrender_shadow.c | 57 | return (int)player->adjust_hp( number, thing, weapon, attack );
surrender_shadow.c | 58 | return (int)player->query_hp();
surrender_shadow.c | 63 | query_hp();
surrender_shadow.c | 65 | return (int)player->set_hp( number, thing );
surrender_shadow.c | 79 | notify_fail("You can't leave while your subduer is here.\n");
surrender_shadow.c | 82 | zap_surrender_shadow();
surrender_shadow.c | 83 | cannot_walk();
surrender_shadow.c | 88 | return (int)player->attack_by( thing );
surrender_shadow.c | 93 | stop_fight( player );
surrender_shadow.c | 100 | zap_surrender_shadow();
surrender_shadow.c | 101 | return (int)player->attack_ob( thing );
surrender_shadow.c | 108 | the_short() +".\n" );
surrender_shadow.c | 110 | this_player()->the_short() +" from harming you.\n" );
surrender_shadow.c | 116 | zap_surrender_shadow();
surrender_shadow.c | 117 | return (int)player->no_offense();
surrender_shadow.c | 123 | return (mixed)player->query_property( word );
surrender_shadow.c | 132 | return (int)player->command_shadowed( verb, args );
surrender_shadow.c | 134 | notify_fail("You can't do that while you're subdued\n");
surrender_shadow.c | 135 | zap_surrender_shadow();
surrender_shadow.c | 136 | return (int)player->command_shadowed( verb, args );
surrender_shadow.c | 143 | file_name( $1 ) :) ), ", " ) +"]\n" );
surrender_shadow.c | 145 | return (int)player->adjust_xp( number, shared );
surrender_shadow.c | 151 | previous_object();
surrender_shadow.c | 153 | file_name( exp );
surrender_shadow.c | 162 | return (int)player->add_skill_level( skill, lvl, exp );
surrender_shadow.c | 171 | test_remove(thing, flag, dest);
surrender_shadow.c | 181 | query_worn_by();
surrender_shadow.c | 186 | allowed_to_loot(who);
surrender_shadow.c | 194 | one_short() + " runs off to recuperate.");
surrender_shadow.c | 196 | tell_object(player, "You feel that you can leave now.\n");
surrender_shadow.c | 198 | destruct(this_object());
surrender_shadow.c | 204 | query_sanctuary();
surrender_shadow.c | 210 | write("You cannot quit while your subduer is here.\n");
surrender_shadow.c | 213 | do_quit();
surrender_shadow.c | 219 | write("You cannot quit while your subduer is here.\n");
surrender_shadow.c | 222 | do_quit();
marry_shadow.c | 32 | do_accept();
marry_shadow.c | 33 | do_refuse();
marry_shadow.c | 50 | query_name();
marry_shadow.c | 55 | query_short() + "\n");
marry_shadow.c | 56 | shadow( p, 1 );
marry_shadow.c | 66 | strlen(str);
marry_shadow.c | 80 | lower_case( mess );
marry_shadow.c | 81 | remove_read_marks(mess);
marry_shadow.c | 82 | explode( mess, " " );
marry_shadow.c | 85 | sizeof( yes_array );
marry_shadow.c | 92 | do_accept();
marry_shadow.c | 97 | do_accept();
marry_shadow.c | 102 | sizeof( no_array );
marry_shadow.c | 109 | do_refuse();
marry_shadow.c | 114 | do_refuse();
marry_shadow.c | 130 | check_response("say", mess);
marry_shadow.c | 132 | event_person_say( ob, start, mess, lang );
marry_shadow.c | 138 | check_response("say", mess);
marry_shadow.c | 140 | event_person_tell( ob, start, mess, lang );
marry_shadow.c | 148 | check_response( "soul", mess );
marry_shadow.c | 150 | sizeof( avoid );
marry_shadow.c | 156 | tell_object( player, mess );
marry_shadow.c | 163 | query_name();
marry_shadow.c | 168 | query_short() + "\n" );
marry_shadow.c | 169 | tell_object( marry1, "You accepted.\n" );
marry_shadow.c | 176 | tell_object( marry2, "You accepted.\n" );
marry_shadow.c | 185 | query_short() + ")" :));
marry_shadow.c | 187 | call_out( "remove_propose_shadow", 0 );
marry_shadow.c | 195 | tell_object( marry1, "You refused, the marriage is off.\n" );
marry_shadow.c | 199 | query_short() + "\n" );
marry_shadow.c | 201 | query_short() + ".\n" );
marry_shadow.c | 210 | query_short() + ")" :));
marry_shadow.c | 213 | call_out( "remove_marry_shadow", 0 );
marry_shadow.c | 220 | query_property( str );
marry_shadow.c | 229 | add_property( "spouse", marry2->query_name() );
marry_shadow.c | 230 | add_property( "spouse", marry1->query_name() );
marry_shadow.c | 231 | clone_object( RING );
marry_shadow.c | 232 | set_owner( marry1->query_short() );
marry_shadow.c | 233 | set_giver( marry2->query_short() );
marry_shadow.c | 234 | move( marry1 );
marry_shadow.c | 235 | clone_object( RING );
marry_shadow.c | 236 | set_owner( marry2->query_short() );
marry_shadow.c | 237 | set_giver( marry1->query_short() );
marry_shadow.c | 238 | move( marry2 );
marry_shadow.c | 239 | tell_object( player, "They are now married, you'd better tell them.\n" );
marry_shadow.c | 240 | call_out( "remove_marry_shadow", 0 );
marry_shadow.c | 246 | query_short() + "\n" );
marry_shadow.c | 252 | query_short()+"\n" );
marry_shadow.c | 254 | call_out( "remove_marry_shadow", 0 );
marry_shadow.c | 259 | call_out( "remove_marry_shadow", 0 );
marry_shadow.c | 264 | destruct( this_object() );
surface.c | 13 | shadow( thing1, 1 );
surface.c | 20 | return (object)thing->query_shadowed( thing );
surface.c | 25 | find_inv_match( words );
surface.c | 27 | find_inv_match( words );
surface.c | 29 | call_out( "destruct_shadow", 1, this_object() );
surface.c | 34 | if ( thing == this_object() ) destruct( this_object() );
surface.c | 35 | destruct_shadow( thing );
concealment.c | 13 | shadow( thing, 1 );
concealment.c | 20 | destruct( this_object() );
concealment.c | 22 | destruct_shadow( thing );
concealment.c | 37 | query_weight();
concealment.c | 40 | if ( (int)thing->query_complete_weight() >
concealment.c | 41 | remove_hide_invis( "concealed" );
concealment.c | 43 | call_out( "destruct_shadow", 0, this_object() );
concealment.c | 51 | stats();
offler_shadow.c | 16 | shadow( thing, 1 );
offler_shadow.c | 20 | dest_offler_shadow() { destruct( this_object() );
offler_shadow.c | 24 | return (int)player->adjust_hp( number, thing, weapon, attack );
offler_shadow.c | 26 | return (int)player->query_hp();
offler_shadow.c | 31 | query_hp();
offler_shadow.c | 33 | return (int)player->set_hp( number, thing );
offler_shadow.c | 44 | stop_fight( this_object() );
offler_shadow.c | 49 | tell_object( player, "You are prevented from fighting by Offler.\n" );
offler_shadow.c | 50 | stop_fight( this_object() );
offler_shadow.c | 57 | write( "You suddenly see a terrifying image of a huge crocodile!\n" );
offler_shadow.c | 58 | this_player()->run_away();
offler_shadow.c | 62 | write( "You are prevented from offensive actions by Offler.\n" );
offler_shadow.c | 67 | write( "You are about to start when Offler stops you.\n" );
effects.c | 34 | shadow( thing, 1 );
effects.c | 40 | destruct( this_object() );
effects.c | 42 | destruct_shadow( thing );
effects.c | 47 | set_effs(args);
effects.c | 51 | set_eeq(args);
effects.c | 55 | stats();
davidshad.c | 10 | shadow( thing, 1 );
davidshad.c | 14 | dest_shadow() { destruct( this_object() );
davidshad.c | 17 | tell_object(player, "You feel too peaceful to run away.\n");
davidshad.c | 37 | stop_fight(player);
davidshad.c | 38 | stop_fight(attacker);
davidshad.c | 45 | adjust_hp( number );
davidshad.c | 50 | adjust_gp( number );
davidshad.c | 55 | stop_fight(player);
davidshad.c | 56 | stop_fight(ob);
water.c | 59 | calc_swim_bonus();
water.c | 60 | abs( int i );
water.c | 61 | test_sweep();
water.c | 62 | test_float();
water.c | 63 | test_drown();
water.c | 64 | sweep_string( mixed *dest_other_info, int pos );
water.c | 65 | exit_command( string word, mixed verb, object thing );
water.c | 69 | start_floating();
water.c | 70 | start_swimming();
water.c | 73 | shadow( this_swimmer, 1 );
water.c | 75 | calc_swim_bonus();
water.c | 83 | event_enter( ob, message, from );
water.c | 87 | calc_swim_bonus();
water.c | 88 | if ( bonus != old_bonus )  test_sweep();
water.c | 90 | query_property( BUOYANT_PROP );
water.c | 91 | test_float();
water.c | 101 | event_exit(ob, message, to);
water.c | 105 | calc_swim_bonus();
water.c | 106 | if ( bonus != old_bonus )  test_sweep();
water.c | 108 | query_property( BUOYANT_PROP );
water.c | 109 | test_float();
water.c | 123 | calc_burden();
water.c | 125 | sizeof( held - (object *)({ 0 }) ) + 1 );
water.c | 127 | query_property( BUOYANT_PROP );
water.c | 143 | query_property( ANCHOR_PROP );
water.c | 145 | query_weight();
water.c | 155 | add_property( prop, val, time );
water.c | 157 | if ( prop == GILLS_PROP  &&  val > 0 )  remove_call_out("do_drown");
water.c | 159 | calc_swim_bonus();
water.c | 160 | test_float();
water.c | 168 | remove_property( prop );
water.c | 170 | if ( prop == GILLS_PROP )  test_drown();
water.c | 172 | calc_swim_bonus();
water.c | 173 | test_float();
water.c | 183 | add_skill_level( skill, lev );
water.c | 185 | calc_swim_bonus();
water.c | 186 | test_sweep();
water.c | 187 | test_float();
water.c | 202 | calc_swim_bonus();
water.c | 205 | query_skill_bonus(skill, use_base_stats);
water.c | 219 | find_call_out( "do_sweep" );
water.c | 220 | environment( swimmer );
water.c | 221 | query_flows();
water.c | 222 | query_dest_dir();
water.c | 225 | query_min_sweep_delay( sweep_dir );
water.c | 227 | remove_call_out( "do_sweep" );
water.c | 234 | remove_call_out( "do_sweep" );
water.c | 235 | keys( flows );
water.c | 239 | evaluate( flows[ dir ] );
water.c | 240 | if ( ( f = flow_rate - swimming * bonus ) >
water.c | 246 | random( total_flow );
water.c | 247 | keys( possible );
water.c | 255 | query_min_sweep_delay( dir );
water.c | 256 | tell_object(swimmer, "Calling do sweep, delay = " + f + ", direction = " + dir + "\n" );
water.c | 273 | environment( swimmer );
water.c | 275 | remove_call_out( "do_rise" );
water.c | 276 | find_call_out( "do_sink" );
water.c | 280 | remove_call_out( "do_sink" );
water.c | 285 | query_down_dir() ) );
water.c | 287 | query_nonfloat_mess() );
water.c | 291 | add_property( "there", (string)room->query_bottom_mess() );
water.c | 292 | if ( s > -1 )  remove_call_out( "do_sink" );
water.c | 296 | remove_call_out( "do_sink" );
water.c | 297 | find_call_out( "do_rise" );
water.c | 301 | remove_call_out( "do_rise" );
water.c | 306 | query_up_dir() ) );
water.c | 308 | query_float_mess() );
water.c | 311 | if ( s > -1 )  remove_call_out( "do_rise" );
water.c | 314 | remove_call_out( "do_rise" );
water.c | 315 | remove_call_out( "do_sink" );
water.c | 316 | add_property( "there", (string)room->query_float_mess() );
water.c | 326 | remove_call_out("do_drown");
water.c | 331 | call_out( "do_drown", delay );
water.c | 342 | environment(swimmer);
water.c | 344 | environment( swimmer )->set_destination( sweep_dir );
water.c | 345 | query_dest_other();
water.c | 355 | tell_object( swimmer, "The current pulls you " + sweep_dir + ".\n" );
water.c | 376 | environment(swimmer);
water.c | 377 | query_down_dir();
water.c | 379 | environment( swimmer )->set_destination( dir );
water.c | 380 | query_dest_other();
water.c | 381 | if ( ( i = member_array( dir, dest_other_info ) ) >
water.c | 390 | tell_object( swimmer, "You sink toward the bottom.\n" );
water.c | 411 | environment( swimmer );
water.c | 412 | query_up_dir();
water.c | 414 | environment( swimmer )->set_destination( dir );
water.c | 415 | query_dest_other();
water.c | 416 | if ( ( i = member_array( dir, dest_other_info ) ) >
water.c | 425 | tell_object( swimmer, "You drift toward the surface.\n" );
water.c | 448 | tell_object( swimmer, "Your lungs start to feel a bit heavy.\n" );
water.c | 451 | call_out( "do_drown", delay );
water.c | 454 | tell_object( swimmer, "Your lungs are starting to burn.\n" );
water.c | 457 | call_out( "do_drown", delay );
water.c | 460 | tell_object( swimmer, "Your lungs are fairly bursting.\n" );
water.c | 463 | call_out( "do_drown", delay );
water.c | 467 | query_con() ) );
water.c | 468 | if ( swimmer->query_hp() >
water.c | 469 | call_out( "do_drown", delay );
water.c | 470 | environment( swimmer )->query_dest_dir();
water.c | 479 | exit_command( up );
water.c | 488 | exit_command( up );
water.c | 491 | attack_by( environment( swimmer ) );
water.c | 502 | add_effect("/std/effects/other/wetness", swimmer->query_weight());
water.c | 503 | do_soak();
water.c | 508 | remove_call_out( "do_sweep" );
water.c | 515 | remove_call_out( "do_sweep" );
water.c | 516 | remove_call_out( "do_rise" );
water.c | 517 | remove_call_out( "do_sink" );
water.c | 518 | remove_call_out( "do_drown" );
water.c | 519 | remove_call_out( "do_soak" );
water.c | 520 | remove_call_out( "test_again" );
water.c | 522 | remove_property("there");
water.c | 524 | destruct( this_object() );
water.c | 529 | find_water_shadow()  {  return this_object();
water.c | 588 | tell_object( swimmer, my_mess );
water.c | 589 | tell_object( environment( swimmer ), others_mess );
water.c | 592 | return (int)swimmer->command_shadowed( verb, args );
water.c | 600 | set_hold( ob, pos );
water.c | 601 | calc_swim_bonus();
water.c | 603 | test_sweep();
water.c | 604 | test_float();
water.c | 612 | do_death( thing );
water.c | 614 | remove_call_out( "do_sweep" );
water.c | 615 | remove_call_out( "do_rise" );
water.c | 616 | remove_call_out( "do_sink" );
water.c | 617 | remove_call_out( "do_drown" );
water.c | 618 | remove_call_out( "do_soak" );
water.c | 619 | remove_property("there");
water.c | 625 | remove_ghost();
water.c | 626 | environment( swimmer )->event_enter( swimmer, "", 0 );
water.c | 635 | set_unhold( ob );
water.c | 636 | calc_swim_bonus();
water.c | 638 | test_sweep();
water.c | 639 | test_float();
water.c | 650 | if ( objectp( dest ) )  where = file_name( dest );
water.c | 652 | environment( swimmer )->query_dest_dir();
water.c | 657 | notify_fail( "" );
water.c | 661 | move( dest, messin, messout );
water.c | 668 | tell_object( swimmer, "You are already drifting with the current.\n" );
water.c | 671 | tell_object( swimmer, "You stop resisting the current.\n" );
water.c | 673 | test_sweep();
water.c | 681 | tell_object( swimmer, "You are already fighting the current.\n" );
water.c | 684 | tell_object( swimmer, "You start to resist the current.\n" );
water.c | 686 | test_sweep();
water.c | 693 | test_float();
water.c | 694 | test_sweep();
water.c | 695 | call_out( "test_again", recheck_delay );
water.c | 702 | tell_object( swimmer, "Called update...\n" );
water.c | 705 | remove_call_out( "test_again" );
water.c | 708 | call_out( "test_again", time_out );
water.c | 711 | remove_call_out( "test_again" );
water.c | 712 | call_out( "test_again", time_out );
harry_shadow.c | 32 | shadow( thing, 1 );
harry_shadow.c | 36 | call_out( "dest_harry_shadow", 60 * 20 );
harry_shadow.c | 41 | dest_harry_shadow() { destruct( this_object() );
harry_shadow.c | 45 | tell_object( player, "You lose "+ protector +"'s protection.\n" );
harry_shadow.c | 46 | call_out( "dest_harry_shadow", 1 );
harry_shadow.c | 52 | return (int)player->adjust_hp( number, thing, weapon, attack );
harry_shadow.c | 53 | return (int)player->query_hp();
harry_shadow.c | 58 | query_hp();
harry_shadow.c | 60 | return (int)player->set_hp( number, thing );
harry_shadow.c | 73 | return (int)player->attack_by( thing );
harry_shadow.c | 78 | stop_fight( player );
harry_shadow.c | 84 | zap_harry_shadow();
harry_shadow.c | 85 | return (int)player->attack_ob( thing );
harry_shadow.c | 92 | the_short() +".\n" );
harry_shadow.c | 94 | this_player()->the_short() +" from harming you.\n" );
harry_shadow.c | 99 | zap_harry_shadow();
harry_shadow.c | 100 | return (int)player->no_offense();
harry_shadow.c | 109 | return (int)player->command_shadowed( verb, args );
harry_shadow.c | 111 | zap_harry_shadow();
harry_shadow.c | 112 | return (int)player->command_shadowed( verb, args );
harry_shadow.c | 119 | file_name( $1 ) :) ), ", " ) +"]\n" );
harry_shadow.c | 121 | return (int)player->adjust_xp( number, shared );
harry_shadow.c | 127 | previous_object();
harry_shadow.c | 129 | file_name( exp );
harry_shadow.c | 138 | return (int)player->add_skill_level( skill, lvl, exp );
special_attack.c | 43 | arg();
special_attack.c | 49 | tell_object( player, "You lose the moment!\n" );
special_attack.c | 50 | set_arg( 0 );
special_attack.c | 51 | remove_this_effect();
special_attack.c | 52 | return ([ ]);
special_attack.c | 57 | the_short() +"?\n" );
special_attack.c | 58 | set_arg( 0 );
special_attack.c | 59 | remove_this_effect();
special_attack.c | 60 | return ([ ]);
special_attack.c | 63 | tell_object(player, "Where did "+target->short()+" go?\n");
special_attack.c | 64 | remove_this_effect();
special_attack.c | 65 | return ([ ]);
special_attack.c | 67 | weapon_attacks( 100, target );
special_attack.c | 72 | sizeof( attacks );
special_attack.c | 85 | the_short() +".\n" );
special_attack.c | 88 | failed (no damage)", "combat");
special_attack.c | 103 | a_short() ) ) +"%^RESET%^\n" );
special_attack.c | 107 | the_short() ) +".\n" );
special_attack.c | 121 | the_short() +".\n" );
special_attack.c | 127 | set_arg( 0 );
special_attack.c | 128 | remove_this_effect();
special_attack.c | 129 | return ([ args[ 1 ] : ({ damage }) + data ]);
bob.c | 26 | arg();
bob.c | 29 | tell_object(player, "Where did "+target->short()+" go?\n");
bob.c | 30 | remove_this_effect();
bob.c | 31 | return ([ ]);
bob.c | 36 | add_failed_mess("You must have an apple and a bucket to use bob.\n");
bob.c | 42 | query_skill_bonus("fighting.combat.melee."+ data[1]);
bob.c | 46 | random(damage));
bob.c | 56 | a_short() ) ) +"%^RESET%^\n" );
bob.c | 61 | the_short() + ".\n");
bob.c | 69 | set_arg(0);
bob.c | 72 | tell_object( player, "You manage to botch your use of a bucket.\n");
bob.c | 73 | remove_this_effect();
bob.c | 85 | remove_this_effect();
bob.c | 86 | return ([ args[ 1 ] : ({ damage }) + data ]);
bob.c | 95 | event_death(killed, others, killer, rmess, kmess);
bob.c | 96 | arg();
bob.c | 97 | if ( killed == args[ 0 ] ) remove_this_effect();
single_shoulder.c | 32 | sizeof(thing->query_pockets());
single_shoulder.c | 52 | query_wearing() - ({ 0 });
single_shoulder.c | 53 | arg();
single_shoulder.c | 58 | sizeof( filter_array( things, (: test_for_effect :), this_object() ) );
single_shoulder.c | 60 | remove_this_effect();
single_shoulder.c | 67 | adjust_bonus_dex( old_arg - new_arg );
single_shoulder.c | 68 | set_arg( new_arg );
single_shoulder.c | 72 | now_worn( thing );
single_shoulder.c | 74 | call_out( "check_handicap", 0 );
single_shoulder.c | 79 | now_removed( thing );
single_shoulder.c | 81 | call_out( "check_handicap", 0 );
talker_response.c | 26 | add_effect( EFFECTS + "talker_response", frog );
talker_response.c | 32 | add_effect( EFFECTS + "talker_response", womble );
talker_response.c | 52 | query_listener      ( );
talker_response.c | 53 | query_responses     ( string );
talker_response.c | 56 | delete_response     ( string, string, string * );
talker_response.c | 59 | process_response    ( string *, string * );
talker_response.c | 60 | register_listener   ( object );
talker_response.c | 61 | compare_arrays      ( mixed *, mixed *);
talker_response.c | 78 | effects_matching("object.talker.response")[0]);
talker_response.c | 81 | effects_matching("object.talker.response")[0]);
talker_response.c | 104 | printf("Channel: %s\n\tChatter: %s\n", key, cabbage->sender);
talker_response.c | 106 | printf("\tTrigger:\n");
talker_response.c | 108 | printf("\t\t\"%s\"\n",trigger);
talker_response.c | 110 | printf("\tResponse:\n");
talker_response.c | 112 | printf("\t\t\"%s\"\n", resp);
talker_response.c | 120 | query_responses(nextkey);
talker_response.c | 154 | register_listener();
talker_response.c | 162 | lower_case(channel);
talker_response.c | 215 | register_listener();
talker_response.c | 220 | if(member_array(lower_case(channel), keys(responses)) >
talker_response.c | 239 | query_shadowing(this_object())->receive(channel, sender, text, receivers);
talker_response.c | 250 | sizeof( ar1 );
talker_response.c | 266 | call_other( listener, ({ response[1..] }) + arguments);
talker_response.c | 269 | do_command(response);
flatNbed.c | 5 | set_light(50);
flatNbed.c | 6 | set_theft_handler( HOSPITAL );
flatNbed.c | 7 | set_save_file("%savedir%/flat%N%bed");
flatNbed.c | 10 | set_orientation(%orientation%);
flatNbed.c | 11 | set_quit_handler(%out%);
flatNbed.c | 13 | set_short("bedroom");
flatNbed.c | 14 | set_base_desc( "a small bedroom" );
flatNbed.c | 15 | add_surface( "floor", "finished pine board" );
flatNbed.c | 16 | add_surface( "ceiling", "plain plaster" );
flatNbed.c | 17 | add_surface( "%0% wall", "plain plaster" );
flatNbed.c | 18 | add_surface( "%2% wall", "plain plaster" );
flatNbed.c | 19 | add_surface( "%4% wall", "plain plaster" );
flatNbed.c | 20 | add_surface( "%6% wall", "plain plaster" );
flatNbed.c | 24 | add_exit( "%6%", PATH +"flat%N%", "door" );
flatNbed.c | 25 | modify_exit("%6%", ({ "door short", "livingroom door" }));
flatN.c | 6 | set_light(50);
flatN.c | 7 | set_theft_handler( HOSPITAL );
flatN.c | 8 | set_save_file("%savedir%/flat%N%");
flatN.c | 11 | set_orientation(%orientation%);
flatN.c | 12 | set_quit_handler(%out%);
flatN.c | 14 | set_short("front room");
flatN.c | 15 | set_base_desc("a small and cosy front room" );
flatN.c | 16 | add_surface( "floor", "finished pine board" );
flatN.c | 17 | add_surface( "ceiling", "plain plaster" );
flatN.c | 18 | add_surface( "%0% wall", "plain plaster" );
flatN.c | 19 | add_surface( "%2% wall", "plain plaster" );
flatN.c | 20 | add_surface( "%4% wall", "plain plaster" );
flatN.c | 21 | add_surface( "%6% wall", "plain plaster" );
flatN.c | 25 | add_exit("out", %out%, "door");
flatN.c | 26 | modify_exit("out", ({ "door short", "front door"}));
flatN.c | 27 | add_exit("%2%", PATH+"flat%N%bed", "door");
flatN.c | 28 | modify_exit("%2%", ({ "door short", "bedroom door"}));
flatN.c | 36 | modify_exit( "out", ({ "closed", 1 }) );
Nhall.c | 8 | set_light(50);
Nhall.c | 9 | set_theft_handler( HOSPITAL );
Nhall.c | 10 | set_save_file("%savedir%/%N%hall");
Nhall.c | 13 | set_orientation(%orientation%);
Nhall.c | 14 | set_quit_handler(%out%);
Nhall.c | 16 | set_short("front room");
Nhall.c | 17 | set_base_desc("a small hallway" );
Nhall.c | 18 | add_surface( "floor", "finished pine board" );
Nhall.c | 19 | add_surface( "ceiling", "plain plaster" );
Nhall.c | 20 | add_surface( "%0% wall", "plain plaster" );
Nhall.c | 21 | add_surface( "%2% wall", "plain plaster" );
Nhall.c | 22 | add_surface( "%4% wall", "plain plaster" );
Nhall.c | 23 | add_surface( "%6% wall", "plain plaster" );
Nhall.c | 27 | add_exit("out", %out%, "door");
Nhall.c | 38 | add_exit("%0%", PATH+"%N%livingroom", "door");
Nhall.c | 39 | modify_exit("%0%", ({ "door short", "livingroom door"}));
Nbed.c | 5 | set_light(50);
Nbed.c | 6 | set_theft_handler( HOSPITAL );
Nbed.c | 7 | set_save_file("%savedir%/%N%bed");
Nbed.c | 10 | set_orientation(%orientation%);
Nbed.c | 11 | set_quit_handler(%out%);
Nbed.c | 13 | set_short("bedroom");
Nbed.c | 14 | set_base_desc( "a small bedroom" );
Nbed.c | 15 | add_surface( "floor", "finished pine board" );
Nbed.c | 16 | add_surface( "ceiling", "plain plaster" );
Nbed.c | 17 | add_surface( "%0% wall", "plain plaster" );
Nbed.c | 18 | add_surface( "%2% wall", "plain plaster" );
Nbed.c | 19 | add_surface( "%4% wall", "plain plaster" );
Nbed.c | 20 | add_surface( "%6% wall", "plain plaster" );
Nbed.c | 24 | add_exit( "down", PATH +"%N%livingroom", "stair" );
Nbed.c | 25 | modify_exit("down", ({ "downgrade", 9 }));
Nlivingroom.c | 6 | set_light(50);
Nlivingroom.c | 7 | set_theft_handler( HOSPITAL );
Nlivingroom.c | 8 | set_save_file("%savedir%/%N%livingroom");
Nlivingroom.c | 11 | set_orientation(%orientation%);
Nlivingroom.c | 12 | set_quit_handler(%out%);
Nlivingroom.c | 13 | set_short("livingroom");
Nlivingroom.c | 14 | set_base_desc("a comfortable livingroom");
Nlivingroom.c | 15 | add_surface("floor", "finished pine board" );
Nlivingroom.c | 16 | add_surface("ceiling", "plain plaster" );
Nlivingroom.c | 17 | add_surface("%0% wall", "plain plaster");
Nlivingroom.c | 18 | add_surface("%2% wall", "plain plaster");
Nlivingroom.c | 19 | add_surface("%4% wall", "plain plaster");
Nlivingroom.c | 20 | add_surface("%6% wall", "plain plaster");
Nlivingroom.c | 23 | add_exit("%4%", PATH+"%N%hall", "door");
Nlivingroom.c | 24 | modify_exit("%4%", ({"door short", "hallway door"}));
Nlivingroom.c | 25 | add_exit("up", PATH+"%N%bed", "stair");
Nlivingroom.c | 26 | modify_exit("up", ({ "upgrade", 9 }));
Nbed.c | 5 | set_light(50);
Nbed.c | 6 | set_theft_handler( HOSPITAL );
Nbed.c | 7 | set_save_file("%savedir%/%N%bed");
Nbed.c | 10 | set_orientation(%orientation%);
Nbed.c | 11 | set_quit_handler(%out%);
Nbed.c | 13 | set_short("bedroom");
Nbed.c | 14 | set_base_desc( "a small bedroom" );
Nbed.c | 15 | add_surface( "floor", "stone paving" );
Nbed.c | 16 | add_surface( "ceiling", "roughly finished wood" );
Nbed.c | 17 | add_surface( "%0% wall", "roughly finished wood" );
Nbed.c | 18 | add_surface( "%2% wall", "roughly finished wood" );
Nbed.c | 19 | add_surface( "%4% wall", "roughly finished wood" );
Nbed.c | 20 | add_surface( "%6% wall", "roughly finished wood" );
Nbed.c | 24 | add_exit( "%4%", PATH +"%N%livingroom", "door" );
Nbed.c | 25 | modify_exit("%4%", ({ "door short", "living room door" }));
Nlivingroom.c | 6 | set_light(50);
Nlivingroom.c | 7 | set_theft_handler( HOSPITAL );
Nlivingroom.c | 8 | set_save_file("%savedir%/%N%livingroom");
Nlivingroom.c | 11 | set_orientation(%orientation%);
Nlivingroom.c | 12 | set_quit_handler(%out%);
Nlivingroom.c | 13 | set_short("livingroom");
Nlivingroom.c | 14 | set_base_desc("a small cramped livingroom");
Nlivingroom.c | 15 | add_surface("floor", "stone paving" );
Nlivingroom.c | 16 | add_surface("ceiling", "roughly finished wood" );
Nlivingroom.c | 17 | add_surface("%0% wall", "roughly finished wood" );
Nlivingroom.c | 18 | add_surface("%2% wall", "roughly finished wood" );
Nlivingroom.c | 19 | add_surface("%4% wall", "roughly finished wood" );
Nlivingroom.c | 20 | add_surface("%6% wall", "roughly finished wood" );
Nlivingroom.c | 23 | add_exit("out", %out%, "door");
Nlivingroom.c | 34 | add_exit("%0%", PATH+"%N%bed", "door");
Nlivingroom.c | 35 | modify_exit("%0%", ({"door short", "bedroom door"}));
Nbed2.c | 5 | set_light(50);
Nbed2.c | 6 | set_theft_handler( HOSPITAL );
Nbed2.c | 7 | set_save_file("%savedir%/%N%bed2");
Nbed2.c | 11 | set_orientation(%orientation%);
Nbed2.c | 12 | set_quit_handler(%out%);
Nbed2.c | 14 | set_short("bedroom");
Nbed2.c | 15 | set_base_desc( "a small bedroom" );
Nbed2.c | 16 | add_surface( "floor", "finished pine board" );
Nbed2.c | 17 | add_surface( "ceiling", "plain plaster" );
Nbed2.c | 18 | add_surface( "%0% wall", "plain plaster" );
Nbed2.c | 19 | add_surface( "%2% wall", "plain plaster" );
Nbed2.c | 20 | add_surface( "%4% wall", "plain plaster" );
Nbed2.c | 21 | add_surface( "%6% wall", "plain plaster" );
Nbed2.c | 25 | add_exit( "%0%", PATH +"%N%landing1", "door" );
Nbed2.c | 26 | modify_exit("%0%", ({ "door short", "bedroom door" }));
Nbed2.c | 27 | add_exit("window", PATH + "%N%half-roof", "window");
Nbed4.c | 5 | set_light(50);
Nbed4.c | 6 | set_theft_handler( HOSPITAL );
Nbed4.c | 7 | set_save_file("%savedir%/%N%bed4");
Nbed4.c | 11 | set_orientation(%orientation%);
Nbed4.c | 12 | set_quit_handler(%out%);
Nbed4.c | 14 | set_short("bedroom");
Nbed4.c | 15 | set_base_desc( "a small bedroom" );
Nbed4.c | 16 | add_surface( "floor", "finished pine board" );
Nbed4.c | 17 | add_surface( "ceiling", "plain plaster" );
Nbed4.c | 18 | add_surface( "%0% wall", "plain plaster" );
Nbed4.c | 19 | add_surface( "%2% wall", "plain plaster" );
Nbed4.c | 20 | add_surface( "%4% wall", "plain plaster" );
Nbed4.c | 21 | add_surface( "%6% wall", "plain plaster" );
Nbed4.c | 25 | add_exit( "%4%", PATH +"%N%landing2", "door" );
Nbed4.c | 26 | modify_exit("%4%", ({ "door short", "livingroom door" }));
Nbed3.c | 5 | set_light(50);
Nbed3.c | 6 | set_theft_handler( HOSPITAL );
Nbed3.c | 7 | set_save_file("%savedir%/%N%bed3");
Nbed3.c | 11 | set_orientation(%orientation%);
Nbed3.c | 12 | set_quit_handler(%out%);
Nbed3.c | 14 | set_short("bedroom");
Nbed3.c | 15 | set_base_desc( "a small bedroom" );
Nbed3.c | 16 | add_surface( "floor", "finished pine board" );
Nbed3.c | 17 | add_surface( "ceiling", "plain plaster" );
Nbed3.c | 18 | add_surface( "%0% wall", "plain plaster" );
Nbed3.c | 19 | add_surface( "%2% wall", "plain plaster" );
Nbed3.c | 20 | add_surface( "%4% wall", "plain plaster" );
Nbed3.c | 21 | add_surface( "%6% wall", "plain plaster" );
Nbed3.c | 25 | add_exit( "%0%", PATH +"%N%landing2", "door" );
Nbed3.c | 26 | modify_exit("%0%", ({ "door short", "bedroom door" }));
Nbed3.c | 27 | add_exit("window", PATH + "%N%half-roof", "window");
Nfamilyroom.c | 6 | set_light(50);
Nfamilyroom.c | 7 | set_theft_handler( HOSPITAL );
Nfamilyroom.c | 8 | set_save_file("%savedir%/flat%N%study");
Nfamilyroom.c | 12 | set_orientation(%orientation%);
Nfamilyroom.c | 13 | set_quit_handler(%out%);
Nfamilyroom.c | 15 | set_short("small study");
Nfamilyroom.c | 16 | set_base_desc("a small study");
Nfamilyroom.c | 17 | add_surface( "floor", "finished pine board" );
Nfamilyroom.c | 18 | add_surface( "ceiling", "plain plaster" );
Nfamilyroom.c | 19 | add_surface( "%0% wall", "plain plaster" );
Nfamilyroom.c | 20 | add_surface( "%2% wall", "plain plaster" );
Nfamilyroom.c | 21 | add_surface( "%4% wall", "plain plaster" );
Nfamilyroom.c | 22 | add_surface( "%6% wall", "plain plaster" );
Nfamilyroom.c | 26 | add_exit("%6%", PATH+"%N%kitchen", "corridor");
Nfamilyroom.c | 27 | add_exit("%0%", PATH+"%N%garden", "door");
Nlanding2.c | 5 | set_light(50);
Nlanding2.c | 6 | set_theft_handler( HOSPITAL );
Nlanding2.c | 7 | set_save_file("%savedir%/flat%N%bed");
Nlanding2.c | 11 | set_orientation(%orientation%);
Nlanding2.c | 12 | set_quit_handler(%out%);
Nlanding2.c | 14 | set_short("hallway");
Nlanding2.c | 15 | set_base_desc( "a hallway" );
Nlanding2.c | 16 | add_surface( "floor", "finished pine board" );
Nlanding2.c | 17 | add_surface( "ceiling", "plain plaster" );
Nlanding2.c | 18 | add_surface( "%0% wall", "plain plaster" );
Nlanding2.c | 19 | add_surface( "%2% wall", "plain plaster" );
Nlanding2.c | 20 | add_surface( "%4% wall", "plain plaster" );
Nlanding2.c | 24 | add_exit( "%0%", PATH +"%N%bed4", "door" );
Nlanding2.c | 25 | modify_exit("%0%", ({ "door short", "bedroom door" }));
Nlanding2.c | 27 | add_exit( "%4%", PATH +"%N%bed3", "door" );
Nlanding2.c | 28 | modify_exit("%4%", ({ "door short", "bedroom door" }));
Nlanding2.c | 30 | add_exit( "%6%", PATH +"%N%landing1", "corridor" );
Nlanding1.c | 5 | set_light(50);
Nlanding1.c | 6 | set_theft_handler( HOSPITAL );
Nlanding1.c | 7 | set_save_file("%savedir%/%N%landing1");
Nlanding1.c | 11 | set_orientation(%orientation%);
Nlanding1.c | 12 | set_quit_handler(%out%);
Nlanding1.c | 14 | set_short("landing");
Nlanding1.c | 15 | set_base_desc( "a landing at the top of the stairs" );
Nlanding1.c | 16 | add_surface( "floor", "finished pine board" );
Nlanding1.c | 17 | add_surface( "ceiling", "plain plaster" );
Nlanding1.c | 18 | add_surface( "%0% wall", "plain plaster" );
Nlanding1.c | 19 | add_surface( "%4% wall", "plain plaster" );
Nlanding1.c | 20 | add_surface( "%6% wall", "plain plaster" );
Nlanding1.c | 24 | add_exit( "%0%", PATH +"%N%masterbed", "door" );
Nlanding1.c | 25 | modify_exit("%0%", ({ "door short", "bedroom door" }));
Nlanding1.c | 27 | add_exit( "%4%", PATH +"%N%bed2", "door" );
Nlanding1.c | 28 | modify_exit("%4%", ({ "door short", "bedroom door" }));
Nlanding1.c | 31 | add_exit("%2%", PATH+"%N%landing2", "corridor");
Nlanding1.c | 33 | add_exit("down", PATH+"%N%livingroom", "corridor");
Nlanding1.c | 34 | modify_exit("down", ({"downgrade", 9 }));
Ndiningroom.c | 6 | set_light(50);
Ndiningroom.c | 7 | set_theft_handler( HOSPITAL );
Ndiningroom.c | 8 | set_save_file("%savedir%/%N%diningroom");
Ndiningroom.c | 12 | set_orientation(%orientation%);
Ndiningroom.c | 13 | set_quit_handler(%out%);
Ndiningroom.c | 15 | set_short("spacious dining room");
Ndiningroom.c | 16 | set_base_desc("a spacious dining room");
Ndiningroom.c | 17 | add_surface( "floor", "finished pine board" );
Ndiningroom.c | 18 | add_surface( "ceiling", "plain plaster" );
Ndiningroom.c | 19 | add_surface( "%0% wall", "plain plaster" );
Ndiningroom.c | 20 | add_surface( "%2% wall", "plain plaster" );
Ndiningroom.c | 21 | add_surface( "%4% wall", "plain plaster" );
Ndiningroom.c | 22 | add_surface( "%6% wall", "plain plaster" );
Ndiningroom.c | 26 | add_exit("%3%", PATH+"%N%livingroom", "corridor");
Ndiningroom.c | 27 | add_exit("%2%", PATH+"%N%kitchen", "corridor");
Ndiningroom.c | 28 | add_exit("window", PATH+"%N%garden", "window");
Nhalf-roof.c | 6 | set_light(100);
Nhalf-roof.c | 7 | set_short("half-roof");
Nhalf-roof.c | 12 | set_slope(30, "half-roof", %out%);
Nhalf-roof.c | 14 | add_exit("%6% window", PATH+"%N%bed2", "window");
Nhalf-roof.c | 15 | add_exit("%2% window", PATH+"%N%bed3", "window");
Nhalf-roof.c | 17 | set_wall( ({ "bottom", ({ %out", 250 }), }) );
Nkitchen.c | 6 | set_light(50);
Nkitchen.c | 7 | set_theft_handler( HOSPITAL );
Nkitchen.c | 8 | set_save_file("%savedir%/%N%kitchen");
Nkitchen.c | 12 | set_orientation(%orientation%);
Nkitchen.c | 13 | set_quit_handler(%out%);
Nkitchen.c | 15 | set_short("large kitchen");
Nkitchen.c | 16 | set_base_desc("a large kitchen");
Nkitchen.c | 17 | add_surface( "floor", "finished pine board" );
Nkitchen.c | 18 | add_surface( "ceiling", "plain plaster" );
Nkitchen.c | 19 | add_surface( "%0% wall", "plain plaster" );
Nkitchen.c | 20 | add_surface( "%2% wall", "plain plaster" );
Nkitchen.c | 21 | add_surface( "%4% wall", "plain plaster" );
Nkitchen.c | 22 | add_surface( "%6% wall", "plain plaster" );
Nkitchen.c | 26 | add_exit("%6%", PATH+"%N%diningroom", "corridor");
Nkitchen.c | 27 | add_exit("%4%", PATH+"%N%livingroom", "corridor");
Nkitchen.c | 28 | add_exit("%2%", PATH+"%N%familyroom", "corridor");
Ngarden.c | 6 | set_light(50);
Ngarden.c | 7 | set_theft_handler( HOSPITAL );
Ngarden.c | 8 | set_save_file("%savedir%/%N%garden");
Ngarden.c | 12 | set_orientation(%orientation%);
Ngarden.c | 13 | set_quit_handler(%out%);
Ngarden.c | 15 | set_short("small garden");
Ngarden.c | 16 | set_base_desc("a quiet and secluded garden");
Ngarden.c | 17 | add_surface("floor", "grass");
Ngarden.c | 18 | add_surface("%0% wall", "red brick" );
Ngarden.c | 19 | add_surface( "%2% wall", "red brick" );
Ngarden.c | 20 | add_surface( "%6% wall", "red brick" );
Ngarden.c | 24 | add_exit("%4%", PATH+"%N%familyroom", "door");
Ngarden.c | 25 | modify_exit("%4%", ({ "door short", "garden door" }));
Ngarden.c | 27 | add_exit("%5% window", PATH+"%N%familyroom", "window");
Ngarden.c | 28 | add_exit("window", PATH+"%N%diningroom", "window");
Nmasterbed.c | 5 | set_light(50);
Nmasterbed.c | 6 | set_theft_handler( HOSPITAL );
Nmasterbed.c | 7 | set_save_file("%savedir%/%N%masterbed");
Nmasterbed.c | 10 | set_orientation(%orientation%);
Nmasterbed.c | 11 | set_quit_handler(%out%);
Nmasterbed.c | 13 | set_short("bedroom");
Nmasterbed.c | 14 | set_base_desc( "a huge master bedroom" );
Nmasterbed.c | 15 | add_surface( "floor", "finished pine board" );
Nmasterbed.c | 16 | add_surface( "ceiling", "plain plaster" );
Nmasterbed.c | 17 | add_surface( "%0% wall", "plain plaster" );
Nmasterbed.c | 18 | add_surface( "%2% wall", "plain plaster" );
Nmasterbed.c | 19 | add_surface( "%4% wall", "plain plaster" );
Nmasterbed.c | 20 | add_surface( "%6% wall", "plain plaster" );
Nmasterbed.c | 24 | add_exit( "%4%", PATH +"%N%landing1", "door" );
Nmasterbed.c | 25 | modify_exit("%4%", ({ "door short", "bedroom door" }));
Nlivingroom.c | 8 | set_light(50);
Nlivingroom.c | 9 | set_theft_handler( HOSPITAL );
Nlivingroom.c | 10 | set_save_file("%savedir%/%N%livingroom");
Nlivingroom.c | 13 | set_orientation(%orientation%);
Nlivingroom.c | 14 | set_quit_handler(%out%);
Nlivingroom.c | 15 | set_short("livingroom");
Nlivingroom.c | 16 | set_base_desc("a large, comfortable, and sunny livingroom");
Nlivingroom.c | 17 | add_surface("floor", "finished pine board" );
Nlivingroom.c | 18 | add_surface("ceiling", "plain plaster" );
Nlivingroom.c | 19 | add_surface("%0% wall", "plain plaster");
Nlivingroom.c | 20 | add_surface("%2% wall", "plain plaster");
Nlivingroom.c | 21 | add_surface("%4% wall", "plain plaster");
Nlivingroom.c | 22 | add_surface("%6% wall", "plain plaster");
Nlivingroom.c | 25 | add_exit("out", %out%, "door");
Nlivingroom.c | 26 | modify_exit("out", ({"door short", "front door"}));
Nlivingroom.c | 27 | add_exit("%7%", PATH+"%N%diningroom", "corridor");
Nlivingroom.c | 28 | add_exit("%0%", PATH + "%N%kitchen", "corridor");
Nlivingroom.c | 29 | add_exit("up", PATH + "%N%landing1", "corridor");
Nlivingroom.c | 30 | modify_exit("up", ({"upgrade", 9}));
basic.c | 31 | return ({ (x1 + x2) / 2, (y1 + y2) / 2 });
basic.c | 41 | return ({ 0, 100, ({ }), ({ }), ({ }), ({ }) });
basic.c | 96 | remove_effect(file_name(this_object()));
basic.c | 97 | add_effect(file_name(this_object()), x1, x2, y1, y2);
basic.c | 127 | sqrt(dx * dx + dy * dy);
basic.c | 132 | sqrt(coord[0] * coord[0] + coord[1] * coord[1]);
bug_effect.c | 28 | submit_ee( "create_bug", ({ 5*60, 5*60 }), EE_CONTINUOUS );
bug_effect.c | 29 | submit_ee( 0, time, EE_REMOVE );
bug_effect.c | 42 | clone_object("/obj/monster/cockroach");
bug_effect.c | 43 | environment(player);
bug_effect.c | 44 | the_short();
bug_effect.c | 67 | the_short();
bug_effect.c | 69 | move(room);
bug_effect.c | 70 | environment(room);
horse.c | 8 | submit_ee(0, amount, EE_REMOVE);
horse.c | 9 | add_extra_look(this_object());
horse.c | 33 | remove_extra_look(this_object());
cabbage.c | 8 | tell_object( player, "A foul smell wafts from your nether regions.\n" );
cabbage.c | 13 | submit_ee( "make_stink", ({ 20, 20 }), EE_CONTINUOUS );
cabbage.c | 14 | submit_ee( 0, time, EE_REMOVE );
cabbage.c | 26 | tell_object( player, "Your stomach calms down at last.\n" );
wet.c | 37 | submit_ee( "dry_off", ({ 30, 90 }), EE_CONTINUOUS );
wet.c | 38 | add_extra_look( this_object() );
wet.c | 42 | add_adjective("wet");
wet.c | 52 | remove_extra_look( this_object() );
wet.c | 54 | remove_adjective("wet");
wet.c | 58 | add_extra_look( this_object() );
wet.c | 64 | set_arg_of( (int)thing->sid_to_enum( id ), amount );
wet.c | 66 | submit_ee( 0, 0, EE_REMOVE );
wet.c | 74 | effects_matching( "object.wet" );
swim_fins.c | 10 | submit_ee( "test_worn", 1, EE_ONCE );
swim_fins.c | 11 | submit_ee( "test_worn", 20, EE_CONTINUOUS );
swim_fins.c | 33 | submit_ee( 0, 0, EE_REMOVE );
basic_trap.c | 34 | set_lock_trap(thing, "trap_lock");
talker.c | 62 | add_extra_look( this_object() );
talker.c | 63 | add_alias( "talker" );
talker.c | 64 | add_plural( "talkers" );
talker.c | 67 | new_talker_args();
talker.c | 72 | new_talker_args();
talker.c | 81 | new_talker_args();
talker.c | 83 | copy(old_args);
talker.c | 86 | uniq_array(args->channels);
talker.c | 94 | set_arg_of(thing->sid_to_enum(id), new_talker_args());
talker.c | 100 | add_extra_look( this_object() );
talker.c | 101 | add_alias( "talker" );
talker.c | 102 | add_plural( "talkers" );
talker.c | 109 | the_short() +" close and fade away forever.\n" );
talker.c | 110 | remove_extra_look( this_object() );
talker.c | 111 | remove_alias( "talker" );
talker.c | 112 | remove_plural( "talkers" );
talker.c | 120 | effects_matching( "magic.talker" );
talker.c | 124 | arg_of( enums[ 0 ] );
talker.c | 155 | return ({ });
talker.c | 159 | query_guild_ob();
talker.c | 161 | if ( file_size( word +".c" ) >
talker.c | 163 | capitalize(word->query_name()) });
talker.c | 170 | query_deity();
talker.c | 173 | capitalize( word ) });
talker.c | 176 | query_name();
talker.c | 178 | query_name();
talker.c | 213 | query_citizenship_areas();
talker.c | 216 | replace_string(word, " ", "") + "Council" });
talker.c | 219 | replace_string(word, " ", "") + "CouncilMagistrate" });
talker.c | 233 | implode( all_channels( this_player() ), "\n" ) );
talker.c | 247 | this_player();
talker.c | 280 | return ( member_array( word, all_channels( who ) ) != -1 );
talker.c | 288 | query_shadowing( thing );
talker.c | 317 | find_object( SHADOWS + "talker" ) });
talker.c | 321 | userp($1) || interactive($1)) :) );
talker.c | 325 | uniq_array(things);
talker.c | 328 | environment($2)->query_name() ) :) );
talker.c | 331 | environment( thing );
talker.c | 333 | capitalize( holder->query_cap_name() );
talker.c | 335 | capitalize( holder->query_name() );
talker.c | 342 | effects_matching( "magic.talker" );
talker.c | 346 | sprintf( LIST_FORMAT, sender, space, "(barfed)" );
talker.c | 351 | arg_of( enums[ 0 ] );
talker.c | 359 | sprintf( LIST_FORMAT, sender, space, "(asleep)" );
talker.c | 369 | query_multiple_short( args->channels ) );
talker.c | 380 | sprintf( LIST_FORMAT, "None", space, "" );
talker.c | 392 | lower_case( channel );
talker.c | 393 | map( valid_channels, (: lower_case($1) :) );
talker.c | 396 | member_array( lower_channel, lower_names );
talker.c | 421 | return ([ ]);
talker.c | 424 | copy(_channel_cache[person]);
talker.c | 427 | copy(_channel_cache);
talker.c | 444 | map_delete(_channel_cache, person);
newbie_shoes.c | 44 | tell_object(player, mechats[random(sizeof(mechats))]);
newbie_shoes.c | 58 | add_extra_look( this_object() );
newbie_shoes.c | 59 | adjust_bonus_dex(-1);
newbie_shoes.c | 60 | submit_ee("chat", ({ 10, 30 }), EE_CONTINUOUS);
newbie_shoes.c | 61 | submit_ee("notify", 1, EE_ONCE);
newbie_shoes.c | 66 | beginning(player, amount, id);
newbie_shoes.c | 76 | remove_extra_look( this_object() );
newbie_shoes.c | 77 | adjust_bonus_dex(1);
newbie_shoes.c | 78 | tell_object(player, "Ahhhh!  Free from those evil shoes!\n");
newbie_shoes.c | 84 | effects_matching( CLASS );
heat.c | 28 | submit_ee("change_temperature", ({ 45, 15 }), EE_CONTINUOUS);
heat.c | 29 | add_extra_look(this_object());
heat.c | 38 | add_extra_look(this_object());
heat.c | 50 | submit_ee(0, 0, EE_REMOVE);
heat.c | 60 | remove_extra_look(this_object());
heat.c | 70 | environment(ob)->query_heat();
heat.c | 80 | if((heat + shift) >
heat.c | 93 | tell_creator(find_living("gototh"), "Heat shift: %O\n", shift);
heat.c | 99 | one_short() + " stops glowing red hot.\n");
heat.c | 104 | one_short() + " seems to have cooled down.\n");
heat.c | 108 | submit_ee(0, 0, EE_REMOVE);
heat.c | 112 | set_arg_of(ob->sid_to_enum(id), new_heat);
heat.c | 121 | effects_matching("object.heat");
heat.c | 126 | arg_of(enums[0]);
heat.c | 128 | query_property("red hot at");
object_desc.c | 18 | add_property("determinate", desc[4]);
object_desc.c | 20 | add_alias(desc[3]);
object_desc.c | 22 | add_adjective(desc[2]);
object_desc.c | 24 | set_long(desc[1]);
object_desc.c | 26 | set_short(desc[0]);
object_desc.c | 38 | add_property("determinate", description[4]);
object_desc.c | 40 | add_alias(description[3]);
object_desc.c | 42 | add_adjective(description[2]);
object_desc.c | 44 | set_long(description[1]);
object_desc.c | 46 | set_short(description[0]);
object_desc.c | 48 | return ({thing, description, id});
extra_description.c | 23 | add_extra_look( this_object() );
extra_description.c | 24 | submit_ee( 0 , duration , EE_REMOVE );
extra_description.c | 31 | effects_matching( query_classification() );
extra_description.c | 33 | remove_extra_look( this_object() );
extra_description.c | 53 | tell_object( thing , end_mess );
label.c | 54 | clone_object( "/std/container" );
label.c | 56 | set_player( player );
label.c | 59 | init_dynamic_arg( map );
label.c | 71 | clone_object( "/std/container" );
label.c | 72 | move( store );
label.c | 73 | add_extra_look( file_name(this_object()) );
label.c | 74 | return ({ store, store->query_dynamic_auto_load() });
label.c | 88 | create_store(store[1], environment(thing));
label.c | 90 | move( store[0] );
label.c | 91 | query_dynamic_auto_load();
label.c | 100 | sizeof(store);
label.c | 102 | dest_me();
label.c | 104 | dest_me();
label.c | 106 | remove_extra_look( this_object() );
label.c | 123 | environment( thing );
label.c | 124 | add_extra_look( file_name(this_object()) );
label.c | 125 | create_store(map, environment(thing));
label.c | 126 | sid_to_enum(id);
label.c | 127 | set_arg_of(enum, ({ store, map }));
label.c | 137 | effects_matching( "object.label" );
label.c | 141 | arg_of( enums[ 0 ] );
label.c | 145 | create_store(bing[1], environment(thing));
label.c | 146 | set_arg_of(enums[0], ({ store, bing[1] }));
label.c | 153 | find_inv_match( "" );
identity_hold.c | 33 | new(class special_stuff);
identity_hold.c | 36 | set_keep_value(special_stuff->keep);
identity_hold.c | 37 | set_identifier(special_stuff->identity);
identity_hold.c | 38 | set_identity_hold_owner(this_player());
identity_hold.c | 53 | set_keep_value(data->keep);
identity_hold.c | 54 | set_identifier(data->identity);
identity_hold.c | 64 | set_keep_value(data->keep);
identity_hold.c | 65 | set_identifier(data->identity);
identity_hold.c | 66 | set_identity_hold_owner(this_player());
flea_cure.c | 45 | query_effs();
flea_cure.c | 49 | delete_effect( effnums[ i ] );
flea_cure.c | 58 | submit_ee( "make_smell", ({ 20, 30 }), EE_CONTINUOUS );
flea_cure.c | 59 | submit_ee( "kill_flea", ({ 30, 40 }), EE_CONTINUOUS );
flea_cure.c | 60 | call_out("cleanse", 0, player, time/10);
flea_cure.c | 61 | cleanse(player, time/10);
flea_cure.c | 62 | submit_ee( 0, time, EE_REMOVE );
flea_cure.c | 70 | call_out("cleanse", 0, player, (time1+time2)/10);
flea_cure.c | 76 | tell_object( player, "The odd odour is gone now.\n" );
flea_cure.c | 94 | short() + ".\n", player );
insect_repellent.c | 17 | submit_ee(0, 1, EE_REMOVE);
insect_repellent.c | 20 | add_property("insect", power);
insect_repellent.c | 21 | submit_ee("start_mess", 2, EE_ONCE);
insect_repellent.c | 22 | submit_ee("smell", ({30, 60}), EE_CONTINUOUS);
insect_repellent.c | 29 | submit_ee(0, 1, EE_REMOVE);
insect_repellent.c | 32 | submit_ee(0, -1, EE_REMOVE);
insect_repellent.c | 50 | tell_object(them, start_mess+"\n");
insect_repellent.c | 58 | tell_object(them, "The herbal odour around you fades away.\n");
insect_repellent.c | 59 | remove_property("insect");
insect_repellent.c | 60 | submit_ee(0, 1, EE_REMOVE);
insect_repellent.c | 77 | tell_object(them, self_mess+"\n");
insect_repellent.c | 79 | tell_room(env, other_mess+"\n", them);
snowball.c | 25 | add_extra_look( this_object() );
snowball.c | 26 | submit_ee( "decrease_amount", 15, EE_CONTINUOUS );
snowball.c | 30 | add_extra_look( this_object() );
snowball.c | 40 | remove_extra_look( this_object() );
snowball.c | 44 | random( random(amount) );
snowball.c | 47 | submit_ee( 0, 1, EE_REMOVE );
snowball.c | 49 | set_arg_of( (int)player->sid_to_enum( id ), amount );
snowball.c | 50 | add_effect("/std/effects/other/wetness", roll_MdN( 10, 10 ) );
snowball.c | 56 | effects_matching( "mudlib.snowball" );
coffee_nose.c | 13 | tell_object( player, "\n" );
coffee_nose.c | 14 | tell_room( environment( player ), (string)player->the_short() + " drinks some of his coffee and ends up with a small amount of froth on "+player->query_possessive()+" nose.\n", player);
coffee_nose.c | 15 | submit_ee( 0, time, EE_REMOVE );
coffee_nose.c | 16 | add_extra_look( this_object() );
coffee_nose.c | 25 | submit_ee( 0, newtime, EE_REMOVE );
coffee_nose.c | 32 | tell_object( player, "A small amount of frothy Coffee drops onto the floor.\n" );
coffee_nose.c | 33 | remove_extra_look( this_object() );
coffee_nose.c | 41 | query_pronoun()+" has a small amount of creamy, frothy coffee on "+player->query_possessive()+" nose.\n" );
basic_disease.c | 40 | this_object()->setup();
basic_disease.c | 50 | arg_of( enum );
basic_disease.c | 59 | sizeof( disease_class );
basic_disease.c | 62 | sizeof( cure_class );
basic_disease.c | 67 | set_arg_of( enum, arg );
basic_disease.c | 69 | this_object()->disease_better( person, arg );
hypothermia.c | 32 | tell_object( player, "You feel a bit chilly.\n" );
hypothermia.c | 33 | submit_ee( "change_index", ({ 60, 60 }), EE_CONTINUOUS );
hypothermia.c | 34 | submit_ee( "stat_adjusts", ({ 90, 90 }), EE_CONTINUOUS );
hypothermia.c | 46 | tell_object( player, "You feel a lot warmer now.\n" );
hypothermia.c | 56 | submit_ee( 0, 0, EE_REMOVE );
hypothermia.c | 61 | dest_hide_shadow();
hypothermia.c | 62 | tell_object( player, "The cold is just too much for you.\n" );
hypothermia.c | 65 | the_short() +" expires.\n", player );
hypothermia.c | 66 | do_death();
hypothermia.c | 71 | dest_hide_shadow();
hypothermia.c | 72 | tell_object( player, "You shiver.\n" );
hypothermia.c | 74 | capitalize( (string)player->short() ) +" shivers.\n", player );
hypothermia.c | 77 | dest_hide_shadow();
hypothermia.c | 86 | effects_matching("body.wetness");
hypothermia.c | 88 | arg_of( enums[ 0 ] );
hypothermia.c | 91 | dest_hide_shadow();
hypothermia.c | 98 | add_effect("/std/effects/wetness", -25 );
hypothermia.c | 102 | tell_object( player, "You're getting really cold in here.\n" );
hypothermia.c | 104 | set_arg_of( (int)player->sid_to_enum( id ), index );
hypothermia.c | 114 | adjust_tmp_str( -1 );
hypothermia.c | 119 | adjust_tmp_con( -1 );
hypothermia.c | 126 | adjust_int( 1 );
simple_disease.c | 57 | create();
simple_disease.c | 64 | this_object()->setup();
simple_disease.c | 71 | sid_to_enum( id );
simple_disease.c | 72 | this_object()->disease_start( person, arg, id );
simple_disease.c | 74 | submit_ee( 0, 0, EE_REMOVE );
simple_disease.c | 77 | submit_ee( "disease_tick", ( arg > 60 ) ? 60 : arg, EE_ONCE );
simple_disease.c | 86 | this_object()->disease_worse( person, old_arg, id );
simple_disease.c | 94 | this_object()->disease_end( person, arg, id );
simple_disease.c | 105 | set_arg_of( (int)person->sid_to_enum( id ), arg );
simple_disease.c | 107 | submit_ee( 0, 0, EE_REMOVE );
simple_disease.c | 130 | sizeof( things );
simple_disease.c | 132 | random( i );
simple_disease.c | 133 | add_effect( file_name( this_object() ), arg );
simple_disease.c | 139 | query_name() );
simple_disease.c | 143 | submit_ee( "disease_tick", ( arg > 60 ) ? 60 : arg, EE_ONCE );
simple_disease.c | 149 | this_object()->disease_action( person, arg, id );
simple_disease.c | 155 | file_name( this_object() ) +"\n" );
hp_drain_effect.c | 29 | effects_matching( query_classification() );
hp_drain_effect.c | 32 | arg_of( enums[ 0 ] );
hp_drain_effect.c | 36 | tell_object( player, "You feel weak.\n" );
hp_drain_effect.c | 37 | roll_MdN( 2, ( ( args[0] ) / 2 ) );
hp_drain_effect.c | 39 | attack_by( this_object() );
hp_drain_effect.c | 50 | tell_object( player, arg[2][0] + "\n" );
hp_drain_effect.c | 53 | submit_ee( 0, arg[1], EE_REMOVE );
hp_drain_effect.c | 60 | submit_ee( 0, arg[1] + player->expected_tt(), EE_REMOVE );
hp_drain_effect.c | 68 | tell_object( player, message[1] + "\n" );
hp_drain_effect.c | 75 | tell_object( player, message[0] + "\n" );
rabies.c | 38 | submit_ee( 0, 0, EE_REMOVE );
rabies.c | 42 | submit_ee( "wretch", ({ 30, 60 }), EE_CONTINUOUS );
rabies.c | 43 | submit_ee( 0, time, EE_REMOVE );
rabies.c | 45 | adjust_bonus_wis( -2 );
rabies.c | 46 | adjust_bonus_int( -2 );
rabies.c | 65 | adjust_bonus_wis( -2 );
rabies.c | 66 | adjust_bonus_int( -2 );
rabies.c | 73 | adjust_bonus_int( 2 );
rabies.c | 74 | adjust_bonus_wis( 2 );
rabies.c | 83 | random( sizeof( wretch_msg ) );
rabies.c | 84 | tell_object( player, wretch_msg[ msg_no ] );
rabies.c | 89 | random( 50 ) ) ) );
rabies.c | 90 | monitor_points( player, 1 );
flea_infestation.c | 40 | set_name( "Fleas" );
flea_infestation.c | 41 | set_classification( "disease.parasite.external.flea" );
flea_infestation.c | 42 | set_infection_chance( 2 );
flea_infestation.c | 48 | query_mature() ) && !$1->query_property( "dead" ) :) );
flea_infestation.c | 54 | query_race_ob();
flea_infestation.c | 58 | submit_ee( 0, 0, EE_REMOVE );
flea_infestation.c | 67 | remove_hide_invis( "hiding" );
flea_infestation.c | 68 | tell_object( player, "Something itches.  You scratch yourself.\n" );
flea_infestation.c | 74 | remove_hide_invis( "hiding" );
flea_infestation.c | 75 | tell_object( player, "Ouch!  Something bit you!\n" );
flea_infestation.c | 79 | adjust_hp( -10 - random( 10 ) );
flea_infestation.c | 82 | tell_object( player, "You notice a small red welt on your skin.\n" );
flea_infestation.c | 88 | submit_ee(0, 0, EE_REMOVE);
flea_infestation.c | 94 | file_name( this_object() ) +"\n" );
flea_infestation.c | 96 | set_arg_of( enum, arg + bonus );
common_cold.c | 27 | set_name( "Common Cold" );
common_cold.c | 28 | set_cure_rate( 6 );
common_cold.c | 29 | set_classification( "disease.infection.respiratory.cold" );
common_cold.c | 33 | tell_object( player, "You realise that your nose is running.\n" );
common_cold.c | 34 | submit_ee2( sid, "sap_strength", ({ 600, 600 }), EE_CONTINUOUS );
common_cold.c | 41 | tell_object( player, "You realise that your nose is clear again.\n" );
common_cold.c | 47 | new_parser( "sniff" );
common_cold.c | 50 | new_parser( "cough" );
common_cold.c | 53 | new_parser( "sneeze" );
common_cold.c | 58 | tell_object( player, "You feel your strength being sapped by the cold.\n" );
common_cold.c | 59 | adjust_tmp_str( -1 );
headache.c | 13 | tell_object(player, "Your head hurts.\n");
headache.c | 14 | submit_ee(0, arg, EE_REMOVE);
headache.c | 15 | submit_ee("pains", ({30, 60}), EE_CONTINUOUS);
headache.c | 16 | adjust_bonus_con(-1);
headache.c | 17 | adjust_bonus_dex(-1);
headache.c | 18 | adjust_bonus_int(-1);
headache.c | 19 | adjust_bonus_wis(-1);
headache.c | 26 | submit_ee("pains", ({30, 60}), EE_CONTINUOUS);
headache.c | 27 | adjust_bonus_con(-1);
headache.c | 28 | adjust_bonus_dex(-1);
headache.c | 29 | adjust_bonus_int(-1);
headache.c | 30 | adjust_bonus_wis(-1);
headache.c | 38 | expected_tt();
headache.c | 39 | submit_ee( "end", duration, EE_REMOVE );
headache.c | 40 | submit_ee("pains", ({30, 60}), EE_CONTINUOUS);
headache.c | 49 | tell_object( player, "Your head hurts.\n");
headache.c | 54 | tell_object( player, "You clutch your aching head.\n");
headache.c | 60 | tell_object( player, "Owwwwwwwwwwww!\n");
headache.c | 65 | tell_object( player, "Your head pounds!\n");
headache.c | 71 | tell_object( player, "Arrrrgh!  Migraine!\n");
headache.c | 81 | tell_object(player, "Your head feels better.\n");
headache.c | 82 | adjust_bonus_con(1);
headache.c | 83 | adjust_bonus_dex(1);
headache.c | 84 | adjust_bonus_wis(1);
headache.c | 85 | adjust_bonus_int(1);
flu.c | 29 | tell_object(player, "You shiver.\n");
flu.c | 42 | tell_object(player, "You feel altogether healthy again.\n");
gp_drain_effect.c | 29 | effects_matching( query_classification() );
gp_drain_effect.c | 33 | arg_of( enums[ 0 ] );
gp_drain_effect.c | 36 | tell_object( player, "You feel woozy.\n" );
gp_drain_effect.c | 37 | roll_MdN( 2, ( ( args[0] ) / 2 ) );
gp_drain_effect.c | 38 | adjust_gp( -damage );
gp_drain_effect.c | 48 | tell_object( player, arg[2][0] + "\n" );
gp_drain_effect.c | 51 | submit_ee( 0, arg[1], EE_REMOVE );
gp_drain_effect.c | 58 | submit_ee( 0, arg[1] + player->expected_tt(), EE_REMOVE );
gp_drain_effect.c | 66 | tell_object( player, message[1] + "\n" );
gp_drain_effect.c | 73 | tell_object( player, message[0] + "\n" );
general_hypothermia.c | 28 | shiver(object player, int temperatureess, int id);
general_hypothermia.c | 29 | calc_personal_temp(object player);
general_hypothermia.c | 37 | tell_object(player, "You feel a bit chilly.\n");
general_hypothermia.c | 39 | submit_ee( "shiver", ({ 20, 20 }), EE_CONTINUOUS );
general_hypothermia.c | 40 | submit_ee( "stat_adjusts", ({ 240, 240 }), EE_CONTINUOUS );
general_hypothermia.c | 41 | add_extra_look( this_object() );
general_hypothermia.c | 44 | submit_ee(0, 0, EE_REMOVE );
general_hypothermia.c | 57 | add_extra_look( this_object() );
general_hypothermia.c | 62 | tell_object( player, "You don't feel cold anymore.\n" );
general_hypothermia.c | 63 | remove_extra_look( this_object() );
general_hypothermia.c | 75 | temperature_index(environment(player));
general_hypothermia.c | 76 | calc_personal_temp(player);
general_hypothermia.c | 90 | submit_ee(0, 0, EE_REMOVE );
general_hypothermia.c | 94 | dest_hide_shadow();
general_hypothermia.c | 95 | tell_object( player, "The cold is just too much for you.\n" );
general_hypothermia.c | 98 | the_short() +" expires.\n", player );
general_hypothermia.c | 99 | do_death();
general_hypothermia.c | 106 | new_parser("shiver");
general_hypothermia.c | 107 | tell_object(player, "You feel cold to your bones.\n");
general_hypothermia.c | 110 | dest_hide_shadow();
general_hypothermia.c | 119 | new_parser("shiver");
general_hypothermia.c | 120 | effects_matching("body.wetness");
general_hypothermia.c | 122 | arg_of( enums[ 0 ] );
general_hypothermia.c | 131 | add_effect("/std/effects/other/wetness", -25 );
general_hypothermia.c | 135 | new_parser("shiver");
general_hypothermia.c | 136 | tell_object(player, "You feel really cold.\n" );
general_hypothermia.c | 139 | set_arg_of( (int)player->sid_to_enum( id ), temperature );
general_hypothermia.c | 150 | environment(player);
general_hypothermia.c | 156 | query_property("warmth");
general_hypothermia.c | 161 | query_type();
general_hypothermia.c | 163 | query_type() });
general_hypothermia.c | 173 | query_property("warmth");
general_hypothermia.c | 180 | sizeof(zones);
general_hypothermia.c | 181 | environment(player)->query_property("warmth");
general_hypothermia.c | 187 | if(WEATHER->temperature_index(environment(player)) >
general_hypothermia.c | 196 | adjust_int( 1 );
general_hypothermia.c | 201 | adjust_tmp_str( -1 );
general_hypothermia.c | 202 | adjust_tmp_con( -1 );
general_hypothermia.c | 212 | effects_matching( "disease.hypothermia" );
general_hypothermia.c | 216 | arg_of(enums[0]);
alone.c | 21 | add_effect("/std/effects/curses/alone");
alone.c | 33 | add_extra_look( this_object() );
alone.c | 42 | remove_extra_look( this_object() );
ken_curse.c | 21 | add_effect("/std/effects/curses/ken_curse", 360);
ken_curse.c | 27 | submit_ee( 0, time, EE_REMOVE );
ken_curse.c | 35 | expected_tt();
ken_curse.c | 36 | submit_ee( 0, duration, EE_REMOVE );
ken_curse.c | 42 | tell_object( player, "Your craving for fish & chips passes.\n");
smurf.c | 21 | add_effect("/std/effects/curses/smurf", 360);
smurf.c | 24 | add_effect("/std/effects/curse/smurf");
smurf.c | 39 | submit_ee( 0, time, EE_REMOVE );
smurf.c | 47 | expected_tt();
smurf.c | 48 | submit_ee( 0, duration, EE_REMOVE );
smurf.c | 54 | tell_object( player, "Your fear of Gargamel has abated.\n");
antisqeal.c | 13 | add_effect("/std/effects/curses/chef_curse", 120);
antisqeal.c | 18 | submit_ee( 0, time, EE_REMOVE );
antisqeal.c | 26 | expected_tt();
antisqeal.c | 27 | submit_ee( 0, duration, EE_REMOVE );
deaf_effect.c | 30 | tell_object( player, "Sounds seem dim and muffled.\n" );
deaf_effect.c | 32 | submit_ee( "hear_better", arg[ 1 ], EE_CONTINUOUS );
deaf_effect.c | 41 | tell_object( player, "Your hearing has returned to normal.\n" );
deaf_effect.c | 46 | add_message(this_object(), "Your hearing improves somewhat.\n", 0);
deaf_effect.c | 48 | if (arg == 100) player->delete_effect( player->sid_to_enum( id ) );
deaf_effect.c | 50 | set_arg_of( player->sid_to_enum( id ), arg );
deaf_effect.c | 55 | add_message( this_object(), "Your hearing gets worse.\n", 0 );
deaf_effect.c | 56 | set_arg_of( player->sid_to_enum( id ), new_arg );
ridcullian_curse.c | 18 | add_effect("/std/effects/curse/ridcullian", 300);
ridcullian_curse.c | 27 | submit_ee( 0, player->expected_tt() + new_arg, EE_REMOVE );
ridcullian_curse.c | 28 | tell_object(player, "You feel more concerned about your hair loss.\n");
ridcullian_curse.c | 34 | tell_object(player, "You feel less concerned about your hair loss.\n");
ridcullian_curse.c | 35 | submit_ee(0, player->expected_tt() - bonus, EE_REMOVE);
ridcullian_curse.c | 41 | submit_ee("hair_worry", ({ 10, 20 }), EE_CONTINUOUS);
ridcullian_curse.c | 42 | submit_ee(0, a, EE_REMOVE);
ridcullian_curse.c | 67 | do_say("I mean it wasn't there yesterday!");
ridcullian_curse.c | 70 | do_say("I have NOT got a bald spot!");
ridcullian_curse.c | 79 | do_say("What about this, then?");
chef_curse.c | 21 | add_effect("/std/effects/curses/chef_curse", 120);
chef_curse.c | 27 | submit_ee( 0, time, EE_REMOVE );
chef_curse.c | 35 | expected_tt();
chef_curse.c | 36 | submit_ee( 0, duration, EE_REMOVE );
chef_curse.c | 42 | tell_object( player, "Your craving for swedish meatballs goes away.\n");
no_player_title.c | 12 | submitt_ee( 0, time, EE_REMOVE );
no_player_title.c | 29 | tell_creator ("taffyd", "Spam\n" );
vomit.c | 10 | pool_descripts( object room , int pools );
vomit.c | 22 | pool_descripts ( room , pools ) ;
vomit.c | 23 | submit_ee ( 0 , duration , EE_REMOVE ) ;
vomit.c | 29 | remove_item( "pool" );
vomit.c | 35 | add_extra_look( this_object() );
vomit.c | 42 | expected_tt()  ;
vomit.c | 45 | pool_descripts( room , pools ) ;
vomit.c | 46 | return ({ duration , pools }) ;
vomit.c | 53 | remove_item ( "pool" );
vomit.c | 54 | remove_extra_look( this_object() );
vomit.c | 63 | effects_matching( query_classification() );
vomit.c | 66 | query_num( pools , 10 );
albatross_attack.c | 14 | attack_by( this_object() );
albatross_attack.c | 15 | monitor_points( pl, 1 );
albatross_attack.c | 19 | roll_MdN( 3, 150 );
albatross_attack.c | 20 | environment( pl );
albatross_attack.c | 24 | submit_ee( 0, ( pl->expected_tt() + 15 + random( 20 ) ), EE_REMOVE );
albatross_attack.c | 40 | damage_player( pl, damage * 3 / 2 );
albatross_attack.c | 41 | add_effect( BLIND, damage / 2 );
albatross_attack.c | 50 | damage_player( pl, damage );
albatross_attack.c | 64 | damage_player( pl, damage / 2 );
albatross_attack.c | 75 | damage_player( pl, damage * 2 );
albatross_attack.c | 87 | submit_ee( "pecking", ({ 15, 45 }), EE_CONTINUOUS, pl );
albatross_attack.c | 88 | submit_ee( 0, args, EE_REMOVE );
albatross_attack.c | 89 | add_extra_look( this_object() );
albatross_attack.c | 94 | submit_ee( 0, new_args, EE_REMOVE );
albatross_attack.c | 105 | add_extra_look( this_object() );
albatross_attack.c | 113 | remove_extra_look( this_object() );
burial.c | 22 | timeout_ob(object room, int enum, object ob);
burial.c | 23 | check_buried();
burial.c | 35 | new(class arg_stuff);
burial.c | 36 | clone_object("/std/container");
burial.c | 37 | add_property("burial object", 1);
burial.c | 41 | move(_stuff[room]->cont);
burial.c | 42 | event (ob, "bury", ob, room);
burial.c | 44 | time() });
burial.c | 46 | call_out("check_buried", BURY_TIMEOUT);
burial.c | 55 | new(class arg_stuff);
burial.c | 56 | clone_object("/std/container");
burial.c | 59 | add_property("burial object", 1);
burial.c | 62 | move(_stuff[room]->cont);
burial.c | 63 | event (ob, "bury", ob, room);
burial.c | 65 | time() });
burial.c | 68 | call_out("check_buried", BURY_TIMEOUT);
burial.c | 80 | all_inventory(womble->cont)->move("/room/rubbish");
burial.c | 81 | dest_me();
burial.c | 94 | call_out("check_buried", BURY_TIMEOUT);
burial.c | 102 | dest_me();
burial.c | 104 | dest_me();
burial.c | 105 | map_delete(_stuff, room);
burial.c | 107 | sizeof(bing->obs);
burial.c | 113 | dest_me();
burial.c | 120 | dest_me();
burial.c | 122 | map_delete(_stuff, room);
burial.c | 127 | remove_call_out(_call_id);
burial.c | 141 | return ({ });
burial.c | 167 | member_array(ob, _stuff[room]->obs);
burial.c | 181 | return ([ "stuff" : _stuff ]);
burial.c | 189 | call_out("check_buried", BURY_TIMEOUT);
yellow-green_gas.c | 34 | submit_ee("choke", CHOKE_TIME, EE_CONTINUOUS);
yellow-green_gas.c | 35 | submit_ee("clear", time, EE_REMOVE);
yellow-green_gas.c | 36 | add_extra_look(this_object());
yellow-green_gas.c | 56 | tell_room(room, "The yellow-green gas clears.\n");
yellow-green_gas.c | 57 | remove_item("gas");
yellow-green_gas.c | 67 | filter(all_inventory(room), (: living($1) :));
yellow-green_gas.c | 71 | query_ac("gas", damage, "head");
yellow-green_gas.c | 79 | adjust_hp(-damage);
yellow-green_gas.c | 82 | monitor_points();
yellow-green_gas.c | 93 | remove_extra_look(this_object());
terrain_dont_unload.c | 22 | setup_shad();
terrain_dont_unload.c | 28 | setup_shad();
magic_octogram.c | 26 | query_property( "here" ) +".\n" );
magic_octogram.c | 27 | submit_ee( 0, number, EE_REMOVE );
magic_octogram.c | 28 | add_extra_look( this_object() );
magic_octogram.c | 38 | tell_room( thing, "The octogram pulses for a moment.\n" );
magic_octogram.c | 39 | submit_ee( 0, new_arg + (int)thing->expected_tt(), EE_REMOVE );
magic_octogram.c | 47 | tell_room( thing, "The octogram flickers and disappears.\n" );
magic_octogram.c | 48 | remove_extra_look( this_object() );
bubble_bath.c | 15 | sizeof(filter(all_inventory(room), (: $1->query_baths() :)));
bubble_bath.c | 27 | add_effect(PATH + "bubble_bath", args);
bubble_bath.c | 29 | submit_ee( "bubblebubble", ({10,30}), EE_CONTINUOUS );
bubble_bath.c | 30 | submit_ee( 0, args[0], EE_REMOVE );
bubble_bath.c | 32 | add_extra_look( this_object() );
bubble_bath.c | 44 | tell_room( room, "The bubbles surge as more bubble bath is added.\n" );
bubble_bath.c | 45 | submit_ee( 0, new_arg[0] + (int)room->expected_tt(), EE_REMOVE );
bubble_bath.c | 47 | sizeof(old_arg);
bubble_bath.c | 57 | add_extra_look(this_object());
bubble_bath.c | 58 | query_surface()?"air":"water");
bubble_bath.c | 69 | add_effect(PATH + "bubble_bath", new_arg);
bubble_bath.c | 80 | query_surface()?"fragrant":"colourful");
bubble_bath.c | 83 | remove_extra_look( this_object() );
bubble_bath.c | 85 | sizeof(args);
bubble_bath.c | 87 | remove_item( args[index][0] + " bubbles" );
bubble_bath.c | 99 | effects_matching( query_classification() );
bubble_bath.c | 100 | query_surface()?"smelling":"looking");
bubble_bath.c | 104 | arg_of( enums[0] );
bubble_bath.c | 112 | if ( sizeof ( shades ) >
bubble_bath.c | 113 | sizeof ( shades );
bubble_bath.c | 133 | query_surface_water(room)?"fragrance":"colours");
bubble_bath.c | 134 | query_surface_water(room)?"air":"water");
bubble_bath.c | 136 | while (!index) index = random(sizeof(args));
crater.c | 29 | add_extra_look( this_object() );
crater.c | 31 | return ({ name });
crater.c | 59 | remove_item( name + " shaped crater" );
crater.c | 62 | remove_extra_look( this_object() );
crater.c | 74 | effects_matching( query_classification() );
crater.c | 82 | arg_of( enums[0] );
swinging.c | 19 | submit_ee("swinging", ({15, 30}), EE_CONTINUOUS);
swinging.c | 20 | submit_ee( 0, arg, EE_REMOVE );
swinging.c | 21 | expected_tt();
swinging.c | 23 | submit_ee("slowing", (st), EE_ONCE);
swinging.c | 31 | set_position("swinging back and forth");
swinging.c | 32 | set_position_type("on");
swinging.c | 39 | expected_tt();
swinging.c | 44 | submit_ee(0, new_arg + tt, EE_REMOVE);
swinging.c | 46 | submit_ee("slowing", (st), EE_ONCE);
swinging.c | 53 | tell_object(player, "You stop swinging.\n");
swinging.c | 56 | set_position("sitting");
swinging.c | 57 | set_position_type("in");
swinging.c | 63 | submit_ee(0, 0, EE_REMOVE);
swinging.c | 104 | tell_object(player, "You swing back and forth.\n");
drink_silly.c | 52 | submit_ee("buy_something", 5, EE_CONTINUOUS);
drink_silly.c | 53 | do_command("stand at bar");
drink_silly.c | 54 | normalise(arg, player);
drink_silly.c | 59 | normalise(time1, player) + normalise(time2, player);
drink_silly.c | 66 | sizeof(arg);
drink_silly.c | 68 | evaluate(arg[i]);
drink_silly.c | 70 | call_other(arg[i], arg[i+1]);
drink_silly.c | 91 | environment(player)->query_menu_items();
drink_silly.c | 94 | keys(items);
drink_silly.c | 96 | environment(player)->query_property( "place" );
drink_silly.c | 100 | query_value_in( place );
drink_silly.c | 102 | query_value_in( "default" );
drink_silly.c | 124 | delete_effect(player->sid_to_enum(id));
drink_silly.c | 127 | random(sizeof(rabbit));
drink_silly.c | 128 | do_command("buy "+rabbit[i]);
drink_silly.c | 130 | while (ret <= 0 && sizeof(rabbit));
drink_silly.c | 133 | delete_effect(player->sid_to_enum(id));
vampirebite_effect.c | 23 | come_around( object person );
vampirebite_effect.c | 41 | add_extra_look( this_object() );
vampirebite_effect.c | 42 | adjust_bonus_int(-2);
vampirebite_effect.c | 43 | adjust_bonus_wis(-2);
vampirebite_effect.c | 44 | adjust_bonus_str(-2);
vampirebite_effect.c | 45 | adjust_bonus_dex(-2);
vampirebite_effect.c | 47 | submit_ee( "bite_pain", ({ 10, 60 }), EE_CONTINUOUS );
vampirebite_effect.c | 52 | query_con();
vampirebite_effect.c | 56 | submit_ee( 0, time, EE_REMOVE );
vampirebite_effect.c | 65 | query_con();
vampirebite_effect.c | 68 | expected_tt();
vampirebite_effect.c | 69 | submit_ee( 0, new_time, EE_REMOVE );
vampirebite_effect.c | 76 | adjust_bonus_int(-2);
vampirebite_effect.c | 77 | adjust_bonus_wis(-2);
vampirebite_effect.c | 78 | adjust_bonus_str(-2);
vampirebite_effect.c | 79 | adjust_bonus_dex(-2);
vampirebite_effect.c | 85 | come_around( person );
vampirebite_effect.c | 87 | adjust_bonus_int(2);
vampirebite_effect.c | 88 | adjust_bonus_wis(2);
vampirebite_effect.c | 89 | adjust_bonus_str(2);
vampirebite_effect.c | 90 | adjust_bonus_dex(2);
vampirebite_effect.c | 101 | expected_tt();
vampirebite_effect.c | 131 | new_parser( "gasp in pain" );
vampirebite_effect.c | 134 | new_parser( "moan agonisingly" );
vampirebite_effect.c | 137 | new_parser( "stumble" );
vampirebite_effect.c | 140 | new_parser( "dloh head in pain" );
vampirebite_effect.c | 190 | add_property( PASSED_OUT_PROP, 1 );
vampirebite_effect.c | 191 | submit_ee( "come_around", ({ 50, 80 }), EE_ONCE );
vampirebite_effect.c | 194 | submit_ee( "wander_about", 3, EE_ONCE );
vampirebite_effect.c | 207 | query_objective() + "self up.\n", person );
vampirebite_effect.c | 208 | remove_property( PASSED_OUT_PROP );
vampirebite_effect.c | 220 | submit_ee( "wander_about", ({ 8, 8 }), EE_ONCE );
vampirebite_effect.c | 222 | environment( person )->query_direc();
vampirebite_effect.c | 224 | random( sizeof( direcs ) );
vampirebite_effect.c | 227 | delete( direcs, i, 1 );
vampirebite_effect.c | 231 | add_property( UNKNOWN_MOVE, 1 );
vampirebite_effect.c | 242 | remove_property( UNKNOWN_MOVE );
vampirebite_effect.c | 245 | delete( direcs, i, 1 );
dont_move.c | 34 | submit_ee(0, arg, EE_REMOVE);
no_follow.c | 31 | do_command("lose everyone");
wizards_protection.c | 30 | submit_ee( 0, -1, EE_REMOVE );
wizards_protection.c | 35 | return (SHADOWS SHADOW_OB);
vampirecorpse_effect.c | 24 | add_extra_look( this_object() );
vampirecorpse_effect.c | 25 | submit_ee( "corpse_action", 10, EE_CONTINUOUS );
vampirecorpse_effect.c | 44 | clone_object( "/d/ram/chars/Uberwald/corpse_vampire" );
vampirecorpse_effect.c | 45 | setup_vampire( args[0], args[1] );
vampirecorpse_effect.c | 50 | do_command( "grin viciously" );
vampirecorpse_effect.c | 52 | clear_armours();
vampirecorpse_effect.c | 55 | move( environment( corpse ) );
vampirecorpse_effect.c | 58 | remove_extra_look( this_object() );
vampirecorpse_effect.c | 59 | move( "/room/rubbish" );
vampirecorpse_effect.c | 66 | all_inventory (corpse);
vampirecorpse_effect.c | 67 | query_decay());
vampirecorpse_effect.c | 75 | tell_creator("archana","Yes I'm being called ");
vampirecorpse_effect.c | 76 | submit_ee( 0, 1, EE_REMOVE );
vampirecorpse_effect.c | 97 | tell_creator("archana","Yes I'm being called ");
vampirecorpse_effect.c | 98 | submit_ee( 0, 1, EE_REMOVE );
goto_destination.c | 52 | standardize(mixed dest);
goto_destination.c | 63 | this_object(), ctime(time())));
goto_destination.c | 72 | this_object(), ctime(time())));
goto_destination.c | 77 | move_me_to(dest);
goto_destination.c | 86 | remove_effect(id);
goto_destination.c | 108 | if (sizeof(arg) >
goto_destination.c | 117 | standardize(arg[0]);
goto_destination.c | 120 | while (!arg[0] && sizeof(arg) >
goto_destination.c | 122 | standardize(arg[0]);
goto_destination.c | 126 | call_out("remove_effect", 2, player, id);
goto_destination.c | 132 | call_out("call_move_to", 2, player, file_name(environment(arg[0])));
goto_destination.c | 134 | call_out("call_move_to", 2, player, arg[0]);
goto_destination.c | 142 | file_name(dest);
goto_destination.c | 148 | file_name(find_object(dest));
goto_destination.c | 161 | if (sizeof(arg1) >
goto_destination.c | 165 | standardize(arg1[0]);
goto_destination.c | 172 | if (sizeof(arg2) >
goto_destination.c | 176 | standardize(arg2[0]);
goto_destination.c | 181 | while (!arg1[0] && sizeof(arg1) >
goto_destination.c | 183 | standardize(arg1[0]);
goto_destination.c | 187 | call_out("remove_effect", 2, player, id);
goto_destination.c | 188 | return ({ });
goto_destination.c | 199 | add_effect(file_name(this_object()), arr);
goto_destination.c | 213 | all_inventory(player);
goto_destination.c | 214 | sizeof(obs);
goto_destination.c | 227 | if (sizeof(room) >
goto_destination.c | 229 | call_out( "effect_womble", room[2], player, room[3..]);
goto_destination.c | 235 | environment(room[0]) == environment(player));
goto_destination.c | 241 | evaluate(room[1], player, room[0], ok, room[1]);
goto_destination.c | 248 | do_the_sell(player);
goto_destination.c | 251 | do_command(room[1]);
goto_destination.c | 258 | call_other(room[1][0], room[1][1], player, room[0], ok, room[1]);
mock_block.c | 35 | filter( arg, (: member_array( $1, $2 ) == -1 :), old );
unsocial_effect.c | 32 | submit_ee( "reminder_mess", 20, EE_CONTINUOUS );
unsocial_effect.c | 33 | submit_ee( 0, arg[1], EE_REMOVE );
unsocial_effect.c | 34 | set_max_sp( 0 );
unsocial_effect.c | 50 | query_real_max_sp();
unsocial_effect.c | 51 | adjust_max_sp( number );
unsocial_effect.c | 75 | tell_object( player, message);
unsocial_effect.c | 79 | run_away();
unsocial_effect.c | 85 | tell_object(player,((environment(player)->query_long() )+"\n"));
basilisk_stare.c | 23 | delete_effect(to->sid_to_enum(id));
basilisk_stare.c | 24 | attack_by(this_object());
basilisk_stare.c | 25 | adjust_hp(-amount, from);
basilisk_stare.c | 35 | effects_matching("fighting");
basilisk_stare.c | 38 | delete_effect(fights[i]);
basilisk_stare.c | 47 | set_arg_of(them->sid_to_enum(id), arg);
basilisk_stare.c | 49 | delete_effect(them->sid_to_enum(id));
basilisk_stare.c | 55 | delete_effect(them->sid_to_enum(id));
basilisk_stare.c | 64 | random(4)]);
basilisk_stare.c | 71 | random(4)], them);
basilisk_stare.c | 73 | find_living("basilisk");
basilisk_stare.c | 76 | call_out("do_damage", 1, them, dam, basilisk, id);
basilisk_stare.c | 86 | submit_ee("stop_fighting", 1, EE_ONCE);
basilisk_stare.c | 87 | submit_ee("doit", 10, EE_CONTINUOUS);
basilisk_stare.c | 88 | add_property("passed out", 1);
basilisk_stare.c | 94 | tell_object(them, "You are freed from the basilisk's deadly stare.\n");
basilisk_stare.c | 95 | remove_property("passed out");
basilisk_stare.c | 104 | set_arg_of(them->sid_to_enum(id), arg1 + arg2);
good_fighter.c | 61 | add_effect(GOOD_FIGHTER, ({ USE_PIERCE, DEFEND_PARRY }) );
good_fighter.c | 111 | good_fighter_setup();
good_fighter.c | 119 | submit_ee("gfs", 1, EE_ONCE);
good_fighter.c | 126 | beginning(player, arg);
gossip.c | 27 | do_gossip_say(str);
bob.c | 41 | the_short() +".\n" );
bob.c | 42 | set_data( ({ "unarmed", "blunt", "hands" }) );
bob.c | 43 | submit_ee( 0, 10 * COMBAT_SPEED, EE_REMOVE );
bob.c | 49 | tell_object( player, "You missed your opportunity!\n" );
bob.c | 53 | submit_ee( 0, 0, EE_REMOVE );
stat_adjustment.c | 83 | if (player == find_player("presto"))  printf("UPDATE: %O\n", arg);
stat_adjustment.c | 84 | if (player == find_player("presto"))  printf("UPDATE: %O\n", arg->obs);
stat_adjustment.c | 85 | sizeof(arg->obs);
stat_adjustment.c | 87 | printf("%O, %d\n", arg->obs, i);
stat_adjustment.c | 88 | printf( "UPDATE: checkpoint 2: %O\n", arg->obs[i]);
stat_adjustment.c | 97 | tell_creator("presto", "checkpoint 3\n");
stat_adjustment.c | 101 | sizeof(arg->adjs);
stat_adjustment.c | 121 | sizeof(arg->adjs);
stat_adjustment.c | 128 | tell_creator("presto", "UPDATE: checkpoint 1\n");
stat_adjustment.c | 143 | log_file("STAT_EFFECT", "Added from %O\n", previous_object(-1));
stat_adjustment.c | 144 | new(class stat_class);
stat_adjustment.c | 149 | if (player == find_player("presto"))  printf("BEFORE: %O\n", bing);
stat_adjustment.c | 150 | update_adjustments(player, bing);
stat_adjustment.c | 152 | tell_creator("presto", "BEGINNING: bing == %O, player == %s\n", bing, player->short());
stat_adjustment.c | 163 | log_file("STAT_EFFECT", "Merged from %O\n", previous_object(-1));
stat_adjustment.c | 165 | submit_ee(0, 0, EE_REMOVE);
stat_adjustment.c | 168 | query_current_effect_enum());
stat_adjustment.c | 173 | member_array(new_arg[0], old_arg->obs);
stat_adjustment.c | 180 | update_adjustments(player, old_arg);
stat_adjustment.c | 186 | update_adjustments(player, edible);
stat_adjustment.c | 194 | update_adjustments(player, womble);
stat_adjustment.c | 201 | update_adjustments(player, bing);
stat_adjustment.c | 215 | effects_matching(query_classification());
stat_adjustment.c | 217 | arg_of(ids[0]);
stat_adjustment.c | 218 | sizeof(fluff->obs);
stat_adjustment.c | 225 | delete_effect(ids[0]);
stat_adjustment.c | 227 | update_adjustments(player, fluff);
stat_adjustment.c | 228 | set_arg_of(ids[0], fluff);
single_shoulder.c | 52 | adjust_bonus_dex( -handicap );
single_shoulder.c | 58 | adjust_bonus_dex( handicap );
owned_transport.c | 36 | new(class riding);
owned_transport.c | 39 | set_transport_id(_transport_id++);
owned_transport.c | 52 | set_transport_id(_transport_id++);
owned_transport.c | 56 | dest_me();
owned_transport.c | 66 | tell_creator("pinkfish", "Ending owned effect...\n");
owned_transport.c | 75 | tell_creator("pinkfish", "Restart! %O\n", bing->transport);
owned_transport.c | 76 | filter(bing->transport, (: $1 :));
owned_transport.c | 81 | tell_creator("pinkfish", "Cuddles %O\n", green);
owned_transport.c | 82 | sizeof(bing->transport);
owned_transport.c | 89 | tell_creator("pinkfish", "Restart! %O\n", bing->transport);
owned_transport.c | 104 | find_start_pos($1, environment($1)) :));
owned_transport.c | 106 | find_start_pos($1, environment($1)) :));
owned_transport.c | 107 | create_auto_load( bing->transport );
owned_transport.c | 108 | call_out( (: clear_thingy :), 2, bing);
owned_transport.c | 109 | tell_creator("pinkfish", "Saving %O %O\n", bing->transport, bing->environments);
owned_transport.c | 114 | tell_creator("pinkfish", "Quiting %O\n", bing->transport);
owned_transport.c | 129 | tell_creator("pinkfish", "Remove owner of %O (%O)\n", trans, player);
owned_transport.c | 132 | tell_creator("pinkfish", "Deleting!\n");
owned_transport.c | 133 | delete_effect(id);
talker_response.c | 22 | delete_effect(item->sid_to_enum(id));
talker_response.c | 32 | beginning(player, arg, id);
riding.c | 16 | environment(player)->the_short();
riding.c | 33 | new(class riding);
living_light.c | 36 | query_objective() +".\n", player );
living_light.c | 37 | adjust_light( INTENSITY );
living_light.c | 38 | add_extra_look( this_object() );
living_light.c | 39 | submit_ee( "decrease_points", 1, EE_ONCE );
living_light.c | 40 | submit_ee( "decrease_points", ({ 30, 60 }), EE_CONTINUOUS );
living_light.c | 45 | adjust_light( light );
living_light.c | 46 | add_extra_look( this_object() );
living_light.c | 53 | this_object() ) );
living_light.c | 56 | tell_object( player, "The light surrounding you intensifies.\n" );
living_light.c | 58 | short() +" grows brighter.\n", player );
living_light.c | 59 | adjust_light( INTENSITY );
living_light.c | 68 | short() +" flickers and winks out.\n", player );
living_light.c | 69 | adjust_light( -light );
living_light.c | 70 | remove_extra_look( this_object() );
living_light.c | 86 | this_object() ) );
living_light.c | 88 | submit_ee( 0, 0, EE_REMOVE );
living_light.c | 92 | submit_ee( 0, 0, EE_REMOVE );
living_light.c | 95 | clear_gp_info();
living_light.c | 96 | adjust_gp( - times * COST_PER_ROUND );
living_light.c | 103 | adjust_light( times * INTENSITY - light );
living_light.c | 105 | set_arg_of( (int)player->sid_to_enum( id ), light );
wetness.c | 76 | tell_object( player, "Squelch.\n" );
wetness.c | 77 | submit_ee( "squelch", ({ 20, 20 }), EE_CONTINUOUS );
wetness.c | 78 | add_extra_look( this_object() );
wetness.c | 85 | query_weight();
wetness.c | 92 | add_extra_look( this_object() );
wetness.c | 106 | query_weight();
wetness.c | 109 | submit_ee(0, 0, EE_REMOVE );
wetness.c | 117 | tell_object(player, "You feel dry now.\n");
wetness.c | 118 | remove_extra_look( this_object() );
wetness.c | 126 | environment(player);
wetness.c | 131 | query_property("location");
wetness.c | 133 | if(loc == "outside" && (int)WEATHER->query_temperature(env) >
wetness.c | 135 | query_property("warmth");
wetness.c | 137 | query_property( "warmth" );
wetness.c | 140 | query_personal_temp() / 3);
wetness.c | 149 | submit_ee(0, 0, EE_REMOVE );
wetness.c | 152 | tell_object(player, "Squelch.\n" );
wetness.c | 155 | if ( ( ( 100 * wetness ) >
wetness.c | 157 | add_effect( "/std/effects/disease/common_cold", wetness);
wetness.c | 159 | set_arg_of(player->sid_to_enum(id), wetness);
wetness.c | 167 | effects_matching( "body.wetness" );
wetness.c | 171 | arg_of(enums[0]);
wetness.c | 175 | submit_ee(0, 0, EE_REMOVE );
npc_intelligent.c | 13 | check_heart_beat_results();
npc_intelligent.c | 16 | create();
npc_intelligent.c | 17 | create();
npc_intelligent.c | 24 | heart_beat();
npc_intelligent.c | 25 | call_out((: check_heart_beat_results :), 0);
npc_intelligent.c | 34 | query_hp();
npc_intelligent.c | 37 | notify_npc_event(EVENT_GAIN_HPS, hp - _last_hp, hp);
npc_intelligent.c | 39 | notify_npc_event(EVENT_LOSE_HPS, _last_hp - hp, hp);
npc_intelligent.c | 47 | stats() + goals_inherit::stats();
npc_intelligent.c | 55 | environment();
npc_intelligent.c | 56 | move(dest, messin, messout);
npc_intelligent.c | 58 | call_out((: notify_npc_event :), 0, EVENT_MOVED, from);
npc_intelligent.c | 66 | call_out((: notify_npc_event :), 0, EVENT_GIVEN, moving);
goals_inherit.c | 31 | query_goal_information(string goal);
goals_inherit.c | 32 | remove_goal_event(string goal, string event);
goals_inherit.c | 33 | add_goal_event(string goal, string event);
goals_inherit.c | 34 | query_goal_priority(string goal);
goals_inherit.c | 35 | check_current_plan_finished();
goals_inherit.c | 71 | new(class goal_information);
goals_inherit.c | 73 | query_priority(this_object(), data);
goals_inherit.c | 76 | initialise(this_object(), goal, data);
goals_inherit.c | 78 | add_again(this_object(), query_goal_information(goal)->data, data);
goals_inherit.c | 90 | query_goal_information(goal);
goals_inherit.c | 92 | finalise(this_object(), frog->data);
goals_inherit.c | 94 | remove_goal_event(goal, event);
goals_inherit.c | 96 | map_delete(_goals, goal);
goals_inherit.c | 122 | query_goal_information(goal);
goals_inherit.c | 140 | query_goal_information(goal);
goals_inherit.c | 157 | query_goal_information(goal);
goals_inherit.c | 177 | query_goal_information(goal);
goals_inherit.c | 179 | query_priority(this_object(), frog->data);
goals_inherit.c | 185 | remove_goal_event(goal, evt);
goals_inherit.c | 186 | add_goal_event(goal, evt);
goals_inherit.c | 207 | query_goal_information(goal);
goals_inherit.c | 213 | query_goal_priority(goal);
goals_inherit.c | 242 | query_goal_information(goal);
goals_inherit.c | 246 | map_delete(_events, event);
goals_inherit.c | 263 | tell_creator("pinkfish", "%s %O\n", event, _events[event]);
goals_inherit.c | 281 | check_current_plan_finished();
goals_inherit.c | 301 | query_goal_priority(goal);
goals_inherit.c | 303 | member_array(plan, _plans);
goals_inherit.c | 307 | combine_plans(info->data, data);
goals_inherit.c | 326 | sizeof(_plans);
goals_inherit.c | 345 | new(class plan_info);
goals_inherit.c | 349 | sizeof(_plans);
goals_inherit.c | 363 | tell_creator("pinkfish", "Activating %O, %O, %O\n", _current_plan, _plans[PLAN_PLAN], _plans[PLAN_INFO]);
goals_inherit.c | 367 | member_array(_current_plan, _plans);
goals_inherit.c | 376 | while (check_current_plan_finished());
goals_inherit.c | 409 | member_array(plan, _plans);
goals_inherit.c | 426 | query_goal_information(goal);
goals_inherit.c | 429 | query_multiple_short(frog->events) }) });
goals_inherit.c | 434 | sizeof(_plans);
goals_inherit.c | 455 | query_goal_data(goal);
goals_inherit.c | 456 | set_plan_data(this_object(), goal_data, plan, data);
goals_inherit.c | 469 | query_goal_data(goal);
goals_inherit.c | 470 | query_plan_data(this_object(), goal_data, plan);
surface_decorator.c | 11 | add_allowed_surface( "floor" );
surface_decorator.c | 53 | do_ask( string surface, string decor );
surface_decorator.c | 59 | create();
surface_decorator.c | 63 | this_object()->setup();
surface_decorator.c | 64 | this_object()->reset();
surface_decorator.c | 66 | add_help_file("/doc/object/surface_decorator");
surface_decorator.c | 67 | add_enter_commands("#check_domain");
surface_decorator.c | 74 | init();
surface_decorator.c | 77 | do_ask($4[1], $4[2])  :) );
surface_decorator.c | 82 | this_player()->add_command( "hire", this_object(), "<direct:object>");
surface_decorator.c | 98 | init_command( responses[8], 1 );
surface_decorator.c | 111 | query_property("place")) + ".", i);
surface_decorator.c | 125 | this_object()->query_possessive() + " services.\n", ({ }) );
surface_decorator.c | 129 | init_command( responses[10], 1 );
surface_decorator.c | 139 | query_name() }) ), 1 );
surface_decorator.c | 144 | this_player();
surface_decorator.c | 145 | do_command("unfollow everyone");
surface_decorator.c | 146 | add_follower(this_object());
surface_decorator.c | 148 | init_command( responses[12], 1 );
surface_decorator.c | 181 | do_command(responses[0]);
surface_decorator.c | 187 | do_command(responses[1]);
surface_decorator.c | 193 | environment( this_object() );
surface_decorator.c | 197 | do_command(responses[2]);
surface_decorator.c | 203 | do_command(responses[3]);
surface_decorator.c | 207 | query_property("place");
surface_decorator.c | 215 | queue_command("stare" + this_player()->query_name());
surface_decorator.c | 223 | do_command(responses[4]);
surface_decorator.c | 226 | call_out( "finish_work", work_time, surface, long, where );
surface_decorator.c | 227 | do_command( responses[9] );
surface_decorator.c | 228 | do_command( "unfollow everyone" );
surface_decorator.c | 254 | do_command(":finishes his work.");
surface_decorator.c | 256 | add_follower(this_object());
surface_decorator.c | 262 | do_command(responses[4]);
surface_decorator.c | 267 | do_command(responses[5]);
surface_decorator.c | 280 | move("/room/rubbish", "$N walk$s in.", "$N walk$s away.");
surface_decorator.c | 283 | move(last_ok, "$N walk$s in.", "$N walk$s away.");
surface_decorator.c | 301 | file_name( environment( this_object() ) );
surface_decorator.c | 315 | do_command("unfollow everyone");
surface_decorator.c | 316 | do_command( responses[13] );
surface_decorator.c | 317 | go_back();
surface_decorator.c | 345 | map_delete( fitted_surfaces, short );
taliswoman.c | 8 | setup();
taliswoman.c | 9 | init();
taliswoman.c | 10 | high_level();
taliswoman.c | 11 | set_destination(string city);
taliswoman.c | 12 | go_granny( string *args );
taliswoman.c | 34 | set_name( "taliswoman" );
taliswoman.c | 35 | add_alias( ({ "stone", "ass", "thong" }) );
taliswoman.c | 36 | set_short( "taliswoman" );
taliswoman.c | 39 | add_property( "talisman", "no one" );
taliswoman.c | 40 | add_property( "no recycling", 1 );
taliswoman.c | 41 | set_main_plural( "taliswomen" );
taliswoman.c | 46 | add_extra_look( this_object() );
taliswoman.c | 48 | set_value(1);
taliswoman.c | 49 | set_weight(2);
taliswoman.c | 50 | set_type( "necklace" );
taliswoman.c | 51 | set_max_cond( 70 );
taliswoman.c | 52 | set_cond( 70 );
taliswoman.c | 54 | init_dynamic_arg(query_dynamic_auto_load());
taliswoman.c | 76 | go_granny( $4[0] ) :) );
taliswoman.c | 96 | set_worn_by(0);
taliswoman.c | 97 | this_player()->remove_property( "given taliswoman" );
taliswoman.c | 98 | move( "/room/rubbish", "", "$N vanishes in a puff of smoke." );
taliswoman.c | 118 | if (map["::"]) ::init_dynamic_arg(map["::"]);
taliswoman.c | 136 | set_worn_by(0);
taliswoman.c | 137 | move( "/room/rubbish" );
taliswoman.c | 153 | if( this_player()->query_level() >
taliswoman.c | 154 | high_level();
taliswoman.c | 164 | add_failed_mess( "But you are already here!\n" );
taliswoman.c | 181 | add_property( "been to bad ass", 1 );
taliswoman.c | 190 | if( this_player()->query_level() >
taliswoman.c | 191 | high_level();
taliswoman.c | 201 | add_failed_mess( "But you are already here!\n" );
taliswoman.c | 208 | add_property( "been to city", 1 );
taliswoman.c | 226 | this_player()->remove_property( "given taliswoman" );
taliswoman.c | 244 | call_out( (: set_worn_by(0), move( "/room/rubbish" ) :), 1 );
taliswoman.c | 247 | add_property( var, val, tim );
locksmith.c | 42 | set_savefile(SAVE + "glodson_killers");
locksmith.c | 43 | set_price(20000);
locksmith.c | 44 | set_currency_region("Ankh-Morpork");
locksmith.c | 45 | set_domain("/d/am/");
locksmith.c | 62 | save_killers();
locksmith.c | 63 | load_killers();
locksmith.c | 64 | remove_killer(string name);
locksmith.c | 65 | clear_false_client();
locksmith.c | 66 | payment_timeout();
locksmith.c | 67 | check_owner();
locksmith.c | 68 | unlock(object door);
locksmith.c | 69 | get_price();
locksmith.c | 70 | calc_price();
locksmith.c | 71 | generic_responses();
locksmith.c | 72 | go_back();
locksmith.c | 73 | unlock_all( string path );
locksmith.c | 74 | delay_opening( string env );
locksmith.c | 75 | finish_opening( string path, string env );
locksmith.c | 78 | confirmation(string response, object player);
locksmith.c | 79 | free_for_hire();
locksmith.c | 80 | query_client();
locksmith.c | 81 | move_recording();
locksmith.c | 82 | query_killers();
locksmith.c | 83 | query_responses();
locksmith.c | 84 | query_domain();
locksmith.c | 85 | query_last_room();
locksmith.c | 88 | set_savefile(string file);
locksmith.c | 89 | set_price(int price);
locksmith.c | 90 | set_currency_region(string region);
locksmith.c | 91 | set_responses(string *responses);
locksmith.c | 92 | set_domain(string domain);
locksmith.c | 95 | do_hire( int all );
locksmith.c | 96 | do_pay();
locksmith.c | 97 | do_ask(string exit);
locksmith.c | 116 | generic_responses();
locksmith.c | 118 | create();
locksmith.c | 121 | this_object()->setup();
locksmith.c | 122 | add_enter_commands("#move_recording");
locksmith.c | 128 | init();
locksmith.c | 131 | do_hire( 0 ) :) );
locksmith.c | 134 | do_hire( 1 ) :) );
locksmith.c | 135 | this_player()->add_command("pay", this_object(), "<direct>");
locksmith.c | 139 | do_ask($4[2]) :));
locksmith.c | 140 | this_player()->add_command("confirm", this_object(), "");
locksmith.c | 148 | clear_false_client();
locksmith.c | 162 | set_move_after(60, 60);
locksmith.c | 182 | environment(this_object());
locksmith.c | 185 | call_out("dest_me", 5);
locksmith.c | 193 | base_name(room);
locksmith.c | 196 | do_command("sayto " + _client + " " + _responses[11]);
locksmith.c | 197 | go_back();
locksmith.c | 244 | do_command("nod");
locksmith.c | 245 | do_command("follow " + player->query_name());
locksmith.c | 249 | do_command("sayto " + player->query_name() + " " + _responses[0]);
locksmith.c | 253 | do_command("sayto " + player->query_name() + " " + _responses[1]);
locksmith.c | 258 | do_command("sayto " + player->query_name() + " " + _responses[2]);
locksmith.c | 262 | base_name(environment(this_object())),_door->query_dest());
locksmith.c | 265 | queue_command("emote eyes the lock on the door.", 1);
locksmith.c | 266 | queue_command("emote fiddles around on the lock with some wires.", 5);
locksmith.c | 267 | queue_command("emote seems satisfied.", 5);
locksmith.c | 268 | unlock(_door);
locksmith.c | 270 | queue_command("sayto " + player->query_name() + " " + _responses[3], 2);
locksmith.c | 275 | base_name(environment(this_object())), _door->query_dest());
locksmith.c | 278 | queue_command("emote eyes the lock on the door.", 1);
locksmith.c | 279 | queue_command("emote fiddles around on the lock with some wires.", 5);
locksmith.c | 280 | queue_command("'Stand back and wait for me.", 5 );
locksmith.c | 282 | query_objective() + ".", 2 );
locksmith.c | 283 | delay_opening( base_name( environment( this_object() ) ) );
locksmith.c | 286 | free_for_hire();
locksmith.c | 287 | go_back();
locksmith.c | 311 | load_killers();
locksmith.c | 396 | do_command("sayto " + this_player()->query_name() + " " + _responses[4]);
locksmith.c | 397 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 405 | do_command("nod " + this_player()->query_name());
locksmith.c | 406 | do_command("follow " + this_player()->query_name());
locksmith.c | 407 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
locksmith.c | 412 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 417 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 421 | this_player()->query_name();
locksmith.c | 431 | get_price() + " up front.", 2);
locksmith.c | 432 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
locksmith.c | 433 | call_out((: payment_timeout() :), 60);
locksmith.c | 454 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 459 | do_command("sayto " + this_player()->query_name() + " " + _responses[7]);
locksmith.c | 460 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 467 | free_for_hire();
locksmith.c | 468 | this_player()->add_failed_mess(this_object(), "", ({ }));
locksmith.c | 474 | set_move_after(1200, 0);
locksmith.c | 475 | do_command("emote puts the money into a pocket.");
locksmith.c | 476 | do_command("whisper " + this_player()->query_name() + " " + _responses[10]);
locksmith.c | 477 | init_command("follow " + this_player()->query_name(), 1);
locksmith.c | 478 | this_player()->add_succeeded_mess(this_object(), "$N pay$s $D.\n", ({ }));
locksmith.c | 482 | ctime(time()), _client, query_short(), get_price() );
locksmith.c | 484 | remove_killer(_client);
locksmith.c | 494 | environment(this_object());
locksmith.c | 506 | do_command("sayto " + this_player()->query_name() + " " + _responses[1]);
locksmith.c | 512 | do_command("unfollow " + this_player()->query_name());
locksmith.c | 513 | this_player()->find_abs(exit);
locksmith.c | 517 | do_command("follow " + this_player()->query_name());
locksmith.c | 535 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
locksmith.c | 536 | tell_object(this_player(), "[y]es/[n]o: ");
locksmith.c | 537 | input_to("confirmation", 0, this_player());
locksmith.c | 547 | do_command("sayto " + file_name(from) + " You have to pay me.");
locksmith.c | 548 | do_command("give coins to " + file_name(from));
locksmith.c | 551 | do_command("sayto " + file_name(from) + " I don't take donations.");
locksmith.c | 552 | do_command("give " + file_name(ob) + " to " + file_name(from));
locksmith.c | 564 | unguarded((: write_file($(_savefile), "--- no killers ---", 1) :));
locksmith.c | 570 | unguarded((: write_file($(_savefile), $(killerstring), 1) :));
locksmith.c | 584 | unguarded((: read_file($(_savefile)) :));
locksmith.c | 598 | query_name() });
locksmith.c | 601 | save_killers();
locksmith.c | 603 | do_death(killer, weapon, attack);
locksmith.c | 605 | do_death(killer, weapon);
locksmith.c | 607 | do_death(killer);
locksmith.c | 608 | do_death();
locksmith.c | 616 | member_array(name, _killers);
locksmith.c | 633 | free_for_hire();
locksmith.c | 640 | free_for_hire();
locksmith.c | 646 | query_dest();
locksmith.c | 655 | set_unlocked();
locksmith.c | 656 | event( load_object( door->query_dest() ), "save");
locksmith.c | 657 | event( environment(), "save");
locksmith.c | 693 | do_command(room->query_exits()[random(sizeof(room->query_exits()))]);
locksmith.c | 696 | member_array(_last_room, room->query_dest_dir());
locksmith.c | 698 | move(_last_room, "$N walk$s in.", "$N walk$s away.");
locksmith.c | 708 | do_command(room->query_dest_dir()[i-1]);
locksmith.c | 735 | get_dir( path + "*.c" );
locksmith.c | 742 | load_object( path + file );
locksmith.c | 746 | set_unlocked();
locksmith.c | 747 | event( room, "save" );
locksmith.c | 756 | explode( env, "/" );
locksmith.c | 758 | implode( path_bits, "/" );
locksmith.c | 759 | move( "/room/void" );
locksmith.c | 760 | call_out( "finish_opening", 30, path, env );
locksmith.c | 765 | unlock_all( path );
locksmith.c | 769 | ctime(time()), _client, query_short(), path );
locksmith.c | 773 | free_for_hire();
locksmith.c | 774 | go_back();
test_npc.c | 9 | set_name("fluff");
test_npc.c | 10 | set_short("bit of fluff");
test_npc.c | 11 | set_long("A small bit of fluff.");
test_npc.c | 12 | set_race("human");
test_npc.c | 13 | set_guild("warrior");
test_npc.c | 14 | set_level(10);
test_npc.c | 16 | add_goal_to_npc(this_object(), ([ ]), 100);
base.c | 24 | setup();
base.c | 55 | tell_creator("pinkfish", "Adding event hook for %O\n", name);
base.c | 56 | add_goal_event(base_name(this_object()), name);
base.c | 60 | add_goal_event(base_name(this_object()), name);
base.c | 63 | initialise_plans(npc, goal_name, control->data);
base.c | 106 | tell_creator("pinkfish", "Adding goal %O to npc(%O).\n", base_name(this_object()), stuff);
base.c | 110 | base_name(this_object());
base.c | 111 | new(class goal_control);
base.c | 115 | create_goal_data(npc, goal_name, stuff);
base.c | 117 | add_goal(goal_name, frog);
base.c | 170 | sizeof(control->extra_plans[event]);
base.c | 200 | sizeof(_default_plans[event]);
stay_alive.c | 14 | create();
stay_alive.c | 16 | set_default_priority(GOAL_HIGH_PRIORITY);
stay_alive_basic.c | 18 | set_default_priority(GOAL_HIGH_PRIORITY);
stay_alive_basic.c | 49 | tell_creator("pinkfish", "Initialise_plans(%O, %O, %O)\n", npc, goal_name, wimpy);
get_drunk.c | 15 | set_default_priority(GOAL_LOW_PRIORITY);
get_drunk.c | 46 | tell_creator("pinkfish", "Initialise_plans(%O, %O, %O)\n", npc, goal_name, wimpy);
owned.c | 22 | query_name();
owned.c | 35 | find_player(_owner);
owned.c | 45 | query_owner();
base.c | 18 | setup();
base.c | 109 | map_delete(_hooked_events, event);
base.c | 124 | evaluate(_hooked_events[event], npc, plan_data, event, data);
run_away.c | 20 | set_sutability(PLAN_MEDIUM_SUTABILITY);
run_away.c | 21 | add_hooked_event(EVENT_MOVED, (: moved_event :));
run_away.c | 29 | environment($2) :), npc);
run_away.c | 30 | sizeof(attackers);
run_away.c | 37 | run_away();
run_away.c | 38 | remove_plan(base_name(this_object()));
run_away.c | 50 | tell_creator("pinkfish", "Precondition!\n");
run_away.c | 58 | tell_creator("pinkfish", sprintf("%O: %O, %O\n", event, goal, plan_info));
run_away.c | 59 | query_hp() * 100) / npc->query_max_hp();
run_away.c | 73 | being_attacked(npc);
run_away.c | 86 | run_away();
alignment.c | 63 | floor( range / 10 );
alignment.c | 65 | random( TOTAL_CHANCE );
alignment.c | 101 | random( section_width );
standard.c | 25 | create();
standard.c | 36 | set_max_gp( 50 + (int)thing->query_skill_bonus( gp_skill ) );
standard.c | 61 | delete(commands, i, 1);
standard.c | 66 | log_file("BAD_COMMANDS", "do_command() called on /std/guilds/standard.c\n");
standard.c | 86 | delete(spells, i, 2);
standard.c | 96 | return (int)call_other(spells[i+1][0], spells[i+1][1], bing);
standard.c | 121 | sizeof(spells);
standard.c | 123 | add_spell(spells[i], spells[i+1][0], spells[i+1][1]);
standard.c | 129 | sizeof(commands);
standard.c | 131 | add_known_command(commands[i]);
standard.c | 145 | this_player()->query_inc_rates();
standard.c | 146 | adjust_gp( rates[ 0 ] );
standard.c | 147 | adjust_hp( rates[ 1 ] );
standard.c | 152 | call_out( "set_new_level", 1, ({ thing, level, guild }) );
standard.c | 160 | sizeof( skills );
standard.c | 161 | if(level - thing->query_skill(skills[i]) >
standard.c | 162 | add_skill_level(skills[i], level - thing->query_skill(skills[i]));
standard.c | 164 | query_skill_stat(skills[i]);
standard.c | 183 | add_skill_level("fighting", level / 4 );
standard.c | 184 | add_skill_level("other", level / 4 );
standard.c | 188 | add_skill_level("other.health", level);
standard.c | 191 | add_skill_level("other.health", (level * 3) / 4);
standard.c | 194 | add_skill_level("other.health", level / 2);
standard.c | 196 | add_skill_level("other.perception", level / 3);
standard.c | 199 | adjust_primaries( thing, level );
standard.c | 210 | adjust_con( -6 + random( 3 ) );
standard.c | 211 | adjust_dex( -6 + random( 3 ) );
standard.c | 212 | adjust_int( -6 + random( 3 ) );
standard.c | 213 | adjust_str( -6 + random( 3 ) );
standard.c | 214 | adjust_wis( -6 + random( 3 ) );
standard.c | 216 | random( strlen( stat_list ) );
standard.c | 219 | adjust_con( 1 );
standard.c | 222 | adjust_dex( 1 );
standard.c | 225 | adjust_int( 1 );
standard.c | 228 | adjust_str( 1 );
standard.c | 231 | adjust_wis( 1 );
standard.c | 248 | sizeof( skills );
standard.c | 249 | query_skill( skills[ i ] );
standard.c | 251 | sizeof( skills );
standard.c | 270 | if ( ( (int)thing->query_skill( "covert.stealth" ) >
standard.c | 275 | add_known_command( "peek" );
standard.c | 278 | if ( ( (int)thing->query_skill( "fighting.combat.parry.held" ) >
standard.c | 282 | add_known_command( "riposte" );
warrior.c | 9 | load_file();
warrior.c | 10 | save_file();
warrior.c | 13 | set_name("warriors");
warrior.c | 14 | set_short("Warriors' Guild");
warrior.c | 26 | set_gp_skill("fighting.points");
warrior.c | 27 | set_start_pos("/d/dist/pumpkin/squash/squash5");
warrior.c | 50 | explode(skill, ".");
warrior.c | 67 | explode(skill, ".");
warrior.c | 85 | query_level( player );
rabbit.c | 12 | set_long( "This is the local language of Rabbit.\n" );
rabbit.c | 13 | set_name( "Rabbitian" );
language_inherit.c | 23 | setup();
language_inherit.c | 26 | setup();
language_inherit.c | 62 | strlen(word);
language_inherit.c | 94 | adjust_gp(-(difficulty*2));
language_inherit.c | 98 | add_property("last message:" + skill, mess, 360);
language_inherit.c | 113 | if (random(1000) >
language_inherit.c | 139 | query_skill(skill);
language_inherit.c | 141 | add_skill_level(skill, 100 - level, 1);
language_inherit.c | 143 | query_skill(skill);
language_inherit.c | 145 | add_skill_level(skill, 100 - num, 1);
language_inherit.c | 148 | query_skill(skill) - player->query_skill(skill);
language_inherit.c | 171 | set_seed(crc32(mess));
language_inherit.c | 172 | explode(mess, " ");
language_inherit.c | 173 | sizeof(bits);
language_inherit.c | 176 | random(100);
language_inherit.c | 178 | strlen(mess)*10);
language_inherit.c | 183 | do_garble(bits[i], type);
language_inherit.c | 195 | do_garble(bits[i], type);
language_inherit.c | 205 | do_garble(bits[i], type);
language_inherit.c | 219 | check_level_increase(player, max_difficulty, level, skill, mess);
language_inherit.c | 221 | implode(bits, " ");
language_inherit.c | 236 | garble_message(text, player, player, "text", skill, 0);
language_inherit.c | 238 | garble_message(text, player, player, "text", skill, 0);
language_inherit.c | 256 | destruct(this_object());
general.c | 26 | return ({ start, mess });
general.c | 30 | return ({ start, mess });
general.c | 34 | return ({ start, mess });
wommon.c | 39 | return ({ start, filter_string(mess) });
wommon.c | 43 | return ({ start, filter_string(mess) });
wommon.c | 47 | return ({ start, filter_string(mess) });
wommon.c | 51 | filter_string(str);
grunt.c | 21 | sscanf(start, "%s %s:", nam, start);
grunt.c | 37 | return ({ nam+".", "" });
master.c | 26 | capitalize(DOMAIN);
master.c | 32 | check_permission(euid, path, mask);
master.c | 43 | valid_read(string *path, string euid, string funct);
master.c | 45 | valid_write(string *path, string euid, string funct);
base_master.c | 79 | query_lord();
base_master.c | 80 | query_use_tracker();
base_master.c | 81 | set_use_tracker(int);
base_master.c | 89 | explode (file_name(this_object()), "/");
base_master.c | 109 | unguarded((: restore_object, file_name(this_object()) :));
base_master.c | 124 | unguarded((: save_object, file_name(this_object()) :));
base_master.c | 139 | save_me();
base_master.c | 155 | map_delete(access[path], euid);
base_master.c | 157 | map_delete(access, path);
base_master.c | 158 | save_me();
base_master.c | 169 | if ((sizeof(path) >
base_master.c | 173 | implode(path, "/");
base_master.c | 174 | master()->permission_match_path(access, p);
base_master.c | 197 | return (members[euid] != 0);
base_master.c | 213 | if ((sizeof(path) >
base_master.c | 217 | return (members[euid] != 0);
base_master.c | 222 | destruct(this_object());
base_master.c | 231 | previous_object(-1);
base_master.c | 232 | sizeof(obs);
base_master.c | 257 | save_me();
base_master.c | 271 | m_delete(members, name);
base_master.c | 272 | member_array(name, deputies);
base_master.c | 276 | save_me();
base_master.c | 292 | save_me();
base_master.c | 305 | member_array(name, deputies);
base_master.c | 309 | save_me();
base_master.c | 325 | save_me();
base_master.c | 338 | map_delete( _rcsforce_allowed, creator );
base_master.c | 340 | save_me();
base_master.c | 348 | keys(members);
base_master.c | 362 | save_me();
base_master.c | 394 | query_domain());
base_master.c | 400 | query_multiple_short (proj);
base_master.c | 431 | copy(deputies);
base_master.c | 436 | copy(access);
base_master.c | 492 | map_delete (_project_cache, c);
base_master.c | 503 | save_me();
base_master.c | 523 | implode(dir[0..<i], "/");
base_master.c | 525 | while (i >= 0 && !_directory_assignments[str]);
base_master.c | 530 | return ({ query_lord() });
base_master.c | 552 | map_delete(_directory_assignments, dir);
base_master.c | 554 | save_me();
base_master.c | 567 | copy(_directory_assignments);
base_master.c | 568 | query_domain();
base_master.c | 570 | query_lord() });
base_master.c | 572 | query_lord() });
cmn_mas.c | 13 | do_list(string);
cmn_mas.c | 14 | add_creator(string);
cmn_mas.c | 15 | delete_creator(string);
cmn_mas.c | 16 | set_project(string, string);
cmn_mas.c | 20 | create();
cmn_mas.c | 23 | add_property ("no scry", 1);
cmn_mas.c | 24 | add_property ("no teleport", 1);
cmn_mas.c | 25 | add_help_file ("/doc/creator/room/commonroom");
cmn_mas.c | 28 | this_object()->setup();
cmn_mas.c | 29 | this_object()->reset();
cmn_mas.c | 34 | init();
cmn_mas.c | 35 | add_command("list", "<word'domain'>", (:do_list($4[0]):));
cmn_mas.c | 36 | add_command("list", "", (:do_list(0):));
cmn_mas.c | 37 | add_command("add", "<word'creator'>", (:add_creator($4[0]):));
cmn_mas.c | 38 | add_command("delete", "<word'creator'>" ,(:delete_creator($4[0]):));
cmn_mas.c | 40 | set_project($4[0], $4[1]):));
cmn_mas.c | 49 | get_dir("/d/");
cmn_mas.c | 56 | if(sizeof(domains) >
cmn_mas.c | 57 | write("All domains:\n");
cmn_mas.c | 60 | write("This domain:\n");
cmn_mas.c | 63 | sizeof(domains);
cmn_mas.c | 69 | query_members();
cmn_mas.c | 76 | query_num (sizeof(members)), capitalize((string)mast->query_lord()));
cmn_mas.c | 78 | sizeof(members);
cmn_mas.c | 81 | query_project(members[j]));
cmn_mas.c | 85 | this_player()->set_finish_func(0);
cmn_mas.c | 86 | this_player()->more_string(s);
cmn_mas.c | 93 | this_player()->expand_nickname(arg);
cmn_mas.c | 106 | write("Creator " + capitalize(arg) + " now added to " + _dom_name + ".\n");
cmn_mas.c | 113 | this_player()->expand_nickname(arg);
cmn_mas.c | 126 | write("Member " + capitalize(arg) + " removed from " + _dom_name + ".\n");
cmn_mas.c | 141 | this_player()->expand_nickname(arg);
cmn_mas.c | 148 | write(capitalize(arg) + "'s project set to : " + project + ".\n");
common.c | 19 | set_dom(DOMAIN);
common.c | 20 | set_light(100);
common.c | 21 | add_exit("drum", CONFIG_START_LOCATION, "door");
common.c | 22 | set_short("Common room of "+DOM_TITLE);
common.c | 29 | add_alias("chairs", "chair");
common.c | 30 | add_alias("cloths", "cloth");
common.c | 31 | add_alias("motifs", "motif");
common.c | 32 | add_alias("figurines", "figurine");
common.c | 63 | clone_object("/obj/misc/board");
common.c | 64 | set_datafile(DOMAIN);
common.c | 65 | move(this_object());
common.c | 70 | if(board) board->dest_me();
common.c | 71 | dest_me();
error_tracker_master.c | 20 | finished_count_errors( object player, int status, mixed data );
error_tracker_master.c | 42 | do_the_work();
error_tracker_master.c | 48 | unguarded( (: save_object, _save_file, 0 :) );
error_tracker_master.c | 59 | seteuid(master()->creator_file(file_name()));
error_tracker_master.c | 60 | file_name();
error_tracker_master.c | 65 | replace(file_name()[1..], "/", "_");
error_tracker_master.c | 82 | do_the_work();
error_tracker_master.c | 84 | call_out("do_the_work", nexttime - time());
error_tracker_master.c | 108 | save_me();
error_tracker_master.c | 109 | destruct(this_object());
error_tracker_master.c | 115 | destruct(this_object());
error_tracker_master.c | 135 | more_string(message);
error_tracker_master.c | 151 | return ({ "live", "playtesting", "development" });
error_tracker_master.c | 188 | real_time() - starttime);
error_tracker_master.c | 203 | filter_by_query(([ "domains" : domain ]));
error_tracker_master.c | 205 | unique_mapping( projects, (: STATUS[((class project)$1)->status] :) );
error_tracker_master.c | 206 | map_delete( status, "play" );
error_tracker_master.c | 246 | if (sizeof(_queue) >
error_tracker_master.c | 252 | dodir(dir, (: _dev_msg += ({ $1 }), iterate() :));
error_tracker_master.c | 254 | dodir(dir, (: _pt_msg += ({ $1 }), iterate() :));
error_tracker_master.c | 256 | dodir(dir, (: _messages += ({ $1 }), iterate() :));
error_tracker_master.c | 260 | query_post_message();
error_tracker_master.c | 262 | post(message);
error_tracker_master.c | 267 | call_out( "domain_customisation" , 1 );
error_tracker_master.c | 272 | query_errors_in_dirs(_queue, (: finished_count_errors :) );
error_tracker_master.c | 291 | remove_call_out("do_the_work");
error_tracker_master.c | 292 | call_out("do_the_work", period);
error_tracker_master.c | 293 | save_me();
error_tracker_master.c | 295 | real_time();
error_tracker_master.c | 296 | initialise_variables();
error_tracker_master.c | 297 | iterate();
error_tracker_master.c | 303 | this_player();
error_tracker_master.c | 304 | real_time();
error_tracker_master.c | 305 | initialise_variables();
error_tracker_master.c | 307 | iterate();
error_tracker_master.c | 317 | save_me();
error_tracker_master.c | 327 | save_me();
error_tracker_master.c | 344 | remove_call_out("do_the_work");
error_tracker_master.c | 348 | save_me();
error_tracker_master.c | 351 | do_the_work();
error_tracker_master.c | 353 | call_out("do_the_work", nexttime - time());
error_tracker_master.c | 370 | save_me();
error_tracker_master.c | 390 | if ( strsrch( path, "_pt" ) >
error_tracker_master.c | 393 | if ( strsrch( path, "_dev" ) >
error_tracker_master.c | 428 | tell_creator( player, "%O, %O\n", status, data );
error_tracker_master.c | 431 | classify_directory( direc[ "Directory" ] );
error_tracker_master.c | 466 | sort_array( keys( mdata ), 1 );
error_tracker_master.c | 467 | sort_array( keys( mdata ), (: sort_errors( $(mdata), $1, $2 ) :) );
error_tracker_master.c | 474 | master()->query_assigned_to_directory(key);
error_tracker_master.c | 495 | query_post_message();
error_tracker_master.c | 498 | this_object()->extend_error_message( copy( errors ) );
error_tracker_master.c | 501 | post(message);
error_tracker_master.c | 506 | call_out( "domain_customisation" , 1 );
loader.c | 21 | seteuid((string)"/secure/master"->creator_file("/d/"+domain+"/loader"));
loader.c | 22 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 25 | sizeof(pre_load);
loader.c | 30 | printf(domain +" pre_loading "+pre_load[i]+".\n");
loader.c | 32 | call_out("do_load", 0, pre_load[i]);
loader.c | 40 | call_other(str, "??");
loader.c | 47 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 54 | seteuid((string)"/secure/master"->creator_file("/d/"+domain+"/loader"));
loader.c | 55 | save_object("/d/" + domain + "/loader");
loader.c | 65 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 71 | delete(pre_load, i, 1);
loader.c | 72 | seteuid((string)"/secure/master"->creator_file("/d/"+domain+"/loader"));
loader.c | 73 | save_object("/d/" + domain + "/loader");
loader.c | 78 | return ({ });
loader.c | 80 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
interview_inherit.c | 20 | add_creator (string);
interview_inherit.c | 21 | do_add (string);
interview_inherit.c | 22 | do_confirm (string);
interview_inherit.c | 23 | do_flag (string, string);
interview_inherit.c | 24 | do_interview (object, string);
interview_inherit.c | 25 | do_query_text(string);
interview_inherit.c | 26 | do_list();
interview_inherit.c | 27 | do_read (string);
interview_inherit.c | 28 | flush();
interview_inherit.c | 29 | query_allowed_creators();
interview_inherit.c | 30 | query_interview();
interview_inherit.c | 31 | remove_candidate (string);
interview_inherit.c | 32 | remove_creator (string);
interview_inherit.c | 33 | remove_interviewed (string);
interview_inherit.c | 34 | set_interview_dir (string);
interview_inherit.c | 35 | set_part_two (string);
interview_inherit.c | 36 | query_part_two_required();
interview_inherit.c | 38 | set_acceptance(string);
interview_inherit.c | 39 | set_confirmation(string);
interview_inherit.c | 40 | set_rejection(string);
interview_inherit.c | 41 | set_interview (int);
interview_inherit.c | 42 | set_subject (string);
interview_inherit.c | 43 | set_interviewer(mixed);
interview_inherit.c | 44 | set_cc (string*);
interview_inherit.c | 46 | query_acceptance();
interview_inherit.c | 47 | query_applicants_text();
interview_inherit.c | 48 | query_cc();
interview_inherit.c | 49 | query_confirmation();
interview_inherit.c | 50 | query_domain();
interview_inherit.c | 51 | query_interview_dir();
interview_inherit.c | 52 | query_part_two();
interview_inherit.c | 53 | query_rejection();
interview_inherit.c | 54 | query_subject();
interview_inherit.c | 137 | unguarded ((: save_object (SAVE) :));
interview_inherit.c | 141 | unguarded ((: restore_object (SAVE) :));
interview_inherit.c | 147 | create();
interview_inherit.c | 150 | add_property ("no scry", 1);
interview_inherit.c | 151 | add_property ("no teleport", 1);
interview_inherit.c | 152 | add_help_file ("/doc/creator/room/interview_help");
interview_inherit.c | 155 | this_object()->setup();
interview_inherit.c | 156 | this_object()->reset();
interview_inherit.c | 162 | init();
interview_inherit.c | 163 | this_player()->add_command ("show", this_object(), "movie");
interview_inherit.c | 164 | this_player()->add_command ("stop", this_object(), "movie");
interview_inherit.c | 166 | do_interview ($1[0]) :));
interview_inherit.c | 168 | do_interview ($1[0], $4[1]) :));
interview_inherit.c | 170 | this_player()->add_command ("end", this_object(), "interview");
interview_inherit.c | 172 | do_add ($4[0]) :));
interview_inherit.c | 173 | this_player()->add_command ("query", this_object(), "applicants");
interview_inherit.c | 175 | query_allowed_creators () :));
interview_inherit.c | 178 | do_query_text ($4[0]) :));
interview_inherit.c | 180 | remove_candidate ($4[0]) :));
interview_inherit.c | 182 | flush() :));
interview_inherit.c | 184 | do_confirm ($4[0]) :));
interview_inherit.c | 186 | add_creator ($4[0]) :));
interview_inherit.c | 188 | remove_creator ($4[0]) :));
interview_inherit.c | 190 | do_flag ($4[0], $4[1]) :));
interview_inherit.c | 193 | do_read ($4[0]) :));
interview_inherit.c | 194 | this_player()->add_command ("list", this_object(), "interviews");
interview_inherit.c | 210 | load_object("/d/" + query_domain() + "/master");
interview_inherit.c | 253 | sprintf ("%-=*s", 79, $(text) + "\n")) :));
interview_inherit.c | 272 | write_to_file (replace (EVENTS->convert_message (mess), ({"$C$", ""})));
interview_inherit.c | 291 | call_out ("play_movie", 5, 0);
interview_inherit.c | 311 | remove_call_out ("play_movie");
interview_inherit.c | 312 | while (i != -1);
interview_inherit.c | 330 | sizeof(movie[i])] + "\n");
interview_inherit.c | 338 | call_out ("play_movie", 15, ++i);
interview_inherit.c | 363 | query_subject() + " first.\n", ({ }));
interview_inherit.c | 368 | replace (names, ({" ", ""}));
interview_inherit.c | 369 | explode (names, ",");
interview_inherit.c | 370 | tell_creator ("drakkos", "%O.\n", inter);
interview_inherit.c | 372 | find_player ($1)->query_playtester() :));
interview_inherit.c | 373 | tell_creator ("drakkos", "%O.\n", inter);
interview_inherit.c | 376 | this_player()->query_name() });
interview_inherit.c | 377 | set_subject (ob->query_name());
interview_inherit.c | 378 | set_interviewer (inter);
interview_inherit.c | 381 | query_multiple_short (inter)));
interview_inherit.c | 412 | query_subject()});
interview_inherit.c | 415 | query_subject()});
interview_inherit.c | 418 | query_subject()});
interview_inherit.c | 419 | uniq_array (interviewed);
interview_inherit.c | 420 | save();
interview_inherit.c | 423 | ctime (time())));
interview_inherit.c | 425 | set_subject (0);
interview_inherit.c | 426 | set_interviewer (0);
interview_inherit.c | 446 | write_to_file (EVENTS->convert_message (str));
interview_inherit.c | 471 | this_player()->add_failed_mess (this_object(), "No information.\n");
interview_inherit.c | 474 | tell_object (this_player(), this_object()->query_applicants_text());
interview_inherit.c | 487 | query_permitted (this_player()->query_name());
interview_inherit.c | 497 | mud_name() + " \n", ({ }));
interview_inherit.c | 507 | ctime(time()))) :));
interview_inherit.c | 520 | ctime(time()))) :));
interview_inherit.c | 531 | query_part_two(), 0, 0);
interview_inherit.c | 532 | save();
interview_inherit.c | 550 | allocate (sizeof (submitted));
interview_inherit.c | 554 | sizeof (submitted);
interview_inherit.c | 568 | capitalize (query_domain()), query_multiple_short (candidates));
interview_inherit.c | 579 | capitalize (query_domain()), query_multiple_short (temp));
interview_inherit.c | 586 | capitalize (query_domain()), query_multiple_short (temp));
interview_inherit.c | 594 | capitalize (query_domain()), query_multiple_short (interviewed));
interview_inherit.c | 601 | capitalize (query_domain()), query_multiple_short (accepted));
interview_inherit.c | 607 | capitalize (query_domain()), query_multiple_short (rejected));
interview_inherit.c | 711 | save();
interview_inherit.c | 738 | mud_name() + " \n", ({ }));
interview_inherit.c | 760 | mud_name() + " \n", ({ }));
interview_inherit.c | 782 | mud_name() + " \n", ({ }));
interview_inherit.c | 831 | mud_name() + " \n", ({ }));
interview_inherit.c | 855 | query_cc(), query_confirmation(), 0, 0);
interview_inherit.c | 856 | save();
interview_inherit.c | 915 | query_domain(), LORD);
interview_inherit.c | 923 | query_domain(), LORD);
interview_inherit.c | 1021 | copy (_allowed_creators);
interview_inherit.c | 1055 | find_object ("/d/" + query_domain() + "/master");
interview_inherit.c | 1068 | add_permitted_creator (name);
interview_inherit.c | 1069 | save();
interview_inherit.c | 1084 | find_object ("/d/" + query_domain() + "/master");
interview_inherit.c | 1092 | remove_permitted_creator (name);
interview_inherit.c | 1093 | save();
interview_inherit.c | 1117 | query_permitted_creators())));
interview_inherit.c | 1130 | unguarded ((: read_file (_filename) :));
interview_inherit.c | 1139 | query_domain(), LORD);
interview_inherit.c | 1151 | printf ("No file given for part two of application.  Aborting.\n");
interview_inherit.c | 1156 | printf ("File given for set_part_two() does not exist.  No file set.\n");
interview_inherit.c | 1188 | printf ("No directory given for interviews.  Aborting.\n");
interview_inherit.c | 1212 | query_confirmation();
interview_inherit.c | 1215 | query_acceptance();
interview_inherit.c | 1218 | query_rejection();
interview_inherit.c | 1226 | tell_object (this_player(), temp);
interview_inherit.c | 1253 | query_cc(), query_acceptance(), 0, 0);
interview_inherit.c | 1262 | query_domain()), query_cc(), query_rejection(), 0, 0);
interview_inherit.c | 1271 | save();
interview_inherit.c | 1274 | ctime(time()))) :));
interview_inherit.c | 1309 | query_domain(), LORD);
interview_inherit.c | 1331 | query_domain(), LORD);
interview_inherit.c | 1362 | this_player()->more_string (unguarded ((: read_file ($(path)) :)));
interview_inherit.c | 1373 | implode (_cc, ",");
interview_inherit.c | 1395 | get_dir (query_interview_dir());
interview_inherit.c | 1399 | map (list, (: capitalize ($1) :));
interview_inherit.c | 1400 | replace (query_multiple_short (list), ({".txt", ""}));
interview_inherit.c | 1413 | uniq_array (candidates + interviewed + submitted + accepted + rejected);
error_tracker.c | 5 | set_domain("klatch");
error_tracker.c | 6 | set_name("klatchian error tracker");
error_tracker.c | 7 | set_other_dirs(({ }));
error_tracker.c | 8 | set_period(604800);
error_tracker.c | 9 | create();
snowball.c | 36 | set_strength( int number );
snowball.c | 39 | set_name( "snowball" );
snowball.c | 40 | add_alias( "ball" );
snowball.c | 41 | add_adjective( "snow" );
snowball.c | 42 | set_strength( 99 );
snowball.c | 43 | set_heart_beat( 1 );
snowball.c | 66 | add_command( "throw", "<direct:object> {at|to} <indirect:object>" );
snowball.c | 72 | set_heart_beat( 0 );
snowball.c | 73 | move( "/room/rubbish" );
snowball.c | 82 | environment(ob);
snowball.c | 96 | find_person(obs[0]);
snowball.c | 108 | add_effect( "/std/effects/external/snowball", strength );
snowball.c | 121 | add_effect( "/std/effects/external/snowball", strength );
snowball.c | 136 | add_succeeded_mess( "$N throw$s $D at $I.\n", ({ obs[ 0 ] }) );
snowball.c | 138 | move( "/room/rubbish" );
snowball.c | 150 | init_dynamic_arg( map[ "::" ] );
snowman.c | 30 | reset_get();
snowman.c | 32 | call_out("die",400);
snowman.c | 42 | set_name(type);
snowman.c | 43 | set_short(type);
snowman.c | 46 | add_extra_look( this_object() );
snowman.c | 57 | find_call_out( _call_out_handle );
snowman.c | 59 | debug_printf( "time left is %d\n", time_left );
snowman.c | 89 | the_short() + " $V$0=melts,melt$V$ into the " + noun + ".\n");
snowman.c | 92 | dest_me();
weather_room.c | 17 | set_short("The weather room");
weather_room.c | 23 | set_light(1);
weather_room.c | 24 | seteuid("pinkfish");
weather_room.c | 25 | add_property("inside");
weather_room.c | 26 | add_exit("pinkfish","d/Fish/pinkfish/workroom");
weather_room.c | 44 | init();
weather_room.c | 45 | add_action("pull","pull");
weather_room.c | 46 | add_action("push","push");
weather_room.c | 59 | notify_fail("You have to pull a lever.\n");
weather_room.c | 62 | sizeof(leverarr);
weather_room.c | 70 | notify_fail("You need to choose and existing lever");
weather_room.c | 74 | present("weather",this_object());
weather_room.c | 76 | notify_fail("Opps the weather controller does not exist.\n");
weather_room.c | 79 | sscanf(lever[1],"%s#%s",type,rand);
weather_room.c | 80 | write(type);
weather_room.c | 81 | this_player()->print_object(call_other(weather,rand));
weather_room.c | 94 | notify_fail("You must push an existing lever.\n");
weather_room.c | 97 | sizeof(leverarr);
weather_room.c | 104 | notify_fail("An existing lever could be usefull...\n");
weather_room.c | 108 | write("You huff and you puff, but you just cant push that lever.\n");
weather.c | 45 | distance(mixed *co_ord1,mixed *co_ord);
weather.c | 46 | cloud_index(object env);
weather.c | 47 | rain_index(object env);
weather.c | 48 | temperature_index(object env);
weather.c | 49 | cloud_string(object env);
weather.c | 50 | rain_string(object env);
weather.c | 51 | temperature_string(object env);
weather.c | 54 | set_name("weather");
weather.c | 55 | set_short("weather controller extrodinare");
weather.c | 56 | set_long("The weather controller, at least this one is always right!\n");
weather.c | 62 | restore_object(FILE_NAME);
weather.c | 63 | call_out("update_low",SPEED);
weather.c | 64 | move("bing");
weather.c | 69 | move(HOME);
weather.c | 80 | distance((mixed *)env->query_co_ord(), ({ 0, 0, 0, }))/100);
weather.c | 118 | load_object(CONFIG_START_LOCATION);
weather.c | 119 | find_object(CONFIG_START_LOCATION);
weather.c | 123 | distance((mixed *)env->query_co_ord(), ({ 0, 0, 0, }))/100);
weather.c | 143 | cloud_index(env);
weather.c | 155 | distance((mixed *)env->query_co_ord(), ({ 0, 0, 0, }))/100);
weather.c | 168 | rain_string(env);
weather.c | 174 | cloud_index(env);
weather.c | 177 | rain_index(env);
weather.c | 189 | cloud_index(env);
weather.c | 192 | rain_index(env);
weather.c | 202 | if ((temperature_index(env)/(100/7))>
weather.c | 203 | cloud_index(env);
weather.c | 206 | cloud_index(env);
weather.c | 218 | cloud_index(env);
weather.c | 219 | rain_index(env);
weather.c | 222 | temperature_index(env)/(100/7);
weather.c | 250 | temperature_index(env);
weather.c | 303 | sizeof(coldarr);
weather.c | 304 | distance((mixed *)env->query_co_ord(), coldarr[i]) % (MAX_DIST*2));
weather.c | 305 | sizeof(coldarr);
weather.c | 311 | query_co_ord();
weather.c | 314 | return (off + (timeofyear - (YEAR/2)) + (timeofday - (DAY/2)) + co_ord[2]);
weather.c | 322 | sizeof(cloudarr);
weather.c | 323 | distance((mixed *)env->query_co_ord(), cloudarr[i]) % (MAX_DIST*2));
weather.c | 324 | sizeof(cloudarr);
weather.c | 330 | return (off + (timeofyear - (YEAR/2)));
weather.c | 338 | sizeof(rainarr);
weather.c | 339 | distance((mixed *)env->query_co_ord(), rainarr[i]) % (MAX_DIST*2));
weather.c | 340 | sizeof(rainarr);
weather.c | 363 | save_object(FILE_NAME);
weather.c | 365 | sizeof(rainarr);
weather.c | 371 | sizeof(cloudarr);
weather.c | 377 | sizeof(coldarr);
weather.c | 388 | call_out("update_low",SPEED);
weather.c | 392 | save_object(FILE_NAME);
weather.c | 393 | dest_me();
skills.c | 33 | calc_bonus( int lvl, string skill, int use_base_stats );
skills.c | 34 | stat_modify( int bonus, string skill, int use_base_stats );
skills.c | 37 | convert_skills(mixed *skills, string path);
skills.c | 38 | query_skill(string skill);
skills.c | 48 | query_skills() { return copy( new_skills );
skills.c | 50 | calc_level(string *path);
skills.c | 58 | time() ]);
skills.c | 69 | undefinedp(new_skills[skill]);
skills.c | 78 | query_bonus_cache() { return copy(_bonus_cache);
skills.c | 83 | query_stat_cache() { return copy(_stat_cache);
skills.c | 95 | this_object()->stats_to_zap();
skills.c | 100 | call_out( "reset_all2", 1 );
skills.c | 107 | map_delete( _stat_cache, word );
skills.c | 110 | this_object()->query_race_ob();
skills.c | 112 | set_unarmed_attacks( this_object() );
skills.c | 156 | set_control( ({ this_object(), skill }) );
skills.c | 158 | stat_modify( _bonus_cache[ skill ], skill, use_base_stats );
skills.c | 159 | calc_bonus( query_skill(skill), skill, use_base_stats );
skills.c | 162 | query_skill(skill);
skills.c | 163 | this_object()->query_guild_ob();
skills.c | 164 | this_object()->query_race_ob();
skills.c | 166 | query_skill_bonus(lvl, skill);
skills.c | 169 | query_skill_bonus(lvl, skill);
skills.c | 171 | calc_bonus( lvl + tmp, skill, use_base_stats );
skills.c | 194 | set_control( ({ this_object(), skill }) );
skills.c | 198 | query_skill_tree(skill);
skills.c | 200 | sizeof(path);
skills.c | 218 | query_all_children( branch );
skills.c | 221 | return ([ ]);
skills.c | 223 | allocate_mapping( skills, (: query_skill( $1 ) :) );
skills.c | 235 | reset_eval_cost();
skills.c | 237 | query_immediate_children(skill);
skills.c | 238 | sizeof(same);
skills.c | 242 | flatten_it(same[i]);
skills.c | 245 | map_delete(new_skills, skill);
skills.c | 254 | time() ]);
skills.c | 265 | base_name(previous_object()));
skills.c | 269 | this_object()->get_history();
skills.c | 280 | this_object()->query_queued_commands();
skills.c | 282 | if(last > 0 && sizeof(history[last]) >
skills.c | 301 | time();
skills.c | 304 | base_name(exp), 2 });
skills.c | 309 | environment(), 2 });
skills.c | 323 | random(this_object()->query_skill(skill));
skills.c | 341 | explode(skill, ".");
skills.c | 343 | explode(_last_info["skill"][0], ".");
skills.c | 358 | time() - _last_info["time"]), delay);
skills.c | 365 | time();
skills.c | 368 | base_name(exp), 2 });
skills.c | 373 | environment(), 2 });
skills.c | 384 | time();
skills.c | 387 | base_name(exp), 2 });
skills.c | 392 | environment(), 2 });
skills.c | 412 | reset_eval_cost();
skills.c | 424 | query_related_skills(skill);
skills.c | 429 | explode(skill, ".");
skills.c | 438 | if (sizeof(bits) >
skills.c | 447 | sizeof(bits);
skills.c | 449 | query_immediate_children(implode(bits[0..i], "."));
skills.c | 450 | sizeof( same_level );
skills.c | 452 | map_delete( _bonus_cache, same_level[ j ] );
skills.c | 462 | sizeof(recursive_skills);
skills.c | 469 | map_delete(_bonus_cache, recursive_skills[i]);
skills.c | 481 | query_skill_tree(skill);
skills.c | 482 | sizeof(tree);
skills.c | 485 | query_immediate_children(tree[i]);
skills.c | 488 | sizeof(same_level);
skills.c | 492 | map_delete( _bonus_cache, same_level[ j ] );
skills.c | 496 | sizeof(same_level);
skills.c | 497 | map_delete( _bonus_cache, tree[ i ] );
skills.c | 506 | this_object() );
skills.c | 507 | skills_advanced( this_object(), skill, new_skills[ skill ] );
skills.c | 513 | previous_object();
skills.c | 519 | base_name( exp ), skill, new_skills[ skill ] );
skills.c | 525 | call_out( "reset_all", 1 );
skills.c | 529 | this_object()->save();
skills.c | 551 | query_skill_stat(skill);
skills.c | 556 | this_object()->query_real_con();
skills.c | 558 | this_object()->query_con();
skills.c | 562 | this_object()->query_real_dex();
skills.c | 564 | this_object()->query_dex();
skills.c | 568 | this_object()->query_real_int();
skills.c | 570 | this_object()->query_int();
skills.c | 574 | this_object()->query_real_str();
skills.c | 576 | this_object()->query_str();
skills.c | 581 | this_object()->query_real_wis();
skills.c | 583 | this_object()->query_wis();
skills.c | 606 | strlen( stat_bonus );
skills.c | 609 | to_int(lvl + ( lvl * bonus ));
skills.c | 646 | stat_modify( lvl, skill, use_base_stats );
skills.c | 657 | return (query_skill_bonus(str, 0) + mod >= random(200));
skills.c | 677 | query_teach_offer() { return copy(_teach_offer);
skills.c | 700 | this_object();
skills.c | 706 | this_object(), bing[O_OTHER_PER] }));
skills.c | 708 | this_object()->adjust_time_left(-((int)this_object()->query_time_left()));
skills.c | 709 | this_object()->set_interupt_command(0);
skills.c | 722 | write("Something has gone wrong. :(\n");
skills.c | 727 | adjust_xp(bing[O_XP]/10);
skills.c | 729 | this_object()->adjust_xp(-bing[O_XP]);
skills.c | 730 | add_skill_level(bing[O_SKILL], bing[O_NUM], bing[O_XP]);
skills.c | 741 | this_object(), bing[O_OTHER_PER] }));
skills.c | 747 | this_object(), bing[O_OTHER_PER] }));
nationality.c | 53 | new(class living_nationality);
nationality.c | 66 | new(class living_nationality);
nationality.c | 79 | new(class living_nationality);
nationality.c | 91 | query_name();
nationality.c | 103 | query_look_description(this_object(), looker);
nationality.c | 115 | query_region_accent_ob(_nationality_data->region);
nationality.c | 125 | query_start_location(_nationality_data->region);
holding.c | 25 | set_hold(object ob, int location, int limbs);
holding.c | 26 | set_unhold(object ob);
holding.c | 27 | sub_hold(object ob, int pos, int first);
holding.c | 48 | this_object()->query_race_ob();
holding.c | 52 | return ({ });
holding.c | 54 | query_limbs();
holding.c | 57 | allocate(sizeof(limbs));
holding.c | 63 | copy(_using);
holding.c | 81 | query_limbs();
holding.c | 84 | map(_using, (: $1 ? (environment($1) == this_object()? $1 : 0) : 0 :));
holding.c | 85 | copy(_using);
holding.c | 100 | query_holding();
holding.c | 101 | query_limbs();
holding.c | 102 | sizeof(holding);
holding.c | 121 | query_limbs();
holding.c | 124 | sizeof(filter(_using, (: !$1 || environment($1) != this_object() :)));
holding.c | 139 | filter(_weapons, (: $1 || environment($1) != this_object() :));
holding.c | 140 | filter(_weapons, (: $1 :));
holding.c | 160 | return ({ });
holding.c | 163 | return ({ });
holding.c | 167 | return ({ });
holding.c | 170 | find_member(ob, _using);
holding.c | 173 | filter(_weapons, (: $1 != $(ob) :));
holding.c | 177 | this_object()->remove_armour(ob);
holding.c | 180 | map(_using, (: $1 == $(ob) ? 0 : $1 :));
holding.c | 182 | this_object()->do_burden_call();
holding.c | 220 | debug_printf("Bad environment");
holding.c | 221 | return ({ });
holding.c | 224 | sizeof(this_player()->query_limbs());
holding.c | 226 | query_limbs();
holding.c | 237 | query_no_limbs();
holding.c | 239 | debug_printf("Too many limbs");
holding.c | 240 | return ({ });
holding.c | 243 | find_member(0, _using);
holding.c | 246 | return ({ });
holding.c | 255 | return ({ });
holding.c | 258 | sub_hold(ob, pos, 1);
holding.c | 263 | return ({ });
holding.c | 273 | find_member(0, _using);
holding.c | 279 | set_unhold(ob);
holding.c | 280 | return ({ });
holding.c | 283 | sub_hold(ob, free[temp], 0);
holding.c | 293 | set_unhold(ob);
holding.c | 294 | return ({ });
holding.c | 296 | this_object()->do_burden_call();
holding.c | 321 | set_holder(this_object(), pos);
response_mon.c | 41 | match(string str, mixed str2);
response_mon.c | 47 | new(class response_data);
response_mon.c | 85 | this_object()->query_property("respon mon debug");
response_mon.c | 95 | this_object()->add_property("respon mon debug", flag);
response_mon.c | 156 | previous_object(), previous_object()->query_name());
response_mon.c | 158 | keys(map);
response_mon.c | 159 | allocate(sizeof(old_keys) * 2);
response_mon.c | 160 | for (i = sizeof(old_keys);
response_mon.c | 216 | add_respond_to_with(({ "@say", "bing" }), "'Yes!  Bing bing bing!");
response_mon.c | 227 | add_respond_to_with(({ "@say", "bing" }), "#rabbit");
response_mon.c | 231 | do_command("'something wild for " + $1->a_short()) :));
response_mon.c | 295 | sizeof( words );
response_mon.c | 296 | implode(words, " ");
response_mon.c | 297 | sizeof( _respond_to_with );
response_mon.c | 302 | if ( arrayp( data ) && sizeof( data ) >
response_mon.c | 315 | map( data[1], (: $(extra) + " " + $1 :) );
response_mon.c | 321 | tell_creator( "taffyd", "%O, %O\n", word_str, patterns );
response_mon.c | 325 | tell_creator( "taffyd", "%O\n", pattern );
response_mon.c | 334 | sizeof(_respond_to_with[format_index]);
response_mon.c | 355 | return (member_array(str, format) != -1);
response_mon.c | 376 | strlen(str);
response_mon.c | 403 | query_short() })));
response_mon.c | 405 | command( str );
response_mon.c | 424 | exec_response(rep[random(sizeof(rep))], per, mess);
response_mon.c | 428 | evaluate(rep, per, mess);
response_mon.c | 431 | explode(rep[1..], "#");
response_mon.c | 432 | if (sizeof(rabbit) >
response_mon.c | 436 | call_out(rabbit[0], 0, per, mess);
response_mon.c | 439 | call_out("senddstr", 0, rep, per);
response_mon.c | 449 | lower_case(mess);
response_mon.c | 451 | remove_read_marks(mess);
response_mon.c | 454 | tell_object(per, "Parsing the text: " + implode(extra, " ") + " " + mess + "\n");
response_mon.c | 456 | check_sub_sequence(extra + explode(mess, " "));
response_mon.c | 458 | tell_object(per, sprintf("Responding with %O\n", response));
response_mon.c | 463 | exec_response(response, per, mess);
response_mon.c | 490 | time();
response_mon.c | 495 | time();
response_mon.c | 510 | call_out((: do_delay_thingy($1, $2, $3) :), 2, extra, mess, per);
response_mon.c | 538 | query_language_spoken_skill(lang);
response_mon.c | 544 | do_response(({ "@sayto" }), mess, per);
response_mon.c | 563 | query_language_spoken_skill(lang);
response_mon.c | 570 | do_response(({ "@say" }), mess, per);
response_mon.c | 577 | previous_object(2);
response_mon.c | 593 | this_object()->convert_message( mess );
response_mon.c | 598 | do_response(({ "@" + verb, "#" + last, at->query_name() }), mess, per);
response_mon.c | 600 | do_response(({ "@" + verb, "#" + last }), mess, per);
response_mon.c | 620 | query_language_spoken_skill(lang);
response_mon.c | 632 | this_object()->convert_message( mess );
health.c | 14 | adjust_xp( int number, int shared );
health.c | 33 | allocate( D_SIZEOF );
health.c | 47 | call_out( "do_death", 0, attacker );
health.c | 54 | this_object()->query_hp();
health.c | 63 | call_out("run_away", 0) });
health.c | 75 | this_object()->query_hp();
health.c | 84 | this_object());
health.c | 85 | this_object() });
health.c | 86 | event_surrender(this_object(), attackers);
health.c | 88 | clone_object(SURRENDER_SHADOW);
health.c | 90 | setup_shadow(this_object(), attackers);
health.c | 126 | time();
health.c | 127 | call_out("do_death", 0, attacker, weapon, attack);
health.c | 129 | sizeof(runaway_callout_handles);
health.c | 130 | remove_call_out( runaway_callout_handles[i] );
health.c | 137 | if(this_object()->query_surrender() >
health.c | 139 | check_wimpy();
health.c | 143 | check_surrender();
health.c | 146 | check_wimpy();
health.c | 219 | call_out( "clear_gp_info", 1 );
health.c | 266 | this_object()->query_skill(which +".points");
health.c | 284 | this_object()->query_guild_ob();
health.c | 305 | query_verb();
health.c | 307 | this_object()->query_current_cmd();
health.c | 326 | random(bits[1]) + 1);
health.c | 329 | time(), bits[1]+1, environment() });
health.c | 331 | time(), 1, environment() });
health.c | 335 | adjust_xp(number, 1);
health.c | 412 | this_object()->query_con();
health.c | 413 | sizeof( drink_info );
health.c | 418 | if(this_object()->query_personal_temp() >
health.c | 419 | this_object()->adjust_personal_temp(-(delta/3));
health.c | 421 | this_object()->adjust_personal_temp(delta/3);
carrying.c | 68 | query_wearing();
carrying.c | 88 | this_object()->query_wearing();
carrying.c | 90 | query_type();
carrying.c | 97 | query_short() );
carrying.c | 102 | return ({ types, stuff });
carrying.c | 125 | query_wearing();
carrying.c | 129 | query_types_worn( worn );
carrying.c | 133 | sizeof(worn);
carrying.c | 137 | query_clothing_hiding( fluff );
carrying.c | 171 | query_wearing_hidden( this_player(), things);
carrying.c | 173 | filter(hidden, (: $1->query_visible( this_player() ) :));
carrying.c | 184 | query_clothing_depth($1->query_type()) :));
carrying.c | 186 | query_multiple_short( things );
carrying.c | 216 | this_object()->query_limbs();
carrying.c | 218 | this_object()->query_race_ob() )->query_limbs();
carrying.c | 221 | filter(all_inventory(), (: $1->short(0) :) );
carrying.c | 222 | this_object()->find_inv_match();
carrying.c | 226 | this_object()->query_holding() + ({ });
carrying.c | 229 | present(MONEY_ALIAS, this_object());
carrying.c | 234 | sizeof(holding);
carrying.c | 244 | query_multiple_short(bits, "a", 1)+")" });
carrying.c | 263 | this_object()->query_contents(0, carry, 1);
carrying.c | 275 | this_object()->check_dark(environment()->query_light()) >
carrying.c | 277 | query_multiple_short( (string *)money->half_short( 1 ) );
carrying.c | 286 | query_number_coins();
combat.c | 41 | query_attacker_list();
combat.c | 42 | stop_all_fight();
combat.c | 43 | query_distance(object);
combat.c | 44 | set_distance(object, int);
combat.c | 45 | adjust_action_defecit(int amount);
combat.c | 46 | init_tactics();
combat.c | 48 | query_surrenderers();
combat.c | 53 | create();
combat.c | 55 | init_tactics();
combat.c | 100 | this_object());
combat.c | 103 | this_object());
combat.c | 169 | objectp($1) ? $1 : find_player($1) :));
combat.c | 171 | query_attackable() :), att->attacker);
combat.c | 178 | query_name();
combat.c | 205 | sizeof(opponents);
combat.c | 206 | if((opponent->query_hp() / 10 + random(100)) >
combat.c | 212 | sizeof(opponents);
combat.c | 228 | find_player(opponent);
combat.c | 282 | attack_by(att->attacker);
combat.c | 286 | combat_debug("picked %s to protect", (att->person_hit)->query_name());
combat.c | 296 | pk_check($1, $2) :), att->attacker);
combat.c | 300 | attack_by(att->attacker);
combat.c | 301 | filter(defenders, (: $1->query_defend() :));
combat.c | 308 | combat_debug("picked %s to defend", (att->defender)->query_name());
combat.c | 360 | return (_combat->action_defecit < (COMBAT_ACTION_TIME * 4));
combat.c | 399 | query_holding();
combat.c | 400 | query_limbs();
combat.c | 405 | sizeof(tmp);
combat.c | 416 | if(sizeof(weapons) >
combat.c | 417 | uniq_array(filter(weapons, (: $1 && $1->query_weapon() :)));
combat.c | 435 | if(ABS(REACH + weapon->query_length() - att->distance) >
combat.c | 449 | query_str() + (att->attacker)->query_dex();
combat.c | 458 | weapon_attacks(perc, att->defender);
combat.c | 470 | random(sizeof(attacks) / AT_ARRAY_SIZE);
combat.c | 483 | query_race_ob())->query_target_zones();
combat.c | 492 | query_race_ob())->map_target_zone(zone);
combat.c | 500 | query_height();
combat.c | 503 | query_height();
combat.c | 506 | to_float((att->opponent)->query_height());
combat.c | 510 | query_race_ob())->query_target_zones();
combat.c | 515 | random(sizeof(tmp) + 10);
combat.c | 573 | ABS(defender->query_distance(att->attacker)) >
combat.c | 580 | set_distance(att->attacker, att->distance);
combat.c | 614 | query_holding();
combat.c | 619 | query_limbs();
combat.c | 620 | sizeof(hands);
combat.c | 683 | query_dex();
combat.c | 694 | query_holding();
combat.c | 699 | sizeof(holding);
combat.c | 706 | query_weight();
combat.c | 724 | query_weight() + (tmp2 / 2);
combat.c | 728 | query_str();
combat.c | 733 | to_int(pow(wep, 1.4));
combat.c | 745 | query_burden();
combat.c | 764 | query_hp() * 50) / attacker->query_max_hp());
combat.c | 767 | query_specific_gp("fighting");
combat.c | 774 | query_burden() / 3);
combat.c | 779 | ABS(REACH - att->distance);
combat.c | 815 | sizeof(((att->opponent)->query_race_ob())->query_target_zones());
combat.c | 831 | environment($1) == environment(this_object()):));
combat.c | 832 | member_array(this_object(), attackers);
combat.c | 847 | sqrt(attack_weapon->query_weight()) * 3) / (limbs + 1);
combat.c | 850 | if(sizeof((att->attacker)->query_weapons()) >
combat.c | 895 | query_dex();
combat.c | 906 | query_holding();
combat.c | 918 | sizeof(holding);
combat.c | 926 | to_int(pow(wep - defender->query_str(), 1.3));
combat.c | 931 | query_weight());
combat.c | 941 | ABS(REACH + defense_weapon->query_length() - att->distance);
combat.c | 945 | ABS(REACH - att->distance);
combat.c | 949 | query_burden() / 3);
combat.c | 959 | uniq_array(filter(holding, (: $1 :)));
combat.c | 967 | query_burden() / 3);
combat.c | 971 | query_burden() / 2);
combat.c | 974 | query_weight() / 10);
combat.c | 997 | query_hp() * 25) / defender->query_max_hp());
combat.c | 1000 | query_specific_gp("fighting");
combat.c | 1056 | sqrt(att->defense_weapon->query_weight() / 4);
combat.c | 1061 | if(sizeof((att->defender)->query_weapons()) >
combat.c | 1066 | sqrt(defender->query_burden());
combat.c | 1116 | sqrt(damage * attacker->query_skill_bonus(att->attack_skill));
combat.c | 1165 | query_skill_bonus(att->attack_skill));
combat.c | 1190 | map_armour_zone(att->target_zone);
combat.c | 1242 | if((att->attack_weapon)->query_hp() >
combat.c | 1247 | hit_weapon(off_damage, att->attack_data[AT_SKILL]);
combat.c | 1249 | do_damage(att->attack_data[AT_SKILL], off_damage);
combat.c | 1261 | do_damage(att->attack_data[AT_SKILL], def_damage);
combat.c | 1318 | the_short()+" hits "+opponent->the_short()});
combat.c | 1334 | the_short()});
combat.c | 1341 | query_objective();
combat.c | 1346 | query_objective();
combat.c | 1350 | query_objective();
combat.c | 1354 | query_objective();
combat.c | 1357 | query_objective();
combat.c | 1372 | the_short()});
combat.c | 1378 | allocate(5);
combat.c | 1389 | poss_short();
combat.c | 1455 | the_short() }) ) +".%^RESET%^\n" );
combat.c | 1463 | the_short() ) +".%^RESET%^\n" );
combat.c | 1468 | allocate(5);
combat.c | 1535 | short();
combat.c | 1539 | query_race_ob())->map_target_zone("hands");
combat.c | 1608 | sizeof(att->attack_messages) >
combat.c | 1614 | sizeof(att->attack_messages) >
combat.c | 1639 | if((att->attacker)->query_time_left() >
combat.c | 1640 | adjust_time_left(-DEFAULT_TIME);
combat.c | 1643 | adjust_action_defecit(att->attack_cost);
combat.c | 1644 | adjust_action_defecit(att->defense_cost);
combat.c | 1648 | adjust_action_defecit(DEFENSE_COST);
combat.c | 1652 | adjust_action_defecit(DEFENSE_COST);
combat.c | 1656 | adjust_gp(-tmp);
combat.c | 1660 | adjust_gp(-tmp);
combat.c | 1663 | adjust_gp(-tmp);
combat.c | 1668 | adjust_gp(-tmp);
combat.c | 1691 | if(ABS(ideal - att->distance) >
combat.c | 1728 | query_distance(att->opponent));
combat.c | 1745 | query_distance(att->opponent));
combat.c | 1816 | perform_movement(att);
combat.c | 1819 | adjust_actions(att);
combat.c | 1833 | query_race_ob())->query_target_zones();
combat.c | 1835 | sizeof(locations);
combat.c | 1837 | filter(locations, (: $1 == tmpzone :));
combat.c | 1838 | sizeof(locations);
combat.c | 1843 | query_max_hp();
combat.c | 1876 | sizeof(tmp);
combat.c | 1879 | evaluate(tmp[i]->callback, stage, att, tmp[i]->data);
combat.c | 1882 | remove_special(tmp[i]->id);
combat.c | 1897 | remove_special(tmp[i]->id);
combat.c | 1902 | set_special_data(tmp[i]->id, result[2]);
combat.c | 1917 | sizeof(tmp);
combat.c | 1920 | evaluate(tmp[i]->callback, stage, att, tmp[i]->data);
combat.c | 1923 | remove_special(tmp[i]->id);
combat.c | 1938 | remove_special(tmp[i]->id);
combat.c | 1941 | set_special_data(tmp[i]->id, result[2]);
combat.c | 1971 | init_tactics();
combat.c | 1973 | remove_call_out("announce_intent");
combat.c | 1989 | call_special(E_OPPONENT_SELECTION, att);
combat.c | 1991 | this_object()->choose_opponent(att);
combat.c | 1998 | combat_debug("No opponent chosen, aborting attack");
combat.c | 2003 | event(environment(att->attacker), "fight_in_progress", att->opponent);
combat.c | 2004 | clear_protection(att->attacker, att->opponent);
combat.c | 2012 | call_special(E_DEFENDER_SELECTION, att);
combat.c | 2014 | choose_defender(att);
combat.c | 2020 | query_tactics();
combat.c | 2021 | query_concentrating();
combat.c | 2022 | query_last_opponent();
combat.c | 2023 | query_last_action();
combat.c | 2024 | query_last_result();
combat.c | 2025 | query_action_defecit();
combat.c | 2026 | query_specials();
combat.c | 2028 | clear_protection(att->attacker, att->defender);
combat.c | 2031 | call_special(E_ATTACK_SELECTION, att);
combat.c | 2033 | this_object()->choose_attack(att);
combat.c | 2050 | call_special(E_DEFENSE_SELECTION, att);
combat.c | 2052 | choose_defense(att);
combat.c | 2059 | set_last_opponent(att->attacker);
combat.c | 2061 | set_last_opponent(att->attacker);
combat.c | 2062 | set_last_action(att->defense_action);
combat.c | 2063 | set_last_weapon(att->defense_weapon);
combat.c | 2065 | set_last_opponent(att->attacker);
combat.c | 2068 | call_special(E_ATTACK_MODIFIER, att);
combat.c | 2070 | this_object()->calc_attack_modifier(att);
combat.c | 2081 | call_special(E_DEFENSE_MODIFIER, att);
combat.c | 2083 | calc_defense_modifier(att);
combat.c | 2095 | sqrt(modifier * 25);
combat.c | 2097 | sqrt(-modifier * 25);
combat.c | 2109 | set_last_result(att->result);
combat.c | 2116 | adjust_action_defecit(att->defense_cost);
combat.c | 2117 | adjust_gp(-(DEFENSE_GP[att->defender_tactics->attitude]));
combat.c | 2125 | while(att->repeat);
combat.c | 2128 | call_special(E_DAMAGE_CALCULATION, att);
combat.c | 2130 | this_object()->calc_damage(att);
combat.c | 2137 | call_special(E_ARMOUR_CALCULATION, att);
combat.c | 2139 | calc_armour_protection(att);
combat.c | 2154 | query_stopped();
combat.c | 2164 | query_hp());
combat.c | 2169 | this_object()->prepare_messages(att);
combat.c | 2171 | debug_printf("No attack or defense messages.\n");
combat.c | 2176 | call_special(E_WRITE_MESSAGES, att);
combat.c | 2178 | this_object()->write_messages(att);
combat.c | 2191 | call_special(E_WEAPON_DAMAGE, att);
combat.c | 2193 | this_object()->damage_weapon(att);
combat.c | 2200 | call_special(E_AFTER_ATTACK, att);
combat.c | 2202 | this_object()->after_attack(att);
combat.c | 2220 | find_player(ob);
combat.c | 2226 | filter_mapping(_combat->attacker_list,(: $1 :));
combat.c | 2230 | map_delete(_combat->attacker_list, ob);
combat.c | 2234 | time();
combat.c | 2235 | map_delete(_combat->attacker_list, ob);
combat.c | 2242 | find_player(ob);
combat.c | 2248 | filter_mapping(_combat->hunting_list, (: $1 :));
combat.c | 2249 | map_delete(_combat->hunting_list, ob);
combat.c | 2252 | map_delete(_combat->hunting_list, ob);
combat.c | 2258 | map_delete(_combat->hunting_list, ob);
combat.c | 2262 | one_short() + ".\n", ({ }), 1);
combat.c | 2263 | map_delete(_combat->hunting_list, ob);
combat.c | 2277 | this_object()->clear_gp_info();
combat.c | 2282 | this_object()->query_hp();
combat.c | 2285 | this_object()->query_max_hp();
combat.c | 2298 | this_object()->query_xp() + "%^RESET%^\n" );
combat.c | 2341 | this_object() }) + things);
combat.c | 2368 | recalc_hunting_list();
combat.c | 2373 | sizeof(_combat->specials);
combat.c | 2379 | adjust_action_defecit(-MAX_ACTION_DEFECIT);
combat.c | 2380 | end_combat();
combat.c | 2393 | adjust_action_defecit(-(ACTIONS_PER_HB / (COMBAT_SPEED + 1)));
combat.c | 2403 | monitor_points();
combat.c | 2407 | do_attack();
combat.c | 2410 | adjust_action_defecit(-(ACTIONS_PER_HB / (COMBAT_SPEED + 1)));
combat.c | 2415 | combat_debug("Adding bonus attack for %s", this_object()->query_name());
combat.c | 2420 | call_out("do_attack", 1);
combat.c | 2488 | return ({ R_CONTINUE, att, data });
combat.c | 2493 | return ({ R_DONE, att, data });
combat.c | 2505 | return ({ R_CONTINUE & R_REMOVE_ME, att, data });
combat.c | 2508 | return ({ R_CONTINUE, att, data });
combat.c | 2531 | sizeof(_combat->specials);
combat.c | 2538 | debug_printf("Failed to remove special %d", id);
combat.c | 2547 | copy(_combat->specials);
combat.c | 2567 | sizeof(_combat->specials);
combat.c | 2593 | init_tactics();
combat.c | 2594 | copy(_tactics);
combat.c | 2631 | copy(_combat->protectors + ({ }));
combat.c | 2687 | copy(_combat->defenders + ({ }));
combat.c | 2790 | map_delete(_combat->attacker_list, ob->query_name());
combat.c | 2791 | map_delete(_combat->hunting_list, ob->query_name());
combat.c | 2793 | map_delete(_combat->attacker_list, ob);
combat.c | 2794 | map_delete(_combat->hunting_list, ob);
combat.c | 2827 | query_distance(this_object());
combat.c | 2829 | query_distance(this_object());
combat.c | 2840 | start_combat(opponent);
combat.c | 2895 | call_out("announce_intent", 0, opponent);
combat.c | 2897 | this_object()->remove_hide_invis("hiding");
combat.c | 2901 | start_combat(opponent);
combat.c | 2912 | combat_debug("stop_fight called against %s", opponent->query_name());
combat.c | 2919 | map_delete(_combat->attacker_list, opponent->query_name());
combat.c | 2920 | map_delete(_combat->hunting_list, opponent->query_name());
combat.c | 2922 | map_delete(_combat->attacker_list, opponent);
combat.c | 2923 | map_delete(_combat->hunting_list, opponent);
combat.c | 2936 | remove_special(tmp->id);
combat.c | 2938 | end_combat();
combat.c | 2946 | combat_debug("stop_all_fight called");
combat.c | 2961 | remove_special(tmp->id);
combat.c | 2963 | end_combat();
combat.c | 2968 | map_delete(_combat->hunting_list, opponent->query_name());
combat.c | 2970 | map_delete(_combat->hunting_list, opponent);
combat.c | 2973 | end_combat();
combat.c | 2990 | death_helper(thing, 0);
combat.c | 2992 | catch(DEATH->someone_surrendered(this_object()));
combat.c | 2993 | query_attacker_list();
combat.c | 2995 | stop_fight(this_object());
combat.c | 2997 | stop_all_fight();
combat.c | 3028 | this_object() }) + _surrender->to + _surrender->refusers, 0);
combat.c | 3033 | query_multiple_short(offer)), ({ }), 0);
combat.c | 3034 | offered_surrender(victim);
combat.c | 3047 | copy(_surrender->from);
combat.c | 3067 | this_object()->query_combat_mercy();
combat.c | 3078 | query_name() + ".\n", ({ }), 0);
combat.c | 3081 | accepted_surrender(this_object());
combat.c | 3083 | refused_surrender(this_object());
combat.c | 3089 | one_short() + ".\n", ({ }), 0);
combat.c | 3090 | accepted_surrender(this_object());
combat.c | 3095 | one_short()), ({ }), 0);
combat.c | 3096 | refused_surrender(this_object());
combat.c | 3133 | this_object()->do_surrender(attacker);
combat.c | 3143 | event( environment(), "stopped_fighting", thing );
combat.c | 3152 | event(environment(), "fight_in_progress", thing );
combat.c | 3162 | query_distance(this_object());
combat.c | 3170 | query_distance(this_object());
combat.c | 3313 | init_tactics();
combat.c | 3328 | this_object()->query_weapons();
combat.c | 3330 | stats();
combat.c | 3332 | sizeof( weapons );
combat.c | 3334 | weapon_stats();
combat.c | 3336 | stats();
force.c | 39 | no_force(string str);
force.c | 40 | do_force(object *obs, string str);
force.c | 48 | base_name(this_object());
force.c | 52 | do_force($1, $4[1]) :));
force.c | 55 | add_command("noforce", "{on|off}", (: no_force($4[0]) :));
force.c | 56 | add_command("noforce", "", (: no_force(0) :));
force.c | 69 | write("Ok, forcing you disabled.\n");
force.c | 74 | write("Ok, forcing you enabled.\n");
force.c | 77 | write("Forcing you is currently ");
force.c | 79 | write("disabled.\n");
force.c | 82 | write("enabled.\n");
force.c | 97 | notify_fail("You do not have the ability to do that yet.\n");
force.c | 101 | notify_fail("Insufficient social points.\n");
force.c | 108 | write(capitalize( ob->query_name() ) + " didn't want to do that.\n");
force.c | 111 | write("Ok.\n");
force.c | 124 | this_player(1);
force.c | 127 | previous_object();
force.c | 130 | file_name(previous_object())+"\n");
force.c | 136 | this_object()->query_name() + " : " + str);
force.c | 141 | this_object()->query_name()+" to "+str+" (failed)", "force");
force.c | 142 | log_file("FORCE", " (failed)\n");
force.c | 152 | this_object()->query_name()+" to "+str+" (failed)", "force");
force.c | 153 | log_file("FORCE", " (failed)\n");
force.c | 157 | command(str);
force.c | 159 | this_object()->eventForce(str);
force.c | 162 | this_object()->query_name()+" to "+str, "force");
force.c | 163 | log_file("FORCE", " (succeeded)\n");
stats.c | 91 | query_property(string name);
stats.c | 107 | call_out( "zap_stat_cache", 1 );
stats.c | 118 | this_object()->query_con();
stats.c | 127 | this_object()->query_weight(1);
stats.c | 157 | this_object()->query_skill_bonus( "other.health" );
stats.c | 158 | hp_base() + skill_bon * hp_gradient();
stats.c | 164 | this_object()->query_race_ob();
stats.c | 168 | file_name( environment() );
stats.c | 173 | log_file( "BAD_NPC", ctime(time()) + " " + report );
stats.c | 178 | this_object()->set_max_hp( 1 );
stats.c | 180 | this_object()->set_max_hp( new_max );
stats.c | 188 | this_object()->query_guild_ob();
stats.c | 190 | query_property("backup guild");
stats.c | 194 | this_object()->query_skill_bonus( "other.points" ) );
stats.c | 196 | set_gp( this_object() );
stats.c | 205 | this_object()->query_guild_ob();
stats.c | 207 | query_property("backup guild");
stats.c | 224 | query_inc_rates() { return ({ gp_inc, hp_inc });
stats.c | 230 | this_object()->query_hp();
stats.c | 233 | this_object()->query_callingdeath();
stats.c | 243 | tell_creator( "taffyd", "In do_death()\n" );
stats.c | 245 | if ( time() >
stats.c | 246 | tell_creator( "taffyd", "DEATH_WAIT triggered\n" );
stats.c | 247 | this_object()->do_death();
stats.c | 250 | this_object()->do_death();
stats.c | 255 | calc_inc_rates();
stats.c | 258 | this_object()->adjust_gp( gp_inc );
stats.c | 259 | this_object()->adjust_hp( hp_inc );
stats.c | 268 | this_object()->query_loc_weight();
stats.c | 276 | this_object()->set_max_weight( new_cap );
stats.c | 278 | this_object()->dest_hide_shadow();
stats.c | 280 | this_object()->query_armours();
stats.c | 285 | sizeof( contents );
stats.c | 286 | if ( (int)contents[ i ]->query_complete_weight() >
stats.c | 287 | query_complete_weight();
stats.c | 294 | delete( contents, hst_num, 1 );
stats.c | 299 | this_object() );
stats.c | 301 | query_multiple_short( dropped ) +".\n" );
stats.c | 303 | this_object()->update_loc_weight();
stats.c | 304 | this_object()->calc_burden();
stats.c | 314 | this_object()->add_property( PASSED_OUT, 1, 500 );
stats.c | 315 | tell_object( this_object(), "You fall asleep.\n" );
stats.c | 319 | reset_all() { zap_stat( "CDISW" );
stats.c | 323 | reset_hp();
stats.c | 324 | reset_gp();
stats.c | 325 | reset_carry_cap();
stats.c | 326 | calc_inc_rates();
stats.c | 327 | check_stats_zero();
stats.c | 328 | this_object()->do_burden_call();
stats.c | 343 | check( int number ) { return ( number <= 28 );
stats.c | 348 | zap_stat( "C" );
stats.c | 356 | zap_stat( "D" );
stats.c | 364 | zap_stat( "I" );
stats.c | 372 | zap_stat( "S" );
stats.c | 380 | zap_stat( "W" );
stats.c | 389 | zap_stat( "C" );
stats.c | 398 | zap_stat( "D" );
stats.c | 407 | zap_stat( "I" );
stats.c | 416 | zap_stat( "S" );
stats.c | 425 | zap_stat( "W" );
stats.c | 439 | zap_stat( "C" );
stats.c | 441 | call_out( "update_tmps", 900 );
stats.c | 448 | zap_stat( "D" );
stats.c | 450 | call_out( "update_tmps", 900 );
stats.c | 457 | zap_stat( "I" );
stats.c | 459 | call_out( "update_tmps", 900 );
stats.c | 466 | zap_stat( "S" );
stats.c | 468 | call_out( "update_tmps", 900 );
stats.c | 475 | zap_stat( "W" );
stats.c | 477 | call_out( "update_tmps", 900 );
stats.c | 490 | zap_stat( "C" );
stats.c | 497 | zap_stat( "D" );
stats.c | 504 | zap_stat( "I" );
stats.c | 511 | zap_stat( "S" );
stats.c | 518 | zap_stat( "W" );
stats.c | 524 | zap_stat( "C" );
stats.c | 528 | zap_stat( "D" );
stats.c | 532 | zap_stat( "I" );
stats.c | 536 | zap_stat( "S" );
stats.c | 540 | zap_stat( "W" );
stats.c | 544 | call_out( "update_tmps", 900 );
living.eff_shad.c | 78 | return_to_default_position(int leaving);
living.eff_shad.c | 79 | set_position(string name);
living.eff_shad.c | 80 | set_position_on(mixed ob);
living.eff_shad.c | 81 | set_position_multiple(int mult);
living.eff_shad.c | 82 | set_position_type(string type);
living.eff_shad.c | 83 | query_position_on();
living.eff_shad.c | 84 | command(string);
living.eff_shad.c | 99 | new(class living_data);
living.eff_shad.c | 100 | new(class messages);
living.eff_shad.c | 101 | create();
living.eff_shad.c | 102 | create();
living.eff_shad.c | 103 | create();
living.eff_shad.c | 104 | create();
living.eff_shad.c | 105 | create();
living.eff_shad.c | 106 | create();
living.eff_shad.c | 107 | create();
living.eff_shad.c | 108 | create();
living.eff_shad.c | 109 | create();
living.eff_shad.c | 110 | create();
living.eff_shad.c | 111 | enable_commands();
living.eff_shad.c | 112 | reset_can_export_inventory();
living.eff_shad.c | 113 | reset_effects();
living.eff_shad.c | 120 | set_max_items(50);
living.eff_shad.c | 130 | add_adjective("living");
living.eff_shad.c | 135 | heart_beat();
living.eff_shad.c | 136 | heart_beat();
living.eff_shad.c | 145 | query_pronoun();
living.eff_shad.c | 154 | query_possessive();
living.eff_shad.c | 163 | query_objective();
living.eff_shad.c | 170 | query_weight();
living.eff_shad.c | 207 | update_loc_weight();
living.eff_shad.c | 208 | query_loc_weight();
living.eff_shad.c | 221 | this_object()->reset_carry_cap();
living.eff_shad.c | 224 | query_max_weight();
living.eff_shad.c | 231 | adjust_bonus_dex( _liv_data->handicap - new_handicap );
living.eff_shad.c | 259 | add_effect( string eff, mixed arg ) { effects::add_effect( eff, arg );
living.eff_shad.c | 266 | add_action( "exit_command", "*", 1 );
living.eff_shad.c | 275 | this_object()->bypass_queue();
living.eff_shad.c | 276 | command( "eat " + file_name( food ) );
living.eff_shad.c | 290 | if(sizeof(all_inventory(this_object())) >
living.eff_shad.c | 314 | find_object( dest );
living.eff_shad.c | 318 | file_name( dest );
living.eff_shad.c | 337 | this_object(), ob );
living.eff_shad.c | 340 | write( "An unseen force stays your hand.\n" );
living.eff_shad.c | 411 | adjust_al( change );
living.eff_shad.c | 547 | query_facing() { return copy( facing );
living.eff_shad.c | 566 | member_array( word, facing[ 1 ] );
living.eff_shad.c | 571 | member_array( word, facing[ 2 ] );
living.eff_shad.c | 586 | member_array( word, REL_DIRS );
living.eff_shad.c | 591 | member_array( word, ({ "up", "down" }) );
living.eff_shad.c | 608 | member_array( word, REL_DIRS );
living.eff_shad.c | 614 | member_array( word, ({ "up", "down" }) );
living.eff_shad.c | 636 | set_dragging( object thing ) { add_property("dragging", thing);
living.eff_shad.c | 642 | query_dragging() { return query_property("dragging");
living.eff_shad.c | 647 | reset_dragging() { add_property("dragging", 0);
living.eff_shad.c | 662 | this_object()->ignore_from_history( "look" );
living.eff_shad.c | 663 | this_object()->bypass_queue();
living.eff_shad.c | 664 | command( "look" );
living.eff_shad.c | 666 | this_object()->ignore_from_history( "glance" );
living.eff_shad.c | 667 | this_object()->bypass_queue();
living.eff_shad.c | 668 | command( "glance" );
living.eff_shad.c | 706 | return_to_default_position(1);
living.eff_shad.c | 709 | room_look();
living.eff_shad.c | 710 | return_to_default_position(1);
living.eff_shad.c | 724 | explode( word, " " );
living.eff_shad.c | 725 | if ( sizeof( bits ) >
living.eff_shad.c | 726 | implode( bits[ 1 .. ], " " );
living.eff_shad.c | 735 | explode( verb, " " );
living.eff_shad.c | 736 | if ( sizeof( bits ) >
living.eff_shad.c | 737 | implode( bits[ 1 .. ], " " );
living.eff_shad.c | 745 | environment()->query_exits();
living.eff_shad.c | 762 | reorient_rel(verb);
living.eff_shad.c | 765 | this_object();
living.eff_shad.c | 787 | query_int() * query_wis();
living.eff_shad.c | 789 | this_object()->interrupt_ritual();
living.eff_shad.c | 791 | this_object()->interrupt_spell();
living.eff_shad.c | 793 | this_object()->stop_all_fight();
living.eff_shad.c | 801 | environment()->query_dest_dir(this_object());
living.eff_shad.c | 802 | environment();
living.eff_shad.c | 806 | event( old_env, "run_away", direcs[ i ], direcs[ i + 1 ] );
living.eff_shad.c | 810 | delete( direcs, i, 2 );
living.eff_shad.c | 816 | cannot_get_stuff() { return !query_property( PASSED_OUT );
living.eff_shad.c | 834 | stats() + combat::stats() + (mixed *)effects::stats();
living.eff_shad.c | 885 | member_array(ob, _liv_data->followers);
living.eff_shad.c | 887 | delete(_liv_data->followers, i, 1);
living.eff_shad.c | 911 | query_current_room() { return environment();
living.eff_shad.c | 919 | query_followers() { return copy(_liv_data->followers - ({ 0 }));
living.eff_shad.c | 923 | adjust_money(amt, type);
living.eff_shad.c | 928 | query_money_array();
living.eff_shad.c | 933 | query_money(type);
living.eff_shad.c | 937 | query_value() { return money::query_value();
living.eff_shad.c | 941 | remove_call_out(_liv_data->burden_call);
living.eff_shad.c | 943 | call_out("calc_burden", 1);
living.eff_shad.c | 957 | do_burden_call();
living.eff_shad.c | 959 | if(sizeof(all_inventory()) >
living.eff_shad.c | 961 | remove_call_out("test_number_of_items");
living.eff_shad.c | 962 | call_out("test_number_of_items", 5 + random(5));
living.eff_shad.c | 970 | do_burden_call();
living.eff_shad.c | 979 | all_inventory() - query_armours() - query_holding();
living.eff_shad.c | 980 | sizeof(things) - query_burden_limit();
living.eff_shad.c | 1015 | query_multiple_short( dropped ) +".\n" );
living.eff_shad.c | 1016 | this_object()->dest_hide_shadow();
living.eff_shad.c | 1019 | query_multiple_short( dropped ) +".\n", this_object() );
living.eff_shad.c | 1028 | do_burden_call();
living.eff_shad.c | 1029 | remove_call_out("test_number_of_items");
living.eff_shad.c | 1030 | call_out("test_number_of_items", 5 + random(5));
living.eff_shad.c | 1036 | member_array( $1, query_holding() ) != -1 ? -1 : 0 ) :) );
living.eff_shad.c | 1041 | return_to_default_position(0);
living.eff_shad.c | 1042 | attack_by(ob);
living.eff_shad.c | 1047 | return_to_default_position(0);
living.eff_shad.c | 1048 | attack_ob(ob);
living.eff_shad.c | 1139 | set_default_position("/cmds/living/kneel");
living.eff_shad.c | 1141 | set_default_position(({ "running" }));
living.eff_shad.c | 1145 | the_short() + " starts to fish.\n" }));
living.eff_shad.c | 1147 | set_default_position(({ "running" }));
living.eff_shad.c | 1148 | return_to_default_position(1);
living.eff_shad.c | 1175 | query_default_position();
living.eff_shad.c | 1180 | environment()->query_default_position(this_object());
living.eff_shad.c | 1183 | query_default_position();
living.eff_shad.c | 1192 | environment()->query_default_position(this_object());
living.eff_shad.c | 1205 | catch(pos->position_floor(this_object()));
living.eff_shad.c | 1212 | catch(pos->position(this_object()));
living.eff_shad.c | 1217 | if (sizeof(pos) >
living.eff_shad.c | 1219 | tell_object(this_object(), pos[POSITION_ME_MESS_INDEX]);
living.eff_shad.c | 1222 | tell_room(environment(), pos[POSITION_REST_MESS], this_object());
living.eff_shad.c | 1225 | set_position(pos[POSITION_TYPE_INDEX]);
living.eff_shad.c | 1226 | set_position_on(0);
living.eff_shad.c | 1227 | set_position_type(0);
living.eff_shad.c | 1228 | set_position_multiple(0);
living.eff_shad.c | 1276 | allocate(POSITION_ARRAY_SIZE);
living.eff_shad.c | 1295 | allocate(POSITION_ARRAY_SIZE);
living.eff_shad.c | 1333 | allocate(POSITION_ARRAY_SIZE);
living.eff_shad.c | 1393 | the_short();
living.eff_shad.c | 1428 | query_position_on_short();
living.eff_shad.c | 1455 | query_arcane_shields() { return ({ });
living.c | 77 | return_to_default_position(int leaving);
living.c | 78 | set_position(string name);
living.c | 79 | set_position_on(mixed ob);
living.c | 80 | set_position_multiple(int mult);
living.c | 81 | set_position_type(string type);
living.c | 82 | query_position_on();
living.c | 83 | command(string);
living.c | 98 | new(class living_data);
living.c | 99 | new(class messages);
living.c | 100 | create();
living.c | 101 | create();
living.c | 102 | create();
living.c | 103 | create();
living.c | 104 | create();
living.c | 105 | create();
living.c | 106 | create();
living.c | 107 | create();
living.c | 108 | create();
living.c | 109 | enable_commands();
living.c | 110 | reset_can_export_inventory();
living.c | 111 | reset_effects();
living.c | 118 | set_max_items(50);
living.c | 128 | add_adjective("living");
living.c | 133 | heart_beat();
living.c | 134 | heart_beat();
living.c | 143 | query_pronoun();
living.c | 152 | query_possessive();
living.c | 161 | query_objective();
living.c | 168 | query_weight();
living.c | 205 | update_loc_weight();
living.c | 206 | query_loc_weight();
living.c | 219 | this_object()->reset_carry_cap();
living.c | 222 | query_max_weight();
living.c | 229 | adjust_bonus_dex( _liv_data->handicap - new_handicap );
living.c | 261 | add_action( "exit_command", "*", 1 );
living.c | 270 | this_object()->bypass_queue();
living.c | 271 | command( "eat " + file_name( food ) );
living.c | 285 | if(sizeof(all_inventory(this_object())) >
living.c | 309 | find_object( dest );
living.c | 313 | file_name( dest );
living.c | 332 | this_object(), ob );
living.c | 335 | write( "An unseen force stays your hand.\n" );
living.c | 406 | adjust_al( change );
living.c | 542 | query_facing() { return copy( facing );
living.c | 561 | member_array( word, facing[ 1 ] );
living.c | 566 | member_array( word, facing[ 2 ] );
living.c | 581 | member_array( word, REL_DIRS );
living.c | 586 | member_array( word, ({ "up", "down" }) );
living.c | 603 | member_array( word, REL_DIRS );
living.c | 609 | member_array( word, ({ "up", "down" }) );
living.c | 631 | set_dragging( object thing ) { add_property("dragging", thing);
living.c | 637 | query_dragging() { return query_property("dragging");
living.c | 642 | reset_dragging() { add_property("dragging", 0);
living.c | 657 | this_object()->ignore_from_history( "look" );
living.c | 658 | this_object()->bypass_queue();
living.c | 659 | command( "look" );
living.c | 661 | this_object()->ignore_from_history( "glance" );
living.c | 662 | this_object()->bypass_queue();
living.c | 663 | command( "glance" );
living.c | 701 | return_to_default_position(1);
living.c | 704 | room_look();
living.c | 705 | return_to_default_position(1);
living.c | 719 | explode( word, " " );
living.c | 720 | if ( sizeof( bits ) >
living.c | 721 | implode( bits[ 1 .. ], " " );
living.c | 730 | explode( verb, " " );
living.c | 731 | if ( sizeof( bits ) >
living.c | 732 | implode( bits[ 1 .. ], " " );
living.c | 740 | environment()->query_exits();
living.c | 757 | reorient_rel(verb);
living.c | 760 | this_object();
living.c | 782 | query_int() * query_wis();
living.c | 784 | this_object()->interrupt_ritual();
living.c | 786 | this_object()->interrupt_spell();
living.c | 788 | this_object()->stop_all_fight();
living.c | 796 | environment()->query_dest_dir(this_object());
living.c | 797 | environment();
living.c | 801 | event( old_env, "run_away", direcs[ i ], direcs[ i + 1 ] );
living.c | 805 | delete( direcs, i, 2 );
living.c | 811 | cannot_get_stuff() { return !query_property( PASSED_OUT );
living.c | 829 | stats() + combat::stats();
living.c | 880 | member_array(ob, _liv_data->followers);
living.c | 882 | delete(_liv_data->followers, i, 1);
living.c | 906 | query_current_room() { return environment();
living.c | 914 | query_followers() { return copy(_liv_data->followers - ({ 0 }));
living.c | 918 | adjust_money(amt, type);
living.c | 923 | query_money_array();
living.c | 928 | query_money(type);
living.c | 932 | query_value() { return money::query_value();
living.c | 936 | remove_call_out(_liv_data->burden_call);
living.c | 938 | call_out("calc_burden", 1);
living.c | 952 | do_burden_call();
living.c | 954 | if(sizeof(all_inventory()) >
living.c | 956 | remove_call_out("test_number_of_items");
living.c | 957 | call_out("test_number_of_items", 5 + random(5));
living.c | 965 | do_burden_call();
living.c | 974 | all_inventory() - query_armours() - query_holding();
living.c | 975 | sizeof(things) - query_burden_limit();
living.c | 1010 | query_multiple_short( dropped ) +".\n" );
living.c | 1011 | this_object()->dest_hide_shadow();
living.c | 1014 | query_multiple_short( dropped ) +".\n", this_object() );
living.c | 1023 | do_burden_call();
living.c | 1024 | remove_call_out("test_number_of_items");
living.c | 1025 | call_out("test_number_of_items", 5 + random(5));
living.c | 1031 | member_array( $1, query_holding() ) != -1 ? -1 : 0 ) :) );
living.c | 1036 | return_to_default_position(0);
living.c | 1037 | attack_by(ob);
living.c | 1042 | return_to_default_position(0);
living.c | 1043 | attack_ob(ob);
living.c | 1134 | set_default_position("/cmds/living/kneel");
living.c | 1136 | set_default_position(({ "running" }));
living.c | 1140 | the_short() + " starts to fish.\n" }));
living.c | 1142 | set_default_position(({ "running" }));
living.c | 1143 | return_to_default_position(1);
living.c | 1170 | query_default_position();
living.c | 1175 | environment()->query_default_position(this_object());
living.c | 1178 | query_default_position();
living.c | 1187 | environment()->query_default_position(this_object());
living.c | 1200 | catch(pos->position_floor(this_object()));
living.c | 1207 | catch(pos->position(this_object()));
living.c | 1212 | if (sizeof(pos) >
living.c | 1214 | tell_object(this_object(), pos[POSITION_ME_MESS_INDEX]);
living.c | 1217 | tell_room(environment(), pos[POSITION_REST_MESS], this_object());
living.c | 1220 | set_position(pos[POSITION_TYPE_INDEX]);
living.c | 1221 | set_position_on(0);
living.c | 1222 | set_position_type(0);
living.c | 1223 | set_position_multiple(0);
living.c | 1271 | allocate(POSITION_ARRAY_SIZE);
living.c | 1290 | allocate(POSITION_ARRAY_SIZE);
living.c | 1328 | allocate(POSITION_ARRAY_SIZE);
living.c | 1388 | the_short();
living.c | 1423 | query_position_on_short();
living.c | 1450 | query_arcane_shields() { return ({ });
corpse.c | 28 | this_object()->query_race_ob( this_object() )->query_possible_bits( "head" );
corpse.c | 32 | make_bit(heads[random(sizeof(heads))] );
corpse.c | 33 | move( environment( corpse ) );
corpse.c | 72 | tell_room( environment( corpse ), behead_message );
corpse.c | 91 | find_object(this_object()->query_race_ob());
corpse.c | 93 | make_corpse();
corpse.c | 95 | clone_object( "/obj/corpse" );
corpse.c | 96 | set_owner( 0, this_object() );
corpse.c | 97 | set_ownership( (string)this_object()->query_name() );
corpse.c | 99 | add_property( "player", 1 );
corpse.c | 101 | set_race_name( (string)this_object()->query_race() );
corpse.c | 103 | set_race_ob( "/std/races/unknown" );
corpse.c | 105 | set_race_ob( (string)this_object()->query_race_ob() );
corpse.c | 107 | add_adjective( (string *)this_object()->query_adjectives() );
corpse.c | 108 | add_adjective("dead");
corpse.c | 109 | remove_adjective("living");
corpse.c | 110 | start_decay();
corpse.c | 111 | set_max_weight(this_object()->query_max_weight());
corpse.c | 114 | set_length(this_object()->query_height() / 2);
corpse.c | 115 | this_object()->query_armours();
corpse.c | 116 | this_object()->clear_armours();
corpse.c | 117 | this_object()->query_weapons();
corpse.c | 118 | all_inventory( this_object() )->set_tracked_item_status_reason( "DIED" );
corpse.c | 119 | all_inventory( this_object() )->move( corpse );
corpse.c | 121 | sizeof( armour );
corpse.c | 123 | delete( armour, i, 1 );
corpse.c | 127 | set_armours( armour );
corpse.c | 128 | set_worn_by( corpse );
corpse.c | 130 | sizeof( weapons );
corpse.c | 132 | delete( weapons, i, 1 );
corpse.c | 136 | set_holding( weapons );
corpse.c | 137 | set_holder( corpse );
corpse.c | 159 | this_object()->remove_property(PASSED_OUT_PROP);
corpse.c | 160 | this_object()->remove_hide_invis( "hiding" );
corpse.c | 171 | living($1) && !$1->query_property("dead") :));
corpse.c | 175 | this_object()->query_property("death messages");
corpse.c | 180 | this_object()->query_property( "surrender messages" );
corpse.c | 193 | query_al();
corpse.c | 196 | this_object()->query_al() ;
corpse.c | 199 | adjust_alignment(shift);
corpse.c | 202 | query_al();
corpse.c | 206 | this_object()->query_name(), shift);
corpse.c | 210 | this_object()->query_death_xp();
corpse.c | 212 | sizeof( things );
corpse.c | 213 | debug_printf("%O Death XP: %O", this_object(), xp);
corpse.c | 216 | this_object()->query_level();
corpse.c | 218 | query_wimpy();
corpse.c | 219 | query_level();
corpse.c | 228 | adjust_xp(txp, 1);
corpse.c | 230 | return ({ ({ things }), shift/2 });
corpse.c | 233 | return ({ });
corpse.c | 261 | combat_debug("Do death called.");
corpse.c | 265 | this_object()->reset_callingdeath();
corpse.c | 270 | this_object()->move("/room/rubbish");
corpse.c | 278 | this_object()->end_combat();
corpse.c | 280 | this_object()->add_property("xp before death", this_object()->query_xp());
corpse.c | 282 | death_helper(thing, 1);
corpse.c | 283 | catch(sec_life = this_object()->second_life());
corpse.c | 288 | adjust_xp(xp_leftover[1], 1);
corpse.c | 291 | this_object()->stop_all_fight();
corpse.c | 298 | this_object()->add_property( "dead", time() );
corpse.c | 299 | catch(DEATH->someone_died( this_object() ) );
corpse.c | 300 | catch(this_object()->effects_thru_death() );
corpse.c | 301 | this_object()->reset_protectors();
corpse.c | 303 | this_object()->make_corpse();
corpse.c | 305 | move(environment());
corpse.c | 306 | add_property("XP", xp_leftover, 300);
corpse.c | 307 | debug_printf("Command: %O", this_object()->query_last_action());
corpse.c | 310 | ctime(time()), corpse, weapon, _command_name);
corpse.c | 314 | this_object()->move( "/room/rubbish" );
corpse.c | 315 | this_object()->stop_all_fight();
mon_actions.c | 40 | this_object()->shadow_death();
mon_actions.c | 41 | query_shadow_name();
mon_actions.c | 42 | rm(fname+".c");
mon_actions.c | 43 | sizeof(mon_actions);
mon_actions.c | 46 | write_file(fname+".c", read_file("/std/living/mon-shadow.c"));
mon_actions.c | 47 | clone_object(fname);
mon_actions.c | 48 | setup_shadow(this_object());
mon_actions.c | 49 | rm(fname+".c");
mon_actions.c | 67 | do_shadow();
mon_actions.c | 80 | delete(mon_actions, i, 2);
mon_actions.c | 82 | this_object()->shadow_death();
mon_actions.c | 84 | do_shadow();
mon_actions.c | 96 | delete(mon_actions[i+1], i, 2);
mon_actions.c | 98 | remove_trigger(trigger);
mon_actions.c | 107 | return ({ });
gender.c | 24 | query_gender() { return (womens_day?2:gender);
respond_cmd.c | 17 | remove_respond_command(string type, object ob);
respond_cmd.c | 37 | remove_respond_command(type, ob);
respond_cmd.c | 38 | new (class respond_data);
respond_cmd.c | 77 | sizeof(_respond_cmd[type]);
money.c | 41 | present( MONEY_ALIAS, this_object() );
money.c | 43 | clone_object( MONEY_OBJECT );
money.c | 44 | get_money_ob();
money.c | 45 | move( this_object() );
money.c | 65 | query_money_object( 1 )->adjust_money( amount, type );
money.c | 66 | this_object()->do_burden_call();
money.c | 76 | query_money_object(1)->query_money_array();
money.c | 86 | query_money_object(1)->set_money_array( new_array );
money.c | 98 | query_money_object(0);
money.c | 102 | query_value();
money.c | 116 | query_money_object(0);
money.c | 120 | return (int)money->query_value_in( where );
money.c | 134 | query_money_object(0);
money.c | 138 | return (int)money->query_money( type );
money.c | 153 | query_money_object(0);
money.c | 157 | sizeof( m_array );
money.c | 164 | adjust_money( p_array[ 1 ] );
money.c | 166 | sizeof( p_array[ 0 ] );
money.c | 167 | adjust_money( - p_array[ 0 ][ j + 1 ], p_array[ 0 ][ j ] );
spells.c | 57 | return (string)spells[str][S_OBJECT]->help(str);
spells.c | 78 | lower_case( $1 ) : $2 ]) :), lc_spells );
spells.c | 95 | sizeof(spells);
spells.c | 115 | map_delete( spells, 0 );
spells.c | 119 | lower_case(name);
spells.c | 122 | map_delete(spells, spell);
spells.c | 141 | query_spells_nocase();
spells.c | 142 | lower_case(this_object()->expand_nickname(word));
armour.c | 36 | create();
armour.c | 54 | callback(player, type, amount, zone, ({ "pishe" }));
armour.c | 76 | sizeof(_armour_callbacks[level]);
armour.c | 98 | sizeof(_armour_callbacks[level]);
armour.c | 111 | query_armour_callbacks() { return copy(_armour_callbacks);
armour.c | 135 | filter(wearing, (: $1 && environment($1) == this_object() :));
armour.c | 136 | copy( wearing );
armour.c | 146 | query_wearing();
armour.c | 155 | set_worn_by( 0 );
armour.c | 226 | if (member_array(armour, wearing) >
armour.c | 229 | query_type();
armour.c | 230 | this_object()->not_allowed_to_wear( types );
armour.c | 243 | query_equivilant_type( type );
armour.c | 252 | this_object()->query_race_ob();
armour.c | 260 | query_multiple_short( things[ type ] );
armour.c | 263 | query_no_limbs();
armour.c | 282 | this_object()->do_burden_call();
armour.c | 298 | member_array( thing, wearing );
armour.c | 310 | delete( wearing, i, 1 );
armour.c | 311 | this_object()->do_burden_call();
armour.c | 336 | event( environment(), "inform", "zone "+ zone, "combat" );
armour.c | 360 | sizeof(_armour_callbacks[ARM_OUTER]);
armour.c | 383 | query_clothing_zone( zone );
armour.c | 385 | log_file("ARMOUR_DEBUG", "No types for zone: %s", zone);
armour.c | 392 | query_armour() :));
armour.c | 397 | short(), "combat" );
armour.c | 399 | query_ac( type, amount, zone );
armour.c | 416 | sizeof(_armour_callbacks[ARM_INNER]);
armour.c | 441 | this_object()->query_race_ob())->query_ac(type, amount, zone);
armour.c | 459 | this_object()->add_effect("/std/effects/other/wetness", -amount );
armour.c | 464 | query_ac(type, amount, zone);
mon-shadow.c | 13 | shadow(ob,1);
mon-shadow.c | 17 | death_shadow() { destruct( this_object() );
living.no_eff_shad.c | 77 | return_to_default_position(int leaving);
living.no_eff_shad.c | 78 | set_position(string name);
living.no_eff_shad.c | 79 | set_position_on(mixed ob);
living.no_eff_shad.c | 80 | set_position_multiple(int mult);
living.no_eff_shad.c | 81 | set_position_type(string type);
living.no_eff_shad.c | 82 | query_position_on();
living.no_eff_shad.c | 83 | command(string);
living.no_eff_shad.c | 98 | new(class living_data);
living.no_eff_shad.c | 99 | new(class messages);
living.no_eff_shad.c | 100 | create();
living.no_eff_shad.c | 101 | create();
living.no_eff_shad.c | 102 | create();
living.no_eff_shad.c | 103 | create();
living.no_eff_shad.c | 104 | create();
living.no_eff_shad.c | 105 | create();
living.no_eff_shad.c | 106 | create();
living.no_eff_shad.c | 107 | create();
living.no_eff_shad.c | 108 | create();
living.no_eff_shad.c | 109 | enable_commands();
living.no_eff_shad.c | 110 | reset_can_export_inventory();
living.no_eff_shad.c | 111 | reset_effects();
living.no_eff_shad.c | 118 | set_max_items(50);
living.no_eff_shad.c | 128 | add_adjective("living");
living.no_eff_shad.c | 133 | heart_beat();
living.no_eff_shad.c | 134 | heart_beat();
living.no_eff_shad.c | 143 | query_pronoun();
living.no_eff_shad.c | 152 | query_possessive();
living.no_eff_shad.c | 161 | query_objective();
living.no_eff_shad.c | 168 | query_weight();
living.no_eff_shad.c | 205 | update_loc_weight();
living.no_eff_shad.c | 206 | query_loc_weight();
living.no_eff_shad.c | 219 | this_object()->reset_carry_cap();
living.no_eff_shad.c | 222 | query_max_weight();
living.no_eff_shad.c | 229 | adjust_bonus_dex( _liv_data->handicap - new_handicap );
living.no_eff_shad.c | 261 | add_action( "exit_command", "*", 1 );
living.no_eff_shad.c | 270 | this_object()->bypass_queue();
living.no_eff_shad.c | 271 | command( "eat " + file_name( food ) );
living.no_eff_shad.c | 285 | if(sizeof(all_inventory(this_object())) >
living.no_eff_shad.c | 309 | find_object( dest );
living.no_eff_shad.c | 313 | file_name( dest );
living.no_eff_shad.c | 332 | this_object(), ob );
living.no_eff_shad.c | 335 | write( "An unseen force stays your hand.\n" );
living.no_eff_shad.c | 406 | adjust_al( change );
living.no_eff_shad.c | 542 | query_facing() { return copy( facing );
living.no_eff_shad.c | 561 | member_array( word, facing[ 1 ] );
living.no_eff_shad.c | 566 | member_array( word, facing[ 2 ] );
living.no_eff_shad.c | 581 | member_array( word, REL_DIRS );
living.no_eff_shad.c | 586 | member_array( word, ({ "up", "down" }) );
living.no_eff_shad.c | 603 | member_array( word, REL_DIRS );
living.no_eff_shad.c | 609 | member_array( word, ({ "up", "down" }) );
living.no_eff_shad.c | 631 | set_dragging( object thing ) { add_property("dragging", thing);
living.no_eff_shad.c | 637 | query_dragging() { return query_property("dragging");
living.no_eff_shad.c | 642 | reset_dragging() { add_property("dragging", 0);
living.no_eff_shad.c | 657 | this_object()->ignore_from_history( "look" );
living.no_eff_shad.c | 658 | this_object()->bypass_queue();
living.no_eff_shad.c | 659 | command( "look" );
living.no_eff_shad.c | 661 | this_object()->ignore_from_history( "glance" );
living.no_eff_shad.c | 662 | this_object()->bypass_queue();
living.no_eff_shad.c | 663 | command( "glance" );
living.no_eff_shad.c | 701 | return_to_default_position(1);
living.no_eff_shad.c | 704 | room_look();
living.no_eff_shad.c | 705 | return_to_default_position(1);
living.no_eff_shad.c | 719 | explode( word, " " );
living.no_eff_shad.c | 720 | if ( sizeof( bits ) >
living.no_eff_shad.c | 721 | implode( bits[ 1 .. ], " " );
living.no_eff_shad.c | 730 | explode( verb, " " );
living.no_eff_shad.c | 731 | if ( sizeof( bits ) >
living.no_eff_shad.c | 732 | implode( bits[ 1 .. ], " " );
living.no_eff_shad.c | 740 | environment()->query_exits();
living.no_eff_shad.c | 757 | reorient_rel(verb);
living.no_eff_shad.c | 760 | this_object();
living.no_eff_shad.c | 782 | query_int() * query_wis();
living.no_eff_shad.c | 784 | this_object()->interrupt_ritual();
living.no_eff_shad.c | 786 | this_object()->interrupt_spell();
living.no_eff_shad.c | 788 | this_object()->stop_all_fight();
living.no_eff_shad.c | 796 | environment()->query_dest_dir(this_object());
living.no_eff_shad.c | 797 | environment();
living.no_eff_shad.c | 801 | event( old_env, "run_away", direcs[ i ], direcs[ i + 1 ] );
living.no_eff_shad.c | 805 | delete( direcs, i, 2 );
living.no_eff_shad.c | 811 | cannot_get_stuff() { return !query_property( PASSED_OUT );
living.no_eff_shad.c | 829 | stats() + combat::stats();
living.no_eff_shad.c | 880 | member_array(ob, _liv_data->followers);
living.no_eff_shad.c | 882 | delete(_liv_data->followers, i, 1);
living.no_eff_shad.c | 906 | query_current_room() { return environment();
living.no_eff_shad.c | 914 | query_followers() { return copy(_liv_data->followers - ({ 0 }));
living.no_eff_shad.c | 918 | adjust_money(amt, type);
living.no_eff_shad.c | 923 | query_money_array();
living.no_eff_shad.c | 928 | query_money(type);
living.no_eff_shad.c | 932 | query_value() { return money::query_value();
living.no_eff_shad.c | 936 | remove_call_out(_liv_data->burden_call);
living.no_eff_shad.c | 938 | call_out("calc_burden", 1);
living.no_eff_shad.c | 952 | do_burden_call();
living.no_eff_shad.c | 954 | if(sizeof(all_inventory()) >
living.no_eff_shad.c | 956 | remove_call_out("test_number_of_items");
living.no_eff_shad.c | 957 | call_out("test_number_of_items", 5 + random(5));
living.no_eff_shad.c | 965 | do_burden_call();
living.no_eff_shad.c | 974 | all_inventory() - query_armours() - query_holding();
living.no_eff_shad.c | 975 | sizeof(things) - query_burden_limit();
living.no_eff_shad.c | 1010 | query_multiple_short( dropped ) +".\n" );
living.no_eff_shad.c | 1011 | this_object()->dest_hide_shadow();
living.no_eff_shad.c | 1014 | query_multiple_short( dropped ) +".\n", this_object() );
living.no_eff_shad.c | 1023 | do_burden_call();
living.no_eff_shad.c | 1024 | remove_call_out("test_number_of_items");
living.no_eff_shad.c | 1025 | call_out("test_number_of_items", 5 + random(5));
living.no_eff_shad.c | 1031 | member_array( $1, query_holding() ) != -1 ? -1 : 0 ) :) );
living.no_eff_shad.c | 1036 | return_to_default_position(0);
living.no_eff_shad.c | 1037 | attack_by(ob);
living.no_eff_shad.c | 1042 | return_to_default_position(0);
living.no_eff_shad.c | 1043 | attack_ob(ob);
living.no_eff_shad.c | 1134 | set_default_position("/cmds/living/kneel");
living.no_eff_shad.c | 1136 | set_default_position(({ "running" }));
living.no_eff_shad.c | 1140 | the_short() + " starts to fish.\n" }));
living.no_eff_shad.c | 1142 | set_default_position(({ "running" }));
living.no_eff_shad.c | 1143 | return_to_default_position(1);
living.no_eff_shad.c | 1170 | query_default_position();
living.no_eff_shad.c | 1175 | environment()->query_default_position(this_object());
living.no_eff_shad.c | 1178 | query_default_position();
living.no_eff_shad.c | 1187 | environment()->query_default_position(this_object());
living.no_eff_shad.c | 1200 | catch(pos->position_floor(this_object()));
living.no_eff_shad.c | 1207 | catch(pos->position(this_object()));
living.no_eff_shad.c | 1212 | if (sizeof(pos) >
living.no_eff_shad.c | 1214 | tell_object(this_object(), pos[POSITION_ME_MESS_INDEX]);
living.no_eff_shad.c | 1217 | tell_room(environment(), pos[POSITION_REST_MESS], this_object());
living.no_eff_shad.c | 1220 | set_position(pos[POSITION_TYPE_INDEX]);
living.no_eff_shad.c | 1221 | set_position_on(0);
living.no_eff_shad.c | 1222 | set_position_type(0);
living.no_eff_shad.c | 1223 | set_position_multiple(0);
living.no_eff_shad.c | 1271 | allocate(POSITION_ARRAY_SIZE);
living.no_eff_shad.c | 1290 | allocate(POSITION_ARRAY_SIZE);
living.no_eff_shad.c | 1328 | allocate(POSITION_ARRAY_SIZE);
living.no_eff_shad.c | 1388 | the_short();
living.no_eff_shad.c | 1423 | query_position_on_short();
living.no_eff_shad.c | 1450 | query_arcane_shields() { return ({ });
crafts.c | 46 | lower_case( $1 ) : $2 ]) :), lc_processes );
crafts.c | 69 | lower_case(name);
crafts.c | 72 | map_delete(_processes, process);
plain.c | 25 | create();
plain.c | 28 | set_light(80);
plain.c | 29 | set_climate("Aw");
plain.c | 30 | add_zone("plain");
plain.c | 71 | add_item(({"floor", "ground", "earth"}), "The ground is mostly grassy.");
plain.c | 89 | this_object(), "do_get_rock" }) }) );
plain.c | 91 | this_object()->setup();
plain.c | 92 | this_object()->reset();
plain.c | 103 | return ( rock = clone_object( (string)query_property( "rock object" ) ) );
plain.c | 107 | clone_object( "/obj/mineral" );
plain.c | 111 | make_mineral( rock_type, 1 + random( rock_size ) );
plain.c | 113 | dest_me();
plain.c | 123 | return (flower = clone_object((string)query_property("flower object")));
plain.c | 126 | clone_object("/std/plant");
plain.c | 130 | set_plant(flower_type);
plain.c | 131 | set_plant_type(flower_type);
plain.c | 134 | add_plural( pluralize( flower_type ) );
plain.c | 137 | dest_me();
mountain.c | 37 | create();
mountain.c | 38 | add_property("climate", ({-10, 0, 0 }) );
mountain.c | 57 | add_property("flower type", "snowdrop");
mountain.c | 81 | this_object(), "do_get_rock" }) }) );
mountain.c | 86 | add_property("rock size", 5+random(20));
mountain.c | 87 | add_property("track type", "mountain");
mountain.c | 97 | return ( rock = clone_object( (string)query_property( "rock object" ) ) );
mountain.c | 101 | clone_object( "/obj/mineral" );
mountain.c | 105 | make_mineral(rock_type, 1 + random(rock_size));
mountain.c | 107 | dest_me();
mountain.c | 116 | printf("Verb: %s\n", verb);
mountain.c | 118 | return (flower = clone_object((string)query_property("flower object")));
mountain.c | 121 | clone_object("/std/plant");
mountain.c | 125 | set_plant(flower_type);
mountain.c | 126 | set_plant_type(flower_type);
mountain.c | 129 | add_plural( capitalize( flower_type ) );
mountain.c | 132 | dest_me();
road.c | 17 | create();
road.c | 19 | add_property("track type", "road");
road.c | 20 | add_zone("road");
road.c | 23 | this_object()->setup();
road.c | 24 | this_object()->reset();
desert.c | 23 | create();
desert.c | 24 | set_climate("Bw");
desert.c | 28 | add_item("rock", "There are small rocks here and there in the sand.");
desert.c | 32 | add_property("rock size", 2+random(5));
desert.c | 33 | add_property("track type", "desert");
desert.c | 34 | add_property("sand object", "/obj/media/sand");
desert.c | 46 | clone_object(query_property("rock object"));
desert.c | 51 | clone_object( "/obj/mineral" );
desert.c | 55 | make_mineral(rock_type, 1 + random(rock_size));
desert.c | 58 | dest_me();
desert.c | 66 | clone_object(query_property("sand object"));
desert.c | 69 | this_player()->add_succeeded_mess(sand, "$N $V $D.\n", ({ }) );
desert.c | 72 | dest_me();
woodland.c | 24 | create();
woodland.c | 26 | set_light(80);
woodland.c | 27 | add_zone("woodland");
woodland.c | 51 | add_property("flower type", "bluebell");
woodland.c | 61 | add_item("tree", "The trees are in their full foliage right now.");
woodland.c | 80 | this_object(), "do_get_berry"})}));
woodland.c | 83 | this_object(), "do_get_leaf"})}));
woodland.c | 91 | add_extra_look(this_object());
woodland.c | 107 | this_object(), "do_get_rock" }) }) );
woodland.c | 108 | add_property("track type", "woodland");
woodland.c | 110 | this_object()->setup();
woodland.c | 111 | this_object()->reset();
woodland.c | 120 | extra_look();
woodland.c | 137 | return ( rock = clone_object( (string)query_property( "rock object" ) ) );
woodland.c | 141 | clone_object( "/obj/mineral" );
woodland.c | 145 | make_mineral( rock_type, 1 + random( rock_size ) );
woodland.c | 147 | dest_me();
woodland.c | 155 | return (flower = clone_object((string)query_property("flower object")));
woodland.c | 158 | clone_object("/std/plant");
woodland.c | 162 | set_plant(flower_type);
woodland.c | 163 | set_plant_type(flower_type);
woodland.c | 166 | set_main_plural(flower_type + "s");
woodland.c | 169 | dest_me();
woodland.c | 182 | clone_object( "/obj/food" );
woodland.c | 183 | set_name(berry_type);
woodland.c | 184 | set_short(berry_type);
woodland.c | 187 | add_alias("berry");
woodland.c | 190 | dest_me();
woodland.c | 202 | clone_object("/std/object");
woodland.c | 203 | set_name("leaf");
woodland.c | 204 | set_short(leaf_type+" leaf");
woodland.c | 207 | add_adjective(leaf_type);
woodland.c | 209 | dest_me();
basic.c | 30 | return ( rock = clone_object( (string)query_property( "rock object" ) ) );
basic.c | 34 | clone_object( "/obj/mineral" );
basic.c | 38 | make_mineral( rock_type, 1 + random( rock_size ) );
basic.c | 40 | dest_me();
workroom.c | 11 | set_short("workroom of "+ CREATOR);
workroom.c | 16 | add_property( "determinate", "the ");
workroom.c | 21 | set_light(100);
workroom.c | 48 | add_item( "dragon", "I told you, you don't notice it winking at you." );
workroom.c | 54 | add_item( "out basket", "The out basket is completely empty." );
workroom.c | 82 | add_exit("common", "/w/common", "door");
workroom.c | 83 | add_exit("drum", CONFIG_START_LOCATION, "path");
workroom.c | 84 | add_exit("learning", "/d/learning/main", "path");
workroom.c | 99 | add_alias("north", "drum");
workroom.c | 100 | add_alias("south", "common");
workroom.c | 105 | add_exit(CREATOR, "/w/"+CREATOR+"/workroom", "door");
workroom.c | 114 | clone_object("/obj/misc/button");
workroom.c | 115 | move(this_object());
workroom.c | 118 | clone_object("/obj/misc/board_mas");
workroom.c | 119 | move(this_object() );
workroom.c | 126 | clone_object("/obj/cont_save");
workroom.c | 127 | set_name( "bookcase" );
workroom.c | 128 | set_short( "oaken bookcase" );
workroom.c | 129 | add_adjective( "wooden" );
workroom.c | 130 | add_adjective( "oak" );
workroom.c | 131 | add_adjective( "oaken" );
workroom.c | 132 | add_property( "there", "standing against the wall" );
workroom.c | 137 | set_weight( 2000 );
workroom.c | 138 | set_max_weight( 4000 );
workroom.c | 139 | reset_get();
workroom.c | 144 | check_euid();
workroom.c | 148 | set_save_file( "/w/"+CREATOR+"/creator_kit" );
workroom.c | 150 | move( this_object() );
workroom.c | 159 | return ({ bookcase, board });
workroom.c | 189 | notify_fail( "" );
horse.c | 6 | set_name( "horse" );
horse.c | 7 | set_long( "A large hoofed mammal.  Surprise.\n" );
horse.c | 8 | set_height( 200 );
horse.c | 9 | set_weight( 7000 );
horse.c | 55 | set_desc( "a large, hairy quadruped.  It looks like a horse" );
horse.c | 57 | add_ac( "blunt", "blunt", 50 );
horse.c | 58 | add_ac( "sharp", "sharp", 20 );
horse.c | 59 | add_ac( "pierce", "pierce", 20 );
horse.c | 60 | set_skin( "skin" );
horse.c | 62 | set_stats( ({ 4, 4, -2, 6, -2 }) );
horse.c | 68 | query_skill_bonus( "fighting.combat.melee.unarmed" );
horse.c | 69 | sqrt( number );
horse.c | 71 | remove_attack( "hands" );
horse.c | 72 | remove_attack( "feet" );
horse.c | 74 | remove_attack( "chew" );
horse.c | 75 | remove_attack( "hoof" );
horse.c | 82 | tactics( "response dodge" );
human.c | 36 | set_name("human");
human.c | 37 | set_weight(1600);
human.c | 38 | set_height(175);
human.c | 39 | add_ac( "blunt", "blunt", 3 );
human.c | 40 | add_ac( "pierce", "pierce", 2 );
human.c | 41 | add_ac( "sharp", "sharp", 2 );
human.c | 42 | set_sight( ({ 5, 25, 200, 300 }) );
human.c | 55 | query_skill_bonus( "fighting.combat.melee.unarmed" );
human.c | 56 | sqrt( number );
human.c | 57 | remove_attack( "hands" );
human.c | 58 | remove_attack( "feet" );
human.c | 70 | dest_hide_shadow();
human.c | 71 | tell_object( thing, "The heat is just too much for you.\n" );
human.c | 74 | the_short() +" expires.\n", thing );
human.c | 75 | do_death();
human.c | 80 | adjust_tmp_wis(-1);
human.c | 81 | adjust_tmp_int(-1);
human.c | 86 | adjust_tmp_wis(-1);
human.c | 88 | adjust_tmp_int(-1);
human.c | 92 | tell_object(thing, "You feel really hot.\n");
human.c | 96 | tell_object(thing, "You feel quite warm.\n");
human.c | 103 | tell_object(thing, "You feel quite cold.\n");
human.c | 107 | tell_object(thing, "You feel cold to your bones.\n");
human.c | 111 | tell_object(thing, "You're so cold you feel your energy being drained.\n");
human.c | 113 | adjust_tmp_str(-1);
human.c | 115 | adjust_tmp_con(-1);
human.c | 121 | adjust_tmp_str(-1);
human.c | 122 | adjust_tmp_con(-1);
human.c | 125 | dest_hide_shadow();
human.c | 126 | tell_object( thing, "The cold is just too much for you.\n" );
human.c | 129 | the_short() +" expires.\n", thing );
human.c | 130 | do_death();
human.c | 136 | new_parser("sweat");
human.c | 140 | new_parser("shiver");
amphibian.c | 5 | create();
amphibian.c | 8 | set_desc( "your standard amphibian" );
amphibian.c | 9 | set_height( 40 );
amphibian.c | 10 | set_weight( 600 );
amphibian.c | 36 | set_skin( "skin" );
amphibian.c | 38 | set_stats( ({ -4, 10, -4, -4, -6 }) );
amphibian.c | 41 | this_object()->setup();
base.c | 65 | create();
base.c | 69 | allocate( 5 );
base.c | 79 | this_object()->setup();
base.c | 109 | query_sight() { return copy(sight);
base.c | 161 | query_stats() { return copy(stats);
base.c | 221 | this_object()->find_limbs();
base.c | 223 | copy(limbs);
base.c | 237 | sizeof( bits );
base.c | 249 | query_acs() { return copy(acs);
base.c | 268 | query_attacks() { return copy(attacks);
base.c | 306 | member_array( word, bits );
base.c | 308 | return ({ });
base.c | 325 | explode(bits[i], " ");
base.c | 326 | pluralize(str_bits[<1]);
base.c | 382 | query_old_possible_bits( word );
base.c | 385 | fixup_bits();
base.c | 387 | explode(word, " ");
base.c | 416 | fixup_bits();
base.c | 418 | explode(word, " ");
base.c | 443 | member_array( bit_short, bits );
base.c | 462 | member_array( word, bits );
base.c | 466 | delete( bits, i, 3 );
base.c | 486 | set_base_weight( 1 + weight + modifier( weight ) );
base.c | 489 | set_height( 1 + height + modifier( height ) );
base.c | 491 | adjust_bonus_con( stats[ 0 ] );
base.c | 492 | adjust_bonus_dex( stats[ 1 ] );
base.c | 493 | adjust_bonus_int( stats[ 2 ] );
base.c | 494 | adjust_bonus_str( stats[ 3 ] );
base.c | 495 | adjust_bonus_wis( stats[ 4 ] );
base.c | 496 | reset_all();
base.c | 498 | set_skin( skin );
base.c | 518 | return (int)previous_object()->query_piercings( "ear" );
base.c | 562 | add_ac( acs[ i ], acs[ i + 1 ], acs[ i + 2 ] );
base.c | 585 | return ({ base / scale, num, rand / scale });
base.c | 595 | query_skill_bonus( "fighting.combat.melee.unarmed" );
base.c | 596 | sqrt( number );
base.c | 599 | remove_attack( attacks[ i ] );
mole.c | 5 | set_name( "mole" );
mole.c | 9 | set_height( 30 );
mole.c | 10 | set_weight( 10 );
mole.c | 11 | set_desc( "This is a blind and deaf mole." );
mole.c | 13 | set_sight( ({ -100, -60, 40, 60 }) );
mole.c | 14 | set_stats( ({ -2, 2, -6, -2, -6 }) );
mole.c | 20 | query_skill_bonus( "fighting.combat.melee.unarmed" );
mole.c | 23 | remove_attack( "hands" );
mole.c | 24 | remove_attack( "feet" );
mole.c | 26 | remove_attack( "bite" );
mole.c | 27 | remove_attack( "claws" );
mole.c | 34 | tactics( "response dodge" );
raptor.c | 4 | set_name( "raptor" );
raptor.c | 7 | set_height( 65 );
raptor.c | 8 | set_weight( 200 );
raptor.c | 9 | set_desc( "a sharp-eyed raptor" );
raptor.c | 11 | remove_bit( "gizzard" );
raptor.c | 13 | set_stats( ({ 0, 14, -4, 2, -6 }) );
raptor.c | 26 | random( level );
raptor.c | 28 | add_ac( "blunt", "blunt", level );
raptor.c | 29 | add_ac( "pierce", "pierce", level / 4 );
raptor.c | 30 | add_ac( "sharp", "sharp", level / 4 );
raptor.c | 36 | query_skill_bonus( "fighting.combat.melee.unarmed" );
raptor.c | 39 | remove_attack( "hands" );
raptor.c | 40 | remove_attack( "feet" );
raptor.c | 42 | remove_attack( "beak" );
raptor.c | 43 | remove_attack( "claws" );
raptor.c | 50 | tactics( "response dodge" );
luggage.c | 4 | set_name( "luggage" );
luggage.c | 5 | set_long( "A sapient pearwood luggage.\n" );
luggage.c | 6 | set_desc( "a nice set of luggage" );
luggage.c | 7 | set_height( 75 );
luggage.c | 8 | set_weight( 5000 );
luggage.c | 22 | set_skin( "casing" );
luggage.c | 24 | add_ac( "blunt", "blunt", 25 );
luggage.c | 25 | add_ac( "pierce", "pierce", 25 );
luggage.c | 26 | add_ac( "sound", "sound", 1000 );
luggage.c | 27 | add_ac( "gas", "gas", 1000 );
luggage.c | 29 | set_stats( ({ 10, 6, -2, 10, -2 }) );
luggage.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
luggage.c | 38 | remove_attack( "hands" );
luggage.c | 43 | tactics( "response dodge" );
toad.c | 4 | set_name( "toad" );
toad.c | 5 | set_long( "Toads are amphibians" );
toad.c | 6 | set_height(10);
toad.c | 7 | set_weight(10);
toad.c | 8 | set_desc( "an warty toad" );
toad.c | 10 | add_ac( "blunt", "blunt", 5 );
toad.c | 11 | add_ac( "pierce", "pierce", 4 );
toad.c | 12 | add_ac( "sharp", "sharp", 3 );
toad.c | 14 | add_attack( "bite", 50, ({ 10, 2, 6 }) );
toad.c | 16 | set_sight( ({ 5, 20, 200, 300 }) );
toad.c | 17 | set_stats( ({ -4, 10, -4, -4, -6 }) );
toad.c | 21 | start_player( thing );
toad.c | 22 | tactics( "response dodge" );
elephant.c | 4 | set_name( "elephant" );
elephant.c | 8 | set_height( 280 );
elephant.c | 9 | set_weight( 100000 );
elephant.c | 10 | set_desc( "an elephant that looks back at you with small nice eyes" );
elephant.c | 12 | remove_bit( "nose" );
elephant.c | 13 | remove_bit( "head" );
elephant.c | 19 | add_bit( "right tusk", "tusk", ({ "head", 20, ({ "/std/bit", 2 }) }) );
elephant.c | 20 | add_bit( "left tusk", "tusk", ({ "head", 20, ({ "/std/bit", 2 }) }) );
elephant.c | 21 | add_bit( "trunk", "trunk", ({ "head", 30, 0 }) );
elephant.c | 23 | remove_bit( "left front leg" );
elephant.c | 24 | remove_bit( "right front leg" );
elephant.c | 25 | remove_bit( "left rear leg" );
elephant.c | 26 | remove_bit( "right rear leg" );
elephant.c | 27 | remove_bit( "left front hoof" );
elephant.c | 28 | remove_bit( "right front hoof" );
elephant.c | 29 | remove_bit( "left rear hoof" );
elephant.c | 30 | remove_bit( "right rear hoof" );
elephant.c | 32 | add_bit( "left front leg", "leg", ({ 0, 150, 0, "left front foot" }) );
elephant.c | 33 | add_bit( "right front leg", "leg", ({ 0, 150, 0, "right front foot" }) );
elephant.c | 34 | add_bit( "left rear leg", "leg", ({ 0, 150, 0, "left rear leg" }) );
elephant.c | 35 | add_bit( "right rear leg", "leg", ({ 0, 150, 0, "right rear leg" }) );
elephant.c | 37 | add_bit( "left front foot", "foot", ({ "left front leg", 30, 0 }) );
elephant.c | 38 | add_bit( "right front foot", "foot", ({ "right front leg", 30, 0 }) );
elephant.c | 39 | add_bit( "left rear foot", "foot", ({ "left rear leg", 30, 0 }) );
elephant.c | 40 | add_bit( "right rear foot", "foot", ({ "right rear leg", 30, 0 }) );
elephant.c | 42 | add_bit( "tail", "tail", ({ 0, 15, 0 }) );
elephant.c | 47 | add_ac( "blunt", "blunt", ({ 40, 20}) );
elephant.c | 48 | add_ac( "pierce", "pierce", ({ 30, 20 }) );
elephant.c | 49 | add_ac( "sharp", "sharp", ({ 50, 20 }) );
elephant.c | 50 | add_ac( "acid", "acid", 20 );
elephant.c | 51 | add_ac( "fire", "fire", 20 );
elephant.c | 53 | set_stats( ({ 30, -6, -4, 16, -2 }) );
elephant.c | 57 | remove_attack( "hands" );
elephant.c | 59 | remove_attack( "tusks" );
elephant.c | 60 | remove_attack( "crush" );
elephant.c | 61 | remove_attack( "ram" );
elephant.c | 63 | add_attack( "tusks", 25, ({200, 10, 30}), "pierce", "unarmed", 0 );
elephant.c | 64 | add_attack( "crush", 10, ({300, 10, 50}), "blunt", "unarmed", 0 );
elephant.c | 75 | add_attack( "ram", 25, ({200, 10, 20}), "blunt", "unarmed", 0 );
elephant.c | 84 | add_attack( "trunk", 50, ({100, 5, 20}), "blunt", "unarmed", 0 );
spider.c | 6 | set_name( "spider" );
spider.c | 7 | set_long( "A small, poisonous, hairy spider.\n" );
spider.c | 8 | set_desc( "a hairy arachnid" );
spider.c | 9 | set_height( 5 );
spider.c | 10 | set_weight( 2 );
spider.c | 19 | set_stats( ({ -6, 4, -6, -6, -6 }) );
spider.c | 32 | add_skill_level( "other.health", level * 2 );
spider.c | 33 | add_ac( "blunt", "blunt", level / 2 );
spider.c | 34 | add_ac( "pierce", "pierce", level / 4 );
spider.c | 35 | add_ac( "sharp", "sharp", level / 3 );
spider.c | 39 | remove_attack( "hands" );
spider.c | 40 | remove_attack( "feet" );
spider.c | 41 | remove_attack( "standard" );
spider.c | 43 | remove_attack( "bite" );
spider.c | 44 | remove_attack( "chew" );
spider.c | 47 | this_object() }) );
spider.c | 51 | tactics( "response dodge" );
spider.c | 57 | one_short() + " who seethes in agony!\n" );
spider.c | 61 | add_effect( POISON_EFFECT, 100 );
bear.c | 6 | set_name( "bear" );
bear.c | 7 | set_desc( "a furry bear" );
bear.c | 8 | set_height( 200 );
bear.c | 9 | set_weight( 8000 );
bear.c | 11 | set_stats( ({ 6, 4, -2, 8, -4 }) );
bear.c | 26 | add_ac( "blunt", "blunt", 20 + level / 3 );
bear.c | 27 | add_ac( "sharp", "sharp", 50 + level );
bear.c | 28 | add_ac( "pierce", "pierce", 60 + 2 * level );
bear.c | 34 | query_skill_bonus( "fighting.combat.melee.unarmed" );
bear.c | 37 | remove_attack( "hands" );
bear.c | 38 | remove_attack( "feet" );
bear.c | 40 | remove_attack( "claws" );
bear.c | 41 | remove_attack( "bite" );
bear.c | 48 | tactics( "response dodge" );
bear.c | 49 | tactics( "attitude offensive" );
deer.c | 6 | set_name( "deer" );
deer.c | 7 | set_long( "A medium-sized hoofed mammal.  Surprise.\n" );
deer.c | 8 | set_height( 250 );
deer.c | 9 | set_weight( 4000 );
deer.c | 57 | set_desc( "a medium-sized, hairy quadruped.  It looks like a deer" );
deer.c | 59 | add_ac( "blunt", "blunt", 50 );
deer.c | 60 | add_ac( "sharp", "sharp", 20 );
deer.c | 61 | add_ac( "pierce", "pierce", 20 );
deer.c | 62 | set_skin( "skin" );
deer.c | 64 | set_stats( ({ 4, 4, -2, 6, -2 }) );
deer.c | 70 | query_skill_bonus( "fighting.combat.melee.unarmed" );
deer.c | 71 | sqrt( number );
deer.c | 73 | remove_attack( "hands" );
deer.c | 74 | remove_attack( "feet" );
deer.c | 76 | remove_attack( "antlers" );
deer.c | 77 | remove_attack( "hoof" );
deer.c | 84 | tactics( "response dodge" );
sheep.c | 4 | set_name( "sheep" );
sheep.c | 7 | set_height( 50 );
sheep.c | 8 | set_weight( 800 );
sheep.c | 9 | set_skin( "fleece" );
sheep.c | 10 | set_desc( "a wooly sheep" );
sheep.c | 12 | add_ac( "blunt", "blunt", 50 );
sheep.c | 13 | add_ac( "pierce", "pierce", 20 );
sheep.c | 14 | add_ac( "sharp", "sharp", 20 );
sheep.c | 16 | set_stats( ({ 0, 0, -6, -2, -6 }) );
sheep.c | 20 | remove_attack( "hands" );
sheep.c | 21 | remove_attack( "feet" );
sheep.c | 22 | remove_attack( "standard" );
sheep.c | 24 | remove_attack( "chew" );
sheep.c | 25 | remove_attack( "hoof" );
sheep.c | 32 | tactics( "response dodge" );
cabbage.c | 6 | set_name( "cabbage" );
cabbage.c | 9 | set_height( 20 );
cabbage.c | 10 | set_weight( 40 );
cabbage.c | 11 | set_desc( "a cute little green-fronded cabbage.  Awww" );
cabbage.c | 12 | set_skin( "fronds" );
cabbage.c | 23 | set_stats( ({ -4, -4, -6, -4, -6 }) );
cabbage.c | 34 | environment( brassica ) );
cabbage.c | 44 | do_command( "gibber" );
cabbage.c | 45 | run_away();
cabbage.c | 51 | query_skill_bonus( "fighting.combat.melee.unarmed" );
cabbage.c | 54 | remove_attack( "hands" );
cabbage.c | 55 | remove_attack( "feet" );
cabbage.c | 57 | remove_attack( "fronds" );
cabbage.c | 70 | tactics( "response dodge" );
cabbage.c | 71 | tactics( "attitude offensive" );
hare.c | 4 | set_name( "hare" );
hare.c | 5 | set_long( "This is a hare with long ears.\n" );
hare.c | 6 | set_height( 50 );
hare.c | 7 | set_weight( 100 );
hare.c | 8 | set_desc( "a large and meaty hare" );
hare.c | 10 | set_stats( ({ -2, 8, -4, -4, -6 }) );
hare.c | 23 | add_ac( "blunt", "blunt", level );
hare.c | 24 | add_ac( "sharp", "sharp", 2 + level );
hare.c | 25 | add_ac( "pierce", "pierce", 2 * level );
hare.c | 31 | query_skill_bonus( "fighting.combat.melee.unarmed" );
hare.c | 34 | remove_attack( "hands" );
hare.c | 35 | remove_attack( "feet" );
hare.c | 37 | remove_attack( "bite" );
hare.c | 42 | tactics( "response dodge" );
hare.c | 43 | tactics( "attitude defensive" );
caterpillar.c | 4 | set_name( "caterpillar" );
caterpillar.c | 5 | set_long( "The elongated wormlike larva of a butterfly or moth.\n" );
caterpillar.c | 6 | set_height( 5 );
caterpillar.c | 7 | set_weight( 2 );
caterpillar.c | 8 | set_desc( "a caterpillar, crawling along the ground" );
caterpillar.c | 10 | set_stats( ({ -6, -6, -6, -6, -6 }) );
caterpillar.c | 19 | all_inventory( environment( eater ) ) - ({ eater });
caterpillar.c | 22 | sizeof( things );
caterpillar.c | 41 | add_property( "eating", 1 );
caterpillar.c | 42 | add_property( "being eaten", 1 );
caterpillar.c | 43 | query_weight();
caterpillar.c | 44 | random( time );
caterpillar.c | 46 | call_out( "done_eating", time, eater, flowers );
caterpillar.c | 51 | remove_property( "eating" );
caterpillar.c | 61 | dest_me();
cockroach.c | 4 | set_desc( "a nasty cockroach, ugh" );
cockroach.c | 5 | set_name( "cockroach" );
cockroach.c | 6 | set_height( 5 );
cockroach.c | 7 | set_weight( 2 );
cockroach.c | 9 | add_ac( "blunt", "blunt", 40 );
cockroach.c | 10 | add_ac( "sharp", "sharp", 20 );
cockroach.c | 11 | add_ac( "pierce", "pierce", 10 );
cockroach.c | 13 | set_stats( ({ -6, 4, -4, -6, -6 }) );
cockroach.c | 19 | query_skill_bonus( "fighting.combat.melee.unarmed" );
cockroach.c | 20 | sqrt( number );
cockroach.c | 22 | remove_attack( "hands" );
cockroach.c | 23 | remove_attack( "feet" );
cockroach.c | 25 | remove_attack( "claws" );
cockroach.c | 26 | remove_attack( "bite" );
cockroach.c | 33 | tactics( "response dodge" );
cockroach.c | 34 | tactics( "attitude defensive" );
beetle.c | 4 | set_name( "beetle" );
beetle.c | 5 | set_desc( "a hard-carapaced insect that scuttles along the ground" );
beetle.c | 6 | set_height( 5 );
beetle.c | 7 | set_weight( 2 );
beetle.c | 9 | add_bit( "left wing cover", "cover", ({ "thorax", 1, 0 }) );
beetle.c | 10 | add_bit( "right wing cover", "cover", ({ "thorax", 1, 0 }) );
beetle.c | 14 | set_stats( ({ -6, 4, -6, -6, -6 }) );
beetle.c | 18 | start_player( thing );
beetle.c | 19 | tactics( "response dodge" );
beetle.c | 20 | tactics( "attitude defensive" );
venomous_snake.c | 4 | set_name( "snake" );
venomous_snake.c | 7 | set_height( 5 );
venomous_snake.c | 8 | set_weight( 60 );
venomous_snake.c | 9 | set_desc( "a serpent, the type with no legs but with scales." );
venomous_snake.c | 41 | add_ac( "blunt", "blunt", 40 );
venomous_snake.c | 42 | add_ac( "sharp", "sharp", 20 );
venomous_snake.c | 43 | add_ac( "pierce", "pierce", 10 );
venomous_snake.c | 45 | set_stats( ({ 0, 0, -4, 4, -4 }) );
venomous_snake.c | 51 | query_skill_bonus( "fighting.combat.melee.unarmed" );
venomous_snake.c | 52 | sqrt( number );
venomous_snake.c | 54 | remove_attack( "hands" );
venomous_snake.c | 55 | remove_attack( "feet" );
venomous_snake.c | 57 | remove_attack( "bite" );
venomous_snake.c | 58 | remove_attack( "crush" );
venomous_snake.c | 61 | this_object() }) );
venomous_snake.c | 62 | tactics( "response dodge" );
venomous_snake.c | 68 | one_short() + " who seethes in agony!\n" );
venomous_snake.c | 72 | add_effect( POISON_EFFECT, random(200) );
venomous_snake.c | 76 | return ({ "head", "body", "body", "body", "tail", "tail", "tail" });
cow.c | 6 | set_name( "cow" );
cow.c | 7 | set_long( "A large hoofed mammal.  Surprise.\n" );
cow.c | 8 | set_height( 175 );
cow.c | 9 | set_weight( 16000 );
cow.c | 10 | set_desc( "a large, hairy quadruped reminding you very much of a cow" );
cow.c | 12 | query_bit( "head" );
cow.c | 14 | remove_bit( "head" );
cow.c | 15 | add_bit( "head", "head", new_head[ 2 ] );
cow.c | 16 | add_bit( "left horn", "horn", ({ "head", 10, 0 }) );
cow.c | 17 | add_bit( "right horn", "horn", ({ "head", 10, 0 }) );
cow.c | 18 | add_bit( "udders", "udders", ({ 0, 60, 0 }) );
cow.c | 19 | add_bit( "tail", "tail", ({ 0, 15, 0 }) );
cow.c | 24 | add_ac( "blunt", "blunt", 50 );
cow.c | 25 | add_ac( "pierce", "pierce", 20 );
cow.c | 26 | add_ac( "sharp", "sharp", 20 );
cow.c | 28 | add_attack( "bite", 20, ({ 40, 8, 10 }) );
cow.c | 29 | add_attack( "feet", 50, ({ 60, 10, 40 }) );
cow.c | 31 | set_stats( ({ 4, -2, -4, 6, -6 }) );
cow.c | 37 | query_skill_bonus( "fighting.combat.melee.unarmed" );
cow.c | 38 | sqrt( number );
cow.c | 40 | remove_attack( "hands" );
cow.c | 41 | remove_attack( "feet" );
cow.c | 43 | remove_attack( "horns" );
cow.c | 44 | remove_attack( "hoof" );
cow.c | 54 | tactics( "response dodge" );
guppy.c | 4 | set_name( "guppy" );
guppy.c | 5 | set_long( "Fish,  yes.  A fish.  Nice generic standard fish thing.\n" );
guppy.c | 6 | set_height( 15 );
guppy.c | 7 | set_weight( 40 );
guppy.c | 8 | set_desc( "a beautiful looking guppy" );
guppy.c | 10 | set_stats( ({ -2, 14, -4, -4, -6 }) );
guppy.c | 18 | start_player( thing );
guppy.c | 19 | add_effect( "/std/effects/other/fish_effect", ({ }) );
guppy.c | 20 | add_property( "gills", 1 );
guppy.c | 21 | tactics( "response dodge" );
rodent.c | 4 | set_name( "rodent" );
rodent.c | 5 | set_long( "A generic rodent object.\n" );
rodent.c | 6 | set_height( 10 );
rodent.c | 7 | set_weight( 10 );
rodent.c | 8 | set_desc( "a small rodent" );
rodent.c | 10 | set_stats( ({ -4, 8, -4, -4, -6 }) );
rodent.c | 25 | add_ac( "blunt", "blunt", level );
rodent.c | 26 | add_ac( "sharp", "sharp", 2 + level );
rodent.c | 27 | add_ac( "pierce", "pierce", 2 * level );
rodent.c | 33 | query_skill_bonus( "fighting.combat.melee.unarmed" );
rodent.c | 34 | sqrt( number );
rodent.c | 36 | remove_attack( "hands" );
rodent.c | 37 | remove_attack( "feet" );
rodent.c | 39 | remove_attack( "bite" );
rodent.c | 44 | tactics( "response dodge" );
dog.c | 8 | set_name( "dog" );
dog.c | 9 | set_long( "A street dog. I wouldn't stay too near, it could bite.\n" );
dog.c | 10 | set_desc( "a nasty dog" );
dog.c | 11 | set_height( 50 );
dog.c | 12 | set_weight( 700 );
dog.c | 14 | set_stats( ({ 4, 10, -2, 6, -4 }) );
dog.c | 27 | add_ac( "blunt", "blunt", 40 );
dog.c | 28 | add_ac( "sharp", "sharp", 20 );
dog.c | 29 | add_ac( "pierce", "pierce", 10 );
dog.c | 31 | add_skill_level( "other.perception", 200 );
dog.c | 37 | query_skill_bonus( "fighting.combat.melee.unarmed" );
dog.c | 38 | sqrt( number );
dog.c | 40 | remove_attack( "hands" );
dog.c | 41 | remove_attack( "feet" );
dog.c | 43 | remove_attack( "claws" );
dog.c | 44 | remove_attack( "bite" );
dog.c | 51 | tactics( "response dodge" );
fish.c | 4 | set_name( "fish" );
fish.c | 5 | set_long( "Fish,  yes.  A fish.  Nice generic standard fish thing.\n" );
fish.c | 6 | set_height( 15 );
fish.c | 7 | set_weight( 40 );
fish.c | 8 | set_desc( "a fish, the kind with fins" );
fish.c | 10 | set_stats( ({ -2, 14, -4, -4, -6 }) );
fish.c | 15 | call_out( "do_drown", 4, player );
fish.c | 29 | adjust_hp( -i );
fish.c | 31 | call_out( "do_drown", 4, player );
fish.c | 35 | start_player( thing );
fish.c | 37 | add_property( "gills", 1 );
fish.c | 38 | add_property("lives in water", 1);
fish.c | 39 | add_enter_commands( (: check_water :) );
fish.c | 40 | set_default_position( ({ "lying" }) );
fish.c | 41 | return_to_default_position( 0 );
fish.c | 47 | query_skill_bonus( "fighting.combat.melee.unarmed" );
fish.c | 50 | remove_attack( "hands" );
fish.c | 51 | remove_attack( "feet" );
fish.c | 53 | remove_attack( "bite" );
fish.c | 58 | tactics( "response dodge" );
penguin.c | 4 | set_name( "penguin" );
penguin.c | 5 | set_long( "Penguins are always rather formal.\n" );
penguin.c | 6 | set_weight( 600 );
penguin.c | 8 | remove_bit( "gizzard" );
penguin.c | 10 | set_stats( ({ 2, 8, -4, -4, -6 }) );
demon.c | 4 | set_long( "This is one of the denizens of the Underworld.\n" );
demon.c | 5 | set_name( "demon" );
demon.c | 6 | set_height( 250 );
demon.c | 7 | set_weight( 5000 );
demon.c | 8 | set_desc( "a nasty-looking demon" );
demon.c | 10 | add_ac( "fire", "fire", 100 );
demon.c | 12 | set_stats( ({ 10, 0, -2, 10, 4 }) );
demon.c | 25 | add_skill_level( "other.health", level * 2 );
demon.c | 26 | add_ac( "blunt", "blunt", level / 2 );
demon.c | 27 | add_ac( "pierce", "pierce", level / 4 );
demon.c | 28 | add_ac( "sharp", "sharp", level / 3 );
demon.c | 34 | query_skill_bonus( "fighting.combat.melee.unarmed" );
demon.c | 35 | sqrt( number );
demon.c | 37 | remove_attack( "hands" );
demon.c | 38 | remove_attack( "feet" );
demon.c | 40 | remove_attack( "claws" );
demon.c | 41 | remove_attack( "bite" );
camel.c | 4 | set_name( "camel" );
camel.c | 10 | set_height( 170 );
camel.c | 11 | set_weight( 12000 );
camel.c | 12 | set_desc( "a camel that looks less interested in you than in sand" );
camel.c | 14 | add_bit( "tail", "tail", ({ 0, 18, 0 }) );
camel.c | 15 | add_bit( "fore hump", "hump", ({ 0, 75, 0 }) );
camel.c | 16 | add_bit( "aft hump", "hump", ({ 0, 50, 0 }) );
camel.c | 20 | add_ac( "blunt", "blunt", 50 );
camel.c | 21 | add_ac( "pierce", "pierce", 20 );
camel.c | 22 | add_ac( "sharp", "sharp", 20 );
camel.c | 24 | add_attack( "bite", 50, ({ 40, 8, 10 }) );
camel.c | 25 | add_attack( "feet", 50, ({ 60, 10, 40 }) );
camel.c | 27 | set_stats( ({ 4, 2, 10, 6, 8 }) );
camel.c | 31 | start_player( thing );
camel.c | 32 | tactics( "response dodge" );
parrot.c | 4 | set_name( "parrot" );
parrot.c | 7 | set_weight( 25 );
parrot.c | 8 | set_height( 20 );
parrot.c | 9 | set_desc( "an ordinary parrot" );
parrot.c | 11 | add_ac( "feather_blow", "blunt", 10 );
parrot.c | 12 | add_ac( "feather_slash", "sharp", 2 );
parrot.c | 13 | add_ac( "feather_pierce", "pierce", 2 );
parrot.c | 15 | set_stats( ({ 0, 8, -6, -4, -6 }) );
parrot.c | 21 | query_skill_bonus( "fighting.combat.melee.unarmed" );
parrot.c | 22 | sqrt( number / 4 ) + ( thing->query_weight() / 20 );
parrot.c | 24 | remove_attack( "hands" );
parrot.c | 25 | remove_attack( "feet" );
parrot.c | 27 | remove_attack( "beak" );
parrot.c | 28 | remove_attack( "claws" );
parrot.c | 34 | tactics( "response dodge" );
tree_base.c | 5 | create();
tree_base.c | 22 | set_skin( "bark" );
tree_base.c | 25 | this_object()->setup();
wolf.c | 6 | set_name( "wolf" );
wolf.c | 7 | set_desc( "a really nasty, hungry looking canine" );
wolf.c | 8 | set_height( 75 );
wolf.c | 9 | set_weight( 1000 );
wolf.c | 11 | set_stats( ({ 6, 12, -4, 8, -4 }) );
wolf.c | 26 | add_ac( "blunt", "blunt", 20 + level / 3 );
wolf.c | 27 | add_ac( "sharp", "sharp", 50 + level );
wolf.c | 28 | add_ac( "pierce", "pierce", 60 + 2 * level );
wolf.c | 34 | query_skill_bonus( "fighting.combat.melee.unarmed" );
wolf.c | 37 | remove_attack( "hands" );
wolf.c | 38 | remove_attack( "feet" );
wolf.c | 40 | remove_attack( "claws" );
wolf.c | 41 | remove_attack( "bite" );
wolf.c | 48 | tactics( "response dodge" );
fox.c | 6 | set_name( "fox" );
fox.c | 9 | set_height( 30 );
fox.c | 10 | set_weight( 400 );
fox.c | 11 | set_desc( "A small red fox" );
fox.c | 13 | set_stats( ({ 0, 10, -2, 4, -4 }) );
fox.c | 28 | add_ac( "blunt", "blunt", level );
fox.c | 29 | add_ac( "sharp", "sharp", 2 + level );
fox.c | 30 | add_ac( "pierce", "pierce", 2 * level );
fox.c | 36 | query_skill_bonus( "fighting.combat.melee.unarmed" );
fox.c | 37 | sqrt( number );
fox.c | 39 | remove_attack( "hands" );
fox.c | 40 | remove_attack( "feet" );
fox.c | 42 | remove_attack( "bite" );
fox.c | 43 | remove_attack( "claws" );
fox.c | 50 | tactics( "response dodge" );
chicken.c | 4 | set_name( "chicken" );
chicken.c | 7 | set_weight( 80 );
chicken.c | 8 | set_height( 30 );
chicken.c | 9 | set_desc( "an ordinary brain-dead chicken" );
chicken.c | 11 | add_ac( "feather_blow", "blunt", 10 );
chicken.c | 12 | add_ac( "feather_slash", "sharp", 2 );
chicken.c | 13 | add_ac( "feather_pierce", "pierce", 2 );
chicken.c | 15 | set_stats( ({ 0, 8, -6, -4, -6 }) );
chicken.c | 21 | query_skill_bonus( "fighting.combat.melee.unarmed" );
chicken.c | 22 | sqrt( number / 4 ) + ( thing->query_weight() / 20 );
chicken.c | 24 | remove_attack( "hands" );
chicken.c | 25 | remove_attack( "feet" );
chicken.c | 27 | remove_attack( "beak" );
chicken.c | 28 | remove_attack( "claws" );
chicken.c | 35 | tactics( "response dodge" );
rabbit.c | 4 | set_name( "rabbit" );
rabbit.c | 5 | set_long( "A small furry and fluffy rabbit.\n" );
rabbit.c | 6 | set_height( 30 );
rabbit.c | 7 | set_weight( 25 );
rabbit.c | 8 | set_desc( "a cute and fluffy little bunny" );
rabbit.c | 10 | set_stats( ({ -3, 8, -4, -5, -6 }) );
rabbit.c | 23 | add_ac( "blunt", "blunt", level );
rabbit.c | 24 | add_ac( "sharp", "sharp", 2 + level );
rabbit.c | 25 | add_ac( "pierce", "pierce", 2 * level );
rabbit.c | 31 | query_skill_bonus( "fighting.combat.melee.unarmed" );
rabbit.c | 34 | remove_attack( "hands" );
rabbit.c | 35 | remove_attack( "feet" );
rabbit.c | 37 | remove_attack( "bite" );
rabbit.c | 42 | tactics( "response dodge" );
rabbit.c | 43 | tactics( "attitude defensive" );
crocodile.c | 4 | set_name( "crocodile" );
crocodile.c | 8 | set_height( 30 );
crocodile.c | 9 | set_weight( 5000 );
crocodile.c | 10 | set_desc( "a crocodile, sharp of tooth and vicious of temper." );
crocodile.c | 12 | add_ac( "blunt", "blunt", 80 );
crocodile.c | 13 | add_ac( "pierce", "pierce", 80 );
crocodile.c | 14 | add_ac( "sharp", "sharp", 80 );
crocodile.c | 16 | set_stats( ({ 6, 4, -4, 8, -4 }) );
crocodile.c | 22 | query_skill_bonus( "fighting.combat.melee.unarmed" );
crocodile.c | 23 | sqrt( number );
crocodile.c | 25 | remove_attack( "hands" );
crocodile.c | 26 | remove_attack( "feet" );
crocodile.c | 28 | remove_attack( "chew" );
crocodile.c | 29 | remove_attack( "tail" );
crocodile.c | 36 | tactics( "response dodge" );
crocodile.c | 37 | tactics( "attitude offensive" );
duckling.c | 4 | set_name( "duckling" );
duckling.c | 5 | set_long( "Awwwwwwww it's SUCH a cute little duckling!\n" );
duckling.c | 6 | set_weight( 10 );
duckling.c | 7 | set_height( 15 );
duckling.c | 8 | set_desc( "an cute ickle duckling" );
duckling.c | 10 | add_ac( "feather_blow", "blunt", 10 );
duckling.c | 11 | add_ac( "feather_slash", "sharp", 2 );
duckling.c | 12 | add_ac( "feather_pierce", "pierce", 2 );
duckling.c | 14 | set_stats( ({ 0, 14, -6, -4, -6 }) );
duckling.c | 20 | query_skill_bonus( "fighting.combat.melee.unarmed" );
duckling.c | 21 | sqrt( number / 4 ) + ( thing->query_weight() / 20 );
duckling.c | 23 | remove_attack( "hands" );
duckling.c | 24 | remove_attack( "feet" );
duckling.c | 26 | remove_attack( "beak" );
duckling.c | 33 | tactics( "response dodge" );
insect.c | 4 | set_name( "insect" );
insect.c | 5 | set_long( "A nondescript insect.\n" );
insect.c | 6 | set_height( 5 );
insect.c | 7 | set_weight( 2 );
insect.c | 8 | set_desc( "a nondescript insect" );
insect.c | 10 | set_stats( ({ -6, 4, -6, -6, -6 }) );
insect.c | 14 | return ( member_array( type, inedible ) == -1 );
insect.c | 27 | add_skill_level( "other.health", level * 2 );
insect.c | 28 | add_ac( "blunt", "blunt", level / 2 );
insect.c | 29 | add_ac( "pierce", "pierce", level / 4 );
insect.c | 30 | add_ac( "sharp", "sharp", level / 3 );
insect.c | 38 | query_skill_bonus( "fighting.combat.melee.unarmed" );
insect.c | 39 | sqrt( number );
insect.c | 41 | remove_attack( "hands" );
insect.c | 42 | remove_attack( "feet" );
insect.c | 44 | remove_attack( "bite" );
insect.c | 49 | tactics( "response dodge" );
panda.c | 6 | set_name( "panda" );
panda.c | 7 | set_desc( "a black and white fluffy panda" );
panda.c | 8 | set_height( 200 );
panda.c | 9 | set_weight( 8000 );
panda.c | 11 | set_stats( ({ 6, 4, -2, 8, -4 }) );
panda.c | 26 | add_ac( "blunt", "blunt", 20 + level / 3 );
panda.c | 27 | add_ac( "sharp", "sharp", 50 + level );
panda.c | 28 | add_ac( "pierce", "pierce", 60 + 2 * level );
panda.c | 34 | query_skill_bonus( "fighting.combat.melee.unarmed" );
panda.c | 37 | remove_attack( "hands" );
panda.c | 38 | remove_attack( "feet" );
panda.c | 40 | remove_attack( "claws" );
panda.c | 41 | remove_attack( "bite" );
panda.c | 48 | tactics( "response dodge" );
panda.c | 49 | tactics( "attitude offensive" );
lobster.c | 4 | set_name( "lobster" );
lobster.c | 5 | set_long( "A cranky lobster.\n" );
lobster.c | 6 | set_height( 10 );
lobster.c | 7 | set_weight( 18 );
lobster.c | 8 | set_desc( "a cranky lobster" );
lobster.c | 53 | set_skin( "shell" );
lobster.c | 55 | set_stats( ({ -6, 4, -6, -4, -6 }) );
lobster.c | 59 | return ( member_array( type, inedible ) == -1 );
lobster.c | 73 | add_skill_level( "other.health", level * 2 );
lobster.c | 74 | add_ac( "blunt", "blunt", level / 2 );
lobster.c | 75 | add_ac( "pierce", "pierce", level / 4 );
lobster.c | 76 | add_ac( "sharp", "sharp", level / 3 );
lobster.c | 83 | query_skill_bonus( "fighting.combat.melee.unarmed" );
lobster.c | 84 | sqrt( number );
lobster.c | 86 | remove_attack( "hands" );
lobster.c | 87 | remove_attack( "feet" );
lobster.c | 89 | remove_attack( "pincers" );
lobster.c | 103 | tactics( "response dodge" );
bat.c | 6 | set_name( "bat" );
bat.c | 7 | set_long( "This is a small flying rodent." );
bat.c | 8 | set_desc( "a small, flying rodent" );
bat.c | 9 | set_height( 20 );
bat.c | 10 | set_weight( 40 );
bat.c | 12 | remove_bit( "torso" );
bat.c | 13 | remove_bit( "left front leg" );
bat.c | 14 | remove_bit( "right front leg" );
bat.c | 15 | remove_bit( "left rear leg" );
bat.c | 16 | remove_bit( "right rear leg" );
bat.c | 21 | add_bit( "right wing", "wing", ({ "torso", 20, 0 }) );
bat.c | 22 | add_bit( "left wing", "wing", ({ "torso", 20, 0 }) );
bat.c | 23 | add_bit( "left leg", "leg", ({ 0, 5, 0 }) );
bat.c | 24 | add_bit( "right leg", "leg", ({ 0, 5, 0 }) );
bat.c | 26 | set_sight( ({ -20, 0, 80, 120 }) );
bat.c | 27 | set_stats( ({ 0, 14, -4, -4, -6 }) );
bat.c | 40 | add_ac( "blunt", "blunt", level );
bat.c | 41 | add_ac( "sharp", "sharp", 2 + level );
bat.c | 42 | add_ac( "pierce", "pierce", 2 * level );
bat.c | 48 | query_skill_bonus( "fighting.combat.melee.unarmed" );
bat.c | 51 | remove_attack( "hands" );
bat.c | 52 | remove_attack( "feet" );
bat.c | 54 | remove_attack( "bite" );
bat.c | 55 | remove_attack( "claws" );
bat.c | 62 | tactics( "response dodge" );
bufonid.c | 4 | set_name( "bufonid" );
bufonid.c | 10 | set_height( 150 );
bufonid.c | 11 | set_weight( 1800 );
bufonid.c | 15 | remove_bit( "left ear" );
bufonid.c | 16 | remove_bit( "right ear" );
bufonid.c | 17 | remove_bit( "nose" );
bufonid.c | 18 | remove_bit( "scalp" );
bufonid.c | 19 | remove_bit( "teeth" );
bufonid.c | 21 | add_ac( "blunt", "blunt", 15 );
bufonid.c | 22 | add_ac( "pierce", "pierce", 12 );
bufonid.c | 23 | add_ac( "sharp", "sharp", 10 );
bufonid.c | 25 | add_attack( "hands", 75, ({ 40, 5, 10 }) );
bufonid.c | 26 | add_attack( "feet", 25, ({ 30, 5, 20 }) );
bufonid.c | 28 | set_stats( ({ 2, 2, 0, 2, 0 }) );
ape.c | 4 | set_name( "ape" );
ape.c | 8 | set_weight( 2500 );
ape.c | 9 | set_height( 175 );
ape.c | 11 | set_stats( ({ 4, 4, 0, 4, 0 }) );
ape.c | 33 | add_ac( "blunt", "blunt", 15 + level / 10 );
ape.c | 34 | add_ac( "sharp", "sharp", 10 + level / 15 );
ape.c | 35 | add_ac( "pierce", "pierce", 12 + level / 12 );
ape.c | 37 | reset_all();
ape.c | 50 | query_skill_bonus( "fighting.combat.melee.unarmed" );
ape.c | 53 | remove_attack( "hands" );
ape.c | 54 | remove_attack( "feet" );
rat.c | 4 | set_name( "rat" );
rat.c | 7 | set_height( 15 );
rat.c | 8 | set_weight( 10 );
rat.c | 9 | set_desc( "a vicious-looking rat, scurrying about for food." );
rat.c | 11 | set_stats( ({ -4, 8, -2, -4, -4 }) );
rat.c | 24 | add_ac( "blunt", "blunt", level );
rat.c | 25 | add_ac( "sharp", "sharp", 2 + level );
rat.c | 26 | add_ac( "pierce", "pierce", 2 * level );
rat.c | 32 | query_skill_bonus( "fighting.combat.melee.unarmed" );
rat.c | 33 | sqrt( number );
rat.c | 35 | remove_attack( "hands" );
rat.c | 36 | remove_attack( "feet" );
rat.c | 38 | remove_attack( "bite" );
rat.c | 39 | remove_attack( "claws" );
rat.c | 46 | tactics( "response dodge" );
wombat.c | 4 | set_name( "wombat" );
wombat.c | 7 | set_height( 40 );
wombat.c | 8 | set_weight( 600 );
wombat.c | 9 | set_desc( "a stocky wombat, looking for something to nibble" );
wombat.c | 48 | set_skin( "fur" );
wombat.c | 50 | set_stats( ({ 2, 4, -2, 6, -4 }) );
wombat.c | 65 | add_ac( "blunt", "blunt", level );
wombat.c | 66 | add_ac( "sharp", "sharp", 2 + level );
wombat.c | 67 | add_ac( "pierce", "pierce", 2 * level );
wombat.c | 73 | query_skill_bonus( "fighting.combat.melee.unarmed" );
wombat.c | 76 | remove_attack( "hands" );
wombat.c | 77 | remove_attack( "feet" );
wombat.c | 79 | remove_attack( "chew" );
wombat.c | 80 | remove_attack( "claws" );
wombat.c | 87 | tactics( "response dodge" );
bird.c | 7 | set_name( "bird" );
bird.c | 8 | set_long( "A general, unspecified bird.\n" );
bird.c | 9 | set_height( 15 );
bird.c | 10 | set_weight( 60 );
bird.c | 12 | set_stats( ({ 0, 14, -4, -4, -6 }) );
bird.c | 23 | query_weight() / 20);
bird.c | 25 | add_ac( "blunt", "blunt", weight / 2 );
bird.c | 26 | add_ac( "pierce", "pierce", weight );
bird.c | 27 | add_ac( "sharp", "sharp", weight );
bird.c | 33 | query_skill_bonus( "fighting.combat.melee.unarmed" );
bird.c | 34 | sqrt( number / 4 ) + ( thing->query_weight() / 20 );
bird.c | 36 | remove_attack( "hands" );
bird.c | 37 | remove_attack( "feet" );
bird.c | 39 | remove_attack( "beak" );
bird.c | 40 | remove_attack( "claws" );
bird.c | 47 | tactics( "response dodge" );
golem.c | 5 | knock_out( object player, object golem );
golem.c | 8 | make_corpse();
golem.c | 12 | set_name( "golem" );
golem.c | 16 | set_height( 200 );
golem.c | 17 | set_weight( 40000 );
golem.c | 18 | set_desc( "a tall, human-shaped creature made of clay" );
golem.c | 20 | add_property( "no scry", 1 );
golem.c | 22 | add_ac( "blunt", "pierce", ({150}) );
golem.c | 23 | add_ac( "pierce", "pierce", ({250}) );
golem.c | 24 | add_ac( "sharp", "sharp", ({250}) );
golem.c | 25 | add_ac( "fire", "fire", ({10000}) );
golem.c | 26 | add_ac( "cold", "cold", ({10000}) );
golem.c | 27 | add_ac( "acid", "acid", ({10000}) );
golem.c | 28 | add_ac( "magic", "magic", ({10000}) );
golem.c | 30 | set_sight( ({ 0, 5, 100, 125 }) );
golem.c | 31 | set_stats( ({ 30, 10, 0, 40, 0 }) );
golem.c | 41 | previous_object()->query_attacker();
golem.c | 44 | query_weapon();
golem.c | 46 | adjust_cond( -(int)weapon->query_cond() / 15 );
golem.c | 56 | previous_object();
golem.c | 57 | request_item( "golem corpse", 100 );
golem.c | 58 | all_inventory( owner )->move( corpse );
golem.c | 67 | remove_attack( "hands" );
golem.c | 68 | remove_attack( "feet" );
golem.c | 71 | this_object() }) );
golem.c | 81 | knock_out( him, me );
golem.c | 99 | stop_all_fight();
golem.c | 100 | stop_fight( player );
golem.c | 105 | query_dest_dir();
golem.c | 106 | sizeof( all_exits );
golem.c | 109 | load_object( no_doors[ random( sizeof( no_doors ) ) ] );
golem.c | 131 | set_position( "lying on the ground unconscious" );
golem.c | 132 | add_property( "passed out", 1, ( 150 + random( 150 ) ) );
hedgehog.c | 6 | set_name( "hedgehog" );
hedgehog.c | 7 | set_long( "A snail and worm eating little bugger.\n" );
hedgehog.c | 8 | set_height( 30 );
hedgehog.c | 9 | set_weight( 150 );
hedgehog.c | 10 | set_desc( "A small spiny hedgehog" );
hedgehog.c | 12 | set_stats( ({ 2, -2, -4, -2, -6 }) );
hedgehog.c | 27 | add_ac( "blunt", "blunt", level );
hedgehog.c | 28 | add_ac( "sharp", "sharp", 2 + level );
hedgehog.c | 29 | add_ac( "pierce", "pierce", 2 * level );
hedgehog.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
hedgehog.c | 36 | sqrt( number );
hedgehog.c | 38 | remove_attack( "hands" );
hedgehog.c | 39 | remove_attack( "feet" );
hedgehog.c | 41 | remove_attack( "bite" );
hedgehog.c | 42 | remove_attack( "claws" );
hedgehog.c | 49 | tactics( "response dodge" );
stoat.c | 6 | set_name( "stoat" );
stoat.c | 7 | set_long( "A small black and white animal.\n" );
stoat.c | 8 | set_height( 15 );
stoat.c | 9 | set_weight( 30 );
stoat.c | 10 | set_desc( "small brown meateater" );
stoat.c | 12 | set_stats( ({ -2, 8, -2, -4, -4 }) );
stoat.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
stoat.c | 28 | add_ac( "sharp", "sharp", 50 + level );
stoat.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
stoat.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
stoat.c | 38 | remove_attack( "hands" );
stoat.c | 39 | remove_attack( "feet" );
stoat.c | 41 | remove_attack( "claws" );
stoat.c | 42 | remove_attack( "bite" );
stoat.c | 49 | tactics( "response dodge" );
shark.c | 4 | set_name( "shark" );
shark.c | 5 | set_long( "A big mean shark.\n" );
shark.c | 6 | set_height( 15 );
shark.c | 7 | set_weight( 8000 );
shark.c | 8 | set_desc( "a fish, the kind with fins" );
shark.c | 10 | set_stats( ({ 10, 14, 2, 21, -4 }) );
shark.c | 16 | call_out( "do_drown", 4, player );
shark.c | 31 | adjust_hp( -i );
shark.c | 33 | call_out( "do_drown", 4, player );
shark.c | 38 | start_player( thing );
shark.c | 40 | add_property( "gills", 1 );
shark.c | 41 | add_property("lives in water", 1);
shark.c | 42 | add_enter_commands( (: check_water :) );
shark.c | 43 | set_default_position( ({ "lying" }) );
shark.c | 44 | return_to_default_position( 0 );
shark.c | 51 | query_skill_bonus( "fighting.combat.melee.unarmed" );
shark.c | 54 | remove_attack( "hands" );
shark.c | 55 | remove_attack( "feet" );
shark.c | 56 | remove_attack( "bite" );
shark.c | 61 | tactics( "response dodge" );
weasel.c | 6 | set_name( "weasel" );
weasel.c | 7 | set_long( "A small brown furred animal.\n" );
weasel.c | 8 | set_height( 15 );
weasel.c | 9 | set_weight( 30 );
weasel.c | 10 | set_desc( "small brown meateater" );
weasel.c | 12 | set_stats( ({ -2, 8, -2, -4, -4 }) );
weasel.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
weasel.c | 28 | add_ac( "sharp", "sharp", 50 + level );
weasel.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
weasel.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
weasel.c | 38 | remove_attack( "hands" );
weasel.c | 39 | remove_attack( "feet" );
weasel.c | 41 | remove_attack( "claws" );
weasel.c | 42 | remove_attack( "bite" );
weasel.c | 49 | tactics( "response dodge" );
tree.c | 4 | set_name( "tree" );
tree.c | 5 | set_long( "A tree.\n" );
tree.c | 6 | set_height( 800 );
tree.c | 7 | set_weight( 40000 );
tree.c | 8 | set_desc( "a large tree" );
tree.c | 10 | add_ac( "blunt", "blunt", 500 );
tree.c | 11 | add_ac( "sharp", "sharp", 50 );
tree.c | 12 | add_ac( "pierce", "pierce", 250 );
tree.c | 13 | add_ac( "fire", "fire", 100 );
tree.c | 14 | add_ac( "sound", "sound", 1000 );
tree.c | 15 | add_ac( "gas", "gas", 1000 );
tree.c | 17 | set_stats( ({ 10, -6, -2, 10, 4 }) );
tree.c | 23 | query_skill_bonus( "fighting.combat.melee.unarmed" );
tree.c | 24 | sqrt( number );
tree.c | 26 | remove_attack( "hands" );
tree.c | 27 | remove_attack( "feet" );
tree.c | 29 | remove_attack( "branches" );
tree.c | 43 | set_unarmed_parry(1);
tree.c | 52 | previous_object()->query_last_opponent();
tree.c | 54 | query_last_weapon();
tree.c | 57 | adjust_cond( -(int)weapon->query_max_cond() / 20 );
cat.c | 4 | set_name( "cat" );
cat.c | 7 | set_height( 20 );
cat.c | 8 | set_weight( 100 );
cat.c | 9 | set_desc( "a furry cat, on the hunt for a mouse to play with" );
cat.c | 11 | set_stats( ({ 0, 10, 2, -2, 2 }) );
cat.c | 26 | add_ac( "blunt", "blunt", level );
cat.c | 27 | add_ac( "sharp", "sharp", 2 + level );
cat.c | 28 | add_ac( "pierce", "pierce", 2 * level );
cat.c | 34 | query_skill_bonus( "fighting.combat.melee.unarmed" );
cat.c | 35 | sqrt( number );
cat.c | 37 | remove_attack( "hands" );
cat.c | 38 | remove_attack( "feet" );
cat.c | 40 | remove_attack( "bite" );
cat.c | 41 | remove_attack( "claws" );
cat.c | 48 | tactics( "response dodge" );
pig.c | 8 | set_name( "pig" );
pig.c | 9 | set_long( "A domesticated mammal, of the swine family.\n" );
pig.c | 10 | set_desc( "a domesticated mammal, of the swine family" );
pig.c | 11 | set_weight( 1200 );
pig.c | 12 | set_height( 50 );
pig.c | 14 | remove_bit( "nose" );
pig.c | 15 | remove_bit( "head" );
pig.c | 16 | remove_bit( "left front leg" );
pig.c | 17 | remove_bit( "right front leg" );
pig.c | 18 | remove_bit( "left rear leg" );
pig.c | 19 | remove_bit( "right rear leg" );
pig.c | 24 | add_bit( "snout", "snout", ({ "head", 12, 0 }) );
pig.c | 25 | add_bit( "left front trotter", "trotter", ({ 0, 180, 0, "left front hoof" }) );
pig.c | 26 | add_bit( "right front trotter", "trotter", ({ 0, 180, 0, "right front hoof" }) );
pig.c | 27 | add_bit( "left rear trotter", "trotter", ({ 0, 180, 0, "left rear hoof" }) );
pig.c | 28 | add_bit( "right rear trotter", "trotter", ({ 0, 180, 0, "right rear hoof" }) );
pig.c | 31 | add_bit( "chop", "chop", ({ 0, 1, 0 }) );
pig.c | 32 | add_bit( "tail", "tail", ({ 0, 1, 0 }) );
pig.c | 39 | set_stats( ({ 2, 0, -2, 4, -4 }) );
pig.c | 43 | remove_attack( "hands" );
pig.c | 44 | remove_attack( "feet" );
pig.c | 45 | remove_attack( "standard" );
pig.c | 47 | remove_attack( "hoof" );
pig.c | 52 | tactics( "response dodge" );
vulture.c | 9 | set_name( "vulture" );
vulture.c | 12 | set_desc( "a somewhat evil-looking old vulture\n" );
vulture.c | 13 | set_height( 40 );
vulture.c | 14 | set_weight( 200 );
vulture.c | 16 | set_stats( ({ 0, 14, -4, 2, -6 }) );
vulture.c | 29 | add_ac( "blunt", "blunt", level / 2 );
vulture.c | 30 | add_ac( "pierce", "pierce", level );
vulture.c | 31 | add_ac( "sharp", "sharp", level );
vulture.c | 37 | query_skill_bonus( "fighting.combat.melee.unarmed" );
vulture.c | 40 | remove_attack( "hands" );
vulture.c | 41 | remove_attack( "feet" );
vulture.c | 43 | remove_attack( "beak" );
vulture.c | 44 | remove_attack( "claws" );
vulture.c | 51 | tactics( "response dodge" );
snake.c | 4 | set_name( "snake" );
snake.c | 7 | set_height( 5 );
snake.c | 8 | set_weight( 60 );
snake.c | 9 | set_desc( "a serpent, the type with no legs but with scales." );
snake.c | 41 | add_ac( "blunt", "blunt", 40 );
snake.c | 42 | add_ac( "sharp", "sharp", 20 );
snake.c | 43 | add_ac( "pierce", "pierce", 10 );
snake.c | 45 | set_stats( ({ 0, 0, -4, 4, -4 }) );
snake.c | 51 | query_skill_bonus( "fighting.combat.melee.unarmed" );
snake.c | 52 | sqrt( number );
snake.c | 54 | remove_attack( "hands" );
snake.c | 55 | remove_attack( "feet" );
snake.c | 57 | remove_attack( "bite" );
snake.c | 58 | remove_attack( "crush" );
snake.c | 74 | tactics( "response dodge" );
snake.c | 78 | return ({ "head", "body", "body", "body", "tail", "tail", "tail" });
lagomorpha_base.c | 9 | create();
lagomorpha_base.c | 51 | set_skin( "fur" );
lagomorpha_base.c | 54 | this_object()->setup();
carnivore.c | 5 | create();
carnivore.c | 8 | set_weight( 700 );
carnivore.c | 9 | set_height( 50 );
carnivore.c | 59 | set_skin( "pelt" );
carnivore.c | 61 | set_stats( ({ 6, 10, -2, 6, -4 }) );
carnivore.c | 64 | this_object()->setup();
humanoid.c | 5 | create();
humanoid.c | 81 | set_skin( "skin" );
humanoid.c | 84 | this_object()->setup();
imp.c | 4 | set_long( "This is one of the smaller denizens of the Underworld.\n" );
imp.c | 5 | set_name( "imp" );
imp.c | 6 | set_height( 50 );
imp.c | 7 | set_weight( 400 );
imp.c | 8 | set_desc( "a crafty-looking imp" );
imp.c | 10 | set_stats( ({ 2, 8, 2, 2, 2 }) );
imp.c | 23 | add_skill_level( "other.health", level * 4 );
imp.c | 24 | add_ac( "blunt", "blunt", level / 4 );
imp.c | 25 | add_ac( "pierce", "pierce", level / 8 );
imp.c | 26 | add_ac( "sharp", "sharp", level / 6 );
imp.c | 32 | query_skill_bonus( "fighting.combat.melee.unarmed" );
imp.c | 33 | sqrt( number );
imp.c | 35 | remove_attack( "hands" );
imp.c | 36 | remove_attack( "feet" );
imp.c | 43 | tactics( "response dodge" );
moose.c | 6 | set_name( "moose" );
moose.c | 7 | set_long( "The moose is a large woodland animal.\n" );
moose.c | 8 | set_height( 200 );
moose.c | 9 | set_weight( 7000 );
moose.c | 10 | set_desc( "a large, hairy quadruped reminding you very much of a moose" );
moose.c | 12 | query_bit( "head" );
moose.c | 14 | remove_bit( "head" );
moose.c | 15 | add_bit( "head", "head", new_head[ 2 ] );
moose.c | 16 | add_bit( "left horn", "horn", ({ "head", 20, 0 }) );
moose.c | 17 | add_bit( "right horn", "horn", ({ "head", 20, 0 }) );
moose.c | 18 | add_bit( "tail", "tail", ({ 0, 15, 0 }) );
moose.c | 23 | add_ac( "blunt", "blunt", 50 );
moose.c | 24 | add_ac( "pierce", "pierce", 20 );
moose.c | 25 | add_ac( "sharp", "sharp", 20 );
moose.c | 27 | set_stats( ({ 4, -2, -4, 8, -4 }) );
moose.c | 31 | remove_attack( "hands" );
moose.c | 32 | remove_attack( "feet" );
moose.c | 33 | remove_attack( "standard" );
moose.c | 35 | remove_attack( "chew" );
moose.c | 36 | remove_attack( "hoof" );
moose.c | 43 | tactics( "response dodge" );
crab.c | 4 | set_name( "crab" );
crab.c | 5 | set_long( "A scuttling crab.\n" );
crab.c | 6 | set_height( 10 );
crab.c | 7 | set_weight( 18 );
crab.c | 8 | set_desc( "a scuttling crab" );
crab.c | 53 | set_skin( "shell" );
crab.c | 55 | set_stats( ({ -6, 4, -6, -4, -6 }) );
crab.c | 59 | return ( member_array( type, inedible ) == -1 );
crab.c | 73 | add_skill_level( "other.health", level * 2 );
crab.c | 74 | add_ac( "blunt", "blunt", level / 2 );
crab.c | 75 | add_ac( "pierce", "pierce", level / 4 );
crab.c | 76 | add_ac( "sharp", "sharp", level / 3 );
crab.c | 83 | query_skill_bonus( "fighting.combat.melee.unarmed" );
crab.c | 84 | sqrt( number );
crab.c | 86 | remove_attack( "hands" );
crab.c | 87 | remove_attack( "feet" );
crab.c | 89 | remove_attack( "pincers" );
crab.c | 103 | tactics( "response dodge" );
gnome.c | 4 | set_name( "gnome" );
gnome.c | 5 | set_long( "This is the race for gnomes.\n" );
gnome.c | 6 | set_desc( "a short-looking gnome" );
gnome.c | 7 | set_weight( 25 );
gnome.c | 8 | set_height( 20 );
gnome.c | 10 | set_sight( ({ 0, 5, 150, 200 }) );
gnome.c | 11 | set_stats( ({ -2, 8, 0, 6, 0 }) );
gnome.c | 17 | random( 70 );
gnome.c | 19 | random( 50 );
arachnid.c | 9 | create();
arachnid.c | 58 | set_stats( ({ -6, 4, -6, -6, -6 }) );
arachnid.c | 61 | this_object()->setup();
reptile.c | 4 | set_name( "reptile" );
reptile.c | 5 | set_long( "A normal reptile, wiv scales on.\n" );
reptile.c | 6 | set_weight( 1000 );
reptile.c | 7 | set_height( 20 );
reptile.c | 8 | set_desc( "your standard reptile" );
reptile.c | 10 | set_stats( ({ -2, 2, -4, -2, -6 }) );
reptile.c | 16 | query_skill_bonus( "fighting.combat.melee.unarmed" );
reptile.c | 17 | sqrt( number );
reptile.c | 19 | remove_attack( "hands" );
reptile.c | 20 | remove_attack( "feet" );
reptile.c | 22 | remove_attack( "chew" );
reptile.c | 23 | remove_attack( "tail" );
reptile.c | 30 | tactics( "response dodge" );
reptile.c | 31 | tactics( "attitude offensive" );
duck.c | 4 | set_name( "duck" );
duck.c | 7 | set_weight( 80 );
duck.c | 8 | set_height( 30 );
duck.c | 9 | set_desc( "an ordinary brain-dead duck" );
duck.c | 11 | add_ac( "feather_blow", "blunt", 10 );
duck.c | 12 | add_ac( "feather_slash", "sharp", 2 );
duck.c | 13 | add_ac( "feather_pierce", "pierce", 2 );
duck.c | 15 | set_stats( ({ 0, 14, -6, -4, -6 }) );
duck.c | 21 | query_skill_bonus( "fighting.combat.melee.unarmed" );
duck.c | 22 | sqrt( number / 4 ) + ( thing->query_weight() / 20 );
duck.c | 24 | remove_attack( "hands" );
duck.c | 25 | remove_attack( "feet" );
duck.c | 27 | remove_attack( "beak" );
duck.c | 34 | tactics( "response dodge" );
frog.c | 4 | set_name( "frog" );
frog.c | 5 | set_long( "Frogs are amphibians" );
frog.c | 6 | set_height(10);
frog.c | 7 | set_weight(10);
frog.c | 8 | set_desc( "an innocent little froggie" );
frog.c | 10 | add_ac( "blunt", "blunt", 5 );
frog.c | 11 | add_ac( "pierce", "pierce", 4 );
frog.c | 12 | add_ac( "sharp", "sharp", 3 );
frog.c | 14 | add_attack( "bite", 50, ({ 10, 2, 6 }) );
frog.c | 16 | set_sight( ({ 5, 20, 200, 300 }) );
frog.c | 17 | set_stats( ({ -4, 10, -4, -4, -6 }) );
frog.c | 21 | start_player( thing );
frog.c | 22 | tactics( "response dodge" );
rodent_base.c | 5 | create();
rodent_base.c | 48 | set_skin( "fur" );
rodent_base.c | 51 | this_object()->setup();
tortoise.c | 4 | set_name( "tortoise" );
tortoise.c | 5 | set_long( "A tortoise.\n" );
tortoise.c | 6 | set_height( 40 );
tortoise.c | 7 | set_weight( 600 );
tortoise.c | 8 | set_desc( "a tortoise, slow and steady" );
tortoise.c | 44 | set_skin( "skin" );
tortoise.c | 46 | set_stats( ({ 2, 4, -2, 6, -4 }) );
tortoise.c | 53 | query_skill_bonus( "fighting.combat.melee.unarmed" );
tortoise.c | 56 | remove_attack( "hands" );
tortoise.c | 57 | remove_attack( "feet" );
tortoise.c | 59 | remove_attack( "chew" );
tortoise.c | 60 | remove_attack( "claws" );
tortoise.c | 67 | tactics( "response dodge" );
goat.c | 8 | set_name( "goat" );
goat.c | 11 | set_desc( "a cloven-hoofed, horned mammal" );
goat.c | 13 | set_weight( 800 );
goat.c | 14 | set_height( 80 );
goat.c | 16 | remove_bit( "head" );
goat.c | 21 | add_bit( "left horn", "horn", ({ "head", 5, 0 }) );
goat.c | 22 | add_bit( "right horn", "horn", ({ "head", 5, 0 }) );
goat.c | 26 | set_stats( ({ 4, 8, 0, 2, -4 }) );
goat.c | 30 | remove_attack( "hands" );
goat.c | 31 | remove_attack( "feet" );
goat.c | 32 | remove_attack( "standard" );
goat.c | 34 | remove_attack( "horns" );
goat.c | 35 | remove_attack( "hoof" );
goat.c | 42 | tactics( "response dodge" );
insect_base.c | 5 | create();
insect_base.c | 35 | set_skin( "carapace" );
insect_base.c | 38 | this_object()->setup();
reptile_base.c | 5 | create();
reptile_base.c | 51 | set_skin( "scales" );
reptile_base.c | 54 | this_object()->setup();
lion.c | 4 | set_name( "lion" );
lion.c | 9 | set_height( 150 );
lion.c | 10 | set_weight( 3500 );
lion.c | 11 | set_desc( "a rather large lion, bounding vigorously towards you" );
lion.c | 13 | add_bit( "bile duct", "duct", ({ "torso", 1, 0 }) );
lion.c | 15 | set_stats( ({ 6, 10, -4, 10, -4 }) );
lion.c | 28 | add_ac( "blunt", "blunt", level );
lion.c | 29 | add_ac( "sharp", "sharp", 2 + level );
lion.c | 30 | add_ac( "pierce", "pierce", 2 * level );
lion.c | 36 | query_skill_bonus( "fighting.combat.melee.unarmed" );
lion.c | 37 | sqrt( number );
lion.c | 39 | remove_attack( "hands" );
lion.c | 40 | remove_attack( "feet" );
lion.c | 42 | remove_attack( "claws" );
lion.c | 43 | remove_attack( "bite" );
lion.c | 53 | tactics( "response dodge" );
light.c | 6 | set_name( "light" );
light.c | 7 | set_long( "A small sphere of magical blue light.\n" );
light.c | 8 | set_weight( 1 );
light.c | 9 | set_height( 1 );
light.c | 10 | set_desc( "a small ball of blue light hovering in the air." );
light.c | 17 | add_ac( "fire", "fire", 1000 );
light.c | 18 | add_ac( "sound", "sound", 1000 );
light.c | 19 | add_ac( "acid", "acid", 1000 );
light.c | 20 | add_ac( "gas", "gas", 1000 );
light.c | 21 | add_ac( "mental", "mental", 100 );
light.c | 23 | set_stats( ({ 0, 14, -6, -6, -6 }) );
light.c | 27 | start_player( thing );
light.c | 28 | tactics( "response dodge" );
fish_base.c | 5 | create();
fish_base.c | 35 | set_skin( "scales" );
fish_base.c | 38 | this_object()->setup();
mustelidae.c | 6 | set_name( "mustelidae" );
mustelidae.c | 7 | set_long( "The typical weasel like animal.\n" );
mustelidae.c | 8 | set_height( 15 );
mustelidae.c | 9 | set_weight( 30 );
mustelidae.c | 10 | set_desc( "small brown meateater" );
mustelidae.c | 12 | set_stats( ({ -2, 8, -2, -4, -4 }) );
mustelidae.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
mustelidae.c | 28 | add_ac( "sharp", "sharp", 50 + level );
mustelidae.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
mustelidae.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
mustelidae.c | 38 | remove_attack( "hands" );
mustelidae.c | 39 | remove_attack( "feet" );
mustelidae.c | 41 | remove_attack( "claws" );
mustelidae.c | 42 | remove_attack( "bite" );
mustelidae.c | 49 | tactics( "response dodge" );
bird_base.c | 5 | create();
bird_base.c | 60 | set_skin( "feathers" );
bird_base.c | 63 | this_object()->setup();
badger.c | 6 | set_name( "badger" );
badger.c | 7 | set_long( "A big black white and grey burowing animal.\n" );
badger.c | 8 | set_height( 30 );
badger.c | 9 | set_weight( 500 );
badger.c | 10 | set_desc( "small brown meateater" );
badger.c | 12 | set_stats( ({ 2, -2, -2, 2, -4 }) );
badger.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
badger.c | 28 | add_ac( "sharp", "sharp", 50 + level );
badger.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
badger.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
badger.c | 38 | remove_attack( "hands" );
badger.c | 39 | remove_attack( "feet" );
badger.c | 41 | remove_attack( "claws" );
badger.c | 42 | remove_attack( "chew" );
badger.c | 49 | tactics( "response dodge" );
scorpion.c | 8 | poison( int damage, object him, object me, string atype, string aname );
scorpion.c | 11 | set_name( "scorpion" );
scorpion.c | 12 | set_long( "A nasty little poisonous creature, of the arachnid family.\n" );
scorpion.c | 13 | set_height( 5 );
scorpion.c | 14 | set_weight( 2 );
scorpion.c | 15 | set_desc( "a nasty little poisonous creature, of the arachnid family" );
scorpion.c | 42 | set_stats( ({ -6, 4, -6, -6, -6 }) );
scorpion.c | 55 | add_skill_level( "other.health", level * 3 );
scorpion.c | 56 | add_ac( "blunt", "blunt", level / 2 );
scorpion.c | 57 | add_ac( "pierce", "pierce", level / 4 );
scorpion.c | 58 | add_ac( "sharp", "sharp", level / 3 );
scorpion.c | 59 | add_ac( "fire", "fire", level );
scorpion.c | 71 | query_skill_bonus( "fighting.combat.melee.unarmed" );
scorpion.c | 72 | sqrt( number );
scorpion.c | 74 | remove_attack( "hands" );
scorpion.c | 75 | remove_attack( "feet" );
scorpion.c | 77 | remove_attack( "poison" );
scorpion.c | 78 | remove_attack( "bite" );
scorpion.c | 81 | this_object() }) );
scorpion.c | 88 | tactics( "response dodge" );
scorpion.c | 94 | query_objective() + " with venom.\n" );
scorpion.c | 96 | query_possessive() + " tail!  You seethe in agony.\n" );
scorpion.c | 99 | one_short() + " seethes in agony.\n", ({ me, him }) );
scorpion.c | 101 | add_effect( POISON_EFFECT, 100 );
skunk.c | 6 | set_name( "skunk" );
skunk.c | 7 | set_long( "A small black and white animal.\n" );
skunk.c | 8 | set_height( 15 );
skunk.c | 9 | set_weight( 30 );
skunk.c | 10 | set_desc( "small brown meateater" );
skunk.c | 12 | set_stats( ({ -2, 8, -2, -4, -4 }) );
skunk.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
skunk.c | 28 | add_ac( "sharp", "sharp", 50 + level );
skunk.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
skunk.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
skunk.c | 38 | remove_attack( "hands" );
skunk.c | 39 | remove_attack( "feet" );
skunk.c | 41 | remove_attack( "claws" );
skunk.c | 42 | remove_attack( "bite" );
skunk.c | 49 | tactics( "response dodge" );
ferret.c | 6 | set_name( "ferret" );
ferret.c | 7 | set_long( "A small black white and grey animal.\n" );
ferret.c | 8 | set_height( 15 );
ferret.c | 9 | set_weight( 30 );
ferret.c | 10 | set_desc( "small brown meateater" );
ferret.c | 12 | set_stats( ({ -2, 8, -2, -4, -4 }) );
ferret.c | 27 | add_ac( "blunt", "blunt", 20 + level / 3 );
ferret.c | 28 | add_ac( "sharp", "sharp", 50 + level );
ferret.c | 29 | add_ac( "pierce", "pierce", 60 + 2 * level );
ferret.c | 35 | query_skill_bonus( "fighting.combat.melee.unarmed" );
ferret.c | 38 | remove_attack( "hands" );
ferret.c | 39 | remove_attack( "feet" );
ferret.c | 41 | remove_attack( "claws" );
ferret.c | 42 | remove_attack( "bite" );
ferret.c | 49 | tactics( "response dodge" );
jellyfish.c | 13 | set_name( "jellyfish" );
jellyfish.c | 14 | set_long( "A jelly-like blob with tendrils.\n" );
jellyfish.c | 15 | set_height( 15 );
jellyfish.c | 16 | set_weight( 20 );
jellyfish.c | 17 | set_desc( "a jelly-like blob with tendrils." );
jellyfish.c | 26 | set_skin( "exocuticule" );
jellyfish.c | 28 | add_ac( "acid", "acid", 100 );
jellyfish.c | 29 | add_ac( "poison", "poison", 100 );
jellyfish.c | 30 | add_ac( "blunt", "blunt", 75 );
jellyfish.c | 31 | add_ac( "sharp", "sharp", 25 );
jellyfish.c | 32 | add_ac( "pierce", "pierce", 25 );
jellyfish.c | 34 | set_stats( ({ -5, -5, -5, -5, -5 }) );
jellyfish.c | 41 | query_skill_bonus( "fighting.combat.melee.unarmed" );
jellyfish.c | 42 | sqrt( number ) / 10);
jellyfish.c | 44 | remove_attack( "hands" );
jellyfish.c | 45 | remove_attack( "feet" );
jellyfish.c | 47 | remove_attack( "tendrils" );
jellyfish.c | 50 | this_object() }) );
jellyfish.c | 64 | start_player( thing );
jellyfish.c | 65 | add_property( "gills", 1 );
jellyfish.c | 66 | add_property("lives in water", 1);
jellyfish.c | 72 | add_effect(STINGEFFECT, damage);
hippo.c | 4 | set_name( "elephant" );
hippo.c | 8 | set_height( 280 );
hippo.c | 9 | set_weight( 100000 );
hippo.c | 10 | set_desc( "an elephant that looks back at you with small nice eyes" );
hippo.c | 12 | remove_bit( "nose" );
hippo.c | 13 | remove_bit( "head" );
hippo.c | 18 | add_bit( "tail", "tail", ({ 0, 15, 0 }) );
hippo.c | 21 | add_bit( "tusks", "tusks", ({ "head", 40, ({"/std/bit", 2}) }) );
hippo.c | 22 | add_bit( "trunk", "trunk", ({ "head", 30, 0 }) );
hippo.c | 27 | add_ac( "blunt", "blunt", ({ 40, 20}) );
hippo.c | 28 | add_ac( "pierce", "pierce", ({ 30, 20 }) );
hippo.c | 29 | add_ac( "sharp", "sharp", ({ 50, 20 }) );
hippo.c | 30 | add_ac( "acid", "acid", 20 );
hippo.c | 31 | add_ac( "fire", "fire", 20 );
hippo.c | 33 | set_stats( ({ 10, -6, -4, 16, -2 }) );
hippo.c | 37 | remove_attack( "hands" );
hippo.c | 39 | remove_attack( "tusks" );
hippo.c | 40 | remove_attack( "crush" );
hippo.c | 41 | remove_attack( "ram" );
mustelidae_base.c | 5 | create();
mustelidae_base.c | 47 | set_skin( "fur" );
mustelidae_base.c | 50 | this_object()->setup();
ruminant.c | 5 | create();
ruminant.c | 8 | set_weight( 800 );
ruminant.c | 9 | set_height( 50 );
ruminant.c | 61 | set_skin( "hide" );
ruminant.c | 63 | set_stats( ({ 0, 0, -4, 2, -6 }) );
ruminant.c | 66 | this_object()->setup();
mouse.c | 4 | set_name( "mouse" );
mouse.c | 8 | set_height( 10 );
mouse.c | 9 | set_weight( 5 );
mouse.c | 10 | set_desc( "a little mouse, scurrying about for food." );
mouse.c | 12 | set_stats( ({ -4, 8, -4, -4, -6 }) );
mouse.c | 25 | add_ac( "blunt", "blunt", level );
mouse.c | 26 | add_ac( "sharp", "sharp", 2 + level );
mouse.c | 27 | add_ac( "pierce", "pierce", 2 * level );
mouse.c | 33 | query_skill_bonus( "fighting.combat.melee.unarmed" );
mouse.c | 36 | remove_attack( "hands" );
mouse.c | 37 | remove_attack( "feet" );
mouse.c | 39 | remove_attack( "bite" );
mouse.c | 40 | remove_attack( "claws" );
mouse.c | 47 | tactics( "response dodge" );
fish_shadow.c | 14 | shadow(ob, 1);
fish_shadow.c | 20 | query_ac(type);
fish_shadow.c | 33 | move(ob, s1, s2);
fish_shadow.c | 35 | call_out("do_drown", 2);
fish_shadow.c | 37 | remove_call_out("do_drown");
fish_shadow.c | 42 | tell_room(my_player, my_player->one_short()+" gasps for air.\n");
fish_shadow.c | 43 | adjust_hp(random(50)+50);
fish_shadow.c | 44 | call_out("do_drown", 2);
mysql.c | 79 | eventCreateSocket("127.0.0.1", 7865);
mysql.c | 82 | printf("Bad fd.\n");
mysql.c | 83 | remove_call_out(_callout_id);
mysql.c | 84 | call_out("setup", 10);
mysql.c | 89 | map_delete(_requests, id);
mysql.c | 90 | evaluate(func, DB_ERROR_BAD_SOCKET, socket_error(_fd));
mysql.c | 96 | create();
mysql.c | 100 | setup();
mysql.c | 117 | strsrch(test_data[index + 1..], "SQL_END_QUERY");
mysql.c | 118 | tell_creator("pinkfish", "Chunk (%O %O %O)\n", test_data[index+1..50], new_index, index);
mysql.c | 129 | while (test_data[index - 1] == '+');
mysql.c | 132 | tell_creator("pinkfish", "Data: %O %O\n", check_data, data);
mysql.c | 133 | catch(junk = restore_variable(check_data));
mysql.c | 135 | tell_creator("pinkfish", "Resolved...\n");
mysql.c | 137 | map_delete(_requests, junk[0]);
mysql.c | 139 | tell_creator("pinkfish", "%O: %O %O\n", data + req, junk, fluff);
mysql.c | 140 | evaluate(fluff, junk[1], junk[2]);
mysql.c | 151 | locate_value("", 1);
mysql.c | 154 | explode(str, "\n");
mysql.c | 155 | tell_creator("pinkfish", "Stuff (%O)\n", str);
mysql.c | 157 | locate_value(req, 1);
mysql.c | 159 | locate_value(bits[<1], 0);
mysql.c | 162 | locate_value("");
mysql.c | 173 | remove_call_out(_callout_id);
mysql.c | 174 | call_out("setup", 10);
mysql.c | 179 | tell_creator("pinkfish", str + " -- " + socket_error(x) + " -- " + x + "\n");
mysql.c | 181 | remove_call_out(_callout_id);
mysql.c | 182 | call_out("setup", 10);
mysql.c | 188 | remove_call_out(_callout_id);
mysql.c | 189 | call_out("setup", 10);
mysql.c | 216 | sprintf("%-15s %s\n", row["Fixer"], "" + row["bing"]);
mysql.c | 221 | more_string(ret, "details");
mysql.c | 225 | finish_request($1, $2, $(this_player())) :));
mysql.c | 237 | printf("finish arguement to make_sql_request is not a function.\n");
mysql.c | 243 | setup();
mysql.c | 249 | eventWrite(_fd, save_variable(stuff) + "\n");
mysql.c | 261 | map_delete(_requests, id);
mysql.c | 262 | catch(evaluate(func, DB_ERROR_BAD_SOCKET, "the server was dested."));
mysql.c | 264 | dest_me();
mysql.c | 269 | copy(_requests);
out_auth.c | 25 | create();
out_auth.c | 26 | SetSocketType(STREAM);
out_auth.c | 27 | SetDestructOnClose(1);
out_auth.c | 38 | call_other(previous_object(), func, 0);
out_auth.c | 40 | socket_address(previous_object());
out_auth.c | 42 | call_other(previous_object(), func, 0);
out_auth.c | 45 | sscanf(addr, "%s %d", addr, port);
out_auth.c | 47 | call_other(previous_object(), func, 0);
out_auth.c | 50 | new(class auth);
out_auth.c | 51 | previous_object();
out_auth.c | 55 | query_ip_port(previous_object())));
out_auth.c | 62 | replace_string(mess, "\r\n", "\n");
out_auth.c | 63 | sscanf(mess, "%*d , %*d : %*s : %*s : %s\n", name);
out_auth.c | 65 | eventAbortCallback(fd);
out_auth.c | 69 | call_other(auth->Object, auth->Function, name);
out_auth.c | 72 | eventAbortCallback(fd);
out_auth.c | 80 | call_other(auth->Object, auth->Function, 0);
out_auth.c | 81 | map_delete(found, fd);
nhttp.c | 93 | www_resolve(class http_request req);
nhttp.c | 94 | resolve_incoming(string addr, string nom, int cle);
nhttp.c | 95 | http_error(int fd, int status);
nhttp.c | 96 | add_activity(int fd, string str, mixed *args ...);
nhttp.c | 97 | close_connection(int fd, int persist);
nhttp.c | 98 | get_file(class http_request req, string body);
nhttp.c | 99 | format_date(int x);
nhttp.c | 100 | send_file(int fd, string str);
nhttp.c | 103 | parse_headers(class http_request req, int i);
nhttp.c | 122 | create();
nhttp.c | 123 | SetSocketType(STREAM);
nhttp.c | 124 | SetDestructOnClose(1);
nhttp.c | 128 | get_config(__MAX_BUFFER_SIZE__);
nhttp.c | 130 | get_config(__MAX_STRING_LENGTH__);
nhttp.c | 133 | get_config(__MAX_READ_FILE_SIZE__);
nhttp.c | 136 | get_config(__MAX_BYTE_TRANSFER__);
nhttp.c | 139 | call_out("setup", 2);
nhttp.c | 140 | call_out("clean_sockets", 180);
nhttp.c | 141 | unguarded((: restore_object, SAVE_FILE :));
nhttp.c | 151 | if (this_object()) destruct(this_object());
nhttp.c | 157 | unguarded((: save_object, SAVE_FILE :));
nhttp.c | 180 | strlen(url);
nhttp.c | 189 | hex_to_decimal(url[y+1..]);
nhttp.c | 214 | replace_string(str, " ", "%20");
nhttp.c | 222 | strlen(line);
nhttp.c | 251 | return (ret ? ret[0..i-1] : 0);
nhttp.c | 273 | strlen(token);
nhttp.c | 279 | return (lower_case(line[<tlen..]) == lower_case(token));
nhttp.c | 287 | eventNewConnection(fd);
nhttp.c | 288 | sscanf(socket_address(fd), "%s %*s", tmp);
nhttp.c | 289 | resolve(tmp, "resolve_callback");
nhttp.c | 291 | new(class http_request, uri : "", request : "", status : TIME_OUT);
nhttp.c | 292 | new(class http_session, fd : fd, address : tmp);
nhttp.c | 293 | new(class http_request_header);
nhttp.c | 294 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
nhttp.c | 295 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
nhttp.c | 296 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
nhttp.c | 297 | new(class http_body);
nhttp.c | 298 | new(class http_body_info);
nhttp.c | 306 | strsrch(range, '-');
nhttp.c | 315 | sscanf(range[dashpos+1..], "%d", num);
nhttp.c | 319 | strlen(range);
nhttp.c | 323 | sscanf(range, "%d", start);
nhttp.c | 325 | sscanf(dash[dashpos..], "%d", end);
nhttp.c | 380 | sprintf("%d-%d/%d", range_start, range_end, req->bi->clength);
nhttp.c | 448 | sprintf("bytes %d-%d/%d", range_start, range_end, req->bi->clength);
nhttp.c | 450 | sprintf("%d", range_end - range_start + 1);
nhttp.c | 457 | sprintf("%x%x", req->time, req->sess->fd);
nhttp.c | 463 | sprintf("%d", tlength);
nhttp.c | 477 | find_token(req->rh->headers_out->header_m["Connection"], "close");
nhttp.c | 529 | eventWrite(fd, sprintf("%s %s\r\n", HTTP_PROTOCOL, req->status_line));
nhttp.c | 530 | eventWrite(fd, sprintf("Date: %s\r\n", format_date(req->time)));
nhttp.c | 531 | eventWrite(fd, sprintf("Server: %s\r\n", HTTP_VERSION));
nhttp.c | 533 | map_delete(req->rh->headers_out->header_m, "Date");
nhttp.c | 534 | map_delete(req->rh->headers_out->header_m, "Server");
nhttp.c | 549 | eventWrite(req->sess->fd, "\r\n");
nhttp.c | 557 | strsrch(ua, "MSIE 3") != -1)));
nhttp.c | 564 | basic_header(req);
nhttp.c | 566 | set_persist(req);
nhttp.c | 575 | map_delete(req->rh->headers_out->header_m, "Content-Length");
nhttp.c | 582 | use_range_x(req) ? "/x-" : "/"), req->bi->boundary);
nhttp.c | 593 | format_date(req->time);
nhttp.c | 609 | http_error(fd, BAD_CMD);
nhttp.c | 618 | TP("client sent HTTP/1.1 request without hostname\n");
nhttp.c | 619 | http_error(fd, BAD_CMD);
nhttp.c | 624 | http_error(fd, errno);
nhttp.c | 629 | http_error(fd, errno);
nhttp.c | 637 | http_error(fd, NOT_ALLOWED);
nhttp.c | 645 | http_header(req);
nhttp.c | 646 | sprintf("%s\r\n", req->the_request);
nhttp.c | 652 | lower_case(key)]);
nhttp.c | 654 | sprintf("\r\n");
nhttp.c | 656 | eventWrite(fd, sprintf("%x\r\n", strlen(buff)));
nhttp.c | 658 | eventWrite(fd, buff);
nhttp.c | 660 | eventWrite(fd, "\r\n0\r\n\r\n");
nhttp.c | 665 | http_error(fd, BAD_CMD);
nhttp.c | 668 | basic_header(req);
nhttp.c | 677 | set_persist(req);
nhttp.c | 683 | get_file(req);
nhttp.c | 686 | http_error(fd, NOT_IMPLEMENTED);
nhttp.c | 716 | strlen(len);
nhttp.c | 723 | sscanf(len, "%d", body->remaining);
nhttp.c | 726 | get_file(req);
nhttp.c | 742 | get_file(req);
nhttp.c | 755 | sscanf(buf, "%x", len_to_read);
nhttp.c | 758 | sprintf("\r\n%s", req->request);
nhttp.c | 760 | parse_headers(req, i-1);
nhttp.c | 762 | map_delete(req->rh->headers_in->header_m, "transfer-encoding");
nhttp.c | 765 | sprintf("%d", body->read_length);
nhttp.c | 767 | get_file(req);
nhttp.c | 789 | parse_headers(req, i-1);
nhttp.c | 791 | map_delete(req->rh->headers_in->header_m, "transfer-encoding");
nhttp.c | 794 | sprintf("%d", body->read_length);
nhttp.c | 796 | get_file(req);
nhttp.c | 812 | handle_body(req);
nhttp.c | 825 | explode(req->request[0..i], "\r\n") - ({ "", 0 });
nhttp.c | 831 | strlen(bit);
nhttp.c | 839 | lower_case(cont);
nhttp.c | 847 | sprintf(", %s", bit[idx..]);
nhttp.c | 862 | strsrch(name, '/');
nhttp.c | 886 | strlen(uri);
nhttp.c | 922 | remove_call_out(req->id);
nhttp.c | 925 | TP("Received: " + replace(str, ({ "\r", "<CR>", "\n", "<LF>\n"})));
nhttp.c | 936 | sscanf(req->request, "%*(^(\r\n)*)%s\r\n%*s", req->the_request);
nhttp.c | 940 | time();
nhttp.c | 947 | http_error(fd, BAD_CMD);
nhttp.c | 951 | check_fulluri(req, uri);
nhttp.c | 952 | parse_uri(req, uri);
nhttp.c | 957 | sscanf(protocol, "HTTP/%d.%d", major, minor);
nhttp.c | 963 | parse_headers(req, i-1);
nhttp.c | 985 | handle_request(req);
nhttp.c | 992 | http_error(fd, ret);
nhttp.c | 995 | TP("Closing connection\n");
nhttp.c | 996 | eventWrite(fd, 0, 1);
nhttp.c | 999 | call_out("close_connection", 15, fd, 1);
nhttp.c | 1030 | eventRead(fd, 0);
nhttp.c | 1038 | map_delete(Sockets, fd);
nhttp.c | 1052 | map_delete(Resolve, key);
nhttp.c | 1087 | while (pr2six[bufin[i++]] <= 63);
nhttp.c | 1103 | if ((strlen(prevbufin) >
nhttp.c | 1122 | basic_header(req);
nhttp.c | 1123 | set_persist(req);
nhttp.c | 1157 | http_header(req);
nhttp.c | 1169 | escape_html(req->location));
nhttp.c | 1191 | escape_html(req->uri));
nhttp.c | 1195 | escape_html(req->uri));
nhttp.c | 1200 | escape_html(req->uri));
nhttp.c | 1207 | escape_html(req->method));
nhttp.c | 1211 | escape_html(req->uri));
nhttp.c | 1216 | escape_html(req->uri));
nhttp.c | 1225 | eventWrite(fd, sprintf("%x\r\n", strlen(buff)));
nhttp.c | 1227 | eventWrite(fd, buff);
nhttp.c | 1229 | eventWrite(fd, "\r\n0\r\n\r\n");
nhttp.c | 1243 | http_error(fd, TIME_OUT);
nhttp.c | 1245 | eventWrite(fd, 0, 1);
nhttp.c | 1253 | time();
nhttp.c | 1257 | close_connection(req->sess->fd);
nhttp.c | 1260 | call_out("clean_sockets", 180);
nhttp.c | 1274 | event(users(), "inform", mess, "bad-password");
nhttp.c | 1275 | log_file("BAD_PASSWORD", ctime(time()) + ": " + mess + "\n");
nhttp.c | 1276 | failed_login(req->sess->address);
nhttp.c | 1280 | sprintf("Basic realm=\"%s\"", auth_name(req));
nhttp.c | 1333 | auth_failure(req);
nhttp.c | 1337 | strsrch(auth_req, ' ');
nhttp.c | 1339 | auth_failure(req);
nhttp.c | 1343 | uudecode(auth_req[i+1..]);
nhttp.c | 1344 | explode(decoded, ":");
nhttp.c | 1346 | auth_failure(req);
nhttp.c | 1351 | lower_case(bits[0]);
nhttp.c | 1357 | event(users(), "inform", mess, "bad-password");
nhttp.c | 1358 | log_file("BAD_PASSWORD", ctime(time()) + ": " + mess + "\n");
nhttp.c | 1363 | auth_failure(req);
nhttp.c | 1393 | explode(file, "/") - ({ ".", "..", "" });
nhttp.c | 1396 | sprintf("%s/index.html", DIR_WWW);
nhttp.c | 1410 | if (parts[0][0] == '~' && strlen(parts[0]) >
nhttp.c | 1412 | sprintf("/w/%s/public_html", parts[0][1..]);
nhttp.c | 1414 | sprintf("/d/%s/public_html", lower_case(parts[0])[1..]);
nhttp.c | 1416 | implode(parts, "/");
nhttp.c | 1417 | implode(explode(file, "/")[0..<2], "/");
nhttp.c | 1419 | implode(parts, "/");
nhttp.c | 1420 | implode(parts[0..<2], "/");
nhttp.c | 1422 | sscanf(file, "%s___%s", file, args);
nhttp.c | 1423 | file_size(file);
nhttp.c | 1429 | file_size(file);
nhttp.c | 1431 | sprintf("http://%s%s/", req->hostname, req->uri);
nhttp.c | 1444 | www_authenticate(req);
nhttp.c | 1457 | explode(str, "@@");
nhttp.c | 1462 | sizeof(bits);
nhttp.c | 1465 | sscanf(bits[i+1], "%s:%s", fname, args);
nhttp.c | 1475 | www_resolve(req);
nhttp.c | 1479 | TP("Calling "+ fname+ "->www_function( \""+ args+ "\" )\n");
nhttp.c | 1510 | TP("Started get.\n");
nhttp.c | 1513 | explode(req->args, "&");
nhttp.c | 1515 | sscanf(bit, "%s=%s", id, str);
nhttp.c | 1523 | replace_string(str, "+", " ");
nhttp.c | 1526 | http_error(fd, errno);
nhttp.c | 1533 | sscanf(req->filename, "%s___%s", req->filename, req->args);
nhttp.c | 1538 | TP("File = "+req->filename+" Args = "+req->args+"\n");
nhttp.c | 1545 | TP("Found file "+req->filename+"\n");
nhttp.c | 1546 | explode(req->filename, ".");
nhttp.c | 1550 | TP("Attempting a call.\n");
nhttp.c | 1553 | TP("error compiling it.\n");
nhttp.c | 1554 | http_error(fd, INTERNAL_ERROR);
nhttp.c | 1562 | TP("error getting content type.\n");
nhttp.c | 1563 | http_error(fd, INTERNAL_ERROR);
nhttp.c | 1569 | if (bit && strlen(bit) >
nhttp.c | 1570 | explode(bit, "&");
nhttp.c | 1577 | replace_string(arg, "+", " ");
nhttp.c | 1578 | unmime(ref arg, NOT_PATH);
nhttp.c | 1579 | unmime(ref name, NOT_PATH);
nhttp.c | 1585 | TP("error handling request.\n");
nhttp.c | 1586 | http_error(fd, INTERNAL_ERROR);
nhttp.c | 1592 | http_error(fd, INTERNAL_ERROR);
nhttp.c | 1603 | sscanf(req->status_line, "%d", req->status);
nhttp.c | 1608 | sprintf("Basic realm=\"%s\"", auth_name(req));
nhttp.c | 1613 | send_string(fd, str, mod_date, location, 1);
nhttp.c | 1615 | TP("invalid result from handler.\n");
nhttp.c | 1616 | http_error(fd, INTERNAL_ERROR);
nhttp.c | 1624 | TP("Reading buffer.\n");
nhttp.c | 1627 | TP("Found html file.\n");
nhttp.c | 1629 | if ((fsize = file_size(req->filename)) >
nhttp.c | 1636 | send_string_array(fd, str, stat(req->filename)[1], 0, 0);
nhttp.c | 1639 | parse_file_string(read_file(req->filename), req, fields);
nhttp.c | 1640 | send_string(fd, str, stat(req->filename)[1], 0, 0);
nhttp.c | 1644 | send_file(fd, req->filename);
nhttp.c | 1648 | http_error(fd, NOT_FOUND);
nhttp.c | 1658 | localtime(time);
nhttp.c | 1691 | localtime(time());
nhttp.c | 1708 | if(sizeof(log_str) >
nhttp.c | 1718 | unguarded((: save_object, SAVE_FILE :));
nhttp.c | 1719 | dest_me();
nhttp.c | 1773 | allocate(10);
nhttp.c | 1810 | member_array(month[0..2], MONTHS);
nhttp.c | 1828 | ltime2sec(ltime);
nhttp.c | 1841 | localtime(x);
nhttp.c | 1843 | localtime(x + offset);
nhttp.c | 1858 | time();
nhttp.c | 1865 | format_date((mtime > now) ? now : mtime);
nhttp.c | 1868 | sprintf("W/\"%x-%x\"", size, mtime);
nhttp.c | 1870 | sprintf("W/\"%x\"", mtime);
nhttp.c | 1881 | parse_date(if_unmodified);
nhttp.c | 1893 | parse_date(if_modified_since);
nhttp.c | 1904 | new(class http_request);
nhttp.c | 1907 | parse_uri(nreq, new_uri);
nhttp.c | 1912 | new(class http_request_header);
nhttp.c | 1924 | new(class http_body_info);
nhttp.c | 1928 | http_error(nreq->sess->fd, INTERNAL_ERROR);
nhttp.c | 1931 | handle_request(nreq);
nhttp.c | 1946 | map_delete(req->rh->headers_in->header_m, "content-length");
nhttp.c | 1948 | internal_redirect(req, location);
nhttp.c | 1952 | http_error(fd, MOVED_TEMP);
nhttp.c | 1958 | http_error(fd, errstatus);
nhttp.c | 1963 | strlen(str);
nhttp.c | 1964 | strlen(str);
nhttp.c | 1967 | set_byterange(req);
nhttp.c | 1968 | http_header(req);
nhttp.c | 1972 | log_request(req, strlen(str));
nhttp.c | 1976 | eventWrite(fd, sprintf("%x\r\n", strlen(str)));
nhttp.c | 1979 | eventWrite(fd, str);
nhttp.c | 1985 | eventWrite(fd, str[offset..offset + length]);
nhttp.c | 1988 | eventWrite(fd, "\r\n0\r\n\r\n");
nhttp.c | 2006 | map_delete(req->rh->headers_in->header_m, "content-length");
nhttp.c | 2008 | internal_redirect(req, location);
nhttp.c | 2012 | http_error(fd, MOVED_TEMP);
nhttp.c | 2017 | strlen(frog);
nhttp.c | 2022 | http_error(fd, errstatus);
nhttp.c | 2031 | set_byterange(req);
nhttp.c | 2032 | http_header(req);
nhttp.c | 2036 | log_request(req, req->bi->clength);
nhttp.c | 2040 | eventWrite(fd, sprintf("%x\r\n", req->bi->clength));
nhttp.c | 2046 | eventWrite(fd, rabbit);
nhttp.c | 2055 | TP("Ummm " + offset + " + " + length + "\n");
nhttp.c | 2057 | strlen(str[index]);
nhttp.c | 2061 | TP("Sending " + index + " [" + offset + " (" + off_min + ")..]\n");
nhttp.c | 2062 | eventWrite(fd, str[index][offset - off_min..]);
nhttp.c | 2063 | strlen(str[index]);
nhttp.c | 2066 | TP("Sending " + index + " [" + offset + " (" + off_min + ").." + length + "]\n");
nhttp.c | 2067 | eventWrite(fd, str[index][offset - off_min..offset + length - off_min]);
nhttp.c | 2071 | eventWrite(fd, "\r\n0\r\n\r\n");
nhttp.c | 2088 | eventWrite(fd, str, 1, 1);
nhttp.c | 2092 | http_error(fd, errstatus);
nhttp.c | 2095 | file_size(str);
nhttp.c | 2102 | log_request(req, req->bi->clength);
nhttp.c | 2104 | explode(req->uri, ".");
nhttp.c | 2135 | set_byterange(req);
nhttp.c | 2136 | http_header(req);
nhttp.c | 2139 | eventWrite(fd, str, 0, 1);
nhttp.c | 2145 | eventWrite(fd, str, 0, 1, offset, offset + length);
nhttp.c | 2171 | map_delete(http_stats, tmp);
nhttp.c | 2173 | map_delete(http_stats, tmp);
nhttp.c | 2175 | map_delete(http_stats, tmp);
nhttp.c | 2176 | write("[" + tmp[0..12] + "] " + tmp + "\n");
nhttp.c | 2182 | sizeof(keys(http_stats));
pop3.c | 9 | parse_comm(class pop_session sess, string str);
pop3.c | 23 | create();
pop3.c | 24 | SetSocketType(STREAM);
pop3.c | 25 | SetDestructOnClose(1);
pop3.c | 27 | call_out("setup", 2);
pop3.c | 28 | call_out("clean_sockets", 180);
pop3.c | 29 | unguarded((: restore_object, "/net/save/pop3" :));
pop3.c | 38 | destruct(this_object());
pop3.c | 47 | eventNewConnection(fd);
pop3.c | 52 | query_host_name(), POP3_VERSION));
pop3.c | 69 | replace_string(sess->command, "\r", "");
pop3.c | 70 | explode(sess->command, "\n");
pop3.c | 72 | eventWrite(fd, "-ERR Null command\r\n");
pop3.c | 75 | parse_comm(sess, bit);
pop3.c | 88 | map_delete(Sockets, fd);
pop3.c | 95 | map(sess->deleted, (: $2->headers[$1-1]->number :), sess);
pop3.c | 96 | delete_it(sess->user_name, "inbox", deleted);
pop3.c | 98 | eventWrite(sess->fd, "+OK Sayonara\r\n", 1);
pop3.c | 99 | unguarded((: save_object, "/net/save/pop3" :));
pop3.c | 120 | rewrite_header(mess);
pop3.c | 121 | replace_string(mess, "\n", "\r\n");
pop3.c | 127 | strlen(mess);
pop3.c | 129 | copy(mess);
pop3.c | 135 | get_messages(sess->user_name, "inbox");
pop3.c | 136 | tell_creator("ceres", "Headers: %d\n", sizeof(sess->headers));
pop3.c | 137 | allocate(sizeof(sess->headers));
pop3.c | 138 | allocate(sizeof(sess->headers));
pop3.c | 139 | sizeof(sess->headers);
pop3.c | 146 | sizeof(sess->headers);
pop3.c | 151 | sizeof(tmp) >
pop3.c | 152 | sizeof(sess->headers);
pop3.c | 163 | TP("Parsing " + str + ".\n");
pop3.c | 165 | explode(str, " ");
pop3.c | 167 | if (sizeof(bits) >
pop3.c | 168 | implode(bits[1..], " ");
pop3.c | 172 | time();
pop3.c | 175 | tell_creator("ceres", "Requesting deletion of %d\n", number);
pop3.c | 177 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 178 | CHECK_CMD(1, "-ERR Missing message number argument\r\n");
pop3.c | 181 | eventWrite(fd, "-ERR No such message\r\n");
pop3.c | 186 | tell_creator("ceres", "Deleting %d\n", number);
pop3.c | 188 | eventWrite(fd, "+OK Message deleted\r\n");
pop3.c | 192 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 193 | eventWrite(fd, sprintf("+OK %d\r\n", last[sess->user_name]));
pop3.c | 194 | tell_creator("ceres", "Returning %d for last\n", last[sess->user_name]);
pop3.c | 197 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 198 | if (sizeof(bits) >
pop3.c | 201 | eventWrite(fd, "-ERR No such message\r\n");
pop3.c | 207 | load_folder(sess);
pop3.c | 213 | eventWrite(fd, "+OK Mailbox scan listing follows\r\n");
pop3.c | 215 | load_folder(sess);
pop3.c | 221 | reset_eval_cost();
pop3.c | 222 | eventWrite(fd, sprintf("%d %d\r\n", ++idx, size));
pop3.c | 227 | reset_eval_cost();
pop3.c | 230 | eventWrite(fd, sprintf("%d %d\r\n", idx, size));
pop3.c | 234 | eventWrite(fd, ".\r\n");
pop3.c | 238 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 239 | eventWrite(fd, "+OK No-op to you too!\r\n");
pop3.c | 242 | CHECK_STATE(POP_AUTH_PASS);
pop3.c | 243 | CHECK_CMD(1, "-ERR Missing password argument\r\n");
pop3.c | 246 | eventWrite(fd, "-ERR Bad login\r\n");
pop3.c | 249 | load_folder(sess);
pop3.c | 250 | get_messages(sess->user_name, "inbox");
pop3.c | 251 | sizeof(sess->headers);
pop3.c | 260 | eventWrite(fd, "+OK Sayonara\r\n", 1);
pop3.c | 264 | sign_off(sess);
pop3.c | 269 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 270 | CHECK_CMD(1, "-ERR Missing message number argument\r\n");
pop3.c | 273 | eventWrite(fd, "-ERR No such message\r\n");
pop3.c | 279 | load_folder(sess);
pop3.c | 283 | load_message(sess, number-1);
pop3.c | 285 | replace_string(sess->messages[number-1], "\n.", "\n..");
pop3.c | 286 | eventWrite(fd, sprintf("+OK %d octets\r\n", sess->sizes[number-1]));
pop3.c | 287 | eventWrite(fd, message + ".\r\n");
pop3.c | 291 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 294 | eventWrite(fd, "+OK Reset state\r\n");
pop3.c | 297 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 299 | load_folder(sess);
pop3.c | 303 | sizeof(sess->sizes));
pop3.c | 305 | implode(sess->sizes, (: $1 + $2 :))));
pop3.c | 309 | reset_eval_cost();
pop3.c | 320 | reset_eval_cost(), $1 + $2 :))));
pop3.c | 324 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 325 | CHECK_CMD(1, "-ERR Missing message number argument\r\n");
pop3.c | 328 | eventWrite(fd, "-ERR No such message\r\n");
pop3.c | 334 | load_folder(sess);
pop3.c | 339 | load_message(sess, number-1);
pop3.c | 341 | if (sizeof(bits) >
pop3.c | 343 | strsrch(sess->messages[number-1], "\r\n\r\n");
pop3.c | 347 | eventWrite(fd, sprintf("+OK %d octets\r\n", sess->sizes[number-1]));
pop3.c | 348 | eventWrite(fd, header);
pop3.c | 350 | explode(message, "\r\n");
pop3.c | 351 | eventWrite(fd, implode(bits[0..lines-1], "\r\n") + "\r\n.\r\n");
pop3.c | 353 | eventWrite(fd, ".\r\n");
pop3.c | 356 | replace_string(sess->messages[number-1], "\n.", "\n..");
pop3.c | 357 | eventWrite(fd, sprintf("+OK %d octets\r\n", sess->sizes[number-1]));
pop3.c | 358 | eventWrite(fd, message + ".\r\n");
pop3.c | 363 | CHECK_STATE(POP_TRANSACTION);
pop3.c | 364 | if (sizeof(bits) >
pop3.c | 367 | eventWrite(fd, "-ERR No such message\r\n");
pop3.c | 373 | load_folder(sess);
pop3.c | 379 | eventWrite(fd, "+OK Unique-ID listing follows\r\n");
pop3.c | 381 | load_folder(sess);
pop3.c | 387 | reset_eval_cost();
pop3.c | 388 | eventWrite(fd, sprintf("%d %d\r\n", ++idx, hdr->number));
pop3.c | 393 | reset_eval_cost();
pop3.c | 396 | eventWrite(fd, sprintf("%d %d\r\n", idx, hdr->number));
pop3.c | 400 | eventWrite(fd, ".\r\n");
pop3.c | 404 | CHECK_STATE(POP_AUTH_USER);
pop3.c | 405 | CHECK_CMD(1, "-ERR Missing username argument\r\n");
pop3.c | 408 | eventWrite(fd, "+OK User name accepted, password please\r\n");
pop3.c | 411 | eventWrite(fd, "-ERR Null command\r\n");
pop3.c | 434 | time();
pop3.c | 438 | close_connection(sess);
pop3.c | 440 | call_out("clean_sockets", 180);
out_tell.c | 17 | eventSendTell(name, newhost, mess);
out_tell.c | 19 | strlen(name)-strlen(host)-13, mess));
out_tell.c | 22 | write(mud_name()+" does not know about the MUD "+host+".\n");
out_tell.c | 28 | destruct(this_object());
imap4.c | 15 | parse_comm(class imap_session sess, string str);
imap4.c | 28 | create();
imap4.c | 29 | SetSocketType(STREAM);
imap4.c | 30 | SetDestructOnClose(1);
imap4.c | 32 | call_out("setup", 2);
imap4.c | 33 | call_out("clean_sockets", 180);
imap4.c | 34 | unguarded((: restore_object, "/net/save/imap4" :));
imap4.c | 43 | destruct(this_object());
imap4.c | 52 | eventNewConnection(fd);
imap4.c | 57 | query_host_name(), IMAP4_VERSION));
imap4.c | 74 | replace_string(sess->command, "\r", "");
imap4.c | 75 | explode(sess->command, "\n");
imap4.c | 77 | eventWrite(fd, "-ERR Null command\r\n");
imap4.c | 80 | parse_comm(sess, bit);
imap4.c | 93 | map_delete(Sockets, fd);
imap4.c | 100 | map(sess->deleted, (: $2->headers[$1-1]->number :), sess);
imap4.c | 101 | delete_it(sess->user_name, "inbox", deleted);
imap4.c | 103 | unguarded((: save_object, "/net/save/imap4" :));
imap4.c | 124 | rewrite_header(mess);
imap4.c | 125 | replace_string(mess, "\n", "\r\n");
imap4.c | 131 | strlen(mess);
imap4.c | 133 | copy(mess);
imap4.c | 139 | get_messages(sess->user_name, sess->selected);
imap4.c | 140 | tell_creator("ceres", "Headers: %d\n", sizeof(sess->headers));
imap4.c | 141 | allocate(sizeof(sess->headers));
imap4.c | 142 | allocate(sizeof(sess->headers));
imap4.c | 143 | sizeof(sess->headers);
imap4.c | 150 | sizeof(sess->headers);
imap4.c | 155 | sizeof(tmp) >
imap4.c | 156 | sizeof(sess->headers);
imap4.c | 167 | TP("Parsing " + str + ".\n");
imap4.c | 169 | explode(str, " ");
imap4.c | 173 | time();
imap4.c | 176 | eventWrite(fd, "* CAPABILITY IMAP4 IMAP4rev1 NAMESPACE AUTH=LOGIN\r\n");
imap4.c | 179 | TP("Sent capability\n");
imap4.c | 182 | eventWrite(fd, id + " OK NOOP completed\r\n");
imap4.c | 186 | sign_off(sess);
imap4.c | 187 | eventWrite(fd, id + " OK LOGOUT completed\r\n", 1);
imap4.c | 192 | CHECK_STATE(IMAP_CONNECTED);
imap4.c | 197 | CHECK_STATE(IMAP_CONNECTED);
imap4.c | 199 | if (sizeof(bits) >
imap4.c | 200 | implode(bits[3..], " ");
imap4.c | 201 | if(sizeof(bits) >
imap4.c | 204 | CHECK_CMD(2, id + " BAD - missing arguments\r\n");
imap4.c | 205 | replace(bits[2], "\"", "");
imap4.c | 206 | replace(rest, "\"", "");
imap4.c | 209 | eventWrite(fd, id + " NO - login failure: user name or password rejected\r\n");
imap4.c | 213 | TP(bits[2] + " logged in.\n");
imap4.c | 220 | CHECK_STATE(IMAP_AUTHENTICATED);
imap4.c | 222 | CHECK_CMD(1, id + " BAD - missing argument.\r\n");
imap4.c | 223 | replace(bits[2], ({"\"", "", "/", ""}));
imap4.c | 226 | eventWrite(fd, id + " OK - SELECT completed\r\n");
imap4.c | 236 | CHECK_STATE(IMAP_AUTHENTICATED);
imap4.c | 238 | eventWrite(fd, "* LIST (\\Noselect) \"/\" /" + tmp + "\r\n");
imap4.c | 240 | eventWrite(fd, id + " OK LIST completed\r\n");
imap4.c | 243 | CHECK_STATE(IMAP_AUTHENTICATED);
imap4.c | 245 | eventWrite(fd, "* LSUB () \"/\" /" + tmp + "\r\n");
imap4.c | 247 | eventWrite(fd, id + " OK LSUB completed\r\n");
imap4.c | 253 | CHECK_STATE(IMAP_SELECTED);
imap4.c | 255 | CHECK_CMD(1, id + " BAD - missing argument.\r\n");
imap4.c | 258 | TP("Doing fetch\n");
imap4.c | 259 | load_folder(sess);
imap4.c | 261 | sscanf(bits[3], "%d:*", j);
imap4.c | 269 | eventWrite(fd, id + " UID FETCH completed\r\n");
imap4.c | 270 | TP("Ok, done\n");
imap4.c | 282 | TP("done parsing\n");
imap4.c | 299 | time();
imap4.c | 303 | close_connection(sess);
imap4.c | 305 | call_out("clean_sockets", 180);
http.c | 95 | www_resolve(class http_request req);
http.c | 96 | resolve_incoming(string addr, string nom, int cle);
http.c | 97 | http_error(int fd, int status);
http.c | 98 | add_activity(int fd, string str, mixed *args ...);
http.c | 99 | close_connection(int fd, int persist);
http.c | 100 | get_file(class http_request req, string body, mixed done);
http.c | 101 | format_date(int x);
http.c | 102 | send_file(int fd, string str);
http.c | 105 | parse_headers(class http_request req, int i);
http.c | 127 | create();
http.c | 128 | SetSocketType(STREAM);
http.c | 129 | SetDestructOnClose(1);
http.c | 133 | get_config(__MAX_BUFFER_SIZE__);
http.c | 135 | get_config(__MAX_STRING_LENGTH__);
http.c | 138 | get_config(__MAX_READ_FILE_SIZE__);
http.c | 141 | get_config(__MAX_BYTE_TRANSFER__);
http.c | 144 | call_out("setup", 2);
http.c | 145 | call_out("clean_sockets", 180);
http.c | 146 | unguarded((: restore_object, SAVE_FILE :));
http.c | 156 | if (this_object()) destruct(this_object());
http.c | 162 | unguarded((: save_object, SAVE_FILE :));
http.c | 185 | strlen(url);
http.c | 194 | hex_to_decimal(url[y+1..]);
http.c | 219 | replace_string(str, " ", "%20");
http.c | 227 | strlen(line);
http.c | 256 | return (ret ? ret[0..i-1] : 0);
http.c | 278 | strlen(token);
http.c | 284 | return (lower_case(line[<tlen..]) == lower_case(token));
http.c | 292 | eventNewConnection(fd);
http.c | 293 | sscanf(socket_address(fd), "%s %*s", tmp);
http.c | 294 | resolve(tmp, "resolve_callback");
http.c | 296 | new(class http_request, uri : "", request : "", status : TIME_OUT);
http.c | 297 | new(class http_session, fd : fd, address : tmp);
http.c | 298 | new(class http_request_header);
http.c | 299 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
http.c | 300 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
http.c | 301 | new(class mime_header, header_m : ([ ]), header_k : ({ }));
http.c | 302 | new(class http_body);
http.c | 303 | new(class http_body_info);
http.c | 305 | remove_call_out(Sockets[fd]->id);
http.c | 314 | strsrch(range, '-');
http.c | 323 | sscanf(range[dashpos+1..], "%d", num);
http.c | 327 | strlen(range);
http.c | 331 | sscanf(range, "%d", start);
http.c | 333 | sscanf(dash[dashpos..], "%d", end);
http.c | 388 | sprintf("%d-%d/%d", range_start, range_end, req->bi->clength);
http.c | 456 | sprintf("bytes %d-%d/%d", range_start, range_end, req->bi->clength);
http.c | 458 | sprintf("%d", range_end - range_start + 1);
http.c | 465 | sprintf("%x%x", req->time, req->sess->fd);
http.c | 471 | sprintf("%d", tlength);
http.c | 485 | find_token(req->rh->headers_out->header_m["Connection"], "close");
http.c | 537 | eventWrite(fd, sprintf("%s %s\r\n", HTTP_PROTOCOL, req->status_line));
http.c | 538 | eventWrite(fd, sprintf("Date: %s\r\n", format_date(req->time)));
http.c | 539 | eventWrite(fd, sprintf("Server: %s\r\n", HTTP_VERSION));
http.c | 541 | map_delete(req->rh->headers_out->header_m, "Date");
http.c | 542 | map_delete(req->rh->headers_out->header_m, "Server");
http.c | 556 | eventWrite(req->sess->fd, "\r\n");
http.c | 564 | strsrch(ua, "MSIE 3") != -1)));
http.c | 571 | basic_header(req);
http.c | 573 | set_persist(req);
http.c | 582 | map_delete(req->rh->headers_out->header_m, "Content-Length");
http.c | 589 | use_range_x(req) ? "/x-" : "/"), req->bi->boundary);
http.c | 605 | format_date(req->time);
http.c | 623 | http_error(fd, BAD_CMD);
http.c | 632 | TP("client sent HTTP/1.1 request without hostname\n");
http.c | 633 | http_error(fd, BAD_CMD);
http.c | 638 | http_error(fd, errno);
http.c | 643 | http_error(fd, errno);
http.c | 651 | http_error(fd, NOT_ALLOWED);
http.c | 659 | http_header(req);
http.c | 660 | sprintf("%s\r\n", req->the_request);
http.c | 666 | lower_case(key)]);
http.c | 668 | sprintf("\r\n");
http.c | 670 | eventWrite(fd, sprintf("%x\r\n", strlen(buff)));
http.c | 672 | eventWrite(fd, buff);
http.c | 674 | eventWrite(fd, "\r\n0\r\n\r\n");
http.c | 679 | http_error(fd, BAD_CMD);
http.c | 682 | basic_header(req);
http.c | 691 | set_persist(req);
http.c | 698 | get_file(req, done);
http.c | 709 | http_error(fd, NOT_IMPLEMENTED);
http.c | 739 | strlen(len);
http.c | 746 | sscanf(len, "%d", body->remaining);
http.c | 749 | get_file(req);
http.c | 765 | get_file(req);
http.c | 778 | sscanf(buf, "%x", len_to_read);
http.c | 781 | sprintf("\r\n%s", req->request);
http.c | 783 | parse_headers(req, i-1);
http.c | 785 | map_delete(req->rh->headers_in->header_m, "transfer-encoding");
http.c | 788 | sprintf("%d", body->read_length);
http.c | 790 | get_file(req);
http.c | 812 | parse_headers(req, i-1);
http.c | 814 | map_delete(req->rh->headers_in->header_m, "transfer-encoding");
http.c | 817 | sprintf("%d", body->read_length);
http.c | 819 | get_file(req);
http.c | 835 | handle_body(req);
http.c | 848 | explode(req->request[0..i], "\r\n") - ({ "", 0 });
http.c | 854 | strlen(bit);
http.c | 862 | lower_case(cont);
http.c | 870 | sprintf(", %s", bit[idx..]);
http.c | 885 | strsrch(name, '/');
http.c | 909 | strlen(uri);
http.c | 949 | remove_call_out(req->id);
http.c | 953 | TP("Received: " + replace(str, ({ "\r", "<CR>", "\n", "<LF>\n"})));
http.c | 965 | sscanf(req->request, "%*(^(\r\n)*)%s\r\n%*s", req->the_request);
http.c | 969 | time();
http.c | 976 | http_error(fd, BAD_CMD);
http.c | 980 | check_fulluri(req, uri);
http.c | 981 | parse_uri(req, uri);
http.c | 986 | sscanf(protocol, "HTTP/%d.%d", major, minor);
http.c | 993 | parse_headers(req, i-1);
http.c | 1017 | http_error(fd, ret);
http.c | 1026 | TP("Closing connection\n");
http.c | 1027 | eventWrite(fd, 0, 1);
http.c | 1030 | call_out("close_connection", 15, fd, 1);
http.c | 1061 | eventRead(fd, 0);
http.c | 1069 | map_delete(Sockets, fd);
http.c | 1071 | map_delete(fds_waiting, fd);
http.c | 1084 | map_delete(Resolve, key);
http.c | 1119 | while (pr2six[bufin[i++]] <= 63);
http.c | 1135 | if ((strlen(prevbufin) >
http.c | 1154 | basic_header(req);
http.c | 1155 | set_persist(req);
http.c | 1189 | http_header(req);
http.c | 1201 | escape_html(req->location));
http.c | 1223 | escape_html(req->uri));
http.c | 1227 | escape_html(req->uri));
http.c | 1232 | escape_html(req->uri));
http.c | 1239 | escape_html(req->method));
http.c | 1243 | escape_html(req->uri));
http.c | 1248 | escape_html(req->uri));
http.c | 1257 | eventWrite(fd, sprintf("%x\r\n", strlen(buff)));
http.c | 1259 | eventWrite(fd, buff);
http.c | 1261 | eventWrite(fd, "\r\n0\r\n\r\n");
http.c | 1274 | http_error(fd, TIME_OUT);
http.c | 1276 | eventWrite(fd, 0, 1);
http.c | 1284 | time();
http.c | 1288 | close_connection(req->sess->fd);
http.c | 1291 | call_out("clean_sockets", 180);
http.c | 1305 | event(users(), "inform", mess, "bad-password");
http.c | 1306 | log_file("BAD_PASSWORD", ctime(time()) + ": " + mess + "\n");
http.c | 1307 | failed_login(req->sess->address);
http.c | 1311 | sprintf("Basic realm=\"%s\"", auth_name(req));
http.c | 1364 | auth_failure(req);
http.c | 1368 | strsrch(auth_req, ' ');
http.c | 1370 | auth_failure(req);
http.c | 1374 | uudecode(auth_req[i+1..]);
http.c | 1375 | explode(decoded, ":");
http.c | 1377 | auth_failure(req);
http.c | 1382 | lower_case(bits[0]);
http.c | 1388 | event(users(), "inform", mess, "bad-password");
http.c | 1389 | log_file("BAD_PASSWORD", ctime(time()) + ": " + mess + "\n");
http.c | 1394 | auth_failure(req);
http.c | 1424 | explode(file, "/") - ({ ".", "..", "" });
http.c | 1427 | sprintf("%s/index.html", DIR_WWW);
http.c | 1441 | if (parts[0][0] == '~' && strlen(parts[0]) >
http.c | 1443 | sprintf("/w/%s/public_html", parts[0][1..]);
http.c | 1445 | sprintf("/d/%s/public_html", lower_case(parts[0])[1..]);
http.c | 1447 | implode(parts, "/");
http.c | 1448 | implode(explode(file, "/")[0..<2], "/");
http.c | 1450 | implode(parts, "/");
http.c | 1451 | implode(parts[0..<2], "/");
http.c | 1453 | sscanf(file, "%s___%s", file, args);
http.c | 1454 | file_size(file);
http.c | 1460 | file_size(file);
http.c | 1462 | sprintf("http://%s%s/", req->hostname, req->uri);
http.c | 1475 | www_authenticate(req);
http.c | 1488 | explode(str, "@@");
http.c | 1493 | sizeof(bits);
http.c | 1496 | sscanf(bits[i+1], "%s:%s", fname, args);
http.c | 1506 | www_resolve(req);
http.c | 1510 | TP("Calling "+ fname+ "->www_function( \""+ args+ "\" )\n");
http.c | 1533 | map_delete(fds_waiting, fd);
http.c | 1537 | throw("Already finished the callback.");
http.c | 1541 | remove_call_out(req->id);
http.c | 1549 | sscanf(req->status_line, "%d", req->status);
http.c | 1554 | sprintf("Basic realm=\"%s\"", auth_name(req));
http.c | 1559 | send_string(fd, str, mod_date, location, 1);
http.c | 1560 | eventWrite(fd, 0, 1);
http.c | 1579 | TP("Started get.\n");
http.c | 1583 | explode(req->args, "&");
http.c | 1585 | sscanf(bit, "%s=%s", id, str);
http.c | 1593 | replace_string(str, "+", " ");
http.c | 1596 | http_error(fd, errno);
http.c | 1603 | sscanf(req->filename, "%s___%s", req->filename, req->args);
http.c | 1608 | TP("File = "+req->filename+" Args = "+req->args+"\n");
http.c | 1616 | TP("Found file "+req->filename+"\n");
http.c | 1617 | explode(req->filename, ".");
http.c | 1621 | TP("Attempting a call.\n");
http.c | 1624 | TP("error compiling it.\n");
http.c | 1625 | http_error(fd, INTERNAL_ERROR);
http.c | 1633 | TP("error getting content type.\n");
http.c | 1634 | http_error(fd, INTERNAL_ERROR);
http.c | 1640 | if (bit && strlen(bit) >
http.c | 1641 | explode(bit, "&");
http.c | 1648 | replace_string(arg, "+", " ");
http.c | 1649 | unmime(ref arg, NOT_PATH);
http.c | 1650 | unmime(ref name, NOT_PATH);
http.c | 1657 | call_out("close_connection", 45, fd, 1);
http.c | 1667 | map_delete(fds_waiting, fd);
http.c | 1670 | TP("error handling request.\n");
http.c | 1671 | http_error(fd, INTERNAL_ERROR);
http.c | 1679 | http_error(fd, INTERNAL_ERROR);
http.c | 1690 | sscanf(req->status_line, "%d", req->status);
http.c | 1695 | sprintf("Basic realm=\"%s\"", auth_name(req));
http.c | 1700 | send_string(fd, str, mod_date, location, 1);
http.c | 1702 | TP("invalid result from handler.\n");
http.c | 1703 | http_error(fd, INTERNAL_ERROR);
http.c | 1713 | TP("Reading buffer.\n");
http.c | 1716 | TP("Found html file.\n");
http.c | 1721 | if ((fsize = file_size(req->filename)) >
http.c | 1728 | send_string_array(fd, str, stat(req->filename)[1], 0, 0);
http.c | 1731 | parse_file_string(read_file(req->filename), req, fields);
http.c | 1732 | send_string(fd, str, stat(req->filename)[1], 0, 0);
http.c | 1736 | send_file(fd, req->filename);
http.c | 1740 | http_error(fd, NOT_FOUND);
http.c | 1750 | localtime(time);
http.c | 1781 | localtime(time());
http.c | 1798 | if(sizeof(log_str) >
http.c | 1809 | unguarded((: save_object, SAVE_FILE :));
http.c | 1810 | localtime(time());
http.c | 1813 | dest_me();
http.c | 1867 | allocate(10);
http.c | 1904 | member_array(month[0..2], MONTHS);
http.c | 1922 | ltime2sec(ltime);
http.c | 1935 | localtime(x);
http.c | 1937 | localtime(x + offset);
http.c | 1952 | time();
http.c | 1959 | format_date((mtime > now) ? now : mtime);
http.c | 1962 | sprintf("W/\"%x-%x\"", size, mtime);
http.c | 1964 | sprintf("W/\"%x\"", mtime);
http.c | 1975 | parse_date(if_unmodified);
http.c | 1987 | parse_date(if_modified_since);
http.c | 1998 | new(class http_request);
http.c | 2001 | parse_uri(nreq, new_uri);
http.c | 2006 | new(class http_request_header);
http.c | 2018 | new(class http_body_info);
http.c | 2022 | http_error(nreq->sess->fd, INTERNAL_ERROR);
http.c | 2025 | handle_request(nreq, 0);
http.c | 2039 | TP("Using send_string\n");
http.c | 2047 | map_delete(req->rh->headers_in->header_m, "content-length");
http.c | 2049 | internal_redirect(req, location);
http.c | 2053 | http_error(fd, MOVED_TEMP);
http.c | 2059 | http_error(fd, errstatus);
http.c | 2064 | set_byterange(req);
http.c | 2071 | explode(replace_string(req->rh->headers_in->header_m[HTTP_ACCEPT_ENCODING], " ", ""), ",");
http.c | 2085 | crc32(str);
http.c | 2087 | tell_creator("pinkfish", "~CRC: %d\n", crc);
http.c | 2089 | sizeof(str);
http.c | 2090 | allocate_buffer(16);
http.c | 2119 | TP("Sending compressed as " + comp_type + "\n");
http.c | 2121 | TP("Sending uncompressed.\n");
http.c | 2126 | sizeof(buf);
http.c | 2128 | sizeof(buf);
http.c | 2132 | http_header(req);
http.c | 2136 | log_request(req, sizeof(buf));
http.c | 2140 | eventWrite(fd, sprintf("%x\r\n", sizeof(buf)));
http.c | 2143 | eventWrite(fd, buf);
http.c | 2148 | eventWrite(fd, buf[offset..offset + length]);
http.c | 2152 | eventWrite(fd, "\r\n0\r\n\r\n");
http.c | 2167 | TP("Using send_string_array\n");
http.c | 2172 | map_delete(req->rh->headers_in->header_m, "content-length");
http.c | 2174 | internal_redirect(req, location);
http.c | 2178 | http_error(fd, MOVED_TEMP);
http.c | 2183 | strlen(frog);
http.c | 2188 | http_error(fd, errstatus);
http.c | 2198 | set_byterange(req);
http.c | 2199 | http_header(req);
http.c | 2203 | log_request(req, req->bi->clength);
http.c | 2207 | eventWrite(fd, sprintf("%x\r\n", req->bi->clength));
http.c | 2213 | eventWrite(fd, rabbit);
http.c | 2222 | TP("Ummm " + offset + " + " + length + "\n");
http.c | 2224 | strlen(str[index]);
http.c | 2228 | TP("Sending " + index + " [" + offset + " (" + off_min + ")..]\n");
http.c | 2229 | eventWrite(fd, str[index][offset - off_min..]);
http.c | 2230 | strlen(str[index]);
http.c | 2233 | TP("Sending " + index + " [" + offset + " (" + off_min + ").." + length + "]\n");
http.c | 2234 | eventWrite(fd, str[index][offset - off_min..offset + length - off_min]);
http.c | 2238 | eventWrite(fd, "\r\n0\r\n\r\n");
http.c | 2255 | eventWrite(fd, str, 1, 1);
http.c | 2259 | http_error(fd, errstatus);
http.c | 2262 | file_size(str);
http.c | 2269 | log_request(req, req->bi->clength);
http.c | 2271 | explode(req->uri, ".");
http.c | 2302 | set_byterange(req);
http.c | 2303 | http_header(req);
http.c | 2306 | eventWrite(fd, str, 0, 1);
http.c | 2312 | eventWrite(fd, str, 0, 1, offset, offset + length);
http.c | 2338 | map_delete(http_stats, tmp);
http.c | 2340 | map_delete(http_stats, tmp);
http.c | 2342 | map_delete(http_stats, tmp);
http.c | 2343 | write("[" + tmp[0..12] + "] " + tmp + "\n");
http.c | 2349 | sizeof(keys(http_stats));
out_finger.c | 13 | eventSendWhoRequest(realhost, this_player()->query_name());
out_finger.c | 15 | eventSendFingerRequest(name, realhost);
out_finger.c | 16 | write("Intermud3 finger on its way.\n");
out_finger.c | 19 | write(mud_name()+" does not know about the MUD "+host+".\n");
out_finger.c | 29 | destruct(this_object());
dictionary.c | 74 | remove_request(class request bing);
dictionary.c | 75 | close_connection();
dictionary.c | 76 | inform_of_problem(class request bing, string str);
dictionary.c | 77 | send_request(class request bing);
dictionary.c | 78 | make_connection();
dictionary.c | 79 | check_send();
dictionary.c | 82 | create();
dictionary.c | 83 | SetSocketType(STREAM);
dictionary.c | 89 | eventWrite(fd, "QUIT\r\n" );
dictionary.c | 90 | eventAbortCallback( fd );
dictionary.c | 91 | close_connection();
dictionary.c | 96 | call_out((: evaluate($1, $2, $3, $4) :), 0, callb, word, result, data);
dictionary.c | 113 | tell_creator(DEBUGGER, "Got %O\n", message);
dictionary.c | 121 | explode( message, "\r\n" );
dictionary.c | 133 | explode( line, " " );
dictionary.c | 174 | check_send();
dictionary.c | 181 | explode( bits[ <2 ][1..<2], "." );
dictionary.c | 185 | tell_creator(DEBUGGER, "Start...\n");
dictionary.c | 189 | sizeof( dict->definitions );
dictionary.c | 194 | sizeof(bing);
dictionary.c | 204 | tell_creator(DEBUGGER, "%O %O\n", bing, dict->definitions);
dictionary.c | 212 | remove_request(dict->current_request);
dictionary.c | 218 | sizeof(dict->definitions);
dictionary.c | 225 | tell_creator(DEBUGGER, "+++ %O\n", dict);
dictionary.c | 232 | remove_request(dict->current_request);
dictionary.c | 234 | tell_creator(DEBUGGER, "--- Fallout!\n");
dictionary.c | 239 | inform_of_problem(dict->current_request, "Error from server.");
dictionary.c | 241 | remove_request(dict->current_request);
dictionary.c | 242 | close_socket( fd, who );
dictionary.c | 254 | remove_request(dict->current_request);
dictionary.c | 276 | tell_creator( "taffyd", "%s, %s\n", address, ip_address );
dictionary.c | 278 | tell_creator(DEBUGGER, "Ig? %O %O %O %O\n", key, _connection, ip_address, address);
dictionary.c | 287 | inform_of_problem(0, "Unable to lookup dns address.");
dictionary.c | 291 | tell_creator(DEBUGGER, "Setup ip.\n");
dictionary.c | 294 | make_connection();
dictionary.c | 301 | tell_creator(DEBUGGER, "Making connection.\n");
dictionary.c | 309 | resolve( DICT_SERVER_NAME, "got_ip_address" );
dictionary.c | 311 | got_ip_address( DICT_SERVER_NAME, DICT_SERVER_IP, 0 );
dictionary.c | 314 | eventCreateSocket( _connection->ip_address, 2628 );
dictionary.c | 317 | inform_of_problem(0, "unable to connect");
dictionary.c | 324 | call_out( "close_socket", 120, new_fd, this_player() );
dictionary.c | 335 | close_socket( fd, this_player() );
dictionary.c | 336 | inform_of_problem(0, "socket closed");
dictionary.c | 341 | tell_creator(DEBUGGER, "%O\n", _connection);
dictionary.c | 343 | make_connection();
dictionary.c | 345 | send_request(_requests[0]);
dictionary.c | 350 | tell_creator(DEBUGGER, "Sending request %O\n", bing);
dictionary.c | 371 | sizeof(_requests);
dictionary.c | 379 | check_send();
dictionary.c | 383 | tell_creator(DEBUGGER, "Adding request %O\n", bing);
dictionary.c | 386 | check_send();
dictionary.c | 392 | new(class request);
dictionary.c | 406 | add_request(request);
dictionary.c | 412 | new(class request);
dictionary.c | 426 | add_request(request);
dictionary.c | 431 | do_callback(bing->callback, bing->word, mess, ({ }));
dictionary.c | 432 | remove_request(bing);
dictionary.c | 435 | do_callback(bing->callback, bing->word, mess, ({ }));
dictionary.c | 442 | close_connection();
dictionary.c | 443 | dest_me();
board_thingy.c | 26 | create();
board_thingy.c | 27 | SetSocketType(STREAM);
board_thingy.c | 28 | SetDestructOnClose(1);
board_thingy.c | 29 | call_out("setup", 2);
board_thingy.c | 42 | if (this_object()) destruct(this_object());
board_thingy.c | 53 | tell_object(find_player("pinkfish"), "Got: "+str);
board_thingy.c | 55 | explode(replace_string(str, "\r", ""), "\n");
board_thingy.c | 56 | test_creator(sockets[fd]);
board_thingy.c | 57 | sizeof(frogs);
board_thingy.c | 58 | explode(frogs[j], " ");
board_thingy.c | 62 | sizeof(board_names);
board_thingy.c | 63 | eventWrite(fd, "board "+board_names[i]+"\n");
board_thingy.c | 65 | sizeof(board_names);
board_thingy.c | 66 | eventWrite(fd, "board "+creator_board_names[i]+"\n");
board_thingy.c | 69 | sizeof(board_names);
board_thingy.c | 70 | eventWrite(fd, "board "+board_names[i]+"\n");
board_thingy.c | 77 | get_subjects(bits[1]);
board_thingy.c | 78 | sizeof(stuff);
board_thingy.c | 81 | ctime(stuff[i][B_TIME])[4..9]+"\n");
board_thingy.c | 88 | get_subjects(bits[2]);
board_thingy.c | 89 | sizeof(stuff);
board_thingy.c | 91 | eventWrite(fd, "message "+bits[1]+" "+bits[2]+"\n");
board_thingy.c | 102 | eventWrite(fd, 0, 1);
board_thingy.c | 107 | eventWrite(fd, "login Ok\n");
board_thingy.c | 109 | eventWrite(fd, "login Failed\n");
board_thingy.c | 113 | eventWrite(fd, "logout Ok\n");
board_thingy.c | 125 | map_delete(sockets, fd);
in_finger_demon.c | 20 | got_home(int bing);
in_finger_demon.c | 23 | set_name("demon");
in_finger_demon.c | 24 | set_short("small blue demon");
in_finger_demon.c | 28 | add_adjective(({ "small", "blue" }));
in_finger_demon.c | 29 | set_race("imp");
in_finger_demon.c | 30 | set_level(5);
in_finger_demon.c | 31 | add_property("demon", 1);
in_finger_demon.c | 32 | add_property("emote", 1);
in_finger_demon.c | 33 | clone_object("/std/object");
in_finger_demon.c | 34 | set_name("notebook");
in_finger_demon.c | 35 | add_alias("book");
in_finger_demon.c | 36 | add_plural("books");
in_finger_demon.c | 37 | add_adjective(({ "large", "green", "note" }));
in_finger_demon.c | 38 | set_long("A large note book, it looks almost brand new.\n");
in_finger_demon.c | 39 | set_short("large green note book");
in_finger_demon.c | 40 | move(this_object());
in_finger_demon.c | 47 | stop_fight(this_object());
in_finger_demon.c | 48 | do_command("stare "+ (string)thing->query_name());
in_finger_demon.c | 49 | add_effect("/std/effects/ingested/calm", 60);
in_finger_demon.c | 56 | command("cry");
in_finger_demon.c | 57 | command("'There goes my chance for a gold frog.");
in_finger_demon.c | 58 | init_command("sigh");
in_finger_demon.c | 59 | call_out("go_away", 5);
in_finger_demon.c | 67 | call_out("do_command", 1, "follow "+my_player->query_name());
in_finger_demon.c | 68 | call_out("do_command", 2, "'Ahhhh ha!  I have found you.");
in_finger_demon.c | 69 | call_out("do_command", 3, "eye "+my_player->query_name());
in_finger_demon.c | 70 | call_out("do_command", 4, "mutter");
in_finger_demon.c | 71 | call_out("do_command", 5, "emote scribbles something in its notebook.");
in_finger_demon.c | 72 | call_out("do_command", 6, "peer care at "+my_player->query_name());
in_finger_demon.c | 73 | call_out("do_command", 7, "mutter purple aardvarks");
in_finger_demon.c | 74 | call_out("do_command", 8, "smile bri");
in_finger_demon.c | 75 | call_out("do_command", 9, "'Right, got all the info.");
in_finger_demon.c | 76 | call_out("do_command", 10, "wave mad");
in_finger_demon.c | 77 | call_out("do_command", 11, "unfollow "+my_player->query_name());
in_finger_demon.c | 78 | call_out("go_home", 15);
in_finger_demon.c | 87 | find_player(who);
in_finger_demon.c | 89 | command("cry");
in_finger_demon.c | 90 | command("'There goes my chance for a gold frog.");
in_finger_demon.c | 91 | call_out("go_away", 5);
in_finger_demon.c | 95 | add_property("no finger daemon", 1, 300);
in_finger_demon.c | 112 | command("'Home sweet home!");
in_finger_demon.c | 113 | call_out("go_away", 3);
in_finger_demon.c | 117 | command("wave");
tell_demon.c | 21 | set_name("purple demon");
tell_demon.c | 24 | add_alias("demon");
tell_demon.c | 25 | set_short("purple demon");
tell_demon.c | 26 | set_race( "imp" );
tell_demon.c | 27 | set_level(-2);
tell_demon.c | 28 | add_adjective(({ "purple", "short" }));
tell_demon.c | 29 | clone_object("/std/object");
tell_demon.c | 30 | set_name("notebook");
tell_demon.c | 31 | add_alias("book");
tell_demon.c | 32 | add_plural("books");
tell_demon.c | 33 | add_adjective(({ "large", "note" }));
tell_demon.c | 34 | set_long("A large note book, it looks almost brand new.\n");
tell_demon.c | 35 | set_short("large note book");
tell_demon.c | 36 | move(this_object());
tell_demon.c | 37 | add_property("demon", 1);
tell_demon.c | 47 | command("cry");
tell_demon.c | 48 | command("'There goes my chance for a gold frog.");
tell_demon.c | 49 | init_command("sigh");
tell_demon.c | 50 | call_out("go_away", 2);
tell_demon.c | 55 | move_player("X", environment(my_player));
tell_demon.c | 57 | init_command("give note book to "+my_player->query_name());
tell_demon.c | 58 | init_command("smile "+my_player->query_name());
tell_demon.c | 59 | call_out("go_away", 20);
tell_demon.c | 63 | move_player("X", COMM_ROOM);
tell_demon.c | 65 | short(0)+" scribbles something hurridly down in its notebook.\n");
tell_demon.c | 66 | find_player(lower_case(who));
tell_demon.c | 69 | add_property("goto player", my_player->query_name());
tell_demon.c | 73 | got_player(0);
tell_demon.c | 74 | set_read_mess(person+"@"+mud+" sent you this message:\n"+mess);
tell_demon.c | 80 | call_out("do_dest", 10, ob);
tell_demon.c | 85 | call_out("do_dest", 10, ob);
tell_demon.c | 93 | environment(ob);
tell_demon.c | 96 | short()+" spontaneously combusts.\n", ({ ob2 }));
tell_demon.c | 97 | tell_object(ob2, "Your "+ob->short()+" spontaneously combusts.\n");
tell_demon.c | 99 | tell_room(ob2, ob->short()+" spontaneously combusts.\n");
tell_demon.c | 101 | dest_me();
tell_demon.c | 105 | command("wave");
tell_demon.c | 108 | dest_me();
client.c | 32 | seteuid(getuid());
client.c | 40 | new(class client);
client.c | 43 | socket_create(SocketType, "eventReadCallback", "eventAbortCallback");
client.c | 45 | eventSocketError("Error in socket_create().", x);
client.c | 49 | socket_bind(Socket->Descriptor, 0);
client.c | 51 | eventClose(Socket);
client.c | 52 | eventSocketError("Error in socket_bind().", x);
client.c | 58 | eventClose(Socket);
client.c | 59 | eventSocketError("Error in socket_connect().", x);
client.c | 69 | eventClose((class client)Sockets[fd]);
client.c | 73 | if( functionp(Read) ) evaluate(Read, fd, val);
client.c | 74 | eventRead(fd, val);
client.c | 98 | call_out( (: eventWriteCallback($(fd)) :), 0);
client.c | 104 | eventClose(Socket);
client.c | 105 | eventSocketError("Error in socket_write().", x);
client.c | 118 | if( Socket->Buffer ) Socket->Buffer += ({ val });
client.c | 121 | eventWriteCallback(fd);
client.c | 129 | map_delete(Sockets, sock->Descriptor);
client.c | 130 | eventSocketClose(sock->Descriptor);
client.c | 132 | if( DestructOnClose && !sizeof(keys(Sockets))) destruct(this_object());
client.c | 141 | eventClose(Socket);
client.c | 142 | if (this_object()) destruct(this_object());
client.c | 148 | log_file(LogFile, ctime(time()) + "\n" + socket_error(x) + "\n");
client.c | 151 | SetRead(function f) { return (Read = f);
client.c | 153 | SetSocketType(int type) { return (SocketType = type);
client.c | 155 | SetDestructOnClose(int x) { return (DestructOnClose = x);
server.c | 29 | seteuid(getuid());
server.c | 41 | eventSocketError("Error in socket_create().", x);
server.c | 44 | new(class server);
server.c | 47 | socket_bind(Listen->Descriptor, port);
server.c | 49 | eventClose(Listen);
server.c | 50 | eventSocketError("Error in socket_bind().", x);
server.c | 53 | socket_listen(Listen->Descriptor, "eventServerListenCallback");
server.c | 55 | eventClose(Listen);
server.c | 56 | eventSocketError("Error in socket_listen().", x);
server.c | 68 | eventSocketError("Error in socket_accept().", x);
server.c | 71 | eventNewConnection(x);
server.c | 76 | eventClose(Listen);
server.c | 78 | eventClose(Sockets[fd]);
server.c | 83 | evaluate(Read, fd, val);
server.c | 85 | eventRead(fd, val);
server.c | 104 | eventClose(sock);
server.c | 112 | read_buffer(t->Filename, t->Pos, t->Size - t->Pos);
server.c | 114 | read_buffer(t->Filename, t->Pos, BLOCK_SIZE);
server.c | 126 | call_out( (: eventServerWriteCallback :), 1, fd);
server.c | 132 | eventClose(sock);
server.c | 133 | eventSocketError("Error in socket_write().", x);
server.c | 140 | eventClose(sock);
server.c | 159 | new(class buff);
server.c | 166 | file_size(val);
server.c | 179 | eventServerWriteCallback(sock->Descriptor);
server.c | 186 | map_delete(Sockets, sock->Descriptor);
server.c | 187 | socket_close(sock->Descriptor);
server.c | 188 | eventSocketClosed(sock->Descriptor);
server.c | 191 | destruct(this_object());
server.c | 198 | eventClose(Listen);
server.c | 200 | destruct(this_object());
server.c | 205 | new(class server, Descriptor : fd);
server.c | 212 | return (Read = f);
server.c | 216 | return (SocketType = type);
server.c | 220 | return (DestructOnClose = x);
dict.c | 59 | create();
dict.c | 60 | SetSocketType(STREAM);
dict.c | 61 | create();
dict.c | 77 | set_name("dictionary");
dict.c | 78 | set_short( (: calculate_short() :) );
dict.c | 83 | set_weight( 0 );
dict.c | 89 | eventWrite(fd, "QUIT\r\n" );
dict.c | 90 | eventAbortCallback( fd );
dict.c | 91 | eventSocketClose( fd );
dict.c | 92 | map_delete( _connections, who );
dict.c | 97 | tell_object( who, "You close the dictionary.\n" );
dict.c | 99 | tell_object(who, "The dictionary closes.\n");
dict.c | 118 | filter( _connections, (: $(fd) == $2->fd :) );
dict.c | 125 | explode( message, "\r\n" );
dict.c | 136 | explode( line, " " );
dict.c | 177 | explode( bits[ <2 ][1..<2], "." );
dict.c | 184 | sizeof( dict->definitions );
dict.c | 189 | query_cols() - 5, 0 );
dict.c | 203 | sizeof(dict->definitions);
dict.c | 211 | query_cols(), text) + "\n");
dict.c | 220 | close_socket( fd, who );
dict.c | 270 | map_delete( _connections, player );
dict.c | 278 | map_delete( _connections, player );
dict.c | 282 | tell_creator( "taffyd", "Dictionary connection details: %s, %s.\n", address, ip_address );
dict.c | 283 | eventCreateSocket( ip_address, 2628 );
dict.c | 289 | map_delete( _connections, player );
dict.c | 298 | call_out( "close_socket", 120, new_fd, this_player() );
dict.c | 302 | eventCreateSocket("208.48.44.94", 2628);
dict.c | 311 | call_out( "close_socket", 120, new_fd, this_player() );
dict.c | 319 | add_failed_mess( "$D is already open!\n" );
dict.c | 323 | resolve( "dict.org", "got_ip_address" );
dict.c | 334 | add_succeeded_mess( "$N $V the dictionary.\n" );
dict.c | 342 | add_failed_mess( "You have not opened the dictionary!\n" );
dict.c | 347 | close_socket( dict->fd, this_player() );
dict.c | 349 | add_succeeded_mess( "" );
dict.c | 357 | add_failed_mess( "The dictionary is closed!\n" );
dict.c | 362 | add_failed_mess( "The dictionary is currently busy.\n" );
dict.c | 367 | if (sizeof(args) >
dict.c | 379 | add_succeeded_mess( ({ "Searching...\n", "" }) );
dict.c | 387 | add_failed_mess( "The dictionary is closed!\n" );
dict.c | 392 | add_failed_mess( "The dictionary is currently busy.\n" );
dict.c | 398 | if(sizeof(args) >
dict.c | 409 | add_succeeded_mess( ({ "Searching...\n", "" }) );
dict.c | 414 | add_command( "open", "<direct:object>", (: do_open() :) );
dict.c | 415 | add_command( "close", "<direct:object>", (: do_close() :) );
dict.c | 416 | add_command( "define", "<string> [all]", (: do_define($4) :) );
dict.c | 417 | add_command( "spell", "<string> [all]", (: do_spell($4) :) );
dict.c | 425 | close_socket( dict->fd, ob );
dict.c | 428 | dest_me();
dict.c | 429 | dest_me();
http.c | 33 | add_failed_mess( "Incomplete URL\n" );
http.c | 38 | add_failed_mess( "This client only supports the HTTP protocol.\n" );
http.c | 42 | strsrch( full_host, ":" );
http.c | 46 | to_int( full_host[pos+1..] );
http.c | 53 | tell_object( this_player(), "Connecting to " + hostname + "...\n" );
http.c | 55 | resolve( hostname, "got_ip_address" );
http.c | 56 | this_player(), port, path });
http.c | 58 | add_succeeded_mess( "" );
http.c | 63 | create();
http.c | 64 | SetSocketType(STREAM);
http.c | 65 | create();
http.c | 69 | set_name( "browser" );
http.c | 70 | set_short( "http browser" );
http.c | 71 | add_adjective( "http" );
http.c | 74 | set_weight( 0 );
http.c | 78 | map_delete( _connections, fd );
http.c | 79 | eventAbortCallback( fd );
http.c | 80 | eventSocketClose( fd );
http.c | 84 | add_command( "http", "get <string>", (: do_http_get( $4[0] ) :) );
http.c | 93 | tell_object( tmp->owner, message );
http.c | 103 | tell_creator( "taffyd", "%O, %O, %O\n", address, ip_address, key );
http.c | 113 | map_delete( _dns_lookups, key );
http.c | 116 | tell_object( player, "Unable to resolve " + ip_address + ".\n" );
http.c | 130 | sprintf( "Connecting to %s on port %d.\n", ip_address, port ) );
http.c | 132 | eventCreateSocket( ip_address, port );
http.c | 135 | eventWrite( fd, sprintf( "GET %s HTTP/1.0\r\n\r\n", path ) );
http.c | 144 | call_out( "close_socket", 30, fd );
http.c | 150 | close_socket( fd );
http.c | 153 | dest_me();
http.c | 154 | dest_me();
smtp.c | 36 | create();
smtp.c | 37 | SetSocketType(STREAM);
smtp.c | 38 | SetDestructOnClose(1);
smtp.c | 42 | eventWrite(fd, mess);
smtp.c | 57 | map(to, (: "RCPT TO:<" + $1 + ">\r\n" :));
smtp.c | 63 | rewrite_header(mess);
smtp.c | 64 | replace(mess, ({"\n.", "\n..", "\n", "\r\n"}));
smtp.c | 77 | TP(sprintf("SMTP: Writing %s\n", data[0][0]));
smtp.c | 78 | eventWrite(data[0][0]);
smtp.c | 81 | TP("SMTP: No more data, next message.\n");
smtp.c | 84 | TP(sprintf("SMTP: Writing QUIT\n"));
smtp.c | 85 | eventWrite("QUIT\r\n");
smtp.c | 87 | eventSuccess();
smtp.c | 92 | if (sizeof(messages) && messages[0] && (strlen(messages[0]) >
smtp.c | 93 | TP("SMTP: Sending mail message.\n");
smtp.c | 94 | eventWrite(messages[0] + "\n.\n");
smtp.c | 97 | TP("SMTP: No message...\n");
smtp.c | 99 | eventWrite("RSET\r\n");
smtp.c | 105 | TP(sprintf("SMTP: Forwarding to %s.\n", who));
smtp.c | 106 | eventWrite("RSET\r\n");
smtp.c | 107 | eventWrite(sprintf("RCPT TO:<%s>\r\n", who));
smtp.c | 109 | TP("SMTP: Told to forward, but no forwardee...\n");
smtp.c | 110 | eventWrite("QUIT\r\n");
smtp.c | 118 | replace_string(mess, "\r", "");
smtp.c | 121 | eventWrite(sprintf("HELO %s\r\n", MUD_IP_NAME));
smtp.c | 125 | eventSuccess();
smtp.c | 128 | eventOKToSendMail();
smtp.c | 143 | TP(sprintf("<FATAL> SMTP: %s", mess));
smtp.c | 144 | eventWrite("QUIT\r\n");
smtp.c | 148 | TP(sprintf("SMTP: %s", mess));
smtp.c | 151 | eventForward(forward);
oob_client.c | 24 | create();
oob_client.c | 25 | SetSocketType(MUD);
oob_client.c | 26 | SetDestructOnClose(1);
oob_client.c | 35 | GetMudName(mudname);
oob_client.c | 48 | eventWrite(fd, ({ "oob-begin", mud_name(), 1, key }));
oob_client.c | 57 | call_other(SERVICES_D, Connections[fd], packet[1]);
oob_client.c | 60 | dest_me();
oob_client.c | 63 | eventReceiveMailAck(packet);
oob_client.c | 66 | eventReceiveFileList(packet);
oob_client.c | 69 | eventReceivePutAck(packet);
oob_client.c | 72 | eventReceiveFile(packet);
mudlist.c | 28 | if( str && str != "" && strlen(str) >
mudlist.c | 32 | GetMudList();
mudlist.c | 52 | strlen(str = replace_string(lower_case(str), " ", ""));
mudlist.c | 53 | strlen(tmpstr = replace_string(lower_case(tmpstr), " ", ""));
mudlist.c | 100 | write(msg);
mudlist.c | 107 | sort_array(list, 1);
mudlist.c | 110 | previous_object()->more_string(implode(list, "\n")+"\n", "Mudlist");
mudlist.c | 134 | this_player());
mudlist.c | 138 | destruct(this_object());
intermud.c | 30 | create();
intermud.c | 37 | new(class list);
intermud.c | 38 | new(class list);
intermud.c | 43 | if( file_size( SAVE_INTERMUD __SAVE_EXTENSION__ ) >
intermud.c | 44 | unguarded((: restore_object, SAVE_INTERMUD, 1 :));
intermud.c | 45 | SetSocketType(MUD);
intermud.c | 46 | SetDestructOnClose(1);
intermud.c | 47 | call_out( (: Setup :), 2);
intermud.c | 51 | eventWrite(Fd, packet);
intermud.c | 55 | eventWrite(fd, packet);
intermud.c | 63 | sscanf(Nameservers[0][1], "%s %d", ip, port);
intermud.c | 70 | GetServices(), 0 }) );
intermud.c | 90 | unguarded((: save_object, SAVE_INTERMUD, 2 :));
intermud.c | 94 | Setup();
intermud.c | 104 | map_delete(MudList->List, cle);
intermud.c | 107 | unguarded((: save_object, SAVE_INTERMUD, 2 :));
intermud.c | 110 | eventReceiveAuthRequest(packet);
intermud.c | 113 | eventReceiveAuthReply(packet);
intermud.c | 116 | eventReceiveChannelEmote(packet);
intermud.c | 119 | eventReceiveChannelMessage(packet);
intermud.c | 122 | eventReceiveChannelWhoReply(packet);
intermud.c | 125 | eventReceiveChannelWhoRequest(packet);
intermud.c | 128 | eventReceiveChannelUserRequest(packet);
intermud.c | 136 | map_delete(ChannelList->List, cle);
intermud.c | 139 | unguarded((: save_object, SAVE_INTERMUD, 2 :));
intermud.c | 140 | eventRegisterChannels(packet[7]);
intermud.c | 143 | eventReceiveEmote(packet);
intermud.c | 146 | eventReceiveFingerRequest(packet);
intermud.c | 149 | eventReceiveFingerReply(packet);
intermud.c | 152 | eventReceiveLocateRequest(packet);
intermud.c | 155 | eventReceiveLocateReply(packet);
intermud.c | 158 | eventReceiveTell(packet);
intermud.c | 161 | eventReceiveWhoRequest(packet);
intermud.c | 164 | eventReceiveWhoReply(packet);
intermud.c | 167 | eventReceiveError(packet);
intermud.c | 181 | call_out( (: Setup :), 20 + extra_wait);
intermud.c | 186 | error("Failed to find a useful name server.\n");
intermud.c | 189 | SetSocketType(int x) { return client::SetSocketType(MUD);
intermud.c | 200 | lower_case(str);
intermud.c | 202 | member_array(lower_case(mud), lc);
intermud.c | 207 | GetMudList() { return copy(MudList->List);
intermud.c | 209 | GetMuds() { return keys(MudList->List);
intermud.c | 211 | GetChannelList() { return copy(ChannelList->List);
intermud.c | 213 | GetChannels() { return keys(ChannelList->List);
intermud.c | 218 | lower_case(mud);
intermud.c | 219 | map(uc = keys(MudList->List), (: lower_case :));
intermud.c | 220 | map(filter(regexp(lc, "^"+mud, 1), (: intp :)), (: $(uc)[$1] :));
services.c | 26 | GetServices();
services.c | 29 | seteuid(getuid());
services.c | 101 | GetNameserver(), 0, secs }) );
oob_server.c | 27 | create();
oob_server.c | 29 | SetSocketType(MUD);
oob_server.c | 30 | SetDestructOnClose(1);
oob_server.c | 37 | remove_call_out("eventTimeout");
oob_server.c | 39 | call_out("eventTimeout", TIMEOUT, Listening);
oob_server.c | 43 | if (this_object()) destruct(this_object());
oob_server.c | 44 | call_out("eventTimeout", TIMEOUT, x);
oob_server.c | 49 | eventServerAbortCallback(fd);
oob_server.c | 54 | eventTimeout(((class connection)Connections[fd])->MudName);
oob_server.c | 55 | map_delete(Connections, fd);
oob_server.c | 60 | remove_call_out("eventTimeout");
oob_server.c | 61 | call_out("eventTimeout", TIMEOUT, fd);
oob_server.c | 66 | eventTimeout(fd);
oob_server.c | 69 | GetKey(packet[1]);
oob_server.c | 72 | eventTimeout(fd);
oob_server.c | 78 | new(class connection);
oob_server.c | 82 | eventTimeout(packet[1]);
oob_server.c | 83 | eventWrite(fd, ({"oob-begin", mud_name(), 0, 0}));
oob_server.c | 87 | eventTimeout(fd);
oob_server.c | 91 | eventWrite(fd, ((class connection)Connections[fd])->Buffer);
oob_server.c | 92 | eventWrite(fd, ({"oob-end", mud_name()}));
oob_server.c | 96 | eventTimeout(fd);
oob_server.c | 99 | eventReceiveMail(packet);
oob_server.c | 103 | eventTimeout(fd);
oob_server.c | 106 | eventReceiveMailAck(packet);
channel.c | 16 | GetLocalChannel(string ch);
channel.c | 27 | GetLocalChannel(packet[6]);
channel.c | 33 | tell_object(ob, "Listening to " + packet[6] + " at " + packet[2] + ": ");
channel.c | 34 | tell_object(ob, implode(packet[7], " ")+"\n");
channel.c | 54 | query_cap_name();
channel.c | 76 | query_cap_name();
channel.c | 106 | strip_colours(packet[8]);
channel.c | 116 | strip_colours( packet[8] );
channel.c | 128 | sprintf("%c", 27), "ESC" }));
channel.c | 130 | GetLocalChannel((string)packet[6]));
channel.c | 132 | children(TALKER);
channel.c | 133 | find_object(TALKER) });
channel.c | 146 | replace_string(txt, "$N", "");
channel.c | 170 | ctime(time()), packet );
channel.c | 177 | strip_colours( packet[8] );
channel.c | 187 | sprintf("%c", 27), "ESC" }));
channel.c | 190 | GetLocalChannel((string)packet[6]));
channel.c | 192 | children(TALKER);
channel.c | 193 | find_object(TALKER) });
channel.c | 195 | clean_emote_string( packet[8] ) );
channel.c | 211 | mud_name();
channel.c | 221 | eventExternWrite(packet);
channel.c | 227 | this_player(1)->query_name();
channel.c | 253 | GetNameserver();
channel.c | 259 | GetLocalChannel(channel);
channel.c | 267 | ctime(time()) + "\nValue: " + sprintf("%O", val) + "\n\n");
locate.c | 21 | if ( query_idle(ob) >
locate.c | 40 | tell_object(ob, packet[7] + " was just located on " + packet[6] + ".\n");
locate.c | 41 | if ( sizeof(packet) >
locate.c | 43 | tell_object(ob, packet[7]+" has been idle for "+packet[8]+" seconds.\n");
locate.c | 45 | tell_object(ob, packet[7]+" is " + packet[9] + ".\n");
locate.c | 53 | eventExternWrite( ({ "locate-req", 5, mud_name(), pl, 0, 0, who }) );
emoteto.c | 15 | lower_case(packet[5]);
emoteto.c | 35 | replace_string(packet[7], "$N", packet[6] + "@" + packet[2]);
emoteto.c | 36 | event_emote(this_object(), "%^MAGENTA%^"+ packet[7]+ "%^RESET%^\n");
emoteto.c | 42 | this_player(1)->query_name();
emoteto.c | 43 | this_player(1)->query_cap_name();
emoteto.c | 44 | GetMudName(where);
emoteto.c | 51 | lower_case(who), plc, "$N "+msg }));
error.c | 22 | log_file("errors/intermud", error_code + ": " + msg + "\n");
error.c | 23 | log_file("errors/intermud", "Name of sending mud: "+mud+"\n");
error.c | 26 | sprintf("%O\n", packet));
error.c | 29 | log_file("errors/intermud", error_code + ": " + msg + "\n");
error.c | 31 | log_file("errors/intermud", "Channel name: "+packet[6]+"\n");
who.c | 24 | more_string(implode(list, "\n")+"\n", "Who");
who.c | 54 | query_status($1) }) :));
who.c | 60 | eventExternWrite(({ "who-req", 5, mud_name(), who, mud, 0 }));
auth.c | 15 | random(time());
auth.c | 18 | call_out("eventTimeout", TIMEOUT, packet[2]);
auth.c | 25 | map_delete(sessions, mudname);
auth.c | 37 | eventExternWrite(({"auth-mud-req", 5, mud_name(), 0, other, 0}));
auth.c | 41 | copy(sessions);
tell.c | 17 | lower_case(packet[5]);
tell.c | 40 | SetProperty("reply", packet[6] + "@" + packet[2]);
tell.c | 46 | this_player(1)->query_name();
tell.c | 47 | this_player(1)->query_cap_name();
tell.c | 48 | GetMudName(where);
tell.c | 50 | lower_case(who), plc, msg }));
finger.c | 26 | clone_object("/net/daemon/chars/in_finger_demon");
finger.c | 27 | setup_finger(lower_case(packet[6]));
finger.c | 29 | eventExternWrite(ret);
finger.c | 41 | map_delete( _finger_ids, lower_case( packet[5] ) );
finger.c | 55 | tell_object(ob, fing);
finger.c | 65 | lower_case( crypt( pl, 0 ) );
oob.c | 12 | call_out(eventTimeout, 600, packet[2]);
oob.c | 13 | eventListen();
snmp.c | 36 | sizeof(tbuf);
snmp.c | 38 | sprintf("%X ", tbuf[ti]);
snmp.c | 40 | tell_creator("sojan", "Buffer %s: %s\n", what, tstr);
snmp.c | 46 | socket_create(DATAGRAM_BINARY, "ReceiveData");
snmp.c | 47 | socket_bind(s, LISTEN_PORT);
snmp.c | 54 | allocate_buffer(500);
snmp.c | 61 | sizeof(Reply->community);
snmp.c | 62 | write_buffer(ReplyBuf, 7, Reply->community);
snmp.c | 67 | sizeof(Reply->PacketID);
snmp.c | 69 | sizeof(Reply->PacketID);
snmp.c | 83 | sizeof(Reply->ObjectData);
snmp.c | 85 | write_buffer(ReplyBuf, l, Reply->ObjectData[j]);
snmp.c | 86 | sizeof(Reply->ObjectData[j]);
snmp.c | 90 | allocate_buffer(l);
snmp.c | 93 | socket_write(s, RealReplyBuf, Reply->SourceAddress);
snmp.c | 113 | sizeof(CurrentMessage->ObjectData);
snmp.c | 116 | GetData(CurrentMessage->ObjectData[i][2..j+1]);
snmp.c | 117 | if(mibdata[0]==SEQUENCE) MyReply->ObjectData+=({mibdata,});
snmp.c | 119 | SendReply(MyReply);
snmp.c | 190 | ParseObjects(NewMessage);
monster.c | 66 | do_move_after(int running_away);
monster.c | 67 | do_route_move();
monster.c | 68 | _next_queued_command();
monster.c | 69 | start_attack( object who );
monster.c | 72 | _process_input(string);
monster.c | 73 | command(string);
monster.c | 74 | command_override(function func);
monster.c | 75 | drunk_check(string str);
monster.c | 82 | create();
monster.c | 83 | create();
monster.c | 84 | create();
monster.c | 85 | create();
monster.c | 86 | create();
monster.c | 88 | reset_get();
monster.c | 100 | enable_commands();
monster.c | 101 | living_commands();
monster.c | 102 | parser_commands();
monster.c | 103 | communicate_commands();
monster.c | 104 | command_commands();
monster.c | 105 | add_property("npc",1);
monster.c | 106 | set_rows( 24 );
monster.c | 107 | set_cols( 200 );
monster.c | 111 | add_action("*", "soul_commqz", -2);
monster.c | 114 | add_action("init_race", "init_race");
monster.c | 115 | race_guild_commands();
monster.c | 117 | set_con( 13 );
monster.c | 118 | set_dex( 13 );
monster.c | 119 | set_int( 13 );
monster.c | 120 | set_str( 13 );
monster.c | 121 | set_wis( 13 );
monster.c | 122 | set_max_hp( 10000 );
monster.c | 123 | set_hp( 100000 );
monster.c | 124 | set_max_gp( 10000 );
monster.c | 125 | set_gp( 10000 );
monster.c | 127 | this_object()->setup();
monster.c | 131 | move(find_object("/room/rubbish"));
monster.c | 143 | set_nationality(nationality);
monster.c | 144 | set_nationality_region(region);
monster.c | 146 | debug_printf("Bad nationality, %O\n", nationality);
monster.c | 152 | add_language(nationality->query_language());
monster.c | 153 | set_language(nationality->query_language());
monster.c | 154 | set_default_language(nationality->query_language());
monster.c | 160 | dest_me();
monster.c | 168 | return (int)SOUL_OBJECT->soul_command(verb, bit);
monster.c | 169 | return (int)SOUL_OBJECT->soul_command(str, "");
monster.c | 199 | command(str);
monster.c | 207 | set_name(n);
monster.c | 208 | capitalize(query_name());
monster.c | 209 | add_plural(pluralize(query_name()));
monster.c | 210 | set_short( query_name() );
monster.c | 211 | set_long("You see nothing special.\n");
monster.c | 212 | set_living_name(n);
monster.c | 224 | query_long();
monster.c | 230 | calc_extra_look();
monster.c | 231 | query_living_contents(0);
monster.c | 248 | clone_object("/obj/monster");
monster.c | 249 | set_race("fish");
monster.c | 255 | set_race("fish");
monster.c | 257 | set_level(12);
monster.c | 317 | clone_object("/obj/monster");
monster.c | 318 | set_guild("fighter");
monster.c | 324 | set_race("fighter");
monster.c | 326 | set_level(12);
monster.c | 350 | init_equip() { command("equip");
monster.c | 367 | clone_object(NICE_HAIRY_APE);
monster.c | 368 | do_command("'I am a hairy ape!");
monster.c | 369 | do_command("emote apes around the room.");
monster.c | 376 | command( words );
monster.c | 379 | this_object(), environment() );
monster.c | 417 | call_out( (: _next_queued_command :), 2 );
monster.c | 429 | call_out( (: _next_queued_command :), 2 );
monster.c | 432 | do_command( next );
monster.c | 437 | call_out( (: _next_queued_command :), next );
monster.c | 453 | clone_object(NICE_HAIRY_APE);
monster.c | 454 | delay_command("'I am a hairy ape!",10);
monster.c | 455 | delay_command("emote apes around the room.",2);
monster.c | 456 | queue_command("emote get banana.",3);
monster.c | 457 | queue_command("emote get apple.");
monster.c | 469 | call_out( (: _next_queued_command :), interval );
monster.c | 475 | this_object(), environment() );
monster.c | 492 | clone_object(NICE_HAIRY_APE);
monster.c | 493 | queue_command("'I am a hairy ape!");
monster.c | 494 | queue_command("emote apes around the room.",5);
monster.c | 495 | queue_command("get banana",10);
monster.c | 496 | delay_command("emote get apple.",3);
monster.c | 510 | _next_queued_command();
monster.c | 517 | this_object(), environment() );
monster.c | 529 | call_out("do_command", tim, str);
monster.c | 534 | set_heart_beat( 1 );
monster.c | 539 | start_attack(this_player());
monster.c | 571 | this_object()->attack_ob( who );
monster.c | 577 | set_heart_beat( 1 );
monster.c | 578 | adjust_hp( number, attacker, weapon, attack );
monster.c | 583 | set_heart_beat( 1 );
monster.c | 584 | adjust_gp( number );
monster.c | 666 | do_command("lose all");
monster.c | 667 | become_flummoxed();
monster.c | 669 | do_route_move();
monster.c | 673 | this_object()->do_move_after( 1 );
monster.c | 676 | run_away();
monster.c | 732 | convert_message( in_str );
monster.c | 733 | explode(in_str, "$");
monster.c | 735 | sizeof( str );
monster.c | 745 | this_object();
monster.c | 749 | all_inventory(environment()) - ({ this_object() });
monster.c | 751 | query_visible(this_object()) :));
monster.c | 762 | this_object()->query_attacker_list();
monster.c | 770 | all_inventory(environment());
monster.c | 771 | filter_array( obs, (: !living( $1 ) :) );
monster.c | 780 | the_short();
monster.c | 784 | a_short();
monster.c | 788 | one_short();
monster.c | 792 | poss_short();
monster.c | 796 | query_name();
monster.c | 800 | query_cap_name();
monster.c | 804 | query_gender_string();
monster.c | 808 | query_possessive();
monster.c | 812 | query_objective();
monster.c | 816 | query_gender_title();
monster.c | 820 | query_pronoun();
monster.c | 862 | this_object()->bing("fred", "chicken");
monster.c | 877 | evaluate( str, this_object() );
monster.c | 887 | explode(str[ 1..], ":");
monster.c | 890 | call_other( this_object(), args[0] );
monster.c | 893 | call_other( this_object(), args[0], args[1] );
monster.c | 896 | call_other( this_object(), args[0], args[1], args[2] );
monster.c | 911 | init_command( expand_string( str, 0 ), 1 );
monster.c | 914 | init_command( expand_string( str[ 1 .. ], 0 ), 1 );
monster.c | 917 | tell_room( environment(), expand_string( str, 0 ) +"\n" );
monster.c | 937 | set_heart_beat(0);
monster.c | 941 | heart_beat();
monster.c | 942 | monster_heart_beat( race, guild, race_ob, guild_ob );
monster.c | 948 | set_heart_beat( 0 );
monster.c | 955 | remove_property( "done follow" );
monster.c | 956 | this_object()->do_spell_effects( 0 );
monster.c | 962 | expand_mon_string( doing_story[ 1 ][ 0 ] );
monster.c | 965 | expand_mon_string( doing_story[ 1 ][ 1 ] );
monster.c | 975 | random( achat_string[ 0 ] + 1 );
monster.c | 976 | while ( ( i -= achat_string[ 1 ][ j ] ) >
monster.c | 981 | expand_mon_string( achat_string[ 1 ][ j + 1 ][ 1 ] );
monster.c | 988 | expand_mon_string( achat_string[ 1 ][ j + 1 ][ 0 ] );
monster.c | 992 | expand_mon_string( achat_string[ 1 ][ j + 1 ] );
monster.c | 997 | expand_mon_string( doing_story[ 0 ][ 0 ] );
monster.c | 1000 | expand_mon_string( doing_story[ 0 ][ 1 ] );
monster.c | 1010 | random( chat_string[ 0 ] + 1 );
monster.c | 1011 | while ( ( i -= chat_string[ 1 ][ j ] ) >
monster.c | 1016 | expand_mon_string( chat_string[ 1 ][ j + 1 ][ 1 ] );
monster.c | 1023 | expand_mon_string( chat_string[ 1 ][ j + 1 ][ 0 ] );
monster.c | 1027 | expand_mon_string( chat_string[ 1 ][ j + 1 ] );
monster.c | 1040 | file_name(this_object()));
monster.c | 1042 | move( "/room/rubbish" );
monster.c | 1070 | set_str(rand_num(no, type));
monster.c | 1071 | set_dex(rand_num(no, type));
monster.c | 1072 | set_int(rand_num(no, type));
monster.c | 1073 | set_con(rand_num(no, type));
monster.c | 1074 | set_wis(rand_num(no, type));
monster.c | 1094 | this_object()->set_race(race);
monster.c | 1095 | this_object()->set_guild(guild);
monster.c | 1096 | this_object()->set_level(level);
monster.c | 1110 | set_level( int i ) { RACE_OB->set_level( i, race, guild );
monster.c | 1118 | clone_object(CLUCKY_CHICKEN);
monster.c | 1121 | give_money(10, 10, "royal");
monster.c | 1128 | adjust_money(base+random(rand), type);
monster.c | 1183 | sizeof(c_s);
monster.c | 1238 | sizeof(weight);
monster.c | 1239 | add_chat_string(weight[i], weight[i+1]);
monster.c | 1262 | sizeof(chat);
monster.c | 1263 | remove_chat_string(chat[i]);
monster.c | 1268 | delete(chat_string[1], i-1, 2);
monster.c | 1285 | sizeof(c_s);
monster.c | 1344 | sizeof(weight);
monster.c | 1345 | add_achat_string(weight[i], weight[i+1]);
monster.c | 1367 | sizeof(chat);
monster.c | 1368 | remove_achat_string(chat[i]);
monster.c | 1372 | delete(achat_string[1], i-1, 1);
monster.c | 1394 | sizeof(zone);
monster.c | 1395 | add_move_zone(zone[i]);
monster.c | 1406 | sizeof(zones);
monster.c | 1407 | add_move_zone(zones[i]);
monster.c | 1421 | sizeof(zone);
monster.c | 1422 | remove_move_zone(zone[i]);
monster.c | 1426 | delete(move_zones, i, 1);
monster.c | 1459 | do_move_after(0);
monster.c | 1475 | copy( _move_after );
monster.c | 1513 | reset_enter_commands() { enter_commands = ({ });
monster.c | 1519 | environment();
monster.c | 1520 | move( dest, messin, messout );
monster.c | 1522 | me_moveing( before );
monster.c | 1524 | file_name( environment() );
monster.c | 1533 | room_look();
monster.c | 1534 | sizeof( enter_commands );
monster.c | 1536 | call_out( enter_commands[ i ], 2 * i + 1, this_object() );
monster.c | 1540 | call_out( enter_commands[ i ][ 1 .. 99 ], 2 * i + 1 );
monster.c | 1542 | init_command( enter_commands[ i ], 2 * i + 1 );
monster.c | 1556 | do_route_move();
monster.c | 1558 | move_after( running_away );
monster.c | 1576 | sizeof(_combat_actions);
monster.c | 1580 | this_object()->do_command(action);
monster.c | 1582 | evaluate(action, me, him);
monster.c | 1584 | call_other(this_object(), action[0], me, him);
monster.c | 1586 | call_other(action[0], action[1], this_object(), me, him);
monster.c | 1594 | this_object()->attack_ob(me->query_owner());
monster.c | 1609 | expand_mon_string(join_fight_mess);
monster.c | 1610 | this_object()->attack_ob(him);
monster.c | 1654 | event_exit( me, mess, to );
monster.c | 1655 | event_exit( me, mess, to );
monster.c | 1665 | this_object()->query_attacker_list();
monster.c | 1686 | environment()->query_dest_dir( this_object() );
monster.c | 1692 | file_name( to );
monster.c | 1700 | query_zones();
monster.c | 1713 | remove_call_out("do_follow_move");
monster.c | 1714 | call_out("do_follow_move", 4 + random(follow_speed), bing[i-1]);
monster.c | 1727 | this_object()->adjust_action_defecit((ACTIONS_PER_HB / (COMBAT_SPEED + 1)));
monster.c | 1728 | do_command(dir);
monster.c | 1750 | member_array( name, _combat_actions );
monster.c | 1769 | member_array( name, _combat_actions );
monster.c | 1772 | delete( _combat_actions, i - 1, 3 );
monster.c | 1794 | query_combat_actions() { return copy( _combat_actions );
monster.c | 1809 | environment( target );
monster.c | 1814 | do_command( action );
monster.c | 1818 | evaluate(action, player, target);
monster.c | 1821 | call_other( this_object(), action[ 0 ], player, target );
monster.c | 1825 | call_other( action[ 0 ], action[ 1 ], this_object(), player, target );
monster.c | 1844 | environment( player );
monster.c | 1850 | userp( $1 ) :) );
monster.c | 1852 | query_combat_actions();
monster.c | 1853 | sizeof(actions);
monster.c | 1855 | call_out( "do_combat_action", 1, player, target, actions[ i + 2 ] );
monster.c | 1904 | map_delete(bits, name);
monster.c | 1932 | do_command( action );
monster.c | 1936 | evaluate(action, caster, targets);
monster.c | 1939 | call_other( this_object(), action[ 0 ], caster, targets, args );
monster.c | 2051 | return (int)guild_ob->query_level(this_object());
monster.c | 2065 | calculate_rating( this_object() );
monster.c | 2066 | this_object()->query_max_hp();
monster.c | 2076 | sizeof(move_zones);
monster.c | 2122 | do_move_after(0);
monster.c | 2124 | event_enter( dest, mess, from );
monster.c | 2125 | event_enter( dest, mess, from );
monster.c | 2131 | event_person_say(thing, start, mess, lang);
monster.c | 2137 | event_whisper( thing, mess, obs, lang, me);
monster.c | 2143 | event_soul( thing, mess, avoid, verb, last, at );
monster.c | 2144 | event_soul( thing, mess, avoid );
monster.c | 2155 | move_object( true_location );
monster.c | 2179 | load_object(true_location);
monster.c | 2181 | move(ob);
monster.c | 2185 | file_name( environment() );
monster.c | 2209 | file_name(environment());
monster.c | 2212 | move("/room/rubbish");
monster.c | 2221 | file_name( environment() );
monster.c | 2222 | force_load();
monster.c | 2223 | move_object( "/room/virtual" );
monster.c | 2239 | command(move);
monster.c | 2240 | file_name(environment());
monster.c | 2245 | delete_move_after(this_object());
monster.c | 2278 | query_last_route_direction() { return ( sizeof(following_route) ? 1 : 0 );
monster.c | 2301 | do_command(get_next_route_direction());
monster.c | 2315 | move_me_please(delay, dest);
monster.c | 2316 | do_route_move();
monster.c | 2318 | this_object()->stopped_route();
monster.c | 2336 | move_me_to(HOME_LOCATION, 2);
monster.c | 2341 | do_command("emote jumps for joy.");
monster.c | 2343 | do_command("emote looks sad and lost.");
monster.c | 2368 | move( dest, "$N wanders in.\n", "$N wanders off.\n" );
monster.c | 2375 | random(sizeof(start_dir)/2)*2]));
monster.c | 2377 | call_out( "stopped_route", 1 );
monster.c | 2382 | got_the_route($1, $(delay), $(dest)) :));
monster.c | 2387 | do_command( "'Please bug me!  I'm using identify()!" );
monster.c | 2388 | file_name( thing );
monster.c | 2408 | add_language(str);
monster.c | 2450 | set_position(new_pos);
monster.c | 2492 | int_query_static_auto_load();
monster.c | 2493 | return ([ ]);
monster.c | 2527 | init_static_arg(args["::"]);
monster.c | 2538 | init_static_arg(args["::"]);
monster.c | 2585 | set_level(args["level"]);
monster.c | 2604 | this_player();
monster.c | 2607 | _notify_fail(0);
monster.c | 2608 | set_this_player(this_object());
monster.c | 2614 | set_this_player(ob);
monster.c | 2617 | set_this_player(ob);
monster.c | 2623 | function_owner(cmd_func);
monster.c | 2625 | evaluate(cmd_func, str);
monster.c | 2644 | error("command_override needs a function!");
monster.c | 2651 | eval_cost();
monster.c | 2678 | start_attack(hider);
gatherable.c | 32 | create();
gatherable.c | 33 | reset_get();
gatherable.c | 48 | notify_fail( get_failure_mess );
gatherable.c | 54 | parse_command_id_list();
gatherable.c | 58 | printf("parse_id args = %O\n", args);
gatherable.c | 59 | query_parse_id( args );
virtual_room.c | 41 | bind( clone_info, this_object() );
virtual_room.c | 58 | clone_object( func );
virtual_room.c | 60 | evaluate( func );
virtual_room.c | 69 | make_clone( reset_definitions[ i ][ CLONE ] );
virtual_room.c | 78 | find_object( reset_definitions[ i ][ CLONE ] );
virtual_room.c | 88 | allocate( sizeof( reset_definitions ) );
virtual_room.c | 89 | for ( i = sizeof( reset_definitions );
virtual_room.c | 95 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
virtual_room.c | 97 | make_object( i );
virtual_room.c | 105 | call_out( "make_object", reset_definitions[ i ][ DELAY ], i );
virtual_room.c | 107 | make_object( i );
ring.c | 28 | create();
ring.c | 29 | set_type( "ring" );
ring.c | 30 | set_damage_chance( 8 );
ring.c | 31 | set_artifact_type( "ring" );
ring.c | 32 | add_property( "shop type", "jewellers" );
ring.c | 33 | add_alias( "jewellery" );
ring.c | 34 | add_plural("jewellery");
ring.c | 38 | set_weight( number );
ring.c | 39 | setup_armour( 250 * number );
ring.c | 40 | add_ac( "blunt", "blunt", 5 * weight );
ring.c | 41 | add_ac( "sharp", "sharp", 2 * weight );
ring.c | 45 | long( word, dark ) + armour::long( word, dark );
ring.c | 49 | this_player()->add_command( "twist", this_object() );
ring.c | 87 | zap( 0, this_player(), this_object() );
ring.c | 92 | stats() + artifact::stats();
ring.c | 104 | return ([ ]);
ring.c | 113 | init_dynamic_arg( map[ "::" ] );
ring.c | 115 | init_dynamic_arg( map[ "artifact" ] );
ring.c | 120 | init_static_arg( map[ "::" ] );
ring.c | 122 | init_static_arg( map[ "artifact" ] );
salve.c | 28 | create();
salve.c | 32 | this_object()->setup();
salve.c | 36 | this_player()->add_command( "apply", this_object(), "<direct:object> to <indirect:object>");
salve.c | 52 | m_delete( apply_effects, word );
salve.c | 59 | query_amount();
salve.c | 60 | query_amount();
salve.c | 63 | query_apply_effects();
salve.c | 68 | m_indices( apply_effects );
salve.c | 69 | sizeof( words );
salve.c | 75 | m_indices( new_effects );
salve.c | 76 | sizeof( words );
salve.c | 86 | write("You aren't holding the " + dir_s + ".\n");
salve.c | 91 | write("You can only " + query_verb() + " to one thing at a time.\n");
salve.c | 95 | m_indices( apply_effects );
salve.c | 96 | sizeof(words);
salve.c | 97 | add_effect(words[i], apply_effects[words[i]] * query_amount());
salve.c | 100 | this_player()->add_succeeded(indir[0]);
salve.c | 101 | move("/room/rubbish");
salve.c | 109 | int_query_static_auto_load();
salve.c | 121 | init_dynamic_arg( map[ "::" ] );
salve.c | 129 | stats();
salve.c | 130 | m_indices( apply_effects );
salve.c | 131 | sizeof( words );
roommak.c | 24 | set_name("maker");
roommak.c | 25 | add_adjective("room");
roommak.c | 26 | set_short("Room maker");
roommak.c | 34 | add_action("do_new", "new");
roommak.c | 35 | add_action("do_set", "set");
roommak.c | 36 | add_action("do_add", "add");
roommak.c | 37 | add_action("do_setup", "setup");
roommak.c | 38 | add_action("do_modify", "modify");
roommak.c | 39 | add_action("do_map", "map");
roommak.c | 54 | notify_fail("Syntax: new <name>\n");
implement.c | 27 | create();
implement.c | 28 | create();
implement.c | 29 | add_alias("implement");
implement.c | 30 | add_alias("utensil");
implement.c | 31 | add_plural("implements");
implement.c | 33 | add_property("shop type", "general");
implement.c | 47 | query_my_limb();
implement.c | 48 | query_holder();
implement.c | 49 | move(dest);
implement.c | 53 | move( dest, messin, messout );
implement.c | 55 | set_hold(this_object(), limb);
implement.c | 61 | dest_me();
implement.c | 62 | dest_me();
implement.c | 69 | this_object()->hold_item( environment(), pos );
implement.c | 74 | int_query_static_auto_load();
implement.c | 81 | int_query_static_auto_load();
implement.c | 100 | init_static_arg( map[ "::" ] );
implement.c | 102 | init_static_arg(map);
implement.c | 110 | init_dynamic_arg( map[ "::" ] );
implement.c | 112 | init_dynamic_arg(map["hold"], 1);
implement.c | 116 | other_file( virt_name );
implement.c | 118 | add_property( VIRTUAL_NAME_PROP, new_name );
implement.c | 122 | call_out( "replace_me", 1 );
implement.c | 124 | add_missing( virt_name );
implement.c | 130 | new_data( virt_name );
implement.c | 132 | init_static_arg( stat_temp );
implement.c | 133 | add_property( "virtual time", time() );
shield.c | 20 | create();
shield.c | 21 | add_alias( ({ "armour", "shield" }) );
shield.c | 22 | add_plural( ({ "armours", "shields" }) );
shield.c | 23 | add_help_file("armour");
shield.c | 25 | add_property( "shop type", "armoury" );
shield.c | 28 | this_object()->setup();
shield.c | 57 | move( dest, messin, messout );
shield.c | 59 | set_worn_by( 0 );
shield.c | 67 | set_worn_by( 0 );
shield.c | 68 | dest_me();
shield.c | 75 | stats() + ({ ({ "no_limbs", no_limbs }) });
shield.c | 93 | return ([ ]);
shield.c | 95 | int_query_static_auto_load();
shield.c | 116 | init_static_arg( map[ "::" ] );
shield.c | 125 | clone_object( "/std/object" );
shield.c | 126 | set_name( "receipt" );
shield.c | 127 | set_short( "destructed item receipt" );
shield.c | 128 | add_adjective( ({ "destructed", "item" }) );
shield.c | 129 | set_long( "This seems to be a small piece of paper.\n" );
shield.c | 132 | move( environment() );
shield.c | 133 | set_weight( 1 );
shield.c | 134 | destruct( this_object() );
shield.c | 142 | init_dynamic_arg( map[ "::" ] );
weapon.c | 44 | set_damage_chance( 25 );
weapon.c | 46 | create();
weapon.c | 47 | create();
weapon.c | 48 | create();
weapon.c | 49 | create();
weapon.c | 50 | add_alias("weapon");
weapon.c | 51 | add_plural("weapons");
weapon.c | 53 | add_property("shop type", "armoury");
weapon.c | 55 | add_help_file("weapon");
weapon.c | 88 | long(s, dark)+cond_string();
weapon.c | 97 | set_cond( new_condition );
weapon.c | 98 | set_max_cond( new_condition );
weapon.c | 99 | set_lowest_cond( new_condition );
weapon.c | 110 | this_object()->query_weight();
weapon.c | 113 | query_weight();
weapon.c | 114 | query_str();
weapon.c | 136 | call_other(wield_func[1], wield_func[0], 0);
weapon.c | 138 | call_other(wield_func[1], wield_func[0], holder);
weapon.c | 155 | query_my_limb();
weapon.c | 156 | query_holder();
weapon.c | 157 | move(dest);
weapon.c | 161 | move( dest, messin, messout );
weapon.c | 163 | set_hold(this_object(), limb);
weapon.c | 169 | dest_me();
weapon.c | 170 | dest_me();
weapon.c | 177 | query_max_enchant() + query_enchant());
weapon.c | 182 | query_cond() ) / query_max_cond();
weapon.c | 192 | do_damage( type, amount );
weapon.c | 207 | delete(un_modifyable, i, 1);
weapon.c | 216 | query_full_value() { return ::query_value();
weapon.c | 219 | return (mixed *)MONEY_HAND->create_money_array(query_value());
weapon.c | 226 | create_money_array(query_value());
weapon.c | 236 | stats();
weapon.c | 241 | tell_object( query_holder(), "%^RED%^$C$"+ the_short() +" breaks!%^RESET%^\n" );
weapon.c | 243 | query_holder() );
weapon.c | 244 | query_holder()->set_unhold( this_object() );
weapon.c | 246 | break_me();
weapon.c | 253 | this_object()->hold_item( environment(), pos );
weapon.c | 258 | int_query_static_auto_load();
weapon.c | 265 | int_query_static_auto_load();
weapon.c | 289 | init_static_arg( map[ "::" ] );
weapon.c | 301 | init_static_arg( map[ "condition" ] );
weapon.c | 307 | init_static_arg(map);
weapon.c | 309 | init_static_arg(map["hold"]);
weapon.c | 316 | clone_object( "/std/object" );
weapon.c | 317 | set_name( "receipt" );
weapon.c | 318 | set_short( "destructed item receipt" );
weapon.c | 319 | add_adjective( ({ "destructed", "item" }) );
weapon.c | 320 | set_long( "This seems to be a small piece of paper.\n" );
weapon.c | 323 | move( environment() );
weapon.c | 324 | set_weight( 1 );
weapon.c | 325 | destruct( this_object() );
weapon.c | 333 | init_dynamic_arg( map[ "::" ] );
weapon.c | 335 | init_dynamic_arg( map[ "condition" ] );
weapon.c | 338 | init_dynamic_arg(map["hold"], 1);
weapon.c | 342 | other_file( virt_name );
weapon.c | 344 | add_property( VIRTUAL_NAME_PROP, new_name );
weapon.c | 348 | call_out( "replace_me", 1 );
weapon.c | 350 | add_missing( virt_name );
weapon.c | 356 | new_data( virt_name );
weapon.c | 358 | init_static_arg( stat_temp );
weapon.c | 359 | add_property( "virtual time", time() );
surf_save.c | 20 | all_inventory( this_object() ) -> dest_me();
surf_save.c | 21 | if ( file_size( save_file + ".o" ) >
surf_save.c | 22 | unguarded((: restore_object, save_file :));
surf_save.c | 23 | if ( sizeof( details ) ) init_dynamic_arg( details );
surf_save.c | 31 | create();
surf_save.c | 36 | call_out( "do_save", 0 );
surf_save.c | 42 | call_out( "do_save", 0 );
surf_save.c | 49 | query_dynamic_auto_load();
surf_save.c | 50 | unguarded((: save_object, save_file :));
surf_save.c | 56 | seteuid( geteuid( previous_object() ) );
surf_save.c | 61 | do_load();
clock.c | 41 | create();
clock.c | 45 | this_object()->setup();
clock.c | 47 | add_extra_look(this_object());
clock.c | 55 | query_am_minute(time()) % 60);
clock.c | 56 | query_am_hour(time());
clock.c | 91 | query_am_time_array(time());
clock.c | 95 | query_month(arr[AM_TIME_MONTH]);
clock.c | 115 | register_for_chimes(this_object(), num, mess);
clock.c | 126 | say(chime_message);
meltable.c | 92 | create();
meltable.c | 93 | set_melt_result( string result );
meltable.c | 94 | query_melt_result();
meltable.c | 95 | set_melt_rate( int rate );
meltable.c | 96 | query_melt_rate();
meltable.c | 97 | query_melt_level();
meltable.c | 98 | setup_callout();
meltable.c | 99 | do_melt();
meltable.c | 106 | create();
meltable.c | 110 | set_melt_result( WATER );
meltable.c | 111 | set_decay_speed( 1 );
meltable.c | 112 | setup_callout();
meltable.c | 114 | this_object()->setup();
meltable.c | 192 | remove_call_out( _callout_id );
meltable.c | 195 | call_out( "do_melt", _melt_rate );
meltable.c | 210 | environment( this_object() );
meltable.c | 224 | query_temperature( room );
meltable.c | 230 | query_property( "warmth" );
meltable.c | 251 | clone_object( _melt_result );
meltable.c | 252 | set_amount( 20 );
meltable.c | 253 | move( environment( this_object() ) );
meltable.c | 255 | this_object()->query_weight();
meltable.c | 257 | this_object()->move( "/room/rubbish" );
meltable.c | 260 | this_object()->set_weight( current_weight - 1 );
meltable.c | 266 | call_out( "do_melt", _melt_rate );
meltable.c | 328 | if( query_collective() && query_amount() >
meltable.c | 334 | if( query_collective() && query_amount() >
meltable.c | 340 | if( query_collective() && query_amount() >
meltable.c | 346 | if( query_collective() && query_amount() >
meltable.c | 352 | if( query_collective() && query_amount() >
meltable.c | 358 | if( query_collective() && query_amount() >
meltable.c | 377 | this_player()->add_property( "warmth", CHILL, CHILL_TIME );
meltable.c | 378 | return( ::do_eat( no_mess ) );
meltable.c | 392 | add_property( "warmth", CHILL, CHILL_TIME );
meltable.c | 404 | add_property( "warmth", CHILL, CHILL_TIME );
meltable.c | 453 | int_query_static_auto_load();
meltable.c | 467 | init_static_arg( map[ "::" ] );
meltable.c | 502 | init_dynamic_arg( map[ "::" ] );
meltable.c | 580 | return( ::set_decay_speed( 1 ) );
mineral.c | 42 | create();
mineral.c | 43 | set_decay_speed(0);
mineral.c | 44 | remove_help_file("food");
mineral.c | 45 | add_help_file("mineral");
mineral.c | 52 | set_value_info( "material", 1 );
mineral.c | 53 | query_material_adjective( mineral );
mineral.c | 54 | set_weight( number );
mineral.c | 73 | allocate( 10 );
mineral.c | 77 | set_name( noun );
mineral.c | 78 | add_plural( noun +"s" );
mineral.c | 80 | set_name( args[ 0 ] );
mineral.c | 82 | add_plural( pluralize( args[ 0 ] ) );
mineral.c | 84 | add_plural( args[ 3 ] );
mineral.c | 87 | set_short(material_adjective +" "+ noun);
mineral.c | 88 | set_main_plural(material_adjective +" "+ pluralize( noun ));
mineral.c | 90 | set_short( args[ 1 ] );
mineral.c | 92 | set_main_plural( pluralize( args[ 1 ] ) );
mineral.c | 94 | set_main_plural( args[ 4 ] );
mineral.c | 97 | set_long( "This is "+ add_a( adjective ) +" lump of $mineral$.\n" );
mineral.c | 99 | set_long( args[ 2 ] );
mineral.c | 100 | add_adjective( ({ adjective }) + explode( material_adjective, " " ) );
mineral.c | 105 | identify_material( mineral, this_player(), 1 ) );
mineral.c | 110 | this_player(), 0 ), " " ) + ::parse_command_adjectiv_id_list();
mineral.c | 118 | init();
mineral.c | 137 | do_eat();
mineral.c | 143 | if ( sizeof( tools ) >
mineral.c | 144 | write( "You only need to use one tool at a time.\n" );
mineral.c | 148 | write( "You need to use a tool of some sort.\n" );
mineral.c | 153 | write( "You need to use a tool that you are holding.\n" );
mineral.c | 160 | write( "You need to use a tool appropriate to the job.\n" );
mineral.c | 171 | this_player(), 0 ) +" has already been pulverised.\n" );
mineral.c | 174 | if ( query_weight() >
mineral.c | 176 | this_player(), 0 ) +" is too large to pulverise.\n" );
mineral.c | 179 | query_material_adjective( mineral );
mineral.c | 181 | set_name("powder");
mineral.c | 182 | set_short(material_adjective +" powder");
mineral.c | 183 | set_main_plural(material_adjective +" powder" );
mineral.c | 184 | add_plural( "powder" );
mineral.c | 185 | add_property( "determinate", "some " );
mineral.c | 190 | set_weight_unit( ({ 1, 50 }) );
mineral.c | 191 | set_medium_alias( "Powdered" + capitalize(mineral) );
mineral.c | 194 | set_pile_types( ({ 50, "small", 100, "medium", "large" }) );
mineral.c | 195 | set_continuous();
mineral.c | 196 | set_amount( roll_MdN( 5, 10 ) * query_weight() );
mineral.c | 197 | remove_property("encoded destination");
mineral.c | 198 | move( environment() );
mineral.c | 199 | this_player()->add_succeeded( tools[ 0 ] );
mineral.c | 212 | this_player(), 0 ) +" is already a chip.\n" );
mineral.c | 215 | set_weight( query_weight() - 1 );
mineral.c | 216 | clone_object( MINERAL );
mineral.c | 217 | make_mineral( mineral, 1 );
mineral.c | 218 | move( environment() );
mineral.c | 219 | this_player()->add_succeeded( tools[ 0 ] );
mineral.c | 233 | this_player(), 0 ) +" is too small to smash.\n" );
mineral.c | 236 | this_player()->query_max_weight();
mineral.c | 238 | query_weight();
mineral.c | 240 | clone_object( MINERAL );
mineral.c | 241 | make_mineral( mineral, query_weight() - largest );
mineral.c | 242 | move( environment() );
mineral.c | 244 | hit_weapon( largest, "blunt" );
mineral.c | 245 | random( 4 );
mineral.c | 251 | clone_object( MINERAL );
mineral.c | 252 | make_mineral( mineral, size );
mineral.c | 253 | move( environment() );
mineral.c | 257 | this_player()->add_succeeded( tools[0] );
mineral.c | 258 | move( "/room/rubbish" );
mineral.c | 268 | environment(this_player()) });
mineral.c | 279 | call_out("move",0,"/room/rubbish");
mineral.c | 298 | init_static_arg( map[ "::" ] );
mineral.c | 301 | set_decay_speed(0);
mineral.c | 307 | int_query_static_auto_load();
mineral.c | 308 | return ([ ]);
mineral.c | 316 | set_decay_level( 0 );
holdable.c | 20 | create();
holdable.c | 21 | create();
holdable.c | 26 | dest_me();
holdable.c | 27 | dest_me();
holdable.c | 40 | init_dynamic_arg(arg["hold"], arg["is lit"]);
holdable.c | 42 | init_dynamic_arg(arg["::"]);
holdable.c | 51 | init_static_arg( map[ "::" ] );
holdable.c | 53 | init_static_arg(map["hold"]);
holdable.c | 60 | int_query_static_auto_load();
holdable.c | 69 | int_query_static_auto_load();
holdable.c | 78 | move(ob);
holdable.c | 82 | move( ob, mess1, mess2 );
baggage.c | 51 | create();
baggage.c | 52 | create();
baggage.c | 53 | create();
baggage.c | 54 | create();
baggage.c | 55 | set_max_weight( 5 );
baggage.c | 56 | set_max_cond(400);
baggage.c | 57 | set_cond(400);
baggage.c | 58 | set_damage_chance(20);
baggage.c | 59 | set_can_export_inventory();
baggage.c | 60 | set_opaque();
baggage.c | 61 | set_open();
baggage.c | 64 | this_object()->setup();
baggage.c | 66 | add_help_file("baggage");
baggage.c | 71 | init();
baggage.c | 78 | remove_call_out( "check_breakages" );
baggage.c | 79 | call_out( "check_breakages", 5 + random( 16 ) );
baggage.c | 98 | environment(this_object());
baggage.c | 100 | environment(carrier);
baggage.c | 103 | all_inventory();
baggage.c | 104 | query_loc_weight() - (int)query_property("padded");
baggage.c | 105 | sizeof(obs);
baggage.c | 115 | sizeof(obs)>
baggage.c | 116 | query_multiple_short(({ this_object() }))+".\n", ({ carrier }));
baggage.c | 118 | query_multiple_short(({ this_object() }))+".\n");
baggage.c | 119 | dest_me();
baggage.c | 127 | long( word, dark );
baggage.c | 128 | cond_string();
baggage.c | 141 | long_status();
baggage.c | 152 | write( "The "+ short( 0 ) +" is locked.\n" );
baggage.c | 157 | write( "You open the "+ short( 0 ) +".\n" );
baggage.c | 160 | write( "You can't open the "+ short( 1 ) +".\n" );
baggage.c | 169 | stats() + close_lock_container::stats();
baggage.c | 205 | init_dynamic_arg(map["::"]);
baggage.c | 209 | init_dynamic_arg(map["condition"]);
baggage.c | 212 | init_dynamic_arg(map["hold"]);
baggage.c | 216 | clone_object("/obj/money");
baggage.c | 217 | set_money_array(map["money"]);
baggage.c | 218 | move(this_object());
baggage.c | 222 | set_closed();
baggage.c | 224 | set_open();
baggage.c | 227 | set_locked();
baggage.c | 229 | set_unlocked();
baggage.c | 231 | set_stuck(map["stuck"]);
baggage.c | 237 | init_static_arg(args["::"]);
baggage.c | 240 | init_static_arg(args["condition"]);
baggage.c | 243 | init_static_arg(args["hold"]);
baggage.c | 247 | set_transparent();
baggage.c | 249 | set_opaque();
baggage.c | 253 | set_difficulty(args["difficulty"]);
baggage.c | 256 | set_key(args["key"]);
baggage.c | 259 | set_open_trap(args["trap open ob"], args["trap open func"]);
baggage.c | 262 | set_lock_trap(args["trap lock ob"], args["trap lock func"]);
baggage.c | 269 | set_max_weight(5);
baggage.c | 280 | int_query_static_auto_load();
baggage.c | 282 | return ([ ]);
baggage.c | 290 | can_find_match_recurse_into(looker);
baggage.c | 301 | test_add(ob, flag);
baggage.c | 312 | move(dest);
baggage.c | 316 | environment();
baggage.c | 317 | move(dest, mess1, mess2);
baggage.c | 319 | we_moved(from, environment());
baggage.c | 329 | parse_command_adjectiv_id_list();
baggage.c | 334 | all_inventory()->move( environment(), "$N fall$s out of " + a_short() +"." );
baggage.c | 335 | break_me();
baggage.c | 340 | dest_me();
baggage.c | 341 | dest_me();
hotfood.c | 78 | create();
hotfood.c | 79 | set_cool_rate( int rate );
hotfood.c | 80 | set_cool_level(int level);
hotfood.c | 81 | query_cool_rate();
hotfood.c | 82 | query_cool_level();
hotfood.c | 83 | do_cool();
hotfood.c | 84 | set_hot_eat_mess(mixed messages);
hotfood.c | 85 | set_cold_eat_mess(mixed messages);
hotfood.c | 86 | query_hot_eat_mess();
hotfood.c | 87 | query_cold_eat_mess();
hotfood.c | 88 | setup_cold_eat_piece_messages(mixed piece, mixed amt, mixed last);
hotfood.c | 89 | setup_hot_eat_piece_messages(mixed piece, mixed amt, mixed last);
hotfood.c | 101 | create();
hotfood.c | 104 | set_decay_speed( 1 );
hotfood.c | 105 | if ( !do_setup ) this_object()->setup();
hotfood.c | 107 | time();
hotfood.c | 158 | return ("cold " + ::query_short_rotten_adjective());
hotfood.c | 201 | if(query_collective() && query_amount() >
hotfood.c | 203 | return ("It is stone cold. " + ::query_long_decay_level());
hotfood.c | 261 | if(this_object()->query_cool_level() >
hotfood.c | 265 | this_object()->query_cold_eat_last_message());
hotfood.c | 268 | set_eat_mess( this_object()->query_cold_eat_message() );
hotfood.c | 270 | return( ::do_eat( no_mess ));
hotfood.c | 273 | this_player() -> query_property("warmth");
hotfood.c | 274 | this_player() -> query_property_time_left("warmth");
hotfood.c | 277 | this_player()->add_property( "warmth",new_warmth,new_time);
hotfood.c | 280 | this_player()->add_property("warmth",WARM,WARM_TIME);
hotfood.c | 285 | this_object()->query_hot_eat_last_message());
hotfood.c | 288 | set_eat_mess( this_object()->query_hot_eat_message() );
hotfood.c | 290 | return( ::do_eat( no_mess ) );
hotfood.c | 408 | int_query_static_auto_load();
hotfood.c | 416 | if ( map[ "::" ] ) ::init_static_arg( map[ "::" ] );
hotfood.c | 437 | if ( map[ "::" ] ) ::init_dynamic_arg( map[ "::" ] );
hotfood.c | 455 | if (this_object()->query_cool_level()>
hotfood.c | 456 | do_decay();
hotfood.c | 464 | if (this_object()->query_cool_level()>
hotfood.c | 472 | if (this_object()->query_cool_level()>
hotfood.c | 473 | return (::query_decay_speed());
hotfood.c | 480 | if (this_object()->query_cool_level()>
hotfood.c | 481 | return (::query_decay_level());
hotfood.c | 488 | if (this_object()->query_cool_level()>1) return( ::set_decay_speed( 0 ) );
hotfood.c | 489 | return( ::set_decay_speed( 7200 ) );
scabbard.c | 20 | create();
scabbard.c | 21 | create();
scabbard.c | 26 | add_alias( "scabbard" );
scabbard.c | 27 | add_plural( "scabbards" );
scabbard.c | 29 | add_property( "shop type", "armoury" );
scabbard.c | 31 | this_object()->setup();
scabbard.c | 75 | test_add( thing, flag );
scabbard.c | 88 | test_add( thing, flag );
scabbard.c | 92 | first_inventory( this_object() )->a_short() + ".\n" );
scabbard.c | 96 | test_type_ok( thing, flag );
scabbard.c | 101 | the_short() + ".  " + sheath );
scabbard.c | 110 | long( word, dark );
scabbard.c | 114 | long( word, dark );
scabbard.c | 119 | do_damage( type, amount );
scabbard.c | 127 | set_max_cond( number );
scabbard.c | 128 | set_cond( number );
scabbard.c | 129 | set_lowest_cond( number );
scabbard.c | 134 | modify_value( container::query_value() );
scabbard.c | 138 | query_full_value() { return container::query_value();
scabbard.c | 145 | drop(dest);
scabbard.c | 151 | move( dest, messin, messout );
scabbard.c | 153 | set_worn_by( 0 );
scabbard.c | 159 | set_worn_by( 0 );
scabbard.c | 160 | dest_me();
scabbard.c | 167 | a_short() +"." );
scabbard.c | 170 | a_short() +"." );
scabbard.c | 171 | break_me();
scabbard.c | 176 | stats() + wearable::stats();
scabbard.c | 182 | return ([ ]);
scabbard.c | 204 | init_static_arg( map[ "::" ] );
scabbard.c | 206 | init_static_arg( map[ "wear" ] );
scabbard.c | 208 | set_types( map[ "types" ] );
scabbard.c | 219 | init_dynamic_arg( map[ "::" ], ob );
scabbard.c | 221 | init_dynamic_arg( map[ "wear" ], ob );
scabbard.c | 225 | other_file( virt_name );
scabbard.c | 227 | add_property( VIRTUAL_NAME_PROP, new_name );
scabbard.c | 231 | call_out( "replace_me", 1 );
scabbard.c | 233 | add_missing( virt_name );
scabbard.c | 239 | new_data( virt_name );
scabbard.c | 241 | init_static_arg( stat_temp );
scabbard.c | 242 | add_property( "virtual time", time() );
lantern.c | 20 | create();
lantern.c | 28 | short( 0 );
lantern.c | 33 | this_player()->add_failed_mess(this_object(), "$D is not lit.\n", ({ }));
lantern.c | 36 | remove_burner( this_object() );
lantern.c | 38 | set_light( 0 );
lantern.c | 43 | do_extinguish();
lantern.c | 57 | add_burner( this_object() );
lantern.c | 59 | set_light( BRIGHTNESS );
lantern.c | 64 | this_player()->add_command("light", this_object());
lantern.c | 65 | this_player()->add_command("extinguish", this_object());
lantern.c | 66 | this_player()->add_command("dowse", this_object());
lantern.c | 74 | environment( this_object() );
lantern.c | 75 | remove_burner( this_object() );
lantern.c | 76 | set_light( 0 );
lantern.c | 79 | write( poss_short() +" burns out.\n" );
lantern.c | 80 | tell_room( environment(env), poss_short() +" burns out.\n", env );
lantern.c | 82 | say( poss_short() +" burns out.\n" );
lantern.c | 89 | out_of_fuel();
lantern.c | 100 | pretty_plural(thing);
lantern.c | 104 | set_light( 0 );
lantern.c | 105 | remove_burner( this_object() );
lantern.c | 106 | dest_me();
lantern.c | 126 | add_burner( this_object() );
lantern.c | 128 | set_light(BRIGHTNESS);
lantern.c | 130 | init_dynamic_arg( arg["::"] );
shovel.c | 60 | this_player()->add_command("dig", this_object(), patterns);
shovel.c | 74 | this_player()->query_holding();
shovel.c | 106 | environment(this_player())->dig(indir, indir_s);
shovel.c | 112 | int_query_static_auto_load();
shovel.c | 113 | return ([ ]);
multiple_scabbard.c | 16 | create();
multiple_scabbard.c | 18 | set_no_types_in_long(1);
multiple_scabbard.c | 20 | this_object()->setup();
multiple_scabbard.c | 24 | cmd( ({ knives, targets }), 0, "at" );
multiple_scabbard.c | 31 | add_failed_mess( "You're dead!\n" );
multiple_scabbard.c | 41 | if( sizeof( targets ) >
multiple_scabbard.c | 42 | add_failed_mess( "You can only throw at one target at a time.\n" );
multiple_scabbard.c | 48 | add_failed_mess( "Don't be silly.\n" );
multiple_scabbard.c | 53 | add_failed_mess( target->the_short(1) + " is dead.\n" );
multiple_scabbard.c | 58 | add_failed_mess( "You really shouldn't do that.\n" );
multiple_scabbard.c | 62 | if( sizeof( knives ) >
multiple_scabbard.c | 63 | add_failed_mess( "You can only throw one weapon at a time.\n" );
multiple_scabbard.c | 70 | the_short() + ".\n" );
multiple_scabbard.c | 75 | move( this_object() );
multiple_scabbard.c | 76 | add_failed_mess( "You need a free hand.\n" );
multiple_scabbard.c | 81 | move( this_object() );
multiple_scabbard.c | 82 | add_failed_mess( "You cannot hold " + knife->the_short() + ".\n" );
multiple_scabbard.c | 86 | add_succeeded_mess( "$N snatch$es " + knife->a_short() + " from $D.\n" );
multiple_scabbard.c | 87 | call_out( "throw", 0, knives, targets );
multiple_scabbard.c | 99 | test_add( thing, flag );
multiple_scabbard.c | 100 | if( sizeof( all_inventory( this_object() ) ) >
multiple_scabbard.c | 102 | write( the_short() + " is already full.\n" );
multiple_scabbard.c | 106 | test_type_ok( thing, flag );
multiple_scabbard.c | 111 | the_short() + ".  " + sheath );
multiple_scabbard.c | 119 | do_hurl( $1[0], $1[1], 0 ) :) );
multiple_scabbard.c | 123 | do_hurl( $1[0], $1[1], 1 ) :) );
staff.c | 16 | create();
staff.c | 17 | set_artifact_type( "staff" );
staff.c | 18 | set_no_limbs( 2 );
staff.c | 22 | set_weight( number );
staff.c | 23 | new_weapon( 80 * number );
staff.c | 31 | long( word, dark ) + weapon::long( word, dark );
staff.c | 35 | this_player()->add_command( "invoke", this_object() );
staff.c | 75 | zap( environment( this_player() ), this_player(), this_object() );
staff.c | 80 | stats() + artifact::stats();
staff.c | 92 | return ([ ]);
staff.c | 101 | init_dynamic_arg( map[ "::" ] );
staff.c | 103 | init_dynamic_arg( map[ "artifact" ] );
staff.c | 110 | init_static_arg( map[ "::" ] );
staff.c | 112 | init_static_arg( map[ "artifact" ] );
wand.c | 38 | create();
wand.c | 39 | set_artifact_type( "wand" );
wand.c | 44 | set_weight( number );
wand.c | 45 | new_weapon( 80 * number );
wand.c | 46 | add_attack( "prod", 90, ({ 0, 5, weight }), "blunt", "blunt", 0 );
wand.c | 51 | long( word, dark ) + weapon::long( word, dark );
wand.c | 55 | this_player()->add_command( "zap", this_object(), "<direct:object> at <indirect:object>" );
wand.c | 56 | this_player()->add_command( "zap", this_object(), "<indirect:object> with <direct:object>" );
wand.c | 67 | if( ( sizeof( things ) >
wand.c | 68 | sizeof( filter( things, (: $1->query_amount() >
wand.c | 112 | zap( things[ 0 ], this_player(), this_object() );
wand.c | 113 | this_player()->add_succeeded( things[ 0 ] );
wand.c | 119 | stats() + artifact::stats();
wand.c | 133 | return ([ ]);
wand.c | 143 | init_dynamic_arg( map[ "::" ] );
wand.c | 145 | init_dynamic_arg( map[ "artifact" ] );
wand.c | 151 | init_static_arg( map[ "::" ] );
wand.c | 153 | init_static_arg( map[ "artifact" ] );
clothing_transport.c | 49 | create();
clothing_transport.c | 114 | return ([ ]);
clothing_transport.c | 116 | int_query_static_auto_load();
clothing_transport.c | 122 | init_static_arg(map["::"]);
vessel.c | 42 | drink_amount(int drinking, object player);
vessel.c | 43 | query_fighting(object player);
vessel.c | 112 | create();
vessel.c | 115 | this_object()->setup();
vessel.c | 117 | add_help_file("vessel");
vessel.c | 123 | init();
vessel.c | 124 | add_command("drink", drink_pat);
vessel.c | 125 | add_command("quaff", drink_pat);
vessel.c | 126 | add_command("splash", splash_pat);
vessel.c | 127 | add_command("rub", apply_pat);
vessel.c | 128 | add_command("apply", apply_pat);
vessel.c | 129 | add_command("pour", pour_pat);
vessel.c | 130 | add_command("taste", "<direct:object>");
vessel.c | 131 | add_command("sip", "<direct:object>");
vessel.c | 133 | add_command("fill", fill_pat);
vessel.c | 134 | add_command("empty", "<direct:object>");
vessel.c | 144 | if (!max_volume) return ({ "totally", "empty" });
vessel.c | 146 | return ({ "totally", "empty" });
vessel.c | 147 | return ({ "empty" });
vessel.c | 148 | return ({ "full" });
vessel.c | 149 | return ({ "totally", "full" });
vessel.c | 150 | return ({ });
vessel.c | 168 | return ((int)b->query_amount() - (int)a->query_amount());
vessel.c | 174 | return ((int)b->query_weight() - (int)a->query_weight());
vessel.c | 175 | cmp_amount_r(a, b);
vessel.c | 180 | filter(all_inventory(this_object()), (: $1->query_liquid() :));
vessel.c | 181 | sort_array(_liquids, "cmp_amount_r", this_object());
vessel.c | 194 | all_inventory(this_object());
vessel.c | 199 | figure_out_liquids();
vessel.c | 202 | sort_array(_liquids, "cmp_amount_r", this_object());
vessel.c | 204 | convert_message($1) :));
vessel.c | 206 | sizeof(others);
vessel.c | 210 | if (sizeof(shorts) >
vessel.c | 212 | if (sizeof(shorts) >
vessel.c | 215 | query_multiple_short(shorts[1..]);
vessel.c | 224 | sort_array(solids, "cmp_weight_r", this_object());
vessel.c | 230 | sizeof(others);
vessel.c | 235 | tell_creator( "gruper", "others is %O.\n", others );
vessel.c | 242 | if (sizeof(others) >
vessel.c | 245 | query_multiple_short(others);
vessel.c | 298 | query_liquid_desc();
vessel.c | 305 | query_contents(str, obs);
vessel.c | 313 | short(dark);
vessel.c | 315 | all_inventory(this_object());
vessel.c | 317 | short(dark);
vessel.c | 321 | query_short() :))));
vessel.c | 329 | long(str, dark);
vessel.c | 371 | query_loc_weight())/query_max_weight();
vessel.c | 400 | tell_creator("pinkfish", "vessel::add_weight(%O)\n", n);
vessel.c | 403 | return (::add_weight(n));
vessel.c | 411 | printf("Increasing volume by %d (add_weight)\n", v);
vessel.c | 434 | all_inventory(this_object());
vessel.c | 435 | sizeof(contents);
vessel.c | 438 | to_float(vol_lost) / orig_cv));
vessel.c | 443 | adjust_amount(amt_lost);
vessel.c | 475 | query_continuous() :));
vessel.c | 482 | to_float(vol_xferred) / orig_cv));
vessel.c | 489 | clone_object(file_path);
vessel.c | 490 | query_dynamic_auto_load();
vessel.c | 491 | init_dynamic_arg( map );
vessel.c | 492 | query_static_auto_load();
vessel.c | 494 | init_static_arg( map );
vessel.c | 496 | set_amount(amt_xferred);
vessel.c | 497 | move(dest);
vessel.c | 503 | adjust_amount(-amt_xferred);
vessel.c | 505 | dest_me();
vessel.c | 520 | set_heart_beat(0);
vessel.c | 533 | short(1)+".\n");
vessel.c | 538 | query_short() :) ) ) + leak_verb[off] + " out of the "+ short(1) + ".\n" );
vessel.c | 541 | query_short() :) ) ) + leak_verb[off] + " out of the "+ short(1) + ".\n" );
vessel.c | 543 | remove_volume(lost);
vessel.c | 545 | set_heart_beat(0);
vessel.c | 555 | add_failed_mess("You cannot attempt to do this while in combat.\n");
vessel.c | 560 | add_failed_mess("You aren't carrying $D.\n");
vessel.c | 566 | sscanf(args[0] + " " + args[1], "%d %d", m, n);
vessel.c | 568 | add_failed_mess("Interesting fraction you have there!\n");
vessel.c | 577 | add_failed_mess("$C$$D $V$0=is,are$V$ locked!\n");
vessel.c | 582 | write("You open the " + short(0) + ".\n");
vessel.c | 584 | add_failed_mess("You cannot open $D.\n");
vessel.c | 590 | add_failed_mess("$C$$D has nothing to pour!\n");
vessel.c | 594 | if (sizeof(to) >
vessel.c | 595 | add_failed_mess("You can only pour into one object at a time.\n");
vessel.c | 599 | query_volume();
vessel.c | 600 | query_max_volume();
vessel.c | 633 | short(0) + " but it $V$0=is,are$V$ not enough.\n");
vessel.c | 635 | this_player()->add_succeeded(to[0]);
vessel.c | 637 | this_player()->add_succeeded(to[0]);
vessel.c | 640 | xfer_volume( volume_needed, to[0] );
vessel.c | 645 | this_player()->add_succeeded_mess(this_object(), "$N $V $D into $I.\n", ({to[0]}));
vessel.c | 648 | add_failed_mess( "You were unable to $V $D into $I.\n", ({to[0]}));
vessel.c | 671 | add_failed_mess("You cannot attempt to do this while in combat.\n");
vessel.c | 678 | sscanf(args[1] + " " + args[2], "%d %d", m, n);
vessel.c | 680 | add_failed_mess("Interesting fraction you have there!\n");
vessel.c | 690 | add_failed_mess("$C$$D $V$0=is,are$V$ locked!\n");
vessel.c | 696 | write("You open the " + short(0) + ".\n");
vessel.c | 698 | add_failed_mess("You cannot open $D.\n");
vessel.c | 704 | add_failed_mess("$C$$D has nothing to pour!\n");
vessel.c | 713 | the_short() + ".\n");
vessel.c | 718 | add_failed_mess("$I $V$0=is,are$V$ closed.\n", to[i..i]);
vessel.c | 722 | query_volume();
vessel.c | 723 | query_max_volume();
vessel.c | 731 | add_failed_mess("$I $V$0=is,are$V$ full to the brim already.\n", to[i..i]);
vessel.c | 753 | the_short() + " but it $V$0=is,are$V$ not enough.\n");
vessel.c | 756 | this_player()->add_succeeded(to[i]);
vessel.c | 758 | this_player()->add_succeeded(to[i]);
vessel.c | 760 | xfer_volume(volume_needed, to[i]);
vessel.c | 838 | environment($1) == $2 :), environment(player));
vessel.c | 841 | query_free_limbs();
vessel.c | 858 | query_weapon_type();
vessel.c | 915 | do_damage("crush", 20 + random(50));
vessel.c | 975 | all_inventory( this_object() );
vessel.c | 1017 | filter( contents, (: $1->query_liquid() :) );
vessel.c | 1022 | if( sizeof( frog ) >
vessel.c | 1023 | pluralize( frog[0] ) });
vessel.c | 1029 | query_multiple_short( contents_descs );
vessel.c | 1106 | random(15));
vessel.c | 1115 | adjust_amount(-ob->query_amount());
vessel.c | 1117 | adjust_amount(-(ob->query_amount() * amt_to_drink / orig_cv));
vessel.c | 1121 | add_succeeded_mess("");
vessel.c | 1125 | do_damage("crush", 50 + random(300));
vessel.c | 1130 | all_inventory(this_object());
vessel.c | 1137 | add_succeeded_mess( contents[0]->query_eat_mess() );
vessel.c | 1163 | consume(this_player(), ob->query_amount());
vessel.c | 1167 | query_amount() * amt_to_drink / orig_cv);
vessel.c | 1191 | add_failed_mess("You aren't carrying $D.\n");
vessel.c | 1198 | add_failed_mess("$C$$D $V$0=is,are$V$ bone dry!\n");
vessel.c | 1203 | to_int(args[0]);
vessel.c | 1204 | to_int(args[1]);
vessel.c | 1205 | sscanf(args[0] + " " + args[1], "%d %d", m, n);
vessel.c | 1208 | add_failed_mess( "You can't drink with that much precision!\n" );
vessel.c | 1212 | add_failed_mess("Interesting fraction you have there!\n");
vessel.c | 1252 | write("You feel mildly full of liquid.\n");
vessel.c | 1255 | write("You feel very full of liquid.\n");
vessel.c | 1258 | write("You feel all the liquid sloshing around inside you.\n");
vessel.c | 1261 | write("You are awash with liquid.\n");
vessel.c | 1264 | write("You are full to the brim with liquid.\n");
vessel.c | 1267 | write("You feel you would burst if you drank any more.\n");
vessel.c | 1275 | do_drink(dest, me, him, args, pattern);
vessel.c | 1282 | add_failed_mess("You are not carrying $D.\n");
vessel.c | 1286 | write("Passing on to pour ... bad move.\n");
vessel.c | 1287 | do_pour(dest, me, him, prep);
vessel.c | 1292 | add_failed_mess("$C$$D $V$0=is,are$V$ not open.\n");
vessel.c | 1298 | add_failed_mess("$C$$D $V$0=is,are$V$ already empty.\n");
vessel.c | 1302 | remove_volume(cont_volume);
vessel.c | 1305 | all_inventory()->move(environment(this_player()));
vessel.c | 1314 | query_splashable(splasher, splashee);
vessel.c | 1324 | add_failed_mess("Splash it on who?\n");
vessel.c | 1327 | if(sizeof(dest) >
vessel.c | 1328 | add_failed_mess("You may only splash one person at a time.\n");
vessel.c | 1332 | write("You aren't carrying the " + short(0) + ".\n");
vessel.c | 1337 | add_failed_mess("The " + short(0) + " $V$0=is,are$V$ bone dry!\n");
vessel.c | 1343 | to_int(args[0]);
vessel.c | 1344 | to_int(args[1]);
vessel.c | 1346 | notify_fail("Interesting fraction you have there!\n");
vessel.c | 1354 | this_player(), dest[0]);
vessel.c | 1357 | add_failed_mess("You can't splash anything in $D.\n");
vessel.c | 1386 | sizeof(contents);
vessel.c | 1389 | query_amount(), "splash");
vessel.c | 1403 | query_applicable(applier, appliee);
vessel.c | 1413 | add_failed_mess("Rub it on who?\n");
vessel.c | 1416 | if(sizeof(dest) >
vessel.c | 1417 | add_failed_mess("You may only rub stuff on one person at a time.\n");
vessel.c | 1421 | write("You aren't carrying the " + short(0) + ".\n");
vessel.c | 1426 | add_failed_mess("The " + short(0) + " $V$0=is,are$V$ bone dry!\n");
vessel.c | 1432 | to_int(args[0]);
vessel.c | 1433 | to_int(args[1]);
vessel.c | 1435 | notify_fail("Interesting fraction you have there!\n");
vessel.c | 1443 | this_player(), dest[0]);
vessel.c | 1445 | add_failed_mess("You can't rub anything in $D on $I.\n",dest);
vessel.c | 1464 | this_player()->query_objective()+"self.\n", ({}));
vessel.c | 1471 | sizeof(contents);
vessel.c | 1474 | query_amount(),"apply");
vessel.c | 1488 | do_rub(dest, me, him, args, pattern);
vessel.c | 1498 | write("You aren't carrying the " + short(0) + ".\n");
vessel.c | 1505 | add_failed_mess("The " + short(0) + " $V$0=is,are$V$ bone dry!\n");
vessel.c | 1519 | drink_amount(amount_tasted, this_player());
vessel.c | 1529 | write("You aren't carrying the " + short(0) + ".\n");
vessel.c | 1536 | add_failed_mess("The " + short(0) + " $V$0=is,are$V$ bone dry!\n");
vessel.c | 1550 | drink_amount(amount_tasted, this_player());
vessel.c | 1563 | write("Smelling isn't implemented yet.  Sorry.\n");
vessel.c | 1574 | handle_restore_inventory(ob);
vessel.c | 1581 | set_amount( query_max_volume() - query_volume() );
vessel.c | 1582 | handle_restore_inventory(ob);
vessel.c | 1595 | int_query_static_auto_load();
vessel.c | 1608 | int_query_static_auto_load();
vessel.c | 1610 | return ([ ]);
vessel.c | 1616 | init_static_arg(args["::"]);
vessel.c | 1633 | query_amount();
vessel.c | 1636 | query_weight()*(int)ob->query_property("density");
vessel.c | 1645 | if ((new_vol + volume) >
vessel.c | 1661 | query_amount();
vessel.c | 1666 | query_property("density");
vessel.c | 1680 | debug_printf("Increasing volume by " + ob_vol + ".\n");
vessel.c | 1685 | check_reaction(ob);
vessel.c | 1687 | set_heart_beat(1);
vessel.c | 1700 | query_amount();
vessel.c | 1705 | query_property("density");
vessel.c | 1715 | debug_printf("Decreasing volume by " + ob_vol + ".\n");
vessel.c | 1729 | filter(all_inventory(), (: $1->query_liquid() :));
vessel.c | 1733 | the_short() + " breaks.\n");
vessel.c | 1734 | move("/room/rubbish");
vessel.c | 1736 | break_me();
vessel.c | 1745 | is_matching_object(input, player, context);
vessel.c | 1749 | return ({ result, ({ this_object() }) });
vessel.c | 1760 | fullness_adjectives() + ::parse_command_adjectiv_id_list();
vessel.c | 1765 | figure_out_liquids();
vessel.c | 1769 | parse_command_adjectiv_id_list();
vessel.c | 1784 | figure_out_liquids();
vessel.c | 1787 | parse_command_id_list();
vessel.c | 1789 | parse_command_id_list();
vessel.c | 1793 | parse_command_id_list();
vessel.c | 1804 | figure_out_liquids();
vessel.c | 1807 | parse_command_plural_id_list();
vessel.c | 1809 | parse_command_plural_id_list();
vessel.c | 1813 | parse_command_plural_id_list();
peddler.c | 61 | create();
peddler.c | 68 | query_cont();
peddler.c | 70 | init();
peddler.c | 88 | check_cont();
peddler.c | 89 | query_cont();
peddler.c | 90 | set_name( "peddler_store" );
peddler.c | 103 | return (int)thing->query_property("cost here");
peddler.c | 106 | return (int)thing->query_value_at( this_object() );
peddler.c | 121 | query_cost( thing, buyer ), place );
peddler.c | 146 | query_property( "place" );
peddler.c | 150 | check_cont();
peddler.c | 157 | sizeof( things );
peddler.c | 159 | query_property( NUM_SOLD );
peddler.c | 182 | file_name(this_player()) );
peddler.c | 186 | this_player()->query_name(), 4*i+3);
peddler.c | 190 | evaluate(things[ i ]->long()));
peddler.c | 196 | query_multiple_short(things) +".\n", ({ }) );
peddler.c | 208 | queue_command("'" + _missing_punter_mess);
peddler.c | 212 | this_player()->the_short()+" "+short+ ".\n");
peddler.c | 213 | tell_object(this_player(), long);
peddler.c | 229 | do_command("'" + _busy_mess);
peddler.c | 236 | check_cont();
peddler.c | 251 | query_multiple_short(things) +".\n", ({ }) );
peddler.c | 256 | sizeof( things );
peddler.c | 258 | query_property( NUM_SOLD );
peddler.c | 269 | call_out( "sell_thing", 2 * i, this_player(), things[ i ] );
peddler.c | 274 | query_multiple_short(things) +".\n", ({ }) );
peddler.c | 296 | this_player()->add_succeeded_mess( this_object(), "" );
peddler.c | 300 | query_property( "place" );
peddler.c | 306 | check_cont();
peddler.c | 307 | query_cont();
peddler.c | 309 | first_inventory( cont );
peddler.c | 314 | query_property( NUM_SOLD );
peddler.c | 316 | next_inventory( thing );
peddler.c | 327 | query_property( DISPLAY );
peddler.c | 332 | query_plural();
peddler.c | 335 | a_short();
peddler.c | 340 | pluralize( display );
peddler.c | 354 | next_inventory( thing );
peddler.c | 358 | queue_command( "say " + _no_stock_mess);
peddler.c | 361 | this_player()->add_succeeded_mess( this_object(), "" );
peddler.c | 390 | query_property( "place" );
peddler.c | 395 | query_value_in( place );
peddler.c | 397 | query_value_in( "default" );
peddler.c | 401 | if ( (int)this_object()->query_cost( thing, player ) >
peddler.c | 412 | this_object()->create_real_object( thing );
peddler.c | 419 | random( 20 ) );
peddler.c | 422 | clone_object( item_name );
peddler.c | 427 | clone_object( explode( file_name( thing ), "#" )[ 0 ] );
peddler.c | 437 | this_object()->query_cost( copy, player ), place ), place );
peddler.c | 439 | cost_string( copy, place, player ) +".\n" );
peddler.c | 441 | the_short() +" some money.\n", player );
peddler.c | 447 | queue_command( "sayto " + file_name(player) + " " + custom_string );
peddler.c | 448 | move( environment() );
peddler.c | 449 | queue_command( ":puts "+ (string)copy->a_short() +" on the ground." );
peddler.c | 461 | if (ob->query_food_object()) { ob->set_decay_speed(0);
peddler.c | 466 | if (ob->query_food_object()) { ob->set_decay_speed(8000);
peddler.c | 472 | log_file("PEDDLER", "Cont: %s\n", file_name(query_cont()));
peddler.c | 473 | dest_me();
peddler.c | 474 | dest_me();
fungus.c | 12 | next_stage();
fungus.c | 16 | create();
fungus.c | 18 | set_name( "fungus" );
fungus.c | 19 | add_plural( "fungi" );
fungus.c | 20 | set_short( "fungus" );
fungus.c | 23 | set_weight_per_bite( 1 );
fungus.c | 34 | this_object()->setup();
fungus.c | 36 | call_out( "next_stage", delay / 2 + random( delay ) );
fungus.c | 47 | if ( remove_call_out( "next_stage" ) >
fungus.c | 48 | call_out( "next_stage", delay / 2 + random( delay ) );
fungus.c | 59 | this_object()->next_stage();
fungus.c | 80 | write( "WARNING: there must be five messages.\n" );
fungus.c | 87 | init();
fungus.c | 89 | this_player()->add_command( "pick", this_object() );
fungus.c | 93 | return ( (int)thing->query_stage() > 5 );
fungus.c | 97 | set_name("pile");
fungus.c | 98 | set_short("small, dusty pile of fungus spores");
fungus.c | 99 | add_alias("dust");
fungus.c | 100 | add_alias("spore");
fungus.c | 101 | add_adjective("fungus");
fungus.c | 102 | add_adjective("spore");
fungus.c | 103 | set_main_plural("small, dusty piles of fungus spores");
fungus.c | 104 | add_plural(({"piles","spores"}));
fungus.c | 105 | add_plural_adjective("small, dusty piles of");
fungus.c | 106 | add_plural_adjective("fungus");
fungus.c | 107 | set_delay( delay );
fungus.c | 108 | set_large_weight( large_weight );
fungus.c | 109 | set_weight_per_bite( query_weight_per_bite() );
fungus.c | 110 | set_adjs( adjs );
fungus.c | 111 | set_extra( extra );
fungus.c | 114 | set_type( type );
fungus.c | 115 | set_messages( messages );
fungus.c | 120 | clone_object( explode( file_name( this_object() ), "#" )[0]);
fungus.c | 121 | setup_spore();
fungus.c | 122 | move( place );
fungus.c | 138 | this_object()->setup_spore();
fungus.c | 142 | environment() }) );
fungus.c | 143 | filter_array( things, "test_non_spore", this_object() );
fungus.c | 144 | if ( sizeof( things ) >
fungus.c | 146 | move( "/room/rubbish" );
fungus.c | 149 | tell_room( environment(), replace( messages[ 0 ], "$type$", words ) );
fungus.c | 150 | set_aliases( ({ type }) );
fungus.c | 151 | set_plurals( ({ "fungi", pluralize( type ) }) );
fungus.c | 152 | set_short( "small "+ words );
fungus.c | 154 | set_adjectives( ({ "small" }) + explode( adjs, " " ) );
fungus.c | 156 | set_adjectives( ({ "small" }) );
fungus.c | 157 | set_main_plural( "small "+ pluralize( words ) );
fungus.c | 160 | set_weight( large_weight / 4 );
fungus.c | 161 | all_inventory( environment() );
fungus.c | 162 | sizeof( things );
fungus.c | 164 | add_command( "pick", this_object() );
fungus.c | 167 | tell_room( environment(), replace( messages[ 1 ], "$type$", words ) );
fungus.c | 168 | set_short( "medium "+ words );
fungus.c | 170 | set_adjectives( ({ "medium" }) + explode( adjs, " " ) );
fungus.c | 172 | set_adjectives( ({ "medium" }) );
fungus.c | 173 | set_main_plural( "medium "+ pluralize( words ) );
fungus.c | 176 | set_weight( large_weight / 2 );
fungus.c | 179 | tell_room( environment(), replace( messages[ 2 ], "$type$", words ) );
fungus.c | 180 | set_short( "large "+ words );
fungus.c | 182 | set_adjectives( ({ "large" }) + explode( adjs, " " ) );
fungus.c | 184 | set_adjectives( ({ "large" }) );
fungus.c | 185 | set_main_plural( "large "+ pluralize( words ) );
fungus.c | 188 | set_weight( large_weight );
fungus.c | 196 | tell_room( environment(), replace( messages[ 3 ], "$type$", words ) );
fungus.c | 197 | random( 3 );
fungus.c | 199 | make_spore( environment() );
fungus.c | 202 | tell_room( environment(), replace( messages[ 4 ], "$type$", words ) );
fungus.c | 203 | move( "/room/rubbish" );
fungus.c | 207 | call_out( "next_stage", delay / 2 + random( delay ) );
fungus.c | 221 | do_take() { return do_get();
fungus.c | 227 | remove_call_out( "next_stage" );
fungus.c | 229 | call_out( "too_heavy_mess", 0, this_player() );
fungus.c | 245 | query_static_auto_load() { return int_query_static_auto_load();
fungus.c | 248 | init_dynamic_arg( args );
fungus.c | 250 | remove_call_out( "next_stage" );
shut.c | 39 | write("This object can't be cloned.\n");
shut.c | 40 | dest_me();
shut.c | 43 | set_name("offler");
shut.c | 44 | set_living_name("offler");
shut.c | 45 | add_adjective( ({ "offler", "the", "crocodile" }));
shut.c | 46 | add_alias("god");
shut.c | 47 | enable_commands();
shut.c | 48 | set_short( "Offler" );
shut.c | 49 | add_property( "determinate", "" );
shut.c | 52 | add_alias("shut");
shut.c | 53 | reset_get();
shut.c | 61 | time();
shut.c | 63 | call_out("end_it_all",0);
shut.c | 64 | set_heart_beat(0);
shut.c | 68 | ishout( "Game weboot in "+ time_to_crash +" thecondth." );
shut.c | 87 | ishout( "Game ith webooting in one minute.  Quit now!" );
shut.c | 91 | ishout( "Game ith webooting in "+ time_to_crash +" minuteth." );
shut.c | 101 | write("Bad argument\n");
shut.c | 104 | file_name(previous_object());
shut.c | 106 | write("No time given\n");
shut.c | 111 | dest_me();
shut.c | 115 | users();
shut.c | 116 | sizeof(players);
shut.c | 122 | number_as_string( minutes ) + " minutes.%^RESET%^\n" );
shut.c | 124 | set_long("He is firmly concentrating on counting.\n");
shut.c | 127 | time()) + " seconds.\n");
shut.c | 135 | set_heart_beat(1);
shut.c | 137 | call_out( "check_ghosts", 60 );
shut.c | 145 | this_player()->query_cap_name()+" for " + reason + "\n");
shut.c | 148 | file_name(previous_object()) + " for " + reason + "\n");
shut.c | 153 | long(str, dark);
shut.c | 158 | long(str,dark);
shut.c | 165 | ishout( "Thutdown now!" );
shut.c | 166 | users();
shut.c | 167 | sizeof(obs);
shut.c | 168 | call_out("force_quit", i, obs[i]);
shut.c | 170 | call_out("blue", 10);
shut.c | 176 | stop_all_fight();
shut.c | 178 | dest_me();
shut.c | 182 | move( "/d/am/buildings/drum/mendeddrum" );
shut.c | 186 | quit_alt();
shut.c | 191 | quit();
shut.c | 201 | if (sizeof(users()) >
shut.c | 203 | call_out("blue", 10);
shut.c | 205 | eventShutdown(1);
shut.c | 206 | shutdown(0);
shut.c | 212 | call_out( "dest_me", 1 );
shut.c | 215 | set_heart_beat( 1 );
shut.c | 216 | time();
shut.c | 222 | write( "Bad mistake...\n" );
shut.c | 223 | this_player()->run_away();
shut.c | 229 | find_player( word );
shut.c | 244 | remove_ghost();
shut.c | 245 | clone_object( OFFLER_SHADOW )->setup_shadow( thing );
shut.c | 252 | call_out( "person_died", 3, word, number + 1 );
shut.c | 259 | call_out( "person_dead", 3, thing, number );
shut.c | 268 | remove_ghost();
shut.c | 269 | clone_object( OFFLER_SHADOW )->setup_shadow( thing );
shut.c | 276 | call_out( "person_dead", 3, thing, number + 1 );
shut.c | 289 | if ( (int)thing->query_deaths() >
shut.c | 292 | call_out( "person_dead", 3, thing, 0 );
container.c | 133 | set_heart_beat(1);
container.c | 171 | if (leak_rate) set_heart_beat(1);
container.c | 190 | set_max_weight(i);
container.c | 203 | set_max_weight(i/10);
container.c | 240 | all_inventory(this_object());
container.c | 241 | filter_array(inv, "cull_neutral_obs", this_object());
container.c | 243 | if (sizeof(inv) == 0) return ({ 0, 0, 0 });
container.c | 247 | sizeof(inv);
container.c | 248 | query_vect();
container.c | 254 | return ({ ang / tot, str / tot, tot });
container.c | 265 | all_inventory(this_object());
container.c | 266 | filter_array(inv, "cull_neutral_obs", this_object());
container.c | 268 | sizeof(inv);
container.c | 269 | dest_me();
container.c | 271 | sizeof(inv);
container.c | 280 | wibble_wobble();
container.c | 281 | find_object("/obj/handlers/trig");
container.c | 284 | cos(da);
container.c | 285 | sin(da);
container.c | 290 | cos(meth_ang) + cb * trig->sin(meth_ang);
container.c | 291 | sin(meth_ang) - cb * trig->cos(meth_ang);
container.c | 292 | return ({ cx / 1000000, cy / 1000000 });
container.c | 295 | set_ps_coord_quantity(int *coord, int quantity);
container.c | 308 | find_object("/obj/handlers/trig");
container.c | 375 | transparency_string(all_attrs[POTION_TRANSPARENCY]) });
container.c | 377 | consistency_string(all_attrs[POTION_CONSISTENCY]) });
container.c | 378 | sizeof(all_attrs[POTION_NAMES]);
container.c | 379 | explode(all_attrs[POTION_NAMES][i][0], " ");
container.c | 380 | sizeof(exploded) - 1] });
container.c | 381 | if (sizeof(exploded) >
container.c | 386 | sizeof(all_attrs[POTION_COLOURS]);
container.c | 387 | explode(all_attrs[POTION_COLOURS][i][0], " ");
container.c | 399 | allocate(POTION_ATTRS_SIZE);
container.c | 407 | neutral_coordinate();
container.c | 412 | update_potion_parse();
container.c | 418 | create();
container.c | 419 | create();
container.c | 420 | set_can_export_inventory();
container.c | 422 | void_liquid();
container.c | 423 | add_property("liquid", 1);
container.c | 424 | add_property("watertight", 1);
container.c | 427 | this_object()->setup();
container.c | 432 | init();
container.c | 433 | this_player()->add_command("drink", this_object());
container.c | 434 | this_player()->add_command("splash", this_object(), "<direct:object> <preposition> <indirect:object>");
container.c | 435 | this_player()->add_command("rub", this_object(), "<direct:object> <preposition> <indirect:object>");
container.c | 436 | this_player()->add_command("apply", this_object(), "<direct:object> <preposition> <indirect:object>");
container.c | 437 | this_player()->add_command("pour", this_object(), "<direct:object> <preposition> <indirect:object>");
container.c | 438 | this_player()->add_command("taste", this_object());
container.c | 439 | this_player()->add_command("smell", this_object());
container.c | 440 | this_player()->add_command("fill", this_object(), "<indirect:object> <preposition> <direct:object>");
container.c | 441 | this_player()->add_command("fill", this_object(), "<indirect:object> <fraction> up <preposition> <direct:object>");
container.c | 442 | this_player()->add_command("fill", this_object(), "<indirect:object> <fraction> full <preposition> <direct:object>");
container.c | 443 | this_player()->add_command("empty", this_object());
container.c | 445 | init();
container.c | 451 | query_weight();
container.c | 453 | query_max_weight();
container.c | 469 | query_max_weight() - query_loc_weight();
container.c | 483 | query_loc_weight())/query_max_weight();
container.c | 491 | remove_call_out( "check_breakages" );
container.c | 492 | call_out( "check_breakages", 5 + random( 16 ) );
container.c | 497 | all_inventory();
container.c | 498 | sizeof(obs);
container.c | 508 | sizeof(obs)>
container.c | 509 | query_multiple_short(({ this_object() }))+".\n");
container.c | 511 | query_multiple_short(({ this_object() }))+".\n");
container.c | 512 | dest_me();
container.c | 532 | environment(this_object());
container.c | 534 | environment(carrier);
container.c | 538 | all_inventory();
container.c | 539 | query_loc_weight() - (int)query_property("padded");
container.c | 540 | sizeof(obs);
container.c | 553 | sizeof(obs)>
container.c | 554 | query_multiple_short(({ this_object() }))+".\n", ({ carrier }));
container.c | 556 | query_multiple_short(({ this_object() }))+".\n");
container.c | 557 | dest_me();
container.c | 563 | short_status() + ::pretty_short( thing );
container.c | 568 | short_status() + ::pretty_plural( thing );
container.c | 585 | sizeof(names) < 1 || names[0][1] < VERY_SMALL_AMOUNT);
container.c | 586 | sizeof(colours) < 1 || colours[0][1] < VERY_SMALL_AMOUNT);
container.c | 591 | consistency_string(all_attrs[POTION_CONSISTENCY]);
container.c | 596 | add_a(colours[0][0]);
container.c | 599 | consistency_string(all_attrs[POTION_CONSISTENCY]);
container.c | 610 | query_multiple_short(med);
container.c | 614 | if (sizeof(med)) liq_name += " and faint streaks of " + query_multiple_short(lo);
container.c | 615 | query_multiple_short(lo);
container.c | 626 | if (sizeof(med) > 1) liq_name = "a mixture of " + query_multiple_short(med);
container.c | 629 | if (!sizeof(med) && sizeof(lo) >
container.c | 630 | query_multiple_short(lo);
container.c | 634 | query_multiple_short(lo);
container.c | 655 | if (sizeof(med) > 1) liq_name = "a mixture of " + query_multiple_short(med);
container.c | 658 | if (!sizeof(med) && sizeof(lo) >
container.c | 659 | query_multiple_short(lo);
container.c | 663 | query_multiple_short(lo);
container.c | 668 | add_a(colours[0][0]);
container.c | 670 | consistency_string(all_attrs[POTION_CONSISTENCY]);
container.c | 681 | query_multiple_short(med);
container.c | 685 | if (sizeof(med)) liq_name += " and faint streaks of " + query_multiple_short(lo);
container.c | 686 | query_multiple_short(lo);
container.c | 692 | add_a(colours[0][0]);
container.c | 694 | consistency_string(all_attrs[POTION_CONSISTENCY]);
container.c | 701 | query_multiple_short(med);
container.c | 713 | query_multiple_short(med);
container.c | 717 | if (sizeof(med)) liq_name += " and faint streaks of " + query_multiple_short(lo);
container.c | 718 | query_multiple_short(lo);
container.c | 741 | consistency_string(all_attrs[POTION_CONSISTENCY]);
container.c | 753 | long(str, dark);
container.c | 754 | calc_extra_look();
container.c | 763 | query_contents( "The "+ short( dark ) +" contains:\n" );
container.c | 768 | long_status();
container.c | 799 | return ({ "totally", "empty" });
container.c | 802 | return ({ "totally", "empty" });
container.c | 803 | return ({ "empty" });
container.c | 804 | return ({ "full" });
container.c | 805 | return ({ "totally", "full" });
container.c | 806 | return ({ });
container.c | 813 | parse_command_id_list();
container.c | 819 | fullness_adjectives() + potion_adjective + ::parse_command_adjectiv_id_list();
container.c | 835 | allocate(sizeof(arr1));
container.c | 837 | sizeof(arr1);
container.c | 839 | sizeof(arr2);
container.c | 850 | sizeof(arr2);
container.c | 859 | sort_array(arr3, "sort_func", this_object());
container.c | 865 | if (i < 0) arr3 = ({ });
container.c | 876 | allocate(POTION_ATTRS_SIZE);
container.c | 899 | merge_potions(active_attrs, misc_attrs, water, volume - water, volume);
container.c | 900 | update_potion_parse();
container.c | 901 | if (leak_rate) set_heart_beat(1);
container.c | 919 | sizeof(newpotion[POTION_NAMES]);
container.c | 922 | sizeof(newpotion[POTION_COLOURS]);
container.c | 925 | sizeof(newpotion[POTION_SMELLS]);
container.c | 928 | sizeof(newpotion[POTION_FLAVOURS]);
container.c | 944 | query_attrs_at(new_coord);
container.c | 945 | change_concentration(ps_attrs, new_quantity * 100 / water);
container.c | 948 | merge_potions(active_attrs, misc_attrs, water, volume - water, volume);
container.c | 949 | update_potion_parse();
container.c | 950 | potion_create(this_object(), new_coord, new_quantity);
container.c | 955 | allocate(9);
container.c | 956 | allocate(9);
container.c | 978 | if (leak_rate && volume) set_heart_beat(1);
container.c | 987 | query_attrs_at(ps_coord);
container.c | 988 | change_concentration(ps_attrs, ps_quantity * 100 / water);
container.c | 989 | merge_potions(active_attrs, misc_attrs, water, volume - water, volume);
container.c | 990 | update_potion_parse();
container.c | 991 | potion_create(this_object(), ps_coord, ps_quantity);
container.c | 1014 | query_parse_id(arr);
container.c | 1027 | call_out("set_volume_to_womble", 0, 0);
container.c | 1029 | this_object();
container.c | 1032 | if ((i=(arr[P_MAX_NUM]*arr[P_TOP])/arr[P_BOT]) >
container.c | 1033 | this_object();
container.c | 1037 | call_out("set_volume_to_womble", 0, 0);
container.c | 1038 | this_object();
container.c | 1043 | if ((i=(arr[P_THING]*arr[P_TOP])/arr[P_BOT]) >
container.c | 1044 | this_object();
container.c | 1048 | call_out("set_volume_to_womble", 0, 0);
container.c | 1049 | this_object();
container.c | 1081 | set_heart_beat(0);
container.c | 1104 | short(1)+".\n");
container.c | 1105 | remove_volume(lost);
container.c | 1107 | set_heart_beat(0);
container.c | 1108 | set_liquid_name(0);
container.c | 1109 | void_liquid();
container.c | 1130 | query_misc_attrs();
container.c | 1131 | query_volume();
container.c | 1132 | query_water_volume();
container.c | 1133 | query_ps_quantity();
container.c | 1141 | set_water_volume(their_water + vol_water);
container.c | 1146 | set_misc_attrs(their_attrs, new_misc_vol);
container.c | 1149 | set_volume(their_water + vol_water);
container.c | 1152 | query_ps_coord();
container.c | 1153 | allocate(2);
container.c | 1160 | set_ps_coord_quantity(new_coord, new_quantity);
container.c | 1173 | write("The " + short(1) + " is locked.\n");
container.c | 1178 | write("You open the "+short(1)+".\n");
container.c | 1181 | write("You can't open the " + short(1) + ".\n");
container.c | 1194 | if (sizeof(dest) >
container.c | 1195 | write("Currently you can only pour into one object\n");
container.c | 1202 | write("The " + short(0) + " you are trying to pour out of is empty.\n");
container.c | 1209 | query_liquid_short();
container.c | 1214 | empty_formula();
container.c | 1216 | remove_volume(volume_transferred);
container.c | 1223 | short(0) + " into the " + dest[0]->short(0) + ".\n");
container.c | 1227 | query_volume_left();
container.c | 1233 | this_player()->add_succeeded(dest[0]);
container.c | 1246 | notify_fail("Interesting fraction you have there!\n");
container.c | 1255 | notify_fail("The " + short(0) + " is locked!\n");
container.c | 1261 | write("You open the " + short(0) + ".\n");
container.c | 1263 | write("You cannot open the " + short(0) + ".\n");
container.c | 1269 | write("The " + short(0) + " is bone dry!\n");
container.c | 1275 | query_volume();
container.c | 1276 | query_max_volume();
container.c | 1285 | write("The " + to[i]->short(0) + " is full to the brim already.\n");
container.c | 1302 | empty_formula();
container.c | 1304 | this_player()->add_succeeded(to[i]);
container.c | 1306 | this_player()->add_succeeded(to[i]);
container.c | 1309 | short(0) + ".\n");
container.c | 1314 | short(0) + " into the " + to[i]->short(0) + ".\n");
container.c | 1319 | remove_volume(volume_needed);
container.c | 1330 | write("Drinking is a very simple operation - please don't complicate matters.\n");
container.c | 1337 | write("The " + short(0) + " is bone dry!\n");
container.c | 1346 | if (!volume_to_womble) volume_to_womble = empty_formula();
container.c | 1347 | if (volume_to_womble > empty_formula()) volume_to_womble = empty_formula();
container.c | 1349 | write("You drink some of the liquid, but simply cannot fit it all in.\n");
container.c | 1352 | remove_volume(volume_to_womble);
container.c | 1354 | potion_drunk(this_player(), ps_coord, amount_drunk);
container.c | 1356 | this_player()->query_con());
container.c | 1359 | write("You feel mildly full of liquid.\n");
container.c | 1362 | write("You feel very full of liquid.\n");
container.c | 1365 | write("You feel pissed.\n");
container.c | 1368 | write("You are awash with liquid.\n");
container.c | 1371 | write("You are full to the brim with liquid.\n");
container.c | 1374 | write("You feel you would burst if you drank any more.\n");
container.c | 1384 | write("Passing on to pour ... bad move.\n");
container.c | 1385 | do_pour(dest, me, him, prep);
container.c | 1389 | if (!ensure_open()) { write("It aint open!\n");
container.c | 1392 | write("The " + short(0) + " is already empty.\n");
container.c | 1397 | remove_volume(volume_to_womble);
container.c | 1399 | remove_volume(empty_formula());
container.c | 1411 | if (sizeof(dest) >
container.c | 1412 | write("You can only splash one object at a time.\n");
container.c | 1422 | remove_volume(volume_to_womble);
container.c | 1424 | remove_volume(empty_formula());
container.c | 1426 | potion_touch(dest[0], ps_coord, amount_splashed);
container.c | 1427 | this_player()->add_succeeded(dest[0]);
container.c | 1435 | if (sizeof(dest) >
container.c | 1436 | write("You can only "+query_verb()+" on to one object at a time.\n");
container.c | 1444 | write("You can only "+query_verb()+" on to an object in your inventory.\n");
container.c | 1451 | remove_volume(volume_to_womble);
container.c | 1453 | remove_volume(empty_formula());
container.c | 1455 | potion_touch(dest[0], ps_coord, amount_rubbed);
container.c | 1456 | this_player()->add_succeeded(dest[0]);
container.c | 1462 | do_rub( dest, me, him, prep );
container.c | 1477 | write("There is no liquid to taste.\n");
container.c | 1481 | query_liquid_short();
container.c | 1492 | query_multiple_short(group);
container.c | 1503 | if (sizeof(group)) desc += query_multiple_short(group);
container.c | 1505 | write(desc + ".\n");
container.c | 1507 | short(0) + ".\n");
container.c | 1509 | remove_volume(TASTE_AMOUNT);
container.c | 1510 | potion_drunk(this_player(), ps_coord, TASTE_AMOUNT);
container.c | 1525 | write("There is no liquid to smell.\n");
container.c | 1529 | query_liquid_short();
container.c | 1540 | query_multiple_short(group);
container.c | 1551 | if (sizeof(group)) desc += query_multiple_short(group);
container.c | 1553 | write(desc + ".\n");
container.c | 1555 | short(0) + ".\n");
container.c | 1557 | potion_smell(this_player(), ps_coord, ps_quantity * 100 / volume);
container.c | 1565 | int_query_static_auto_load();
container.c | 1604 | init_dynamic_arg(map["::"]);
container.c | 1606 | clone_object("/obj/money");
container.c | 1607 | set_money_array(map["money"]);
container.c | 1608 | move(this_object());
container.c | 1612 | set_locked();
container.c | 1614 | set_unlocked();
container.c | 1616 | set_stuck(map["stuck"]);
container.c | 1618 | set_closed();
container.c | 1620 | set_open();
container.c | 1624 | set_water_volume(map["water"]);
container.c | 1626 | void_liquid();
container.c | 1627 | update_potion_parse();
container.c | 1633 | query_attrs_at(ps_coord);
container.c | 1635 | change_concentration(ps_attrs, ps_quantity * 100 / water);
container.c | 1636 | merge_potions(active_attrs, misc_attrs, water, volume - water, volume);
container.c | 1637 | update_potion_parse();
container.c | 1643 | init_static_arg(args["::"]);
container.c | 1654 | set_transparent();
container.c | 1656 | set_opaque();
container.c | 1660 | set_difficulty(args["difficulty"]);
container.c | 1663 | set_key(args["key"]);
container.c | 1666 | set_open_trap(args["trap open ob"], args["trap open func"]);
container.c | 1669 | set_lock_trap(args["trap lock ob"], args["trap lock func"]);
container.c | 1684 | int_query_static_auto_load();
container.c | 1685 | return ([ ]);
container.c | 1707 | can_find_match_recurse_into(looker);
container.c | 1711 | test_remove(object ob, int flag) { return !query_closed();
container.c | 1719 | environment();
container.c | 1720 | move(dest, messin, messout);
container.c | 1722 | environment();
container.c | 1723 | we_moved(from, to);
container.c | 1730 | dest_me();
container.c | 1731 | dest_me();
package.c | 20 | query_value();
package.c | 23 | query_value();
package.c | 31 | int_query_static_auto_load();
package.c | 32 | return ([ ]);
service_provider.c | 26 | parsing_function( mixed *array , string words );
service_provider.c | 52 | create();
service_provider.c | 54 | if ( !do_setup ) this_object()->setup();
service_provider.c | 60 | init();
service_provider.c | 105 | filter( _service_array, (: $1[SERVICE]==$(service) :) );
service_provider.c | 125 | this_player();
service_provider.c | 131 | query_property( "place" );
service_provider.c | 136 | filter( _service_array ,(:parsing_function( $1, $(words)[0]):) );
service_provider.c | 139 | init_command( "say I'm afraid I don't offer that service.", 2 );
service_provider.c | 162 | this_player();
service_provider.c | 163 | query_property("place");
service_provider.c | 170 | filter( _service_array , (: parsing_function($1,$(words)[0]) :));
service_provider.c | 173 | init_command( "say I'm afraid I don't offer that service.", 2 );
service_provider.c | 176 | query_value_in( place ) );
service_provider.c | 187 | create_money_array(things[0][COST], place ), place );
service_provider.c | 188 | call_out( things[0][FUNCTION] , 4 , player, things[0] );
service_provider.c | 205 | sizeof( _service_array );
service_provider.c | 207 | query_property( "place" );
service_provider.c | 232 | init_command("say "+ list, 2);
corpse.c | 29 | set_decay_messages();
corpse.c | 30 | remove_creator_corpse( object ob );
corpse.c | 32 | set_race_ob(string _race_ob);
corpse.c | 67 | make_bit(string which_bit);
corpse.c | 68 | make_bits(string *what_bits);
corpse.c | 69 | give_permission(string);
corpse.c | 74 | query_name();
corpse.c | 84 | sizeof(a1);
corpse.c | 86 | delete(a1, i, 1);
corpse.c | 97 | add_property("cureable", 1);
corpse.c | 98 | add_property("determinate", "the ");
corpse.c | 102 | add_plural("corpses");
corpse.c | 103 | add_plural("bodies");
corpse.c | 104 | add_plural("carcasses");
corpse.c | 105 | add_alias(({ "corpse", "body", "carcass" }));
corpse.c | 106 | set_short("corpse");
corpse.c | 107 | set_long("A corpse, it looks dead.\n");
corpse.c | 108 | set_weight(STD_CORPSE_WEIGHT);
corpse.c | 109 | set_race_ob("/std/races/unknown");
corpse.c | 113 | add_extra_look(this_object());
corpse.c | 132 | get(dest);
corpse.c | 138 | get(dest);
corpse.c | 168 | test_remove(thing, flag, dest);
corpse.c | 171 | test_remove(thing, flag, dest);
corpse.c | 186 | this_object()->query_owner());
corpse.c | 190 | save_corpse(this_object());
corpse.c | 203 | long(words, dark) + query_living_contents(0);
corpse.c | 220 | query_property("determinate");
corpse.c | 222 | short();
corpse.c | 224 | add_a((string) thing->short());
corpse.c | 228 | set_decay(PLAYER_DECAY_BASE);
corpse.c | 230 | give_permission(thing->query_name());
corpse.c | 231 | catch(_corpse_id = CORPSE_HANDLER->query_next_corpse_id());
corpse.c | 232 | query_start_pos();
corpse.c | 233 | set_ownership(thing->query_name());
corpse.c | 234 | add_property("player", 1);
corpse.c | 237 | set_name("corpse");
corpse.c | 238 | set_short("corpse of " + _owner);
corpse.c | 239 | add_adjective(({ "corpse", "of" }));
corpse.c | 240 | explode(lower_case(_owner), " ");
corpse.c | 241 | if (sizeof(tmp) >
corpse.c | 242 | add_alias(tmp[<1]);
corpse.c | 244 | add_adjective(tmp);
corpse.c | 245 | add_adjective(tmp[<1] + "'s");
corpse.c | 248 | query_nationality();
corpse.c | 250 | set_main_plural("corpses of " + thing->short());
corpse.c | 252 | set_main_plural("corpses of " + (string) thing->query_main_plural());
corpse.c | 254 | set_main_plural("corpses of " + pluralize((string) thing->short()));
corpse.c | 257 | set_main_plural("corpses");
corpse.c | 259 | set_long("This is the dead body of " + _owner + ".\n");
corpse.c | 261 | set_weight((int) thing->query_weight(1));
corpse.c | 263 | set_weight(STD_CORPSE_WEIGHT);
corpse.c | 268 | remove_creator_corpse( thing );
corpse.c | 270 | add_bit(this_object());
corpse.c | 272 | catch(CORPSE_HANDLER->register_corpse(this_object()));
corpse.c | 295 | call_out( (: CORPSE_HANDLER->save_corpse(this_object()) :), 8 );
corpse.c | 310 | environment()->query_property("decay rate"));
corpse.c | 314 | set_decay_messages();
corpse.c | 316 | save_corpse(this_object());
corpse.c | 326 | query_name();
corpse.c | 333 | set_short("somewhat decayed remains of " + add_a(query_name()));
corpse.c | 335 | pluralize(query_name()));
corpse.c | 339 | set_short("decayed remains of " + add_a(_race_name));
corpse.c | 340 | set_main_plural("decayed remains of " + pluralize(_race_name));
corpse.c | 341 | set_long("This is the dead body of " + add_a(_race_name) + ".\n");
corpse.c | 344 | deregister_corpse(this_object());
corpse.c | 345 | set_ownership(0);
corpse.c | 346 | all_inventory()->move(environment());
corpse.c | 347 | move("/room/rubbish");
corpse.c | 362 | query_possible_bits(s);
corpse.c | 366 | remove_array_parts(bits, _bits_gone);
corpse.c | 378 | query_possible_plural_bits(s);
corpse.c | 383 | remove_array_parts(bits, _bits_gone);
corpse.c | 395 | query_possible_bits();
corpse.c | 396 | query_all_inedible();
corpse.c | 398 | return ({ });
corpse.c | 412 | all_inventory();
corpse.c | 414 | query_bit_left(s);
corpse.c | 415 | query_bit_left_pl(s);
corpse.c | 417 | all_inventory();
corpse.c | 421 | query_weapons();
corpse.c | 432 | return ({ make_bit(bit) });
corpse.c | 441 | return ({ });
corpse.c | 445 | if (sizeof(bits) >
corpse.c | 446 | make_bits(bits[0..4]);
corpse.c | 448 | make_bits(bits);
corpse.c | 457 | if (sizeof(bits) >
corpse.c | 458 | make_bits(bits[0..4]);
corpse.c | 460 | make_bits(bits);
corpse.c | 470 | return ({ });
corpse.c | 478 | query_bit(which_bit);
corpse.c | 479 | if ((sizeof(bit[2][2]) >
corpse.c | 480 | clone_object(bit[2][2][0]);
corpse.c | 482 | clone_object("/std/bit");
corpse.c | 484 | set_race_ob(_race_ob);
corpse.c | 486 | set_race_name(_race_name);
corpse.c | 488 | set_race_name(_race_ob->query_name());
corpse.c | 490 | set_corpse_weight(query_weight());
corpse.c | 492 | set_bit(bit[0], 0);
corpse.c | 494 | set_bit(bit[0], (_decay * 2) / 3);
corpse.c | 500 | set_long(query_long() + "It is decapitated.\n");
corpse.c | 501 | set_short("decapitated corpse of " + _owner);
corpse.c | 502 | add_adjective("decapitated");
corpse.c | 506 | move(environment());
corpse.c | 509 | add_property("my corpse", this_object());
corpse.c | 519 | make_bit(bit) });
corpse.c | 534 | remove_array_parts(_race_ob->query_possible_bits(bit), _bits_gone);
corpse.c | 538 | query_bit(poss_bits[0]);
corpse.c | 551 | sizeof(bits);
corpse.c | 552 | add_bit_gone(bits[i]);
corpse.c | 562 | query_bits();
corpse.c | 564 | sizeof(bits);
corpse.c | 571 | remove_array_parts(all_bits, _bits_gone);
corpse.c | 579 | sizeof(_armours);
corpse.c | 581 | delete(_armours, i, 1);
corpse.c | 589 | query_armours();
corpse.c | 596 | sizeof(things);
corpse.c | 634 | return ({ });
corpse.c | 637 | return ({ });
corpse.c | 640 | return ({ pos });
corpse.c | 646 | return ({ });
corpse.c | 649 | return ({ pos });
corpse.c | 654 | move_object(dest);
corpse.c | 656 | move("/room/void");
corpse.c | 672 | query_property("XP");
corpse.c | 676 | adjust_xp(xp[1], 1);
corpse.c | 681 | remove_bit(this_object());
corpse.c | 683 | all_inventory()->move(environment());
corpse.c | 685 | dest_me();
corpse.c | 694 | int_query_static_auto_load();
corpse.c | 716 | init_dynamic_arg(map["::"]);
corpse.c | 731 | set_ownership(map["ownership"]);
corpse.c | 741 | set_decay_messages();
corpse.c | 752 | environment();
corpse.c | 757 | environment(env);
corpse.c | 760 | find_start_pos( this_object(), env );
corpse.c | 761 | save_variable(({ query_dynamic_auto_load(), query_static_auto_load(), pos }));
corpse.c | 776 | restore_variable(str_data);
corpse.c | 779 | init_static_arg(data[1]);
corpse.c | 780 | init_dynamic_arg(data[0], 0);
corpse.c | 783 | add_bit(this_object());
corpse.c | 787 | tell_creator("pinkfish", "Trying to restore to location %O [%O]\n", data[2], this_object());
corpse.c | 792 | tell_creator("pinkfish", "Trying to restore to location %O [%O]\n", _start_pos, this_object());
corpse.c | 798 | tell_creator("pinkfish", "Trying to restore to location %O [%O]\n", "/room/rubbish", this_object());
corpse.c | 799 | move("/room/rubbish");
fence.c | 40 | whisper( object, string );
fence.c | 41 | give_back();
fence.c | 49 | create();
fence.c | 52 | this_object()->setup();
fence.c | 55 | clone_object( "/std/container" );
fence.c | 56 | move(this_object());
fence.c | 57 | reset_drop();
fence.c | 58 | reset_get();
fence.c | 59 | set_name( "sack" );
fence.c | 60 | set_short( "sack" );
fence.c | 61 | set_long( "This is a large hessian sack.\n" );
fence.c | 62 | add_property( "nosteal", 1 );
fence.c | 64 | set_wimpy( 20 );
fence.c | 65 | basic_setup( "human", "thief", 500 );
fence.c | 69 | add_respond_to_with( ({ "@nod", ({ "you" }) }), "#do_yes" );
fence.c | 72 | add_respond_to_with( ({ "@say", ({ "no", "No" }) }), "#do_no" );
fence.c | 73 | add_respond_to_with( ({ "@whisper", ({ "no", "No" }) }), "#do_no" );
fence.c | 74 | add_respond_to_with( ({ "@shake", ({ "you" }) }), "#do_no" );
fence.c | 79 | init();
fence.c | 86 | dest_me();
fence.c | 87 | dest_me();
fence.c | 98 | dest_me();
fence.c | 103 | clone_object( "/std/container" );
fence.c | 111 | return (int)thing->query_value_at( this_object() );
fence.c | 139 | query_cost( ob, this_object() );
fence.c | 141 | query_skill_bonus( SKILL + "." + type );
fence.c | 143 | query_skill_bonus( SKILL );
fence.c | 148 | sqrt( skill );
fence.c | 150 | random( variance ) - random( variance );
fence.c | 159 | environment()->query_property( "place" );
fence.c | 168 | calc_place() ) );
fence.c | 211 | this_object()->do_command( "puzzle" );
fence.c | 212 | this_object()->do_command( "wonder if someone is trying to be funny" );
fence.c | 215 | environment( this_object() )->query_light();
fence.c | 219 | this_object()->do_command( "say I can't see anything in the glare!" );
fence.c | 221 | this_object()->do_command( "say I can't see anything in the gloom!" );
fence.c | 232 | the_short() + "." );
fence.c | 234 | whisper( this_player(), "I'm still waiting for a response from you!" );
fence.c | 235 | this_player()->add_succeeded_mess( this_object(), "", offered );
fence.c | 239 | whisper( this_offer->who, "I guess you don't want my offer then." );
fence.c | 247 | whisper( customer, "Seems there is a hole in my sack!" );
fence.c | 252 | move( environment( this_object() ) );
fence.c | 269 | a_short() + ".\n", ({ customer }) );
fence.c | 279 | this_object()->remove_move_zone(zone);
fence.c | 281 | this_object()->add_move_zone( 0 );
fence.c | 290 | filter_array( in_dir, (: !$1->query_keep() :) );
fence.c | 295 | this_player()->add_succeeded_mess( this_object(), "", offered );
fence.c | 300 | if( sizeof( in_dir ) >
fence.c | 303 | this_player()->add_succeeded_mess( this_object(), "", offered );
fence.c | 309 | query_multiple_short( in_dir ) + ".\n" );
fence.c | 315 | strip_colours( ob->the_short()) + "." );
fence.c | 328 | strip_colours( ob->the_short()) + "." );
fence.c | 335 | strip_colours( ob->the_short() ) + "." );
fence.c | 337 | move( environment( this_object() ) );
fence.c | 338 | whisper( this_player(), "So I'll just put it down here." );
fence.c | 341 | whisper( this_player(), "So you can have it back." );
fence.c | 347 | do_command( "' Hang on a sec... this looks awful familiar." );
fence.c | 348 | do_command( "glare " + this_offer->who->query_name() );
fence.c | 349 | do_command( "' Just what are you trying to pull here?!" );
fence.c | 355 | the_short() + " confiscates $I.\n", in_dir );
fence.c | 359 | query_item_type( ob );
fence.c | 360 | judge_value( ob, type );
fence.c | 365 | whisper( this_player(), ob->the_short() + " isn't worth anything." );
fence.c | 367 | move( environment( this_object() ) );
fence.c | 368 | whisper( this_player(), "So I'll just put it down here." );
fence.c | 371 | whisper( this_player(), "So you can have it back." );
fence.c | 383 | scaled_value( offer );
fence.c | 393 | query_value() : offer ]);
fence.c | 402 | this_player()->query_skill_bonus( skill );
fence.c | 410 | sqrt( their_skill );
fence.c | 416 | whisper( this_player(), ob->the_short() + " isn't worth anything." );
fence.c | 418 | move( environment( this_object() ) );
fence.c | 419 | whisper( this_player(), "So I'll just put it down here." );
fence.c | 422 | whisper( this_player(), "So you can have it back." );
fence.c | 436 | if( sizeof( not_speciality ) >
fence.c | 441 | this_player()->add_succeeded_mess( this_object(), "", offered );
fence.c | 444 | whisper( this_player(), "Well, that was a waste of time." );
fence.c | 466 | whisper( person, "You've got a deal." );
fence.c | 469 | add_property( "fenced", (string)person->query_name() );
fence.c | 474 | calc_place() );
fence.c | 475 | clone_object( MONEY_OBJECT );
fence.c | 476 | set_money_array( m_array );
fence.c | 479 | move( environment( this_object() ) );
fence.c | 484 | cost_str( this_offer->amount ) + ".\n" );
fence.c | 486 | a_short() + ".\n", ({person}) );
fence.c | 490 | if( sizeof( move_data ) >
fence.c | 492 | this_object()->add_move_zone( zone );
fence.c | 494 | this_object()->remove_move_zone( 0 );
fence.c | 507 | whisper( player, "Ok, have it your own way then." );
fence.c | 514 | whisper( customer, "Seems thare is a hole in my sack!" );
fence.c | 519 | move( environment( this_object() ) );
fence.c | 536 | a_short() + ".\n", ({ customer }) );
fence.c | 539 | if( sizeof( move_data ) >
fence.c | 541 | this_object()->add_move_zone( zone );
fence.c | 543 | this_object()->remove_move_zone( 0 );
fence.c | 549 | do_command( "whisper " + message + " to " + ob->query_name() );
fence.c | 564 | whisper( ob, "Since you're leaving, I'll give your stuff back." );
fence.c | 571 | whisper( customer, "Seems thare is a hole in my sack!" );
fence.c | 576 | move( environment( this_object() ) );
fence.c | 593 | a_short() + ".\n", ({ customer }) );
fence.c | 606 | do_command( "say Hey! I'm trying to do business here!" );
fence.c | 607 | whisper( this_offer->who, "Hey, you'd better take these." );
fence.c | 614 | whisper( customer, "Seems thare is a hole in my sack!" );
fence.c | 619 | move( environment( this_object() ) );
fence.c | 636 | a_short() + ".\n", ({ customer }) );
fence.c | 639 | attack_by(ob);
fence.c | 646 | event_person_say( thing, start, mess, lang );
fence.c | 660 | whisper( customer, "Seems thare is a hole in my sack!" );
fence.c | 665 | move( environment( this_object() ) );
fence.c | 682 | a_short() + ".\n", ({ customer }) );
fence.c | 692 | query_multiple_short( this_offer->objects );
state_changer.c | 17 | query_busy();
state_changer.c | 18 | do_action( object *obs );
state_changer.c | 19 | parse_message( string message );
state_changer.c | 20 | query_classification();
state_changer.c | 45 | create();
state_changer.c | 46 | set_stuck( 1 );
state_changer.c | 47 | set_leak_rate( 0 );
state_changer.c | 48 | set_weight( 100 );
state_changer.c | 49 | set_max_weight( 5000 );
state_changer.c | 50 | set_max_volume( 5000 );
state_changer.c | 51 | set_hide_cond( 1 );
state_changer.c | 52 | this_object()->add_extra_look(this_object());
state_changer.c | 101 | init();
state_changer.c | 103 | add_command( command, "all in <direct:object>", (: do_action( $1 ) :) );
state_changer.c | 112 | notify_fail( "You are too tired to "+ command +" with the "+ this_object()->the_short() + ".\n" );
state_changer.c | 113 | this_player()->adjust_gp( -gp_cost );
state_changer.c | 118 | this_object()->arg_of( tmp[0] )->query_short() +"!\n" );
state_changer.c | 121 | notify_fail( "There is nothing to "+ command + ".\n" );
state_changer.c | 127 | debug_printf( "Stopped at start_func\n" );
state_changer.c | 128 | notify_fail( "" );
state_changer.c | 134 | this_object()->add_effect( file_name( this_object() ), this_player() );
state_changer.c | 137 | tell_room( environment(), parse_message(start_mess) );
state_changer.c | 141 | all_inventory( this_object() ) );
state_changer.c | 142 | debug_printf( "Setting asm to %s.\n", parse_message( command_mess ) );
state_changer.c | 146 | all_inventory( this_object() ) );
state_changer.c | 154 | submit_ee(0, duration, EE_REMOVE);
state_changer.c | 155 | submit_ee("show_message", ({ 30, 30 }), EE_CONTINUOUS);
state_changer.c | 161 | tell_room(environment(), parse_message(interim_mess) );
state_changer.c | 165 | submit_ee( 0, 0, EE_REMOVE );
state_changer.c | 179 | debug_printf( "Stopped at start_func\n" );
state_changer.c | 186 | debug_printf( "Aborted due to lack of inventory!\n" );
state_changer.c | 188 | tell_room( environment(), parse_message(end_mess_abort) );
state_changer.c | 203 | tell_object( tp, "%^YELLOW%^You learn something new about "+ process +"ing!%^RESET%^\n" );
state_changer.c | 205 | tell_room( environment(), parse_message(end_mess) );
state_changer.c | 210 | transform( i, process, tp );
state_changer.c | 211 | debug_printf( "Transforming: %O to %O.\n", i, ob );
state_changer.c | 214 | move( "/room/rubbish" );
state_changer.c | 215 | move( this_object() );
state_changer.c | 221 | tell_room( environment(), parse_message(end_mess_fail) );
state_changer.c | 224 | evaluate( fail_func );
state_changer.c | 230 | transform( i, fail_process, tp );
state_changer.c | 231 | debug_printf( "Transforming: %O to %O.\n", i, ob );
state_changer.c | 234 | move( "/room/rubbish" );
state_changer.c | 235 | move( this_object() );
state_changer.c | 243 | tell_room( environment(), parse_message(end_mess) );
state_changer.c | 248 | transform( i, process, tp );
state_changer.c | 249 | debug_printf( "Transforming: %O to %O.\n", i, ob );
state_changer.c | 252 | move( "/room/rubbish" );
state_changer.c | 255 | move( this_object() );
state_changer.c | 273 | replace( message, "$inventory$", query_multiple_short( all_inventory() ) );
state_changer.c | 274 | debug_printf( "message is: %s.\n" , message );
state_changer.c | 280 | debug_printf( "Testing add of: %O (%O) in state changer.\n", ob, environment( ob ) );
state_changer.c | 284 | test_add( ob, flag );
state_changer.c | 289 | this_object()->the_short() + " while it is in use!\n" );
state_changer.c | 292 | test_add( ob, flag );
state_changer.c | 299 | test_remove( ob, flag, dest );
state_changer.c | 301 | debug_printf( "Testing remove of: %O (%O) in state changer.\n", ob, environment( ob ) );
state_changer.c | 305 | this_object()->the_short() + " while it is in use!\n" );
state_changer.c | 308 | test_remove( ob, flag, dest );
state_changer.c | 316 | query_long() + parse_message( running_inv_mess );
state_changer.c | 318 | long( word, dark );
state_changer.c | 320 | long( word, dark );
state_changer.c | 325 | add_failed_mess( "You can't empty "+ this_object()->short() +" while it is being used.\n" );
state_changer.c | 328 | do_empty( dest, me, him, prep );
state_changer.c | 338 | do_fill( to, args_b, args_a, args );
state_changer.c | 342 | query_busy() { return !!sizeof( this_object()->effects_matching( query_classification() ) );
cont_medium.c | 72 | make_medium_clone( int number );
cont_medium.c | 78 | create();
cont_medium.c | 85 | this_object()->setup();
cont_medium.c | 88 | sscanf( file_name( this_object() ), "%s#%d", my_filename, junk );
cont_medium.c | 94 | set_name( word );
cont_medium.c | 96 | add_plural( word );
cont_medium.c | 112 | environment()->add_volume(number - amount);
cont_medium.c | 116 | set_weight((amount * weight_unit[ 0 ] ) / weight_unit[ 1 ]);
cont_medium.c | 126 | environment()->add_volume(number);
cont_medium.c | 131 | move( "/room/rubbish" );
cont_medium.c | 135 | set_weight((amount * weight_unit[0]) / weight_unit[1]);
cont_medium.c | 165 | environment()->add_volume( -200*query_weight() );
cont_medium.c | 169 | environment()->add_volume( amount );
cont_medium.c | 182 | environment()->add_volume( -amount );
cont_medium.c | 192 | add_property( "determinate", "" );
cont_medium.c | 261 | add_alias( medium_alias );
cont_medium.c | 274 | set_pile_name("puddle");
cont_medium.c | 321 | set_pile_types(({ 50, "small", 100, "medium", 150, "large", "huge" }));
cont_medium.c | 347 | return (amount * ::query_value() );
cont_medium.c | 348 | query_value();
cont_medium.c | 350 | to_int(::query_value() * value_scale * amount);
cont_medium.c | 388 | query_num(amount);
cont_medium.c | 509 | sizeof( pile_types ) - 1 );
cont_medium.c | 521 | pretty_plural(thing);
cont_medium.c | 523 | add_a(::pretty_short(thing));
cont_medium.c | 525 | amount_size_short() + ::pretty_short( thing );
cont_medium.c | 531 | amount_size_short() + ::pretty_plural( thing );
cont_medium.c | 532 | pretty_plural(thing);
cont_medium.c | 540 | short( dark );
cont_medium.c | 543 | return(ret);
cont_medium.c | 546 | add_a(ret);
cont_medium.c | 548 | return( query_num(amount, 9999 ) + " " + query_main_plural());
cont_medium.c | 561 | pile_size() }) );
cont_medium.c | 563 | replace( ::long( words, dark ), "$N", short( dark ) );
cont_medium.c | 566 | replace( ret, ",$", "$comma_dollar$" );
cont_medium.c | 569 | replace( ret, "$comma_dollar$", ",$");
cont_medium.c | 570 | explode(ret, " ");
cont_medium.c | 571 | sizeof(bits);
cont_medium.c | 584 | amount_size_short();
cont_medium.c | 606 | replace_string( bits[i], "$V", "" );
cont_medium.c | 611 | replace_string( bits[i], "$P", "" );
cont_medium.c | 612 | pluralize( bits[i] );
cont_medium.c | 616 | replace_string( bits[i], "$A", "" );
cont_medium.c | 617 | pluralize( bits[i] );
cont_medium.c | 621 | replace(bits[i], short(dark), query_plural(dark));
cont_medium.c | 624 | implode(bits, " ");
cont_medium.c | 629 | explode(ret, " ");
cont_medium.c | 630 | sizeof(bits);
cont_medium.c | 632 | replace_string( bits[i], "$V", "" );
cont_medium.c | 636 | replace_string( bits[i], "$P", "" );
cont_medium.c | 642 | replace_string( bits[i], "$A", "" );
cont_medium.c | 643 | add_a( bits[i] );
cont_medium.c | 646 | implode( bits, " " );
cont_medium.c | 653 | long(words, dark);
cont_medium.c | 660 | make_medium_clone(number);
cont_medium.c | 661 | adjust_amount(-number);
cont_medium.c | 662 | set_no_join();
cont_medium.c | 664 | environment()->query_property( "medium dest" );
cont_medium.c | 666 | environment();
cont_medium.c | 667 | move(place);
cont_medium.c | 669 | reset_no_join();
cont_medium.c | 670 | call_out("merge", 1);
cont_medium.c | 679 | query_medium_alias();
cont_medium.c | 687 | this_object());
cont_medium.c | 691 | move("/room/rubbish");
cont_medium.c | 692 | adjust_amount(amount);
cont_medium.c | 707 | call_out("merge", 0);
cont_medium.c | 720 | clone_object( explode( file_name( this_object() ), "#" )[ 0 ] );
cont_medium.c | 721 | this_object()->query_dynamic_auto_load();
cont_medium.c | 722 | init_dynamic_arg( map );
cont_medium.c | 723 | this_object()->query_static_auto_load();
cont_medium.c | 725 | init_static_arg( map );
cont_medium.c | 728 | set_amount( number );
cont_medium.c | 734 | query_max_enchant() );
cont_medium.c | 751 | this_object();
cont_medium.c | 753 | m_indices( amount_types );
cont_medium.c | 755 | sizeof( sizes );
cont_medium.c | 761 | make_medium_clone( amount_types[ sizes[ i ] ][ 0 ] );
cont_medium.c | 762 | environment()->query_property( "medium dest" );
cont_medium.c | 764 | environment();
cont_medium.c | 766 | remove_call_out( "no_env_move" );
cont_medium.c | 767 | call_out( "dest_old_env", 1, environment() );
cont_medium.c | 769 | adjust_amount( -amount_types[ sizes[ i ] ][ 0 ] );
cont_medium.c | 770 | this_object()->set_no_env_move( place );
cont_medium.c | 771 | move( place );
cont_medium.c | 777 | this_object();
cont_medium.c | 779 | sizeof( sizes );
cont_medium.c | 787 | environment()->query_property( "medium dest" );
cont_medium.c | 789 | environment();
cont_medium.c | 791 | remove_call_out( "no_env_move" );
cont_medium.c | 792 | call_out( "dest_old_env", 1, environment() );
cont_medium.c | 794 | adjust_amount( -amount_types[ sizes[ i ] ][ 0 ] * args[ 0 ] );
cont_medium.c | 795 | this_object()->set_no_env_move( place );
cont_medium.c | 796 | move( place );
cont_medium.c | 812 | explode( arr[ 1 ], " " );
cont_medium.c | 815 | this_object();
cont_medium.c | 819 | this_object();
cont_medium.c | 825 | new_collective(amount - arr[0]);
cont_medium.c | 831 | cont_query_parse_id(args);
cont_medium.c | 833 | coll_query_parse_id(args);
cont_medium.c | 848 | is_matching_object(input, player, context);
cont_medium.c | 852 | return ({ result, ({ this_object() }) });
cont_medium.c | 884 | update_parse_match_context(context, (amount / make_amt), result);
cont_medium.c | 900 | make_medium_clone( make_amt );
cont_medium.c | 901 | environment()->query_property( "medium dest" );
cont_medium.c | 903 | environment();
cont_medium.c | 905 | remove_call_out( "no_env_move" );
cont_medium.c | 906 | call_out( "dest_old_env", 1, environment() );
cont_medium.c | 908 | adjust_amount( -make_amt );
cont_medium.c | 909 | this_object()->set_no_env_move( place );
cont_medium.c | 910 | move( place );
cont_medium.c | 911 | return ({ result, ({ medium }) });
cont_medium.c | 913 | return ({ result, ({ this_object() }) });
cont_medium.c | 926 | is_matching_object(input, viewer, context);
cont_medium.c | 936 | return ({ OBJ_PARSER_MATCH_PLURAL, ({ this_object() }) });
cont_medium.c | 963 | update_parse_match_context(context, to_int(amount / make_amt), ret);
cont_medium.c | 975 | new_collective(amount - num);
cont_medium.c | 976 | return ({ ret, ({ this_object() }) });
cont_medium.c | 978 | return ({ ret, ({ this_object() }) });
cont_medium.c | 985 | cont_parse_match_object(input, player, context);
cont_medium.c | 987 | coll_parse_match_object(input, player, context);
cont_medium.c | 1007 | clone_object( "/std/container" );
cont_medium.c | 1008 | add_property( "medium dest", dest );
cont_medium.c | 1009 | move( place );
cont_medium.c | 1010 | call_out( "no_env_move", 0, dest, place );
cont_medium.c | 1021 | move( dest );
cont_medium.c | 1023 | call_out( "dest_old_env", 1, place );
cont_medium.c | 1032 | dest_me();
cont_medium.c | 1051 | init_dynamic_arg( map[ "::" ]);
cont_medium.c | 1053 | set_amount( map[ "amount" ] );
cont_medium.c | 1057 | set_continuous();
cont_medium.c | 1059 | reset_continuous();
cont_medium.c | 1081 | int_query_static_auto_load();
cont_medium.c | 1090 | init_static_arg( map[ "::" ] );
cont_medium.c | 1098 | set_amount_types(map[ "amount_types" ]);
money.c | 19 | query_value_in(string where);
money.c | 22 | create();
money.c | 23 | set_name( "coin" );
money.c | 24 | add_alias( MONEY_ALIAS );
money.c | 25 | add_plural( "coins" );
money.c | 26 | set_main_plural( "coins" );
money.c | 27 | add_property( "determinate", "" );
money.c | 28 | add_property( "no one", 1 );
money.c | 29 | add_property( "money", 1 );
money.c | 45 | add_alias(MONEY_ALIAS);
money.c | 49 | init_dynamic_arg( map[ "::" ] );
money.c | 51 | if (sizeof(money_array) < 2)  call_out("dest_me", 0);
money.c | 54 | call_out( "check_adjectives", 0 );
money.c | 69 | tell_creator(DEBUGGER, "Called set_no_join\n");
money.c | 73 | call_out( "merge_coins", 0 );
money.c | 91 | sizeof( money_array );
money.c | 102 | set_weight( 1 + query_number_coins() / COIN_WEIGHT );
money.c | 106 | group_object() { return ( query_number_coins() > 1 );
money.c | 116 | set_adjectives( ({ }) );
money.c | 117 | set_aliases( ({ }) );
money.c | 118 | set_plurals( ({ }) );
money.c | 124 | tell_creator(DEBUGGER, "MOVING %O to rubbish room\n", this_object());
money.c | 127 | add_to_list(this_object());
money.c | 129 | move("/room/rubbish");
money.c | 134 | add_alias( MONEY_ALIAS );
money.c | 135 | add_plural( "coins" );
money.c | 136 | add_plural("money");
money.c | 137 | sizeof( money_array );
money.c | 138 | explode(lower_case(money_array[ i ]), " ");
money.c | 139 | if (sizeof(bits) >
money.c | 140 | add_adjective(bits[0..<2] );
money.c | 142 | add_adjective(bits);
money.c | 145 | add_adjective(({ "provincial", "default" }));
money.c | 146 | add_alias(MONEY_HAND->query_aliases_for(money_array[i]));
money.c | 147 | add_adjective(MONEY_HAND->query_adjectives_for(money_array[i]));
money.c | 148 | add_plural( (string)MONEY_HAND->query_plural_for( money_array[ i ] ) );
money.c | 150 | fixup_money_weight();
money.c | 157 | return ({ });
money.c | 165 | sizeof( amount );
money.c | 166 | adjust_money( amount[ i + 1 ], amount[ i ] );
money.c | 168 | fixup_money_weight();
money.c | 181 | delete( money_array, i, 2 );
money.c | 188 | call_out( "check_adjectives", 0 );
money.c | 190 | fixup_money_weight();
money.c | 201 | call_out( "check_adjectives", 0 );
money.c | 203 | fixup_money_weight();
money.c | 214 | sizeof(money_array);
money.c | 215 | query_origin_of(money_array[i]) });
money.c | 217 | allocate(sizeof(zones));
money.c | 218 | sizeof(zones);
money.c | 219 | query_value_in(zones[i]);
money.c | 220 | money_value_string(value, zones[i]);
money.c | 232 | sizeof( money_array );
money.c | 243 | query_short_for( money_array[ i ] ) });
money.c | 247 | query_main_plural_for( money_array[ i ] ) });
money.c | 259 | half_short( 0 );
money.c | 266 | query_multiple_short( retval );
money.c | 287 | sizeof( money_array );
money.c | 288 | query_details_for( money_array[ i ] );
money.c | 307 | long(word, dark);
money.c | 326 | tell_creator(DEBUGGER, "Creating new money object from %O\n", this_object());
money.c | 335 | get_money_ob();
money.c | 337 | clone_object(MONEY_OBJECT);
money.c | 339 | set_no_join();
money.c | 340 | adjust_money(number);
money.c | 341 | sizeof(number);
money.c | 343 | adjust_money(number);
money.c | 356 | get_money_ob();
money.c | 358 | clone_object(MONEY_OBJECT);
money.c | 360 | set_no_join();
money.c | 361 | adjust_money(number, type);
money.c | 362 | adjust_money(-number, type);
money.c | 367 | environment();
money.c | 369 | environment(env);
money.c | 370 | while (env && money->move(env) != MOVE_OK);
money.c | 371 | environment();
money.c | 373 | environment(per);
money.c | 379 | the_short() + ".\n");
money.c | 392 | if (_already_joined)   return this_object();
money.c | 394 | remove_alias( MONEY_ALIAS );
money.c | 396 | present( MONEY_ALIAS, environment() );
money.c | 398 | add_alias( MONEY_ALIAS );
money.c | 404 | add_to_list(this_object());
money.c | 406 | move("/room/rubbish");
money.c | 408 | adjust_money( money_array );
money.c | 409 | fixup_money_weight();
money.c | 417 | tell_creator(DEBUGGER, "Merging %O and %O\n", this_object(), money);
money.c | 424 | tell_creator(DEBUGGER, "Merge coins returning %O\n", this_object());
money.c | 426 | this_object();
money.c | 441 | move( dest, messin, messout );
money.c | 450 | reset_no_join();
money.c | 454 | merge_coins();
money.c | 470 | explode( lower_case( word ), " " ) - ({ "coin", "coins" });
money.c | 475 | sizeof( money_array );
money.c | 500 | debug_printf("%O", arr );
money.c | 506 | explode( arr[ 1 ], " " );
money.c | 509 | this_object();
money.c | 513 | this_object();
money.c | 515 | find_best_fit( arr[ 1 ] );
money.c | 519 | new_money_object( money_array[ i + 1 ], money_array[ i ] );
money.c | 522 | find_best_fit( arr[ 1 ] );
money.c | 530 | new_money_object( arr[ 0 ], money_array[ i ] );
money.c | 553 | is_matching_object(input, viewer, context);
money.c | 564 | return ({ OBJ_PARSER_MATCH_PLURAL, ({ this_object() }) });
money.c | 566 | if (sizeof(input) >
money.c | 567 | member_array(input[0], query_adjectives()) >
money.c | 571 | lower_case(input[0]);
money.c | 576 | sizeof(money_array);
money.c | 577 | explode(lower_case(money_array[i]), " ");
money.c | 582 | if (member_array(name, bits) >
money.c | 584 | query_origin_of(money_array[i]);
money.c | 601 | sizeof(matched[0]);
money.c | 608 | new_money_object(matched[0], "");
money.c | 612 | return ({ ret, ({ money }) });
money.c | 616 | find_best_fit(input);
money.c | 617 | printf("CHecking %O found %O\n", input, found);
money.c | 627 | printf("%O %O\n", num, ret);
money.c | 629 | update_parse_match_context(context, num, ret);
money.c | 634 | new_money_object( num, money_array[found]);
money.c | 638 | return ({ ret, ({ money }) });
money.c | 649 | return (int)MONEY_HAND->query_total_value( money_array, where );
money.c | 660 | member_array( type, money_array );
money.c | 669 | query_multiple_short(half_short(1)) }) });
cure_wand.c | 17 | create();
cure_wand.c | 18 | create();
cure_wand.c | 21 | this_object()->setup();
armour.c | 19 | create();
armour.c | 20 | create();
armour.c | 21 | create();
armour.c | 22 | add_alias( "armour" );
armour.c | 23 | add_plural( "armours" );
armour.c | 24 | add_help_file("armour");
armour.c | 26 | add_property( "shop type", "armoury" );
armour.c | 29 | this_object()->setup();
armour.c | 35 | long( word, dark ) + wearable::long( word, dark );
armour.c | 44 | query_ac( type, amount, zone );
armour.c | 52 | query_enchant() ) / query_max_enchant() + query_enchant();
armour.c | 57 | event( environment( worn_by ), "inform", message, "combat" );
armour.c | 60 | do_damage( type, amount );
armour.c | 61 | query_cond() ) / query_max_cond();
armour.c | 74 | random(10)));
armour.c | 76 | random(10)));
armour.c | 85 | set_max_cond( number );
armour.c | 86 | set_cond( number );
armour.c | 87 | set_lowest_cond( number );
armour.c | 91 | modify_value( object::query_value() );
armour.c | 94 | query_full_value() { return object::query_value();
armour.c | 103 | player_wear();
armour.c | 112 | drop(dest);
armour.c | 120 | move( dest, messin, messout );
armour.c | 122 | set_worn_by( 0 );
armour.c | 130 | set_worn_by( 0 );
armour.c | 131 | dest_me();
armour.c | 150 | query_static_auto_load();
armour.c | 158 | return ([ ]);
armour.c | 160 | int_query_static_auto_load();
armour.c | 170 | query_dynamic_auto_load();
armour.c | 181 | init_static_arg( map[ "::" ] );
armour.c | 182 | init_static_arg( map );
armour.c | 193 | sizeof(tmp);
armour.c | 194 | add_ac(tmp[0], tmp[1][1], tmp[1][0]);
armour.c | 199 | set_type( query_type() );
armour.c | 205 | clone_object( "/std/object" );
armour.c | 206 | set_name( "receipt" );
armour.c | 207 | set_short( "destructed item receipt" );
armour.c | 208 | add_adjective( ({ "destructed", "item" }) );
armour.c | 209 | set_long( "This seems to be a small piece of paper.\n" );
armour.c | 212 | move( environment() );
armour.c | 213 | set_weight( 1 );
armour.c | 214 | destruct( this_object() );
armour.c | 225 | init_dynamic_arg( map[ "::" ] );
armour.c | 226 | init_dynamic_arg( map );
armour.c | 230 | other_file( virt_name );
armour.c | 232 | add_property( VIRTUAL_NAME_PROP, new_name );
armour.c | 236 | call_out( "replace_me", 1 );
armour.c | 238 | add_missing( virt_name );
armour.c | 244 | new_data( virt_name );
armour.c | 246 | init_static_arg( stat_temp );
armour.c | 247 | add_property( "virtual time", time() );
cont_save.c | 25 | all_inventory( this_object() ) -> dest_me();
cont_save.c | 26 | if ( file_size( _save_file + ".o" ) >
cont_save.c | 27 | unguarded((: restore_object, _save_file :));
cont_save.c | 29 | set_player( thing );
cont_save.c | 32 | init_dynamic_arg( details, 0 );
cont_save.c | 42 | create();
cont_save.c | 51 | handle_restore_inventory(ob);
cont_save.c | 58 | query_long_details(arg, dark, looker);
cont_save.c | 68 | remove_call_out( "do_save" );
cont_save.c | 70 | call_out( "do_save", 1 );
cont_save.c | 72 | test_remove( thing, flag, dest );
cont_save.c | 74 | test_remove( thing, flag, dest );
cont_save.c | 83 | remove_call_out( "do_save" );
cont_save.c | 85 | call_out( "do_save", 1 );
cont_save.c | 89 | test_add( ob, flag );
cont_save.c | 102 | query_dynamic_auto_load();
cont_save.c | 103 | unguarded((: save_object, _save_file :));
cont_save.c | 110 | seteuid( geteuid( previous_object() ) );
cont_save.c | 121 | call_out( "do_load", 0, thing );
cont_save.c | 143 | can_find_match_recurse_into(looker);
bottle.c | 33 | set_max_volume(number*4);
bottle.c | 36 | set_leak_rate( 0 );
bottle.c | 37 | set_value( to_int(mass * 25 + random( mass * 10 )) );
bottle.c | 38 | set_weight( to_int(mass + random( mass * 10 ) / 10 ));
bottle.c | 39 | set_max_weight( to_int(mass * 2 ));
bottle.c | 40 | add_property( "fragile", to_int(mass * 20 + random( mass * 5 )) );
bottle.c | 45 | set_length( 2 );
bottle.c | 46 | set_width( 1 );
bottle.c | 51 | set_length( 12 );
bottle.c | 52 | set_width( 6 );
bottle.c | 57 | set_length( 24 );
bottle.c | 58 | set_width( 12 );
bottle.c | 63 | set_length( 48 );
bottle.c | 64 | set_width( 24 );
bottle.c | 69 | set_length( 88 );
bottle.c | 70 | set_width( 48 );
bottle.c | 72 | set_name( lower_case( noun ) );
bottle.c | 73 | set_short( adjective +" "+ glass +" "+ noun );
bottle.c | 74 | set_long( "This is a "+ adjective +" "+ glass +" glass "+ noun +".\n" );
bottle.c | 75 | add_alias( "bottle" );
bottle.c | 76 | add_adjective( ({ adjective, glass }) );
bottle.c | 77 | set_main_plural( adjective +" "+ glass +" "+ noun +"s" );
bottle.c | 78 | add_plural( lower_case( noun ) +"s" );
bottle.c | 79 | set_material( ({ "glass" }) );
bottle.c | 83 | query_number() { return (int)query_property( "number" );
bottle.c | 100 | init_static_arg( map["::"] );
bottle.c | 107 | int_query_static_auto_load();
bottle.c | 108 | return ([ ]);
food.c | 80 | to_float(DEFAULT_DECAY) / to_float(6 * TIME_OUT);
food.c | 103 | do_cut(int num);
food.c | 104 | do_eat(int no_mess);
food.c | 106 | do_mince();
food.c | 107 | set_decay_speed(int decay);
food.c | 108 | check_for_container();
food.c | 113 | create();
food.c | 115 | reset_continuous();
food.c | 117 | set_decay_speed(DEFAULT_DECAY);
food.c | 118 | add_help_file("food");
food.c | 120 | this_object()->setup();
food.c | 164 | set_continuous();
food.c | 167 | environment()->calc_liquid();
food.c | 169 | set_decay_speed(0);
food.c | 182 | reset_continuous();
food.c | 185 | environment()->calc_liquid();
food.c | 186 | set_decay_speed(DEFAULT_DECAY);
food.c | 187 | to_float(DEFAULT_DECAY) / to_float(6 * TIME_OUT);
food.c | 205 | add_command("rub", "<direct:object> <preposition> <indirect:living>");
food.c | 206 | add_command("apply", "<direct:object> <preposition> <indirect:living>");
food.c | 209 | add_command("drink", "<direct:object>");
food.c | 210 | add_command("quaff", "<direct:object>");
food.c | 214 | add_command("eat", "<direct:object>", (: do_eat(0) :));
food.c | 217 | do_cut($4[1]) :));
food.c | 218 | add_command("cut", "<direct:object>", (: do_cut() :));
food.c | 219 | add_command("slice", "<direct:object>", (: do_cut() :));
food.c | 220 | add_command("mince", "<direct:object>", (: do_mince() :));
food.c | 398 | clone_object("/obj/food/apple.food");
food.c | 399 | set_eat_object(this_object());
food.c | 400 | set_eat_func("eat_apple");
food.c | 442 | add_succeeded_mess(eat_mess, ({ }));
food.c | 508 | set_piece_short("slice");
food.c | 528 | set_piece_plural("slices");
food.c | 549 | set_piece_substance("goat cheese");
food.c | 596 | set_decay_speed(1800);
food.c | 599 | set_decay_speed(0);
food.c | 605 | remove_bit(this_object());
food.c | 609 | to_float(decay) / to_float(6 * TIME_OUT);
food.c | 610 | to_int(_decay_level * _divisor / tmp);
food.c | 611 | add_bit(this_object());
food.c | 622 | remove_bit(this_object());
food.c | 632 | remove_adjective( "fresh" );
food.c | 637 | capitalize(the_short()) + " crumbles to dust.\n");
food.c | 638 | move("/room/rubbish");
food.c | 689 | short(dark);
food.c | 706 | query_weight();
food.c | 772 | if(query_collective() && query_amount() >
food.c | 778 | if(query_collective() && query_amount() >
food.c | 784 | if(query_collective() && query_amount() >
food.c | 790 | if(query_collective() && query_amount() >
food.c | 796 | if(query_collective() && query_amount() >
food.c | 802 | if(query_collective() && query_amount() >
food.c | 819 | long(words, dark);
food.c | 825 | query_long_eat_level();
food.c | 828 | query_long_decay_level();
food.c | 832 | if(query_collective() && query_amount() >
food.c | 841 | if(query_collective() && query_amount() >
food.c | 880 | copy( _eat_effects );
food.c | 932 | add_eat_effect(name, number);
food.c | 954 | m_delete(_eat_effects, word);
food.c | 1056 | m_delete(_external_effects, word);
food.c | 1096 | return (_splashable && _liquid);
food.c | 1098 | return (_splashable && _liquid && !(pk_check(splasher, splashee)));
food.c | 1137 | return (_applicable && !(pk_check(applier, appliee)));
food.c | 1153 | query_amount();
food.c | 1154 | query_amount();
food.c | 1158 | set_splashable();
food.c | 1160 | set_applicable();
food.c | 1162 | set_external_pk_check();
food.c | 1163 | query_eat_effects();
food.c | 1167 | m_indices(_eat_effects);
food.c | 1168 | sizeof(words);
food.c | 1176 | m_indices(new_effects);
food.c | 1177 | sizeof(words);
food.c | 1182 | query_external_effects();
food.c | 1186 | m_indices(_external_effects);
food.c | 1187 | sizeof(words);
food.c | 1195 | m_indices(new_effects);
food.c | 1196 | sizeof(words);
food.c | 1220 | m_indices(_external_effects);
food.c | 1223 | m_indices(_eat_effects);
food.c | 1227 | query_amount();
food.c | 1232 | query_amount();
food.c | 1237 | adjust_volume(D_DRINK, (50 * numerator) / denominator);
food.c | 1239 | adjust_volume(D_FOOD, (50 * numerator) / denominator);
food.c | 1245 | sizeof(words);
food.c | 1263 | add_effect(words[i], wholes);
food.c | 1266 | adjust_amount(-amount);
food.c | 1271 | adjust_volume(D_FOOD, 50 * _weight_per_bite);
food.c | 1276 | sizeof(words);
food.c | 1293 | adjust_volume(D_FOOD, 50 * weight);
food.c | 1297 | sizeof(words);
food.c | 1317 | call_other(_eat_object, _eat_func, this_object(), consumer);
food.c | 1319 | call_other(this_object(), _eat_func, this_object(), consumer);
food.c | 1340 | add_succeeded_mess(_eat_mess, ({ }));
food.c | 1342 | move("/room/rubbish");
food.c | 1350 | add_succeeded_mess(_eat_last_mess, ({ }));
food.c | 1352 | add_succeeded_mess("$N $V the last of $D.\n", ({ }));
food.c | 1356 | add_succeeded_mess(_eat_mess, ({ }));
food.c | 1361 | amount_size() ), ({ }));
food.c | 1369 | move("/room/rubbish");
food.c | 1373 | add_succeeded_mess(_eat_piece_mess, ({ }));
food.c | 1375 | add_succeeded_mess("$N $V a piece of $D.\n", ({ }));
food.c | 1380 | consume(this_player(), 0);
food.c | 1398 | query_attack_data();
food.c | 1399 | sizeof(data);
food.c | 1433 | add_failed_mess("You cannot $V $D.\n");
food.c | 1438 | this_player()->query_holding();
food.c | 1439 | sizeof(obs);
food.c | 1441 | if (!with || (with && with->query_weight() >
food.c | 1448 | add_failed_mess("You have to be holding a sharp object to $V $D.\n");
food.c | 1456 | return (do_mince());
food.c | 1459 | add_failed_mess("$D cannot be cut up.\n");
food.c | 1466 | add_failed_mess("$D cannot be cut up.\n");
food.c | 1468 | add_failed_mess("You can't $V $D into that many pieces.\n");
food.c | 1473 | file_name(this_object());
food.c | 1474 | sscanf(name, "%s#%*d", name);
food.c | 1480 | clone_object(name);
food.c | 1481 | init_static_arg(query_static_auto_load());
food.c | 1482 | init_dynamic_arg(query_dynamic_auto_load());
food.c | 1483 | set_weight(size_of_each);
food.c | 1484 | set_value(0);
food.c | 1487 | query_weight());
food.c | 1489 | this_player()->convert_message(a_short()));
food.c | 1498 | set_long(_piece_desc);
food.c | 1508 | word_ordinal(portion_of_whole);
food.c | 1525 | query_property("whole:short");
food.c | 1533 | set_bites_gone(gone);
food.c | 1539 | add_alias(_piece_short || temp_short);
food.c | 1540 | add_plural(_piece_plural || temp_plural);
food.c | 1542 | explode(bing->query_short(), " ");
food.c | 1543 | sizeof(exploded_short);
food.c | 1544 | set_name(exploded_short[j - 1]);
food.c | 1546 | add_adjective(exploded_short[k]);
food.c | 1549 | set_in_pieces(1);
food.c | 1551 | move(environment(this_player()));
food.c | 1555 | move("/room/rubbish");
food.c | 1568 | poss_short()) }));
food.c | 1580 | poss_short()) }));
food.c | 1595 | add_failed_mess("You cannot $V $D.\n");
food.c | 1599 | this_player()->query_holding();
food.c | 1600 | sizeof(obs);
food.c | 1602 | if (!with || (with && with->query_weight() >
food.c | 1608 | add_failed_mess("You have to be holding a sharp object to $V " "$D.\n");
food.c | 1612 | transform(this_object(), "slice");
food.c | 1618 | add_failed_mess("$D cannot be cut up any further.\n");
food.c | 1623 | return (do_cut(rem_pieces));
food.c | 1628 | this_object()->move("/room/rubbish");
food.c | 1632 | the_short() + ".\n");
food.c | 1635 | the_short() + ".\n");
food.c | 1636 | move(environment(this_player()));
food.c | 1658 | move("/room/rubbish");
food.c | 1663 | amount_size() + " of $D.\n", ({ }));
food.c | 1664 | consume(this_player(), 0);
food.c | 1684 | move("/room/rubbish");
food.c | 1693 | consume(this_player(), query_amount() * 6 / 10, "splash");
food.c | 1694 | consume(this_player(), query_amount() * 4 / 10);
food.c | 1708 | if (sizeof(things) >
food.c | 1709 | add_failed_mess("You must $V $D to one person alone.\n", ({ }));
food.c | 1713 | add_failed_mess("You cannot $V $D to anybody.\n");
food.c | 1724 | consume(things[0], 0, "apply");
food.c | 1734 | if (sizeof(things) >
food.c | 1735 | add_failed_mess("You must $V $D on one person alone.\n", ({ }));
food.c | 1739 | add_failed_mess("You cannot $V $D on anybody.\n");
food.c | 1751 | consume(things[0], 0, "apply");
food.c | 1757 | if (sizeof(things) >
food.c | 1758 | add_failed_mess("You must $V $D on one person alone.\n", ({ }));
food.c | 1762 | add_failed_mess("You cannot $V $D on anybody.\n", ({ }));
food.c | 1773 | consume(things[0], 0, "splash");
food.c | 1802 | int_query_static_auto_load();
food.c | 1814 | init_static_arg(map["::"]);
food.c | 1857 | init_dynamic_arg(map["::"]);
food.c | 1878 | set_long(_piece_desc);
food.c | 1880 | set_decay_speed(map["decay speed"]);
food.c | 1886 | init_virtual_object();
food.c | 1908 | m_indices(_eat_effects);
food.c | 1909 | sizeof(words);
food.c | 1920 | keys(_external_effects);
food.c | 1921 | sizeof(words);
food.c | 1953 | debug_printf("Oops, failed to move us to the rubbish room.\n");
food.c | 1964 | move(dest, mess1, mess2);
food.c | 1966 | move_check_for_container();
food.c | 1983 | to_int( _decay_level / _divisor ) >
food.c | 1995 | query_adjectives() + ({ "rotten" });
food.c | 1997 | query_adjectives();
food.c | 2025 | remove_bit(this_object());
food.c | 2026 | set_main_plural( "cured " + query_plural() );
food.c | 2027 | set_short( "cured " + query_short());
food.c | 2028 | add_adjective("cured");
food.c | 2029 | remove_adjective("fresh");
food.c | 2033 | merge();
food.c | 2060 | remove_bit( this_object() );
food.c | 2061 | set_main_plural("dried " + query_plural(0));
food.c | 2062 | set_short( "dried " + query_short());
food.c | 2063 | add_adjective("dried");
food.c | 2064 | remove_adjective("fresh");
food.c | 2069 | set_weight( new_weight );
food.c | 2072 | set_weight( 1 );
food.c | 2076 | merge();
food.c | 2101 | to_int(ob->query_decay_level() / ob->query_decay_divisor()));
clothing.c | 24 | create();
clothing.c | 25 | create();
clothing.c | 26 | create();
clothing.c | 27 | set_stuck(1);
clothing.c | 28 | set_can_export_inventory();
clothing.c | 31 | add_alias( "clothing" );
clothing.c | 32 | add_plural( "clothes" );
clothing.c | 33 | add_immune_to( "blunt" );
clothing.c | 34 | add_help_file("clothing");
clothing.c | 35 | set_opaque();
clothing.c | 36 | set_open();
clothing.c | 38 | add_property( "shop type", "haberdashery" );
clothing.c | 42 | this_object()->setup();
clothing.c | 69 | add_adjective(({ "pair", "of" }));
clothing.c | 80 | long( word, dark );
clothing.c | 83 | sizeof( pockets );
clothing.c | 86 | m_indices( types );
clothing.c | 87 | sizeof( sizes );
clothing.c | 92 | query_contents( "It contains: " );
clothing.c | 93 | long_status();
clothing.c | 95 | long( word, dark );
clothing.c | 100 | pretty_short( thing );
clothing.c | 101 | short_status();
clothing.c | 104 | sizeof( pshort );
clothing.c | 116 | pretty_plural( thing );
clothing.c | 117 | short_status();
clothing.c | 120 | sizeof( plural );
clothing.c | 163 | sizeof( pockets );
clothing.c | 164 | set_max_weight( query_max_weight() - pockets[ i+1 ] );
clothing.c | 220 | set_max_weight(query_max_weight() + amount);
clothing.c | 237 | sizeof( pockets );
clothing.c | 243 | if ( (int)thing->query_complete_weight() >
clothing.c | 245 | the_short() +"'s pockets.\n" );
clothing.c | 247 | test_add(thing, flag);
clothing.c | 255 | can_find_match_recurse_into(looker);
clothing.c | 260 | do_damage( type, amount );
clothing.c | 269 | set_max_cond( number );
clothing.c | 270 | set_cond( number );
clothing.c | 271 | set_lowest_cond( number );
clothing.c | 276 | modify_value( container::query_value() );
clothing.c | 280 | query_full_value() { return container::query_value();
clothing.c | 289 | drop(stuff);
clothing.c | 297 | environment();
clothing.c | 298 | move( dest, messin, messout );
clothing.c | 300 | set_worn_by( 0 );
clothing.c | 302 | remove_inventory_container(this_object());
clothing.c | 305 | environment()->add_inventory_container(this_object());
clothing.c | 316 | parse_command_adjectiv_id_list();
clothing.c | 322 | set_worn_by( 0 );
clothing.c | 323 | dest_me();
clothing.c | 332 | a_short() +"." );
clothing.c | 335 | a_short() +"." );
clothing.c | 337 | break_me();
clothing.c | 344 | stats() + wearable::stats();
clothing.c | 345 | sizeof( pockets );
clothing.c | 373 | return ([ ]);
clothing.c | 375 | int_query_static_auto_load();
clothing.c | 394 | init_static_arg( map[ "::" ] );
clothing.c | 397 | init_static_arg( map[ "wear" ] );
clothing.c | 411 | set_transparent();
clothing.c | 413 | set_opaque();
clothing.c | 417 | set_difficulty(map["difficulty"]);
clothing.c | 420 | set_key(map["key"]);
clothing.c | 423 | set_open_trap(map["trap open ob"], map["trap open func"]);
clothing.c | 426 | set_lock_trap(map["trap lock ob"], map["trap lock func"]);
clothing.c | 429 | set_stuck(map["stuck"]);
clothing.c | 437 | clone_object( "/std/object" );
clothing.c | 438 | set_name( "receipt" );
clothing.c | 439 | set_short( "destructed item receipt" );
clothing.c | 440 | add_adjective( ({ "destructed", "item" }) );
clothing.c | 441 | set_long( "This seems to be a small piece of paper.\n" );
clothing.c | 444 | move( environment() );
clothing.c | 445 | set_weight( 1 );
clothing.c | 446 | destruct( this_object() );
clothing.c | 455 | init_dynamic_arg( map[ "::" ], ob );
clothing.c | 458 | init_dynamic_arg( map[ "wear" ], ob );
clothing.c | 463 | set_locked();
clothing.c | 465 | set_unlocked();
clothing.c | 470 | set_closed();
clothing.c | 472 | set_open();
clothing.c | 478 | other_file( virt_name );
clothing.c | 480 | add_property( VIRTUAL_NAME_PROP, new_name );
clothing.c | 484 | call_out( "replace_me", 1 );
clothing.c | 486 | add_missing( virt_name );
clothing.c | 493 | new_data( virt_name );
clothing.c | 495 | init_static_arg( stat_temp );
clothing.c | 496 | add_property( "virtual time", time() );
key.c | 22 | remove_adjective(type);
key.c | 24 | add_adjective(type);
key.c | 25 | set_main_plural(type + " keys");
key.c | 26 | set_short(type + " key");
key.c | 33 | create();
key.c | 34 | set_name("key");
key.c | 35 | set_main_plural("normal keys");
key.c | 36 | add_plural("keys");
key.c | 38 | set_short(query_type() + " key");
key.c | 39 | set_long("A key.  Wonder where it fits?\n");
key.c | 40 | set_weight(1);
key.c | 41 | adjust_money(1, "brass");
potion.c | 39 | allocate_mapping(1);
potion.c | 93 | sizeof(s));
potion.c | 97 | keys(skills);
potion.c | 111 | sizeof(skill_str);
potion.c | 131 | write("sum = " + sum + "\n");
potion.c | 137 | clone_object(REAGENTS+"brew_reagent.ob");
potion.c | 138 | set_medium_alias(backfire_alias);
potion.c | 139 | set_amount(sum*rel_strength/min_level);
potion.c | 145 | sizeof(skill_str);
potion.c | 148 | this_player()->add_skill_level(s, 1, 0);
potion.c | 152 | clone_object(REAGENTS+"brew_reagent.ob");
potion.c | 153 | set_medium_alias(reagent_alias);
potion.c | 154 | set_amount(sum*rel_strength/min_level);
rust_fungus.c | 4 | set_adjs( "rust" );
rust_fungus.c | 5 | set_type( "fungus" );
rust_fungus.c | 6 | set_extra( "It looks like a lump of rust, only soft and a bit squishy." );
rust_fungus.c | 19 | random( 1000 ) );
rust_fungus.c | 20 | next_stage();
glow_toadstool.c | 4 | set_adjs( "yellow spotted" );
glow_toadstool.c | 5 | set_type( "toadstool" );
glow_toadstool.c | 6 | set_extra( 0 );
glow_toadstool.c | 13 | set_light( 5 );
glow_toadstool.c | 14 | set_long( query_long() +"The yellow spots are glowing.\n" );
glow_toadstool.c | 16 | next_stage();
fire_mushroom.c | 4 | set_adjs( "red stalked" );
fire_mushroom.c | 5 | set_type( "mushroom" );
fire_mushroom.c | 6 | set_extra( "It seems to be gently smoking." );
fire_mushroom.c | 20 | random( 11 ) );
fire_mushroom.c | 21 | next_stage();
fire_mushroom.c | 28 | query_eat_effects();
fire_mushroom.c | 32 | this_object()->query_weight();
magic_mushroom.c | 4 | set_adjs( "checkered" );
magic_mushroom.c | 5 | set_type( "mushroom" );
magic_mushroom.c | 6 | set_extra( "The checks are nice pastel shades of peach and mauve." );
magic_mushroom.c | 20 | random( 150 ) );
magic_mushroom.c | 21 | next_stage();
blue_nightcap.c | 4 | set_adjs( "blue capped" );
blue_nightcap.c | 5 | set_type( "mushroom" );
blue_nightcap.c | 6 | set_extra( "The shape of it reminds you of someone wearing a nightcap." );
blue_nightcap.c | 12 | random( 60 ) );
blue_nightcap.c | 13 | next_stage();
.generic_liquid.ob_virtual_.c | 3 | dest_me() { destruct( this_object() );
.generic_liquid.ob_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.generic_liquid.ob_virtual_.c | 13 | create_virtual_object( "/obj/food.c", 1 );
.generic_liquid.ob_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/reagents/generic_liquid.ob#1" );
.generic_liquid.ob_virtual_.c | 15 | call_other( clone, "add_adjective",  "some"  );
.generic_liquid.ob_virtual_.c | 16 | call_other( clone, "add_alias",  "liquid"  );
.generic_liquid.ob_virtual_.c | 17 | call_other( clone, "set_amount_types",  ([ "drop": ({ 1, "drops" }),              "teaspoon": ({ 20, "teaspoons" }),              "tablespoon": ({ 60, "tablespoons" }),              "ounce": ({ 120, "ounces" }),              "cup": ({ 960, "cups" }),              "pint": ({ 2400, "pints" }),                          "quart": ({ 4800, "quarts" }),                          "gallon": ({ 19200, "gallons" }) ])  );
.generic_liquid.ob_virtual_.c | 18 | call_other( clone, "add_adjective",  ({ "drop", "drops", "teaspoon", "teaspoons", "tablespoon",                "tablespoons", "ounce", "ounces", "cup", "cups", "pint",                "pints", "quart", "quarts", "gallon", "gallons", "of" })  );
.generic_liquid.ob_virtual_.c | 19 | call_other( clone, "set_pile_types",  ({ 50, "small", 100, "medium", "large" })  );
.generic_liquid.ob_virtual_.c | 20 | call_other( clone, "set_continuous",   );
.generic_liquid.ob_virtual_.c | 21 | call_other( clone, "set_liquid",   );
.generic_liquid.ob_virtual_.c | 22 | call_other( clone, "add_property",  "determinate", "" );
demon.c | 25 | set_name("demon");
demon.c | 27 | set_short("origami demon");
demon.c | 29 | add_adjective("tiny");
demon.c | 30 | add_adjective("pink");
demon.c | 31 | add_adjective("paper");
demon.c | 32 | add_adjective("origami");
demon.c | 33 | set_main_plural("origami demons");
demon.c | 34 | add_plural("demons");
demon.c | 39 | set_race("demon");
demon.c | 40 | set_level(1);
demon.c | 46 | find_living(lower_case(person_name));
demon.c | 56 | dest_me();
demon.c | 63 | move(environment(owner));
demon.c | 64 | tell_room(environment(), "The origami demon rustles in.\n" );
demon.c | 65 | do_command("'Hey "+owner_name+"! I hadn't finished!\n");
demon.c | 70 | lower_case(owner_name) }));
demon.c | 72 | set_heart_beat(0);
demon.c | 73 | dest_me();
demon.c | 76 | do_command(line_to_act);
demon.c | 79 | call_out("do_the_act", 2, i);
demon.c | 90 | this_object()->stop_fight (thing);
demon.c | 91 | stop_fight (this_object());
card.c | 22 | setup_card(string name, string language, int status);
card.c | 38 | init_static_arg( map[ "::" ] );
card.c | 60 | init_query_static_auto_load();
card.c | 76 | query_read_mess();
card.c | 103 | set_short(owner_name + "'s birthday card");
card.c | 104 | add_adjective( ({ owner_name, owner_name + "'s"}) );
card.c | 106 | get_dir("/w/");
card.c | 109 | member_array(lower_case(owner_name), wizards);
card.c | 114 | sizeof(wizards);
card.c | 117 | capitalize(wizards[i]);
card.c | 130 | sizeof(wizards);
card.c | 132 | capitalize(wizards[i]);
card.c | 140 | add_read_mess(list, "various hands", owner_language, 1);
card.c | 147 | set_name("card");
card.c | 148 | set_short("birthday card");
card.c | 149 | add_adjective("birthday");
card.c | 150 | set_main_plural("birthday cards");
card.c | 151 | add_property("determinate", "");
card.c | 152 | add_property("no recycling", 1);
card.c | 153 | set_closed_mesg();
card.c | 156 | setup_card(owner_name, owner_language, creator_status);
card.c | 163 | this_player()->add_command("open", this_object());
card.c | 164 | this_player()->add_command("close", this_object());
card.c | 173 | write("It is already open.\n");
card.c | 192 | set_open_mesg();
card.c | 197 | clone_object(DEMON);
card.c | 198 | move(environment(this_player()));
card.c | 199 | set_owner(owner_name);
card.c | 200 | add_language(owner_language);
card.c | 201 | set_language(owner_language);
card.c | 213 | call_out("start_demon", 2, demon);
card.c | 219 | do_the_act(0);
card.c | 226 | write("It is not open for you to close!\n");
card.c | 230 | set_closed_mesg();
exa3.c | 12 | set_short("third simple room");
exa3.c | 17 | set_light(90);
exa3.c | 35 | add_exit("west", ROOM + "exa2", "door");
exa3.c | 36 | add_exit("east", ROOM + "exa4", "door");
exa3.c | 38 | set_zone("examples");
exa3.c | 66 | clone_object("/std/object");
exa3.c | 75 | set_name("bar");
exa3.c | 80 | add_adjective("copper");
exa3.c | 84 | set_main_plural("copper bars");
exa3.c | 90 | add_plural("bars");
exa3.c | 100 | set_short("copper bar");
exa3.c | 108 | set_weight(80);
exa3.c | 115 | set_value(2000);
exa3.c | 120 | move(this_object());
response_mon.c | 68 | set_name("guard");
response_mon.c | 69 | add_adjective(({ "big", "gate" }));
response_mon.c | 70 | set_short("Big gate guard");
response_mon.c | 73 | set_race("human");
response_mon.c | 74 | set_class("fighter");
response_mon.c | 75 | set_level(45);
response_mon.c | 76 | set_al(250);
response_mon.c | 77 | set_gender(1);
response_mon.c | 99 | clone_object("/obj/weapons/axe.wep");
response_mon.c | 100 | move(this_object());
response_mon.c | 101 | do_equip();
response_mon.c | 105 | init_command("unhold axe");
response_mon.c | 109 | init_command("hold axe");
response_mon.c | 113 | command("'Very well, "+tpl->query_cap_name()+ " I will tell you a story.\n");
response_mon.c | 114 | set_stop_responding(1);
response_mon.c | 115 | call_out("tell_story",2,0);
response_mon.c | 119 | remove_call_out("tell_story");
response_mon.c | 121 | set_stop_responding(0);
response_mon.c | 124 | command("'"+tale[arg]);
response_mon.c | 125 | call_out("tell_story",2,arg+1);
exa2.c | 12 | set_short("second simple room");
exa2.c | 18 | set_light(90);
exa2.c | 50 | add_exit("west", ROOM + "exa1", "door");
exa2.c | 51 | add_exit("east", ROOM + "exa3", "door");
exa2.c | 53 | set_zone("examples");
exa1.c | 34 | set_short("first simple room");
exa1.c | 54 | set_light(90);
exa1.c | 74 | add_exit("east", ROOM + "exa2", "door");
exa1.c | 80 | set_zone("examples");
.belt_loop.sca_virtual_.c | 3 | dest_me() { destruct( this_object() );
.belt_loop.sca_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.belt_loop.sca_virtual_.c | 13 | create_virtual_object( "/obj/scabbard.c", 1 );
.belt_loop.sca_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/scabbards/belt_loop.sca#1" );
.belt_loop.sca_virtual_.c | 15 | call_other( clone, "set_name", "loop"  );
.belt_loop.sca_virtual_.c | 16 | call_other( clone, "add_adjective", ({ "belt", "belt loop" })  );
.belt_loop.sca_virtual_.c | 17 | call_other( clone, "add_alias", "belt loop"  );
.belt_loop.sca_virtual_.c | 18 | call_other( clone, "set_short", "belt loop"  );
.belt_loop.sca_virtual_.c | 19 | call_other( clone, "set_long", "This loop is made from the finest leather, designed to "         "hold axes or hammers safely.\n"  );
.belt_loop.sca_virtual_.c | 20 | call_other( clone, "set_weight", 8  );
.belt_loop.sca_virtual_.c | 21 | call_other( clone, "set_value", 800  );
.belt_loop.sca_virtual_.c | 22 | call_other( clone, "set_type", "belt scabbard"  );
.belt_loop.sca_virtual_.c | 23 | call_other( clone, "add_property", "no recycling", 1  );
.belt_loop.sca_virtual_.c | 24 | call_other( clone, "setup_scabbard", 10000  );
.belt_loop.sca_virtual_.c | 25 | call_other( clone, "set_damage_chance", 15  );
.belt_loop.sca_virtual_.c | 26 | call_other( clone, "set_types", ({ "axe","hammer" }) );
.dagger_scabbard.sca_virtual_.c | 3 | dest_me() { destruct( this_object() );
.dagger_scabbard.sca_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.dagger_scabbard.sca_virtual_.c | 13 | create_virtual_object( "/obj/scabbard.c", 1 );
.dagger_scabbard.sca_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/scabbards/dagger_scabbard.sca#1" );
.dagger_scabbard.sca_virtual_.c | 15 | call_other( clone, "set_name", "scabbard"  );
.dagger_scabbard.sca_virtual_.c | 16 | call_other( clone, "add_adjective", "dagger"  );
.dagger_scabbard.sca_virtual_.c | 17 | call_other( clone, "set_short", "dagger scabbard"  );
.dagger_scabbard.sca_virtual_.c | 18 | call_other( clone, "set_long", "Similar in design to the scabbard made for longer bladed weapons."         "  In fact you could say they were the same, except for the size.\n"  );
.dagger_scabbard.sca_virtual_.c | 19 | call_other( clone, "set_weight", 3  );
.dagger_scabbard.sca_virtual_.c | 20 | call_other( clone, "set_value", 30  );
.dagger_scabbard.sca_virtual_.c | 21 | call_other( clone, "set_type", "small scabbard"  );
.dagger_scabbard.sca_virtual_.c | 22 | call_other( clone, "setup_scabbard", 10000  );
.dagger_scabbard.sca_virtual_.c | 23 | call_other( clone, "set_damage_chance", 15  );
.dagger_scabbard.sca_virtual_.c | 24 | call_other( clone, "set_types", ({ "dagger", "knife" }) );
sand.c | 9 | set_name("sand");
sand.c | 10 | set_short("sand");
sand.c | 11 | set_main_plural( "sand" );
sand.c | 16 | add_property("determinate", "some ");
sand.c | 17 | set_weight_unit( ({ 1, 1000 }) );
sand.c | 18 | set_value_scale( 0.00001 );
sand.c | 19 | set_medium_alias("BeachAndDesertSand");
sand.c | 20 | set_pile_name("pile");
sand.c | 21 | set_continuous();
sand.c | 37 | set_amount(12000);
team.c | 46 | check_group(string g_name);
team.c | 47 | disband_group(string g_name, string p_name);
team.c | 48 | tidy_members(string g_name);
team.c | 58 | destruct(this_object());
team.c | 79 | map_delete(members, p_name);
team.c | 86 | disband_group(g_name, p_name);
team.c | 90 | ctime(time()), p_name, g_name));
team.c | 96 | ctime(time()), p_name, g_name));
team.c | 99 | member_array(0, record->members), 1);
team.c | 119 | new(class group);
team.c | 129 | set_title( "TEAM", "Team Leader of "+ g_name );
team.c | 130 | clone_object( SHADOW )->setup_shadow( leader );
team.c | 134 | query_name()));
team.c | 156 | map_delete( members, player->query_name() );
team.c | 157 | remove_title( "TEAM" );
team.c | 158 | destruct_team_shadow();
team.c | 162 | map_delete(groups, g_name);
team.c | 165 | log_file(LOG_FILE, sprintf("%s %s disbanded\n", ctime(time()), g_name));
team.c | 190 | set_title( "TEAM", "Team Member of "+ g_name );
team.c | 191 | clone_object( SHADOW )->setup_shadow( player );
team.c | 195 | query_name()));
team.c | 211 | map_delete(members, player->query_name());
team.c | 213 | remove_title( "TEAM" );
team.c | 214 | destruct_team_shadow();
team.c | 218 | query_name()));
team.c | 231 | member_array(player, record->members), 1);
team.c | 271 | tidy_members(g_name);
team.c | 336 | tidy_members(g_name);
team.c | 340 | if(sizeof(record->members) >
team.c | 359 | return (record->locked);
team.c | 390 | check_group(frog);
team.c | 392 | keys(groups);
team.c | 409 | map_delete(members, member->query_name());
team.c | 412 | remove_protector(person);
team.c | 415 | remove_follower(person);
team.c | 420 | map_delete(groups, g_name);
team.c | 430 | disband_group(g_name, "Your leader");
cmr_library.c | 47 | if ( file_size( RESTORE_PATH + pname +".o" ) >
cmr_library.c | 48 | unguarded((: restore_object, RESTORE_PATH + pname :));
cmr_library.c | 50 | init_data( pname );
cmr_library.c | 61 | unguarded((: save_object, RESTORE_PATH + word :));
cmr_library.c | 71 | get_data_file( pname );
cmr_library.c | 73 | return ({ });
cmr_library.c | 86 | get_data_file( pname );
cmr_library.c | 88 | return ( member_array( material, materials ) != -1 );
cmr_library.c | 100 | get_data_file( pname );
cmr_library.c | 105 | save_data_file( player_name );
garbage.c | 84 | restore_object(SAVE_FILE);
garbage.c | 89 | save_object(SAVE_FILE);
garbage.c | 98 | save_object(SAVE_FILE);
garbage.c | 102 | rusage();
garbage.c | 106 | uptime();
garbage.c | 107 | call_out("housekeeping", 300);
garbage.c | 111 | real_time() - time();
garbage.c | 120 | master()->crash("Too much lag to recover");
garbage.c | 121 | shutdown(0);
garbage.c | 133 | sizeof(users());
garbage.c | 138 | call_out(func, 1, func);
garbage.c | 140 | call_out(tmp, 1, tmp);
garbage.c | 161 | rusage();
garbage.c | 173 | seconds (max) "+burstlag+" seconds (burst)", "cpu");
garbage.c | 179 | uptime() - uptime_prev)));
garbage.c | 186 | if(uptime() >
garbage.c | 191 | if((uptime() >
garbage.c | 207 | shut(10);
garbage.c | 214 | dumpallobj();
garbage.c | 217 | unguarded((:save_object(SAVE_FILE):));
garbage.c | 227 | set_check_limit(limit);
garbage.c | 231 | uptime();
garbage.c | 248 | real_time();
garbage.c | 255 | query_last_visited() > (time() - ROOM_STABLE_DELAY):));
garbage.c | 257 | for(i=(times_run % 2);
garbage.c | 257 | sizeof(_rooms);
garbage.c | 258 | catch(_rooms[i]->clean_up());
garbage.c | 261 | ctime(time())[4..18], i/2, (memory_info() / 1024000.0));
garbage.c | 263 | sprintf("Cleaning %d idle rooms", i/2), "cpu");
garbage.c | 267 | ctime(time())[4..18], real_time() - t);
garbage.c | 278 | memory_info();
garbage.c | 279 | reclaim_objects();
garbage.c | 280 | memory_info();
garbage.c | 295 | real_time();
garbage.c | 298 | set_eval_limit(0);
garbage.c | 299 | set_eval_limit(5000000);
garbage.c | 301 | filter(get_garbage(), (:get_junk:));
garbage.c | 303 | objects((:get_junk:));
garbage.c | 305 | set_eval_limit(i);
garbage.c | 309 | call_out("check_reboot", 10);
garbage.c | 312 | call_out("tidy_up", 30);
garbage.c | 315 | call_out("start_cleanup", 60);
garbage.c | 319 | base_name(ob)});
garbage.c | 322 | call_out((:housekeeping:), 15 * 60);
garbage.c | 331 | file_name(ob)]);
garbage.c | 333 | reset_eval_cost();
garbage.c | 334 | dest_me();
garbage.c | 338 | keys(cloned_by);
garbage.c | 339 | if(sizeof(tmpkeys)>
garbage.c | 343 | remove_garbage();
garbage.c | 348 | ctime(time())[4..18], real_time() - t);
garbage.c | 361 | find_object("/obj/handlers/armoury");
garbage.c | 364 | find_object("/global/cloner");
garbage.c | 367 | previous_object(1);
garbage.c | 372 | previous_object(i++);
garbage.c | 381 | sizeof(call_stack());
garbage.c | 385 | sprintf("%s %O", tmp, call_stack(j)[i]);
garbage.c | 389 | file_name(ob)] = sprintf("%O\n%s", obcloner, tmp);
garbage.c | 393 | if((find_call_out(id) < 0) && ((uptime() - uptime_prev) >
garbage.c | 394 | call_out((:housekeeping:), 0);
garbage.c | 402 | uptime();
garbage.c | 413 | save_object(SAVE_FILE);
garbage.c | 417 | unguarded((:save_object(SAVE_FILE):));
garbage.c | 418 | destruct(this_object());
mag_eff_handler.c | 40 | update_octonite();
mag_eff_handler.c | 41 | schedule_next();
mag_eff_handler.c | 55 | return (int)thing->query_property( "enchantment block" );
mag_eff_handler.c | 75 | sizeof( tops );
mag_eff_handler.c | 76 | query_enchant();
mag_eff_handler.c | 99 | return ({ number, random( NUM_POSS * number ) / BLACK_MASS });
mag_eff_handler.c | 119 | tell_room( place, "How curious.\n" );
mag_eff_handler.c | 126 | random( 4 );
mag_eff_handler.c | 129 | clone_object( "/obj/monster" );
mag_eff_handler.c | 130 | set_name( "caterpillar" );
mag_eff_handler.c | 133 | add_adjective( ({ "yellow", "green", "hairy", "spotted" })[ i ] );
mag_eff_handler.c | 136 | add_plural( "caterpillars" );
mag_eff_handler.c | 137 | set_long( "This is a small, common or garden caterpillar.\n" );
mag_eff_handler.c | 138 | set_race( "caterpillar" );
mag_eff_handler.c | 140 | set_no_check( 1 );
mag_eff_handler.c | 141 | set_max_hp( 10 );
mag_eff_handler.c | 142 | set_hp( 10 );
mag_eff_handler.c | 143 | set_max_weight( 1 );
mag_eff_handler.c | 144 | set_get();
mag_eff_handler.c | 146 | set_level( 1 );
mag_eff_handler.c | 147 | move( place );
mag_eff_handler.c | 156 | clone_object( "/std/object" );
mag_eff_handler.c | 157 | set_name( "flowers" );
mag_eff_handler.c | 158 | set_short( "bunch of flowers" );
mag_eff_handler.c | 159 | set_main_plural( "bunches of flowers" );
mag_eff_handler.c | 160 | add_adjective( ({ "bunch", "bunches", "of" }) );
mag_eff_handler.c | 161 | add_plural( "bunches" );
mag_eff_handler.c | 162 | set_long( "A nice bunch of flowers.\n" );
mag_eff_handler.c | 163 | set_weight( 10 );
mag_eff_handler.c | 164 | set_value( 100 );
mag_eff_handler.c | 165 | move( place );
mag_eff_handler.c | 172 | tell_room( place, name +" vanishes into the distance.\n" );
mag_eff_handler.c | 178 | users() - all_inventory( place );
mag_eff_handler.c | 179 | if ( sizeof( things ) >
mag_eff_handler.c | 182 | query_name() +"\n" );
mag_eff_handler.c | 183 | tell_room( thing, "You hear a high-pitched whine.\n" );
mag_eff_handler.c | 188 | tell_room( thing, word +" looks shaken.\n", things[ i ] );
mag_eff_handler.c | 192 | tell_room( place, "Something really, really strange happens.\n" );
mag_eff_handler.c | 217 | time() + roll_MdN( 5, 60 );
mag_eff_handler.c | 220 | schedule_next();
mag_eff_handler.c | 222 | sizeof( _octonite );
mag_eff_handler.c | 229 | schedule_next();
mag_eff_handler.c | 251 | remove_call_out(_call_out_no);
mag_eff_handler.c | 252 | time();
mag_eff_handler.c | 254 | call_out( (: update_octonite :), next );
mag_eff_handler.c | 256 | call_out( (: update_octonite :), 0 );
mag_eff_handler.c | 273 | query_weight();
mag_eff_handler.c | 274 | tell_object( find_player( "deutha" ), "Current: "+ weight +".\n" );
mag_eff_handler.c | 275 | ambient_enchantment( crystal );
mag_eff_handler.c | 279 | tell_object( find_player( "deutha" ), "Influx to: "+ weight +".\n" );
mag_eff_handler.c | 281 | tell_object( find_player( "deutha" ), "Outflux to: "+ weight +".\n" );
mag_eff_handler.c | 287 | dest_me();
mag_eff_handler.c | 289 | set_weight( weight );
mag_eff_handler.c | 290 | set_enchant( ( 7 * (int)crystal->query_max_enchant() ) / 8 );
mag_eff_handler.c | 291 | set_value_info( "magic", weight * 10000 );
mag_eff_handler.c | 293 | delete( _octonite, 0, 2 );
mag_eff_handler.c | 295 | schedule_next();
mag_eff_handler.c | 298 | add_octonite_crystal( crystal );
mag_eff_handler.c | 301 | delete( _octonite, 0, 2 );
mag_eff_handler.c | 303 | schedule_next();
gossip_handler.c | 27 | save_stuff();
gossip_handler.c | 30 | seteuid(getuid());
gossip_handler.c | 34 | unguarded( (: restore_object(GOSSIP_SAVE_FILE) :) );
gossip_handler.c | 35 | call_out((: save_stuff :), 10*60);
gossip_handler.c | 39 | call_out((: save_stuff :), 10*60);
gossip_handler.c | 40 | if (sizeof(gossip) >
gossip_handler.c | 44 | if (sizeof(rumours) >
gossip_handler.c | 48 | unguarded( (: save_object(GOSSIP_SAVE_FILE) :) );
gossip_handler.c | 62 | explode(mess, " ");
gossip_handler.c | 63 | sizeof(bits);
gossip_handler.c | 82 | for (index = sizeof(gossip);
gossip_handler.c | 93 | delete(gossip, pos, 1);
gossip_handler.c | 107 | save_stuff();
colour.c | 38 | member_array( word, colour_names );
colour.c | 42 | save_cmr_handler();
colour.c | 50 | member_array( word, colour_names );
colour.c | 52 | allocate( 4 );
colour.c | 56 | switch ( ( ( player->query_total_xp() ) >
colour.c | 57 | query_max_social_points() ) >
bank_handler.c | 40 | do_cheat_check(string, string, int, string, int);
bank_handler.c | 46 | unguarded((: read_file, RESTORE_PATH + "bank_data.o" :));
bank_handler.c | 48 | restore_variable(str);
bank_handler.c | 54 | save_variable(_banks), 1 :));
bank_handler.c | 71 | init_data(name);
bank_handler.c | 84 | debug_printf("Problem saving " + RESTORE_PATH+name[0..0]+"/"+name);
bank_handler.c | 94 | get_data_file( word );
bank_handler.c | 113 | get_data_file( name );
bank_handler.c | 117 | m_delete( accounts, bank_name );
bank_handler.c | 119 | do_cheat_check(name, bank_name, amount, "by", before);
bank_handler.c | 120 | save_data_file( name );
bank_handler.c | 136 | get_data_file( name );
bank_handler.c | 140 | m_delete( accounts, bank_name );
bank_handler.c | 144 | do_cheat_check(name, bank_name, amount, "to", before);
bank_handler.c | 145 | save_data_file( name );
bank_handler.c | 155 | get_data_file(player);
bank_handler.c | 158 | return ({ });
bank_handler.c | 160 | keys(accounts);
bank_handler.c | 174 | new(class bank_data);
bank_handler.c | 181 | save_banks();
bank_handler.c | 189 | map_delete(_banks, name);
bank_handler.c | 190 | save_banks();
bank_handler.c | 197 | copy(_banks[name]);
bank_handler.c | 218 | new(class franchise);
bank_handler.c | 223 | save_banks();
bank_handler.c | 238 | save_banks();
bank_handler.c | 253 | save_banks();
bank_handler.c | 274 | save_banks();
bank_handler.c | 293 | save_banks();
bank_handler.c | 308 | save_banks();
bank_handler.c | 418 | save_banks();
bank_handler.c | 426 | keys(_banks);
bank_handler.c | 436 | return ({ });
bank_handler.c | 439 | map(_banks[bank]->franchises, (: $1->office :) );
bank_handler.c | 445 | if((amount - after) >
refresh.c | 67 | unguarded( (: restore_object, SAVE_FILE, 0 :) );
refresh.c | 81 | unguarded( (: save_object, SAVE_FILE, 0 :) );
refresh.c | 97 | seteuid("/secure/master"->creator_file(file_name(this_object())));
refresh.c | 98 | load_me();
refresh.c | 103 | previous_object()->query_name();
refresh.c | 105 | previous_object()->query_name();
refresh.c | 107 | file_name(previous_object());
refresh.c | 109 | sprintf(" (%s)", this_player()->query_name());
refresh.c | 112 | ctime(time());
refresh.c | 120 | save_me();
refresh.c | 121 | destruct(this_object());
refresh.c | 129 | destruct(this_object());
refresh.c | 159 | base_name(ob);
refresh.c | 165 | load_object(ob);
refresh.c | 175 | map_delete(refresh_callbacks, ob);
refresh.c | 184 | save_me();
refresh.c | 200 | base_name(ob);
refresh.c | 206 | load_object(ob);
refresh.c | 216 | map_delete(delete_callbacks, ob);
refresh.c | 225 | save_me();
refresh.c | 244 | load_object(ob);
refresh.c | 249 | call_out( (: call_other, obj, vals :), 1);
refresh.c | 270 | back_trace() :) );
refresh.c | 277 | load_object(ob);
refresh.c | 282 | call_out( (: call_other, obj, vals :), 1);
refresh.c | 285 | delete_related_files(player, 1, 0);
clothing_handler.c | 21 | add_clothing_zone(string zone, string *types);
clothing_handler.c | 22 | fixup_types(string type, string *types);
clothing_handler.c | 23 | add_equivilant_type(string name, string equiv);
clothing_handler.c | 24 | check_clothing_types();
clothing_handler.c | 25 | query_clothing_zone(string zone);
clothing_handler.c | 26 | query_clothing_cannot_remove(string type);
clothing_handler.c | 27 | can_wear_or_remove(object thing, object player);
clothing_handler.c | 38 | add_clothing_type("bandaid", ({ }), ({ }));
clothing_handler.c | 265 | add_clothing_type("all covering", ({}), ({}));
clothing_handler.c | 300 | add_equivilant_type("shoe", "boot");
clothing_handler.c | 301 | add_equivilant_type("sandal", "boot");
clothing_handler.c | 302 | add_equivilant_type("clog", "boot");
clothing_handler.c | 303 | add_equivilant_type("sabaton", "boot");
clothing_handler.c | 304 | add_equivilant_type("turban", "helmet");
clothing_handler.c | 305 | add_equivilant_type("gorget", "collar");
clothing_handler.c | 306 | add_equivilant_type("stocking", "sock");
clothing_handler.c | 307 | add_equivilant_type("coat", "cloak");
clothing_handler.c | 308 | add_equivilant_type("overall", "long dress");
clothing_handler.c | 309 | call_out((: check_clothing_types() :), 2);
clothing_handler.c | 329 | query_type();
clothing_handler.c | 333 | query_wearing() - ({ thing });
clothing_handler.c | 335 | sizeof(main_types);
clothing_handler.c | 336 | query_clothing_cannot_remove(main_types[k]);
clothing_handler.c | 338 | return ({ });
clothing_handler.c | 340 | sizeof(wearing);
clothing_handler.c | 341 | query_type();
clothing_handler.c | 345 | sizeof(junk);
clothing_handler.c | 366 | query_items_blocking(thing, player);
clothing_handler.c | 368 | query_multiple_short(blocking);
clothing_handler.c | 434 | return ({ });
clothing_handler.c | 460 | query_clothing_depth(str);
clothing_handler.c | 493 | query_clothing_depth(str);
clothing_handler.c | 537 | tell_creator("presto", "called check_clothing_types\n");
clothing_handler.c | 557 | query_clothing_zone(bing);
clothing_handler.c | 565 | fixup_types(type, stuff);
clothing_handler.c | 571 | tell_creator("presto", "setting depth of %O to %d\n", type, rank + 1);
clothing_handler.c | 592 | fixup_types(bing, types);
clothing_handler.c | 609 | write("Incorrect clothing type " + ty + " in zone " + zone + ".\n");
clothing_handler.c | 625 | write("Incorrect clothing type " + type + "\n");
clothing_handler.c | 698 | member_array(zone, _zone_level);
clothing_handler.c | 709 | write("Incorrect clothing type " + equiv + " in equivilant listing.\n");
hist_handler.c | 27 | query_lord_history();
hist_handler.c | 28 | add_lord_history( string start, string mess );
hist_handler.c | 31 | seteuid(master()->get_root_uid());
hist_handler.c | 34 | unguarded((: restore_object, SAVE :));
hist_handler.c | 35 | call_out("tidy_history", 2);
hist_handler.c | 40 | unguarded((: save_object, SAVE, 2 :));
hist_handler.c | 52 | time() }) });
hist_handler.c | 54 | time() }) });
hist_handler.c | 55 | if (sizeof(cre_history) >
hist_handler.c | 85 | add_lord_history( start, mess );
hist_handler.c | 88 | time() }) });
hist_handler.c | 90 | if (sizeof(chat_history) >
hist_handler.c | 107 | query_lord_history();
hist_handler.c | 122 | time() }) });
hist_handler.c | 124 | time() }) });
hist_handler.c | 125 | if (sizeof(lord_history) >
hist_handler.c | 140 | return ({ });
hist_handler.c | 146 | save_me();
hist_handler.c | 147 | destruct(this_object());
hist_handler.c | 152 | save_me();
hist_handler.c | 164 | sizeof(history[channel]);
hist_handler.c | 170 | map_delete(history, channel);
hist_handler.c | 172 | save_object(SAVE, 2);
hist_handler.c | 183 | save_object(SAVE, 2);
newspaper.c | 40 | load_me();
newspaper.c | 41 | save_me();
newspaper.c | 48 | seteuid(getuid());
newspaper.c | 49 | load_me();
newspaper.c | 60 | classp(_papers[paper]);
newspaper.c | 75 | new(class paper);
newspaper.c | 77 | replace_string(lower_case(name), " ", "_");
newspaper.c | 83 | save_me();
newspaper.c | 91 | keys(_papers);
newspaper.c | 115 | sizeof(_papers[paper]->published_editions);
newspaper.c | 163 | return ({ });
newspaper.c | 167 | return ({ });
newspaper.c | 170 | copy(_papers[paper]->published_editions[edition - 1]->articles);
newspaper.c | 182 | return ({ });
newspaper.c | 186 | return ({ });
newspaper.c | 189 | copy(_papers[paper]->published_editions[edition - 1]->adverts);
newspaper.c | 216 | save_me();
newspaper.c | 245 | save_me();
newspaper.c | 274 | save_me();
newspaper.c | 289 | save_me();
newspaper.c | 300 | tell_creator("pinkfish", "Not valid edition %O %O\n", paper, previous_object());
newspaper.c | 304 | tell_creator("pinkfish", "Updating num sold %O %O\n", paper, edition);
newspaper.c | 307 | save_me();
newspaper.c | 343 | pointerp(_areas[area]);
newspaper.c | 368 | save_me();
newspaper.c | 380 | return ({ });
newspaper.c | 390 | write_file(SAVE_DIR + $(art->file_name), save_variable(({ $(art), $(text) })), 1) :) );
newspaper.c | 411 | save_me();
newspaper.c | 424 | save_me();
newspaper.c | 435 | return ({ });
newspaper.c | 449 | unguarded( (: read_file(SAVE_DIR + $(art->file_name)) :) );
newspaper.c | 451 | restore_variable(str);
newspaper.c | 467 | unguarded( (: read_file(SAVE_DIR + $(art->file_name)) :) );
newspaper.c | 469 | restore_variable(str);
newspaper.c | 472 | replace_string(bits[1], "\n\n", "<p>");
newspaper.c | 473 | replace_string(bits[1], "\n", "<br>");
newspaper.c | 476 | replace_string(bits[1], "<pre>", "</font><pre>");
newspaper.c | 492 | convert_html(input);
newspaper.c | 510 | unguarded( (: read_file(SAVE_DIR + $(art->file_name)) :) );
newspaper.c | 512 | restore_variable(str);
newspaper.c | 518 | unguarded( (: NROFF_HAND->cat_file(SAVE_DIR + $(art->file_name) + ".nroff", 1) :) );
newspaper.c | 521 | unguarded( (: read_file(SAVE_DIR + $(art->file_name)) :) );
newspaper.c | 523 | restore_variable(str);
newspaper.c | 524 | convert_html(bits[1]);
newspaper.c | 529 | unguarded( (: NROFF_HAND->cat_file(SAVE_DIR + $(art->file_name) + ".nroff") :) );
newspaper.c | 565 | save_me();
newspaper.c | 594 | save_me();
newspaper.c | 608 | save_me();
newspaper.c | 655 | unguarded( (: mkdir($(paper_dir)) :));
newspaper.c | 657 | unguarded( (: mkdir($(paper_dir)) :));
newspaper.c | 677 | sizeof(editors);
newspaper.c | 682 | sizeof(articles);
newspaper.c | 683 | set_article_text(articles[i], text[i]);
newspaper.c | 686 | new(class edition);
newspaper.c | 689 | time();
newspaper.c | 693 | save_me();
newspaper.c | 696 | call_out((: $1->event_publish_paper($2) :), 2, tmp, paper);
newspaper.c | 710 | unguarded( (: restore_object(SAVE_DIR + "main", 1) :) );
newspaper.c | 713 | new(class paper);
newspaper.c | 724 | new(class paper);
newspaper.c | 737 | sizeof(green->articles);
newspaper.c | 739 | new(class article);
newspaper.c | 753 | sizeof(fluff->published_editions);
newspaper.c | 755 | new(class edition);
newspaper.c | 769 | unguarded( (: save_object(SAVE_DIR + "main") :) );
newspaper.c | 783 | query_last_edition_num(paper);
newspaper.c | 814 | find_player(player);
newspaper.c | 815 | adjust_xp(xp);
newspaper.c | 816 | map_delete(_xp, player);
newspaper.c | 817 | save_me();
map.c | 53 | do_room1( string room );
map.c | 54 | check_next();
map.c | 55 | check_map2( string );
map.c | 58 | seteuid( (string)"secure/master"->get_root_uid() );
map.c | 59 | force_load();
map.c | 60 | call_out( (: check_next :), SKEWTIME );
map.c | 62 | db_connect("localhost","discworld",CONFIG_DB_USER);
map.c | 87 | if ( sizeof( cache ) >
map.c | 88 | map_delete( shorts, cache[ 0 ] );
map.c | 89 | map_delete( movezoness, cache[ 0 ] );
map.c | 90 | map_delete( changetimes, cache[ 0 ] );
map.c | 92 | map_delete( clusters, cache[ 0 ] );
map.c | 93 | map_delete( map, cache[ 0 ] );
map.c | 96 | map_delete( coords, cache[ 0 ] );
map.c | 97 | map_delete( sizes, cache[ 0 ] );
map.c | 100 | LOG( sprintf( "%%^RED%%^uncaching %s%%^RESET%%^\n", cache[ 0 ] ) );
map.c | 102 | query_shorts( directory );
map.c | 103 | query_movezones( directory );
map.c | 104 | query_changetimes( directory );
map.c | 106 | query_clusters( directory );
map.c | 107 | query_map( directory );
map.c | 110 | query_co_ords( directory );
map.c | 111 | query_sizes( directory );
map.c | 157 | update_cache( dir, 1 );
map.c | 172 | change_map( dir, room, dd );
map.c | 187 | update_cache( dir, 1 );
map.c | 201 | change_shorts( dir, room, sh );
map.c | 215 | update_cache( dir, 1 );
map.c | 230 | change_movezones( dir, room, zones );
map.c | 246 | update_cache( dir, 1 );
map.c | 261 | change_changetimes( dir, room, time );
map.c | 276 | update_cache( dir, 1 );
map.c | 289 | change_clusters( dir, room, cluster );
map.c | 306 | update_cache( dir, 1 );
map.c | 318 | change_co_ords( dir, room, coord );
map.c | 330 | update_cache( dir, 1 );
map.c | 343 | change_sizes( dir, room, size );
map.c | 354 | del( dir, room );
map.c | 355 | update_cache( dir, 1 );
map.c | 366 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 373 | update_cache( directory, 1 );
map.c | 388 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 394 | change_clusters( directory, troom, cluster);
map.c | 419 | return ({ });
map.c | 422 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 430 | check_map2( room );
map.c | 440 | return ({});
map.c | 442 | time();
map.c | 444 | db_exec(db, "select exit, dest from roomexit where id = '%s'", db_escape(room));
map.c | 447 | check_map2( room );
map.c | 448 | db_exec(db, "select exit, dest from roomexit where id = '%s'", db_escape(room));
map.c | 451 | tell_creator("wodan", rows);
map.c | 452 | return ({ });
map.c | 456 | allocate(rows * 2);
map.c | 460 | db_fetch(db, i + 1);
map.c | 476 | query_dest_dir( room );
map.c | 494 | file_name( environment( previous_object() ) );
map.c | 497 | query_dest_dir( room );
map.c | 498 | member_array( exit, dest_dir );
map.c | 509 | query_destination( exit, room );
map.c | 522 | file_name( environment( previous_object() ) );
map.c | 523 | if( !room ) return ({ "/room/void" });
map.c | 525 | query_dest_dir( room );
map.c | 565 | sizeof( ar1 );
map.c | 589 | sizeof( queue ), reason ) );
map.c | 606 | call_out( (: do_room1 :), 1, room );
map.c | 612 | implode( explode( room, "/" )[ 0 .. <2 ], "/" );
map.c | 619 | LOG( sprintf( "%%^BLUE%%^Skipping %s,%%^RESET%%^ in /w/.\n", room ) );
map.c | 623 | LOG( sprintf( "%%^BLUE%%^Skipping %s,%%^RESET%%^ in /std/.\n", room ) );
map.c | 627 | stat( room +".c" );
map.c | 629 | stat( room );
map.c | 633 | find_object( room );
map.c | 639 | a_short() ) );
map.c | 643 | calc_co_ord();
map.c | 644 | if ( sizeof( tmp->query_co_ord() ) >
map.c | 646 | queue_room( room, 1, "new co_ordinates");
map.c | 652 | stat( room +".c" );
map.c | 660 | sizeof( queue ) ) );
map.c | 672 | call_out( (: check_next :), SKEWTIME );
map.c | 676 | check_map2( room );
map.c | 678 | call_out( (: check_next :), 60 );
map.c | 687 | lower_case(room_short);
map.c | 701 | query_short();
map.c | 721 | LOG( sprintf( "%%^RED%%^%s.%%^RESET%%^\n", bad_short ) );
map.c | 726 | do_room( room );
map.c | 742 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 750 | LOG( sprintf( "%%^BLUE%%^Skipping %s,%%^RESET%%^ in /w/.\n", room ) );
map.c | 754 | LOG( sprintf( "%%^BLUE%%^Skipping %s,%%^RESET%%^ in /std/.\n", room ) );
map.c | 759 | stat( room +".c" );
map.c | 767 | calc_co_ord();
map.c | 768 | if ( ( sizeof( room_obj->query_co_ord() ) >
map.c | 782 | catch( room->force_load() );
map.c | 783 | find_object( room );
map.c | 789 | map_delete( forced_rooms, room );
map.c | 791 | update_cache( directory, 0 );
map.c | 797 | query_dest_dir(room);
map.c | 798 | sizeof( dest_dir );
map.c | 799 | check_map( dest_dir[ i ] );
map.c | 801 | map_delete( map[ directory ], troom );
map.c | 803 | map_delete( shorts[ directory ], troom );
map.c | 804 | map_delete( movezoness[ directory ], troom );
map.c | 805 | map_delete( changetimes[ directory ], troom );
map.c | 807 | map_delete( coords[ directory ], troom );
map.c | 808 | map_delete( sizes[ directory ], troom );
map.c | 810 | del( directory, room );
map.c | 811 | LOG( sprintf( "%%^RED%%^Removing %s,%%^RESET%%^.\n", room ) );
map.c | 821 | a_short() );
map.c | 827 | check_short( room_obj, room_short, room );
map.c | 829 | query_zones();
map.c | 830 | if ( !pointerp( movezones ) ) movezones = ({ });
map.c | 834 | calc_co_ord();
map.c | 835 | query_co_ord();
map.c | 836 | if ( !coord ) room_obj->calc_co_ord();
map.c | 837 | query_co_ord();
map.c | 838 | if ( !coords[ directory ] ) coords[ directory ] = ([ ]);
map.c | 842 | query_room_size_array();
map.c | 843 | if ( !sizes[ directory ] ) sizes[ directory ] = ([ ]);
map.c | 852 | change_changetimes( directory, troom, changetime );
map.c | 853 | change_movezones( directory, troom, movezones );
map.c | 854 | change_shorts( directory, troom, room_short );
map.c | 858 | change_co_ords( directory, troom, coord );
map.c | 859 | change_sizes( directory, troom, size );
map.c | 861 | update_cache( directory, 1 );
map.c | 864 | query_dest_dir();
map.c | 870 | query_direction();
map.c | 872 | sizeof( dest_dir );
map.c | 883 | sizeof( dest_dir );
map.c | 885 | catch(load_object(dest_dir[i]));
map.c | 903 | db_exec(db, "delete from roomexit where id = '%s'", db_escape(room));
map.c | 907 | db_escape(dest_dir[i*2+1]));
map.c | 910 | sizeof( dest_dir );
map.c | 920 | change_map( directory, troom, dest_dir );
map.c | 923 | update_cache( directory, 1 );
map.c | 925 | sizeof( dest_dir );
map.c | 926 | do_room( dest_dir[ i ] );
map.c | 933 | update_cache( directory, 1 );
map.c | 945 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 957 | a_short() );
map.c | 963 | update_cache( directory, 1 );
map.c | 973 | a_short() );
map.c | 991 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1001 | update_cache( directory, 1 );
map.c | 1020 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1032 | return (string *)room->query_movezones();
map.c | 1034 | return ({ });
map.c | 1038 | update_cache( directory, 1 );
map.c | 1048 | query_movezones();
map.c | 1050 | return ({ "Oops!" });
map.c | 1061 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1069 | update_cache( directory, 1 );
map.c | 1074 | change_co_ords( directory, troom, coord );
map.c | 1085 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1094 | LOG( sprintf( "%%^BLUE%%^query_co_ord(%s)%%^RESET%%^\n", room ) );
map.c | 1097 | query_co_ord();
map.c | 1103 | update_cache( directory, 1 );
map.c | 1112 | query_co_ord();
map.c | 1124 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1135 | query_co_ord();
map.c | 1141 | update_cache( directory, 1 );
map.c | 1158 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1169 | query_room_size_array();
map.c | 1175 | update_cache( directory, 1 );
map.c | 1184 | query_room_size_array();
map.c | 1196 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1207 | update_cache( directory, 1 );
map.c | 1227 | implode( explode( room, "/" )[ 0..<2 ], "/" );
map.c | 1235 | update_cache( directory, 1 );
map.c | 1240 | undefinedp(shorts[ directory ][troom]);
map.c | 1250 | unguarded((: get_dir, "/save/map/" :));
map.c | 1251 | map( files, (: replace( $1, ({ "_", "/", ".o", ""}) ) :) );
map.c | 1253 | printf( "%s\n", file );
map.c | 1254 | keys( MH->query_map( file ) );
map.c | 1255 | reset_eval_cost();
map.c | 1258 | printf( "%s no longer exists.\n", file + "/" + room );
map.c | 1259 | del( file, room );
map.c | 1325 | map(keys(stats), (:({$1, $(stats)[$1]}):));
quest_handler.c | 62 | load_quests() { unguarded( (: restore_object, SAVE_FILE :) );
quest_handler.c | 68 | save_quests() { unguarded( (: save_object, SAVE_FILE :) );
quest_handler.c | 72 | create();
quest_handler.c | 73 | load_quests();
quest_handler.c | 94 | allocate(sizeof(quest_name));
quest_handler.c | 95 | sizeof(quest_name);
quest_handler.c | 103 | sizeof(quest_level);
quest_handler.c | 146 | this_player()->query_name();
quest_handler.c | 149 | file_name( previous_object() );
quest_handler.c | 154 | save_quests();
quest_handler.c | 155 | unguarded( (: cp, SAVE_FILE +".o", BACKUP_FILE +"."+ time() :) );
quest_handler.c | 168 | member_array(name, quest_name);
quest_handler.c | 184 | member_array(name, quest_name);
quest_handler.c | 202 | member_array(name, quest_name);
quest_handler.c | 221 | member_array(name, quest_name);
quest_handler.c | 227 | this_player()->query_name();
quest_handler.c | 230 | file_name( previous_object() );
quest_handler.c | 236 | save_quests();
quest_handler.c | 250 | member_array(name, quest_name);
quest_handler.c | 268 | member_array(name, quest_name);
quest_handler.c | 274 | this_player()->query_name();
quest_handler.c | 277 | file_name( previous_object() );
quest_handler.c | 283 | save_quests();
quest_handler.c | 297 | member_array(name, quest_name);
quest_handler.c | 315 | member_array(name, quest_name);
quest_handler.c | 321 | this_player()->query_name();
quest_handler.c | 324 | file_name( previous_object() );
quest_handler.c | 330 | save_quests();
quest_handler.c | 346 | member_array( name, quest_name );
quest_handler.c | 364 | member_array( name, quest_name );
quest_handler.c | 381 | this_player()->query_name();
quest_handler.c | 384 | file_name( previous_object() );
quest_handler.c | 389 | member_array(name, quest_name);
quest_handler.c | 394 | delete(quest_name, temp, 1);
quest_handler.c | 395 | delete(quest_level, temp, 1);
quest_handler.c | 396 | delete(quest_title, temp, 1);
quest_handler.c | 397 | delete(quest_story, temp, 1);
quest_handler.c | 398 | delete( last_done_by, temp, 1 );
quest_handler.c | 399 | delete( num_times_done, temp, 1 );
quest_handler.c | 400 | save_quests();
quest_handler.c | 458 | user_event( "inform", name +" completes "+ quest, "quest" );
quest_handler.c | 460 | previous_object();
quest_handler.c | 462 | query_name();
quest_handler.c | 464 | file_name( prev_ob );
quest_handler.c | 468 | log_file( QUEST_LOG, "given by "+ word +"\n" );
quest_handler.c | 469 | member_array( quest, quest_name );
quest_handler.c | 471 | log_file( QUEST_LOG, "non existent quest\n" );
quest_handler.c | 476 | save_quests();
quest_handler.c | 500 | this_player()->expand_nickname(name);
quest_handler.c | 508 | query_quest_points(name);
quest_handler.c | 510 | query_total_qp();
quest_handler.c | 564 | return ({ });
quest_handler.c | 568 | this_player()->expand_nickname(name);
quest_handler.c | 576 | query_quest_names();
quest_handler.c | 581 | sizeof(quests);
quest_handler.c | 597 | sizeof(quest_name);
quest_handler.c | 598 | printf("%s: %6d, %3d\n", quest_name[i], num_times_done[i], quest_level[i]);
mailer.c | 99 | rm_message(string input);
mailer.c | 100 | unrm_message(string input);
mailer.c | 101 | print_message(int number);
mailer.c | 102 | reply_message(int input, int flag);
mailer.c | 103 | save_me();
mailer.c | 104 | load_me();
mailer.c | 105 | dest_me();
mailer.c | 106 | read_messages(string fname);
mailer.c | 107 | read_loop(string input);
mailer.c | 108 | prompt();
mailer.c | 109 | change_folder(string input);
mailer.c | 110 | delete_it(string bonk, int last, string newish_folder);
mailer.c | 111 | move_message(string input, int flag);
mailer.c | 112 | save_message(string input);
mailer.c | 113 | get_recipient(string input);
mailer.c | 114 | get_subject(string input, int number, int flag);
mailer.c | 115 | main_menu(string fname, int flag, int *range);
mailer.c | 116 | forward_message(string input);
mailer.c | 117 | finish_write_message(string input);
mailer.c | 118 | format_date(int x);
mailer.c | 119 | expand_range(string str);
mailer.c | 120 | valid_name(string str);
mailer.c | 121 | read_mail(string str, string sub);
mailer.c | 122 | forward_email(int number);
mailer.c | 123 | write_message();
mailer.c | 124 | check_external_mail();
mailer.c | 131 | seteuid("Mailer");
mailer.c | 140 | this_player();
mailer.c | 142 | query_aliases();
mailer.c | 148 | check_external_mail();
mailer.c | 172 | sizeof(ra[0]);
mailer.c | 185 | new(class mail_message);
mailer.c | 188 | unguarded((: get_dir, EXTERNAL_MAIL_PATH :));
mailer.c | 190 | call_out((: check_external_mail :), 60);
mailer.c | 194 | unguarded((: read_file, EXTERNAL_MAIL_PATH + fname :));
mailer.c | 195 | replace(mess, ({ "\r\n", "\n", "\t", "        " }));
mailer.c | 196 | parse_headers(mess);
mailer.c | 198 | unguarded((: rm, EXTERNAL_MAIL_PATH + fname :));
mailer.c | 207 | explode(t, ",");
mailer.c | 212 | explode(ccs, ",");
mailer.c | 214 | add_it(msg, 1);
mailer.c | 215 | unguarded((: rm, EXTERNAL_MAIL_PATH + fname :));
mailer.c | 217 | call_out((: check_external_mail :), 60);
mailer.c | 276 | printf("MAILER: illegal access (%O).\n", file_name(previous_object()));
mailer.c | 282 | printf("MAILER: illegal acces.\n");
mailer.c | 288 | explode(ccs, ",")-({""});
mailer.c | 289 | explode(t, ",")-({""});
mailer.c | 291 | explode(only_to, ",")-({""});
mailer.c | 293 | new(class mail_message);
mailer.c | 303 | lower_case(from);
mailer.c | 305 | add_it(msg, flag);
mailer.c | 316 | finger_mail(lower_case(pname));
mailer.c | 325 | new_mail(this_player()->query_name());
mailer.c | 328 | check_mail(lower_case(pname));
mailer.c | 335 | printf("\nCommand (h for main menu): ");
mailer.c | 342 | clone_object(MAIL_HANDLER);
mailer.c | 343 | read_mail();
mailer.c | 347 | write("Sorry, mailer access is not allowed for guests.\n");
mailer.c | 349 | call_other(do_this_last[0], do_this_last[1], do_this_last[2]);
mailer.c | 351 | dest_me();
mailer.c | 358 | call_other(do_this_last[0], do_this_last[1], do_this_last[2]);
mailer.c | 360 | dest_me();
mailer.c | 367 | get_recipient(str);
mailer.c | 370 | get_subject(sub);
mailer.c | 374 | add_mailer(this_object(), owner->query_name());
mailer.c | 375 | main_menu("inbox");
mailer.c | 384 | printf("%|=*s", cols, "" + mud_name() + " mailer system version 2.0\n\n");
mailer.c | 390 | read_messages(current);
mailer.c | 398 | sizeof(folder);
mailer.c | 420 | expand_range(sprintf("%d-%d", i, size));
mailer.c | 422 | sizeof(range);
mailer.c | 449 | printf("Command: ");
mailer.c | 450 | input_to("read_loop");
mailer.c | 485 | input_to("get_yesno");
mailer.c | 489 | delete_it(current, 1);
mailer.c | 493 | rm_message(input);
mailer.c | 496 | printf( "\nDelete which messages (number or range): " );
mailer.c | 497 | input_to("rm_message");
mailer.c | 501 | unrm_message(input);
mailer.c | 504 | printf( "\nUndelete which messages (number or range): " );
mailer.c | 505 | input_to("unrm_message");
mailer.c | 509 | change_folder(input);
mailer.c | 512 | printf( "\nChange to which folder (= for inbox): " );
mailer.c | 513 | input_to("change_folder");
mailer.c | 517 | get_recipient(input);
mailer.c | 520 | printf( "\nRecipient: " );
mailer.c | 521 | input_to("get_recipient");
mailer.c | 524 | reply_message(num);
mailer.c | 527 | reply_message(num, 1);
mailer.c | 530 | main_menu(current);
mailer.c | 534 | forward_message(input);
mailer.c | 539 | recipient(s), separated by a comma: ");
mailer.c | 540 | input_to("forward_message");
mailer.c | 543 | forward_email(num);
mailer.c | 546 | printf("\nHere's the index of your folders:\n");
mailer.c | 547 | printf("\n%-#*s\n", COLS, implode(folder_names, "\n"));
mailer.c | 548 | prompt();
mailer.c | 549 | input_to("read_loop");
mailer.c | 553 | printf("\nOkay, now showing abbreviated header.\n");
mailer.c | 556 | printf("\nOkay, now showing full header.\n");
mailer.c | 559 | prompt();
mailer.c | 560 | input_to("read_loop");
mailer.c | 565 | printf( "\nSorry, list "+input+" does not exist.\n" );
mailer.c | 566 | prompt();
mailer.c | 567 | input_to("read_loop");
mailer.c | 570 | printf( "\nMembers of list "+ input +":\n" );
mailer.c | 571 | query_members(input);
mailer.c | 573 | printf( "\nCurrently available mailing lists:\n" );
mailer.c | 574 | query_mailing_lists();
mailer.c | 576 | printf("\n%-#*s\n", COLS, implode(tmp,"\n"));
mailer.c | 577 | prompt();
mailer.c | 578 | input_to("read_loop");
mailer.c | 582 | printf( "You can't do that as a guest.\n" );
mailer.c | 586 | move_message(input);
mailer.c | 592 | input_to("move_message");
mailer.c | 596 | main_menu(current, 1, expand_range(input));
mailer.c | 599 | main_menu(current, 1);
mailer.c | 602 | save_message(input);
mailer.c | 605 | set_finish_func("finish_print");
mailer.c | 606 | read_file("/doc/helpdir/mailer");
mailer.c | 607 | more_string(comm);
mailer.c | 611 | print_message(num-1);
mailer.c | 616 | printf("\nNo more new messages in folder.\n");
mailer.c | 617 | prompt();
mailer.c | 618 | input_to("read_loop");
mailer.c | 622 | print_message(newish[0]);
mailer.c | 625 | printf("\nUnknown command.  Use \"?\" for help.\n");
mailer.c | 626 | prompt();
mailer.c | 627 | input_to("read_loop");
mailer.c | 637 | printf("No.\n");
mailer.c | 638 | delete_it(current, 1);
mailer.c | 642 | delete_it(current, 1);
mailer.c | 646 | sizeof(folder);
mailer.c | 650 | move_message(""+(i+1)+" received", 1);
mailer.c | 654 | delete_it(current, 1);
mailer.c | 664 | printf("No messages in folder.\n");
mailer.c | 665 | prompt();
mailer.c | 666 | input_to("read_loop");
mailer.c | 672 | printf("All your messages are still unread: aborting.\n");
mailer.c | 673 | prompt();
mailer.c | 674 | input_to("read_loop");
mailer.c | 684 | printf("Oh dear.  No message with that number.\n");
mailer.c | 685 | prompt();
mailer.c | 686 | input_to("read_loop");
mailer.c | 693 | prompt();
mailer.c | 694 | input_to("read_loop");
mailer.c | 703 | eventSendMail(email, owner->query_name(), body);
mailer.c | 704 | printf("Message #%d forwarded to your E-mail address.\n", number + 1);
mailer.c | 706 | prompt();
mailer.c | 707 | input_to("read_loop");
mailer.c | 726 | printf("No messages in folder.\n");
mailer.c | 727 | prompt();
mailer.c | 728 | input_to("read_loop");
mailer.c | 734 | printf("All your messages are still unread: aborting.\n");
mailer.c | 735 | prompt();
mailer.c | 736 | input_to("read_loop");
mailer.c | 746 | printf("Oh dear.  No message with that number.\n");
mailer.c | 747 | prompt();
mailer.c | 748 | input_to("read_loop");
mailer.c | 756 | prompt();
mailer.c | 757 | input_to("read_loop");
mailer.c | 760 | parse_headers(body);
mailer.c | 762 | prompt();
mailer.c | 763 | input_to("read_loop");
mailer.c | 790 | printf("Include original message? (y/[n]/q) ");
mailer.c | 791 | input_to("finish_reply_message", 0, number);
mailer.c | 803 | printf("Aborting.\n");
mailer.c | 804 | prompt();
mailer.c | 805 | input_to("read_loop");
mailer.c | 808 | printf( "No.\n" );
mailer.c | 814 | sprintf("Re:#%d %s", (i+1), s1);
mailer.c | 815 | printf("Press return for a subject of \"%s\"\nSubject: ", subject);
mailer.c | 817 | input_to("get_subject", 0, ++number, 1);
mailer.c | 819 | input_to("get_subject");
mailer.c | 825 | prompt();
mailer.c | 826 | input_to("read_loop");
mailer.c | 830 | delete_it(current, 0, "inbox");
mailer.c | 834 | printf("No folder named %s.\n", input);
mailer.c | 835 | prompt();
mailer.c | 836 | input_to("read_loop");
mailer.c | 839 | delete_it(current, 0, input);
mailer.c | 849 | printf("No recipient given: aborting.\n");
mailer.c | 850 | prompt();
mailer.c | 851 | input_to("read_loop");
mailer.c | 854 | get_email_addrs(input);
mailer.c | 857 | sizeof(str);
mailer.c | 858 | expand_nickname(str[i]);
mailer.c | 863 | printf("%s is not a valid recipient.\n", str[i]);
mailer.c | 864 | delete(str, i, 1);
mailer.c | 865 | delete(full, i--, 1);
mailer.c | 869 | implode(full, ",");
mailer.c | 872 | delete_it("inbox", 1);
mailer.c | 875 | prompt();
mailer.c | 876 | input_to("read_loop");
mailer.c | 880 | printf("Subject: ");
mailer.c | 881 | input_to("get_subject");
mailer.c | 887 | printf("No subject given: aborting.\n");
mailer.c | 889 | delete_it("inbox", 1);
mailer.c | 892 | prompt();
mailer.c | 893 | input_to("read_loop");
mailer.c | 898 | printf("Cc: ");
mailer.c | 899 | input_to("get_cc", 0 , number, flag);
mailer.c | 905 | lower_case(str);
mailer.c | 910 | query_list(str);
mailer.c | 926 | prompt();
mailer.c | 927 | input_to("read_loop");
mailer.c | 931 | finish_write_message("> " + replace_string(body, "\n", "\n> ") + "\n");
mailer.c | 938 | write_message();
mailer.c | 941 | get_email_addrs(input);
mailer.c | 944 | sizeof(str);
mailer.c | 945 | expand_nickname(str[i]);
mailer.c | 950 | printf("%s is not a valid recipient.\n", str[i]);
mailer.c | 951 | delete(str, i, 1);
mailer.c | 952 | delete(full, i--, 1);
mailer.c | 956 | implode(full, ",");
mailer.c | 958 | implode(full, ",");
mailer.c | 959 | printf("Cc: ");
mailer.c | 960 | input_to("get_cc", 0, number, flag);
mailer.c | 964 | do_edit(0, "finish_write_message");
mailer.c | 971 | delete_it("inbox", 1);
mailer.c | 974 | prompt();
mailer.c | 975 | input_to("read_loop");
mailer.c | 978 | printf("Cc: ");
mailer.c | 979 | input_to("get_cc_after", 0, input);
mailer.c | 990 | append_signature();
mailer.c | 991 | mark_read(owner->query_name(), current, newish);
mailer.c | 992 | explode(to, ",") - ({ "" });
mailer.c | 994 | explode(cc, ",") - ({ "" });
mailer.c | 998 | new(class mail_message);
mailer.c | 1008 | query_name();
mailer.c | 1010 | add_it(msg, 0);
mailer.c | 1014 | printf("Message sent.\n");
mailer.c | 1016 | delete_it("inbox", 1);
mailer.c | 1019 | prompt();
mailer.c | 1020 | input_to("read_loop");
mailer.c | 1023 | get_email_addrs(input);
mailer.c | 1026 | sizeof(str);
mailer.c | 1027 | expand_nickname(str[i]);
mailer.c | 1032 | printf("%s is not a valid recipient.\n", str[i]);
mailer.c | 1033 | delete(str, i, 1);
mailer.c | 1034 | delete(full, i--, 1);
mailer.c | 1038 | implode(full, ",");
mailer.c | 1040 | implode(full, ",");
mailer.c | 1041 | printf("Cc: ");
mailer.c | 1042 | input_to("get_cc_after", 0, body);
mailer.c | 1049 | printf("Delete message(s)? ([y]/n) ");
mailer.c | 1050 | input_to("finish_delete_it", 0, fname, last, newish_folder);
mailer.c | 1054 | mark_read(owner->query_name(), current, newish);
mailer.c | 1055 | save_me();
mailer.c | 1057 | call_other(do_this_last[0], do_this_last[1], do_this_last[2]);
mailer.c | 1059 | dest_me();
mailer.c | 1062 | mark_read(owner->query_name(), current, newish);
mailer.c | 1064 | main_menu(fname);
mailer.c | 1066 | main_menu(newish_folder);
mailer.c | 1074 | printf("Keeping message(s).\n");
mailer.c | 1077 | mark_read(owner->query_name(), current, newish);
mailer.c | 1078 | save_me();
mailer.c | 1080 | call_other(do_this_last[0], do_this_last[1], do_this_last[2]);
mailer.c | 1082 | dest_me();
mailer.c | 1085 | mark_read(owner->query_name(), current, newish);
mailer.c | 1087 | main_menu(fname);
mailer.c | 1089 | main_menu(newish_folder);
mailer.c | 1092 | printf("Deleting message(s).\n");
mailer.c | 1093 | mark_read(owner->query_name(), current, newish);
mailer.c | 1094 | delete_it(owner->query_name(), fname, deleted);
mailer.c | 1096 | save_me();
mailer.c | 1099 | call_other(do_this_last[0], do_this_last[1], do_this_last[2]);
mailer.c | 1101 | dest_me();
mailer.c | 1105 | main_menu(fname);
mailer.c | 1107 | main_menu(newish_folder);
mailer.c | 1117 | prompt();
mailer.c | 1118 | input_to("read_loop");
mailer.c | 1121 | expand_range(input);
mailer.c | 1122 | sizeof(range);
mailer.c | 1129 | printf("Marked message %d as deleted.\n", range[i]);
mailer.c | 1133 | prompt();
mailer.c | 1134 | input_to("read_loop");
mailer.c | 1144 | prompt();
mailer.c | 1145 | input_to("read_loop");
mailer.c | 1148 | expand_range(input);
mailer.c | 1149 | sizeof(range);
mailer.c | 1155 | printf("Undeleted message %d.\n", range[i]);
mailer.c | 1158 | prompt();
mailer.c | 1159 | input_to("read_loop");
mailer.c | 1169 | prompt();
mailer.c | 1170 | input_to("read_loop");
mailer.c | 1174 | printf("Wrong syntax (ranges are not supported with forward).\n");
mailer.c | 1175 | prompt();
mailer.c | 1176 | input_to("read_loop");
mailer.c | 1180 | printf("Oh dear. No message with that number.\n");
mailer.c | 1181 | prompt();
mailer.c | 1182 | input_to("read_loop");
mailer.c | 1185 | get_email_addrs(to);
mailer.c | 1188 | sizeof(str);
mailer.c | 1189 | expand_nickname(str[i]);
mailer.c | 1194 | printf("%s is not a valid recipient.\n", str[i]);
mailer.c | 1195 | delete(str, i, 1);
mailer.c | 1196 | delete(full, i--, 1);
mailer.c | 1200 | implode(full, ",");
mailer.c | 1202 | prompt();
mailer.c | 1203 | input_to("read_loop");
mailer.c | 1207 | printf("Edit outgoing message? (y/[n]) ");
mailer.c | 1208 | input_to("edit_it", 0, number);
mailer.c | 1215 | printf( "No.\n" );
mailer.c | 1216 | printf("Press return for a subject of \"%s\"\nSubject: ", subject);
mailer.c | 1218 | input_to("get_subject", 0, number);
mailer.c | 1220 | input_to("get_subject", 0, number, 1);
mailer.c | 1230 | prompt();
mailer.c | 1231 | input_to("read_loop");
mailer.c | 1235 | printf("Wrong syntax.\n");
mailer.c | 1236 | prompt();
mailer.c | 1237 | input_to("read_loop");
mailer.c | 1241 | printf("Destination folder is the same as source folder: not moved.\n");
mailer.c | 1242 | prompt();
mailer.c | 1243 | input_to("read_loop");
mailer.c | 1248 | expand_range(number);
mailer.c | 1249 | sizeof(range);
mailer.c | 1250 | mark_read(owner->query_name(), current, newish);
mailer.c | 1269 | printf("Folder full!\n");
mailer.c | 1271 | printf("Marked message %d as deleted.\n", range[i]);
mailer.c | 1275 | printf("Saved message %d to folder %s.\n", range[i], to_folder);
mailer.c | 1279 | prompt();
mailer.c | 1280 | input_to("read_loop");
mailer.c | 1289 | printf("Sorry, only creators can save mail to files.\n");
mailer.c | 1290 | prompt();
mailer.c | 1291 | input_to("read_loop");
mailer.c | 1296 | sprintf("%d ~/mbox",(last_read+1));
mailer.c | 1298 | printf("No messages in folder or all messages still unread.\n");
mailer.c | 1299 | prompt();
mailer.c | 1300 | input_to("read_loop");
mailer.c | 1305 | printf("Wrong syntax.\n");
mailer.c | 1306 | prompt();
mailer.c | 1307 | input_to("read_loop");
mailer.c | 1310 | seteuid(geteuid(owner));
mailer.c | 1311 | get_path(to_file);
mailer.c | 1313 | printf("You cannot write to that file.\n");
mailer.c | 1314 | prompt();
mailer.c | 1315 | input_to("read_loop");
mailer.c | 1318 | if ((i=file_size(to_file)) >
mailer.c | 1319 | printf("Appending to existing file.\n");
mailer.c | 1321 | printf("That is a directory.\n");
mailer.c | 1322 | prompt();
mailer.c | 1323 | input_to("read_loop");
mailer.c | 1326 | expand_range(number);
mailer.c | 1327 | sizeof(range);
mailer.c | 1335 | catch(ret = write_file(to_file, body + "\n\n"));
mailer.c | 1337 | printf("Writing to file failed: %s\n", err);
mailer.c | 1339 | printf("Writing to file failed.\n");
mailer.c | 1341 | printf("Saved message %d to %s.\n", range[i], to_file);
mailer.c | 1344 | seteuid("Mailer");
mailer.c | 1345 | prompt();
mailer.c | 1346 | input_to("read_loop");
mailer.c | 1353 | printf("No message with that number.\n");
mailer.c | 1354 | prompt();
mailer.c | 1355 | input_to("read_loop");
mailer.c | 1365 | rm_message(""+(number+1));
mailer.c | 1368 | set_finish_func("finish_print");
mailer.c | 1369 | printf("\n\nMessage %d\n", (number + 1));
mailer.c | 1376 | printf("\n");
mailer.c | 1377 | prompt();
mailer.c | 1378 | input_to("read_loop");
mailer.c | 1390 | unguarded((: save_object, folder_filename(owner->query_name()) :));
mailer.c | 1396 | printf( "You cannot use the mailer now, your mail is being converted.\n" );
mailer.c | 1400 | unguarded((: restore_object, folder_filename(owner->query_name()) :));
mailer.c | 1413 | unguarded((: restore_object, folder_filename(pname) :));
mailer.c | 1415 | return ({});
mailer.c | 1420 | get_messages(owner->query_name(), fname);
mailer.c | 1425 | delete_mailer(this_object());
mailer.c | 1426 | destruct(this_object());
mailer.c | 1442 | localtime(x);
mailer.c | 1456 | return ({ });
mailer.c | 1457 | replace_string(str, " ", "");
mailer.c | 1470 | sizeof(folder);
mailer.c | 1471 | if (str && str != "" && (str[0] == '-' || ((strlen(str) >
mailer.c | 1473 | sscanf(str, "%*(-|(..))%d%s", end, str);
mailer.c | 1476 | sizeof(folder);
mailer.c | 1484 | sscanf(str, ",%s", str);
parcel.c | 36 | test_expire( class parcel temp );
parcel.c | 44 | seteuid( master()->creator_file( base_name( this_object() ) ) );
parcel.c | 47 | copy(parcels);
parcel.c | 54 | tell_creator("ceres", "Starting %s", dir);
parcel.c | 55 | call_out("do_migrate", random(10), 'a', dir);
parcel.c | 68 | map_delete(parcels, name);
parcel.c | 70 | unguarded( (: save_object, SAVE_PATH, 2 :));
parcel.c | 73 | unguarded( (: mkdir, SAVE_PATH :) );
parcel.c | 78 | save_variable(_parcels);
parcel.c | 85 | ctime(time()), SAVE_FILE);
parcel.c | 87 | if(file_size(SAVE_FILE) >
parcel.c | 88 | unguarded( (: rm, SAVE_FILE :));
parcel.c | 89 | if(file_size(SAVE_FILE+".gz") >
parcel.c | 90 | unguarded( (: rm, SAVE_FILE + ".gz" :));
parcel.c | 104 | if(file_size(SAVE_FILE + ".gz") >
parcel.c | 105 | restore_variable(uncompress(read_file(SAVE_FILE)));
parcel.c | 108 | if(file_size(SAVE_FILE) >
parcel.c | 109 | debug_printf("%s", SAVE_FILE);
parcel.c | 110 | restore_variable(unguarded( (: read_file, SAVE_FILE :) ));
parcel.c | 111 | if (file_size(SAVE_PATH+ ".o.gz") >
parcel.c | 112 | unguarded( (: restore_object, SAVE_PATH+".o.gz" :));
parcel.c | 114 | if(file_size(SAVE_PATH+".o") >
parcel.c | 115 | unguarded( (: restore_object, SAVE_PATH :) );
parcel.c | 139 | convert_message(query_multiple_short (obs));
parcel.c | 149 | user_event("inform", tmp, "multiplayer");
parcel.c | 151 | this_player()->convert_message(tmp) + "\n");
parcel.c | 152 | if("/secure/alist"->query_alt(from, to) >
parcel.c | 155 | user_event("inform", tmp, "multiplayer");
parcel.c | 157 | this_player()->convert_message(tmp) + "\n");
parcel.c | 161 | load_file(to, location );
parcel.c | 165 | clone_object("/obj/baggage");
parcel.c | 166 | set_name("boxy");
parcel.c | 167 | set_max_weight(100000);
parcel.c | 169 | move( boxy );
parcel.c | 172 | time() + ( 14 * 24 * 60 * 60));
parcel.c | 173 | create_auto_load( ({ boxy }), 0 );
parcel.c | 175 | save_file(to, location);
parcel.c | 176 | dest_me();
parcel.c | 196 | load_file(name, location );
parcel.c | 202 | load_auto_load_to_array(temp->autoloadinfo, this_player());
parcel.c | 204 | all_inventory(box_array[<1]);
parcel.c | 210 | user_event("inform", tmp, "multiplayer");
parcel.c | 212 | this_player()->convert_message(tmp) + "\n");
parcel.c | 213 | if("/secure/alist"->query_alt(name, temp->from) >
parcel.c | 217 | user_event("inform", tmp, "multiplayer");
parcel.c | 219 | this_player()->convert_message(tmp) + "\n");
parcel.c | 225 | all_inventory (box);
parcel.c | 226 | all_inventory( box )->move( target );
parcel.c | 227 | dest_me();
parcel.c | 236 | save_file(name, location);
parcel.c | 246 | load_file(name, location);
parcel.c | 260 | tell_creator("ceres", "Processing %c in %s\n", letter, location);
parcel.c | 261 | load_file(sprintf("%c", letter), location);
parcel.c | 263 | filter(temp2, (: test_expire :));
parcel.c | 264 | save_file(name, location);
parcel.c | 268 | unguarded((: rm, name :));
parcel.c | 272 | call_out("do_migrate", 15 + random(30), letter, location);
parcel.c | 298 | query_name();
parcel.c | 301 | load_file(name, location);
parcel.c | 302 | map_delete(parcels, name);
parcel.c | 303 | save_file(name, location);
board_handler.c | 72 | query_archive(string board);
board_handler.c | 73 | zap_message(string board, int num, string name);
board_handler.c | 74 | can_delete_message(string board, int off, string pname);
board_handler.c | 75 | save_me();
board_handler.c | 83 | seteuid(master()->creator_file(file_name(this_object())));
board_handler.c | 145 | if (file_size(BOARD_FILE +".gz") >
board_handler.c | 146 | unguarded((: cp, BOARD_FILE +".gz", BACKUPS_DIR +"boards."+ time() :));
board_handler.c | 148 | unguarded((: get_dir, BACKUPS_DIR +"boards.*" :));
board_handler.c | 149 | if ( sizeof( lines ) >
board_handler.c | 152 | sscanf(line, "boards.%d", number);
board_handler.c | 154 | unguarded((: rm, BACKUPS_DIR + line :));
board_handler.c | 158 | unguarded((: restore_object, BOARD_FILE :));
board_handler.c | 160 | call_out("expire_boards", 5);
board_handler.c | 172 | replace(board, ({" ", "_", "'", ""}));
board_handler.c | 187 | replace(board, ({" ", "_", "'", ""}));
board_handler.c | 190 | file_size(BOARD_RAM_DIR);
board_handler.c | 207 | keys(boards);
board_handler.c | 223 | return (int)master()->query_lord(str);
board_handler.c | 240 | map_delete(_idiots, name);
board_handler.c | 251 | time() + (60 * 60 * 24 * length);
board_handler.c | 252 | save_me();
board_handler.c | 283 | sprintf(" (%O)\n", this_player()->query_name()));
board_handler.c | 303 | member_array(name, security[board]) != -1);
board_handler.c | 343 | sprintf(" (%O)\n", this_player()));
board_handler.c | 367 | member_array(name, security[board]) != -1);
board_handler.c | 387 | sprintf(" (%O)\n", this_player()));
board_handler.c | 399 | member_array(name, security[board]) != -1);
board_handler.c | 414 | query_lord(name);
board_handler.c | 450 | this_player()->query_name();
board_handler.c | 455 | return ({ });
board_handler.c | 458 | return ({ });
board_handler.c | 481 | this_player()->query_name();
board_handler.c | 487 | this_player()->query_name()));
board_handler.c | 510 | get_filename(board, boards[board][num][B_NUM]);
board_handler.c | 515 | if(!clean_out && sizeof(keys(message_cache)) >
board_handler.c | 516 | call_out("clean_cache", 10);
board_handler.c | 519 | get_ram_filename(board, boards[board][num][B_NUM]);
board_handler.c | 522 | unguarded((: cp, name, rname :));
board_handler.c | 530 | unguarded((: read_file, name :));
board_handler.c | 533 | unguarded((: read_file, name :));
board_handler.c | 544 | sizeof(keys(message_cache));
board_handler.c | 545 | sort_array(keys(message_cache), 0);
board_handler.c | 547 | map_delete(message_cache, list[i]);
board_handler.c | 553 | map_delete(_newsrc_cache, name);
board_handler.c | 568 | unguarded((: save_object, BOARD_FILE, 2 :));
board_handler.c | 595 | lower_case(cap_name);
board_handler.c | 599 | sizeof(boards[board]);
board_handler.c | 644 | get_filename(board, num-1);
board_handler.c | 645 | unguarded((: rm, fname :));
board_handler.c | 646 | get_filename(board, num-1);
board_handler.c | 648 | unguarded((: write_file, fname, body :));
board_handler.c | 649 | save_me();
board_handler.c | 659 | sizeof(boards[board]) >
board_handler.c | 661 | while (sizeof(boards[board]) >
board_handler.c | 662 | zap_message(board, 0, 0);
board_handler.c | 682 | this_player() );
board_handler.c | 700 | this_player() );
board_handler.c | 720 | this_player()->query_name();
board_handler.c | 727 | save_me();
board_handler.c | 728 | printf("Created board %s.\n", board);
board_handler.c | 748 | this_player()->query_name();
board_handler.c | 759 | save_me();
board_handler.c | 760 | printf("Added %s to the security array for %s.\n",name, board);
board_handler.c | 778 | geteuid(previous_object());
board_handler.c | 786 | delete(security[board], i, 1);
board_handler.c | 787 | save_me();
board_handler.c | 788 | printf("Removed %s from the security array for %s.\n", name, board);
board_handler.c | 808 | this_player()->query_name();
board_handler.c | 815 | save_me();
board_handler.c | 833 | this_player()->query_name();
board_handler.c | 841 | save_me();
board_handler.c | 858 | get_filename(board, num);
board_handler.c | 859 | query_archive(board);
board_handler.c | 868 | unguarded((: read_file, nam :)) :));
board_handler.c | 870 | if(unguarded( (: file_size, archive :) ) >
board_handler.c | 871 | unguarded((: rename, archive, archive+"."+time() :));
board_handler.c | 873 | delete(boards[board],off,1);
board_handler.c | 874 | unguarded((: rm, nam :));
board_handler.c | 875 | save_me();
board_handler.c | 893 | this_player()->query_name();
board_handler.c | 900 | zap_message(board, off, nam);
board_handler.c | 939 | copy(str);
board_handler.c | 953 | geteuid(previous_object());
board_handler.c | 963 | map_delete(boards, board);
board_handler.c | 964 | map_delete(security, board);
board_handler.c | 965 | map_delete(archives, board);
board_handler.c | 966 | map_delete(timeouts, board);
board_handler.c | 967 | save_me();
board_handler.c | 977 | keys(boards);
board_handler.c | 993 | geteuid(previous_object());
board_handler.c | 1002 | save_me();
board_handler.c | 1003 | printf("Set the automagic timeout to %d days for %s.\n", timeout, board);
board_handler.c | 1021 | geteuid(previous_object());
board_handler.c | 1030 | save_me();
board_handler.c | 1031 | printf("Set the minimum number of messages to %d for %s.\n", min, board);
board_handler.c | 1048 | geteuid(previous_object());
board_handler.c | 1057 | save_me();
board_handler.c | 1058 | printf("Set the maximum number of messages to %d for %s.\n", max, board);
board_handler.c | 1075 | geteuid(previous_object());
board_handler.c | 1080 | save_me();
board_handler.c | 1081 | printf("Set the archive file to %s for %s.\n", file, board);
board_handler.c | 1194 | sizeof(boards[nam]) >
board_handler.c | 1197 | while (sizeof(boards[nam]) >
board_handler.c | 1199 | zap_message(nam, 0, 0);
board_handler.c | 1207 | call_out("expire_boards", 60*60);
board_handler.c | 1242 | printf("%O\n", sort_array(keys(message_cache), 0));
board_handler.c | 1258 | if(unguarded( (: file_size($(fname)) :)) >
board_handler.c | 1260 | unguarded((: restore_variable(read_file($(fname))) :));
board_handler.c | 1264 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1276 | test_property(player, NEWS_RC);
board_handler.c | 1279 | test_property(player, BOARD_ORDER);
board_handler.c | 1286 | time();
board_handler.c | 1288 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1301 | map(keys(boards), (: lower_case($1) :));
board_handler.c | 1311 | if(unguarded( (: file_size($(fname)) :)) >
board_handler.c | 1314 | member_array(lower_case($1), $(board_list)) != -1 :));
board_handler.c | 1318 | member_array(lower_case($1), $(board_list)) != -1 :));
board_handler.c | 1322 | member_array(lower_case($1), $(board_list)) != -1 :));
board_handler.c | 1330 | save_variable(_newsrc_cache[$(player)]), 1) :));
board_handler.c | 1331 | remove_property(NEWS_RC);
board_handler.c | 1332 | remove_property(BOARD_ORDER);
board_handler.c | 1334 | remove_property("news_kill_" + lower_case(board));
board_handler.c | 1339 | special_add_property(player, NEWS_RC, _newsrc_cache[player]->newsrc);
board_handler.c | 1353 | return ([ ]);
board_handler.c | 1355 | time();
board_handler.c | 1372 | time();
board_handler.c | 1373 | time();
board_handler.c | 1376 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1392 | time();
board_handler.c | 1412 | time();
board_handler.c | 1413 | time();
board_handler.c | 1416 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1430 | time();
board_handler.c | 1431 | time();
board_handler.c | 1434 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1448 | return ({ });
board_handler.c | 1461 | return ({ });
board_handler.c | 1463 | time();
board_handler.c | 1465 | return ({ });
board_handler.c | 1483 | time();
board_handler.c | 1484 | time();
board_handler.c | 1487 | call_out("flush_newsrc", NEWSRC_SAVE_DELAY);
board_handler.c | 1494 | flush_newsrc(1);
board_handler.c | 1495 | destruct(this_object());
image.c | 33 | read_file(image_file, 1, 1);
image.c | 34 | replace_string(image_type, " ", "");
image.c | 35 | replace_string(image_type, "\n", "");
image.c | 37 | error("Only image type RAW is currently supported.\n");
image.c | 39 | read_file(image_file, 2, 1);
image.c | 41 | error("Image size(s) not found.\n");
image.c | 43 | new(class IMAGE_INFO);
image.c | 46 | read_file(image_file, 3);
image.c | 48 | explode(replace_string(vals, "\n", " "), " ");
image.c | 49 | reg_assoc(vals, ({ "[0-9]+" }), ({ 1 }));
image.c | 53 | allocate(size_x);
image.c | 57 | allocate(size_y);
image.c | 60 | error("Ran out of values for image at " + i + ", " + j + ".\n");
image.c | 62 | to_int(vals[0][n++]);
image.c | 83 | printf("(not placed)\n");
image.c | 84 | printf("Image:\n    ");
image.c | 85 | sizeof(im->image);
image.c | 86 | sizeof(im->image[i]);
image.c | 87 | printf("% 4d", im->image[i][j]);
image.c | 89 | printf("\n    ");
image.c | 91 | printf("\n");
gathering.c | 69 | seteuid("/secure/master"->creator_file(file_name(this_object())));
gathering.c | 70 | compile_data(({ INIT_FILE }));
gathering.c | 96 | return ({ h->skill, h->difficulty, h->season, h->quant, h->ob });
gathering.c | 114 | new( class item_data );
gathering.c | 156 | return ({ });
gathering.c | 158 | match_objects_for_existence( word, ({ environment( player ) }) );
gathering.c | 161 | return ({ });
gathering.c | 169 | query_gather();
gathering.c | 185 | sizeof( current_item[0] );
gathering.c | 191 | environment( player ), player );
gathering.c | 198 | environment( player ), player, temp_name);
gathering.c | 206 | tell_creator( player, "Started to check for %s.\n", temp_name );
gathering.c | 208 | if ( random( 100 ) >
gathering.c | 231 | perform_task( player, info->skill ,info->difficulty, TM_FREE );
gathering.c | 254 | clone_object( info->ob );
gathering.c | 257 | set_amount( quantity );
gathering.c | 261 | dest_me();
gathering.c | 262 | allocate( quantity, (: clone_object( $(info->ob) ) :) );
key_handler.c | 47 | if ( file_size( RESTORE_PATH + group +".o" ) >
key_handler.c | 48 | unguarded((: restore_object, RESTORE_PATH + group :));
key_handler.c | 50 | init_data( group );
key_handler.c | 61 | unguarded((: save_object, RESTORE_PATH + _current_group :));
key_handler.c | 77 | get_data_file( group );
key_handler.c | 87 | get_data_file( group );
key_handler.c | 89 | save_data_file( );
key_handler.c | 106 | get_data_file( group );
key_handler.c | 108 | return ({ });
key_handler.c | 126 | get_data_file( group );
key_handler.c | 130 | map_delete(keys, key);
key_handler.c | 132 | save_data_file( );
key_handler.c | 149 | get_data_file( group );
key_handler.c | 173 | get_data_file( group );
key_handler.c | 181 | save_data_file( );
key_handler.c | 201 | get_data_file( group );
key_handler.c | 208 | delete( keys[ key ], i, 1 );
key_handler.c | 210 | map_delete(keys, key);
key_handler.c | 212 | save_data_file( );
key_handler.c | 226 | get_data_file( group );
key_handler.c | 231 | get_data_file( group );
key_handler.c | 233 | save_data_file( );
key_handler.c | 246 | get_data_file( group );
key_handler.c | 260 | get_data_file( group );
key_handler.c | 262 | save_data_file( );
key_handler.c | 275 | get_data_file( group );
key_handler.c | 279 | map_delete( key_names, key );
key_handler.c | 280 | save_data_file( );
artifact_handler.c | 28 | creator_file( file_name( this_object() ) ) );
artifact_handler.c | 30 | if ( file_size( SAVE_FILE +".o" ) >
artifact_handler.c | 31 | unguarded( (: restore_object, SAVE_FILE :) );
artifact_handler.c | 45 | save_me() { unguarded( (: save_object, SAVE_FILE :) );
artifact_handler.c | 54 | save_me();
artifact_handler.c | 81 | save_me();
artifact_handler.c | 91 | m_delete( artifacts, name );
artifact_handler.c | 92 | save_me();
artifact_handler.c | 189 | query_artifact_level( name, bonus );
artifact_handler.c | 205 | query_artifact_type();
artifact_handler.c | 208 | the_short() +".\n" );
artifact_handler.c | 211 | query_charges();
artifact_handler.c | 231 | call_out( "diagnose_artifact", 0, thing, person, wand );
artifact_handler.c | 252 | explode( unguarded((: read_file, SAVE_DIR + person :)), "\n" );
artifact_handler.c | 253 | sizeof( list );
artifact_handler.c | 268 | unguarded((: write_file, SAVE_DIR + person, artifact +"\n" :));
tokeniser.c | 76 | explode("#"+inp[pos-1..]+"#", inp[pos-1..pos-1]);
tokeniser.c | 78 | write("Error processing the string.\n");
tokeniser.c | 100 | sscanf(inp[start_pos-1..pos], "%f", num);
tokeniser.c | 102 | sscanf(inp[start_pos-1..pos], "%d", num);
tokeniser.c | 143 | while (pos < strlen(inp) && (!token[inp[pos++]] || inp[pos-1] == '/'));
languages.c | 160 | return (mixed)languages[lang][1]->squidge_text(str, size);
languages.c | 200 | m_indices(languages);
languages.c | 209 | pointerp(languages[str]);
languages.c | 251 | query_garble_object(lang);
languages.c | 259 | query_garble_object(lang);
languages.c | 261 | garble_say(start, mess, player, type);
languages.c | 263 | debug_printf("Error, %s has no garble object.", lang);
languages.c | 267 | return ({ start, mess });
languages.c | 284 | evaluate(text);
languages.c | 288 | query_garble_object(lang);
languages.c | 291 | query_language_written_skill(lang));
languages.c | 295 | query_garble_object(lang);
languages.c | 299 | garble_text(text, thing, player);
languages.c | 302 | query_garble_object(lang);
languages.c | 303 | magical_text(text, thing, player);
languages.c | 327 | replace(mess, ({"ne1 no ", "anyone know "}));
languages.c | 339 | explode(mess, " ");
languages.c | 341 | regexp(bits, "(^|[^A-Za-z0-9\\\\./_&-]+)"+name+"($|[^A-Za-z0-9\\./&_-]+)", 1);
languages.c | 343 | sizeof(tmp);
languages.c | 345 | replace(bits[index], name, value);
languages.c | 349 | implode(bits, " ") + (add_space ? " " : "");
languages.c | 364 | do_replacements(mess);
housing.c | 49 | load_file();
housing.c | 50 | query_housing_area_bank(string area);
housing.c | 67 | seteuid("Root");
housing.c | 68 | load_file();
housing.c | 75 | call_out("check_owners", 900 + random(1800), 0);
housing.c | 76 | call_out("check_rent", 900 + random(1800));
housing.c | 84 | unguarded((: cp, SAVE_FILE + ".o", SAVE_FILE + ".o.bak" :));
housing.c | 85 | unguarded((: save_object, SAVE_FILE :));
housing.c | 90 | if (file_size(SAVE_FILE+".o") >
housing.c | 91 | unguarded((: restore_object, SAVE_FILE :));
housing.c | 100 | write(sizeof(houses[house]) + "\n");
housing.c | 113 | save_file();
housing.c | 143 | save_file();
housing.c | 170 | query_housing_area_bank(region));
housing.c | 171 | save_file();
housing.c | 189 | map_delete(houses, house);
housing.c | 190 | save_file();
housing.c | 204 | map_delete( houses, house );
housing.c | 219 | uniq_array(houses[house]->other_rooms + rooms);
housing.c | 220 | save_file();
housing.c | 236 | save_file();
housing.c | 259 | lower_case(owner);
housing.c | 260 | ownership_change(houses[house]->owner, owner);
housing.c | 262 | ownership_change(houses[house]->owner, owner);
housing.c | 265 | ctime(time())[4..15], house, owner, houses[house]->owner);
housing.c | 267 | save_file();
housing.c | 291 | save_file();
housing.c | 293 | ctime(time())[4..15], house, region);
housing.c | 317 | save_file();
housing.c | 319 | ctime(time())[4..15], house, address);
housing.c | 335 | replace(houses[house]->owner, " (In Arrears)", "");
housing.c | 339 | replace(houses[tmp]->owner, " (In Arrears)", "");
housing.c | 373 | save_file();
housing.c | 459 | save_file();
housing.c | 512 | debug_printf("Bad owner for house %O\n", house);
housing.c | 531 | ctime(time())[4..15], house, houses[house]->owner);
housing.c | 535 | save_file();
housing.c | 551 | ctime(time())[4..15], house, houses[house]->owner);
housing.c | 555 | save_file();
housing.c | 571 | ctime(time())[4..15], house, houses[house]->owner);
housing.c | 574 | save_file();
housing.c | 590 | save_file();
housing.c | 603 | query_name();
housing.c | 609 | set_for_sale(hname);
housing.c | 623 | save_file();
housing.c | 632 | map_delete(_housing_area, area);
housing.c | 633 | save_file();
housing.c | 653 | copy(_housing_area);
housing.c | 667 | save_file();
housing.c | 711 | keys(houses);
housing.c | 722 | call_out("check_owners", 1, ++i);
housing.c | 729 | set_for_sale(_tmp_houses[i]);
housing.c | 738 | set_for_sale(_tmp_houses[i]);
housing.c | 747 | set_for_sale(_tmp_houses[i]);
housing.c | 764 | set_for_sale(_tmp_rentals[i]);
housing.c | 769 | call_out("check_owners", 1, ++i);
housing.c | 779 | query_am_time_array(time());
housing.c | 784 | query_month(now[AM_TIME_MONTH]) + "\n");
housing.c | 785 | call_out("charge_rent", 0);
housing.c | 787 | save_file();
housing.c | 792 | call_out("check_rent", (daysleft * AM_SECONDS_PER_DAY) + 1);
housing.c | 806 | keys(houses);
housing.c | 826 | call_out("charge_rent", 1, (i+1));
housing.c | 830 | set_bank( _tmp_rentals[i], query_housing_area_bank( tmp->region ) );
housing.c | 840 | replace(tmp->owner, " (In Arrears)", "");
housing.c | 860 | query_account(owner, tmp->bank)));
housing.c | 861 | set_for_sale(_tmp_rentals[i]);
housing.c | 865 | adjust_account(owner, tmp->bank, - (tmp->value * 3));
housing.c | 870 | set_owner(_tmp_rentals[i], owner);
housing.c | 890 | set_in_arrears(_tmp_rentals[i]);
housing.c | 892 | adjust_account(tmp->owner, tmp->bank, -tmp->value);
housing.c | 894 | ctime(time())[4..15], tmp->value, tmp->owner, _tmp_rentals[i]);
housing.c | 908 | debug_printf("Doing callout %d.", (i+1));
housing.c | 916 | copy(houses);
world_map.c | 24 | load_me();
world_map.c | 25 | generate_main_templates();
world_map.c | 26 | generate_blocking_templates();
world_map.c | 36 | allocate(REGION_WIDTH, (: allocate(REGION_WIDTH) :));
world_map.c | 38 | seteuid(getuid());
world_map.c | 39 | generate_main_templates();
world_map.c | 40 | generate_blocking_templates();
world_map.c | 41 | load_me();
world_map.c | 54 | allocate(12);
world_map.c | 57 | sizeof(_templates);
world_map.c | 58 | sizeof(last);
world_map.c | 62 | allocate((size + 1) * 2 + 1) });
world_map.c | 102 | copy(_templates[size]);
world_map.c | 121 | sizeof(start);
world_map.c | 125 | sizeof(start);
world_map.c | 126 | sizeof(start);
world_map.c | 176 | for (i = sizeof(start);
world_map.c | 180 | sizeof(start);
world_map.c | 181 | sizeof(start);
world_map.c | 201 | return ({ start, straight, diagonal });
world_map.c | 213 | sizeof(_templates);
world_map.c | 219 | allocate(size + 1, line);
world_map.c | 220 | allocate(size + 1, ({ }));
world_map.c | 222 | allocate(size + 1);
world_map.c | 231 | generate_blocking(y, x, copy(start), copy(start), copy(start));
world_map.c | 246 | copy(_blocking_templates[x][y][type]);
world_map.c | 258 | copy(_templates[size - 1]);
world_map.c | 267 | time();
world_map.c | 271 | if (unguarded((: file_size($(fname)) :)) >
world_map.c | 272 | unguarded( (: restore_variable(read_file($(fname), 1)) :));
world_map.c | 279 | time();
world_map.c | 290 | unguarded( (: write_file($(fname), save_variable($(region)), 1) :));
world_map.c | 334 | load_region(region_x, region_y);
world_map.c | 338 | save_region(region_x, region_y);
world_map.c | 360 | load_region(region_x, region_y);
world_map.c | 373 | find_terrain_at(x, y);
world_map.c | 375 | find_room_at_real_coord(x, y);
world_map.c | 397 | load_region(x, y);
world_map.c | 399 | save_region(x, y);
world_map.c | 400 | debug_printf("Added feature to region %d, %d\n", x, y);
world_map.c | 416 | load_region(x, y);
world_map.c | 419 | save_region(x, y);
world_map.c | 440 | load_region(region_x, region_y);
world_map.c | 498 | load_region(region_x, region_y);
attack_messages.c | 289 | query_attack_message(name, type);
attack_messages.c | 362 | parse_string(ind[2], him, me, wep, zone)});
livings.c | 15 | filter(efun::users(), (: $1 && inherits("/std/container", $1) :));
livings.c | 44 | map_delete(_lnames, key);
livings.c | 50 | map_delete(_lnames, key);
livings.c | 73 | map_delete(_players, key);
livings.c | 77 | map_delete(_players, key);
livings.c | 89 | keys(_lnames);
livings.c | 90 | sizeof(names);
livings.c | 91 | call_out((: check_lnames :), i / 25, names[i..i+50]);
livings.c | 93 | keys(_players);
livings.c | 94 | sizeof(names);
livings.c | 95 | call_out((: check_players :), i / 25, names[i..i+50]);
livings.c | 123 | call_stack(0) );
livings.c | 134 | keys(_lnames);
livings.c | 135 | map(ret, (:$1?(_lnames)[$1]:0:));
livings.c | 136 | reset_eval_cost();
livings.c | 137 | filter(ret, (:$1:));
livings.c | 138 | reset_eval_cost();
livings.c | 139 | implode(ret, (:$1 + $2:));
livings.c | 140 | reset_eval_cost();
livings.c | 141 | filter(ret, (:$1:));
livings.c | 151 | filter(_lnames[it], (: $1 :));
livings.c | 164 | real_time();
livings.c | 174 | reset_eval_cost();
livings.c | 176 | inherits("/std/container", $1):));
livings.c | 182 | real_time() - t, it);
livings.c | 190 | real_time() - t, it);
livings.c | 194 | filter(_lnames[it], (: $1 && userp($1) :));
livings.c | 198 | real_time() - t, it);
livings.c | 233 | query_name();
livings.c | 245 | sizeof(keys(_players)) })});
reaction.c | 82 | allocate_mapping(SUBSTANCES);
reaction.c | 85 | restore_from_files();
reaction.c | 87 | write_dbg(string str) { if (debug_rh) write(str);
reaction.c | 90 | seteuid("/secure/master"->creator_file(file_name(this_object())));
reaction.c | 91 | restore_from_files();
reaction.c | 119 | map_delete(effects_m, key);
reaction.c | 142 | remove_alias(medium_alias);
reaction.c | 143 | query_no_join();
reaction.c | 145 | set_no_join();
reaction.c | 146 | move("/room/void");
reaction.c | 147 | query_amount();
reaction.c | 148 | query_amount();
reaction.c | 149 | adjust_amount(q_a);
reaction.c | 151 | copy(a->query_eat_effects());
reaction.c | 152 | copy(medium->query_eat_effects());
reaction.c | 153 | merge_effects(effects_a, effects_m, q_a, q_m);
reaction.c | 156 | add_eat_effect(key, eff[key]);
reaction.c | 159 | copy(a->query_external_effects());
reaction.c | 160 | copy(medium->query_external_effects());
reaction.c | 161 | merge_effects(effects_a, effects_m, q_a, q_m);
reaction.c | 164 | add_external_effect(key, eff[key]);
reaction.c | 167 | call_out("dest_substance", 0, a);
reaction.c | 170 | add_alias(medium_alias);
reaction.c | 185 | this_player()->query_property("debug_rh");
reaction.c | 188 | write_dbg("Entering reaction_handler.\n");
reaction.c | 189 | query_medium_alias();
reaction.c | 202 | merge_cont_medium(a, name_a);
reaction.c | 203 | all_inventory(environment(a));
reaction.c | 204 | debug_printf( "A is %O at %O. Bs are: %O.\n", a, environment( a ), bs );
reaction.c | 210 | write_dbg("Checking the following: ");
reaction.c | 211 | sizeof(bs);
reaction.c | 212 | write_dbg(bs[i]->query_medium_alias() + ", ");
reaction.c | 214 | write_dbg("\n");
reaction.c | 215 | sizeof(bs);
reaction.c | 218 | write_dbg("Leaving reaction_handler.\n");
reaction.c | 222 | query_medium_alias();
reaction.c | 241 | write_dbg("Checking " + i_a + " against " + i_b + ".\n");
reaction.c | 245 | write_dbg("...they react.\n");
reaction.c | 247 | query_amount();
reaction.c | 248 | query_amount();
reaction.c | 252 | to_float(rcn->ratio);
reaction.c | 255 | write_dbg("Single ratio...\n");
reaction.c | 259 | to_int(ceil(amt_b*rcn->ratio));
reaction.c | 260 | write_dbg("Setting amt_a to "+ to_int(ceil(amt_b*rcn->ratio)) +".\n" );
reaction.c | 263 | to_int(ceil(amt_a/rcn->ratio));
reaction.c | 264 | write_dbg("Setting amt_b to "+ to_int(ceil(amt_a/rcn->ratio)) +".\n" );
reaction.c | 275 | write_dbg("Range of ratios...");
reaction.c | 277 | to_float(rcn->ratio[0]);
reaction.c | 280 | to_float(rcn->ratio[1]);
reaction.c | 283 | write_dbg("above range...(" + ratio + ")\n");
reaction.c | 285 | to_int(ceil(amt_b*rcn->ratio[1]));
reaction.c | 286 | write_dbg("Setting amt_a to "+ to_int(ceil(amt_b*rcn->ratio[1])) +".\n" );
reaction.c | 287 | write_dbg("This is because amta is: "+ amt_b +" and ratio is "+ rcn->ratio[1] + ".\n" );
reaction.c | 289 | write_dbg("below range...(" + ratio + ")\n");
reaction.c | 291 | to_int(ceil(amt_a/rcn->ratio[0]));
reaction.c | 292 | write_dbg("Setting amt_b to "+ to_int(ceil(amt_a/rcn->ratio[0])) +".\n" );
reaction.c | 293 | write_dbg("This is because amta is: "+ amt_a +" and ratio is "+ rcn->ratio[0] + ".\n" );
reaction.c | 296 | write_dbg("within range...(" + ratio + ")\n");
reaction.c | 304 | to_int((need_amt_a + need_amt_b)*rcn->result_amt);
reaction.c | 307 | write_dbg("...creating "+rcn->result+".\n");
reaction.c | 309 | clone_object(rcn->result);
reaction.c | 312 | set_amount(amt_result);
reaction.c | 314 | set_weight(amt_result);
reaction.c | 329 | tell_room(environment(environment(a)), msg);
reaction.c | 335 | sizeof(fcns);
reaction.c | 356 | move(environment(a));
reaction.c | 360 | call_out("move_substance", 0, ({x, environment(a)}));
reaction.c | 363 | adjust_amount( -need_amt_a );
reaction.c | 364 | adjust_amount( -need_amt_b );
reaction.c | 367 | write_dbg("Leaving reaction_handler.\n");
reaction.c | 376 | query_max_volume() - (int)ob[1]->query_volume();
reaction.c | 378 | query_amount();
reaction.c | 382 | query_closed();
reaction.c | 383 | set_open();
reaction.c | 385 | write_dbg(sprintf("Move error (%d)...", vol));
reaction.c | 387 | write_dbg("too much...\n");
reaction.c | 388 | set_amount(vol_left);
reaction.c | 390 | short(0) + ".\n");
reaction.c | 391 | move(ob[1]);
reaction.c | 394 | if (closed) ob[1]->set_closed();
reaction.c | 398 | all_inventory(ob[1]);
reaction.c | 399 | write_dbg(sprintf("contents = %O\n", contents));
reaction.c | 400 | sizeof(contents);
reaction.c | 401 | dest_me();
reaction.c | 406 | dest_me();
reaction.c | 407 | move("/room/rubbish");
reaction.c | 409 | dest_me();
reaction.c | 410 | move("/room/rubbish");
reaction.c | 413 | if (closed) ob[1]->set_closed();
reaction.c | 420 | dest_me();
reaction.c | 447 | get_dir(REACTIONS + "*.rcn");
reaction.c | 448 | sizeof(files);
reaction.c | 451 | printf("files = %O\n", files);
reaction.c | 452 | compile_data(files);
reaction.c | 459 | compile_data( ({ fn }) );
money_handler.c | 27 | merge_money_arrays(mixed *m_array1, mixed *m_array2);
money_handler.c | 28 | filter_legal_money_array(mixed *m_array, string where);
money_handler.c | 29 | filter_legal_money_to_array(mixed *m_array, string where);
money_handler.c | 34 | creator_file( file_name( this_object() ) ) );
money_handler.c | 46 | if ( file_size( SAVE_FILE +".o" ) >
money_handler.c | 47 | unguarded((: restore_object, SAVE_FILE :));
money_handler.c | 63 | save_me() { unguarded( (: save_object, SAVE_FILE :) );
money_handler.c | 78 | query_all_values() { return copy( values );
money_handler.c | 86 | keys(values);
money_handler.c | 98 | query_values() { return copy( values[ "default" ] );
money_handler.c | 115 | copy( values[ where ] );
money_handler.c | 129 | copy( values[ where ] );
money_handler.c | 134 | sizeof( bits );
money_handler.c | 135 | sizeof( bits[ i ] );
money_handler.c | 143 | sizeof( arr );
money_handler.c | 180 | query_values_in(where);
money_handler.c | 182 | sizeof(values);
money_handler.c | 203 | save_me();
money_handler.c | 209 | sizeof( values[ where ] );
money_handler.c | 213 | save_me();
money_handler.c | 218 | save_me();
money_handler.c | 233 | member_array( type, values[ where ] );
money_handler.c | 237 | delete( values[ where ], i, 2 );
money_handler.c | 239 | map_delete( values, where );
money_handler.c | 241 | save_me();
money_handler.c | 263 | query_details() { return copy( details );
money_handler.c | 281 | return ({ "heads", "tails", "a head", "a tail", "unknown", 0 });
money_handler.c | 283 | copy( details[ word ] );
money_handler.c | 305 | save_me();
money_handler.c | 318 | map_delete( details, word );
money_handler.c | 319 | save_me();
money_handler.c | 335 | query_symbols() { return copy( symbols );
money_handler.c | 349 | copy( symbols[ word ] );
money_handler.c | 355 | add_symbol("Ankh-Morpork", "/d/am/money");
money_handler.c | 385 | save_me();
money_handler.c | 399 | map_delete( symbols, word );
money_handler.c | 400 | save_me();
money_handler.c | 427 | map_delete(aliases, type);
money_handler.c | 432 | save_me();
money_handler.c | 449 | explode(type, " ")[<1] });
money_handler.c | 468 | map_delete(adjectives, type);
money_handler.c | 473 | save_me();
money_handler.c | 543 | save_me();
money_handler.c | 564 | explode(type, " ");
money_handler.c | 585 | m_indices( values );
money_handler.c | 586 | sizeof( places );
money_handler.c | 603 | member_array( type, values[ where ] );
money_handler.c | 624 | sizeof( mon_array );
money_handler.c | 625 | query_value( mon_array[ i ], where );
money_handler.c | 645 | delete( mon_array, i, 2 );
money_handler.c | 650 | sizeof( mon_array );
money_handler.c | 653 | query_short_for( mon_array[ i ] );
money_handler.c | 655 | query_main_plural_for( mon_array[ i ] );
money_handler.c | 671 | query_property("place");
money_handler.c | 675 | create_money_array( 1000, place);
money_handler.c | 689 | return ({ });
money_handler.c | 723 | money_string( create_money_array( value, where ) );
money_handler.c | 727 | return (string)symboliser->symbolise_value( value );
money_handler.c | 759 | unsymbolise_string( str );
money_handler.c | 761 | create_money_array(value, where);
money_handler.c | 765 | query_weighted_values_in( where, 1 );
money_handler.c | 771 | explode(str, " ") - ({ "and", ",", "" });
money_handler.c | 772 | sizeof(bits);
money_handler.c | 788 | lower_case(type);
money_handler.c | 789 | sizeof(stuff);
money_handler.c | 790 | query_plural_for(stuff[pos]);
money_handler.c | 792 | strsrch(stuff[pos], " ", -1);
money_handler.c | 812 | while (match && i < sizeof(bits));
money_handler.c | 838 | query_total_value(money_array_from_string(str, where), where);
money_handler.c | 879 | make_money_array_payment("Lancre Crown", 2, mon_array, "Lancre", 0);
money_handler.c | 909 | member_array( type, mon_array );
money_handler.c | 913 | return ({ ({ type, value }), 0, mon_array });
money_handler.c | 921 | query_value( type, where );
money_handler.c | 930 | query_total_value( mon_array, where );
money_handler.c | 932 | query_total_value( mon_array, "default" );
money_handler.c | 949 | for ( i = ( sizeof( poss_values ) - 2 );
money_handler.c | 950 | member_array( poss_values[ i ], mon_array );
money_handler.c | 961 | return ({ ret, value, mon_array });
money_handler.c | 970 | sizeof(poss_values);
money_handler.c | 971 | member_array( poss_values[ i ], mon_array);
money_handler.c | 982 | member_array(mon_name, mon_array);
money_handler.c | 983 | member_array(mon_name, poss_values);
money_handler.c | 991 | return ({ ret, value, mon_array });
money_handler.c | 1018 | copy(thing->query_money_array());
money_handler.c | 1019 | make_money_array_payment( type, value, mon_array, where, 1);
money_handler.c | 1027 | return ({ stuff[MONEY_PAY_RETURN], stuff[MONEY_PAY_CHANGE] });
money_handler.c | 1051 | create_money_array(value, where);
money_handler.c | 1052 | sizeof(m_array);
money_handler.c | 1053 | make_payment(m_array[i], m_array[i + 1], money, where);
money_handler.c | 1058 | if (sizeof(p_array[0]) >
money_handler.c | 1059 | merge_money_arrays(pay_array, p_array[0]);
money_handler.c | 1060 | if (sizeof(p_array[1]) >
money_handler.c | 1061 | merge_money_arrays(change_array, p_array[1]);
money_handler.c | 1065 | if (sizeof(pay_array) >
money_handler.c | 1066 | sizeof(pay_array);
money_handler.c | 1069 | adjust_money(pay_array);
money_handler.c | 1077 | get_money_ob();
money_handler.c | 1078 | set_money_array(change_array);
money_handler.c | 1080 | clone_object(MONEY_OBJECT);
money_handler.c | 1100 | get_money_ob();
money_handler.c | 1102 | clone_object( MONEY_OBJECT );
money_handler.c | 1104 | set_money_array( create_money_array( value, where ) );
money_handler.c | 1106 | dest_me();
money_handler.c | 1129 | query_money_array();
money_handler.c | 1130 | filter_legal_money_array(m_array, where);
money_handler.c | 1133 | add_to_list(money);
money_handler.c | 1135 | move("/room/rubbish");
money_handler.c | 1150 | filter_legal_money_to_array();
money_handler.c | 1156 | filter_legal_money_to_array(m_array, where);
money_handler.c | 1162 | get_money_ob();
money_handler.c | 1164 | clone_object(MONEY_OBJECT);
money_handler.c | 1166 | set_money_array(money_arrays[0]);
money_handler.c | 1173 | get_money_ob();
money_handler.c | 1175 | clone_object(MONEY_OBJECT);
money_handler.c | 1177 | set_money_array(money_arrays[1]);
money_handler.c | 1180 | return ({ good, no_good });
money_handler.c | 1204 | return ({ ({ }), ({ }) });
money_handler.c | 1210 | return ({ ({ }), copy(m_array) });
money_handler.c | 1213 | sizeof(m_array);
money_handler.c | 1221 | return ({ good_array, no_good_array });
money_handler.c | 1245 | copy(m_array2);
money_handler.c | 1246 | sizeof(m_array1);
money_handler.c | 1247 | member_array(m_array1[i], new_m_array);
money_handler.c | 1251 | delete(new_m_array, idx, 2);
money_handler.c | 1258 | copy(m_array1);
money_handler.c | 1259 | sizeof(m_array2);
money_handler.c | 1260 | member_array(m_array2[i], new_m_array);
money_handler.c | 1264 | delete(new_m_array, idx, 2);
money_handler.c | 1296 | match_objects_for_existence(words, ({ player }));
money_handler.c | 1299 | money_array_from_string(words, place);
money_handler.c | 1304 | present(MONEY_ALIAS, player);
money_handler.c | 1308 | sizeof(m_array);
money_handler.c | 1316 | filter(things, (: $1->query_property("money") :));
money_handler.c | 1323 | merge_money_arrays(m_array, thing->query_money_array());
money_handler.c | 1325 | add_to_list(thing);
money_handler.c | 1327 | move("/room/rubbish");
money_handler.c | 1332 | filter_legal_money_array(m_array, place);
money_handler.c | 1339 | query_money_array();
money_handler.c | 1343 | this_player()->adjust_money(m_array);
money_handler.c | 1346 | add_to_list(monies[1]);
money_handler.c | 1348 | dest_me();
money_handler.c | 1355 | copy(monies[0]->query_money_array());
money_handler.c | 1356 | sizeof(m_array2);
money_handler.c | 1360 | this_player()->adjust_money(m_array2);
money_handler.c | 1389 | copy(payer->query_money_array());
money_handler.c | 1390 | make_money_array_payment( 0, value, mon_array, place, 0);
money_handler.c | 1399 | copy(payee->query_money_array());
money_handler.c | 1405 | return ({ stuff[MONEY_PAY_RETURN], rabbit[MONEY_PAY_RETURN] });
money_handler.c | 1407 | return ({ stuff[MONEY_PAY_RETURN], ({ }) });
money_handler.c | 1419 | values(query_all_values());
money_handler.c | 1421 | sizeof( elem );
money_handler.c | 1439 | query_all_places();
money_handler.c | 1456 | query_valid_types();
money_handler.c | 1472 | query_value( type, query_origin_of( type ) );
money_handler.c | 1486 | query_values_in( place );
money_handler.c | 1489 | sizeof( values );
money_handler.c | 1510 | query_values_in( place );
money_handler.c | 1512 | sizeof( values );
money_handler.c | 1540 | query_values_in(where);
money_handler.c | 1541 | sizeof(array);
state_change.c | 46 | set_amount_of_ob( object ob, int amount );
state_change.c | 60 | seteuid("/secure/master"->creator_file(file_name(this_object())));
state_change.c | 62 | get_dir(DATA_DIR + "*.dat");
state_change.c | 63 | sizeof(files);
state_change.c | 66 | compile_data(files);
state_change.c | 103 | short();
state_change.c | 106 | this_player();
state_change.c | 112 | clone_object(c->result);
state_change.c | 115 | evaluate(f, ob, ret, player);
state_change.c | 119 | set_amount(to_int(ob->query_amount() * c->factor));
state_change.c | 121 | query_weight_unit();
state_change.c | 127 | query_weight_unit();
state_change.c | 131 | set_weight(to_int(ob->query_weight() * c->factor));
state_change.c | 136 | query_medium_alias(), transformation );
state_change.c | 149 | dest_me();
state_change.c | 151 | set_amount( amount );
title_handler.c | 16 | load_me();
title_handler.c | 17 | save_me();
title_handler.c | 27 | load_me();
title_handler.c | 66 | find_player(person);
title_handler.c | 68 | add_player_title(title);
title_handler.c | 76 | save_me();
title_handler.c | 88 | return ({ });
title_handler.c | 96 | add_controlled_title("magistrate", NOMIC_HANDLER, "is_magistrate_somewhere");
title_handler.c | 104 | new(class blob);
title_handler.c | 108 | save_me();
title_handler.c | 133 | add_player_title(title);
title_handler.c | 135 | map_delete(_pending, player->query_name());
title_handler.c | 136 | save_me();
title_handler.c | 138 | query_all_player_titles();
title_handler.c | 144 | remove_player_title(title);
title_handler.c | 153 | call_out((: check_player(find_player($1)) :), 2, person);
title_handler.c | 159 | unguarded((: save_object(SAVE_FILE) :));
title_handler.c | 164 | unguarded((: restore_object(SAVE_FILE, 1) :));
group_handler.c | 39 | is_group( string group );
group_handler.c | 40 | is_member( string name, object person );
group_handler.c | 41 | is_invited( string name, object person );
group_handler.c | 42 | invitations_to( string name );
group_handler.c | 43 | query_group_short( string name );
group_handler.c | 44 | members_of( string name );
group_handler.c | 45 | leader_of( string name );
group_handler.c | 46 | short_to_name( string short );
group_handler.c | 47 | create_group( string name );
group_handler.c | 48 | remove_group( string name );
group_handler.c | 49 | add_invite( string name, object person, int flag );
group_handler.c | 50 | remove_invite( string name, object person );
group_handler.c | 51 | add_member( string name, object person );
group_handler.c | 52 | remove_member( string name, object person );
group_handler.c | 53 | set_leader( string name, object person, object appointer );
group_handler.c | 54 | notify_group( string name, object broadcaster, mixed message );
group_handler.c | 55 | disband_group( string name, mixed message );
group_handler.c | 56 | shuffle_new_leader( string group, int way, object *exclude );
group_handler.c | 57 | leader_goes_linkdead( string player, string event_type );
group_handler.c | 60 | broadcast_to_groups( string *name, string message );
group_handler.c | 61 | query_groups();
group_handler.c | 62 | set_group_short( string, string);
group_handler.c | 68 | time();
group_handler.c | 84 | disband_group( name, 0 );
group_handler.c | 103 | keys( _groups );
group_handler.c | 114 | undefinedp( _groups[ group ] );
group_handler.c | 257 | lower_case( short );
group_handler.c | 258 | explode( short, " " );
group_handler.c | 265 | implode( words, " " );
group_handler.c | 298 | new( class group ) ]);
group_handler.c | 302 | time();
group_handler.c | 324 | map_delete(_groups, group);
group_handler.c | 325 | set_group_short(new_group, new_group);
group_handler.c | 331 | remove_object_from_channel( "group_" + group, member );
group_handler.c | 333 | group_membership_removed();
group_handler.c | 335 | add_effect( EFFECT, new_group);
group_handler.c | 339 | add_object_to_channel( "group_" + new_group, member );
group_handler.c | 342 | query_group_short( new_group ) );
group_handler.c | 389 | this_object() );
group_handler.c | 392 | map_delete( _groups, name );
group_handler.c | 436 | call_out( (: remove_invite, name, person :), INVITE_TIMEOUT );
group_handler.c | 498 | add_effect( EFFECT, name );
group_handler.c | 502 | add_object_to_channel( "group_" + name, person );
group_handler.c | 505 | query_cap_name() + " has joined the group." }) );
group_handler.c | 507 | if( sizeof( _groups[ name ]->members ) >
group_handler.c | 509 | handle_group_follow( name, person, ({ _groups[ name ]->leader }), 0, 0 );
group_handler.c | 513 | query_group_short( name ) );
group_handler.c | 550 | query_cap_name() + " has left the group." }) );
group_handler.c | 562 | remove_assister( person );
group_handler.c | 575 | remove_assisting( person );
group_handler.c | 584 | remove_object_from_channel( "group_" + name, person );
group_handler.c | 589 | group_membership_removed();
group_handler.c | 614 | call_out( "disband_group", 0, name );
group_handler.c | 622 | handle_group_follow( name, person, _groups[ name ]->members, 1, 1 );
group_handler.c | 628 | handle_group_follow( name, member, ({ person }), 1, 1 );
group_handler.c | 633 | remove_title( GROUP_TITLE );
group_handler.c | 639 | remove_group( name );
group_handler.c | 680 | base_name( this_object() ) );
group_handler.c | 691 | query_followers() & _groups[ name ]->members );
group_handler.c | 697 | handle_group_follow( name, member, ({ old_leader }), 1, 1 );
group_handler.c | 698 | handle_group_follow( name, member, ({ person }), 0, 1 );
group_handler.c | 704 | query_group_short( name ) );
group_handler.c | 710 | query_name();
group_handler.c | 712 | base_name( this_object() ) );
group_handler.c | 735 | query_group_short( name ) );
group_handler.c | 759 | time() }) );
group_handler.c | 781 | notify_group( name, this_object(), message );
group_handler.c | 784 | members_of( name );
group_handler.c | 785 | leader_of( name );
group_handler.c | 792 | remove_member( name, bugger );
group_handler.c | 795 | remove_member( name, leader );
group_handler.c | 797 | remove_group( name );
group_handler.c | 821 | members_of( group );
group_handler.c | 831 | filter( members, (: $1 && interactive( $1 ) :) );
group_handler.c | 867 | base_name( this_object() ) );
group_handler.c | 873 | base_name( this_object() ) );
group_handler.c | 877 | query_group();
group_handler.c | 881 | base_name( this_object() ) );
group_handler.c | 889 | base_name( this_object() ) );
group_handler.c | 893 | members_of( group );
group_handler.c | 902 | base_name( this_object() ) );
group_handler.c | 910 | disband_group( group );
group_handler.c | 924 | filter( what, (: $1->add_follower( $( who ) ) :) );
group_handler.c | 929 | query_multiple_short( what );
group_handler.c | 936 | filter( what, (: $1->remove_follower( $( who ) ) :) );
group_handler.c | 942 | query_multiple_short( what );
group_handler.c | 948 | printf( "Barf.\n" );
group_handler.c | 953 | notify_group( group, who, ({ mess_to_me, mess_to_others }) );
group_handler.c | 979 | keys( _groups );
group_handler.c | 983 | notify_group( group, this_player(), message );
monster_handler.c | 25 | seteuid("Room");
monster_handler.c | 26 | unguarded((: restore_object, "/save/monster-handler" :));
monster_handler.c | 36 | unguarded((: save_object, "/save/monster-handler" :));
monster_handler.c | 40 | unguarded((: save_object, "/save/monster-handler" :));
non_refuelling_lantern.c | 20 | create();
non_refuelling_lantern.c | 28 | short( 0 );
non_refuelling_lantern.c | 33 | this_player()->add_failed_mess(this_object(), "$D is not lit.\n", ({ }));
non_refuelling_lantern.c | 36 | remove_burner( this_object() );
non_refuelling_lantern.c | 38 | set_light( 0 );
non_refuelling_lantern.c | 43 | do_extinguish();
non_refuelling_lantern.c | 57 | add_burner( this_object() );
non_refuelling_lantern.c | 59 | set_light( BRIGHTNESS );
non_refuelling_lantern.c | 64 | this_player()->add_command("light", this_object());
non_refuelling_lantern.c | 65 | this_player()->add_command("extinguish", this_object());
non_refuelling_lantern.c | 66 | this_player()->add_command("dowse", this_object());
non_refuelling_lantern.c | 74 | environment( this_object() );
non_refuelling_lantern.c | 75 | remove_burner( this_object() );
non_refuelling_lantern.c | 76 | set_light( 0 );
non_refuelling_lantern.c | 79 | write( poss_short() +" burns out.\n" );
non_refuelling_lantern.c | 80 | tell_room( environment(env), poss_short() +" burns out.\n", env );
non_refuelling_lantern.c | 82 | say( poss_short() +" burns out.\n" );
non_refuelling_lantern.c | 89 | out_of_fuel();
non_refuelling_lantern.c | 100 | pretty_plural(thing);
non_refuelling_lantern.c | 104 | set_light( 0 );
non_refuelling_lantern.c | 105 | remove_burner( this_object() );
non_refuelling_lantern.c | 106 | dest_me();
non_refuelling_lantern.c | 126 | add_burner( this_object() );
non_refuelling_lantern.c | 128 | set_light(BRIGHTNESS);
non_refuelling_lantern.c | 130 | init_dynamic_arg( arg["::"] );
map_helper.c | 23 | seteuid( (string)master()->get_bb_uid() );
map_helper.c | 32 | tell_object( find_living( LOGTO ), "%^RED%^saving%^RESET%^ "+ loaded +"\n");
map_helper.c | 47 | unguarded((: save_object, "/save/map/" + loaded :));
map_helper.c | 50 | unguarded((: rm("/save/map/" + loaded) :));
map_helper.c | 72 | save_dir();
map_helper.c | 75 | replace_string( dir, "/", "_" );
map_helper.c | 89 | if ( file_size( "/save/map/" + tmp_file + ".o" ) >
map_helper.c | 94 | unguarded((: restore_object, "/save/map/" + tmp_file :));
map_helper.c | 97 | tell_object( find_living( LOGTO ), "%^BLUE%^newmap%^RESET%^ "+ tmp_file +"\n");
map_helper.c | 126 | check_dir( dir );
map_helper.c | 138 | check_dir( dir );
map_helper.c | 140 | return ([ ]);
map_helper.c | 152 | check_dir( dir );
map_helper.c | 164 | check_dir( dir );
map_helper.c | 166 | return ([ ]);
map_helper.c | 178 | check_dir( dir );
map_helper.c | 190 | check_dir( dir );
map_helper.c | 192 | return ([ ]);
map_helper.c | 204 | check_dir( dir );
map_helper.c | 217 | check_dir( dir );
map_helper.c | 219 | return ([ ]);
map_helper.c | 233 | check_dir( dir );
map_helper.c | 246 | check_dir( dir );
map_helper.c | 248 | return ([ ]);
map_helper.c | 260 | check_dir( dir );
map_helper.c | 273 | check_dir( dir );
map_helper.c | 275 | return ([ ]);
map_helper.c | 286 | check_dir( dir );
map_helper.c | 299 | check_dir( dir );
map_helper.c | 301 | return ([ ]);
map_helper.c | 312 | check_dir( dir );
map_helper.c | 315 | map_delete( map, room );
map_helper.c | 321 | map_delete( shorts, room );
map_helper.c | 326 | map_delete( movezones, room );
map_helper.c | 331 | map_delete( changetimes, room );
map_helper.c | 337 | map_delete( clusters, room );
map_helper.c | 344 | map_delete( coords, room );
map_helper.c | 349 | map_delete( sizes, room );
bounty.c | 39 | seteuid( "Room" );
bounty.c | 40 | if ( file_size( SAVE_FILE +".o" ) >
bounty.c | 41 | unguarded( (: restore_object, SAVE_FILE :) );
bounty.c | 42 | call_out( "tidy_bounties", 120 );
bounty.c | 45 | save_file() { unguarded( (: save_object, SAVE_FILE :) );
bounty.c | 48 | map_delete( bounty, word );
bounty.c | 49 | save_file();
bounty.c | 53 | time();
bounty.c | 63 | ctime( now ), word );
bounty.c | 64 | map_delete( bounty, word );
bounty.c | 70 | ctime( now ), word, record->value );
bounty.c | 73 | ctime( now ), word );
bounty.c | 74 | find_player( word );
bounty.c | 78 | map_delete( bounty, word );
bounty.c | 87 | map_delete( collect, word );
bounty.c | 92 | ctime( now ), record->value, word );
bounty.c | 93 | find_player( word );
bounty.c | 97 | map_delete( collect, word );
bounty.c | 99 | save_file();
bounty.c | 107 | save_file();
bounty.c | 110 | dest_me() { destruct( this_object() );
bounty.c | 132 | time();
bounty.c | 137 | query_short();
bounty.c | 160 | query_short();
bounty.c | 162 | new( class bounty );
bounty.c | 175 | if ( sizeof( record->victims ) >
bounty.c | 176 | call_out( "inform_bounty", 30, thing );
bounty.c | 179 | save_file();
bounty.c | 199 | query_short();
bounty.c | 201 | call_out( "well_done", 30, thing, (string)victim->query_gender() );
bounty.c | 209 | sizeof( killers );
bounty.c | 218 | new( class bounty );
bounty.c | 232 | lower_case( $1 ) :) ) ) );
bounty.c | 233 | map_delete( bounty, lower_case( killed ) );
bounty.c | 235 | save_file();
bounty.c | 243 | tell_object( thing, "You feel the price on your head rise.\n" );
bounty.c | 264 | lower_case( killer );
bounty.c | 267 | environment( this_player() )->query_property( "place" );
bounty.c | 276 | call_out( "issue_warrant", 30, killer );
bounty.c | 277 | save_file();
bounty.c | 288 | find_player( killer );
bounty.c | 293 | remove_hide_invis( "hide" );
bounty.c | 313 | lower_case( (string)this_player()->query_short() );
bounty.c | 319 | environment( this_player() )->query_property( "place" );
bounty.c | 324 | this_player()->set_title( "bounty", "Bounty Hunter" );
bounty.c | 325 | map_delete( collect, collector );
bounty.c | 326 | save_file();
bounty.c | 336 | query_bounty( string word ) { return !undefinedp( bounty[ word ] );
bounty.c | 351 | this_player( 1 )->query_creator();
bounty.c | 354 | environment( this_player() )->query_property( "place" );
bounty.c | 366 | ctime( record->time + EXPIRY ) );
bounty.c | 372 | ctime( record->time + EXPIRY ) );
bounty.c | 386 | environment( this_player() )->query_property( "place" );
bounty.c | 394 | ctime( record->time + EXPIRY ) );
bounty.c | 401 | environment( this_player() )->query_property( "place" );
property_tracker.c | 19 | save_file();
property_tracker.c | 25 | create();
property_tracker.c | 27 | seteuid( "Root" );
property_tracker.c | 29 | set_name( "tracker" );
property_tracker.c | 30 | set_short( "property tracker" );
property_tracker.c | 33 | unguarded( (: restore_object, "/save/property_tracker.o" :) );
property_tracker.c | 47 | save_file();
property_tracker.c | 86 | if ( time() >
property_tracker.c | 89 | query_name(), person );
property_tracker.c | 92 | if ( member_array( property, _invalid_properties ) >
property_tracker.c | 110 | remove_property( property );
property_tracker.c | 114 | add_property( CACHE_PROPERTY, time() );
property_tracker.c | 116 | remove_property( CACHE_PROPERTY );
property_tracker.c | 119 | add_skill_level( "other.language.common.spoken", -person->query_skill( "other.language.common.spoken" ) );
property_tracker.c | 120 | add_skill_level( "other.language.common.written", -person->query_skill( "other.language.common.written" ) );
property_tracker.c | 129 | copy( _invalid_properties );
property_tracker.c | 161 | file_name( func );
property_tracker.c | 165 | file_name( obj );
property_tracker.c | 173 | save_file();
property_tracker.c | 191 | map_delete( _property_funcs, property );
property_tracker.c | 195 | save_file();
property_tracker.c | 200 | unguarded( (: save_object, "/save/property_tracker" :) );
property_tracker.c | 205 | unguarded( (: rm, "/save/property_tracker.o" :) );
property_tracker.c | 214 | remove_property( property );
property_tracker.c | 215 | add_property( "no score", 1 );
property_tracker.c | 225 | remove_property( property );
wander_handler.c | 20 | do_move_after();
wander_handler.c | 43 | do_move_after();
wander_handler.c | 44 | move_monsters();
wander_handler.c | 45 | delete_move_after( object monster );
wander_handler.c | 46 | do_wander(int running_away, object monster);
wander_handler.c | 55 | copy(fetch_variable(thing));
wander_handler.c | 108 | time() );
wander_handler.c | 116 | remove_call_out(move_call_out_id);
wander_handler.c | 118 | time());
wander_handler.c | 121 | insert(travellers, new_traveller, mid);
wander_handler.c | 127 | time());
wander_handler.c | 144 | previous_object();
wander_handler.c | 157 | time() + delay, dest:dest);
wander_handler.c | 160 | add_traveller(new_traveller);
wander_handler.c | 176 | if(sizeof(travellers) >
wander_handler.c | 182 | query_virtual_move();
wander_handler.c | 183 | query_true_location();
wander_handler.c | 184 | get_next_route_direction();
wander_handler.c | 192 | catch(monster->do_command(direc));
wander_handler.c | 199 | environment( monster )->set_destination( direc );
wander_handler.c | 200 | environment( monster )->query_destination( direc, monster );
wander_handler.c | 202 | qdes( direc, true_location );
wander_handler.c | 206 | catch(monster->do_command( direc ));
wander_handler.c | 208 | force_load();
wander_handler.c | 209 | move( find_object( "/room/virtual" ) );
wander_handler.c | 211 | set_true_location( true_location );
wander_handler.c | 216 | set_true_location( true_location );
wander_handler.c | 218 | environment(monster);
wander_handler.c | 219 | remove_exit(direc);
wander_handler.c | 222 | do_command(direc);
wander_handler.c | 223 | remove_exit(direc);
wander_handler.c | 232 | add_traveller( tmp );
wander_handler.c | 235 | file_name(environment(tmp->monster)) != tmp->dest);
wander_handler.c | 236 | stopped_route(!refuse);
wander_handler.c | 237 | map_delete( travelpos, tmp->monster );
wander_handler.c | 240 | filter(travelpos, (: $1 :));
wander_handler.c | 244 | time() );
wander_handler.c | 254 | reset_eval_cost();
wander_handler.c | 256 | if(sizeof(wanderers) >
wander_handler.c | 259 | sizeof(filter(thing->monsters, (:$1:)));
wander_handler.c | 261 | reset_eval_cost();
wander_handler.c | 265 | call_out((: do_move_after :), 0);
wander_handler.c | 267 | find_pos(wanderers, (: $1->movetime :), movetime, ref found);
wander_handler.c | 285 | remove_call_out(after_call_out_id);
wander_handler.c | 286 | call_out((: do_move_after :), movetime - time());
wander_handler.c | 304 | call_out((: do_move_after :), movetime - time());
wander_handler.c | 319 | do_wander(runaway, previous_object());
wander_handler.c | 321 | previous_object()->query_move_after();
wander_handler.c | 323 | delete_move_after(previous_object());
wander_handler.c | 330 | random( move_after[ 1 ] ));
wander_handler.c | 341 | map_delete(wanderpos, monster);
wander_handler.c | 365 | query_virtual_move();
wander_handler.c | 366 | query_true_location();
wander_handler.c | 371 | environment( monster )->query_direc( monster );
wander_handler.c | 373 | qdir( true_location );
wander_handler.c | 375 | query_propery( LAST_LOC_PROPERTY );
wander_handler.c | 379 | if (!direcs) direcs = ({ });
wander_handler.c | 380 | shuffle( direcs );
wander_handler.c | 383 | environment( monster )->expand_alias( direcs[ 0 ] );
wander_handler.c | 384 | environment( monster )->set_destination( direcs[ 0 ] );
wander_handler.c | 385 | environment( monster )->query_destination( direcs[0], monster );
wander_handler.c | 387 | qdes( direcs[ 0 ], true_location );
wander_handler.c | 388 | if ( (!destination && !virtual_move) || (sizeof(direcs) >
wander_handler.c | 395 | query_move_zones();
wander_handler.c | 398 | query_zones();
wander_handler.c | 400 | query_zones( destination );
wander_handler.c | 411 | if (sizeof(last_locs) >
wander_handler.c | 413 | add_property( LAST_LOC_PROPERTY, last_locs);
wander_handler.c | 427 | environment(monster);
wander_handler.c | 428 | remove_exit(direcs[0]);
wander_handler.c | 429 | add_exit(direcs[0], destination, "plain");
wander_handler.c | 430 | reset_eval_cost();
wander_handler.c | 432 | do_move(direcs[0]);
wander_handler.c | 434 | remove_exit(direcs[0]);
wander_handler.c | 438 | force_load();
wander_handler.c | 439 | move( find_object("/room/virtual"));
wander_handler.c | 440 | set_true_location(destination);
wander_handler.c | 451 | reset_eval_cost();
wander_handler.c | 453 | if(sizeof(wanderers) >
wander_handler.c | 456 | sizeof(filter(thing->monsters, (:$1:)));
wander_handler.c | 458 | reset_eval_cost();
wander_handler.c | 462 | reset_eval_cost();
wander_handler.c | 466 | map_delete(wanderpos, monster);
wander_handler.c | 468 | query_move_after();
wander_handler.c | 470 | time() + move_after[ 0 ] + random( move_after[ 1 ] );
wander_handler.c | 474 | add_move_after( monster, movetime );
wander_handler.c | 475 | reset_eval_cost();
wander_handler.c | 477 | do_wander(0, monster);
wander_handler.c | 488 | time());
wander_handler.c | 492 | filter(wanderpos, (: $1 :));
wander_handler.c | 511 | do_move_after();
haggle_handler.c | 195 | do_command( "boggle" );
haggle_handler.c | 196 | random( sizeof( bodged_sayings ) );
haggle_handler.c | 197 | do_command( "'"+ bodged_sayings[ number ] );
haggle_handler.c | 198 | return ({ 0, asking, insults });
haggle_handler.c | 201 | random( sizeof( accept_sayings ) );
haggle_handler.c | 203 | do_command( accept_sayings[ number ][ 0 ] );
haggle_handler.c | 204 | do_command( "'"+ accept_sayings[ number ][ 1 ] );
haggle_handler.c | 206 | do_command( "'"+ accept_sayings[ number ] );
haggle_handler.c | 207 | return ({ 1, asking, insults });
haggle_handler.c | 209 | if ( ( offer * insult_factor( keeper, customer ) ) >
haggle_handler.c | 215 | random( sizeof( offers_sayings ) );
haggle_handler.c | 217 | do_command( offers_sayings[ number ][ 0 ] );
haggle_handler.c | 222 | money_value_string( offer, place ) );
haggle_handler.c | 224 | money_value_string( asking, place ) );
haggle_handler.c | 225 | do_command( "'"+ text );
haggle_handler.c | 226 | return ({ 0, asking, insults });
haggle_handler.c | 230 | random( sizeof( insult_sayings ) );
haggle_handler.c | 231 | do_command( "'"+ insult_sayings[ number ] );
haggle_handler.c | 232 | return ({ 0, asking, insults });
haggle_handler.c | 234 | random( sizeof( sodoff_sayings ) );
haggle_handler.c | 235 | do_command( "lsay "+ sodoff_sayings[ 0 ] );
haggle_handler.c | 236 | do_command( "'"+ sodoff_sayings[ 1 ] );
haggle_handler.c | 237 | do_command( "'"+ sodoff_sayings[ 2 ] );
haggle_handler.c | 238 | return ({ 0, 0, -1 });
haggle_handler.c | 246 | do_command( "boggle" );
haggle_handler.c | 247 | random( sizeof( bodged_sayings ) );
haggle_handler.c | 248 | do_command( "'"+ bodged_sayings[ number ] );
haggle_handler.c | 249 | return ({ 0, asking, insults });
haggle_handler.c | 252 | random( sizeof( accept_sayings ) );
haggle_handler.c | 254 | do_command( accept_sayings[ number ][ 0 ] );
haggle_handler.c | 255 | do_command( "'"+ accept_sayings[ number ][ 1 ] );
haggle_handler.c | 257 | do_command( "'"+ accept_sayings[ number ] );
haggle_handler.c | 258 | return ({ 1, asking, insults });
fuel_handler.c | 16 | creator_file( file_name( this_object() ) ) );
fuel_handler.c | 18 | call_out( "consume_fuel", FUEL_TIME );
fuel_handler.c | 33 | catch( burners->consume_fuel() );
fuel_handler.c | 34 | call_out( "consume_fuel", FUEL_TIME );
clusters.c | 38 | get_cluster(mixed);
clusters.c | 41 | db_fetch(fd, row);
clusters.c | 47 | sscanf(tmp, "%d", i);
clusters.c | 62 | new(class cluster);
clusters.c | 70 | db_exec(db, "select member from cluster_members where cluster_number = %d", x);
clusters.c | 76 | cdb_fetch(db, rows);
clusters.c | 78 | db_exec(db, "select level, in_cluster from cluster_list where cluster_number = %d", x);
clusters.c | 81 | db_close(db);
clusters.c | 82 | db_connect("localhost","discworld",CONFIG_DB_USER);
clusters.c | 86 | cdb_fetch(db, 1);
clusters.c | 92 | db_exec(db, "select contact from cluster_contacts where cluster_number = %d", x);
clusters.c | 98 | cdb_fetch(db, rows);
clusters.c | 108 | save_variable($(x)), 1):));
clusters.c | 114 | db_escape(""+$1)):));
clusters.c | 117 | db_escape(""+$1)):));
clusters.c | 122 | make_clusters(mixed);
clusters.c | 129 | db_connect("localhost","discworld",CONFIG_DB_USER);
clusters.c | 134 | load(i);
clusters.c | 136 | error(sprintf("%d in two or more clusters", i));
clusters.c | 146 | save(fixing);
clusters.c | 151 | load(i);
clusters.c | 153 | reset_eval_cost();
clusters.c | 159 | error(sprintf("%d in two or more clusters", i));
clusters.c | 164 | load($1)->cluster_number:)));
clusters.c | 166 | save(fixing);
clusters.c | 169 | map(fixing->members, (:efun::call_out((fix_contacts), 0, $1):));
clusters.c | 173 | map(fixing->members, fix_room_contacts);
clusters.c | 179 | get_dir("/save/clusters/");
clusters.c | 181 | rm(sprintf("/save/clusters/%s", file));
clusters.c | 190 | load(start)->level + 1);
clusters.c | 205 | qdd(room);
clusters.c | 206 | filter(allocate(sizeof(qdd) / 2, (:$(qdd)[$1 * 2 + 1]:)), f, room);
clusters.c | 212 | load($1)->contacts:);
clusters.c | 215 | query_cluster($1):);
clusters.c | 217 | load($1)->cluster_number:);
clusters.c | 227 | error(sprintf("%O already in a cluster", start));
clusters.c | 252 | reset_eval_cost();
clusters.c | 262 | load(tmp);
clusters.c | 281 | evaluate($(real), $2)):);
clusters.c | 283 | implode(exits, convert_and_add, contacts);
clusters.c | 295 | filter(todo + list + contacts, (:!used[$1]:));
clusters.c | 303 | error("corrupt todo list");
clusters.c | 315 | if((maxnum - oldmax) >
clusters.c | 316 | make_clusters(current->this_cluster - 1);
clusters.c | 321 | call_out(fix_contacts, 0, i);
clusters.c | 323 | call_out(fix_room_contacts, 0, i);
clusters.c | 326 | call_out((:cache = ([]), setup_done = 1:), 2);
clusters.c | 333 | db_escape(thing));
clusters.c | 351 | query_cluster(room);
clusters.c | 353 | if(ret && unguarded((:file_size(sprintf("/save/clusters/%d", $(ret))):)) >
clusters.c | 361 | get_cluster(room);
clusters.c | 364 | get_cluster(ret);
clusters.c | 367 | get_cluster(ret);
clusters.c | 373 | time();
clusters.c | 375 | make_clusters(room);
clusters.c | 384 | db_exec(db, "select member from cluster_members where cluster_number = %d", clust);
clusters.c | 386 | return ({ });
clusters.c | 387 | allocate(rows, (:cdb_fetch(db, $1 + 1)[0]:));
clusters.c | 392 | db_exec(db, "select contact from cluster_contacts where cluster_number = %d", clust);
clusters.c | 394 | return ({ });
clusters.c | 395 | allocate(rows, (:cdb_fetch(db, $1 + 1)[0]:));
clusters.c | 409 | get_members(start);
clusters.c | 416 | reset_eval_cost();
clusters.c | 423 | get_contacts(ob);
clusters.c | 444 | reset_eval_cost();
clusters.c | 448 | get_members(bing);
clusters.c | 455 | get_members(bing);
clusters.c | 465 | real_time();
clusters.c | 468 | return ({});
clusters.c | 473 | reset_eval_cost();
clusters.c | 477 | qdd(ob);
clusters.c | 478 | sizeof(exits);
clusters.c | 490 | if (!found && (++depth >= sizeof(key) || (real_time() - t) >
clusters.c | 499 | reset_eval_cost();
clusters.c | 512 | error("read the error trace");
clusters.c | 514 | reset_eval_cost();
clusters.c | 516 | implode(clusters, (:$1 + load($2)->members:), ({}));
clusters.c | 520 | reset_eval_cost();
clusters.c | 524 | error("cluster error");
clusters.c | 543 | time();
clusters.c | 547 | return ({});
clusters.c | 557 | catch(db_close(db));
clusters.c | 560 | cp("/log/runtime", "/w/wodan/clusterruntime");
clusters.c | 561 | cp("/log/catch", "/w/wodan/clustercatch");
clusters.c | 564 | destruct(this_object());
clusters.c | 565 | tell_creator("wodan", "would have dested");
clusters.c | 571 | base_name(start);
clusters.c | 573 | error("illegal start point");
clusters.c | 576 | base_name(end);
clusters.c | 578 | error("illegal end point");
clusters.c | 583 | db_close(db);
clusters.c | 584 | db_connect("localhost","discworld", CONFIG_DB_USER);
clusters.c | 594 | LEVEL(from);
clusters.c | 597 | query_top_cluster(end);
clusters.c | 600 | return ({});
clusters.c | 605 | query_cluster(start);
clusters.c | 606 | query_cluster(end);
clusters.c | 608 | get_cluster(start);
clusters.c | 609 | get_cluster(end);
clusters.c | 617 | LEVEL(from);
clusters.c | 623 | error("wrong level");
clusters.c | 626 | find_places(from, to, places);
clusters.c | 628 | printf("level %d sizeof places %d\n", level, sizeof(places));
clusters.c | 631 | return ({});
clusters.c | 633 | debug(oldplaces);
clusters.c | 634 | error("this can't happen, honest!");
clusters.c | 643 | query_cluster(start);
clusters.c | 644 | query_cluster(end);
clusters.c | 646 | get_cluster(start);
clusters.c | 647 | get_cluster(end);
clusters.c | 651 | find_places(from, to, places);
clusters.c | 655 | return ({});
clusters.c | 657 | debug(oldplaces);
clusters.c | 658 | error("this can't happen, honest!!");
clusters.c | 665 | find_route(start, end, places);
clusters.c | 670 | db_close(db);
clusters.c | 671 | destruct(this_object());
armoury.c | 60 | rehash_all();
armoury.c | 61 | rehash(string place);
armoury.c | 62 | walk_directory (string);
armoury.c | 66 | unguarded( (: save_object(SAVE, 3) :));
armoury.c | 71 | unguarded( (: restore_object(SAVE, 1) :));
armoury.c | 75 | set_short( "" + mud_name() + " Armoury" );
armoury.c | 76 | add_property( "determinate", "the " );
armoury.c | 77 | set_light( 50 );
armoury.c | 90 | load_me();
armoury.c | 91 | rehash_all();
armoury.c | 117 | return ([ ]);
armoury.c | 120 | request(string, int, string);
armoury.c | 121 | forbid(string);
armoury.c | 126 | init();
armoury.c | 129 | rehash($4[0]) :));
armoury.c | 131 | rehash($4[0]) :));
armoury.c | 133 | request($4[0], $4[1], 0):));
armoury.c | 135 | request($4[0], $4[1], $4[2]):));
armoury.c | 136 | add_command("forbid", "", (:forbid, "":));
armoury.c | 137 | add_command("forbid", "<string'name'>", (:forbid($4[0]):));
armoury.c | 140 | add_command(comm, "", (:call_other(this_object(), $(comm)):));
armoury.c | 156 | walk_directory(base_dir);
armoury.c | 157 | if (!arrayp(dirs)) dirs = ({ });
armoury.c | 161 | get_dir(dir + "*" + extension);
armoury.c | 193 | clone_object(_smalls[area][0]);
armoury.c | 219 | request_item("long sword", 85)->move(npc);
armoury.c | 222 | request_item("leather jacket", random(100));
armoury.c | 258 | printf( "No file for item \"%s\".\n", word );
armoury.c | 260 | file_name( previous_object() ) );
armoury.c | 265 | if(file_size( filename ) >
armoury.c | 266 | clone_object(filename);
armoury.c | 269 | printf( "Cannot find item \"%s\".\n", word );
armoury.c | 271 | file_name( previous_object() ) );
armoury.c | 294 | add_property(ARMOURY_RECYCLING_AREA_PROP, area);
armoury.c | 296 | set_percentage( percent );
armoury.c | 311 | explode(path, "/");
armoury.c | 362 | make_list("/obj/armours/", ({".arm", ".c"}));
armoury.c | 365 | make_list("/obj/clothes/", ({".clo", ".c"}));
armoury.c | 368 | make_list("/obj/weapons/", ({".wep", ".c"}));
armoury.c | 371 | make_list( "/obj/scabbards/", ({ ".sca", ".c" }));
armoury.c | 375 | make_list( "/obj/jewellery/", ({ ".arm", ".clo", ".c" }));
armoury.c | 379 | make_list( "/obj/food/", ({ ".ob", ".food", ".c" }));
armoury.c | 382 | make_list( "/obj/misc/", ({ ".ob", ".c" }));
armoury.c | 385 | make_list( "/obj/plants/", ({ ".ob", ".food", ".c" }));
armoury.c | 406 | save_me();
armoury.c | 408 | write("Rehash of " + thing + " complete.\n");
armoury.c | 419 | rehash(explode(dir, "/")[1]);
armoury.c | 433 | call_out("rehash", i, thing);
armoury.c | 438 | query_types() { return TYPES + keys(_areas);
armoury.c | 480 | copy (items);
armoury.c | 484 | map_delete(items, item);
armoury.c | 494 | request_item( word, percentage, area );
armoury.c | 497 | add_failed_mess(word + " not found.\n");
armoury.c | 501 | write( (string)thing->a_short() +" has been placed in here.\n" );
armoury.c | 502 | move( this_object() );
armoury.c | 516 | sizeof(_areas[tmp]) });
armoury.c | 537 | get_dir(dir, -1);
armoury.c | 538 | if (!arrayp(tmp)) tmp = ({ });
armoury.c | 545 | walk_directory(dir + file[0] + "/");
playerinfo.c | 88 | query_timeouts();
playerinfo.c | 89 | filename(string name);
playerinfo.c | 90 | query_events();
playerinfo.c | 91 | query_debounced(string event);
playerinfo.c | 92 | query_lord_only(string event);
playerinfo.c | 93 | query_source_ok(string event, string source);
playerinfo.c | 94 | query_deleter_ok(string event, object deleter);
playerinfo.c | 95 | query_can_add(string e, object p);
playerinfo.c | 96 | query_can_delete(string e, object p);
playerinfo.c | 97 | query_can_handle_alts(object p);
playerinfo.c | 98 | do_debouncing(string player, class dbentry entry);
playerinfo.c | 99 | do_timeout();
playerinfo.c | 100 | load_player(string player);
playerinfo.c | 101 | save_player(string player);
playerinfo.c | 102 | player_remove(string player);
playerinfo.c | 107 | query_header(string player);
playerinfo.c | 110 | query_access_log(object source, string player, int lastn);
playerinfo.c | 111 | query_event(object source, string player, string event);
playerinfo.c | 112 | add_alt(object creator, string player, string alt);
playerinfo.c | 113 | delete_alt(object creator, string player, string alt);
playerinfo.c | 114 | query_alerts();
playerinfo.c | 115 | query_alerts_for( string player );
playerinfo.c | 116 | is_alert( string player, int idx );
playerinfo.c | 119 | clear_alerts_for( string player );
playerinfo.c | 120 | increment_alerts_for( string player );
playerinfo.c | 121 | decrement_alerts_for( string player );
playerinfo.c | 122 | correct_alts_for( string player );
playerinfo.c | 123 | player_deleted(mixed player, int deleted);
playerinfo.c | 124 | fix_alts(mixed player);
playerinfo.c | 158 | save_variable( vars );
playerinfo.c | 160 | unguarded( (: write_file, SAVE_FILE, tmp, 1 :) );
playerinfo.c | 170 | unguarded( (: read_file, SAVE_FILE :) );
playerinfo.c | 171 | restore_variable( tmp );
playerinfo.c | 177 | create();
playerinfo.c | 243 | seteuid("Room");
playerinfo.c | 244 | load_handler_data();
playerinfo.c | 265 | lower_case(name);
playerinfo.c | 266 | sprintf("%s/%c/%s.o",SAVE_DIR,p[0],p);
playerinfo.c | 274 | keys(_sources);
playerinfo.c | 297 | return ( member_array( event, _lordonly ) >
playerinfo.c | 318 | member_array(source,reqd) >
playerinfo.c | 338 | member_array(base_name(deleter),reqd) >
playerinfo.c | 353 | query_lord_only(e) && !p->query_lord());
playerinfo.c | 367 | query_deputy( p->query_name() );
playerinfo.c | 369 | query_lord();
playerinfo.c | 382 | query_deputy( p->query_name() );
playerinfo.c | 397 | tell_creator("pinkfish", "[playerinfo] Debouncing: %O.\n",entry);
playerinfo.c | 398 | sizeof(dossier->data);
playerinfo.c | 401 | tell_creator("pinkfish", "[playerinfo] Last: %O.\n",last);
playerinfo.c | 407 | tell_creator("pinkfish", "[playerinfo] Merging events.\n");
playerinfo.c | 416 | tell_creator("pinkfish", "[playerinfo] Result: %O.\n",last);
playerinfo.c | 421 | tell_creator("pinkfish", "[playerinfo] Not merging events.\n");
playerinfo.c | 441 | time();
playerinfo.c | 443 | filter(dossier->data, not_timed_out);
playerinfo.c | 444 | time();
playerinfo.c | 455 | lower_case(player);
playerinfo.c | 456 | filename(p);
playerinfo.c | 472 | if(file_size(fn) >
playerinfo.c | 473 | unguarded( (: restore_object, fn, 0 :) );
playerinfo.c | 506 | correct_alts_for( dossier->name );
playerinfo.c | 519 | do_timeout();
playerinfo.c | 522 | unguarded( (: save_object, filename(player) :) );
playerinfo.c | 536 | lower_case( player );
playerinfo.c | 541 | load_player( player );
playerinfo.c | 544 | copy( dossier->alts );
playerinfo.c | 549 | load_player( new_main );
playerinfo.c | 551 | uniq_array( alts + ({ player }) );
playerinfo.c | 552 | save_player( new_main );
playerinfo.c | 556 | load_player( alt );
playerinfo.c | 558 | save_player( alt );
playerinfo.c | 563 | unguarded( (: rm, filename(player) :) );
playerinfo.c | 564 | clear_alerts_for(player);
playerinfo.c | 590 | load_player(player);
playerinfo.c | 597 | do_debouncing(player, new_entry);
playerinfo.c | 598 | save_player(player);
playerinfo.c | 603 | increment_alerts_for(player);
playerinfo.c | 624 | load_player(player);
playerinfo.c | 631 | copy( dossier->data );
playerinfo.c | 634 | save_player(player);
playerinfo.c | 639 | decrement_alerts_for(player);
playerinfo.c | 656 | if( sizeof( dossier->alts ) >
playerinfo.c | 659 | capitalize($1)+CL_RESET :)));
playerinfo.c | 660 | if(sizeof(dossier->old_alts) >
playerinfo.c | 668 | fix_alts(player);
playerinfo.c | 669 | load_player(player);
playerinfo.c | 676 | load_player(dossier->main_alt);
playerinfo.c | 677 | copy(dossier->alts);
playerinfo.c | 678 | copy(dossier->old_alts);
playerinfo.c | 683 | save_player( dossier->name );
playerinfo.c | 685 | load_player(player);
playerinfo.c | 690 | query_multiple_short(map(tmp, (: CL_HEADER+capitalize($1)+CL_RESET :)));
playerinfo.c | 696 | query_multiple_short(map(tmp2, (: CL_HEADER+capitalize($1)+CL_RESET:)));
playerinfo.c | 702 | capitalize(player) + CL_RESET, alts, aka );
playerinfo.c | 714 | ctime( e->time );
playerinfo.c | 717 | explode( e->comment, "\n" );
playerinfo.c | 731 | sprintf( "    %s\n", line );
playerinfo.c | 736 | sprintf( "    (no comments)\n" );
playerinfo.c | 752 | load_player(player);
playerinfo.c | 753 | query_header(player);
playerinfo.c | 786 | sizeof( list );
playerinfo.c | 787 | query_entry( i, list[i], 0 );
playerinfo.c | 795 | filter( log, (: $2 > time() - ONE_WEEK :) );
playerinfo.c | 799 | query_name() ] = time();
playerinfo.c | 803 | save_player( player );
playerinfo.c | 819 | load_player(player);
playerinfo.c | 820 | query_header(player);
playerinfo.c | 822 | sizeof(list);
playerinfo.c | 824 | query_entry( i, list[i], 0 );
playerinfo.c | 842 | load_player(player);
playerinfo.c | 845 | load_player(player);
playerinfo.c | 847 | query_header(player);
playerinfo.c | 850 | copy( dossier->alts );
playerinfo.c | 851 | sizeof(alts);
playerinfo.c | 856 | query_event( source, player, event );
playerinfo.c | 858 | query_dossier( source, player );
playerinfo.c | 864 | allocate(size);
playerinfo.c | 865 | allocate(size);
playerinfo.c | 867 | load_player( alts[i] );
playerinfo.c | 869 | copy(dossier);
playerinfo.c | 920 | load_player(player);
playerinfo.c | 926 | return ({ });
playerinfo.c | 928 | load_player(player);
playerinfo.c | 949 | lower_case(alt);
playerinfo.c | 959 | load_player(alt);
playerinfo.c | 975 | lower_case(player);
playerinfo.c | 981 | load_player(player);
playerinfo.c | 1016 | do_debouncing(player, new_entry);
playerinfo.c | 1017 | save_player(player);
playerinfo.c | 1019 | load_player(alt);
playerinfo.c | 1030 | do_debouncing(alt, new_entry);
playerinfo.c | 1031 | save_player(alt);
playerinfo.c | 1053 | lower_case(player);
playerinfo.c | 1054 | lower_case(alt);
playerinfo.c | 1056 | load_player(player);
playerinfo.c | 1058 | capitalize(alt) + " was not an alt of " + capitalize(player);
playerinfo.c | 1067 | do_debouncing(alt, new_entry);
playerinfo.c | 1068 | save_player(player);
playerinfo.c | 1071 | load_player(alt);
playerinfo.c | 1079 | capitalize(alt);
playerinfo.c | 1091 | do_debouncing(alt, new_entry);
playerinfo.c | 1092 | save_player(alt);
playerinfo.c | 1118 | lower_case(player);
playerinfo.c | 1135 | load_player( player );
playerinfo.c | 1154 | lower_case(player);
playerinfo.c | 1169 | load_player( player );
playerinfo.c | 1176 | time();
playerinfo.c | 1177 | capitalize( creator->query_name() );
playerinfo.c | 1178 | lower_case( event );
playerinfo.c | 1183 | decrement_alerts_for(player);
playerinfo.c | 1186 | save_player( player );
playerinfo.c | 1194 | lower_case(player);
playerinfo.c | 1200 | map_delete( _alerts, player );
playerinfo.c | 1201 | save_handler_data();
playerinfo.c | 1209 | lower_case(player);
playerinfo.c | 1225 | save_handler_data();
playerinfo.c | 1234 | lower_case(player);
playerinfo.c | 1247 | map_delete( _alerts, player );
playerinfo.c | 1250 | save_handler_data();
playerinfo.c | 1260 | return ({ });
playerinfo.c | 1263 | filter( keys(_alerts), (: find_player($1) :) );
playerinfo.c | 1277 | lower_case(player);
playerinfo.c | 1282 | load_player(player);
playerinfo.c | 1284 | copy(dossier->alts);
playerinfo.c | 1287 | write("Processing: " + player + " (" + main + ")\n");
playerinfo.c | 1293 | save_player(player);
playerinfo.c | 1301 | correct_alts_for(main);
playerinfo.c | 1302 | load_player(player);
playerinfo.c | 1312 | write("No alts for : " + player + "\n");
playerinfo.c | 1319 | filter(alts, (: PLAYER_HANDLER->test_user($1) :));
playerinfo.c | 1330 | save_player(player);
playerinfo.c | 1335 | load_player(main);
playerinfo.c | 1339 | test_user($1) :));
playerinfo.c | 1340 | uniq_array(dossier->old_alts + tmp);
playerinfo.c | 1344 | uniq_array(alts + dossier->alts) - ({ main });
playerinfo.c | 1345 | filter(alts, (: find_player($1) || PLAYER_HANDLER->test_user($1) :));
playerinfo.c | 1350 | copy(alts);
playerinfo.c | 1351 | copy(tmp);
playerinfo.c | 1352 | save_player(main);
playerinfo.c | 1357 | load_player(alt);
playerinfo.c | 1359 | save_player(alt);
playerinfo.c | 1365 | load_player(alt);
playerinfo.c | 1367 | save_player(alt);
playerinfo.c | 1373 | load_player(player);
playerinfo.c | 1384 | lower_case(player);
playerinfo.c | 1389 | load_player( player );
playerinfo.c | 1393 | load_player(main);
playerinfo.c | 1402 | save_player( main );
playerinfo.c | 1416 | query_name();
playerinfo.c | 1434 | load_player(player);
playerinfo.c | 1441 | do_debouncing(player, new_entry);
playerinfo.c | 1442 | save_player(player);
playerinfo.c | 1455 | query_name();
playerinfo.c | 1461 | clear_alerts_for(player);
playerinfo.c | 1462 | load_player(player);
playerinfo.c | 1469 | do_debouncing(player, new_entry);
playerinfo.c | 1470 | save_player(player);
playerinfo.c | 1476 | save_player(player);
playerinfo.c | 1477 | load_player(main);
playerinfo.c | 1480 | save_player(main);
playerinfo.c | 1489 | filter(dossier->alts, (: PLAYER_HANDLER->test_user($1) :));
playerinfo.c | 1495 | load_player(main);
playerinfo.c | 1497 | if(sizeof(tmp) >
playerinfo.c | 1498 | copy(tmp[1..]);
playerinfo.c | 1499 | copy(tmp2 + ({ player }));
playerinfo.c | 1500 | save_player(main);
playerinfo.c | 1504 | load_player(alt);
playerinfo.c | 1506 | save_player(alt);
playerinfo.c | 1518 | load_player(player);
playerinfo.c | 1522 | save_player(player);
playerinfo.c | 1532 | query_name();
playerinfo.c | 1538 | load_player(player);
playerinfo.c | 1543 | load_player(dossier->main_alt);
playerinfo.c | 1565 | uniq_array( alts + ({ player }));
playerinfo.c | 1570 | filter(alts, (: PLAYER_HANDLER->test_user($1) :));
playerinfo.c | 1571 | filter(alts, (: !PLAYER_HANDLER->test_user($1) :));
playerinfo.c | 1575 | load_player(alt);
playerinfo.c | 1579 | save_player(alt);
playerinfo.c | 1584 | if ( sizeof( _dossier_cache ) >
playerinfo.c | 1593 | load_player(player);
playerinfo.c | 1600 | sprintf( "Access log for player %s:\n", capitalize( player ) );
playerinfo.c | 1605 | query_time_string( time() - history[name], 2 ) + " ago");
top_ten_handler.c | 79 | calculate_family_and_club_info();
top_ten_handler.c | 83 | creator_file( file_name( this_object() ) ) );
top_ten_handler.c | 91 | call_out( "check_tables", 5 );
top_ten_handler.c | 92 | call_out( "check_family_and_club_info", 10 );
top_ten_handler.c | 93 | if ( file_size( SAVE_FILE +".o" ) >
top_ten_handler.c | 94 | unguarded( (: restore_object, SAVE_FILE :) );
top_ten_handler.c | 105 | unguarded( (: save_object, SAVE_FILE :) );
top_ten_handler.c | 129 | save_me();
top_ten_handler.c | 142 | save_me();
top_ten_handler.c | 154 | save_me();
top_ten_handler.c | 166 | save_me();
top_ten_handler.c | 175 | sscanf( args[ 0 ], "%s (%s)", word, guild );
top_ten_handler.c | 196 | time() });
top_ten_handler.c | 201 | time() }) });
top_ten_handler.c | 219 | delete( top_ten, i, 1 );
top_ten_handler.c | 225 | delete( guild_top_tens[ word ], i, 1 );
top_ten_handler.c | 229 | save_me();
top_ten_handler.c | 251 | return ({ });
top_ten_handler.c | 259 | sizeof( args );
top_ten_handler.c | 276 | return ({ });
top_ten_handler.c | 280 | delete( args, i, 1 );
top_ten_handler.c | 291 | return ({ 0, 0 });
top_ten_handler.c | 295 | sizeof( args );
top_ten_handler.c | 301 | return ({ lowest_loc, lowest_num });
top_ten_handler.c | 309 | query_immediate_children( skill );
top_ten_handler.c | 314 | query_skill_weight( skill );
top_ten_handler.c | 322 | return ( -( thing->query_time_on() - ( thing->query_refresh_time() ? ( time() - thing->query_refresh_time() ) + thing->query_time_on() : 0 ) ) / 86400 );
top_ten_handler.c | 324 | return ( -thing->query_time_on() / 86400 );
top_ten_handler.c | 335 | query_level();
top_ten_handler.c | 338 | sizeof( STD_SKILLS );
top_ten_handler.c | 350 | allocate( sizeof( skills ) / 3 );
top_ten_handler.c | 354 | query_skill_bonus( skills[ 3 * i ][ j ], 1 );
top_ten_handler.c | 359 | sort_array( bonuses, -1 );
top_ten_handler.c | 360 | sizeof( bonuses );
top_ten_handler.c | 365 | query_quest_points( (string)thing->query_name() );
top_ten_handler.c | 402 | query_name();
top_ten_handler.c | 403 | calculate_rating( thing );
top_ten_handler.c | 404 | remove_name( name, guild_top_ten );
top_ten_handler.c | 405 | find_lowest( guild_top_ten );
top_ten_handler.c | 409 | query_time_on() }) });
top_ten_handler.c | 414 | query_time_on() });
top_ten_handler.c | 418 | save_me();
top_ten_handler.c | 419 | remove_name( name, top_ten );
top_ten_handler.c | 420 | find_lowest( top_ten );
top_ten_handler.c | 424 | query_level(), -(int)thing->query_time_on() }) });
top_ten_handler.c | 429 | query_level(), -(int)thing->query_time_on() });
top_ten_handler.c | 432 | save_me();
top_ten_handler.c | 442 | remove_name( word1, top_ten );
top_ten_handler.c | 449 | save_me();
top_ten_handler.c | 518 | map_delete(_family_guilds, guild);
top_ten_handler.c | 519 | map_delete(_family_guilds_num, guild);
top_ten_handler.c | 522 | map_delete(_family_guilds, guild);
top_ten_handler.c | 523 | map_delete(_family_guilds_num, guild);
top_ten_handler.c | 530 | map_delete(_club_guilds, guild);
top_ten_handler.c | 531 | map_delete(_club_guilds_num, guild);
top_ten_handler.c | 534 | map_delete(_club_guilds, guild);
top_ten_handler.c | 535 | map_delete(_club_guilds_num, guild);
top_ten_handler.c | 538 | save_me();
top_ten_handler.c | 555 | save_me();
top_ten_handler.c | 563 | save_me();
top_ten_handler.c | 571 | save_me();
top_ten_handler.c | 580 | save_me();
top_ten_handler.c | 589 | save_me();
top_ten_handler.c | 597 | save_me();
top_ten_handler.c | 605 | save_me();
top_ten_handler.c | 613 | save_me();
top_ten_handler.c | 624 | save_me();
top_ten_handler.c | 632 | save_me();
top_ten_handler.c | 640 | save_me();
top_ten_handler.c | 650 | save_me();
top_ten_handler.c | 659 | save_me();
top_ten_handler.c | 667 | save_me();
top_ten_handler.c | 675 | save_me();
top_ten_handler.c | 705 | save_me();
top_ten_handler.c | 706 | destruct(this_object());
top_ten_handler.c | 711 | save_me();
snmp_handler.c | 10 | allocate_buffer(4);
snmp_handler.c | 29 | allocate_buffer(4);
snmp_handler.c | 30 | allocate_buffer(1);
snmp_handler.c | 36 | sizeof(mibreply);
snmp_handler.c | 40 | sizeof(users());
snmp_handler.c | 45 | BufferiseInt(j);
snmp_handler.c | 47 | sizeof(tmpbuf);
snmp_handler.c | 51 | users();
snmp_handler.c | 52 | sizeof(tmp);
snmp_handler.c | 59 | BufferiseInt(j);
snmp_handler.c | 61 | sizeof(tmpbuf);
snmp_handler.c | 76 | sizeof(MIB);
change_skills.c | 96 | explode( skill, "." );
change_skills.c | 99 | delete( bits, sizeof( bits ) - 1, 1 );
change_skills.c | 100 | implode( bits, "." );
change_skills.c | 101 | query_level_in( skills, skill );
change_skills.c | 113 | query_skills();
change_skills.c | 116 | sizeof( OLD_SKILLS );
change_skills.c | 117 | query_level_in( skills, OLD_SKILLS[ i ] );
change_skills.c | 119 | m_delete( skills, OLD_SKILLS[ i ] );
change_skills.c | 121 | sizeof( OTHER_SKILLS );
change_skills.c | 123 | m_delete( skills, OTHER_SKILLS[ i ] );
change_skills.c | 126 | add_property( "magic levels", total );
change_skills.c | 127 | set_skills( skills );
change_skills.c | 137 | tell_object( thing, "The imp flashes back to wherever it came from.\n\n" );
change_skills.c | 173 | query_skills();
change_skills.c | 176 | keys(skills);
change_skills.c | 187 | sizeof(bits);
change_skills.c | 190 | query_minimum_skill_xp(skills[bits[i]]);
change_skills.c | 191 | map_delete(skills, bits[i]);
change_skills.c | 195 | query_languages();
change_skills.c | 196 | sizeof(langs);
change_skills.c | 197 | add_language(langs[i]);
change_skills.c | 198 | remove_language( langs[i] );
change_skills.c | 201 | query_minimum_skill_xp(skills["other.language"]);
change_skills.c | 202 | map_delete(skills, "other.language");
change_skills.c | 206 | add_language("common");
change_skills.c | 209 | add_language("wizard spells");
change_skills.c | 212 | add_language("thieves' cant");
change_skills.c | 222 | set_skills( skills );
change_skills.c | 223 | adjust_xp( total_xp );
change_skills.c | 240 | explode(skill, ".");
change_skills.c | 242 | implode(bits[0..i], ".");
change_skills.c | 244 | query_immediate_children(this_skill);
change_skills.c | 246 | sizeof(tree);
change_skills.c | 251 | sizeof(tree);
change_skills.c | 266 | query_skills();
change_skills.c | 269 | keys(skills);
change_skills.c | 277 | m_delete(skills, "covert.sleight-of-hand");
change_skills.c | 296 | recalc_parents(skills, "covert");
change_skills.c | 317 | recalc_parents(skills, "fighting.combat.melee");
change_skills.c | 329 | m_delete(skills, "fighting.combat.parry.thrown");
change_skills.c | 330 | m_delete(skills, "fighting.combat.parry.fired");
change_skills.c | 334 | m_delete(skills, "fighting.combat.parry.held");
change_skills.c | 336 | recalc_parents(skills, "fighting.combat.parry");
change_skills.c | 358 | recalc_parents(skills, "fighting.combat.special");
change_skills.c | 362 | m_delete(skills, "other.tracking.woodland");
change_skills.c | 364 | m_delete(skills, "other.tracking.desert");
change_skills.c | 366 | m_delete(skills, "other.tracking.mountain");
change_skills.c | 368 | m_delete(skills, "other.tracking.road");
change_skills.c | 370 | m_delete(skills, "other.tracking.field");
change_skills.c | 375 | set_skills( skills );
change_skills.c | 376 | tell_object(thing, "The squirrel says: Ok, all done now.\n");
change_skills.c | 389 | to_int(f * log( 1.0 + sk/(f + sk * k) ) + 0.5);
change_skills.c | 400 | query_skills();
change_skills.c | 403 | keys(skills);
change_skills.c | 415 | new_skill_value(skills[bit]);
change_skills.c | 416 | recalc_parents(skills, bit);
change_skills.c | 420 | set_skills( skills );
change_skills.c | 421 | tell_object(thing, "The frog says: Ok, all done now.\n");
change_skills.c | 441 | if (thing->query_real_con() >
change_skills.c | 442 | adjust_con(-1);
change_skills.c | 447 | if (stat_total > 65 && thing->query_real_dex() >
change_skills.c | 448 | adjust_dex(-1);
change_skills.c | 467 | call_other(thing, "adjust_" + highest, -1);
change_skills.c | 474 | query_multiple_short(map(keys(changes), (: $1 + " changed by " + $2[$1] :), changes));
change_skills.c | 476 | tell_object(thing, "The armadillo says: Stats changed: " + str + "\n");
change_skills.c | 494 | set_tactics(tactics);
change_skills.c | 496 | query_skills();
change_skills.c | 504 | tell_object(thing, "Mapping " + bit + " to " + ETA_CHANGES[bit] + ".\n");
change_skills.c | 506 | map_delete(skills, bit);
change_skills.c | 509 | tell_object(thing, "Adding new skills.\n");
change_skills.c | 516 | recalc_parents(skills, "crafts.hunting");
change_skills.c | 517 | recalc_parents(skills, "crafts");
change_skills.c | 518 | recalc_parents(skills, "other.movement.riding");
change_skills.c | 519 | recalc_parents(skills, "other.movement.climbing");
change_skills.c | 520 | recalc_parents(skills, "other.movement");
change_skills.c | 521 | recalc_parents(skills, "other.trading.valueing");
change_skills.c | 522 | recalc_parents(skills, "other.trading");
change_skills.c | 523 | recalc_parents(skills, "other");
change_skills.c | 524 | set_skills( skills );
change_skills.c | 528 | catch(thing->delete_effect(eff));
change_skills.c | 530 | tell_object(thing, "Fixing stats.\n");
change_skills.c | 531 | fixup_stats(thing);
change_skills.c | 533 | tell_object(thing, "Granting rearrange.\n");
change_skills.c | 534 | add_known_command("rearrange");
change_skills.c | 537 | query_property("assassin") >
change_skills.c | 540 | tell_object(thing, "Returning PK flag.\n");
change_skills.c | 541 | set_player_killer(1);
change_skills.c | 543 | remove_property(PKER);
change_skills.c | 544 | remove_property(PKER_MISSPELL);
change_skills.c | 545 | add_property("not real newbie", 1);
change_skills.c | 547 | tell_object(thing, "Removing old combat commands.\n");
change_skills.c | 549 | remove_known_command("strike");
change_skills.c | 552 | remove_known_command("impale");
change_skills.c | 553 | remove_known_command("crush");
change_skills.c | 554 | remove_known_command("behead");
change_skills.c | 557 | remove_known_command("punch");
change_skills.c | 558 | remove_known_command("kick");
change_skills.c | 560 | tell_object(thing, "The armadillo says: Ok, all done now.\n");
change_skills.c | 561 | fixup_player(this_player());
change_skills.c | 582 | change_skills( thing );
change_skills.c | 584 | change_language_skills( thing, lvl );
change_skills.c | 586 | change_skills_epsilon( thing );
change_skills.c | 588 | change_skills_zeta(thing);
change_skills.c | 590 | change_skills_eta(thing);
change_skills.c | 594 | add_property("skills version", VERSION_6);
news_handler.c | 21 | query_newsrc( player );
news_handler.c | 27 | get_subjects( BOARD_NAME );
news_handler.c | 40 | find_player( person );
news_handler.c | 60 | query_name();
news_handler.c | 63 | call_out( (: show_message :), DELAY_TIME, person );
news_handler.c | 70 | show_message( user );
complaints_handler.c | 24 | unguarded( (: save_object( SAVEFILE ) :) );
complaints_handler.c | 31 | unguarded( (: restore_object( SAVEFILE ) :) );
complaints_handler.c | 38 | seteuid( getuid() );
complaints_handler.c | 40 | load_file();
complaints_handler.c | 56 | sprintf( "%-=78s\n", str ) );
complaints_handler.c | 59 | save_file();
complaints_handler.c | 71 | return ( "/secure/master"->query_lord( name ) );
complaints_handler.c | 75 | query_lord( name ) ) );
script_processor.c | 35 | file_length( script );
script_processor.c | 37 | write( "Length of file \""+ script +"\" is "+ length +".\n" );
script_processor.c | 44 | read_file( script, line, 1 );
script_processor.c | 48 | find_object( actors[ name ] );
script_processor.c | 51 | do_command( action );
script_processor.c | 53 | find_object( stage );
script_processor.c | 56 | tell_room( actor, text );
script_processor.c | 65 | perform_line( script, line );
script_processor.c | 68 | script_ended( next );
script_processor.c | 71 | call_out( "perform_script", 2 + next, script, line + 1 );
script_processor.c | 77 | call_out( "perform_script", 3, script, 1 );
soul_compiler.c | 36 | start_compile();
soul_compiler.c | 37 | parse_chunk(string chunk);
soul_compiler.c | 38 | make_into_soul_commands(mapping commands);
soul_compiler.c | 53 | seteuid("Root");
soul_compiler.c | 64 | tell_object(_current_player, mess);
soul_compiler.c | 91 | this_player() });
soul_compiler.c | 92 | start_compile();
soul_compiler.c | 109 | explode(fname, "/");
soul_compiler.c | 110 | implode(bits[0..<1], "/");
soul_compiler.c | 120 | get_dir(fname);
soul_compiler.c | 121 | sizeof(bits);
soul_compiler.c | 123 | compile_file(bits[i]);
soul_compiler.c | 131 | time() - _last_chunk_compile) >
soul_compiler.c | 134 | write("Starting to compile " + _to_compile[0] + "\n");
soul_compiler.c | 141 | file_length(_current_file);
soul_compiler.c | 143 | call_out("compile_chunk", 2);
soul_compiler.c | 151 | time();
soul_compiler.c | 160 | parse_chunk(chunk);
soul_compiler.c | 163 | call_out("start_compile", 2);
soul_compiler.c | 165 | make_into_soul_commands(_arguments[1]);
soul_compiler.c | 167 | call_out("compile_chunk", 2);
soul_compiler.c | 178 | strlen(chunk);
soul_compiler.c | 180 | explode(chunk, "(");
soul_compiler.c | 186 | strlen(chunk);
soul_compiler.c | 252 | strlen(chunk);
soul_compiler.c | 271 | strlen(chunk);
soul_compiler.c | 293 | strlen(s2);
soul_compiler.c | 324 | printf("Syntax error in file %s, near %s\n", _current_file, s1);
soul_compiler.c | 332 | if (strlen(s1) >
soul_compiler.c | 336 | strlen(s2);
soul_compiler.c | 338 | replace(s1, "\n", "");
soul_compiler.c | 342 | strlen(s2);
soul_compiler.c | 345 | replace(chunk, "\n", "");
soul_compiler.c | 351 | notify("Horrible error "+_look_for+"\n");
soul_compiler.c | 370 | printf("%O\n", inp);
soul_compiler.c | 371 | return ({ });
soul_compiler.c | 373 | sort_array(inp, "check_sort", this_object());
soul_compiler.c | 378 | allocate(sizeof(inp));
soul_compiler.c | 380 | sizeof(inp);
soul_compiler.c | 382 | sizeof(ret);
soul_compiler.c | 409 | keys(comms);
soul_compiler.c | 411 | sizeof(fluff);
soul_compiler.c | 420 | notify("The 'self' type is missing in the no-argument, single for the soul command "+fluff[i]+"\n");
soul_compiler.c | 423 | notify("The 'rest' type is missing in the no-argument, single for the soul command "+fluff[i]+"\n");
soul_compiler.c | 432 | sizeof(comms[fluff[i]]["single"][0]["arguments"]);
soul_compiler.c | 434 | allocate(j*SMALL_ARG_SIZE) });
soul_compiler.c | 436 | allocate(j*SMALL_ARG_SIZE);
soul_compiler.c | 438 | sizeof(comms[fluff[i]]["single"][0]["arguments"]);
soul_compiler.c | 441 | notify("The soul command "+fluff[i]+" is totaly stuffed.\n");
soul_compiler.c | 444 | notify("The 'self' type is missing in the argument, single for the soul command "+fluff[i]+"\n");
soul_compiler.c | 447 | notify("The 'rest' type is missing in the argument, single for the soul command "+fluff[i]+"\n");
soul_compiler.c | 450 | notify("The 'arguments' type is missing in the argument, single for the soul command "+fluff[i]+"\n");
soul_compiler.c | 455 | explode(tmp["arguments"], ",");
soul_compiler.c | 466 | notify("The 'self' type is missing in the no-argument, target for the soul command "+fluff[i]+"\n");
soul_compiler.c | 469 | notify("The 'rest' type is missing in the no-argument, target for the soul command "+fluff[i]+"\n");
soul_compiler.c | 478 | sizeof(comms[fluff[i]]["targeted"][0]["arguments"]);
soul_compiler.c | 480 | allocate(j*ARG_SIZE) });
soul_compiler.c | 482 | allocate(j*ARG_SIZE);
soul_compiler.c | 483 | sizeof(comms[fluff[i]]["targeted"][0]["arguments"]);
soul_compiler.c | 486 | notify("The 'self' type is missing in the argument, target for the soul command "+fluff[i]+"\n");
soul_compiler.c | 489 | notify("The 'rest' type is missing in the argument, target for the soul command "+fluff[i]+"\n");
soul_compiler.c | 492 | notify("The 'arguments' type is missing in the argument, target for the soul command "+fluff[i]+"\n");
soul_compiler.c | 498 | explode(tmp["arguments"], ",");
soul_compiler.c | 506 | keys(ret);
soul_compiler.c | 507 | sizeof(fluff);
soul_compiler.c | 508 | sort_patterns(ret[fluff[i]][PATTERNS]);
soul_compiler.c | 509 | add_soul_command(fluff[i], ret[fluff[i]]);
soul_compiler.c | 510 | notify("Added soul command "+fluff[i]+".\n");
soul_compiler.c | 516 | printf("%O\n", sort_patterns(({ "[at] <indirect:object>", "<string>" })));
library.c | 47 | new_top_quest();
library.c | 48 | query_quest_time(string, string);
library.c | 63 | map_delete(player_cache, name);
library.c | 73 | time();
library.c | 78 | unguarded((: restore_object, RESTORE_PATH+name[0..0]+"/"+name :));
library.c | 80 | init_data(name);
library.c | 91 | if((sizeof(player_cache) >
library.c | 93 | call_out("clean_cache", 60);
library.c | 108 | unguarded((: save_object, RESTORE_PATH+name[0..0]+"/"+name :));
library.c | 121 | get_data_file( name );
library.c | 129 | return (string)QUEST_HANDLER->query_quest_title(quest);
library.c | 139 | get_data_file(name);
library.c | 141 | return ({ });
library.c | 166 | sizeof(quests);
library.c | 194 | sizeof(quests);
library.c | 221 | set_quest(this_player()->query_name(), "womble friend", 0);
library.c | 233 | query_quest_status(qu_name);
library.c | 236 | find_player (pl_name);
library.c | 244 | user_event( "inform", pl_name +" completes "+ qu_name + " (inactive)", "quest");
library.c | 260 | map_delete(qps, pl_name);
library.c | 262 | get_data_file(pl_name);
library.c | 269 | time() });
library.c | 272 | query_quest_level(qu_name);
library.c | 276 | quest_completed( pl_name, qu_name, previous_object() );
library.c | 278 | save_data_file( pl_name );
library.c | 285 | adjust_xp(XP*qu_level, 0);
library.c | 286 | call_out("save_them", 1, ob);
library.c | 290 | query_quest_title( qu_name ) );
library.c | 292 | clone_object ("/d/underworld/creator_cards/creator_card");
library.c | 294 | move (ob, "$N appear$s in your inventory with a flash.");
library.c | 308 | get_data_file(pl_name);
library.c | 314 | query_quest_level(qu_name);
library.c | 319 | time() });
library.c | 321 | save_data_file( pl_name );
library.c | 331 | save_me();
library.c | 344 | get_data_file( pl_name );
library.c | 349 | save_data_file(pl_name);
library.c | 366 | copy(player_cache[pl_name]->player_quest_info);
library.c | 400 | member_array(qu_name, player_cache[name]->quests);
library.c | 424 | unguarded((: read_file, text_file :));
library.c | 430 | sizeof(quests);
library.c | 446 | return (member_array(quest, player_cache[player]->quests) != -1);
library.c | 475 | get_data_file( name );
library.c | 481 | query_quest_level( word );
library.c | 500 | query_name();
library.c | 505 | init_data(name);
library.c | 514 | save_data_file(name);
english_handler.c | 52 | FreqTest("too short");
english_handler.c | 54 | FreqTest("Don't like l33t sp33k neither");
english_handler.c | 65 | allocate(29);
english_handler.c | 66 | strlen(line);
english_handler.c | 78 | to_float((to_float(let[i]) - freq[i<<1] * len) * freq[(i<<1)+1]);
english_handler.c | 108 | sizeof(strin);
english_handler.c | 115 | sizeof(str);
english_handler.c | 135 | tell_creator("shaggy","start shout: %s\n",strin);
english_handler.c | 136 | tell_creator("shaggy","text: %s profane chance: %d\n",s,profane);
converter.c | 19 | query_busy(string name);
converter.c | 22 | seteuid("mailer");
converter.c | 29 | return (sizeof(names) == 0);
converter.c | 36 | write("Can't start converting mail, try again after the reboot.\n");
converter.c | 40 | write("Argh ! Already busy converting mail for "+pname+".\n");
converter.c | 46 | unguarded((: restore_object, "/save/post/"+pname :));
converter.c | 47 | sizeof(mail);
converter.c | 49 | unguarded((: rm, "/save/post/"+pname+".o" :));
converter.c | 52 | write("Converting mail for "+pname+".\n");
converter.c | 55 | reset_eval_cost();
converter.c | 56 | call_out("do_it", (i+1)*3, (mail[i] + ({ pname })));
converter.c | 58 | call_out("reset_busy", (i+1)*3, pname);
converter.c | 59 | unguarded((: rm, "/save/post/"+pname+".o" :));
converter.c | 63 | clone_object("/obj/handlers/folder_handler");
converter.c | 76 | return (member_array(name, names) != -1);
converter.c | 82 | shut(2);
fairy_godmothers.c | 70 | continue_panicing(string str, object panicer);
fairy_godmothers.c | 71 | startup_godmother(object ob);
fairy_godmothers.c | 72 | finish_with_person(object ob, int ok);
fairy_godmothers.c | 78 | allocate(NUM_GODMOTHERS);
fairy_godmothers.c | 87 | query_godmothers() { return copy(_godmothers);
fairy_godmothers.c | 97 | sizeof(_godmothers);
fairy_godmothers.c | 118 | notify_fail(environment(panicer)->query_property("no godmother"));
fairy_godmothers.c | 123 | query_property("attacked godmother") + DAY * 10) >
fairy_godmothers.c | 125 | notify_fail("You attacked a godmother!  No help for you!\n");
fairy_godmothers.c | 130 | notify_fail("You cannot use a godmother whilst you are in a fight.\n");
fairy_godmothers.c | 134 | remove_property("attacked godmother");
fairy_godmothers.c | 140 | notify_fail("You are already requesting assistance.  Be patient.\n");
fairy_godmothers.c | 145 | this_player();
fairy_godmothers.c | 153 | write("You feel help is on its way.\n");
fairy_godmothers.c | 154 | add_property("godmother", FREE_NAME);
fairy_godmothers.c | 155 | continue_panicing("y", panicer);
fairy_godmothers.c | 158 | remove_property("godmother");
fairy_godmothers.c | 162 | query_max_gp();
fairy_godmothers.c | 172 | input_to("continue_panicing", 0, panicer);
fairy_godmothers.c | 176 | notify_fail("You do not have a life to spend on a godmother.\n");
fairy_godmothers.c | 179 | write("This will cost you a life, do you wish to continue? ");
fairy_godmothers.c | 180 | input_to("continue_panicing", 0, panicer);
fairy_godmothers.c | 205 | sizeof(_godmothers);
fairy_godmothers.c | 207 | query_waiting();
fairy_godmothers.c | 209 | hurry_up();
fairy_godmothers.c | 212 | dest_me();
fairy_godmothers.c | 221 | call_out("do_hurry_up", FIRST_WAIT_TIME-max_wait+2);
fairy_godmothers.c | 224 | do_check_queue();
fairy_godmothers.c | 231 | lower_case(str);
fairy_godmothers.c | 237 | input_to("continue_panicing", 0, panicer);
fairy_godmothers.c | 241 | write("This will cost you a life, do you wish to continue? ");
fairy_godmothers.c | 242 | input_to("continue_panicing", 0, panicer);
fairy_godmothers.c | 248 | write("Ok.  They do not show up to help you.  Good luck.\n");
fairy_godmothers.c | 253 | write("You hope a godmother will turn up sometime soon.\n");
fairy_godmothers.c | 255 | setup_harrass_callout();
fairy_godmothers.c | 260 | do_panic(ob);
fairy_godmothers.c | 269 | random(NUM_GODMOTHERS);
fairy_godmothers.c | 283 | clone_object(GODMOTHER_DIR + "granny");
fairy_godmothers.c | 287 | clone_object(GODMOTHER_DIR + "magrat");
fairy_godmothers.c | 291 | write("Something is hosed.  Please file a bug report.\n");
fairy_godmothers.c | 295 | move(environment(ob), "As if by magic $N appears.", "");
fairy_godmothers.c | 296 | call_out("do_panic_callout", 1, godmother, ob);
fairy_godmothers.c | 311 | finish_with_person(person, ok);
fairy_godmothers.c | 316 | sizeof(_godmothers);
fairy_godmothers.c | 318 | call_out("do_move", 10, _godmothers[i] );
fairy_godmothers.c | 323 | do_check_queue();
fairy_godmothers.c | 326 | remove_call_out("do_hurry_up");
fairy_godmothers.c | 340 | log_file("GODMOTHER_ERROR", "person == %O, godmother == %s\n", person, previous_object()->query_short());
fairy_godmothers.c | 341 | write("Consistancy error, they never paniced.\n");
fairy_godmothers.c | 348 | adjust_tmp_con(-2);
fairy_godmothers.c | 349 | set_gp(0);
fairy_godmothers.c | 350 | set_sp(0);
fairy_godmothers.c | 352 | if (person->query_level() >
fairy_godmothers.c | 353 | query_max_deaths() >
fairy_godmothers.c | 355 | query_name(), "misc", "Lost a life to the Godmother");
fairy_godmothers.c | 357 | ctime(time()), person->query_name());
fairy_godmothers.c | 358 | adjust_deaths(1);
fairy_godmothers.c | 365 | query_nationality()->query_default_start_location();
fairy_godmothers.c | 371 | remove_ghost();
fairy_godmothers.c | 378 | remove_property("godmother");
fairy_godmothers.c | 394 | sizeof(_godmothers);
fairy_godmothers.c | 397 | dest_me();
fairy_godmothers.c | 401 | query_waiting();
fairy_godmothers.c | 404 | finish_up();
fairy_godmothers.c | 406 | hurry_up();
fairy_godmothers.c | 417 | call_out("do_hurry_up", 10);
fairy_godmothers.c | 419 | call_out("do_hurry_up", FINISH_WAIT_TIME-max_wait);
fairy_godmothers.c | 429 | sizeof(_godmothers);
fairy_godmothers.c | 431 | dest_me();
fairy_godmothers.c | 434 | destruct(this_object());
playtesters.c | 120 | query_leave (string);
playtesters.c | 124 | unguarded( (: save_object, SAVE_FILE :) );
playtesters.c | 129 | seteuid( master()->creator_file( file_name( this_object() ) ) );
playtesters.c | 142 | if ( file_size( SAVE_FILE + ".o" ) >
playtesters.c | 143 | unguarded( (: restore_object, SAVE_FILE, 1 :) );
playtesters.c | 146 | call_out( "reset", 2 );
playtesters.c | 156 | copy( keys( pts ) );
playtesters.c | 167 | undefinedp( pts[ name ] );
playtesters.c | 184 | check_playtester() call\n" );
playtesters.c | 200 | find_player( person );
playtesters.c | 207 | query_name();
playtesters.c | 214 | query_playtester( str ) );
playtesters.c | 226 | test_age( name );
playtesters.c | 253 | find_player( name )->query_time_on();
playtesters.c | 254 | get_age_cached( name );
playtesters.c | 266 | get_age_raw( name );
playtesters.c | 267 | get_age_cached( name );
playtesters.c | 279 | return ( pts[ name ] == SENIOR_PLAYTESTER );
playtesters.c | 298 | this_player()->query_name() );
playtesters.c | 300 | get_age_uncached_offline( name );
playtesters.c | 301 | test_guild( name );
playtesters.c | 307 | map_delete (tmp_pts, name);
playtesters.c | 309 | delete_applicant (name);
playtesters.c | 310 | save_file();
playtesters.c | 329 | this_player()->query_name() );
playtesters.c | 331 | save_file();
playtesters.c | 349 | this_player()->query_name() + "\n" );
playtesters.c | 351 | save_file();
playtesters.c | 374 | log_file( "PLAYTESTERS", str + "\n" );
playtesters.c | 375 | map_delete( pts, name );
playtesters.c | 376 | map_delete( ages, name );
playtesters.c | 377 | map_delete( guilds, name );
playtesters.c | 378 | map_delete( bugs, name );
playtesters.c | 379 | clear_playtesting_projects (({name }));
playtesters.c | 380 | save_file();
playtesters.c | 414 | return ( !stringp( reason_invalid_playtester( name ) ) );
playtesters.c | 428 | query_name();
playtesters.c | 433 | add_playtester( name );
playtesters.c | 448 | explode( ctime( time() ), " " ) - ({ "" });
playtesters.c | 455 | get_age_uncached( name );
playtesters.c | 465 | save_file();
playtesters.c | 482 | adjust_quota( name, 0 );
playtesters.c | 499 | check_playtesters_one( who[ 0 ] );
playtesters.c | 500 | if ( sizeof( who ) >
playtesters.c | 501 | call_out( "check_playtesters", random( 10 ) + 5, who[ 1.. ] );
playtesters.c | 503 | explode( ctime( time() ), " " ) - ({ "" });
playtesters.c | 507 | save_file();
playtesters.c | 521 | call_out( "check_playtesters", 30, copy( keys( pts ) ) );
playtesters.c | 550 | sprintf( "%75-=s", text ) );
playtesters.c | 553 | adjust_quota( name, 1 );
playtesters.c | 578 | sprintf( "%-14s", "[" + name + "]" );
playtesters.c | 580 | sprintf( " %-12s ", name );
playtesters.c | 583 | if ( sizeof( bugs[ name ][ month ] ) >
playtesters.c | 620 | sprintf( "%%s%-12s%%%%^RESET%%%%^", name );
playtesters.c | 625 | if ( sizeof( bugs[ name ][ month ] ) >
playtesters.c | 675 | sprintf( temp, colour );
playtesters.c | 702 | copy( guilds );
playtesters.c | 713 | test_guild( player );
playtesters.c | 722 | save_file();
playtesters.c | 733 | copy( playtesters[ name ] );
playtesters.c | 744 | copy( bugs[ name ] );
playtesters.c | 751 | copy( months );
playtesters.c | 762 | save_file();
playtesters.c | 774 | map_delete( leave, name );
playtesters.c | 777 | save_file();
playtesters.c | 788 | stringp( leave[ name ] );
playtesters.c | 814 | get_age_uncached_offline( pt );
playtesters.c | 817 | test_guild( pt );
playtesters.c | 833 | tell_creator( "arienne", "Done " + pt + "!\n" );
playtesters.c | 835 | if ( sizeof( pts ) >
playtesters.c | 836 | call_out( "transfer_data_callout", 5, pts[ 1.. ] );
playtesters.c | 838 | save_file();
playtesters.c | 839 | tell_creator( "arienne", "Done the transfer!\n" );
playtesters.c | 856 | call_out( "transfer_data_callout", 5, copy( keys( playtesters ) ) );
playtesters.c | 869 | copy(_jump_points);
playtesters.c | 882 | save_file();
playtesters.c | 890 | map_delete(_jump_points, from);
playtesters.c | 891 | save_file();
playtesters.c | 903 | map_delete(_jump_points, from);
playtesters.c | 905 | save_file();
playtesters.c | 932 | this_player()->query_name() );
playtesters.c | 934 | save_file();
playtesters.c | 955 | this_player()->query_name() );
playtesters.c | 957 | save_file();
login_handler.c | 43 | is_compressed_login(x) (strsrch((x)->query_name(), "test") >
login_handler.c | 107 | is_discworld_full(int test_login_queue);
login_handler.c | 108 | write_log(string event, string name, int guest, string other);
login_handler.c | 109 | save_users();
login_handler.c | 110 | store_user_count();
login_handler.c | 111 | log_user_count();
login_handler.c | 112 | check_all_titles( string player );
login_handler.c | 113 | do_all_calls(string player, string event);
login_handler.c | 116 | is_uncompressed_full( int );
login_handler.c | 125 | seteuid( "Root" );
login_handler.c | 126 | unguarded((: restore_object, SAVE_NAME :));
login_handler.c | 130 | map_delete(_static_login_calls, name);
login_handler.c | 132 | catch(unguarded((: save_object, SAVE_NAME :)));
login_handler.c | 147 | query_name() });
login_handler.c | 154 | call_out( "save_users", NEW_SAVE_TIME );
login_handler.c | 155 | time() + 3601 - (time() % 3600);
login_handler.c | 157 | time();
login_handler.c | 158 | call_out("clean_lockdowns", 3600);
login_handler.c | 159 | write_log("Periodic", "", 0, "");
login_handler.c | 164 | copy(_static_login_calls);
login_handler.c | 168 | copy(_dynamic_login_calls);
login_handler.c | 187 | keys( _compressed_players_on ) + keys( _telnet_players_on );
login_handler.c | 225 | query_property( "test character" );
login_handler.c | 236 | query_login_queue();
login_handler.c | 247 | time();
login_handler.c | 253 | tell_creator( "taffyd", "Checking for queue jumpers...\n" );
login_handler.c | 259 | remove_from_login_queue( ob );
login_handler.c | 264 | reset_eval_cost();
login_handler.c | 269 | remove_from_login_queue( ob );
login_handler.c | 289 | tell_creator( "taffyd", "Removed %O from the queue.\n", ob );
login_handler.c | 338 | new (class login_information, funct : funct, ob : obj);
login_handler.c | 341 | catch(unguarded((: save_object, SAVE_NAME :)));
login_handler.c | 368 | map_delete(_static_login_calls, player);
login_handler.c | 369 | catch(unguarded((: save_object, SAVE_NAME :)));
login_handler.c | 403 | new (class login_information, funct : funct, ob : obj);
login_handler.c | 444 | find_player( player );
login_handler.c | 446 | tell_creator( "taffyd", "update_players_on(): %O, %O\n", player, ob );
login_handler.c | 475 | map_delete( _compressed_players_on, player );
login_handler.c | 480 | map_delete( _telnet_players_on, player );
login_handler.c | 484 | member_array( player, _players_on );
login_handler.c | 500 | tell_creator( "taffyd", "player_login(): %O, %O, %O\n", player, guest, ip );
login_handler.c | 508 | update_players_on( player );
login_handler.c | 511 | do_all_calls(player, LOGIN);
login_handler.c | 514 | call_out("check_all_titles", 5, player );
login_handler.c | 518 | write_log("Enter", player, guest, ip);
login_handler.c | 558 | catch(ob = load_object(login_inf->ob));
login_handler.c | 563 | tell_creator("ceres", "failed to load %s", login_inf->ob);
login_handler.c | 566 | catch(evaluate(login_inf->funct, player, event_t));
login_handler.c | 575 | do_all_calls(player, LOGOUT);
login_handler.c | 579 | call_out("check_all_titles", 5, player );
login_handler.c | 584 | call_out("save_users", NEW_SAVE_TIME );
login_handler.c | 589 | tell_creator( "taffyd", "Queue checking...\n" );
login_handler.c | 591 | is_discworld_full(WITHOUT_LOGIN_QUEUE) );
login_handler.c | 596 | tell_creator( "taffyd", "Doing login queue checks...\n" );
login_handler.c | 598 | pop_from_login_queue();
login_handler.c | 601 | tell_creator( "Removing %O from the login queue\n" );
login_handler.c | 602 | remove_from_login_queue();
login_handler.c | 606 | write_log("Exit", player, 0, "");
login_handler.c | 615 | do_all_calls(player, NETDEATH);
login_handler.c | 618 | call_out("check_all_titles", 5, player );
login_handler.c | 624 | tell_creator( "taffyd", "is full netdead check\n" );
login_handler.c | 626 | pop_from_login_queue();
login_handler.c | 628 | remove_from_login_queue();
login_handler.c | 632 | write_log("NDead", player, 0, "");
login_handler.c | 638 | update_players_on(player);
login_handler.c | 639 | do_all_calls(player, RECONNECT);
login_handler.c | 642 | call_out("check_all_titles", 5, player);
login_handler.c | 645 | write_log("Recon", player, 0, query_ip_name(find_player(player)));
login_handler.c | 655 | users();
login_handler.c | 660 | query_al();
login_handler.c | 672 | find_player( _worst );
login_handler.c | 678 | remove_title( "align" );
login_handler.c | 682 | set_title( "align", "Lord of Darkness" );
login_handler.c | 685 | set_title( "align", "Lady of Darkness" );
login_handler.c | 688 | set_title( "align", "Monster of Darkness" );
login_handler.c | 690 | query_name();
login_handler.c | 695 | find_player( _best );
login_handler.c | 701 | remove_title( "align" );
login_handler.c | 705 | set_title( "align", "Lord of Light" );
login_handler.c | 708 | set_title( "align", "Lady of Light" );
login_handler.c | 711 | set_title( "align", "Creature of Light" );
login_handler.c | 713 | query_name();
login_handler.c | 725 | sizeof( _players_on );
login_handler.c | 728 | log_file( "LOGIN_HANDLER", "No players on, resetting...\n" );
login_handler.c | 729 | query_players_on();
login_handler.c | 730 | call_out("save_users", NEW_SAVE_TIME );
login_handler.c | 734 | store_user_count();
login_handler.c | 738 | log_user_count();
login_handler.c | 743 | find_player( word );
login_handler.c | 748 | ctime( time() ), thing->query_name() );
login_handler.c | 749 | save_me();
login_handler.c | 753 | this_player(), number, thing );
login_handler.c | 760 | this_player(), number, find_player( word ) );
login_handler.c | 771 | call_out( (: save_users :), next_time );
login_handler.c | 781 | users();
login_handler.c | 786 | query_creator() :)) + query_login_queue();
login_handler.c | 789 | query_login_queue();
login_handler.c | 790 | filter(players, (: objectp($1) && !$1->query_creator() :));
login_handler.c | 794 | query_creator() :));
login_handler.c | 798 | filter(players, (: objectp($1) && !$1->query_creator() :));
login_handler.c | 805 | time();
login_handler.c | 826 | tell_creator( "taffyd", "%d, %d, %d\n", compressed, uncompressed, ret );
login_handler.c | 827 | tell_creator( "taffyd", "int_is_discworld_full: %d, %O\n", ret, call_stack( 2 ));
login_handler.c | 851 | int_is_discworld_full( logins );
login_handler.c | 855 | tell_creator( "taffyd", "is_discworld_full: %d, %O\n", ret, call_stack( 2 ));
login_handler.c | 876 | query_cap_name() :));
login_handler.c | 877 | sort_array(logins_n, 1);
login_handler.c | 878 | sizeof(logins_n);
login_handler.c | 894 | time() + 3601 - (time() % 3600);
login_handler.c | 916 | ctime(time())[4..18], name, other);
login_handler.c | 919 | call_out("write_log", BUFFER_TIME, "Periodic", "", 0, "");
login_handler.c | 921 | unguarded((: write_file, "/d/admin/log/ENTER.log", enter_log :));
login_handler.c | 923 | time();
login_handler.c | 928 | ctime(time())[4..18], name, other);
login_handler.c | 936 | time();
login_handler.c | 937 | if(sizeof(enter_log) >
login_handler.c | 938 | unguarded((: write_file, "/d/admin/log/ENTER.log", enter_log :));
login_handler.c | 945 | unguarded((: write_file, "/d/admin/log/ENTER.log", enter_log :));
login_handler.c | 947 | destruct(this_object());
login_handler.c | 968 | read_file(mess_name);
login_handler.c | 982 | sizeof(lockdowns[ip_addr]) >
login_handler.c | 994 | time() });
login_handler.c | 997 | sizeof(lockdowns[ip_addr]);
login_handler.c | 1003 | time() });
login_handler.c | 1004 | if(sizeof(lockdowns[ip_addr]) >
login_handler.c | 1018 | call_out("clean_lockdowns", 1800);
login_handler.c | 1021 | map_delete(lockdowns, ip);
login_handler.c | 1030 | map_delete(lockdowns, ip);
login_handler.c | 1034 | printf("%O\n", lockdowns);
login_handler.c | 1039 | save_users();
nroff.c | 49 | seteuid("Root");
nroff.c | 92 | stat(nroffed_file_name);
nroff.c | 98 | this_player()->query_cols();
nroff.c | 102 | sizeof(nroffed_file);
nroff.c | 108 | sprintf("%%^BOLD%%^%s%%^RESET%%^\n", nroffed_file[i+1]);
nroff.c | 112 | sprintf("%|=*s", cols, nroffed_file[i+1]);
nroff.c | 122 | if (this_player() == find_player("presto"))  write("middle == :" + nroffed_file[i + 3] + ":\n" + nroffed_file[i + 1] + "\n");
nroff.c | 123 | if (this_player() == find_player("wyvyrn"))  write( "file: '" + nroffed_file[i+1] + "', left: '" + nroffed_file[i+2] + "', centre: '" + nroffed_file[i+3] + "', right: '" + nroffed_file[i+4] + "'\n");
nroff.c | 142 | sprintf("%-=*s\n", cols, nroffed_file[i+3]);
nroff.c | 146 | sprintf("%-=*s", cols, nroffed_file[i+1]);
nroff.c | 150 | sprintf("%-#*s", cols, nroffed_file[i+1]);
nroff.c | 158 | sizeof(nroffed_file[i+2]);
nroff.c | 167 | sizeof(nroffed_file[i+2]);
nroff.c | 179 | implode(allocate(sizeof(nroffed_file[i+1]), "%*-=s"), "");
nroff.c | 180 | sizeof(nroffed_file[i+2]);
nroff.c | 182 | sizeof(nroffed_file[i+1]);
nroff.c | 186 | sprintf(pat + "\n", tmp ... );
nroff.c | 229 | sizeof(nroffed_file);
nroff.c | 231 | htmlify(nroffed_file[i]);
nroff.c | 233 | sizeof(nroffed_file[i]);
nroff.c | 235 | htmlify(nroffed_file[i][j]);
nroff.c | 239 | sizeof(nroffed_file);
nroff.c | 244 | if(strsrch(nroffed_file[i], "See also") >
nroff.c | 245 | sizeof(nroffed_file);
nroff.c | 247 | make_links(nroffed_file[j]);
nroff.c | 281 | replace(nroffed_file[i+3], "\n", "<p>");
nroff.c | 296 | sizeof(nroffed_file[i+2]);
nroff.c | 305 | sizeof(nroffed_file[i+2]);
nroff.c | 315 | sizeof(nroffed_file[i+2]);
nroff.c | 317 | sizeof(nroffed_file[i+1]);
nroff.c | 332 | explode(ret, "%^");
nroff.c | 334 | sizeof(bits);
nroff.c | 426 | time();
nroff.c | 427 | read_file(in_file);
nroff.c | 431 | explode("#\n"+text, "\n.");
nroff.c | 435 | add_string(bits[0]);
nroff.c | 437 | sizeof(bits);
nroff.c | 447 | add_int(V_HEADER);
nroff.c | 448 | add_string(tmp[3..]);
nroff.c | 452 | add_int(V_INDENT);
nroff.c | 454 | sscanf(tmp[2..], "%d%s", j, tmp);
nroff.c | 455 | add_int(j);
nroff.c | 459 | add_string("");
nroff.c | 463 | add_int(V_PARA);
nroff.c | 465 | sscanf(tmp[2..], "%d%s", j, tmp);
nroff.c | 466 | add_int(j);
nroff.c | 468 | sscanf(tmp, " %d%s", j, tmp);
nroff.c | 469 | add_int(j);
nroff.c | 474 | add_string("");
nroff.c | 479 | add_int(V_CENTER);
nroff.c | 486 | add_int(V_LEFT);
nroff.c | 493 | add_int(V_TABLE);
nroff.c | 502 | explode(bits[i], "\n");
nroff.c | 507 | tell_object(this_player(), sprintf("%O\n", bing));
nroff.c | 511 | add_int(V_ALL);
nroff.c | 512 | if (strlen(bing[0]) >
nroff.c | 513 | add_int(strlen(bing[0]));
nroff.c | 515 | add_int(strlen(bing[2]));
nroff.c | 517 | add_string(bing[0]);
nroff.c | 519 | add_string(bing[1]);
nroff.c | 521 | add_string(bing[2]);
nroff.c | 523 | implode(bing[3..], "\n");
nroff.c | 536 | add_int(V_COLUMN);
nroff.c | 541 | add_array(cols);
nroff.c | 542 | allocate(num_cols);
nroff.c | 550 | add_array(cols[j]);
nroff.c | 556 | explode(bits[i], "\n");
nroff.c | 561 | tell_object(this_player(), sprintf("%O\n", bing));
nroff.c | 566 | read_file(bing[ 0 ]);
nroff.c | 570 | explode("#\n"+text, "\n.");
nroff.c | 574 | add_string(bits[0]);
nroff.c | 583 | replace(bits[i], "\t", "\n");
nroff.c | 588 | explode(bits[i], "\n");
nroff.c | 589 | sizeof(frog);
nroff.c | 590 | explode("#"+frog[k], "\t");
nroff.c | 592 | sizeof(bing);
nroff.c | 595 | for (j = sizeof(bing);
nroff.c | 600 | replace_string(bits[i], "\n\n", "$%^NeW_LiNe^%$");
nroff.c | 601 | replace_string(bits[i], ".\n", ".  ");
nroff.c | 602 | replace_string(bits[i], "\n", " ");
nroff.c | 603 | replace_string(bits[i], "$%^NeW_LiNe^%$", "\n\n");
nroff.c | 604 | add_string(bits[i]+" ");
nroff.c | 606 | add_string(bits[i]+"\n");
nroff.c | 611 | unguarded((: save_object, out_file :));
player_handler.c | 92 | seteuid("Root");
player_handler.c | 104 | find_player(player);
player_handler.c | 112 | time();
player_handler.c | 113 | base_name(previous_object());
player_handler.c | 117 | call_stack(1);
player_handler.c | 118 | call_stack(2);
player_handler.c | 119 | sizeof(obs);
player_handler.c | 121 | base_name(obs[i]) + "#" + obs[i]->query_name();
player_handler.c | 123 | base_name(obs[i]);
player_handler.c | 130 | find_player(player);
player_handler.c | 138 | map_delete(player_cache, name);
player_handler.c | 144 | map_delete(player_cache, name);
player_handler.c | 152 | if (sizeof(explode(name, "..")) >
player_handler.c | 171 | if(file_size(PLAYER_SAVE_DIR + name[0..0] + "/" + name + ".o.gz") >
player_handler.c | 175 | if((file_size(PLAYER_SAVE_DIR+name[0..0]+"/"+name+".o") >
player_handler.c | 254 | query_player_ram_file_name(name);
player_handler.c | 258 | query_player_disk_file_name(name);
player_handler.c | 264 | query_player_disk_file_name(name);
player_handler.c | 270 | query_delete_player_file_name(name);
player_handler.c | 276 | query_delete_player_file_name(name);
player_handler.c | 282 | query_appeal_player_file_name(name);
player_handler.c | 288 | query_appeal_player_file_name(name);
player_handler.c | 298 | time();
player_handler.c | 325 | time();
player_handler.c | 326 | base_name(previous_object());
player_handler.c | 331 | if (tstr == "/secure/login" && sizeof(previous_object(-1)) >
player_handler.c | 332 | base_name(previous_object(-1)[1]);
player_handler.c | 336 | ctime(time())[4..18], tstr, prev_count, time() - delay);
player_handler.c | 341 | base_name(previous_object());
player_handler.c | 343 | base_name(previous_object(-1)[1]);
player_handler.c | 345 | log_file("CDEBUG", "%s: %O:%O\n", ob, call_stack(1), call_stack(2));
player_handler.c | 398 | time() - last_log_on) / (3600 * 24 * 7);
player_handler.c | 404 | load_object( guild_ob );
player_handler.c | 407 | query_level(this_object());
player_handler.c | 416 | if ((sizeof(player_cache) >
player_handler.c | 418 | call_out("clean_cache", 60);
player_handler.c | 434 | alias_string(al);
player_handler.c | 435 | sscanf(str, "%s $*$", str);
player_handler.c | 436 | replace(str, sprintf("%c", 7), "^G");
player_handler.c | 461 | file_size(query_player_disk_file_name(str) + ".o.gz") >
player_handler.c | 462 | file_size(query_player_disk_file_name(str) + ".o") >
player_handler.c | 463 | file_size(PLAYER_RAM_DIR + str[0..0] + "/" + str + ".o.gz") >
player_handler.c | 464 | file_size(PLAYER_RAM_DIR + str[0..0] + "/" + str + ".o") >
player_handler.c | 465 | file_size(query_delete_player_file_name(str) + ".o.gz") >
player_handler.c | 466 | file_size(query_delete_player_file_name(str) + ".o") >
player_handler.c | 467 | file_size(query_appeal_player_file_name(str) + ".o.gz") >
player_handler.c | 468 | file_size(query_appeal_player_file_name(str) + ".o") >
player_handler.c | 484 | if (file_size(query_delete_player_file_name(str) + ".o") >
player_handler.c | 487 | if(file_size(query_delete_player_file_name(str) + ".o.gz") >
player_handler.c | 506 | if (file_size(query_appeal_player_file_name(str) + ".o") >
player_handler.c | 509 | if(file_size(query_appeal_player_file_name(str) + ".o.gz") >
player_handler.c | 523 | map_delete(player_cache, str);
player_handler.c | 524 | find_player(str)->query_gender();
player_handler.c | 551 | map_delete(player_cache, player);
player_handler.c | 560 | query_player_disk_file_name(player) + ".o" :));
player_handler.c | 564 | query_player_disk_file_name(player) + ".o.gz" :));
player_handler.c | 567 | return (sizeof(file) && file[1] > time() - INACTIVE_LIMIT);
player_handler.c | 583 | map_delete(player_cache, str);
player_handler.c | 584 | find_player(str)->query_cap_name();
player_handler.c | 602 | map_delete(player_cache, str);
player_handler.c | 603 | find_player(str)->query_level();
player_handler.c | 650 | lower_case(name);
player_handler.c | 651 | replace(name, ({ "'", "", "_", " " }));
player_handler.c | 652 | explode(tname, " ");
player_handler.c | 654 | replace(name, ({ "'", " ", "_", " " }));
player_handler.c | 655 | explode(name, " ");
player_handler.c | 667 | replace(name, ({ " ", "" }));
player_handler.c | 688 | map_delete(player_cache, str);
player_handler.c | 689 | find_player(str)->query_real_name();
player_handler.c | 711 | map_delete(player_cache, str);
player_handler.c | 712 | find_player(str)->query_email();
player_handler.c | 729 | map_delete(player_cache, str);
player_handler.c | 730 | find_player(str)->query_birthday();
player_handler.c | 747 | map_delete(player_cache, str);
player_handler.c | 748 | find_player(str)->query_where();
player_handler.c | 765 | map_delete(player_cache, str);
player_handler.c | 766 | find_player(str)->query_homepage();
player_handler.c | 783 | map_delete(player_cache, str);
player_handler.c | 784 | find_player(str)->query_desc();
player_handler.c | 801 | map_delete(player_cache, word);
player_handler.c | 802 | find_player(word)->query_player_killer();
player_handler.c | 821 | map_delete(player_cache, word);
player_handler.c | 822 | find_player(word)->query_property(str);
player_handler.c | 849 | map_delete(player_cache, word);
player_handler.c | 850 | find_player(word)->query_deity();
player_handler.c | 867 | map_delete(player_cache, word);
player_handler.c | 868 | find_player(word)->query_guild_ob();
player_handler.c | 885 | map_delete(player_cache, word);
player_handler.c | 886 | find_player(word)->query_guild_data();
player_handler.c | 890 | return ({ });
player_handler.c | 903 | map_delete(player_cache, word);
player_handler.c | 904 | find_player(word)->query_time_on();
player_handler.c | 923 | map_delete(player_cache, word);
player_handler.c | 924 | find_player(word)->query_last_log_on();
player_handler.c | 931 | replace(word, ({ "/", "", "\\", "" }) );
player_handler.c | 933 | unguarded((: stat, query_player_ram_file_name(word) + ".o" :));
player_handler.c | 936 | query_player_disk_file_name(word)+".o.gz" :));
player_handler.c | 981 | map_delete(player_cache, word);
player_handler.c | 1000 | map_delete(player_cache, word);
player_handler.c | 1001 | find_player(word)->query_start_time();
player_handler.c | 1019 | lower_case (str);
player_handler.c | 1021 | map_delete(player_cache, str);
player_handler.c | 1022 | find_player(str)->query_creator();
player_handler.c | 1038 | map_delete(player_cache, str);
player_handler.c | 1039 | find_player(str)->query_home_dir();
player_handler.c | 1055 | map_delete(player_cache, str);
player_handler.c | 1056 | find_player(str)->query_family_name();
player_handler.c | 1072 | map_delete(player_cache, str);
player_handler.c | 1073 | find_player(str)->query_player_title();
player_handler.c | 1091 | if(file_size(query_player_ram_file_name(name) + ".o.gz") >
player_handler.c | 1092 | unguarded((: restore_object, query_player_ram_file_name(name), 1 :));
player_handler.c | 1094 | unguarded((: restore_object, query_player_disk_file_name(name), 1 :));
player_handler.c | 1112 | query_player_disk_file_name(name), 1 :));
player_handler.c | 1129 | map_delete(player_cache, name);
player_handler.c | 1137 | make_string(player_cache[name]->signature, 3);
player_handler.c | 1141 | strip_colours(sig);
player_handler.c | 1153 | map_delete(player_cache, name);
player_handler.c | 1155 | make_string(find_player(name)->query_player_alias(".project"), 5);
player_handler.c | 1163 | make_string(player_cache[name]->project, 5);
player_handler.c | 1173 | map_delete(player_cache, name);
player_handler.c | 1184 | make_string(player_cache[name]->plan, 5);
player_handler.c | 1194 | map_delete(player_cache, name);
player_handler.c | 1197 | query_player_alias(".reference"), 20);
player_handler.c | 1205 | make_string(player_cache[name]->reference, 20);
player_handler.c | 1215 | map_delete(player_cache, str);
player_handler.c | 1216 | find_player(str)->query_nationality();
player_handler.c | 1233 | map_delete(player_cache, str);
player_handler.c | 1234 | find_player(str)->query_nationality_region();
player_handler.c | 1251 | map_delete(player_cache, str);
player_handler.c | 1252 | find_player(str)->query_nationality_data();
player_handler.c | 1276 | map_delete(player_cache, name);
player_handler.c | 1277 | find_player(name)->query_rhosts();
player_handler.c | 1287 | implode((string *)explode(ip, ".")[0..<2], ".");
applications_handler.c | 15 | find_application (string, string);
applications_handler.c | 16 | find_type (string);
applications_handler.c | 17 | mail_message(int, int);
applications_handler.c | 18 | post_application (int);
applications_handler.c | 19 | complete_application (int);
applications_handler.c | 36 | unguarded ((: restore_object (APPLY_SAVE_FILE) :));
applications_handler.c | 40 | unguarded ((: save_object (APPLY_SAVE_FILE) :));
applications_handler.c | 46 | sizeof (applications);
applications_handler.c | 69 | load_object ("/d/" + dom + "/master");
applications_handler.c | 81 | save_me();
applications_handler.c | 85 | return (undefinedp (domain_lockout[dom]) ? -1 : domain_lockout[dom]);
applications_handler.c | 93 | find_type (type);
applications_handler.c | 98 | find_type (type);
applications_handler.c | 107 | load_object ("/d/" + dom + "/master");
applications_handler.c | 110 | tell_creator ("drakkos", "%s.\n", dom, type);
applications_handler.c | 113 | query_lord();
applications_handler.c | 116 | load_object ("/d/" + types[i]->responsibility+ "/master");
applications_handler.c | 121 | query_lord();
applications_handler.c | 127 | copy (domain_lockout);
applications_handler.c | 133 | find_application (n, t);
applications_handler.c | 143 | find_application (n, t);
applications_handler.c | 145 | complete_application (i);
applications_handler.c | 147 | save_me();
applications_handler.c | 154 | seteuid (geteuid());
applications_handler.c | 155 | load_me();
applications_handler.c | 285 | sizeof (applications);
applications_handler.c | 303 | sizeof (types);
applications_handler.c | 314 | sizeof (applications);
applications_handler.c | 315 | find_type (applications[i]->type);
applications_handler.c | 319 | mail_message (0, i);
applications_handler.c | 325 | save_me();
applications_handler.c | 331 | find_application (name, position);
applications_handler.c | 339 | map_delete (applications[i]->vouches, who);
applications_handler.c | 340 | save_me();
applications_handler.c | 353 | find_application (n, t);
applications_handler.c | 360 | save_me();
applications_handler.c | 375 | sizeof (keys (applications[i]->vouches));
applications_handler.c | 378 | find_type (applications[i]->type);
applications_handler.c | 381 | post_application (i);
applications_handler.c | 382 | delete_application (applications[i]->type, applications[i]->name);
applications_handler.c | 383 | save_me();
applications_handler.c | 398 | find_application (name, type);
applications_handler.c | 404 | sizeof (keys (applications[i]->vouches));
applications_handler.c | 419 | find_application (p, t);
applications_handler.c | 432 | find_application (p, t);
applications_handler.c | 447 | complete_application (i);
applications_handler.c | 448 | save_me();
applications_handler.c | 453 | find_type (type);
applications_handler.c | 459 | find_type (type);
applications_handler.c | 465 | find_type (type);
applications_handler.c | 466 | find_player (name);
applications_handler.c | 471 | if (-1 * ob->query_time_on() >
applications_handler.c | 483 | find_type (type);
applications_handler.c | 508 | find_application (type, name);
applications_handler.c | 542 | find_type (applications[i]->type);
applications_handler.c | 547 | format_application (i);
applications_handler.c | 549 | new(class reply_type);
applications_handler.c | 569 | find_player (applications[i]->name);
applications_handler.c | 578 | tell_object (player, response);
applications_handler.c | 594 | mail_message (1, i);
applications_handler.c | 595 | save_me();
applications_handler.c | 624 | replace (mail, ({"$message$", ret}));
applications_handler.c | 639 | sizeof (applications);
applications_handler.c | 649 | implode (ret, "\n");
applications_handler.c | 653 | map (types, (: $1->type :));
applications_handler.c | 659 | sizeof (types);
applications_handler.c | 660 | find_application (n, types[j]->type);
weather.c | 77 | add_property("climate", ({10, -50, 0});
weather.c | 83 | room_weather(int temp, int cloud, int wind, int rain);
weather.c | 139 | set_day();
weather.c | 140 | update_pattern();
weather.c | 141 | calc_actual(object env, int type);
weather.c | 142 | cloud_index(object env);
weather.c | 143 | query_day(object env);
weather.c | 144 | query_rain_type(int temp, int rain);
weather.c | 145 | sun_direction(int which);
weather.c | 146 | temperature_index(object env);
weather.c | 147 | rain_index(object env);
weather.c | 156 | unguarded((: restore_object, FILE_NAME :));
weather.c | 171 | call_out("update_weather", UPDATE_SPEED);
weather.c | 172 | set_day();
weather.c | 173 | update_pattern();
weather.c | 181 | weather_notify( room, (NOTIFY_TEMPERATURE | NOTIFY_RAIN) );
weather.c | 208 | write( w );
weather.c | 210 | write("test_notifications() done\n");
weather.c | 226 | return (( time() % AM_SECONDS_PER_DAY ) / AM_SECONDS_PER_MINUTE);
weather.c | 243 | if(calc_actual(env, CLOUD) >
weather.c | 278 | return (11 - mooncycle);
weather.c | 312 | cloud_index(env) ;
weather.c | 395 | if((minute_number() < _sunrise) || (minute_number() >
weather.c | 428 | query_day(env);
weather.c | 441 | if((cloud = cloud_index(env)) >
weather.c | 442 | cloud_index(env) / 15);
weather.c | 469 | temperature_index(env);
weather.c | 470 | rain_index(env);
weather.c | 471 | query_rain_type(temp, rain);
weather.c | 498 | query_climate();
weather.c | 499 | query_property("climate");
weather.c | 515 | calc_actual(env, TEMP);
weather.c | 518 | query_climate();
weather.c | 524 | query_day(env);
weather.c | 559 | sqrt(_current[climate][CLOUD]);
weather.c | 571 | sqrt(_current[climate][WINDSP]);
weather.c | 580 | calc_actual(env, CLOUD);
weather.c | 657 | temperature_index(env);
weather.c | 658 | rain_index(env);
weather.c | 659 | query_rain_type(temp, rain);
weather.c | 664 | precipitation_string(rain, rt, wind);
weather.c | 675 | temperature_index(env);
weather.c | 676 | rain_index(env);
weather.c | 677 | query_rain_type(temp, rain);
weather.c | 681 | precipitation_string(rain, rt, wind);
weather.c | 692 | temperature_index(env);
weather.c | 693 | rain_index(env);
weather.c | 694 | query_rain_type(temp, rain);
weather.c | 698 | precipitation_string(rain, rt, wind);
weather.c | 710 | cloud_index(env);
weather.c | 756 | temperature_index(env);
weather.c | 757 | cloud_index(env);
weather.c | 758 | calc_actual(env, WINDSP);
weather.c | 759 | rain_index(env);
weather.c | 769 | query_rain_type(temp, rain);
weather.c | 772 | temp_string(temp);
weather.c | 891 | unguarded((: save_object, FILE_NAME :));
weather.c | 956 | return (query_rain_type(warray[0], warray[3]) >
weather.c | 960 | rain_index(env)) >
weather.c | 982 | temperature_index(env);
weather.c | 1004 | cloud_index(env);
weather.c | 1026 | calc_actual(env, WINDSP);
weather.c | 1035 | random(diff * 2);
weather.c | 1037 | random(diff * 2);
weather.c | 1040 | random(_variance[type]);
weather.c | 1042 | random(_variance[type]);
weather.c | 1056 | day_number() % (DIY / 2));
weather.c | 1058 | minute_number();
weather.c | 1091 | random(random(-diff));
weather.c | 1093 | random(random(diff));
weather.c | 1098 | return (int)ob->query_property( "umbrella" );
weather.c | 1111 | temperature_index(environment(who));
weather.c | 1112 | rain_index(environment(who));
weather.c | 1113 | calc_actual(environment(who), WINDSP);
weather.c | 1114 | cloud_index(environment(who));
weather.c | 1132 | query_rain_type(old_temp, old_rain);
weather.c | 1133 | query_rain_type(new_temp, new_rain);
weather.c | 1139 | sun_direction( 1 );
weather.c | 1147 | sun_direction( 0 );
weather.c | 1226 | temperature_index(what);
weather.c | 1227 | cloud_index(what);
weather.c | 1228 | calc_actual(what, WINDSP);
weather.c | 1229 | rain_index(what);
weather.c | 1272 | event_weather( has_changed, day, temp, cloud, rain);
weather.c | 1287 | return (6 * AM_MINUTES_PER_HOUR) + (100 - toy);
weather.c | 1300 | return (20 * AM_MINUTES_PER_HOUR) - (100 - toy);
weather.c | 1314 | call_out("update_pattern", CYCLE_SPEED);
weather.c | 1318 | day_number() % (DIY / 2));
weather.c | 1324 | random(100);
weather.c | 1325 | random(10);
weather.c | 1330 | random(10);
weather.c | 1335 | random(10);
weather.c | 1341 | random(10);
weather.c | 1346 | random(10);
weather.c | 1401 | calc_variance(climate, TEMP, temp);
weather.c | 1402 | calc_variance(climate, CLOUD, cloud);
weather.c | 1403 | calc_variance(climate, WINDSP, wind);
weather.c | 1407 | unguarded((: save_object, FILE_NAME :));
weather.c | 1419 | time();
weather.c | 1420 | call_out("update_weather", UPDATE_SPEED);
weather.c | 1451 | copy(newrooms);
weather.c | 1473 | time();
weather.c | 1481 | migrate(climate, TEMP);
weather.c | 1482 | migrate(climate, CLOUD);
weather.c | 1483 | migrate(climate, WINDSP);
weather.c | 1487 | set_day();
weather.c | 1490 | unguarded((: save_object, FILE_NAME :));
weather.c | 1494 | do_inform(user, warray[0], warray[1], warray[2], warray[3]);
weather.c | 1501 | map_delete(_rooms, room);
weather.c | 1511 | query_climate();
weather.c | 1513 | calc_actual(here, WINDSP) });
weather.c | 1524 | return ({ mooncycle, 0});
weather.c | 1530 | unguarded((: save_object, FILE_NAME :));
weather.c | 1541 | day_number() % (DIY / 2));
weather.c | 1547 | random(100);
weather.c | 1548 | random(10);
weather.c | 1553 | random(10);
weather.c | 1558 | random(10);
weather.c | 1564 | random(10);
weather.c | 1569 | random(10);
weather.c | 1626 | unguarded((: save_object, FILE_NAME :));
weather.c | 1631 | return ([ "rooms" : _rooms ]);
room_handler.c | 30 | add_door( object thing );
room_handler.c | 35 | creator_file( file_name( this_object() ) ) );
room_handler.c | 70 | allocate( CHATSIZE );
room_handler.c | 71 | allocate( DOORSIZE );
room_handler.c | 72 | call_out( "housekeeping", 4 );
room_handler.c | 131 | map_delete(exit_types, type);
room_handler.c | 150 | call_out( "check_door", 1, ({ previous_object(), direc }) );
room_handler.c | 170 | set_destination( args[ 1 ] );
room_handler.c | 171 | query_destination( args[ 1 ] );
room_handler.c | 181 | call_door(args[1], "query_door_name");
room_handler.c | 182 | query_door( args[ 0 ], door_name );
room_handler.c | 190 | modify_exit( args[ 1 ], ({ "other", direc }) );
room_handler.c | 198 | call_door( direc, "query_locked" ) }) );
room_handler.c | 201 | add_door( (object)args[ 0 ]->query_door_control( args[ 1 ], door_name ) );
room_handler.c | 241 | query_dragging();
room_handler.c | 244 | reset_dragging();
room_handler.c | 252 | evaluate(enter, thing) });
room_handler.c | 260 | query_pronoun() }) );
room_handler.c | 269 | evaluate(exit, thing);
room_handler.c | 273 | query_msgout();
room_handler.c | 276 | query_pronoun() }) );
room_handler.c | 280 | return_to_default_position(1);
room_handler.c | 283 | remove_hide_invis( "hiding" );
room_handler.c | 297 | tell_object( thing, move );
room_handler.c | 300 | move( dest, arrive, leave );
room_handler.c | 304 | the_short() +" behind you.\n" );
room_handler.c | 305 | adjust_time_left( -DEFAULT_TIME );
room_handler.c | 306 | adjust_cond(-100);
room_handler.c | 309 | the_short() +" behind you.\n" );
room_handler.c | 314 | tell_object( thing, move );
room_handler.c | 316 | move( dest );
room_handler.c | 320 | adjust_time_left( -DEFAULT_TIME );
room_handler.c | 334 | force_other();
room_handler.c | 358 | notify_fail("");
room_handler.c | 375 | call_other(place, func, verb, thing, special);
room_handler.c | 378 | evaluate(func, verb, thing, special);
room_handler.c | 380 | if(pointerp(func) && sizeof(func) >
room_handler.c | 381 | call_other(func[0], func[1], verb, thing, special);
room_handler.c | 411 | environment( thing );
room_handler.c | 412 | expand_alias( verb );
room_handler.c | 413 | set_destination( verb );
room_handler.c | 416 | query_dest_other( verb );
room_handler.c | 421 | notify_fail( "" );
room_handler.c | 424 | query_door_control( verb );
room_handler.c | 430 | force_other();
room_handler.c | 432 | query_door_control( verb );
room_handler.c | 438 | sizeof(dest_other) >
room_handler.c | 442 | query_locked();
room_handler.c | 456 | notify_fail( "" );
room_handler.c | 466 | find_rel( verb, 0 );
room_handler.c | 471 | if((int)thing->query_height() >
room_handler.c | 474 | tell_object( thing, "You are too tall to go that way.\n" );
room_handler.c | 475 | notify_fail( "" );
room_handler.c | 488 | return_to_default_position(1);
room_handler.c | 493 | query_followers();
room_handler.c | 505 | query_followers();
room_handler.c | 511 | while (sizeof(more_followers));
room_handler.c | 517 | remove_follower( follower );
room_handler.c | 544 | sizeof(dest_other) >
room_handler.c | 548 | find_rel( verb, 0 );
room_handler.c | 549 | reorient_rel( leave );
room_handler.c | 552 | reorient_abs( leave );
room_handler.c | 555 | if ( (int)follower->query_height() >
room_handler.c | 557 | the_short() +" "+ leave +".\n" );
room_handler.c | 577 | return_to_default_position(1);
room_handler.c | 581 | the_short() +" "+ leave +".\n" );
room_handler.c | 590 | room_look();
room_handler.c | 592 | room_look();
room_handler.c | 598 | moving_close(thing);
room_handler.c | 601 | moving_lock(thing);
room_handler.c | 608 | call_out( "check_chatters", 1 );
room_handler.c | 609 | call_out( "check_doors", 2 );
room_handler.c | 610 | call_out( "housekeeping", 4 );
room_handler.c | 632 | make_chat();
room_handler.c | 638 | random( DOORSIZE );
room_handler.c | 662 | query_dest();
room_handler.c | 663 | query_other_id();
room_handler.c | 664 | query_my_room();
room_handler.c | 665 | calc_actual( mine, WINDSP );
room_handler.c | 666 | if ( random( 25 ) >
room_handler.c | 667 | add_door( thing );
room_handler.c | 681 | modify_exit( other, ({ "closed", 1 }) );
room_handler.c | 683 | modify_exit(other, ({ "locked", 1 }));
room_handler.c | 684 | tell_door( other, "The $D "+ mess, 0 );
room_handler.c | 686 | set_closed( 1 );
room_handler.c | 688 | set_locked();
room_handler.c | 689 | tell_door( "The $D "+ mess, 0 );
room_handler.c | 724 | sizeof( temp );
room_handler.c | 726 | sizeof( temp );
co_ordinate_handler.c | 20 | setup_room(string path);
co_ordinate_handler.c | 28 | sizeof(bits);
co_ordinate_handler.c | 40 | query_room_size_array() + path->query_room_size_array();
co_ordinate_handler.c | 41 | copy( _rooms[new_path]->coords);
co_ordinate_handler.c | 47 | new(class room_data);
co_ordinate_handler.c | 66 | map_delete(_rooms, path);
co_ordinate_handler.c | 69 | setup_specific_room(path, data->other, data->direction);
co_ordinate_handler.c | 98 | query_dest_dir();
co_ordinate_handler.c | 99 | sizeof(bits);
co_ordinate_handler.c | 101 | file_name(find_object(bits[i+1]));
co_ordinate_handler.c | 107 | setup_specific_room(path, new_path, bits[i]);
co_ordinate_handler.c | 123 | query_terrain_handler());
co_ordinate_handler.c | 138 | new(class room_data);
co_ordinate_handler.c | 141 | time();
hospital.c | 23 | set_save_file(SAVE + "/hospital");
hospital.c | 24 | set_data_directory(DATA + "/hospital");
hospital.c | 25 | set_log_directory(LOG + "/hospital");
hospital.c | 26 | set_npc_path(CHARS + "/hospital");
hospital.c | 27 | set_not_replaceable(1);
hospital.c | 29 | set_short("Our hospital");
hospital.c | 30 | set_long("This is the hospital.\n");
hospital.c | 269 | load_random_npc(string zone, int wealth, int busy);
hospital.c | 270 | load_file();
hospital.c | 271 | save_file();
hospital.c | 272 | set_save_file(string new_save);
hospital.c | 274 | hospital_log_file(string file, string format, mixed *args ...);
hospital.c | 275 | get_item(object destination, string *items);
hospital.c | 276 | query_save_file();
hospital.c | 277 | query_npcs();
hospital.c | 278 | query_hospital_npcs();
hospital.c | 279 | add_npc_type(string type, string *data);
hospital.c | 280 | regen_after_death( object dead_npc );
hospital.c | 313 | seteuid(master()->creator_file(file_name(this_object())));
hospital.c | 316 | create();
hospital.c | 355 | set_short( "Un-configured Hospital" );
hospital.c | 356 | set_long("This is an unconfigured hospital.  Find the right one.\n");
hospital.c | 357 | add_property("determinate", "the ");
hospital.c | 358 | set_light(60);
hospital.c | 360 | this_object()->setup();
hospital.c | 395 | floor( range / 10 );
hospital.c | 397 | random( TOTAL_CHANCE );
hospital.c | 433 | random( section_width );
hospital.c | 484 | random(sizeof(items));
hospital.c | 485 | request_item(items[i], 80 + random(21), _domain);
hospital.c | 488 | request_item(items[i], 80 + random(21) );
hospital.c | 498 | previous_object()->short());
hospital.c | 504 | move(destination);
hospital.c | 517 | if (file_size(_save_file + ".o") >
hospital.c | 518 | unguarded((: restore_object, _save_file :));
hospital.c | 557 | unguarded((: save_object, _save_file :));
hospital.c | 573 | load_file();
hospital.c | 594 | call_out("scan_for_new_data", 2);
hospital.c | 673 | query_name();
hospital.c | 677 | new(class unique_npc);
hospital.c | 690 | save_file();
hospital.c | 724 | previous_object()->query_property("start location") ) });
hospital.c | 736 | if (!new_npc->load_position || !new_npc->type );
hospital.c | 739 | random(5);
hospital.c | 742 | find_object( new_npc->load_position );
hospital.c | 747 | get_monster(new_npc->type);
hospital.c | 748 | replace_monster(previous_object(), monsters);
hospital.c | 774 | ctime(time()), _regenerated_npcs);
hospital.c | 794 | log_file( _hospital_log_directory + "/" + file, ctime(time()) + ": " + format, args ...);
hospital.c | 803 | set_log_directory( "/d/cwc/Bes_Pelargic/log" );
hospital.c | 807 | set_log_directory( "/d/cWc/BeS_pelarGic/lrg" );
hospital.c | 816 | file_name( this_object() ), DEFAULT_LOG_DIRECTORY );
hospital.c | 833 | debug_printf("No name for zone %O\n", data);
hospital.c | 834 | hospital_log_file("COMPILE_ERROR", "No name for zone %O\n", data);
hospital.c | 855 | new(class zone_info, npcs : ([ ]), groups : ([ ]), zones : ([ ]));
hospital.c | 859 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 860 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 871 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 872 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 883 | debug_printf("Invalid data for zone (%s) %O\n", name, bing);
hospital.c | 884 | hospital_log_file("COMPILE_ERROR", "Invalid data for zone (%s) %O\n", name,  bing);
hospital.c | 893 | keys(data) - ({ "zone", "group", "npc", "name", "busy" });
hospital.c | 898 | query_multiple_short(bits), name);
hospital.c | 901 | save_file();
hospital.c | 910 | debug_printf("No name for npc %O\n", data);
hospital.c | 911 | hospital_log_file("COMPILE_ERROR", "No name for npc %O\n", data);
hospital.c | 916 | hospital_log_file("COMPILE_ERROR", "Required path field not present for npc %s\n", name);
hospital.c | 921 | hospital_log_file("BAD_NPC_PATH", "Bad path for npc %s (%s)\n", name, data["path"]);
hospital.c | 931 | new(class npc_info, move_zones : ({ }), commands : ({ }));
hospital.c | 957 | keys(data) - ({ "unique", "path", "move_zone", "population", "name", "delay", "transient", "nocturnal" });
hospital.c | 962 | query_multiple_short(bits), name);
hospital.c | 976 | save_file();
hospital.c | 988 | debug_printf("No name for group %O\n", data);
hospital.c | 989 | hospital_log_file("COMPILE_ERROR", "No name for group %O\n", data);
hospital.c | 1007 | debug_printf("Invalid data for group (%s) %O\n", name, bing);
hospital.c | 1008 | hospital_log_file("COMPILE_ERROR", "Invalid data for group (%s) %O\n", name,  bing);
hospital.c | 1028 | keys(data) - ({ "npc", "name", "population", "move_zone", "protect", "defend", "transient", });
hospital.c | 1033 | query_multiple_short(bits), name);
hospital.c | 1055 | parse_zone(fname, thing);
hospital.c | 1060 | parse_npc(fname, thing);
hospital.c | 1065 | parse_group(fname, thing);
hospital.c | 1069 | debug_printf("Unknown data area %s in %s\n", name, fname);
hospital.c | 1070 | hospital_log_file("COMPILE_ERROR", "Unknown data area %s in %s\n", name, fname);
hospital.c | 1076 | save_file();
hospital.c | 1088 | debug_printf("Scan for new data.");
hospital.c | 1099 | get_dir(fname + "/");
hospital.c | 1102 | filter(bits, (: $1[0] != '.' :));
hospital.c | 1103 | map(bits, (: $2 + "/" + $1 :), fname);
hospital.c | 1107 | debug_printf("Compiling %s", fname);
hospital.c | 1114 | unguarded( (: stat(__FILE__)[1] :));
hospital.c | 1168 | children(npc_path(data->path));
hospital.c | 1173 | filter(data->population, (: objectp($1) :));
hospital.c | 1177 | sizeof(data->population);
hospital.c | 1227 | map(group->storage, (: filter($1, (: objectp($1) :)) :));
hospital.c | 1228 | filter(group->storage, (: sizeof($1) :));
hospital.c | 1234 | if (sizeof(group->storage) >
hospital.c | 1253 | debug_printf("Unable to find npc %O", npc_name);
hospital.c | 1270 | find_object( npc_path(info->path) );
hospital.c | 1272 | debug_printf("Unique npc %O", info);
hospital.c | 1274 | hospital_log_file("BAD_NPC_PATH", "Error loading %s (%s)\n", npc_name, info->path);
hospital.c | 1278 | hospital_log_file("BAD_NPC_PATH", "Failed to load %s (%s)\n", npc_name, info->path);
hospital.c | 1286 | debug_printf("NPC unique and already exists %O", npc_name);
hospital.c | 1301 | clone_object( npc_path(info->path) );
hospital.c | 1303 | add_property("transient", 1);
hospital.c | 1304 | add_property("npc_id", npc_name);
hospital.c | 1305 | add_property("hospital", base_name(this_object()));
hospital.c | 1308 | debug_printf("Failed to clone %s", npc_path(info->path));
hospital.c | 1312 | clone_object( npc_path(info->path) );
hospital.c | 1315 | debug_printf("Npc path does not exist %O (%O)", npc, npc_path(info->path));
hospital.c | 1318 | debug_printf("NPC over max population %O", npc_name);
hospital.c | 1322 | debug_printf("Broken npc data %O", info->path);
hospital.c | 1330 | add_property("npc_id", npc_name);
hospital.c | 1332 | add_move_zone(zone);
hospital.c | 1335 | init_command(cmd, 2);
hospital.c | 1370 | roll_dice(quantity);
hospital.c | 1373 | load_npc_object(npc_name);
hospital.c | 1375 | move("/room/rubbish");
hospital.c | 1376 | return ({ });
hospital.c | 1381 | init_command(cmd, 2);
hospital.c | 1393 | add_property("group_id", group_name);
hospital.c | 1398 | add_follower(ob_bing);
hospital.c | 1400 | add_defender(ob_bing);
hospital.c | 1403 | add_protector(ob_bing);
hospital.c | 1459 | query_property("npc_id");
hospital.c | 1469 | query_property("group_id");
hospital.c | 1472 | sizeof(stuff);
hospital.c | 1476 | sizeof($1) :));
hospital.c | 1516 | return ({ });
hospital.c | 1521 | return ({ });
hospital.c | 1526 | load_npc_object(npc);
hospital.c | 1528 | return ({ ob });
hospital.c | 1538 | load_group_npcs(npc);
hospital.c | 1549 | load_random_npc(extra, -1, -1);
hospital.c | 1552 | return ({ });
hospital.c | 1570 | return ({ });
hospital.c | 1586 | return ({ });
hospital.c | 1589 | count_chances_in_zone(zone);
hospital.c | 1591 | return ({ });
hospital.c | 1593 | random(chance);
hospital.c | 1594 | create_npcs_in_zone(zone, pos);
hospital.c | 1614 | if(stringp(npc->path) && file_size(npc_path(npc->path) + ".c") >
hospital.c | 1615 | query_npc_current_population(name, 0);
hospital.c | 1635 | query_multiple_short(keys(group->npcs)));
hospital.c | 1639 | sizeof( group->storage ), group->max_population );
hospital.c | 1647 | sprintf("$I$5=Name: %s %d\n", name, sizeof(group));
hospital.c | 1651 | write("$P$Report$P$" + txt );
hospital.c | 1660 | this_player();
hospital.c | 1662 | add_command("report", "", (: do_report :));
hospital.c | 1668 | query_property("npc_id")] = ({ ob });
hospital.c | 1669 | if(sizeof(_cache_inventory[ob->query_property("npc_id")]) >
hospital.c | 1671 | move("/room/rubbish");
hospital.c | 1673 | query_property("npc_id")] += ({ ob });
hospital.c | 1675 | move("/room/rubbish");
hospital.c | 1691 | allocate_mapping( sizeof( _group_info ) );
hospital.c | 1697 | allocate_mapping( sizeof( _npc_info) );
hospital.c | 1702 | return ([ file_name( this_object() ) : tmp, "npcs" : tmp2 ]);
hospital.c | 1730 | values( map( _group_info, (: $2->storage :) ) );
hospital.c | 1736 | copy(_cache_inventory);
hospital.c | 1746 | keys( _npc_info );
nquest_handler.c | 62 | load_quests() { unguarded( (: restore_object, SAVE_FILE :) );
nquest_handler.c | 68 | save_quests() { unguarded( (: save_object, SAVE_FILE :) );
nquest_handler.c | 72 | create();
nquest_handler.c | 73 | load_quests();
nquest_handler.c | 94 | allocate(sizeof(quest_name));
nquest_handler.c | 95 | sizeof(quest_name);
nquest_handler.c | 103 | sizeof(quest_level);
nquest_handler.c | 146 | this_player()->query_name();
nquest_handler.c | 149 | file_name( previous_object() );
nquest_handler.c | 154 | save_quests();
nquest_handler.c | 155 | unguarded( (: cp, SAVE_FILE +".o", BACKUP_FILE +"."+ time() :) );
nquest_handler.c | 168 | member_array(name, quest_name);
nquest_handler.c | 184 | member_array(name, quest_name);
nquest_handler.c | 202 | member_array(name, quest_name);
nquest_handler.c | 221 | member_array(name, quest_name);
nquest_handler.c | 227 | this_player()->query_name();
nquest_handler.c | 230 | file_name( previous_object() );
nquest_handler.c | 236 | save_quests();
nquest_handler.c | 250 | member_array(name, quest_name);
nquest_handler.c | 268 | member_array(name, quest_name);
nquest_handler.c | 274 | this_player()->query_name();
nquest_handler.c | 277 | file_name( previous_object() );
nquest_handler.c | 283 | save_quests();
nquest_handler.c | 297 | member_array(name, quest_name);
nquest_handler.c | 315 | member_array(name, quest_name);
nquest_handler.c | 321 | this_player()->query_name();
nquest_handler.c | 324 | file_name( previous_object() );
nquest_handler.c | 330 | save_quests();
nquest_handler.c | 346 | member_array( name, quest_name );
nquest_handler.c | 364 | member_array( name, quest_name );
nquest_handler.c | 381 | this_player()->query_name();
nquest_handler.c | 384 | file_name( previous_object() );
nquest_handler.c | 389 | member_array(name, quest_name);
nquest_handler.c | 394 | delete(quest_name, temp, 1);
nquest_handler.c | 395 | delete(quest_level, temp, 1);
nquest_handler.c | 396 | delete(quest_title, temp, 1);
nquest_handler.c | 397 | delete(quest_story, temp, 1);
nquest_handler.c | 398 | delete( last_done_by, temp, 1 );
nquest_handler.c | 399 | delete( num_times_done, temp, 1 );
nquest_handler.c | 400 | save_quests();
nquest_handler.c | 458 | user_event( "inform", name +" completes "+ quest, "quest" );
nquest_handler.c | 460 | previous_object();
nquest_handler.c | 462 | query_name();
nquest_handler.c | 464 | file_name( prev_ob );
nquest_handler.c | 468 | log_file( QUEST_LOG, "given by "+ word +"\n" );
nquest_handler.c | 469 | member_array( quest, quest_name );
nquest_handler.c | 471 | log_file( QUEST_LOG, "non existent quest\n" );
nquest_handler.c | 476 | save_quests();
nquest_handler.c | 500 | this_player()->expand_nickname(name);
nquest_handler.c | 508 | query_quest_points(name);
nquest_handler.c | 510 | query_total_qp();
nquest_handler.c | 564 | return ({ });
nquest_handler.c | 568 | this_player()->expand_nickname(name);
nquest_handler.c | 576 | query_quest_names();
nquest_handler.c | 581 | sizeof(quests);
nquest_handler.c | 597 | sizeof(quest_name);
nquest_handler.c | 598 | printf("%s: %6d, %3d\n", quest_name[i], num_times_done[i], quest_level[i]);
data.c | 38 | write_file();
data.c | 182 | Error(s) write(s);
data.c | 182 | log_file( "DATA_COMPILER", s);
data.c | 184 | Error(s) ;
data.c | 190 | creator_file(file_name(this_object()));
data.c | 191 | seteuid(std_euid);
data.c | 192 | Error("Note: euid at creation is " + geteuid() + "\n");
data.c | 212 | sizeof(parse[0]);
data.c | 241 | dest_me();
data.c | 242 | if (file_size(tmp_name) >
data.c | 250 | unguarded((: rm, tmp_name :));
data.c | 256 | seteuid(std_euid);
data.c | 259 | Error("Note: " + tmp_name + " removed (supposedly).\n");
data.c | 261 | seteuid(std_euid);
data.c | 262 | sizeof(path);
data.c | 265 | read_file( path[i] );
data.c | 268 | Error("Error: file(s) not found.\n");
data.c | 273 | explode( "$\n" + data, "\n#" );
data.c | 275 | Error( "prop_to_fun() : Nothing but comments?\n" );
data.c | 281 | sizeof( segments );
data.c | 287 | implode( segments, "\n" );
data.c | 291 | explode( strip_string( data ), "::" );
data.c | 296 | allocate( sizeof( segments ) / 2 );
data.c | 297 | allocate( sizeof( segments ) / 2 );
data.c | 301 | sizeof( ind );
data.c | 303 | replace( segments[ i * 2 + 1 ], "\n", " " );
data.c | 306 | strip_string( segments[ i * 2 + 1 ] );
data.c | 309 | lower_case( ind[ i ] );
data.c | 313 | sscanf( val[ i ], "%d", debug_file );
data.c | 322 | sizeof( ind );
data.c | 323 | lower_case( ind[ i ] );
data.c | 330 | sizeof(ind[i]) + sizeof(val[i]);
data.c | 333 | Error("Error: more than one data keyword found.\n");
data.c | 338 | dest_me() { destruct( this_object() );
data.c | 347 | cleanup_assoc( parse );
data.c | 348 | printf("parse = %O\n", parse);
data.c | 356 | implode(parse[0][j..], " ");
data.c | 360 | allocate(sizeof(index_types));
data.c | 363 | Error("Error: data parse error 1 (" + parse[0][j] + ")\n");
data.c | 371 | sizeof(index_types);
data.c | 411 | cleanup_assoc( parse );
data.c | 412 | printf("parse = %O\nindex_max = %O\n", parse, index_max);
data.c | 414 | sizeof(index_types);
data.c | 433 | if ((t = to_int(parse[0][j+1])) >
data.c | 435 | allocate(" + (t-index_max[j]) + ");
data.c | 454 | printf("val[i] = %O\n", val[i]);
data.c | 462 | new( " + base + " );
data.c | 481 | sizeof(index_types);
data.c | 484 | allocate(" + (to_int(index_max[j]) + 1) + ");
data.c | 494 | seteuid("Root");
data.c | 495 | unguarded((: write_file, tmp_name, file_data, 1 :));
data.c | 496 | seteuid(std_euid);
data.c | 497 | data_return();
data.c | 523 | start_compile();
data.c | 524 | parse_chunk(class compile_data data, string chunk);
data.c | 573 | new(class compile_data);
data.c | 578 | start_compile();
data.c | 590 | time();
data.c | 593 | file_length(data->file_name);
data.c | 594 | new(class compile_node, type : 0, children : ([ ]) );
data.c | 596 | new(class data_node, type : 0, value : ([ ]) )) });
data.c | 597 | call_out("compile_chunk", CALLOUT_DELAY);
data.c | 607 | time();
data.c | 610 | call_out("start_compile", CALLOUT_DELAY);
data.c | 613 | evaluate(data->call_back, data->file_name, data->depths[0]->data->value);
data.c | 625 | call_out("compile_chunk", CALLOUT_DELAY);
data.c | 626 | parse_chunk(data, chunk);
data.c | 639 | new(class data_dice);
data.c | 643 | to_int(s1);
data.c | 647 | to_int(s1);
data.c | 652 | to_int(s1);
data.c | 658 | to_int(str);
data.c | 679 | strlen(chunk);
data.c | 681 | explode(chunk, "(");
data.c | 698 | strlen(chunk);
data.c | 700 | new(class data_node, type : 0);
data.c | 701 | new(class queue_node, data : node) });
data.c | 740 | debug_printf("Error, found a bracket inside a list.\n");
data.c | 777 | debug_printf("End of list without a start of list.\n");
data.c | 783 | debug_printf("Cannot have nested lists.\n");
data.c | 830 | debug_printf("Expected , or } not %s\n", chunk[pos..pos+5]);
data.c | 853 | strlen(s2);
data.c | 876 | to_diceint(data->depths[<1]->data->value);
data.c | 879 | to_diceint(data->depths[<1]->data->value[<1]);
data.c | 888 | if (strlen(s1) >
data.c | 896 | strlen(s2);
data.c | 899 | replace(s1, "\n", "");
data.c | 907 | strlen(s2);
data.c | 911 | replace(chunk, "\n", "");
data.c | 928 | debug_printf("%O\n", data);
inhume.c | 24 | map( previous_object(-1), (: file_name($1) :) );
inhume.c | 26 | ctime( time() ), prev );
inhume.c | 27 | tell_creator( "shrike", msg );
inhume.c | 28 | log_file( LOG, msg );
broadcaster.c | 54 | npc_hear_shouts(object newlistener);
broadcaster.c | 55 | npc_unhear_shouts(object oldlistener);
broadcaster.c | 62 | load_me();
broadcaster.c | 63 | save_me();
broadcaster.c | 75 | load_me();
broadcaster.c | 94 | return ({ 0, DIR_ARRAY[0], 0 });
broadcaster.c | 101 | if ( ( 1000 * dy ) >
broadcaster.c | 104 | if ( ( 1000 * dy ) >
broadcaster.c | 107 | if ( ( 1000 * dy ) >
broadcaster.c | 110 | if ( ( 1000 * dy ) >
broadcaster.c | 137 | return ({ dx * dx + dy * dy + dz * dz, DIR_ARRAY[ sector ], dz });
broadcaster.c | 168 | environment( thing );
broadcaster.c | 172 | query_co_ord();
broadcaster.c | 189 | get_direc_dist( centre, to );
broadcaster.c | 200 | reset_eval_cost();
broadcaster.c | 207 | if ( ( dir_direc[ 2 ] * dir_direc[ 2 ] ) >
broadcaster.c | 238 | add_message( "$I$5="+ text, ({ }) );
broadcaster.c | 263 | member_array(0,_listeners);
broadcaster.c | 289 | member_array(oldlistener,_listeners);
broadcaster.c | 349 | map_delete(_channels, channel_name);
broadcaster.c | 376 | query_cap_name();
broadcaster.c | 380 | event_channel_message(ob, channel, message);
broadcaster.c | 386 | time() }) });
broadcaster.c | 387 | if (sizeof(_channel_history[channel]) >
broadcaster.c | 422 | undefinedp(_channels[channel]);
broadcaster.c | 445 | save_me();
broadcaster.c | 450 | unguarded( (: save_object(SAVE_FILE) :) );
broadcaster.c | 454 | unguarded( (: restore_object(SAVE_FILE, 1) :) );
options_handler.c | 35 | set_player_brief(object player, string variable, int value);
options_handler.c | 36 | query_player_brief(object player, string variable);
options_handler.c | 37 | get_inform_colours(object player);
options_handler.c | 38 | get_club_colours(object player);
options_handler.c | 39 | change_bool_property(string prop, object player, int new_value);
options_handler.c | 40 | change_earmuffs(object player, string ear, int new_value);
options_handler.c | 41 | setup_earmuffs(object player, string value);
options_handler.c | 42 | valid_birthday(string str);
options_handler.c | 43 | convert_birthday(string birthday);
options_handler.c | 44 | change_error_reports(object player, string ear, int new_value);
options_handler.c | 209 | attitude (see help tactics)");
options_handler.c | 214 | response (see help tactics)");
options_handler.c | 219 | with (see help tactics)");
options_handler.c | 224 | with (see help tactics)");
options_handler.c | 229 | with (see help tactics)");
options_handler.c | 242 | combat (see help tactics)");
options_handler.c | 248 | distance (see help tactics)");
options_handler.c | 265 | comma (an inclusive list)");
options_handler.c | 327 | lower_case(womble);
options_handler.c | 340 | strlen($3) >
options_handler.c | 344 | strlen($3) >
options_handler.c | 348 | strlen($3) >
options_handler.c | 352 | strlen($3) >
options_handler.c | 356 | strlen($3) >
options_handler.c | 413 | new(class option);
options_handler.c | 429 | set_function(variable, value);
options_handler.c | 443 | explode(name, " ");
options_handler.c | 487 | evaluate(tree[name]->query, player, name);
options_handler.c | 507 | query_sub_option(player, option, stuff);
options_handler.c | 512 | query_sub_option(player, path[<1], stuff);
options_handler.c | 546 | explode(name, " ");
options_handler.c | 547 | query_bottom_sub_option(player, path);
options_handler.c | 565 | explode(name, " ");
options_handler.c | 566 | query_bottom_sub_option(player, path);
options_handler.c | 584 | explode(name, " ");
options_handler.c | 585 | query_bottom_sub_option(player, path);
options_handler.c | 591 | return ({ });
options_handler.c | 606 | explode(name, " ");
options_handler.c | 607 | query_bottom_sub_option(player, path);
options_handler.c | 613 | return ({ "on", "off" });
options_handler.c | 615 | return ({ "brief", "verbose" });
options_handler.c | 617 | return ({ "integer" });
options_handler.c | 619 | return ({ "string" });
options_handler.c | 621 | return ({ "0..100" });
options_handler.c | 623 | return ({ "none", "default", "colour" });
options_handler.c | 629 | return ({ });
options_handler.c | 642 | explode(path, " ");
options_handler.c | 643 | query_bottom_sub_option(player, bits);
options_handler.c | 645 | evaluate(stuff->query, player, bits);
options_handler.c | 689 | explode(path, " ");
options_handler.c | 690 | query_bottom_sub_option(player, bits);
options_handler.c | 692 | copy(stuff->help);
options_handler.c | 709 | explode(path, " ");
options_handler.c | 710 | query_bottom_sub_option(player, bits);
options_handler.c | 715 | query_multiple_short(stuff->type) + ".\n");
options_handler.c | 745 | add_failed_mess("Value must be between 0 and 100.\n");
options_handler.c | 754 | upper_case($1) :));
options_handler.c | 755 | filter(set_value, (: member_array($1, _colours) == -1 :));
options_handler.c | 757 | add_failed_mess("Bad colours " + implode(bad, " ") + ".\n");
options_handler.c | 768 | evaluate(stuff->set, player, bits, set_value);
options_handler.c | 791 | query_inform_types();
options_handler.c | 809 | query_name();
options_handler.c | 815 | normalise_name($1) :) );
options_handler.c | 824 | call_out((: map_delete(_cache_input, $1) :), 5 * 60, index);
options_handler.c | 830 | add_property(prop, 1);
options_handler.c | 832 | remove_property(prop);
options_handler.c | 841 | toggle_earmuffs();
options_handler.c | 843 | toggle_earmuffs();
options_handler.c | 844 | toggle_earmuffs();
options_handler.c | 849 | toggle_earmuffs();
options_handler.c | 853 | set_allow_friends_earmuffs();
options_handler.c | 862 | query_property(PLAYER_SHOW_ERRORS_PROP);
options_handler.c | 866 | upper_case(error);
options_handler.c | 870 | add_property(PLAYER_SHOW_ERRORS_PROP, on);
options_handler.c | 874 | add_property(PLAYER_SHOW_ERRORS_PROP, on);
options_handler.c | 882 | query_property("earmuffs");
options_handler.c | 889 | add_property("earmuffs", on);
options_handler.c | 893 | add_property("earmuffs", on);
options_handler.c | 931 | sscanf(str, "%d", tot);
room_rental.c | 32 | do_load();
room_rental.c | 33 | do_save();
room_rental.c | 34 | evict_tenant( object room_ob );
room_rental.c | 47 | do_load();
room_rental.c | 53 | time();
room_rental.c | 60 | evict_tenant( find_object( room ) );
room_rental.c | 70 | do_save();
room_rental.c | 77 | unguarded( (: restore_object( ROOM_RENTAL_SAVE_FILE, 1 ) :) );
room_rental.c | 83 | unguarded( (: save_object( ROOM_RENTAL_SAVE_FILE , 0 ) :) );
room_rental.c | 95 | filter( all_inventory( room_ob ), (: living :) );
room_rental.c | 96 | evict_tenant( occupants );
room_rental.c | 119 | query_location();
room_rental.c | 122 | do_save();
room_rental.c | 161 | short();
room_rental.c | 162 | short();
room_rental.c | 185 | load_object( room )->short();
room_rental.c | 188 | map_delete( rented_rooms, room );
room_rental.c | 189 | map_delete( rental, room );
room_rental.c | 190 | map_delete( eviction_times, room );
room_rental.c | 191 | map_delete( locations, room );
room_rental.c | 192 | map_delete( paths, room_short );
room_rental.c | 194 | do_save();
room_rental.c | 213 | load_object( room );
room_rental.c | 214 | map_delete( rented_rooms, room );
room_rental.c | 215 | map_delete( rental, room );
room_rental.c | 216 | map_delete( eviction_times, room );
room_rental.c | 217 | map_delete( locations, room );
room_rental.c | 218 | map_delete( paths, room_ob->query_short() );
room_rental.c | 221 | do_save();
room_rental.c | 237 | query_location() ) :) ) );
room_rental.c | 262 | query_domain();
room_rental.c | 272 | short();
room_rental.c | 280 | do_save();
room_rental.c | 307 | short();
room_rental.c | 316 | do_save();
twiki.c | 9 | do_check_changes();
twiki.c | 25 | seteuid(getuid());
twiki.c | 26 | restore_object(SAVE_FILE);
twiki.c | 28 | do_check_changes();
twiki.c | 30 | call_out("do_check_changes", _last_check + CHECK_TIME - time());
twiki.c | 35 | call_out("do_change_inform", 60 * 5);
twiki.c | 54 | read_file(TWIKI_DATA_DIRECTORY + database + TWIKI_CHANGE_FILE);
twiki.c | 56 | explode(content, "\n");
twiki.c | 58 | sizeof(lines);
twiki.c | 59 | reg_assoc(lines[<i], ({ "([a-zA-Z][a-zA-Z0-9]+)", "[0-9]+" }), ({ 1, 2 }));
twiki.c | 60 | reg_assoc(lines[<i], ({ "([a-zA-Z][a-zA-Z0-9]+)", "[0-9]+" }), ({ 1, 2 }) );
twiki.c | 64 | sscanf(bits[0][5], "%d", tim);
twiki.c | 77 | if (file_size("/twiki/data/" + database + "/" + page + ".txt") >
twiki.c | 114 | find_changed_pages(limit, database);
twiki.c | 118 | query_multiple_short(changes_pages[page]));
twiki.c | 143 | find_changed_pages(limit, database);
twiki.c | 147 | query_multiple_short(changes_pages[page]));
twiki.c | 158 | if (strsrch(fname, ".") >
twiki.c | 165 | read_file(fname);
twiki.c | 174 | find_changes(_last_check);
twiki.c | 179 | time();
twiki.c | 180 | save_object(SAVE_FILE);
twiki.c | 181 | call_out("do_check_changes", _last_check + CHECK_TIME - time());
twiki.c | 201 | time();
twiki.c | 209 | find_changed_pages(_last_change[database], database);
twiki.c | 218 | this_player() );
twiki.c | 225 | save_object(SAVE_FILE);
twiki.c | 227 | call_out("do_change_inform", 60 * 5);
pattern_compiler.c | 23 | compile_pattern(string str);
pattern_compiler.c | 34 | sizeof(pattern_order)-PATTERN_CACHE_SIZE);
pattern_compiler.c | 35 | map_delete(patterns, pattern_order[i]);
pattern_compiler.c | 36 | map_delete(pattern_short, pattern_order[i]);
pattern_compiler.c | 51 | compile_pattern(pattern);
pattern_compiler.c | 58 | if(!cache_callout && (sizeof(pattern_order) >
pattern_compiler.c | 59 | call_out("clean_cache", 300);
pattern_compiler.c | 91 | explode(str, " ") - ({ 0, "" });
pattern_compiler.c | 97 | strsrch(bits[i], "'");
pattern_compiler.c | 100 | strsrch(bits[i][pos + 1..], "'", pos + 1);
pattern_compiler.c | 103 | sizeof(bits);
pattern_compiler.c | 104 | strsrch(bits[j], "'");
pattern_compiler.c | 117 | strsrch(bits[i], "'", -1);
pattern_compiler.c | 133 | explode(bits[i], ":");
pattern_compiler.c | 140 | if (sizeof(bits[i]) >
pattern_compiler.c | 159 | printf("Unknown type of direct (%s).\n", bits[i][1]);
pattern_compiler.c | 178 | if (sizeof(bits[i]) >
pattern_compiler.c | 203 | if (sizeof(bits[i]) >
pattern_compiler.c | 225 | printf("Unknown type of indirect (%s).\n", bits[i][1]);
pattern_compiler.c | 244 | if (sizeof(bits[i]) >
pattern_compiler.c | 268 | if (sizeof(bits[i]) >
pattern_compiler.c | 298 | printf("Invalid type of string (%s).\n", bits[i][1]);
pattern_compiler.c | 342 | implode(bits[i], ":");
pattern_compiler.c | 352 | printf("Unknown word list name (%s)\n", bits[i]);
pattern_compiler.c | 357 | explode(bits[i], "|") });
pattern_compiler.c | 365 | explode(bits[i][1..<2], "|") });
pattern_compiler.c | 374 | explode(elm, " ") });
pattern_compiler.c | 388 | printf("Unknown word list name (%s)\n", bits[i]);
pattern_compiler.c | 395 | explode(bits[i][2..<3], "|") });
pattern_compiler.c | 404 | explode(elm, " ") });
pattern_compiler.c | 409 | explode(bits[i][1..<2], "|") });
pattern_compiler.c | 418 | explode(elm, " ") });
pattern_compiler.c | 449 | compile_pattern(str);
nmoney_handler.c | 26 | merge_money_arrays(mixed *m_array1, mixed *m_array2);
nmoney_handler.c | 27 | filter_legal_money_array(mixed *m_array, string where);
nmoney_handler.c | 32 | creator_file( file_name( this_object() ) ) );
nmoney_handler.c | 44 | if ( file_size( SAVE_FILE +".o" ) >
nmoney_handler.c | 45 | unguarded((: restore_object, SAVE_FILE :));
nmoney_handler.c | 61 | save_me() { unguarded( (: save_object, SAVE_FILE :) );
nmoney_handler.c | 76 | query_all_values() { return copy( values );
nmoney_handler.c | 84 | keys(values);
nmoney_handler.c | 96 | query_values() { return copy( values[ "default" ] );
nmoney_handler.c | 113 | copy( values[ where ] );
nmoney_handler.c | 131 | query_values_in(where);
nmoney_handler.c | 133 | sizeof(values);
nmoney_handler.c | 154 | save_me();
nmoney_handler.c | 160 | sizeof( values[ where ] );
nmoney_handler.c | 164 | save_me();
nmoney_handler.c | 169 | save_me();
nmoney_handler.c | 184 | member_array( type, values[ where ] );
nmoney_handler.c | 188 | delete( values[ where ], i, 2 );
nmoney_handler.c | 190 | map_delete( values, where );
nmoney_handler.c | 192 | save_me();
nmoney_handler.c | 214 | query_details() { return copy( details );
nmoney_handler.c | 232 | return ({ "heads", "tails", "a head", "a tail", "unknown", 0 });
nmoney_handler.c | 234 | copy( details[ word ] );
nmoney_handler.c | 256 | save_me();
nmoney_handler.c | 269 | map_delete( details, word );
nmoney_handler.c | 270 | save_me();
nmoney_handler.c | 286 | query_symbols() { return copy( symbols );
nmoney_handler.c | 300 | copy( symbols[ word ] );
nmoney_handler.c | 306 | add_symbol("Ankh-Morpork", "/d/am/money");
nmoney_handler.c | 336 | save_me();
nmoney_handler.c | 350 | map_delete( symbols, word );
nmoney_handler.c | 351 | save_me();
nmoney_handler.c | 378 | map_delete(aliases, type);
nmoney_handler.c | 383 | save_me();
nmoney_handler.c | 400 | explode(type, " ")[<1] });
nmoney_handler.c | 419 | map_delete(adjectives, type);
nmoney_handler.c | 424 | save_me();
nmoney_handler.c | 494 | save_me();
nmoney_handler.c | 515 | explode(type, " ");
nmoney_handler.c | 536 | m_indices( values );
nmoney_handler.c | 537 | sizeof( places );
nmoney_handler.c | 554 | member_array( type, values[ where ] );
nmoney_handler.c | 575 | sizeof( mon_array );
nmoney_handler.c | 576 | query_value( mon_array[ i ], where );
nmoney_handler.c | 596 | delete( mon_array, i, 2 );
nmoney_handler.c | 601 | sizeof( mon_array );
nmoney_handler.c | 604 | query_short_for( mon_array[ i ] );
nmoney_handler.c | 606 | query_main_plural_for( mon_array[ i ] );
nmoney_handler.c | 622 | query_property("place");
nmoney_handler.c | 626 | create_money_array( 1000, place);
nmoney_handler.c | 640 | return ({ });
nmoney_handler.c | 674 | money_string( create_money_array( value, where ) );
nmoney_handler.c | 678 | return (string)symboliser->symbolise_value( value );
nmoney_handler.c | 710 | unsymbolise_string( str );
nmoney_handler.c | 712 | create_money_array(value, where);
nmoney_handler.c | 719 | explode(str, " ") - ({ "and", ",", "" });
nmoney_handler.c | 720 | sizeof(bits);
nmoney_handler.c | 736 | lower_case(type);
nmoney_handler.c | 737 | sizeof(stuff);
nmoney_handler.c | 738 | query_plural_for(stuff[pos]);
nmoney_handler.c | 740 | strsrch(stuff[pos], " ", -1);
nmoney_handler.c | 760 | while (match && i < sizeof(bits));
nmoney_handler.c | 786 | query_total_value(money_array_from_string(str, where), where);
nmoney_handler.c | 827 | make_money_array_payment("Lancre Crown", 2, mon_array, "Lancre", 0);
nmoney_handler.c | 857 | member_array( type, mon_array );
nmoney_handler.c | 861 | return ({ ({ type, value }), 0, mon_array });
nmoney_handler.c | 869 | query_value( type, where );
nmoney_handler.c | 878 | query_total_value( mon_array, where );
nmoney_handler.c | 880 | query_total_value( mon_array, "default" );
nmoney_handler.c | 897 | for ( i = ( sizeof( poss_values ) - 2 );
nmoney_handler.c | 898 | member_array( poss_values[ i ], mon_array );
nmoney_handler.c | 909 | return ({ ret, value, mon_array });
nmoney_handler.c | 918 | sizeof(poss_values);
nmoney_handler.c | 919 | member_array( poss_values[ i ], mon_array);
nmoney_handler.c | 930 | member_array(mon_name, mon_array);
nmoney_handler.c | 931 | member_array(mon_name, poss_values);
nmoney_handler.c | 939 | return ({ ret, value, mon_array });
nmoney_handler.c | 966 | copy(thing->query_money_array());
nmoney_handler.c | 967 | make_money_array_payment( type, value, mon_array, where, 1);
nmoney_handler.c | 975 | return ({ stuff[MONEY_PAY_RETURN], stuff[MONEY_PAY_CHANGE] });
nmoney_handler.c | 999 | create_money_array(value, where);
nmoney_handler.c | 1000 | sizeof(m_array);
nmoney_handler.c | 1001 | make_payment(m_array[i], m_array[i + 1], money, where);
nmoney_handler.c | 1006 | if (sizeof(p_array[0]) >
nmoney_handler.c | 1007 | merge_money_arrays(pay_array, p_array[0]);
nmoney_handler.c | 1008 | if (sizeof(p_array[1]) >
nmoney_handler.c | 1009 | merge_money_arrays(change_array, p_array[1]);
nmoney_handler.c | 1013 | if (sizeof(pay_array) >
nmoney_handler.c | 1014 | sizeof(pay_array);
nmoney_handler.c | 1017 | adjust_money(pay_array);
nmoney_handler.c | 1025 | get_money_ob();
nmoney_handler.c | 1026 | set_money_array(change_array);
nmoney_handler.c | 1028 | clone_object(MONEY_OBJECT);
nmoney_handler.c | 1048 | get_money_ob();
nmoney_handler.c | 1050 | clone_object( MONEY_OBJECT );
nmoney_handler.c | 1052 | set_money_array( create_money_array( value, where ) );
nmoney_handler.c | 1054 | dest_me();
nmoney_handler.c | 1074 | query_money_array();
nmoney_handler.c | 1075 | dest_me();
nmoney_handler.c | 1077 | filter_legal_money_array(m_array, where);
nmoney_handler.c | 1099 | return ({ 0, 0 });
nmoney_handler.c | 1108 | sizeof(m_array);
nmoney_handler.c | 1121 | get_money_ob();
nmoney_handler.c | 1123 | clone_object(MONEY_OBJECT);
nmoney_handler.c | 1125 | set_money_array(good_array);
nmoney_handler.c | 1133 | get_money_ob();
nmoney_handler.c | 1135 | clone_object(MONEY_OBJECT);
nmoney_handler.c | 1137 | set_money_array(no_good_array);
nmoney_handler.c | 1140 | return ({ good, no_good });
nmoney_handler.c | 1164 | copy(m_array2);
nmoney_handler.c | 1165 | sizeof(m_array1);
nmoney_handler.c | 1166 | member_array(m_array1[i], new_m_array);
nmoney_handler.c | 1170 | delete(new_m_array, idx, 2);
nmoney_handler.c | 1177 | copy(m_array1);
nmoney_handler.c | 1178 | sizeof(m_array2);
nmoney_handler.c | 1179 | member_array(m_array2[i], new_m_array);
nmoney_handler.c | 1183 | delete(new_m_array, idx, 2);
nmoney_handler.c | 1214 | match_objects_for_existence(words, ({ player }));
nmoney_handler.c | 1217 | money_array_from_string(words, place);
nmoney_handler.c | 1222 | present(MONEY_ALIAS, player);
nmoney_handler.c | 1226 | sizeof(m_array);
nmoney_handler.c | 1233 | filter(things, (: $1->query_property("money") :));
nmoney_handler.c | 1239 | merge_money_arrays(m_array, thing->query_money_array());
nmoney_handler.c | 1242 | add_to_list(thing);
nmoney_handler.c | 1247 | filter_legal_money_array(m_array, place);
nmoney_handler.c | 1254 | query_money_array();
nmoney_handler.c | 1256 | add_to_list(monies[1]);
nmoney_handler.c | 1264 | copy(monies[0]->query_money_array());
nmoney_handler.c | 1265 | sizeof(m_array2);
nmoney_handler.c | 1267 | merge_money_arrays(m_array, m_array2);
nmoney_handler.c | 1268 | this_player()->adjust_money(m_array);
nmoney_handler.c | 1293 | copy(payer->query_money_array());
nmoney_handler.c | 1294 | make_money_array_payment( 0, value, mon_array, place, 0);
nmoney_handler.c | 1303 | copy(payee->query_money_array());
nmoney_handler.c | 1309 | return ({ stuff[MONEY_PAY_RETURN], rabbit[MONEY_PAY_RETURN] });
nmoney_handler.c | 1311 | return ({ stuff[MONEY_PAY_RETURN], ({ }) });
nmoney_handler.c | 1323 | values(query_all_values());
nmoney_handler.c | 1325 | sizeof( elem );
nmoney_handler.c | 1343 | query_all_places();
nmoney_handler.c | 1360 | query_valid_types();
nmoney_handler.c | 1376 | query_value( type, query_origin_of( type ) );
nmoney_handler.c | 1390 | query_values_in( place );
nmoney_handler.c | 1391 | sizeof( values );
nmoney_handler.c | 1412 | query_values_in( place );
nmoney_handler.c | 1413 | sizeof( values );
nmoney_handler.c | 1442 | query_values_in(where);
nmoney_handler.c | 1443 | sizeof(array);
folder_handler.c | 31 | get_messages(string pname, string fname);
folder_handler.c | 32 | load_message(string pname, string fname, int number);
folder_handler.c | 33 | delete_it(string pname, string fname, int *deleted);
folder_handler.c | 34 | check_local(string arg);
folder_handler.c | 35 | load_counter();
folder_handler.c | 36 | save_counter(int counter);
folder_handler.c | 37 | dest_me();
folder_handler.c | 38 | delete_account(string player);
folder_handler.c | 41 | seteuid("Mailer");
folder_handler.c | 59 | unguarded((: mkdir, MAIL_PATH+"new_mesg/" + (num % 50) :));
folder_handler.c | 110 | unguarded((: read_file, message_filename(number, "l"), 1, 1 :));
folder_handler.c | 114 | sscanf(message, "%d", tmplink);
folder_handler.c | 115 | unguarded((: read_file, message_filename(number, "") :));
folder_handler.c | 116 | unguarded((: rm, message_filename(number, "") :));
folder_handler.c | 117 | unguarded((: rm, message_filename(number, "l") :));
folder_handler.c | 129 | convert_links(number);
folder_handler.c | 131 | unguarded((: read_file, message_filename(number, "") :));
folder_handler.c | 136 | sscanf(data, "%*d\n%s", data);
folder_handler.c | 147 | unguarded((: rm, message_filename(number, "") :));
folder_handler.c | 161 | convert_links(number);
folder_handler.c | 162 | unguarded((: read_file, message_filename(number, "") :));
folder_handler.c | 167 | sscanf(message, "%d\n%s", num_links, message);
folder_handler.c | 169 | unguarded((: rm, message_filename(number, "") :));
folder_handler.c | 183 | convert_links(number);
folder_handler.c | 184 | unguarded((: read_file, message_filename(number, "") :));
folder_handler.c | 189 | sscanf(message, "%d\n%s", num_links, message);
folder_handler.c | 191 | unguarded((: rm, message_filename(number, "") :));
folder_handler.c | 201 | base_name(previous_object());
folder_handler.c | 208 | printf("Folder handler: Illegal access ! (%O)\n", base);
folder_handler.c | 218 | sizeof(info);
folder_handler.c | 220 | new(class mail_header);
folder_handler.c | 227 | unguarded((: save_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 242 | return ({ });
folder_handler.c | 247 | unguarded((: restore_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 249 | convert_class(pname, fname);
folder_handler.c | 268 | if (file_size(message_filename(number, "l")) >
folder_handler.c | 269 | convert_links(number);
folder_handler.c | 271 | query_message_data(number);
folder_handler.c | 273 | printf("* Failed to load message.\n", number);
folder_handler.c | 295 | if (sizeof(deleted) >
folder_handler.c | 296 | uniq_array(deleted);
folder_handler.c | 297 | sort_array(deleted, 1);
folder_handler.c | 302 | unguarded((: restore_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 304 | convert_class(pname, fname);
folder_handler.c | 306 | sizeof(deleted);
folder_handler.c | 308 | reset_eval_cost();
folder_handler.c | 309 | if ((idx = member_array(deleted[i], mesg_numbers)) >
folder_handler.c | 310 | if (file_size(message_filename(mesg_numbers[idx], "l")) >
folder_handler.c | 311 | convert_links(mesg_numbers[idx]);
folder_handler.c | 313 | decrement_links(mesg_numbers[idx]);
folder_handler.c | 314 | delete(mesg_numbers, idx, 1);
folder_handler.c | 319 | delete(info, idx, 1);
folder_handler.c | 322 | unguarded((: save_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 329 | catch(ob = clone_object(POST_FROG));
folder_handler.c | 334 | query_possessive()+" mail.\n");
folder_handler.c | 336 | catch(ob->move(COMM_ROOM, ob->query_mmsgin(), ob->query_mmsgout()));
folder_handler.c | 338 | catch(ob->move(environment(player)));
folder_handler.c | 340 | catch(ob->send_mail(to, from));
folder_handler.c | 348 | call_out((: send_frog :), 0, find_player(from), to, from);
folder_handler.c | 377 | sizeof(mesg->to);
folder_handler.c | 381 | query_members(str) - ({ mesg->from });
folder_handler.c | 392 | uniq_array(local_to);
folder_handler.c | 393 | uniq_array(remote_to);
folder_handler.c | 397 | printf("Aborting send of message...\n");
folder_handler.c | 401 | if (file_size(message_filename(counter, "")) >
folder_handler.c | 408 | sizeof(local_to);
folder_handler.c | 410 | printf("Sending to: %s.\n", capitalize(local_to[i]));
folder_handler.c | 418 | unguarded((: restore_object, folder_filename(local_to[i]+"inbox") :));
folder_handler.c | 420 | convert_class(local_to[i], "inbox");
folder_handler.c | 423 | if(sizeof(mesg_numbers) >
folder_handler.c | 424 | write("Sorry, mailbox is full for " + local_to[i] + ".\n");
folder_handler.c | 427 | delete(local_to, i--, 1);
folder_handler.c | 436 | delete(local_to, i--, 1);
folder_handler.c | 442 | new(class mail_header);
folder_handler.c | 451 | capitalize(local_to[i]));
folder_handler.c | 456 | delete(local_to, i--, 1);
folder_handler.c | 461 | send_notification(local_to[i], mesg->from);
folder_handler.c | 466 | delete(local_to, i--, 1);
folder_handler.c | 471 | save_counter(counter);
folder_handler.c | 472 | create_new_message(counter - 1, mesg->body, i);
folder_handler.c | 481 | replace_string(mesg->body, "\n", "\n> "), 1, 0);
folder_handler.c | 485 | sizeof(remote_to);
folder_handler.c | 486 | sscanf(remote_to[i], "%*s@%s", str);
folder_handler.c | 490 | delete(remote_to, i--, 1);
folder_handler.c | 494 | eventSendMail(remote_to, mesg->from, mesg->body);
folder_handler.c | 519 | uniq_array(unread);
folder_handler.c | 523 | unguarded((: restore_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 525 | convert_class(pname, fname);
folder_handler.c | 531 | sizeof(mesg_numbers);
folder_handler.c | 533 | if (member_array(i, unread) >
folder_handler.c | 540 | write("\nErk, problems. The arrays don't quite match.\n");
folder_handler.c | 541 | reset_eval_cost();
folder_handler.c | 543 | unguarded((: save_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 562 | unguarded((: restore_object, folder_filename(lower_case(pname)+to) :));
folder_handler.c | 564 | convert_class(pname, to);
folder_handler.c | 566 | if (member_array(number, mesg_numbers) >
folder_handler.c | 569 | if(sizeof(mesg_numbers) >
folder_handler.c | 572 | if (file_size(message_filename(number, "l")) >
folder_handler.c | 573 | convert_links(number);
folder_handler.c | 575 | increment_links(number);
folder_handler.c | 579 | unguarded((: restore_object, folder_filename(lower_case(pname)+from) :));
folder_handler.c | 581 | convert_class(pname, from);
folder_handler.c | 587 | unguarded((: restore_object, folder_filename(lower_case(pname)+to) :));
folder_handler.c | 593 | unguarded((: save_object, folder_filename(lower_case(pname)+to) :));
folder_handler.c | 606 | unguarded((: restore_object, folder_filename(lower_case(pname)+fname) :));
folder_handler.c | 608 | unguarded((: rm, folder_filename(lower_case(pname)+fname)+".o" :));
folder_handler.c | 645 | unguarded((: restore_object, folder_filename(pname+"inbox") :));
folder_handler.c | 647 | convert_class(pname, "inbox");
folder_handler.c | 649 | sizeof(mesg_numbers);
folder_handler.c | 652 | return ({ 0, 0 });
folder_handler.c | 654 | return ({ num, new_thingy});
folder_handler.c | 667 | mail_count(pname);
folder_handler.c | 693 | mail_count(pname);
folder_handler.c | 723 | unguarded((: rm, MAIL_PATH+"counter.save" :));
folder_handler.c | 724 | unguarded((: rename, MAIL_PATH+"counter", MAIL_PATH+"counter.save" :));
folder_handler.c | 725 | unguarded((: write_file, MAIL_PATH+"counter", ""+counter :));
folder_handler.c | 736 | sscanf(bing, "%d", ret);
folder_handler.c | 738 | printf("The mail counter was lost. Please contact Turrican.\n");
folder_handler.c | 751 | if(file_size(message_filename(x, "")) >
folder_handler.c | 752 | printf("Invalid counter value: File exists.\n");
folder_handler.c | 755 | save_counter(x);
folder_handler.c | 760 | destruct(this_object());
folder_handler.c | 778 | clone_object(MAILER);
folder_handler.c | 779 | query_folders(pname);
folder_handler.c | 780 | destruct(mailer);
folder_handler.c | 787 | unguarded( (: restore_object, folder_filename(pname+folder) :) );
folder_handler.c | 790 | reset_eval_cost();
folder_handler.c | 791 | if (file_size(message_filename(message, "l")) >
folder_handler.c | 792 | convert_links(message);
folder_handler.c | 794 | decrement_links(message);
folder_handler.c | 797 | unguarded( (: rm, folder_filename(pname + folder + ".o") :) );
folder_handler.c | 799 | unguarded( (: rm, folder_filename(pname +".o") :) );
virtuals.c | 17 | seteuid( "/secure/master"->creator_file( file_name( this_object() ) ) );
virtuals.c | 22 | if ( file_size( SAVE_FILE +".o" ) >
virtuals.c | 23 | unguarded( (: restore_object, SAVE_FILE :) );
virtuals.c | 27 | save_me() { unguarded( (: save_object, SAVE_FILE :) );
virtuals.c | 39 | clone_object( path );
virtuals.c | 40 | stat( path )[1], junk_item->query_static_auto_load() });
virtuals.c | 41 | destruct( junk_item );
virtuals.c | 46 | if( sizeof( paths ) >
virtuals.c | 47 | sizeof( paths ) - (MAX_NUMBERS + 1);
virtuals.c | 52 | map_delete( load_data, tmp_str );
virtuals.c | 55 | save_me();
virtuals.c | 68 | add_data( path );
virtuals.c | 92 | save_me();
virtuals.c | 102 | save_me();
virtuals.c | 111 | return ( member_array( path, forbidden_paths ) != -1 );
virtuals.c | 131 | save_me();
virtuals.c | 141 | save_me();
random_names.c | 43 | seteuid("Room");
random_names.c | 46 | unguarded((: restore_object, RANDOM_NAME_SAVE_FILE :));
random_names.c | 53 | unguarded((: save_object, RANDOM_NAME_SAVE_FILE :));
random_names.c | 75 | explode(f, ".");
random_names.c | 76 | if (sizeof(bits) >
random_names.c | 77 | implode(bits[0..sizeof(bits)-2], ".");
random_names.c | 81 | replace(lang, "_", " ");
random_names.c | 83 | unguarded((: read_file, RANDOM_NAME_DATA_DIR+f :));
random_names.c | 84 | explode(str, "\n");
random_names.c | 86 | sizeof(bits);
random_names.c | 87 | sscanf(bits[i], "%s#%*s", bits[i]);
random_names.c | 89 | explode("G"+bits[i], ":");
random_names.c | 90 | if (sizeof(stuff) >
random_names.c | 98 | save_me();
random_names.c | 112 | strlen(word);
random_names.c | 114 | explode(rules[lang][word[i..i]], " ") - ({ "" });
random_names.c | 118 | while (some_caps);
random_names.c | 142 | save_me();
random_names.c | 151 | save_me();
random_names.c | 167 | random_name(lang);
random_names.c | 168 | if (strlen(str) < 2 || strlen(str) >
random_names.c | 176 | while (!ok);
random_names.c | 182 | destruct(this_object());
club_handler.c | 12 | create();
club_handler.c | 17 | setup_call_check_clubs(1800, 1);
club_handler.c | 18 | setup_call_check_clubs(0, 1);
club_handler.c | 23 | save_cache();
club_handler.c | 24 | destruct(this_object());
potion_space.c | 26 | seteuid("Room");
potion_space.c | 27 | unguarded((: restore_object, SAVE_FILE :));
potion_space.c | 32 | tell_object(this_player(), "Effect object must be a string.\n");
potion_space.c | 37 | unguarded((: save_object, SAVE_FILE :));
potion_space.c | 44 | sizeof(effect_vols);
potion_space.c | 50 | unguarded((: save_object, SAVE_FILE :));
potion_space.c | 60 | sizeof(effect_vols);
potion_space.c | 73 | query_effect_at(coord);
potion_space.c | 74 | if (!sizeof(effects)) return ({ 0, 100, ({ }), ({ }), ({ }), ({ }) });
potion_space.c | 76 | query_attrs(coord);
potion_space.c | 78 | query_pass_through(coord);
potion_space.c | 84 | query_attrs(coord);
potion_space.c | 88 | query_pass_through(coord);
potion_space.c | 99 | query_effect_at(coord);
potion_space.c | 103 | action_drunk(ob, coord, quantity * pass_through / 100);
potion_space.c | 113 | query_effect_at(coord);
potion_space.c | 117 | action_touch(ob, coord, quantity * pass_through / 100);
potion_space.c | 127 | query_effect_at(coord);
potion_space.c | 131 | action_smell(ob, coord, quantity * pass_through / 100);
potion_space.c | 141 | query_effect_at(coord);
potion_space.c | 145 | action_create(ob, coord, quantity * pass_through / 100);
potion_space.c | 159 | unguarded((: save_object, SAVE_FILE :));
potion_space.c | 164 | return ({ 0, 0 });
report_handler.c | 16 | move_to_recent_cases(mixed *thing);
report_handler.c | 24 | set_short("report handler");
report_handler.c | 25 | add_property("determinate", "the ");
report_handler.c | 28 | if(file_size(NEWCASES) >
report_handler.c | 29 | restore_variable(read_file(NEWCASES));
report_handler.c | 31 | if(file_size(RECENT) >
report_handler.c | 32 | restore_variable(read_file(RECENT));
report_handler.c | 42 | unguarded((: rm, NEWCASES :));
report_handler.c | 43 | unguarded((: write_file, NEWCASES, save_variable(new_cases)+"\n" :));
report_handler.c | 58 | restore_variable(read_file(NEWCASES));
report_handler.c | 60 | sizeof(new_cases);
report_handler.c | 69 | sizeof(new_cases);
report_handler.c | 75 | capitalize(new_cases[i][NAME]);
report_handler.c | 76 | sizeof(new_cases[i][NAME]));
report_handler.c | 91 | restore_variable(read_file(NEWCASES));
report_handler.c | 116 | restore_variable(read_file(NEWCASES));
report_handler.c | 119 | save_new_cases();
report_handler.c | 132 | move_to_recent_cases(thing);
report_handler.c | 139 | unguarded((: rm, RECENT :));
report_handler.c | 140 | unguarded((: write_file, RECENT, save_variable(recent_cases)+"\n" :));
report_handler.c | 154 | uniq_array(chars);
report_handler.c | 155 | sizeof(chars);
report_handler.c | 156 | if(file_size((SAVEPATH+chars[j]+".o")) >
report_handler.c | 157 | restore_variable(read_file((SAVEPATH+chars[j]+".o")));
report_handler.c | 162 | unguarded((: rm, (SAVEPATH+chars[j]+".o") :));
report_handler.c | 164 | save_variable(c_record)+"\n" :));
report_handler.c | 169 | save_new_cases();
report_handler.c | 170 | save_recent_cases();
report_handler.c | 178 | restore_variable(read_file(RECENT));
report_handler.c | 189 | sizeof(recent_cases);
report_handler.c | 195 | capitalize(recent_cases[i][NAME]);
report_handler.c | 196 | sizeof(recent_cases[i][NAME]));
report_handler.c | 211 | restore_variable(read_file(RECENT));
report_handler.c | 230 | sizeof(stuff);
report_handler.c | 244 | get_dir(SAVEPATH+lower_case(name)+".o");
report_handler.c | 245 | get_dir(SAVEPATH);
report_handler.c | 247 | sizeof(all_cases);
report_handler.c | 248 | restore_variable(read_file((SAVEPATH+all_cases[i])));
report_handler.c | 249 | sizeof(check_case);
report_handler.c | 259 | uniq_array(other_chars);
report_handler.c | 260 | sizeof(other_chars);
report_handler.c | 261 | capitalize(other_chars[i]);
report_handler.c | 263 | capitalize(name)});
report_handler.c | 264 | uniq_array(other_chars);
report_handler.c | 266 | query_multiple_short(other_chars)+".\n");
report_handler.c | 271 | write("%^CYAN%^Case History for "+capitalize(name)+"%^RESET%^:\n");
report_handler.c | 273 | restore_variable(read_file(SAVEPATH+lower_case(name)+".o"));
report_handler.c | 274 | sizeof(cases);
report_handler.c | 289 | sizeof(stuff);
report_handler.c | 302 | capitalize(name), comment });
report_handler.c | 303 | save_recent_cases();
chime_handler.c | 27 | do_chime(class chime record, int type);
chime_handler.c | 39 | time() % 300);
chime_handler.c | 40 | remove_call_out("check_time");
chime_handler.c | 41 | call_out("check_time", next_chime);
chime_handler.c | 78 | new(class chime);
chime_handler.c | 96 | query_am_minute(time());
chime_handler.c | 101 | do_chime(record, CHIME_HOUR);
chime_handler.c | 103 | do_chime(record, CHIME_HALF_HOUR);
chime_handler.c | 105 | do_chime(record, CHIME_QUARTER_HOUR);
chime_handler.c | 109 | time() % FIFTEEN_MINS);
chime_handler.c | 110 | remove_call_out("check_time");
chime_handler.c | 111 | call_out("check_time", next_chime);
chime_handler.c | 121 | chime(record->mess, type);
chime_handler.c | 131 | time() % FIFTEEN_MINS);
chime_handler.c | 132 | remove_call_out("check_time");
chime_handler.c | 133 | call_out("check_time", next_chime);
chime_handler.c | 161 | return ({ ({ "chime count", sizeof(chime_list) }) });
player_council.c | 7 | load_me();
player_council.c | 8 | save_me();
player_council.c | 11 | create();
player_council.c | 13 | load_me();
player_council.c | 17 | unguarded( (: save_object(NOMIC_SYSTEM_SAVE_FILE) :) );
player_council.c | 21 | unguarded( (: restore_object(NOMIC_SYSTEM_SAVE_FILE, 1) :) );
player_council.c | 25 | destruct(this_object());
multiplayer.c | 33 | seteuid(master()->creator_file(file_name()));
multiplayer.c | 34 | if (file_size(SAVE_FILE + ".o") >
multiplayer.c | 35 | unguarded((: restore_object, SAVE_FILE, 1 :));
multiplayer.c | 45 | unguarded((: save_object, SAVE_FILE :));
multiplayer.c | 50 | unguarded((: save_object, SAVE_FILE :));
multiplayer.c | 65 | query_name();
multiplayer.c | 70 | query_alt_of(user);
multiplayer.c | 75 | query_name();
multiplayer.c | 76 | query_alt_of(tmp);
multiplayer.c | 110 | query_alt_of(user);
multiplayer.c | 112 | query_alt_of(other);
multiplayer.c | 117 | sizeof(allowed[user]);
multiplayer.c | 130 | sizeof(allowed[other]);
multiplayer.c | 140 | call_out((: save_me :), 1);
multiplayer.c | 152 | query_alt_of(user);
multiplayer.c | 155 | map_delete(allowed, user);
multiplayer.c | 156 | call_out((: save_me :), 1);
multiplayer.c | 168 | copy(keys(allowed));
multiplayer.c | 179 | write("You do not have permission to add a user to this list.\n");
multiplayer.c | 188 | lower_case(user) });
multiplayer.c | 189 | call_out((: save_me :), 1);
multiplayer.c | 204 | write("You do not have permission to remove a user to this list.\n");
multiplayer.c | 210 | call_out((: save_me :), 1);
multiplayer.c | 232 | copy(denied_parcels);
multiplayer.c | 260 | query_property("dropped");
multiplayer.c | 265 | query_name(), query_ip_number(player), time() });
multiplayer.c | 266 | add_property("dropped", stuff, 1800);
multiplayer.c | 276 | query_property("dropped");
multiplayer.c | 320 | query_refresh_time() >
multiplayer.c | 329 | if(ALIST->query_alt(player->query_name(), stuff[0]) >
multiplayer.c | 338 | if(player->query_refresh_time() >
multiplayer.c | 345 | capitalize(player->query_name()) + verb + item->a_short();
multiplayer.c | 350 | if(ALIST->query_alt(player->query_name(), stuff[3]) >
multiplayer.c | 352 | capitalize(player->query_name()) + verb + item->a_short();
multiplayer.c | 367 | user_event("inform", res, "cheat");
multiplayer.c | 369 | convert_message(res) + "\n");
multiplayer.c | 373 | user_event("inform", res, "multiplayer");
multiplayer.c | 375 | convert_message(res) + "\n");
random_num.c | 26 | random(int max, mixed lseed);
random_num.c | 46 | random(200);
random_num.c | 52 | random(200);
error_handler.c | 11 | seteuid(getuid());
error_handler.c | 12 | seteuid("Root");
error_handler.c | 13 | create();
error_handler.c | 17 | setup_error_handler(user, db, password);
philosophies.c | 63 | creator_file( file_name( this_object() ) ) );
philosophies.c | 65 | if ( file_size( SAVE_FILE +".o" ) >
philosophies.c | 66 | unguarded( (: restore_object, SAVE_FILE :) );
philosophies.c | 72 | save_me() { unguarded( (: save_object, SAVE_FILE :) );
philosophies.c | 101 | query_philosophy_names() { return keys( philosophies );
philosophies.c | 135 | save_me();
philosophies.c | 149 | map_delete( philosophies, name );
philosophies.c | 150 | save_me();
philosophies.c | 237 | copy( philosophies[ name ][ PHILOSOPHY_ARGUMENTS ] );
philosophies.c | 277 | save_me();
philosophies.c | 294 | map_delete( philosophies[ name ][ PHILOSOPHY_ARGUMENTS ], argument );
philosophies.c | 295 | save_me();
philosophies.c | 327 | explode(current_philosophies, "\n");
philosophies.c | 355 | unguarded( (: read_file, SAVE_DIR +  person[0..0]+"/"+person :) );
philosophies.c | 358 | return (member_array(argument,explode(current_philosophies ,"\n")) != -1);
philosophies.c | 382 | explode(current_philosophies, "\n");
philosophies.c | 407 | tell_object(this_player(), "Lords only...\n");
philosophies.c | 410 | query_all_known( person );
philosophies.c | 419 | sprintf( "%s\n", key );
philosophies.c | 437 | tell_object(this_player(), "Lords only...\n");
peopler.c | 44 | users();
peopler.c | 46 | sizeof(ob);
peopler.c | 60 | sizeof(bits);
peopler.c | 64 | if (strlen(de_names[pos]) >
peopler.c | 65 | sprintf("%"+bits[i+1]+"."+bits[i+1]+"s", "");
peopler.c | 69 | sprintf("%"+bits[i+1]+"."+bits[i+1]+"|s", de_names[pos]);
peopler.c | 72 | sprintf("%"+bits[i+1]+"."+bits[i+1]+"s", de_names[pos]);
peopler.c | 75 | sprintf("%"+bits[i+1]+"."+bits[i+1]+"-s", de_names[pos]);
peopler.c | 87 | sizeof(bing);
peopler.c | 121 | reset_eval_cost();
peopler.c | 124 | unique_mapping(obs, (: query_ip_number($1) :));
peopler.c | 126 | sprintf("%s\n", create_title(format));
peopler.c | 129 | sizeof(format);
peopler.c | 147 | sprintf(form+"s", capitalize( (string)ob->query_name() ) );
peopler.c | 150 | sprintf(form+"s", ob->query_gender_string());
peopler.c | 155 | query_name() ) );
peopler.c | 161 | query_name():"No guild"));
peopler.c | 163 | sprintf(form+"s", "Broken guild");
peopler.c | 166 | sprintf(form+"s", ""+ ob->query_level());
peopler.c | 169 | sprintf(form+"s", ""+ ob->query_rows());
peopler.c | 172 | sprintf(form+"s", ""+ ob->query_cols());
peopler.c | 178 | query_cur_term() + ")" : "") : ""));
peopler.c | 181 | sprintf(form+"s", query_ip_number(ob));
peopler.c | 186 | query_ip_name(ob));
peopler.c | 189 | sprintf(form+"s", ob->query_object_type()+"");
peopler.c | 192 | query_time_on();
peopler.c | 194 | sprintf(form+"s", (age/-86400)+"D");
peopler.c | 196 | sprintf(form+"s", (age/-3600)+"h");
peopler.c | 198 | sprintf(form+"s", (age/-60)+"m");
peopler.c | 200 | sprintf(form+"s", (age/-1)+"s");
peopler.c | 203 | environment(ob);
peopler.c | 204 | sprintf(form+"s",env?file_name(env):"No environment");
peopler.c | 207 | environment(ob);
peopler.c | 208 | sprintf(form+"s",env?geteuid(env):"No environment");
peopler.c | 211 | environment(ob);
peopler.c | 212 | sprintf(form+"s",env?getuid(env):"No environment");
peopler.c | 215 | environment(ob);
peopler.c | 221 | query_current_path():"No dir"));
peopler.c | 224 | query_ip_number(ob)] - ({ ob });
peopler.c | 225 | check_allowed(ob, dups);
peopler.c | 233 | sprintf("%s\n", str);
peopler.c | 235 | this_player()->more_string( mess );
peopler.c | 269 | get_people("");
peopler.c | 271 | notify_fail("Nobody seems to start with '" + constraint + "'.\n");
peopler.c | 275 | strcmp($1->query_name(), $2->query_name()) :);
peopler.c | 278 | sort_array(obs, sort_func);
peopler.c | 282 | sizeof(obs);
peopler.c | 292 | notify_fail("Unable to find any duplicates.\n");
peopler.c | 297 | print_entrys(obs, pattern, only_duplicates, constraint);
peopler.c | 311 | this_player()->query_property("people list");
peopler.c | 314 | write("People : "+review_thingy(bing)+"\n");
peopler.c | 315 | this_player()->query_property("qpeople list");
peopler.c | 318 | write("Qpeople: "+review_thingy(bing)+"\n");
peopler.c | 319 | this_player()->query_property("netstat list");
peopler.c | 322 | write("Netstat: "+review_thingy(bing)+"\n");
peopler.c | 323 | this_player()->query_property("term list");
peopler.c | 326 | write("Terms  : "+review_thingy(bing)+"\n");
peopler.c | 327 | this_player()->query_property("dir list");
peopler.c | 330 | write("Dirs   : "+review_thingy(bing)+"\n");
peopler.c | 331 | this_player()->query_property("netdup list");
peopler.c | 334 | write("Netdups: "+review_thingy(bing)+"\n");
peopler.c | 342 | explode("$"+str, "%");
peopler.c | 348 | sizeof(bits);
peopler.c | 359 | member_array(rest[0..0], abbrev);
peopler.c | 361 | write("Unknown thingy '"+rest[0..0]+"'\n");
peopler.c | 378 | sizeof(de_names);
peopler.c | 380 | printf("%s: %s\n", abbrev[i], de_names[i]);
peopler.c | 396 | list_matches();
peopler.c | 401 | query_verb()+" help\n");
peopler.c | 410 | create_review(type);
peopler.c | 413 | this_player( 1 )->add_property( name +" list", bing );
peopler.c | 414 | write("Ok, set var "+name+" to "+type+".\n");
cpi_handler.c | 29 | set_name( "board" );
cpi_handler.c | 30 | set_short( "price board" );
cpi_handler.c | 38 | add_adjective( "price" );
cpi_handler.c | 39 | set_main_plural( "price boards" );
cpi_handler.c | 40 | add_plural( "boards" );
cpi_handler.c | 41 | reset_get();
cpi_handler.c | 44 | look_up(string);
cpi_handler.c | 47 | add_command("find", "<word'thing'>", (:look_up($4[0]):));
cpi_handler.c | 64 | if ( file_size( RESTORE_PATH + word +".o" ) >
cpi_handler.c | 65 | unguarded((: restore_object, RESTORE_PATH + word :));
cpi_handler.c | 67 | init_data( word );
cpi_handler.c | 75 | unguarded((: save_object, RESTORE_PATH + word :));
cpi_handler.c | 81 | get_data_file( word1 );
cpi_handler.c | 88 | get_data_file( word1 );
cpi_handler.c | 91 | imp_effect( "adds the price of "+ word1 +" in "+ word2 +" to the lists" );
cpi_handler.c | 92 | save_data_file( material_name );
cpi_handler.c | 97 | get_data_file( word1 );
cpi_handler.c | 100 | imp_effect( "updates the price of "+ word1 +" in "+ word2 );
cpi_handler.c | 101 | save_data_file( material_name );
cpi_handler.c | 106 | get_data_file( word1 );
cpi_handler.c | 108 | m_delete( prices, word2 );
cpi_handler.c | 111 | save_data_file( material_name );
cpi_handler.c | 118 | get_data_file( word );
cpi_handler.c | 121 | notify_fail( "You can't find any prices for "+ word +" on the board.\n" );
cpi_handler.c | 127 | m_values( prices )[0] +" in "+ m_indices( prices )[0] +".\n" );
cpi_handler.c | 129 | write( "You find the following price list for "+ word +":\n\n" );
cpi_handler.c | 130 | m_sizeof( prices );
cpi_handler.c | 132 | m_indices( prices )[i] +"," );
cpi_handler.c | 135 | m_indices( prices )[0] +"." );
cpi_handler.c | 142 | get_dir(RESTORE_PATH);
taskmaster.c | 41 | is_critical( int margin );
taskmaster.c | 47 | seteuid( "Root" );
taskmaster.c | 54 | allocate(100);
taskmaster.c | 58 | exp( b * ( i + 1 ) );
taskmaster.c | 66 | if ( file_size( SAVE_FILES + skill +".o" ) >
taskmaster.c | 67 | unguarded( (: restore_object, SAVE_FILES + skill :) );
taskmaster.c | 73 | copy( stats );
taskmaster.c | 100 | query_stats( s_name );
taskmaster.c | 105 | query_stats("summary");
taskmaster.c | 131 | unguarded( (: save_object, SAVE_FILES + "summary" :) );
taskmaster.c | 132 | time();
taskmaster.c | 141 | query_stats("summary");
taskmaster.c | 166 | unguarded( (: save_object, SAVE_FILES + "summary" :) );
taskmaster.c | 167 | time();
taskmaster.c | 174 | unguarded( (: get_dir, SAVE_FILES +"*.o" :) );
taskmaster.c | 181 | unguarded( (: rm, SAVE_FILES + word :) );
taskmaster.c | 218 | say(defender->one_short() + " loses an arm!\n");
taskmaster.c | 247 | say( "You just barely scrape your opponent's hand.\n" );
taskmaster.c | 250 | say( "You slice into your opponent's arm.\n" );
taskmaster.c | 292 | query_skill_bonus(offskill);
taskmaster.c | 293 | query_skill_bonus(defskill);
taskmaster.c | 316 | random(100);
taskmaster.c | 434 | tell_object(attacker, "%^YELLOW%^You feel very aligned!%^RESET%^\n" );
taskmaster.c | 438 | say( "You think he went thataway. Maybe.\n" );
taskmaster.c | 441 | say( "You're pretty sure he went that way.\n" );
taskmaster.c | 444 | say( "He definitely went thataway!\n" );
taskmaster.c | 476 | query_skill_bonus( skill );
taskmaster.c | 480 | attempt_task( difficulty, bonus, 100, 0, degree );
taskmaster.c | 483 | attempt_task( difficulty, bonus, 25, 0, degree );
taskmaster.c | 486 | attempt_task( difficulty, bonus, 50, 0, degree );
taskmaster.c | 493 | attempt_task( difficulty, bonus, 100, 0, degree );
taskmaster.c | 496 | attempt_task_e( difficulty, bonus, 50, 25, degree );
taskmaster.c | 499 | attempt_task_e( difficulty, bonus, 60, 40, degree );
taskmaster.c | 502 | attempt_task_e(difficulty, bonus, 1, 0, degree);
taskmaster.c | 514 | ctime(time()), base_name(previous_object()), tm_type, degree );
taskmaster.c | 519 | attempt_task( difficulty, bonus, upper, 0, degree );
taskmaster.c | 592 | ctime( time() ), base_name( previous_object() ), call_stack(2) );
taskmaster.c | 598 | skill_checked(control[1], control[0]->query_skill(control[1]));
taskmaster.c | 628 | sqrt( difficulty );
taskmaster.c | 633 | sqrt( difficulty );
taskmaster.c | 644 | tell_object(find_player(DEBUG), "%^RED%^" + sprintf("TM: %s Skill: %s [%d] [%d] [%d] Succeeded\n", control[0]->query_name(), control[1], bonus, difficulty, margin) + "%^RESET%^");
taskmaster.c | 662 | random(100);
taskmaster.c | 668 | tell_object(find_player(DEBUG), "%^RED%^" + sprintf("TM: %s Skill: %s [%d] [%d] Failed (2)\n", control[0]->query_name(), control[1], bonus, difficulty) + "%^RESET%^");
taskmaster.c | 706 | stat_modify(upper, control[ 1 ] );
taskmaster.c | 711 | sprintf("SU: %d ", upper));
taskmaster.c | 715 | exp((control[0]->query_skill(control[1])-BASE) / DECAY);
taskmaster.c | 720 | tell_object(find_player(DEBUG), sprintf("LU: %d ", upper));
taskmaster.c | 737 | previous_object(-1)));
taskmaster.c | 800 | ctime(time()), base_name(previous_object()), call_stack(2));
taskmaster.c | 806 | skill_checked(control[1], control[0]->query_skill(control[1]));
taskmaster.c | 825 | sqrt( difficulty );
taskmaster.c | 830 | exp( ( -0.693 * ( bonus - difficulty ) ) / half );
taskmaster.c | 870 | stat_modify( upper, control[ 1 ] );
taskmaster.c | 875 | sprintf("SU: %d ", upper));
taskmaster.c | 879 | exp((control[0]->query_skill(control[1])-BASE) / DECAY);
taskmaster.c | 884 | tell_object(find_player(DEBUG), sprintf("LU: %d ", upper));
mime.c | 54 | sizeof(bits[0]);
mime.c | 84 | printf("Unbalanced ')'\n");
mime.c | 85 | return ({ });
mime.c | 104 | printf("Unbalanced '%c'\n", (angle_count < 0?'>':'<'));
mime.c | 105 | return ({ });
mime.c | 120 | printf("Unbalanced ')'\n");
mime.c | 121 | return ({ });
mime.c | 125 | printf("Unbalanced '%c'\n", (paren_count < 0?')':'('));
mime.c | 126 | return ({ });
mime.c | 147 | return ({ ({ }), ({ }) });
mime.c | 149 | tokenize(arg);
mime.c | 151 | return ({ ({ }), ({ }) });
mime.c | 153 | allocate(1);
mime.c | 155 | allocate(1);
mime.c | 158 | sizeof(bits[2]);
mime.c | 185 | return ({ addrs, full_addrs });
mime.c | 202 | tokenize(header_field);
mime.c | 206 | allocate(1);
mime.c | 208 | allocate(1);
mime.c | 211 | sizeof(bits[2]);
mime.c | 252 | implode(bits[0], "");
mime.c | 272 | new(class mime_header, header_m : ([]), header_k : ({}));
mime.c | 273 | explode(headers, "\n") - ({ "", 0 });
mime.c | 279 | strlen(bit);
mime.c | 287 | lower_case(cont);
mime.c | 295 | sprintf(", %s", bit[idx..]);
mime.c | 334 | sizeof(ra[0]);
mime.c | 342 | rewrite_field(ra[0][i+2]);
mime.c | 357 | destruct(this_object());
mime.c | 363 | dest_me();
newbiehelpers.c | 23 | log_message( string message );
newbiehelpers.c | 24 | load_file();
newbiehelpers.c | 25 | save_file();
newbiehelpers.c | 35 | load_file();
newbiehelpers.c | 202 | add_succeeded_mess(TO, "", ({ }) );
newbiehelpers.c | 205 | helper_info( player, TP );
newbiehelpers.c | 209 | applicant_info( player, TP );
newbiehelpers.c | 221 | query_name();
newbiehelpers.c | 224 | tell_object( TP, "You are not a member of newbiehelpers admin.\n" );
newbiehelpers.c | 229 | tell_object( TP, "There is no player $C$" + player + "!\n" );
newbiehelpers.c | 240 | keys( applicants[player]["vouches"] );
newbiehelpers.c | 243 | map_delete( applicants, player );
newbiehelpers.c | 258 | time();
newbiehelpers.c | 263 | save_file();
newbiehelpers.c | 265 | log_message( player + " added as a helper by " + name );
newbiehelpers.c | 268 | log_message( player + "'s playerinfo updated" );
newbiehelpers.c | 284 | query_name();
newbiehelpers.c | 287 | tell_object( TP, "You are not a member of newbiehelpers admin.\n" );
newbiehelpers.c | 295 | map_delete( helpers, player );
newbiehelpers.c | 296 | save_file();
newbiehelpers.c | 304 | log_message( player + "'s playerinfo updated" );
newbiehelpers.c | 323 | query_name();
newbiehelpers.c | 326 | time();
newbiehelpers.c | 327 | query_time_on();
newbiehelpers.c | 329 | save_file();
newbiehelpers.c | 331 | log_message( name + " submits a vouch for " + player );
newbiehelpers.c | 339 | query_name();
newbiehelpers.c | 370 | query_name();
newbiehelpers.c | 373 | time();
newbiehelpers.c | 374 | query_time_on();
newbiehelpers.c | 378 | load_object(player->query_guild_ob()))->query_short();
newbiehelpers.c | 381 | load_object(player->query_nationality()))->query_name();
newbiehelpers.c | 386 | save_file();
newbiehelpers.c | 388 | log_message( name + " submits an application to newbiehelpers" );
newbiehelpers.c | 396 | query_name();
newbiehelpers.c | 423 | query_name();
newbiehelpers.c | 435 | map_delete( applicants, player );
newbiehelpers.c | 436 | save_file();
newbiehelpers.c | 442 | log_message( player + "'s playerinfo updated" );
newbiehelpers.c | 454 | query_name();
newbiehelpers.c | 490 | save_file();
newbiehelpers.c | 491 | log_message( name + " added as admin by " + TP->query_name() );
newbiehelpers.c | 510 | map_delete(admin, name);
newbiehelpers.c | 511 | save_file();
newbiehelpers.c | 512 | log_message( name + " removed from admin by " + TP->query_name() );
newbiehelpers.c | 542 | log_file("/log/NEWBIEHELPERS", ctime(time()) + ": " + message + "\n");
newbiehelpers.c | 547 | unguarded( (: save_object, SAVE_FILE, 1 :) );
newbiehelpers.c | 552 | if (file_size(SAVE_FILE + ".o") >
newbiehelpers.c | 553 | unguarded( (: restore_object, SAVE_FILE, 1 :) );
project_management.c | 15 | query_project_completeness(string);
project_management.c | 16 | query_project_tasks(string);
project_management.c | 17 | valid_operation (string name, string action, string project);
project_management.c | 18 | find_project (string);
project_management.c | 19 | do_save();
project_management.c | 20 | nuke_creator_project_cache(string*);
project_management.c | 21 | query_projects_for_creator (string);
project_management.c | 22 | clear_file_cache (string nfile);
project_management.c | 23 | do_mail (string*, string);
project_management.c | 24 | clear_playtesting_projects (string*);
project_management.c | 25 | filter_by_query (mapping);
project_management.c | 26 | catch_status_change (string, int);
project_management.c | 63 | call_out ("do_save", 10);
project_management.c | 74 | log_file (PROJECT_LOG, text);
project_management.c | 84 | seteuid ("Root");
project_management.c | 86 | unguarded ((: save_object, PROJECT_SAVE :));
project_management.c | 87 | unguarded ((: save_object, TMP_SAVE:));
project_management.c | 99 | unguarded ((: restore_object, PROJECT_SAVE :));
project_management.c | 113 | do_load();
project_management.c | 116 | time();
project_management.c | 148 | uniq_array (creators);
project_management.c | 151 | query_projects_for_creator (c);
project_management.c | 168 | find_project (id);
project_management.c | 175 | time();
project_management.c | 178 | save_file();
project_management.c | 181 | call_out ("do_inform", 120);
project_management.c | 199 | load_object ("/d/" + d + "/master");
project_management.c | 201 | nuke_creator_project_cache (projects[i]->creators);
project_management.c | 203 | nuke_creator_project_cache (projects[i]->creators);
project_management.c | 208 | ctime (time()), id, name, reason));
project_management.c | 220 | find_project (id);
project_management.c | 225 | capitalize ($1) :)))), "message", this_player());
project_management.c | 260 | find_project (id);
project_management.c | 273 | ctime (projects[i]->last_touched), projects[i]->what_touched);
project_management.c | 298 | query_multiple_short (uniq_array (names)));
project_management.c | 459 | sizeof (array);
project_management.c | 479 | while (left < right);
project_management.c | 497 | query_multiple_short (p->creators));
project_management.c | 500 | replace (ret, ({"$I$5=", "<p>"}));
project_management.c | 514 | find_index (id, projects);
project_management.c | 531 | find_project (i);
project_management.c | 534 | find_index (id, projects[i]->notes);
project_management.c | 551 | find_project (i);
project_management.c | 554 | find_index (id, projects[i]->tasks);
project_management.c | 572 | find_project (i);
project_management.c | 580 | sizeof (projects[i]->files);
project_management.c | 606 | find_index (file, cache);
project_management.c | 621 | find_index (id, projects);
project_management.c | 629 | ctime(time()), name, id));
project_management.c | 630 | save_file();
project_management.c | 644 | find_project (id);
project_management.c | 651 | find_task (i, task_id);
project_management.c | 659 | touch_project (id, "Deleted task " + task_id, name);
project_management.c | 673 | find_project (id);
project_management.c | 680 | find_note (i, note_id);
project_management.c | 688 | touch_project (id, "Deleted note " + note_id, name);
project_management.c | 727 | insert_into_projects (tmp);
project_management.c | 729 | touch_project (id, "Project added", add_name);
project_management.c | 743 | new (class file_access_cache, id: id, accesses: ([ ]));
project_management.c | 745 | insert_into_cache (tmp);
project_management.c | 751 | find_project (id);
project_management.c | 761 | find_project (id);
project_management.c | 778 | find_project (id);
project_management.c | 795 | find_project (id);
project_management.c | 801 | copy (projects[i]->twiki);
project_management.c | 807 | find_project (id);
project_management.c | 813 | copy (projects[i]->files);
project_management.c | 819 | find_project (id);
project_management.c | 831 | find_player (name);
project_management.c | 843 | master()->valid_grant (ob, file, access);
project_management.c | 851 | new (class file, file: file, access: access, task: task);
project_management.c | 858 | find_file (i, file, task);
project_management.c | 869 | clear_file_cache (file);
project_management.c | 871 | touch_project (id, "Added a file permission", name);
project_management.c | 877 | find_project (id);
project_management.c | 884 | find_file (i, file, task);
project_management.c | 898 | clear_file_cache (file);
project_management.c | 899 | touch_project (id, "Removed a file permission", name);
project_management.c | 905 | find_project (id);
project_management.c | 910 | find_project (id);
project_management.c | 927 | find_project (id);
project_management.c | 937 | find_project (id);
project_management.c | 947 | find_project (id);
project_management.c | 958 | map (projects, (: $1->id :));
project_management.c | 962 | find_project (id);
project_management.c | 973 | catch_status_change (id, stat);
project_management.c | 978 | find_project (id);
project_management.c | 992 | parse_details (p);
project_management.c | 1000 | find_project (id);
project_management.c | 1006 | map (projects[i]->tasks, (: $1->id :));
project_management.c | 1010 | find_project (id);
project_management.c | 1020 | map (projects[i]->notes, (: $1->id :));
project_management.c | 1024 | find_project (id);
project_management.c | 1035 | find_project (id);
project_management.c | 1047 | find_project (id);
project_management.c | 1057 | find_project (id);
project_management.c | 1066 | find_project (id);
project_management.c | 1083 | query_num (query_project_completeness (id)));
project_management.c | 1087 | query_multiple_short (projects[i]->creators));
project_management.c | 1091 | ctime (projects[i]->date_added), projects[i]->added_by);
project_management.c | 1095 | query_multiple_short (projects[i]->twiki));
project_management.c | 1100 | query_multiple_short (query_project_tasks (id)));
project_management.c | 1106 | ctime (projects[i]->estimated_completion));
project_management.c | 1110 | replace (ret, ({"$I$5=", "<p>"}));
project_management.c | 1118 | find_project (id);
project_management.c | 1126 | find_task (i, task_id);
project_management.c | 1132 | sprintf ("Project %s:  task %s.\n", id, task_id);
project_management.c | 1134 | query_num (projects[i]->tasks[j]->percent_complete));
project_management.c | 1136 | query_multiple_short (projects[i]->tasks[j]->assigned_to));
project_management.c | 1142 | find_project (id);
project_management.c | 1152 | find_project (id);
project_management.c | 1162 | find_project (id);
project_management.c | 1173 | find_project(id);
project_management.c | 1196 | query_project_completeness (p);
project_management.c | 1205 | to_int (bing->percent_complete);
project_management.c | 1216 | find_project (id);
project_management.c | 1223 | find_task (i, task);
project_management.c | 1233 | find_project (id);
project_management.c | 1241 | find_task (i, task);
project_management.c | 1259 | add_creator (id, creator);
project_management.c | 1266 | find_project (id);
project_management.c | 1274 | find_task (i, task_id);
project_management.c | 1281 | time(), aims: aim);
project_management.c | 1283 | touch_project (id, "Added task " + task_id, name);
project_management.c | 1284 | insert_into_tasks (i, tmp);
project_management.c | 1288 | find_project (id);
project_management.c | 1296 | find_note (i, note_id);
project_management.c | 1303 | time());
project_management.c | 1305 | touch_project (id, "Added note " + note_id, name);
project_management.c | 1306 | insert_into_notes (i, tmp);
project_management.c | 1311 | find_project (id);
project_management.c | 1318 | find_task (i, task_id);
project_management.c | 1330 | find_project (id);
project_management.c | 1337 | find_task (i, task_id);
project_management.c | 1349 | find_project (id);
project_management.c | 1356 | find_task (i, task_id);
project_management.c | 1367 | find_project (id);
project_management.c | 1374 | find_task (i, task_id);
project_management.c | 1385 | find_project (id);
project_management.c | 1388 | return ({ });
project_management.c | 1395 | find_project (id);
project_management.c | 1398 | return ({ });
project_management.c | 1407 | find_project (id);
project_management.c | 1414 | find_task (i, task_id);
project_management.c | 1426 | find_project (id);
project_management.c | 1433 | find_task (i, task_id);
project_management.c | 1444 | find_project (id);
project_management.c | 1451 | find_task (i, task_id);
project_management.c | 1468 | find_project (id);
project_management.c | 1475 | find_task (i, task_id);
project_management.c | 1486 | find_project (id);
project_management.c | 1493 | find_task (i, task_id);
project_management.c | 1505 | find_project (id);
project_management.c | 1512 | find_task (i, task_id);
project_management.c | 1523 | find_project (id);
project_management.c | 1530 | find_task (i, task_id);
project_management.c | 1542 | find_project (id);
project_management.c | 1549 | find_task (i, task_id);
project_management.c | 1587 | explode (replace (tmp_str, ({" ", ""})), ",");
project_management.c | 1603 | explode (replace (tmp_str, ({" ", ""})), ",");
project_management.c | 1664 | explode (replace (tmp_str, ({" ", ""})), ",");
project_management.c | 1689 | find_project (id);
project_management.c | 1704 | explode (replace (tmp_str, ({" ", ""})), ",");
project_management.c | 1716 | to_int (query["completed"]);
project_management.c | 1737 | find_project (id);
project_management.c | 1749 | find_project (id);
project_management.c | 1757 | touch_project (id, "Updated project file", name);
project_management.c | 1758 | catch_status_change (id, tmp->status);
project_management.c | 1780 | sort_array (keys (dom_proj), 1);
project_management.c | 1787 | uniq_array (tmp);
project_management.c | 1792 | find_project (id);
project_management.c | 1799 | find_task (i, t);
project_management.c | 1809 | find_project (id);
project_management.c | 1816 | find_task (i, t);
project_management.c | 1823 | touch_project (id, "Updated task " + t, name);
project_management.c | 1828 | find_project (id);
project_management.c | 1835 | find_note (i, t);
project_management.c | 1845 | find_project (id);
project_management.c | 1852 | find_note(i, t);
project_management.c | 1859 | touch_project (id, "Updated note " + t, name);
project_management.c | 1865 | find_project (id);
project_management.c | 1886 | find_project (project);
project_management.c | 1898 | query_project_domains (project);
project_management.c | 1909 | find_object ("/d/playtesting/master");
project_management.c | 1926 | find_object ("/d/" + d + "/master");
project_management.c | 1930 | call_other (ob, CALLBACK, name, action, project);
project_management.c | 1948 | return (lower_case (name) == lower_case (query_project_leader (project)));
project_management.c | 1950 | find_object ("/d/" + $1 + "/master")->query_member ($(name)) :)));
project_management.c | 1954 | is_creator_on_project (name, project);
project_management.c | 1964 | find_project (id);
project_management.c | 1967 | load_object ("/d/" + d + "/master");
project_management.c | 1974 | project_status_change (id, status);
project_management.c | 1984 | clear_playtesting_projects (projects[i]->playtesters);
project_management.c | 1986 | save_file();
project_management.c | 1988 | time();
project_management.c | 1993 | find_project (id);
project_management.c | 1999 | map(pt, (: lower_case ($1) :));
project_management.c | 2000 | filter (pt, (: PLAYTESTER_HAND->query_playtester ($1) :));
project_management.c | 2003 | save_file();
project_management.c | 2006 | map_delete (pt_assignment_cache, p);
project_management.c | 2016 | find_project (id);
project_management.c | 2023 | map(pt, (: lower_case ($1) :));
project_management.c | 2024 | filter (pt, (: PLAYTESTER_HAND->query_playtester ($1) :));
project_management.c | 2028 | uniq_array (names += pt);
project_management.c | 2029 | clear_playtesting_projects (pt);
project_management.c | 2031 | save_file();
project_management.c | 2032 | do_mail (pt, projects[i]->id);
project_management.c | 2037 | find_project (id);
project_management.c | 2043 | map(pt, (: lower_case ($1) :));
project_management.c | 2046 | clear_playtesting_projects (pt);
project_management.c | 2048 | save_file();
project_management.c | 2054 | unguarded ((: restore_object, TMP_SAVE :));
project_management.c | 2065 | do_save();
project_management.c | 2070 | find_cache_file (nfile);
project_management.c | 2083 | find_project (project);
project_management.c | 2098 | map (projects[i]->tasks, (: $1->id :));
project_management.c | 2109 | find_file (i, nfile, t);
project_management.c | 2116 | uniq_array (tmp);
project_management.c | 2119 | find_cache_file (f->file);
project_management.c | 2122 | add_cache_file (f->file);
project_management.c | 2157 | map_delete (creator_project_cache, c);
project_management.c | 2165 | query_projects_for_creator (name);
project_management.c | 2172 | find_cache_file (nfile);
project_management.c | 2188 | query_permission (p, name, nfile, access);
project_management.c | 2202 | time();
project_management.c | 2210 | map_delete (project_locks, project);
project_management.c | 2228 | filter_by_query ((["status": "playtesting"]));
project_management.c | 2245 | find_project (id);
project_management.c | 2270 | implode (det, "\n\n");
project_management.c | 2280 | query_multiple_short (p->domains)) });
project_management.c | 2282 | implode (det, "\n");
project_management.c | 2294 | implode (det, "\n\n");
project_management.c | 2301 | sprintf ("*  %s.", d) });
project_management.c | 2303 | implode (det, "\n\n");
project_management.c | 2330 | find_changes_in_database("Playtesters", last_summary));
project_management.c | 2332 | time();
project_management.c | 2333 | save_file();
project_management.c | 2347 | filter_by_query ((["playtesters" : name ]));
project_management.c | 2353 | map (tmp, (: $1->id :));
project_management.c | 2365 | find_project (proj);
project_management.c | 2409 | find_project (proj);
project_management.c | 2449 | time();
project_management.c | 2451 | save_file();
project_management.c | 2460 | next_rotation_time(proj);
project_management.c | 2474 | find_project (proj);
project_management.c | 2491 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2501 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2513 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2524 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2535 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2547 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2558 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2571 | map_delete (pt_assignment_cache, v);
project_management.c | 2581 | save_file();
project_management.c | 2587 | filter_by_query ((["status": "playtesting"]));
project_management.c | 2593 | find_project (proj);
project_management.c | 2603 | intp (proj) ? find_project (proj) : proj);
project_management.c | 2625 | query_number_of_pts (proj);
project_management.c | 2628 | return ({ });
project_management.c | 2632 | query_guilds();
project_management.c | 2643 | query_playtesters();
project_management.c | 2656 | if (sizeof (unassigned) >
project_management.c | 2662 | random (sizeof (assigned));
project_management.c | 2681 | clear_playtesting_projects (projects[i]->last_pt_cohort);
project_management.c | 2685 | time();
project_management.c | 2710 | if ((sizeof (selected) + sizeof (ordered))  >
project_management.c | 2715 | while (sizeof (selected) < needed);
project_management.c | 2717 | save_file();
project_management.c | 2721 | clear_playtesting_projects ((selected ? selected : ({ })) + (last? last : ({ })));
project_management.c | 2722 | do_mail (selected, projects[i]->id);
project_management.c | 2730 | uniq_array (valid);
project_management.c | 2745 | clear_playtesting_projects ((selected ? selected : ({ })) + (last? last : ({ })));
project_management.c | 2747 | do_mail (selected, projects[i]->id);
project_management.c | 2749 | save_file();
project_management.c | 2760 | find_project (tmp);
project_management.c | 2780 | set_status(projects[i]->id, 4);
project_management.c | 2785 | time();
project_management.c | 2786 | assign_pts_to_project(i);
project_management.c | 2794 | time();
project_management.c | 2798 | make_post();
project_management.c | 2801 | sizeof (projects);
project_management.c | 2807 | rotate_project (i);
project_management.c | 2822 | sizeof (projects);
project_management.c | 2823 | new (class project_tmp);
project_management.c | 2851 | time();
project_management.c | 2858 | save_object (TMP_SAVE);
project_management.c | 2867 | save_file();
project_management.c | 2889 | sizeof (projects);
project_management.c | 2895 | query_playtesters();
project_management.c | 2897 | clear_playtesting_projects (names);
project_management.c | 2898 | save_file();
project_management.c | 2903 | printf ("%O\n", pt_assignment_cache);
start_positions.c | 19 | if ( file_size( SAVE_FILE + ".o" ) >
start_positions.c | 20 | file_size( SAVE_FILE + ".o.gz" ) >
start_positions.c | 22 | unguarded( (: restore_object, SAVE_FILE :) );
start_positions.c | 28 | unguarded( (: save_object, SAVE_FILE :) );
start_positions.c | 36 | load_file();
start_positions.c | 54 | lower_case( fname );
start_positions.c | 65 | time();
start_positions.c | 66 | save_file();
start_positions.c | 81 | lower_case( fname );
start_positions.c | 92 | save_file();
start_positions.c | 101 | copy( _buggy_starts );
start_positions.c | 115 | copy( player->query_starts() );
start_positions.c | 116 | sizeof( starts );
start_positions.c | 118 | remove_start( starts[i] );
start_positions.c | 121 | add_property( CHECKED_PROP, time() );
start_positions.c | 141 | lower_case( player );
start_positions.c | 144 | query_property( CHECKED_PROP ) >
start_positions.c | 149 | remove_buggy_starts( playerob );
start_positions.c | 154 | destruct( this_object() );
error_tracker.c | 4 | set_domain( "mudlib" );
error_tracker.c | 5 | set_name( "The Mudlib's Lord of the Whinge" );
error_tracker.c | 18 | set_period( 604800 );
error_tracker.c | 19 | create();
bits_controller.c | 32 | do_update();
bits_controller.c | 44 | call_out( (: do_update() :), TIME_OUT);
bits_controller.c | 57 | delete(bits, i, 1);
bits_controller.c | 65 | call_out((: do_update() :), TIME_OUT);
bits_controller.c | 67 | reset_eval_cost();
bits_controller.c | 68 | do_decay();
bits_controller.c | 73 | query_num_bits() { return sizeof(bits);
bits_controller.c | 76 | do_update();
book_handler.c | 26 | compare_page(object page1, object page2);
book_handler.c | 27 | load_it();
book_handler.c | 28 | save_it();
book_handler.c | 29 | check_book_same(object book, int num);
book_handler.c | 30 | query_pages(object book);
book_handler.c | 31 | compare_pages(string *pages1, string *pages2);
book_handler.c | 32 | query_book_pages(int book_num);
book_handler.c | 36 | seteuid(getuid());
book_handler.c | 37 | load_it();
book_handler.c | 46 | unguarded((: file_size(SAVE_DIR + $(book_num) + ".o") :)) >
book_handler.c | 73 | query_pages(book);
book_handler.c | 76 | save_variable($(bing))) :) );
book_handler.c | 78 | save_it();
book_handler.c | 97 | query_open_page();
book_handler.c | 99 | if (query_book_exists(num) >
book_handler.c | 100 | query_book_pages(num);
book_handler.c | 101 | query_pages(book);
book_handler.c | 102 | if (compare_pages(bing, fluff) >
book_handler.c | 108 | set_open_page(old_open_page);
book_handler.c | 123 | unguarded((: read_file(SAVE_DIR + $(book_num) + ".o") :));
book_handler.c | 125 | restore_variable(tmp);
book_handler.c | 142 | unguarded((: read_file(SAVE_DIR + $(book_num) + ".o") :));
book_handler.c | 144 | restore_variable(tmp);
book_handler.c | 168 | query_open_page();
book_handler.c | 169 | query_num_pages();
book_handler.c | 170 | set_open_page(i);
book_handler.c | 171 | query_current_page();
book_handler.c | 175 | query_read_mess();
book_handler.c | 183 | set_open_page(old_open_page);
book_handler.c | 203 | if (sizeof(pages1) >
book_handler.c | 221 | strsrch(page, pages2[pos]);
book_handler.c | 223 | strsrch(pages2[pos], page);
book_handler.c | 227 | strlen(page);
book_handler.c | 230 | strlen(pages2[pos]);
book_handler.c | 232 | while ((start == -1) && (pos < sizeof(pages2)));
book_handler.c | 233 | strlen(page);
book_handler.c | 259 | query_read_mess();
book_handler.c | 261 | sizeof(stuff1);
book_handler.c | 266 | sizeof(stuff2);
book_handler.c | 270 | return (text1 == text2);
book_handler.c | 322 | unguarded((: save_object(SAVE_FILE) :));
book_handler.c | 330 | unguarded((: restore_object(SAVE_FILE) :));
firework.c | 41 | do_effects();
firework.c | 90 | environment( caster )->query_co_ord();
firework.c | 95 | query_name();
firework.c | 97 | new(class firework_running);
firework.c | 100 | capitalize(text);
firework.c | 103 | call_out( (: do_effects :), TIME );
firework.c | 125 | call_out( (: do_effects :), TIME );
route_handler.c | 64 | printf("%O\n", $1) :));
route_handler.c | 70 | call_out((: evaluate($(call_back), ({ })) :), 1);
route_handler.c | 75 | error("illegal argument 1 or 2 to get_route");
route_handler.c | 81 | call_out((: evaluate($(call_back), ({ })) :), 1);
route_handler.c | 84 | file_name(function_owner(call_back)), start, end);
route_handler.c | 88 | get_route(start, end);
route_handler.c | 91 | call_out((:get_route($(end), $(start), $(call_back), $(count + 1)):), 10);
route_handler.c | 96 | call_out((: evaluate($(call_back), $(result)) :), 1);
route_handler.c | 102 | destruct(this_object());
new_soul.c | 39 | load_it();
new_soul.c | 40 | save_it();
new_soul.c | 44 | save_soul_command(string name, mixed *data);
new_soul.c | 53 | seteuid("Room");
new_soul.c | 54 | load_it();
new_soul.c | 61 | sizeof(pcache_order) - PCACHE_MAX_SIZE);
new_soul.c | 62 | map_delete(pattern_cache, pcache_order[i]);
new_soul.c | 67 | sizeof(scache_order) - SCACHE_MAX_SIZE);
new_soul.c | 68 | map_delete(soul_cache, scache_order[i]);
new_soul.c | 85 | save_soul_command(name, data);
new_soul.c | 86 | map_delete(soul_cache, name);
new_soul.c | 87 | save_it();
new_soul.c | 97 | map_delete(soul_cache, name);
new_soul.c | 98 | map_delete(soul_command_names, name);
new_soul.c | 99 | unguarded((: rm, SOUL_DATA_DIR + name + ".os" :));
new_soul.c | 100 | save_it();
new_soul.c | 109 | keys(soul_command_names);
new_soul.c | 125 | unguarded((: read_file, SOUL_DATA_DIR + str + ".os" :));
new_soul.c | 126 | restore_variable(tmp);
new_soul.c | 128 | if (!cache_callout && (sizeof(scache_order) >
new_soul.c | 129 | call_out("clean_cache", CLEAN_UP_DELAY);
new_soul.c | 147 | query_soul_command_data(str) + ({ });
new_soul.c | 156 | save_variable(data);
new_soul.c | 157 | unguarded((: rm, SOUL_DATA_DIR + name + ".os" :));
new_soul.c | 158 | unguarded((: write_file, SOUL_DATA_DIR + name + ".os", str :));
new_soul.c | 166 | unguarded((: save_object, SAVE_FILE :));
new_soul.c | 176 | unguarded((: restore_object, SAVE_FILE :));
new_soul.c | 180 | keys(soul_commands);
new_soul.c | 181 | sizeof(names);
new_soul.c | 182 | reset_eval_cost();
new_soul.c | 183 | save_soul_command(names[i], soul_commands[names[i]]);
new_soul.c | 186 | save_it();
new_soul.c | 194 | explode("#" + pattern, "<indirect:");
new_soul.c | 229 | query_soul_command_data(name);
new_soul.c | 233 | this_object(), 0 }) });
new_soul.c | 234 | sizeof(data[PATTERNS]);
new_soul.c | 239 | create_pattern_cache(pat);
new_soul.c | 240 | if (!cache_callout && sizeof(pcache_order) >
new_soul.c | 241 | call_out("clean_cache", CLEAN_UP_DELAY);
new_soul.c | 250 | this_object(), 0 }) });
new_soul.c | 280 | query_pattern(pattern);
new_soul.c | 281 | sizeof(stuff);
new_soul.c | 306 | if (sizeof(obs) >
new_soul.c | 307 | filter(obs, (: !$1->check_earmuffs("multiple-soul") :));
new_soul.c | 330 | previous_object()->query_ignoring(obs);
new_soul.c | 371 | environment($1)) :));
new_soul.c | 398 | if (pointerp(stuff[i]) && sizeof(stuff[i]) >
new_soul.c | 414 | previous_object()->add_failed_mess(this_object(), NO_POWER, ({ }));
new_soul.c | 418 | query_soul_command_data(verb);
new_soul.c | 427 | if (sizeof(data[SINGLE][NO_ARGUMENTS]) >
new_soul.c | 447 | sizeof(data[SINGLE][ARGUMENTS]);
new_soul.c | 448 | sizeof(data[SINGLE][ARGUMENTS][i + ARGS]);
new_soul.c | 449 | random(j);
new_soul.c | 450 | sizeof(data[SINGLE][ARGUMENTS]);
new_soul.c | 458 | sizeof(data[SINGLE][ARGUMENTS][i + ARGS]);
new_soul.c | 469 | sizeof(data[SINGLE][ARGUMENTS][i + ARGS]);
new_soul.c | 473 | sizeof(data[SINGLE][ARGUMENTS]);
new_soul.c | 486 | sizeof(data[SINGLE][ARGUMENTS]);
new_soul.c | 528 | sizeof(data[TARGET][ARGUMENTS]);
new_soul.c | 529 | sizeof(data[TARGET][ARGUMENTS][i + ARGS]);
new_soul.c | 531 | random(j);
new_soul.c | 532 | sizeof(data[TARGET][ARGUMENTS]);
new_soul.c | 540 | sizeof(data[TARGET][ARGUMENTS][i + ARGS]);
new_soul.c | 555 | sizeof(data[TARGET][ARGUMENTS][i + ARGS]);
new_soul.c | 559 | sizeof(data[TARGET][ARGUMENTS]);
new_soul.c | 576 | sizeof(data[TARGET][ARGUMENTS]);
new_soul.c | 601 | one_short(use_name);
new_soul.c | 619 | tell_creator("presto", "pattern == %s, verb = %s, type == %d, use_name == %d\n", pattern, verb, type, use_name);
new_soul.c | 621 | if (pointerp(targets) && sizeof(targets) >
new_soul.c | 623 | pluralize(verb) + "," + verb + "$V$");
new_soul.c | 626 | pluralize(verb) + "," + verb + "$V$");
new_soul.c | 630 | replace_string(pattern, "$V$", "VERBFROG");
new_soul.c | 631 | explode("%" + replace(pattern, ({ "$arg$", args })), "$");
new_soul.c | 634 | previous_object();
new_soul.c | 637 | tell_creator("presto", "%O\n", bits);
new_soul.c | 638 | sizeof(bits);
new_soul.c | 661 | get_name(targets, use_name, type);
new_soul.c | 679 | query_possessive();
new_soul.c | 683 | the_poss_short();
new_soul.c | 693 | query_possessive();
new_soul.c | 699 | query_pronoun();
new_soul.c | 705 | query_objective();
new_soul.c | 714 | short(0, 0);
new_soul.c | 716 | short(0, 0);
new_soul.c | 718 | the_short();
new_soul.c | 722 | query_possessive();
new_soul.c | 728 | query_pronoun();
new_soul.c | 732 | query_objective();
new_soul.c | 738 | explode("%" + position, "$");
new_soul.c | 750 | explode("%" + actor_position, "$");
new_soul.c | 764 | strsrch(bits[i - 1], ' ', -1);
new_soul.c | 770 | pluralize(bits[i - 1][word_break + 1 .. ]);
new_soul.c | 772 | if (pointerp(targets)  &&  sizeof(targets) >
new_soul.c | 790 | if (pointerp(targets)  &&  sizeof(targets) >
new_soul.c | 808 | replace_string(pattern, "VERBFROG", "$V$");
new_soul.c | 809 | if (me == find_player("presto")) tell_creator("presto", "pattern == %s\n", pattern);
new_soul.c | 829 | query_position();
new_soul.c | 832 | position_command(position[cur_pos]);
new_soul.c | 834 | position_command(position["default"]);
new_soul.c | 839 | position(ob, position["silent"]);
new_soul.c | 851 | query_position();
new_soul.c | 858 | return ({ new_pos["self"], new_pos["target"], new_pos["rest"] });
new_soul.c | 878 | query_position();
new_soul.c | 880 | position_command(position[tmp]);
new_soul.c | 886 | position_command(position["default"]);
new_soul.c | 895 | file_name(ob->query_current_room()) + position_of(ob, position);
new_soul.c | 913 | position_string(previous_object(), position, 0);
new_soul.c | 917 | do_position_stuff(previous_object(), position);
new_soul.c | 921 | position_string(obs[0], position, 0);
new_soul.c | 922 | position_string(previous_object(), position["actor"], 0);
new_soul.c | 925 | do_position_stuff(obs[0], position);
new_soul.c | 927 | do_position_stuff(previous_object(), position["actor"]);
new_soul.c | 931 | position_string(previous_object(), position["actor"], 0);
new_soul.c | 936 | do_position_stuff(previous_object(), position["actor"]);
new_soul.c | 939 | filter(obs, (: environment(previous_object(1)) == environment($1) :));
new_soul.c | 940 | previous_object() });
new_soul.c | 942 | if (previous_object() == find_player("presto")) tell_creator("presto", "targ == %O, p_o == %O\n", targ, previous_object(1)->short());
new_soul.c | 944 | previous_object()->remove_hide_invis("hiding");
new_soul.c | 956 | if(sizeof(obs) >
new_soul.c | 957 | previous_object() });
new_soul.c | 970 | previous_object()->query_possessive() }));
new_soul.c | 990 | previous_object() });
new_soul.c | 995 | if(sizeof(here) >
new_soul.c | 996 | previous_object() });
new_soul.c | 1002 | sizeof(here)>=1?here[0]:0);
new_soul.c | 1008 | replace(force, "$mcname$", previous_object()->query_name());
new_soul.c | 1010 | call_out("do_force", 2, ({ ob, force }));
new_soul.c | 1032 | implode(sort_array(keys(soul_command_names), 1), "\n"));
new_soul.c | 1050 | query_soul_command_data(verb);
new_soul.c | 1054 | this_object(), verb), "\n"));
new_soul.c | 1065 | sizeof(data[SINGLE][ARGUMENTS]);
new_soul.c | 1081 | query_multiple_short(({ "Womble", "Cabbage" }));
new_soul.c | 1097 | sizeof(data[TARGET][ARGUMENTS]);
new_soul.c | 1114 | this_player(), 0);
new_soul.c | 1118 | this_player()->convert_message(ret);
new_soul.c | 1133 | eventForce(arr[1]);
new_soul.c | 1137 | sizeof(keys(pattern_cache));
new_soul.c | 1141 | sizeof(keys(soul_cache));
new_soul.c | 1152 | sizeof(keys(pattern_cache)) - 1, }), });
potion.c | 27 | allocate_mapping(10);
potion.c | 28 | allocate_mapping(10);
potion.c | 45 | seteuid("Room");
potion.c | 46 | sizeof(directories);
potion.c | 50 | if (file_size(index) >
potion.c | 63 | create();
potion.c | 75 | this_player()->expand_nickname(s);
potion.c | 80 | clone_object(paths[s]);
potion.c | 82 | query_min_level();
potion.c | 94 | this_player()->expand_nickname(s);
potion.c | 99 | clone_object(paths[s]);
potion.c | 101 | query_chant();
potion.c | 113 | this_player()->expand_nickname(s);
potion.c | 118 | clone_object(paths[s]);
potion.c | 133 | this_player()->expand_nickname(s);
potion.c | 137 | query_potion(s);
potion.c | 138 | printf("Verb = %O\n", query_verb());
potion.c | 139 | clone_reagent(query_verb());
corpse_handler.c | 23 | seteuid(getuid());
corpse_handler.c | 27 | unguarded( (: restore_object(CORPSE_SAVE_FILE,  1) :));
corpse_handler.c | 28 | call_out("check_corpses", 10);
corpse_handler.c | 32 | unguarded( (: save_object(CORPSE_SAVE_FILE,  3) :));
corpse_handler.c | 65 | query_ownership();
corpse_handler.c | 66 | query_corpse_id();
corpse_handler.c | 67 | find_corpse_data(name, id);
corpse_handler.c | 80 | query_ownership() == $2 :), player );
corpse_handler.c | 95 | query_save_data();
corpse_handler.c | 102 | unguarded((: write_file($(fname), $(data), 1) :));
corpse_handler.c | 104 | tell_creator("pinkfish", "Bad corpse save %O %O\n", ob, data);
corpse_handler.c | 108 | find_player(ob->query_owner());
corpse_handler.c | 111 | save_me();
corpse_handler.c | 126 | find_corpse_ob_data(ob);
corpse_handler.c | 129 | query_ownership());
corpse_handler.c | 134 | remove_call_out(_save_things_id);
corpse_handler.c | 136 | call_out((: really_save_corpses :), 2);
corpse_handler.c | 150 | find_corpse_data(name, id);
corpse_handler.c | 153 | if(unguarded( (: file_size(CORPSE_RAM_DIR + $(corpse->id)) :)) >
corpse_handler.c | 160 | unguarded( (: read_file($(fname)) :));
corpse_handler.c | 162 | clone_object(CORPSE_OBJECT);
corpse_handler.c | 163 | setup_corpse_from_save(data, name, id);
corpse_handler.c | 185 | find_player_corpses(name);
corpse_handler.c | 186 | sizeof(corpses);
corpse_handler.c | 187 | sizeof(obs);
corpse_handler.c | 196 | sizeof(corpses);
corpse_handler.c | 197 | create_corpse(name, corpses[i]->id);
corpse_handler.c | 211 | save_me();
corpse_handler.c | 224 | tell_creator("Registering %O (%O)\n", ob, ob->query_ownership());
corpse_handler.c | 225 | query_ownership();
corpse_handler.c | 228 | query_ownership());
corpse_handler.c | 231 | query_corpse_id();
corpse_handler.c | 232 | find_corpse_ob_data(ob);
corpse_handler.c | 234 | save_corpse(ob);
corpse_handler.c | 238 | new(class corpse_data);
corpse_handler.c | 245 | save_me();
corpse_handler.c | 246 | save_corpse(ob);
corpse_handler.c | 263 | query_ownership();
corpse_handler.c | 264 | query_corpse_id();
corpse_handler.c | 266 | sizeof(_corpses[name]);
corpse_handler.c | 272 | map_delete(_corpses, name);
corpse_handler.c | 274 | save_me();
corpse_handler.c | 275 | unguarded( (: rm(CORPSE_SAVE_DIR + $(id)) :));
corpse_handler.c | 277 | unguarded( (: rm(CORPSE_RAM_DIR + $(id)) :));
corpse_handler.c | 285 | return ({ ({ "corpses", keys(_corpses) }) });
term.c | 486 | lower_case(str);
term.c | 490 | this_player()->query_name());
term.c | 508 | tell_object(this_player(), "No entry for "+str+", using dumb.\n");
term.c | 519 | m_indices(terms);
term.c | 527 | keys(terms[TERMINAL_DUMB]);
finderror_helper.c | 16 | recursive_add_directory( string word, string dir );
finderror_helper.c | 37 | create();
finderror_helper.c | 38 | set_name( "finderror_helper" );
finderror_helper.c | 39 | set_short( "finderror helper" );
finderror_helper.c | 67 | seteuid( word );
finderror_helper.c | 71 | if ( file_size( file ) >
finderror_helper.c | 72 | unguarded( (: restore_object, file :) );
finderror_helper.c | 92 | seteuid( word );
finderror_helper.c | 97 | unguarded( (: save_object, "/w/" + word + "/finderror" :) );
finderror_helper.c | 105 | replace( txt, ({ "'", "\\'" }) );
finderror_helper.c | 110 | map( dirs, (: escape :) );
finderror_helper.c | 113 | strsrch( $1, "%" ) >
finderror_helper.c | 118 | evaluate( func, player, status, data );
finderror_helper.c | 133 | query_name();
finderror_helper.c | 137 | this_object();
finderror_helper.c | 140 | get_data_file( word );
finderror_helper.c | 143 | assemble_dirs_sql( info->dirs );
finderror_helper.c | 149 | finished_query( $1, $2, $(finish_func), $(player) ) :) );
finderror_helper.c | 166 | map( directories , (: escape :) );
finderror_helper.c | 168 | strsrch( $1, "%" ) >
finderror_helper.c | 175 | finished_query( $1, $2, $(finish_func), $(this_player()) ) :) );
finderror_helper.c | 188 | query_name();
finderror_helper.c | 190 | get_data_file( word );
finderror_helper.c | 193 | assemble_dirs_sql( info->dirs );
finderror_helper.c | 198 | finished_query( $1, $2, $(finish_func), $(player) ) :) );
finderror_helper.c | 209 | get_data_file( player );
finderror_helper.c | 211 | copy( data->dirs );
finderror_helper.c | 225 | query_name();
finderror_helper.c | 227 | get_data_file( word );
finderror_helper.c | 228 | member_array( dir, info->dirs );
finderror_helper.c | 234 | call_out( (: recursive_add_directory :), 1, player, dir );
finderror_helper.c | 244 | save_data_file( word );
finderror_helper.c | 261 | query_name();
finderror_helper.c | 263 | get_data_file( word );
finderror_helper.c | 266 | get_dir( dir, -1 );
finderror_helper.c | 271 | add_directory( player, dir + file[ 0 ] +"/", 1 );
finderror_helper.c | 279 | save_data_file( word );
finderror_helper.c | 288 | query_name();
finderror_helper.c | 289 | get_data_file( word );
finderror_helper.c | 297 | member_array( directory, info->dirs );
finderror_helper.c | 306 | save_data_file( word );
trig.c | 59 | sin(90 - angle);
trig.c | 67 | sin(angle) / (sin(90 - angle) / 1000);
vhandler.c | 32 | seteuid(geteuid(this_object()));
vhandler.c | 34 | restore_object(file_name(this_object()));
vhandler.c | 45 | save_object(file_name(this_object()));
cmr_handler.c | 39 | load_cmr_handler();
cmr_handler.c | 40 | save_cmr_handler();
cmr_handler.c | 41 | create();
cmr_handler.c | 44 | query_colour_details( string word );
cmr_handler.c | 45 | delete_colour( string word );
cmr_handler.c | 46 | query_colour_names();
cmr_handler.c | 47 | identify_colour( string word, object player );
cmr_handler.c | 50 | query_material_details( string word );
cmr_handler.c | 51 | delete_material( string word );
cmr_handler.c | 52 | query_material_names();
cmr_handler.c | 53 | identify_material( string word, object player, int article );
cmr_handler.c | 54 | query_material_adjective( string word );
cmr_handler.c | 60 | if ( file_size( SAVE_FILE +".o" ) >
cmr_handler.c | 61 | unguarded((: restore_object, SAVE_FILE :));
cmr_handler.c | 68 | unguarded((: save_object, SAVE_FILE :));
cmr_handler.c | 79 | create();
cmr_handler.c | 80 | load_cmr_handler();
cmr_handler.c | 95 | member_array( word, colour_names );
cmr_handler.c | 99 | save_cmr_handler();
cmr_handler.c | 114 | member_array( word, colour_names );
cmr_handler.c | 115 | if ( temp == -1 ) return ({ -1 });
cmr_handler.c | 126 | member_array( word, colour_names );
cmr_handler.c | 129 | m_delete( colour_details, word );
cmr_handler.c | 130 | save_cmr_handler();
cmr_handler.c | 139 | query_colour_names() { return colour_names + ({ });
cmr_handler.c | 153 | member_array( word, colour_names );
cmr_handler.c | 158 | allocate( 4 );
cmr_handler.c | 164 | switch ( ( ( LIBRARY->query_quest_points(player->query_name()) ) >
cmr_handler.c | 165 | query_max_gp() ) >
cmr_handler.c | 198 | member_array( word, material_names );
cmr_handler.c | 203 | save_cmr_handler();
cmr_handler.c | 224 | member_array( word, material_names );
cmr_handler.c | 225 | if ( temp == -1 ) return ({ -1 });
cmr_handler.c | 236 | member_array( word, material_names );
cmr_handler.c | 239 | m_delete( material_details, word );
cmr_handler.c | 240 | save_cmr_handler();
cmr_handler.c | 247 | query_material_names() { return material_names + ({ });
cmr_handler.c | 269 | member_array( word, material_names );
cmr_handler.c | 271 | allocate( 4 );
cmr_handler.c | 284 | if ( ( player->query_skill_bonus( SKILLS[args[2]] ) ) >
cmr_handler.c | 297 | member_array( word, material_names );
cmr_handler.c | 299 | allocate( 4 );
cmr_handler.c | 312 | member_array( word, material_names );
cmr_handler.c | 314 | allocate( 4 );
item_tracker.c | 21 | create();
item_tracker.c | 40 | query_name();
item_tracker.c | 45 | query_full_tracked_item_identifier();
item_tracker.c | 52 | copy(LIBRARY->query_player_quest_info( pl_name, QUEST_INFO_IDENT ));
item_tracker.c | 53 | if (!player_items) player_items = ([ ]);
item_tracker.c | 74 | query_name();
item_tracker.c | 79 | query_full_tracked_item_identifier();
item_tracker.c | 86 | copy(LIBRARY->query_player_quest_info( pl_name, QUEST_INFO_IDENT ));
item_tracker.c | 87 | if (!player_items) player_items = ([ ]);
item_tracker.c | 91 | map_delete( player_items, item );
item_tracker.c | 112 | query_name();
item_tracker.c | 116 | query_tracked_item_identifier();
item_tracker.c | 123 | copy(LIBRARY->query_player_quest_info( pl_name, QUEST_INFO_IDENT ));
item_tracker.c | 124 | if (!player_items) player_items = ([ ]);
item_tracker.c | 152 | query_name();
item_tracker.c | 157 | query_full_tracked_item_identifier();
item_tracker.c | 164 | copy(LIBRARY->query_player_quest_info( pl_name, QUEST_INFO_IDENT ));
item_tracker.c | 165 | if (!player_items) player_items = ([ ]);
item_tracker.c | 185 | query_name();
item_tracker.c | 191 | copy(LIBRARY->query_player_quest_info( pl_name, QUEST_INFO_IDENT ));
item_tracker.c | 192 | if (!player_items) player_items = ([ ]);
item_tracker.c | 214 | query_name();
item_tracker.c | 223 | set_player_quest_info( pl_name, QUEST_INFO_IDENT, player_items );
item_tracker.c | 243 | query_name();
item_tracker.c | 252 | set_player_quest_info( pl_name, QUEST_INFO_IDENT, player_items );
item_tracker.c | 253 | map_delete( item_cache, pl_name );
mail_track.c | 22 | add_member(string list, string mem);
mail_track.c | 23 | load_me();
mail_track.c | 24 | save_me();
mail_track.c | 25 | query_list(string list);
mail_track.c | 26 | create_list(string list, string creator);
mail_track.c | 43 | set_name("tracker");
mail_track.c | 44 | set_short("mail tracker");
mail_track.c | 45 | add_property("determinate", "the ");
mail_track.c | 46 | add_property("there", "mounted on one wall");
mail_track.c | 47 | add_adjective("mail");
mail_track.c | 48 | set_long("This thing tracks mail.   Clever, innit?\n");
mail_track.c | 49 | reset_get();
mail_track.c | 50 | reset_drop();
mail_track.c | 53 | seteuid("Root");
mail_track.c | 54 | load_me();
mail_track.c | 56 | create_list("postmaster", "pinkfish");
mail_track.c | 58 | move(MAIL_ROOM);
mail_track.c | 74 | member_array(str, our_mailers);
mail_track.c | 78 | write(i);
mail_track.c | 80 | dest_me();
mail_track.c | 100 | member_array(str, our_mailers);
mail_track.c | 121 | member_array(ob, our_mailers);
mail_track.c | 125 | delete(our_mailers, i, 2);
mail_track.c | 131 | dest_me();
mail_track.c | 146 | clone_object(MAILER);
mail_track.c | 147 | set_do_this_last(({ this_object(), "we_are_done", mailer }));
mail_track.c | 148 | read_mail(str, sub);
mail_track.c | 153 | unguarded((: save_object, "/save/mail_track" :));
mail_track.c | 160 | unguarded((: restore_object, "/save/mail_track" :));
mail_track.c | 161 | keys(mailing_lists);
mail_track.c | 167 | save_me();
mail_track.c | 207 | query_playtesters();
mail_track.c | 208 | return ({ "/d/playtesters/master"->query_lord() }) + sort_array(tmp, 1);
mail_track.c | 210 | master()->query_all_seniors();
mail_track.c | 213 | master()->query_all_leaders();
mail_track.c | 223 | query_lord() });
mail_track.c | 226 | copy(mailing_lists[list]->members);
mail_track.c | 230 | filter_array(tmp, (: PLAYER_HANDLER->test_active($1, 1) :));
mail_track.c | 232 | return ({ });
mail_track.c | 254 | return (int)("/d/" + list_name + "/master")->query_member(name);
mail_track.c | 257 | return (int)master()->query_senior(name);
mail_track.c | 260 | return (int)master()->query_leader(name);
mail_track.c | 263 | return (int)master()->query_administrator(name);
mail_track.c | 275 | return ({ (string)("/d/"+ list +"/master")->query_lord() });
mail_track.c | 278 | copy(mailing_lists[list]->controllers);
mail_track.c | 280 | return ({ });
mail_track.c | 335 | save_me();
mail_track.c | 349 | map_delete(mailing_lists, list);
mail_track.c | 350 | save_me();
mail_track.c | 371 | add_member(list_name, mem);
mail_track.c | 372 | save_me();
mail_track.c | 394 | delete(list->controllers, i, 1);
mail_track.c | 395 | save_me();
mail_track.c | 420 | save_me();
mail_track.c | 446 | delete(list->members, i, 1);
mail_track.c | 448 | delete_list(list_name);
mail_track.c | 450 | save_me();
mail_track.c | 470 | remove_controller(list_name, mem);
mail_track.c | 472 | delete_list(list_name);
mail_track.c | 474 | save_me();
terrain_handler.c | 36 | TP(x) tell_object(find_player("taffyd"), x);
terrain_handler.c | 57 | set_name("map");
terrain_handler.c | 58 | set_short("terrain map");
terrain_handler.c | 59 | add_adjective("terrain");
terrain_handler.c | 65 | add_adjective("terrain");
terrain_handler.c | 112 | return ((limit1 <= val) && (val <= limit2));
terrain_handler.c | 114 | return ((limit2 <= val) && (val <= limit1));
terrain_handler.c | 165 | member_floating_locations(co_ords);
terrain_handler.c | 170 | sizeof(right_locations);
terrain_handler.c | 194 | if (file_size(RESTORE_PATH + word + ".o") >
terrain_handler.c | 195 | unguarded((: restore_object, RESTORE_PATH + word :));
terrain_handler.c | 197 | init_data(word);
terrain_handler.c | 208 | if (file_size(RESTORE_PATH + word +".o") >
terrain_handler.c | 210 | time() :));
terrain_handler.c | 211 | unguarded((: get_dir, RESTORE_PATH +"backups/"+ word +".*" :));
terrain_handler.c | 212 | if (sizeof(lines) >
terrain_handler.c | 215 | sscanf(line, word +".%d", number);
terrain_handler.c | 217 | unguarded((: rm, RESTORE_PATH +"backups/"+ line :));
terrain_handler.c | 221 | unguarded((: save_object, RESTORE_PATH + word :));
terrain_handler.c | 246 | get_data_file(word);
terrain_handler.c | 261 | get_data_file(word);
terrain_handler.c | 273 | get_data_file(terrain);
terrain_handler.c | 300 | restore_variable(connections);
terrain_handler.c | 335 | restore_variable(connections);
terrain_handler.c | 359 | get_data_file(terrain);
terrain_handler.c | 367 | save_data_file(terrain_name);
terrain_handler.c | 378 | unguarded((: mkdir, RESTORE_PATH + terrain :));
terrain_handler.c | 384 | save_variable(connection_info), 1 :));
terrain_handler.c | 388 | restore_variable(connections);
terrain_handler.c | 399 | save_variable(connection_info), 1 :));
terrain_handler.c | 422 | get_data_file(terrain);
terrain_handler.c | 430 | save_data_file(terrain_name);
terrain_handler.c | 466 | get_data_file(terrain);
terrain_handler.c | 474 | save_data_file(terrain_name);
terrain_handler.c | 495 | map_delete(location_m, file);
terrain_handler.c | 497 | map_delete(tmp, co_ords[2]);
terrain_handler.c | 500 | map_delete(tmp, co_ords[1]);
terrain_handler.c | 502 | map_delete(location_m, co_ords[0]);
terrain_handler.c | 504 | map_delete(cloned_locations, terrain);
terrain_handler.c | 520 | get_data_file(terrain);
terrain_handler.c | 524 | map_delete(fixed_locations, file);
terrain_handler.c | 525 | save_data_file(terrain_name);
terrain_handler.c | 542 | get_data_file(terrain);
terrain_handler.c | 543 | sizeof(floating_locations);
terrain_handler.c | 550 | sizeof(data);
terrain_handler.c | 556 | delete(floating_locations, i, 1);
terrain_handler.c | 562 | save_data_file(terrain_name);
terrain_handler.c | 572 | map_delete(cloned_locations, terrain);
terrain_handler.c | 590 | unguarded((: rm, RESTORE_PATH + terrain +"/"+ line :));
terrain_handler.c | 617 | base_name(file);
terrain_handler.c | 620 | TP(sprintf("GRS says (cached) %s is %d\n", file, size_cache[bname]));
terrain_handler.c | 626 | query_room_size() ]);
terrain_handler.c | 628 | TP(sprintf("GRS says (loaded) %s is %d\n", file, size_cache[bname]));
terrain_handler.c | 635 | query_room_size(bname);
terrain_handler.c | 639 | TP("GRS says recursion!\n");
terrain_handler.c | 646 | TP(sprintf("GRS says (map) %s is %d\n", file, size_cache[bname]));
terrain_handler.c | 656 | explode(read_file(file), "\n");
terrain_handler.c | 658 | sizeof(lines);
terrain_handler.c | 664 | get_room_size(parent, level + 1);
terrain_handler.c | 672 | TP(sprintf("GRS says (parsed) %s is %d\n", file, size_cache[bname]));
terrain_handler.c | 680 | query_exit_type(direc, dest);
terrain_handler.c | 688 | add_exit(direc, dest, type);
terrain_handler.c | 695 | query_connected(terrain_name, co_ords);
terrain_handler.c | 696 | query_direc();
terrain_handler.c | 701 | query_connection(terrain_name, co_ords, STD_ORDERS[i]);
terrain_handler.c | 704 | TP(sprintf("actual room %s found\n", actual));
terrain_handler.c | 706 | add_exit(place, STD_ORDERS[i], actual);
terrain_handler.c | 711 | TP("connected, but no actual room\n");
terrain_handler.c | 715 | copy(co_ords);
terrain_handler.c | 719 | reset_eval_cost();
terrain_handler.c | 727 | query_room_size() + get_room_size(actual, 0);
terrain_handler.c | 732 | TP(sprintf("adding connection for %s\n", actual));
terrain_handler.c | 735 | base_name(actual));
terrain_handler.c | 736 | add_exit(place, STD_ORDERS[i], actual);
terrain_handler.c | 758 | reset_eval_cost();
terrain_handler.c | 761 | load_object(dest_name);
terrain_handler.c | 769 | delete_cloned_location(terrain, dest_name);
terrain_handler.c | 773 | clone_object(dest_name);
terrain_handler.c | 774 | set_co_ord(co_ords);
terrain_handler.c | 775 | set_terrain(terrain_name);
terrain_handler.c | 776 | calculate_exits(destination, co_ords);
terrain_handler.c | 777 | add_cloned_location(terrain, file_name(destination), co_ords);
terrain_handler.c | 796 | get_data_file(terrain);
terrain_handler.c | 801 | set_co_ord(co_ords);
terrain_handler.c | 802 | calculate_exits(place, co_ords);
player_shop.c | 19 | save_variable(_shops), 1:));
player_shop.c | 29 | seteuid("Root");
player_shop.c | 30 | if (file_size("/save/player_shops") >
player_shop.c | 52 | tell_object(this_player(), "No such object "+ office_path+ ".\n");
player_shop.c | 59 | tell_object(this_player(), "Shop already exists.\n");
player_shop.c | 69 | register_refresh(office_path);
player_shop.c | 70 | register_delete(office_path);
player_shop.c | 74 | lower_case(geteuid(ob)));
player_shop.c | 76 | unguarded((: mkdir, savedir :));
player_shop.c | 77 | sprintf("/player_shops");
player_shop.c | 79 | unguarded((: mkdir, savedir :));
player_shop.c | 80 | sprintf("/%s", short_name);
player_shop.c | 82 | unguarded((: mkdir, savedir :));
player_shop.c | 84 | save_me();
player_shop.c | 100 | tell_object(this_player(), "Shop doesn't exist.\n");
player_shop.c | 106 | tell_object(this_player(), "Permission denied.\n");
player_shop.c | 109 | map_delete(_shops, short_name);
player_shop.c | 110 | save_me();
player_shop.c | 127 | tell_object(this_player(), "Shop doesn't exist.\n");
player_shop.c | 133 | tell_object(this_player(), "Permission denied.\n");
player_shop.c | 138 | tell_object(this_player(), "No such object "+ office_path+ ".\n");
player_shop.c | 141 | register_refresh(office_path);
player_shop.c | 142 | register_delete(office_path);
player_shop.c | 144 | save_me();
player_shop.c | 170 | query_shops() { return copy(_shops);
player_shop.c | 183 | do_mail_message(to, from, sub, cc, body, 0, 0, 1);
player_shop.c | 189 | back_trace() :));
club_elected.c | 53 | complete_election(string club_name);
club_elected.c | 54 | start_election(string club_name);
club_elected.c | 55 | holds_position_of(string name, string position, string person);
club_elected.c | 64 | query_club_board_name(string club_name);
club_elected.c | 147 | query_elected_info(string name);
club_elected.c | 152 | create();
club_elected.c | 166 | query_club_info(name);
club_elected.c | 167 | new(class election_info);
club_elected.c | 181 | time();
club_elected.c | 188 | set_club_changed(name);
club_elected.c | 189 | new(class club_transaction);
club_elected.c | 190 | time();
club_elected.c | 191 | query_balance(name, CLUB_DEFAULT_ACCOUNT_NAME);
club_elected.c | 194 | new(class account_info);
club_elected.c | 200 | set_club_changed(name);
club_elected.c | 202 | create_extra_data(name);
club_elected.c | 219 | start_election(name);
club_elected.c | 236 | map_delete(_elections, name);
club_elected.c | 237 | query_club_board_name(name) });
club_elected.c | 238 | save_main();
club_elected.c | 254 | query_club_info(name);
club_elected.c | 256 | new(class account_info);
club_elected.c | 277 | query_elected_info(name);
club_elected.c | 301 | query_elected_info(club);
club_elected.c | 308 | set_position_holder(club, position, CLUB_UNKNOWN_MEMBER);
club_elected.c | 312 | normalise_name(club);
club_elected.c | 315 | map_delete(nominations, member);
club_elected.c | 321 | map_delete(nominations, member);
club_elected.c | 337 | query_elected_info(name);
club_elected.c | 352 | query_last_election(name);
club_elected.c | 367 | query_last_election(name);
club_elected.c | 384 | query_elected_info(name);
club_elected.c | 386 | holds_position_of(name, info->president, president);
club_elected.c | 401 | query_elected_info(name);
club_elected.c | 403 | holds_position_of(name, info->vice_president, vice_president);
club_elected.c | 418 | query_elected_info(name);
club_elected.c | 420 | holds_position_of(name, info->secretary, secretary);
club_elected.c | 435 | query_elected_info(name);
club_elected.c | 437 | holds_position_of(name, info->treasurer, treasurer);
club_elected.c | 454 | query_elected_info(name);
club_elected.c | 481 | query_elected_info(name);
club_elected.c | 483 | query_position_name(name, position);
club_elected.c | 499 | query_elected_info(name);
club_elected.c | 501 | new(class account_info);
club_elected.c | 506 | set_club_changed(name);
club_elected.c | 538 | query_account_info(name, account);
club_elected.c | 540 | new(class club_transaction);
club_elected.c | 541 | time();
club_elected.c | 547 | set_club_changed(name);
club_elected.c | 577 | query_account_info(name, account);
club_elected.c | 579 | new(class club_transaction);
club_elected.c | 580 | time();
club_elected.c | 588 | set_club_changed(name);
club_elected.c | 611 | query_account_info(name, account);
club_elected.c | 614 | sizeof(frog->transactions);
club_elected.c | 616 | new(class club_transaction);
club_elected.c | 623 | set_club_changed(name);
club_elected.c | 628 | return ({ });
club_elected.c | 668 | query_account_info(club_name, account);
club_elected.c | 672 | return ({ });
club_elected.c | 693 | query_account_info(club_name, account);
club_elected.c | 718 | query_account_info(club_name, account);
club_elected.c | 722 | set_club_changed(club_name);
club_elected.c | 739 | query_account_info(club_name, account);
club_elected.c | 743 | set_club_changed(club_name);
club_elected.c | 759 | query_account_info(club_name, account);
club_elected.c | 763 | return ({ });
club_elected.c | 777 | query_account_info(club_name, account);
club_elected.c | 781 | set_club_changed(club_name);
club_elected.c | 798 | query_account_info(club_name, account);
club_elected.c | 802 | set_club_changed(club_name);
club_elected.c | 824 | query_elected_info(club_name);
club_elected.c | 827 | set_club_changed(club_name);
club_elected.c | 847 | query_elected_info(club_name);
club_elected.c | 849 | map_delete(data->options, option);
club_elected.c | 850 | set_club_changed(club_name);
club_elected.c | 868 | query_elected_info(club_name);
club_elected.c | 888 | query_elected_info(club_name);
club_elected.c | 890 | undefinedp(data->options[option]);
club_elected.c | 909 | normalise_name(club_name);
club_elected.c | 912 | query_elected_info(name);
club_elected.c | 913 | new(class election_data);
club_elected.c | 925 | save_main();
club_elected.c | 950 | normalise_name(club_name);
club_elected.c | 957 | query_position_name(club_name, position);
club_elected.c | 965 | save_main();
club_elected.c | 995 | normalise_name(club_name);
club_elected.c | 999 | query_elected_info(name);
club_elected.c | 1026 | keys(position_data)[0]);
club_elected.c | 1027 | map_delete(_elections[name]->people, position_name);
club_elected.c | 1035 | map_delete(_elections[name]->people, position_name);
club_elected.c | 1043 | save_main();
club_elected.c | 1044 | complete_election(name);
club_elected.c | 1049 | set_club_changed(name);
club_elected.c | 1050 | save_main();
club_elected.c | 1059 | query_multiple_short(bad_positions);
club_elected.c | 1060 | save_main();
club_elected.c | 1085 | normalise_name(club_name);
club_elected.c | 1089 | query_position_name(club_name, position);
club_elected.c | 1098 | save_main();
club_elected.c | 1126 | normalise_name(club_name);
club_elected.c | 1135 | if (sizeof(people) >
club_elected.c | 1145 | keys(people);
club_elected.c | 1156 | random(sizeof(max_people));
club_elected.c | 1161 | query_elected_info(name);
club_elected.c | 1164 | set_position_holder(club_name, position, person_name);
club_elected.c | 1166 | time();
club_elected.c | 1167 | set_club_changed(name);
club_elected.c | 1168 | touch_club(name);
club_elected.c | 1169 | map_delete(_elections, name);
club_elected.c | 1170 | save_main();
club_elected.c | 1171 | send_broadcast_message(name, "The election has finished!");
club_elected.c | 1189 | normalise_name(club);
club_elected.c | 1205 | normalise_name(club);
club_elected.c | 1223 | normalise_name(club);
club_elected.c | 1240 | normalise_name(club_name);
club_elected.c | 1242 | query_elected_info(club_name);
club_elected.c | 1243 | keys(frog->positions);
club_elected.c | 1245 | return ({ });
club_elected.c | 1258 | normalise_name(club_name);
club_elected.c | 1260 | query_elected_info(club_name);
club_elected.c | 1261 | values(frog->positions);
club_elected.c | 1263 | return ({ });
club_elected.c | 1279 | map(query_valid_positions(club_name), (: lower_case :));
club_elected.c | 1280 | return (member_array(lower_case(position), pos) != -1);
club_elected.c | 1296 | query_elected_info(club_name);
club_elected.c | 1297 | query_position_name(club_name, position);
club_elected.c | 1322 | query_valid_positions(club_name);
club_elected.c | 1323 | map(real_pos, (: lower_case :));
club_elected.c | 1324 | member_array(lower_case(position), pos);
club_elected.c | 1344 | query_position_name(club_name, position);
club_elected.c | 1345 | query_elected_info(club_name);
club_elected.c | 1368 | query_elected_info(name);
club_elected.c | 1370 | set_club_changed(name);
club_elected.c | 1372 | normalise_name(name);
club_elected.c | 1376 | save_main();
club_elected.c | 1401 | query_position_name(name, position);
club_elected.c | 1402 | query_elected_info(name);
club_elected.c | 1403 | map_delete(frog->positions, position);
club_elected.c | 1404 | set_club_changed(name);
club_elected.c | 1406 | normalise_name(name);
club_elected.c | 1407 | map_delete(_elections[name]->nominated, position);
club_elected.c | 1408 | map_delete(_elections[name]->voted_for, position);
club_elected.c | 1409 | map_delete(_elections[name]->people, position);
club_elected.c | 1410 | save_main();
club_elected.c | 1443 | query_position_name(name, position);
club_elected.c | 1444 | query_elected_info(name);
club_elected.c | 1446 | map_delete(frog->positions, position);
club_elected.c | 1457 | set_club_changed(name);
club_elected.c | 1458 | normalise_name(name);
club_elected.c | 1462 | map_delete(_elections[name]->nominated, position);
club_elected.c | 1465 | map_delete(_elections[name]->voted_for, position);
club_elected.c | 1468 | map_delete(_elections[name]->people, position);
club_elected.c | 1469 | save_main();
club_elected.c | 1472 | member_array(position, green->allowed_positions);
club_elected.c | 1498 | query_elected_info(club_name);
club_elected.c | 1503 | query_position_name(club_name, position);
club_elected.c | 1505 | set_club_changed(club_name);
club_elected.c | 1534 | normalise_name(club_name);
club_elected.c | 1537 | query_position_name(club_name, position);
club_elected.c | 1565 | normalise_name(club_name);
club_elected.c | 1567 | query_position_name(club_name, position);
club_elected.c | 1588 | normalise_name(club_name);
club_elected.c | 1591 | query_position_name(club_name, position);
club_elected.c | 1594 | keys(_elections[name]->people[position]);
club_elected.c | 1596 | return ({ });
club_elected.c | 1598 | keys(_elections[name]->nominated[position]);
club_elected.c | 1602 | return ({ });
club_elected.c | 1620 | normalise_name(club_name);
club_elected.c | 1623 | query_position_name(club_name, position);
club_elected.c | 1630 | return ({ });
club_elected.c | 1671 | query_nominators_for(club_name, position, person);
club_elected.c | 1672 | if (sizeof(nom) >
club_elected.c | 1692 | normalise_name(club_name);
club_elected.c | 1711 | normalise_name(club_name);
club_elected.c | 1725 | query_elected_info(club_name);
club_elected.c | 1741 | query_elected_info(club_name);
club_elected.c | 1759 | query_elected_info(club_name);
club_elected.c | 1769 | time();
club_elected.c | 1771 | set_club_changed(club_name);
club_elected.c | 1772 | send_broadcast_message(club_name, "A new announcement has been added.");
club_elected.c | 1783 | sizeof(archives);
club_elected.c | 1786 | new(class club_archive);
club_elected.c | 1787 | time();
club_elected.c | 1808 | query_elected_info(club_name);
club_elected.c | 1810 | new(class club_archive);
club_elected.c | 1813 | time();
club_elected.c | 1815 | if (sizeof(data->archives) >
club_elected.c | 1819 | convert_archives(data->archives);
club_elected.c | 1821 | set_club_changed(club_name);
club_elected.c | 1835 | query_elected_info(club_name);
club_elected.c | 1839 | convert_archives(data->archives);
club_elected.c | 1840 | set_club_changed(club_name);
club_elected.c | 1844 | return ({ });
club_elected.c | 1865 | query_club_board_name(club_name);
club_elected.c | 1875 | normalise_name(club_name);
club_elected.c | 1887 | query_club_board_name(club_name);
club_elected.c | 1901 | set_timeout(10);
club_elected.c | 1902 | set_maximum(60);
club_elected.c | 1903 | set_minimum(10);
club_elected.c | 1905 | save_main();
club_elected.c | 1920 | query_club_board_name(club_name);
club_elected.c | 1921 | delete_board(name);
club_elected.c | 1923 | save_main();
club_elected.c | 1947 | is_member_of(club, name);
club_elected.c | 1949 | is_member_of(club, name);
club_elected.c | 1951 | holds_any_position_of(club, name);
club_elected.c | 1979 | query_committee(club_name) - ({ CLUB_UNKNOWN_MEMBER });
club_elected.c | 1982 | query_founder(club_name) });
club_elected.c | 2012 | normalise_name(name);
club_elected.c | 2013 | query_elected_info(name);
club_elected.c | 2017 | set_club_changed(name);
club_elected.c | 2025 | set_position_holder(name, position_name, CLUB_UNKNOWN_MEMBER);
club_elected.c | 2032 | start_election(name);
club_elected.c | 2042 | save_main();
club_elected.c | 2048 | complete_election(name);
club_elected.c | 2059 | is_creator_club(name);
club_elected.c | 2066 | map_delete(gruff, person);
club_elected.c | 2078 | map_delete(gruff, person);
club_elected.c | 2090 | new(class election_data);
club_elected.c | 2098 | save_main();
craft_skills.c | 12 | add_craft_skill(string name);
craft_skills.c | 17 | add_craft_skill("crafts.smithing.gold");
craft_skills.c | 18 | add_craft_skill("crafts.smithing.silver");
craft_skills.c | 19 | add_craft_skill("crafts.smithing.black.tool");
craft_skills.c | 20 | add_craft_skill("crafts.smithing.black.weapon");
craft_skills.c | 21 | add_craft_skill("crafts.smithing.black.armour");
craft_skills.c | 22 | add_craft_skill("crafts.smithing.gem.cutting");
craft_skills.c | 23 | add_craft_skill("crafts.smithing.gem.polishing");
craft_skills.c | 24 | add_craft_skill("crafts.smithing.gem.setting");
craft_skills.c | 25 | add_craft_skill("crafts.mining.gem");
craft_skills.c | 26 | add_craft_skill("crafts.mining.ore.panning");
craft_skills.c | 27 | add_craft_skill("crafts.mining.mineral");
craft_skills.c | 28 | add_craft_skill("crafts.hunting.tracking");
craft_skills.c | 29 | add_craft_skill("crafts.hunting.fishing");
craft_skills.c | 30 | add_craft_skill("crafts.hunting.trapping");
craft_skills.c | 31 | add_craft_skill("crafts.carpentry.furniture");
craft_skills.c | 32 | add_craft_skill("crafts.carpentry.coopering");
craft_skills.c | 33 | add_craft_skill("crafts.carpentry.turning");
craft_skills.c | 34 | add_craft_skill("crafts.carpentry.whittling");
craft_skills.c | 35 | add_craft_skill("crafts.pottery.forming.throwing");
craft_skills.c | 36 | add_craft_skill("crafts.pottery.forming.shaping");
craft_skills.c | 37 | add_craft_skill("crafts.pottery.glazing");
craft_skills.c | 38 | add_craft_skill("crafts.pottery.staining");
craft_skills.c | 39 | add_craft_skill("crafts.pottery.firing");
craft_skills.c | 40 | add_craft_skill("crafts.materials.leatherwork");
craft_skills.c | 41 | add_craft_skill("crafts.materials.weaving");
craft_skills.c | 42 | add_craft_skill("crafts.materials.spinning");
craft_skills.c | 43 | add_craft_skill("crafts.materials.needlework");
craft_skills.c | 44 | add_craft_skill("crafts.materials.dyeing");
craft_skills.c | 45 | add_craft_skill("crafts.husbandry.plant.edible");
craft_skills.c | 46 | add_craft_skill("crafts.husbandry.plant.herbal");
craft_skills.c | 47 | add_craft_skill("crafts.husbandry.plant.milling");
craft_skills.c | 48 | add_craft_skill("crafts.husbandry.plant.tree");
craft_skills.c | 49 | add_craft_skill("crafts.husbandry.animal.grooming");
craft_skills.c | 50 | add_craft_skill("crafts.husbandry.animal.breeding");
craft_skills.c | 51 | add_craft_skill("crafts.culinary.cooking");
craft_skills.c | 52 | add_craft_skill("crafts.culinary.baking");
craft_skills.c | 53 | add_craft_skill("crafts.culinary.butchering");
craft_skills.c | 54 | add_craft_skill("crafts.culinary.preserving");
craft_skills.c | 55 | add_craft_skill("crafts.culinary.brewing");
craft_skills.c | 56 | add_craft_skill("crafts.culinary.distilling");
craft_skills.c | 57 | add_craft_skill("crafts.arts.design");
craft_skills.c | 58 | add_craft_skill("crafts.arts.calligraphy");
craft_skills.c | 59 | add_craft_skill("crafts.arts.drawing");
craft_skills.c | 60 | add_craft_skill("crafts.arts.painting");
craft_skills.c | 61 | add_craft_skill("crafts.arts.printing");
craft_skills.c | 62 | add_craft_skill("crafts.arts.sculpture");
craft_skills.c | 63 | add_craft_skill("crafts.points");
craft_skills.c | 70 | member_array(bits[0], arr);
craft_skills.c | 72 | sizeof(arr);
craft_skills.c | 75 | if (sizeof(bits) >
craft_skills.c | 85 | explode(name, ".");
craft_skills.c | 86 | add_craft_skill_int(bits, _craft_skill_tree);
citizens.c | 13 | is_citizen_of(string area, string citizen);
citizens.c | 14 | save_me();
citizens.c | 29 | allocate(num_magistrates);
citizens.c | 30 | save_me();
citizens.c | 38 | keys(_citizens);
citizens.c | 56 | member_array(citizen, _magistrates[area]);
citizens.c | 61 | save_me();
citizens.c | 81 | member_array(0, _magistrates[area]);
citizens.c | 86 | save_me();
citizens.c | 87 | add_title_to_player(magistrate, "magistrate");
citizens.c | 105 | sizeof(_magistrates[area]);
citizens.c | 109 | sizeof(_magistrates[area]);
citizens.c | 113 | allocate(num - sizeof(magistrates));
citizens.c | 116 | save_me();
citizens.c | 118 | add_title_to_player(magistrate, "magistrate");
citizens.c | 132 | sizeof(_magistrates[area]);
citizens.c | 142 | return ({ });
citizens.c | 173 | save_me();
citizens.c | 269 | sizeof(_citizens[area]);
club_basic.c | 61 | save_club(string name);
club_basic.c | 62 | load_main();
club_basic.c | 63 | save_main();
club_basic.c | 64 | is_club(string club_name);
club_basic.c | 65 | remove_recruiter(string name, string recruiter);
club_basic.c | 66 | is_recruiter_of(string name, string recruiter);
club_basic.c | 67 | query_club_type(string name);
club_basic.c | 68 | check_extra_information(string club_name, string member, int login);
club_basic.c | 69 | is_family(string name);
club_basic.c | 70 | disband_club(string name);
club_basic.c | 71 | set_club_changed(string name);
club_basic.c | 78 | seteuid(master()->creator_file(file_name()));
club_basic.c | 85 | load_main();
club_basic.c | 97 | unguarded( (: restore_object(SAVE_FILE_NAME, 1) :) );
club_basic.c | 104 | unguarded( (: save_object(SAVE_FILE_NAME, 1) :) );
club_basic.c | 114 | replace_string(lower_case(name), " ", "_");
club_basic.c | 123 | if (sizeof(_cache_order) >
club_basic.c | 126 | save_club(_cache_order[i]);
club_basic.c | 128 | map_delete(_cache, _cache_order[i]);
club_basic.c | 141 | normalise_name(name);
club_basic.c | 149 | if (unguarded( (: file_size(SAVE_FILE_DIR + $(name)) :)) >
club_basic.c | 157 | new(class club_info);
club_basic.c | 170 | set_club_changed(name);
club_basic.c | 172 | fixup_cache();
club_basic.c | 184 | normalise_name(name);
club_basic.c | 203 | save_club(name);
club_basic.c | 212 | normalise_name(name);
club_basic.c | 215 | call_out((: save_cache :), 0);
club_basic.c | 226 | normalise_name(name);
club_basic.c | 229 | set_club_changed(name);
club_basic.c | 240 | query_club_info(name);
club_basic.c | 242 | set_club_changed(name);
club_basic.c | 262 | new(class club_info);
club_basic.c | 272 | time();
club_basic.c | 274 | time();
club_basic.c | 278 | add_club(name, info);
club_basic.c | 279 | create_extra_data(name);
club_basic.c | 280 | set_club_changed(name);
club_basic.c | 281 | add_club(name, info);
club_basic.c | 282 | save_main();
club_basic.c | 301 | query_club_type(name);
club_basic.c | 302 | query_club_info(name);
club_basic.c | 305 | set_club_changed(name);
club_basic.c | 306 | create_extra_data(name);
club_basic.c | 324 | query_club_info(name);
club_basic.c | 326 | disband_club(name);
club_basic.c | 344 | query_club_info(name);
club_basic.c | 346 | set_club_changed(name);
club_basic.c | 363 | query_club_info(name);
club_basic.c | 365 | set_club_changed(name);
club_basic.c | 381 | query_club_info(name);
club_basic.c | 395 | query_club_info(name);
club_basic.c | 412 | normalise_name(name);
club_basic.c | 414 | query_club_info(name);
club_basic.c | 425 | map_delete(_club_names, name);
club_basic.c | 426 | map_delete(_cache, name);
club_basic.c | 427 | unguarded( (: rm(SAVE_FILE_DIR + $(name)) :) );
club_basic.c | 428 | save_main();
club_basic.c | 429 | send_observer_event("club_event_disband_club", name);
club_basic.c | 443 | keys(_club_names);
club_basic.c | 466 | query_club_info(name);
club_basic.c | 467 | time();
club_basic.c | 468 | set_club_changed(name);
club_basic.c | 483 | query_club_info(name);
club_basic.c | 486 | return ({ });
club_basic.c | 499 | query_club_info(name);
club_basic.c | 516 | query_club_info(name);
club_basic.c | 519 | return ({ });
club_basic.c | 536 | query_club_info(name);
club_basic.c | 540 | set_club_changed(name);
club_basic.c | 541 | touch_club(name);
club_basic.c | 567 | query_club_info(name);
club_basic.c | 570 | set_club_changed(name);
club_basic.c | 571 | touch_club(name);
club_basic.c | 574 | capitalize(member) + " joins the club.");
club_basic.c | 595 | query_club_info(name);
club_basic.c | 598 | remove_recruiter(name, member);
club_basic.c | 601 | set_club_changed(name);
club_basic.c | 602 | check_extra_information(name, member, 0);
club_basic.c | 605 | capitalize(member) + " leaves the club.");
club_basic.c | 607 | send_observer_event("club_event_remove_member", name, member);
club_basic.c | 627 | query_club_info(name);
club_basic.c | 630 | set_club_changed(name);
club_basic.c | 652 | query_club_info(club_name);
club_basic.c | 673 | query_club_info(club_name);
club_basic.c | 691 | query_club_info(club_name);
club_basic.c | 693 | set_club_changed(club_name);
club_basic.c | 709 | query_club_info(club_name);
club_basic.c | 737 | normalise_name(name);
club_basic.c | 751 | normalise_name(name);
club_basic.c | 822 | normalise_name(name);
club_basic.c | 842 | query_club_info(name);
club_basic.c | 845 | touch_club(name);
club_basic.c | 846 | set_club_changed(name);
club_basic.c | 878 | query_club_info(name);
club_basic.c | 881 | touch_club(name);
club_basic.c | 882 | set_club_changed(name);
club_basic.c | 912 | query_club_info(name);
club_basic.c | 915 | touch_club(name);
club_basic.c | 916 | set_club_changed(name);
club_basic.c | 939 | query_club_info(name);
club_basic.c | 954 | query_club_info(name);
club_basic.c | 956 | keys(data->accounts);
club_basic.c | 959 | return ({ });
club_basic.c | 1007 | file_size(obs) >
club_basic.c | 1009 | save_main();
club_basic.c | 1023 | save_main();
club_basic.c | 1048 | if (file_size(bing) >
club_basic.c | 1055 | remove_observer(bing);
case_control.c | 17 | save_me();
case_control.c | 76 | sprintf("cases/%02d/%d_case", id % 20, id);
case_control.c | 88 | while (sizeof(stat(query_case_file_name(next))));
case_control.c | 96 | query_case_file_name(stuff->id);
case_control.c | 97 | save_variable(stuff);
case_control.c | 98 | unguarded((: write_file($(fname), $(tmp), 1) :));
case_control.c | 107 | sprintf("notes/%02d/%d_note", id % 20, id);
case_control.c | 119 | while (sizeof(stat(query_note_file_name(next))));
case_control.c | 127 | query_note_file_name(stuff->id);
case_control.c | 128 | save_variable(stuff);
case_control.c | 129 | unguarded((: write_file($(fname), $(tmp) ) :));
case_control.c | 135 | new(class nomic_case);
case_control.c | 136 | query_next_case_id();
case_control.c | 142 | time();
case_control.c | 143 | save_case(new_case);
case_control.c | 150 | new(class nomic_case_note);
case_control.c | 151 | query_next_note_id();
case_control.c | 154 | time();
case_control.c | 155 | save_note(new_note);
case_control.c | 163 | new(class nomic_case_event);
case_control.c | 167 | time();
case_control.c | 211 | query_case_file_name(id);
case_control.c | 212 | unguarded((: read_file($(fname)) :));
case_control.c | 214 | restore_variable(tmp);
case_control.c | 238 | query_case_file_name(id);
case_control.c | 239 | unguarded((: read_file($(fname)) :));
case_control.c | 241 | restore_variable(tmp);
case_control.c | 265 | query_case_file_name(id);
case_control.c | 266 | unguarded((: read_file($(fname)) :));
case_control.c | 268 | restore_variable(tmp);
case_control.c | 282 | query_note_file_name(note_num);
case_control.c | 283 | unguarded((: read_file($(fname)) :));
case_control.c | 285 | restore_variable(tmp);
case_control.c | 304 | create_case(opener, short, people);
case_control.c | 307 | save_me();
case_control.c | 310 | query_multiple_short(people));
case_control.c | 329 | query_open_case(area, id);
case_control.c | 334 | create_event(NOMIC_CASE_EVENT_CLOSE, closer, result, data);
case_control.c | 336 | save_case(the_case);
case_control.c | 339 | save_me();
case_control.c | 341 | query_multiple_short(the_case->people));
case_control.c | 358 | query_recently_closed_case(area, id);
case_control.c | 363 | create_event(NOMIC_CASE_EVENT_APPEAL, appealer, reason, 0);
case_control.c | 365 | save_case(the_case);
case_control.c | 368 | save_me();
case_control.c | 370 | query_multiple_short(the_case->people));
case_control.c | 386 | query_open_case(area, id);
case_control.c | 391 | create_note(person, text);
case_control.c | 393 | save_case(the_case);
case_control.c | 394 | save_me();
case_control.c | 412 | query_open_case(area, id);
case_control.c | 418 | create_event(NOMIC_CASE_EVENT_ADD_PERSON, adder, text, 0);
case_control.c | 421 | save_case(the_case);
case_control.c | 439 | query_open_case(area, id);
case_control.c | 445 | create_event(NOMIC_CASE_EVENT_REMOVE_PERSON, remover, text, 0);
case_control.c | 448 | save_case(the_case);
case_control.c | 466 | query_recently_closed_case(area, id);
distance_handler.c | 11 | query_co_ord(string room);
distance_handler.c | 27 | log_file("/log/PORTAL", "Unable to get co-ords for %O %O, doing filename based check.\n", one, two);
distance_handler.c | 128 | difference(co_ord_one[0], co_ord_two[0]);
distance_handler.c | 129 | difference(co_ord_one[1], co_ord_two[1]);
distance_handler.c | 130 | difference(co_ord_one[2], co_ord_two[2]);
distance_handler.c | 131 | sqrt(pow(x, 2) + pow(y, 2));
distance_handler.c | 132 | sqrt(pow(distanceplane, 2) + pow(z, 2));
distance_handler.c | 133 | to_int(distance);
distance_handler.c | 148 | file_name(one);
distance_handler.c | 151 | file_name(two);
distance_handler.c | 155 | query_co_ord();
distance_handler.c | 157 | query_co_ord(one);
distance_handler.c | 160 | query_co_ord();
distance_handler.c | 162 | query_co_ord(two);
distance_handler.c | 165 | filename_check(one, two);
distance_handler.c | 168 | query_distance_from_coords(co_ord_one, co_ord_two);
club_family.c | 26 | query_gender_relationships(string relationship);
club_family.c | 58 | create();
club_family.c | 209 | query_club_info(name);
club_family.c | 211 | new(class family_info);
club_family.c | 216 | create_extra_data(name);
club_family.c | 218 | set_club_changed(name);
club_family.c | 234 | query_club_cost_per_period(club_name);
club_family.c | 249 | query_club_info(name);
club_family.c | 268 | new(class relationship_type_data);
club_family.c | 272 | new(class relationship_type_data);
club_family.c | 357 | keys(_valid_relationships);
club_family.c | 409 | keys(_gender_relationship);
club_family.c | 427 | query_ungendered_relationship(relationship);
club_family.c | 446 | query_family_info(name);
club_family.c | 450 | new(class relationship_data);
club_family.c | 454 | set_club_changed(name);
club_family.c | 464 | query_family_info(name);
club_family.c | 465 | sizeof(womble->relationships[person]);
club_family.c | 470 | set_club_changed(name);
club_family.c | 503 | query_opposite_relationship(relationship));
club_family.c | 504 | save_club(name);
club_family.c | 522 | query_family_info(name);
club_family.c | 527 | return ({ });
club_family.c | 550 | query_family_info(curr_family);
club_family.c | 551 | map_delete(womble->relationships, person);
club_family.c | 552 | set_club_changed(curr_family);
club_family.c | 553 | remove_member(curr_family, person);
club_family.c | 556 | add_member(dest_family, person);
club_family.c | 557 | query_family_info(dest_family);
club_family.c | 559 | set_club_changed(dest_family);
club_family.c | 632 | query_opposite_relationship(relationship));
club_family.c | 653 | query_family_info(name);
club_family.c | 662 | test_family(member);
club_family.c | 666 | find_player(member)->set_family_name(family);
club_family.c | 672 | remove_member(name, member);
club_family.c | 678 | test_family(rel->related_to);
club_family.c | 696 | map_delete(fam_data->relationships, member);
club_family.c | 697 | set_club_changed(name);
club_inherit.c | 32 | check_extra_information(string name, string person, int startup);
club_inherit.c | 33 | check_clubs(int startup);
club_inherit.c | 52 | remove_call_out(_callout_id);
club_inherit.c | 53 | call_out("check_clubs", time, startup);
club_inherit.c | 68 | query_members(club);
club_inherit.c | 73 | query_founder(club) });
club_inherit.c | 77 | query_members(club);
club_inherit.c | 82 | query_committee(club) - ({ CLUB_UNKNOWN_MEMBER });
club_inherit.c | 84 | query_members(club) });
club_inherit.c | 90 | filter(to, (: PLAYER_HANDLER->test_user($1) :));
club_inherit.c | 121 | query_members(club);
club_inherit.c | 126 | query_founder(club) });
club_inherit.c | 131 | query_committee(club) - ({ CLUB_UNKNOWN_MEMBER });
club_inherit.c | 133 | query_members(club) });
club_inherit.c | 165 | check_elected_information(name, member, startup);
club_inherit.c | 167 | check_family_information(name, member, startup);
club_inherit.c | 190 | sizeof(members);
club_inherit.c | 195 | remove_member(club_name, member);
club_inherit.c | 202 | query_quest_points(member);
club_inherit.c | 203 | test_age(member) / (60 * 60);
club_inherit.c | 204 | sizeof(CLUB_HANDLER->query_relationships(club_name, member));
club_inherit.c | 206 | test_start_time(member) / (60 * 60);
club_inherit.c | 207 | test_guild(member);
club_inherit.c | 213 | if (file_size(str + ".c") >
club_inherit.c | 214 | query_real_guild_object();
club_inherit.c | 226 | test_gender(member);
club_inherit.c | 234 | check_family_information(club_name, member, 0);
club_inherit.c | 235 | query_relationships(club_name, member);
club_inherit.c | 261 | disband_club(club_name);
club_inherit.c | 303 | new(class top_ten_tables);
club_inherit.c | 305 | member_array(_current_test_club, query_clubs());
club_inherit.c | 308 | call_out("check_club_members", 60, _current_test_club, query_members(_current_test_club), top_info);
club_inherit.c | 313 | save_main();
club_inherit.c | 315 | call_out("check_club_members", 60, club_name, members, top_info);
club_inherit.c | 325 | query_club_info(club_name);
club_inherit.c | 328 | disband_club(club_name);
club_inherit.c | 333 | disband_club(club_name);
club_inherit.c | 338 | new(class top_ten_tables);
club_inherit.c | 351 | send_disband_mail(club_name);
club_inherit.c | 352 | disband_club(club_name);
club_inherit.c | 361 | query_club_info(club_name);
club_inherit.c | 363 | query_time_fees_due(club_name);
club_inherit.c | 364 | set_club_changed(club_name);
club_inherit.c | 367 | reset_eval_cost();
club_inherit.c | 368 | send_low_balance_mail(club_name);
club_inherit.c | 377 | call_out( (: check_extra_information :),  1,  club_name, 0,  startup);
club_inherit.c | 392 | tell_creator( "taffyd", "Checking club %s (%d)\n", club_name, pos );
club_inherit.c | 394 | check_specific_club(club_name, startup);
club_inherit.c | 397 | call_out( (: check_specific_clubs :), 10, startup, ++pos );
club_inherit.c | 408 | remove_call_out(_callout_id);
club_inherit.c | 409 | setup_call_check_clubs(24 * 60 * 60, 0);
club_inherit.c | 412 | query_clubs();
club_inherit.c | 425 | remove_call_out(_test_callout_id);
club_inherit.c | 428 | if (sizeof(query_clubs()) >
club_inherit.c | 432 | save_main();
club_inherit.c | 435 | new(class top_ten_tables);
nomic_rules.c | 10 | save_me();
nomic_rules.c | 11 | query_can_change_rule(string area, class nomic_rule rule);
nomic_rules.c | 12 | find_nomic_rule(string area, string creator, string text);
nomic_rules.c | 41 | new(class nomic_rule);
nomic_rules.c | 47 | time();
nomic_rules.c | 51 | save_me();
nomic_rules.c | 84 | save_me();
nomic_rules.c | 108 | sizeof(_rules[area]->rules);
nomic_rules.c | 116 | save_me();
nomic_rules.c | 137 | sizeof(_rules[area]->rules);
nomic_rules.c | 145 | save_me();
nomic_rules.c | 170 | save_me();
nomic_rules.c | 190 | save_me();
nomic_rules.c | 211 | copy(nomic_rule);
nomic_rules.c | 224 | return ({ });
nomic_rules.c | 227 | copy(_rules[area]->rules);
nomic_rules.c | 266 | new(class nomic_area);
player_council.c | 17 | save_me();
player_council.c | 18 | find_motion(string area, int rule_no, int type);
player_council.c | 19 | update_immutables(string area);
player_council.c | 22 | motion_as_string(int indent, string area, class nomic_motion motion, int brief);
player_council.c | 27 | create();
player_council.c | 28 | create();
player_council.c | 29 | create();
player_council.c | 35 | time() - time() % (24 * 60 * 60) + (24 * 60 * 60) + (2 * 60)) - time());
player_council.c | 43 | create_area(area);
player_council.c | 44 | create_area(area);
player_council.c | 45 | create_area(area);
player_council.c | 49 | update_immutables(area);
player_council.c | 68 | remove_nomic_rule(area, rule->id);
player_council.c | 76 | if (file_size(NOMIC_RULE_DEFAULT_DIR + "/" + file) >
player_council.c | 77 | read_file(NOMIC_RULE_DEFAULT_DIR + "/" + file);
player_council.c | 79 | implode(explode(tmp, "\n")[1..], "\n");
player_council.c | 92 | printf("Ignoring file " + file + "\n");
player_council.c | 96 | add_nomic_rule(area, int_type, area + " administrator", tmp);
player_council.c | 100 | save_me();
player_council.c | 132 | new(class nomic_motion);
player_council.c | 134 | new(class nomic_rule);
player_council.c | 139 | time();
player_council.c | 143 | time();
player_council.c | 144 | time();
player_council.c | 148 | query_next_motion_id(area);
player_council.c | 150 | save_me();
player_council.c | 151 | send_council_inform(area, 1, creator + " added a new rule motion");
player_council.c | 153 | convert_message(motion_as_string(0, area, fluff, 0)));
player_council.c | 170 | query_nomic_rule(area, rule_no);
player_council.c | 182 | find_motion(area, rule_no, NOMIC_MOTION_TYPE_RULE_MOVE);
player_council.c | 187 | new(class nomic_motion);
player_council.c | 194 | time();
player_council.c | 195 | time();
player_council.c | 199 | query_next_motion_id(area);
player_council.c | 201 | save_me();
player_council.c | 202 | send_council_inform(area, 1, creator + " added a move rule motion");
player_council.c | 204 | convert_message(motion_as_string(0, area, fluff, 0)));
player_council.c | 222 | query_nomic_rule(area, rule_no);
player_council.c | 230 | find_motion(area, rule_no, NOMIC_MOTION_TYPE_RULE_AMEND);
player_council.c | 235 | new(class nomic_motion);
player_council.c | 237 | new (class nomic_amendment);
player_council.c | 240 | time();
player_council.c | 246 | time();
player_council.c | 247 | time();
player_council.c | 251 | query_next_motion_id(area);
player_council.c | 253 | save_me();
player_council.c | 254 | send_council_inform(area, 1, creator + " added an add rule motion");
player_council.c | 256 | convert_message(motion_as_string(0, area, fluff, 0)));
player_council.c | 272 | query_nomic_rule(area, rule_no);
player_council.c | 280 | find_motion(area, rule_no, NOMIC_MOTION_TYPE_RULE_REMOVE);
player_council.c | 285 | new(class nomic_motion);
player_council.c | 291 | time();
player_council.c | 292 | time();
player_council.c | 296 | query_next_motion_id(area);
player_council.c | 298 | save_me();
player_council.c | 299 | send_council_inform(area, 1, creator + " added a remove rule motion");
player_council.c | 301 | convert_message(motion_as_string(0, area, fluff, 0)));
player_council.c | 334 | return ({ });
player_council.c | 337 | copy(_motions[area]);
player_council.c | 372 | query_motion(area, id);
player_council.c | 382 | new(class nomic_comment);
player_council.c | 385 | time();
player_council.c | 387 | save_me();
player_council.c | 405 | query_motion(area, id);
player_council.c | 416 | new(class nomic_amendment);
player_council.c | 419 | time();
player_council.c | 432 | save_me();
player_council.c | 447 | query_motion(area, id);
player_council.c | 475 | save_me();
player_council.c | 490 | query_motion(area, id);
player_council.c | 507 | query_motion(area, id);
player_council.c | 512 | return ({ bing->yes_votes, bing->no_votes, bing->abstain_votes });
player_council.c | 518 | sizeof(_motions[area]);
player_council.c | 537 | filter(users(), (: is_magistrate_of($2, $1->query_name()) :), area);
player_council.c | 539 | filter(users(), (: is_citizen_of($2, $1->query_name()) :), area);
player_council.c | 541 | call_other(obs, "event_inform", this_object(), mess, "council");
player_council.c | 570 | query_motion(area, id);
player_council.c | 607 | convert_message(motion_as_string(0, area, bing, 0)));
player_council.c | 624 | convert_message(motion_as_string(0, area, bing, 0)));
player_council.c | 629 | add_nomic_rule_class(area, bing->rule, bing->motion_type);
player_council.c | 632 | change_nomic_rule(area, bing->rule);
player_council.c | 635 | move_nomic_rule(area, bing->rule, bing->new_rule_type);
player_council.c | 643 | remove_nomic_rule(area, bing->rule->id);
player_council.c | 646 | remove_motion(area, bing);
player_council.c | 649 | convert_message(rule_as_string(0, bing->rule)));
player_council.c | 655 | time();
player_council.c | 667 | rule_as_string(0, bing->rule));
player_council.c | 672 | remove_motion(area, bing);
player_council.c | 675 | save_me();
player_council.c | 676 | send_council_inform(area, only_magistrates, mess);
player_council.c | 691 | complete_motion(area, motion->identifier);
player_council.c | 696 | remove_call_out(_completion_id);
player_council.c | 698 | time() - time() % (24 * 60 * 60) + (24 * 60 * 60)) - time());
player_council.c | 703 | update_recently_closed_cases();
player_council.c | 747 | rule_as_string(5 + indent, motion->rule);
error_handler.c | 19 | finish_update(int type, mixed data, function finished, string query);
error_handler.c | 26 | unguarded( (: restore_object(SAVE_FILE) :) );
error_handler.c | 30 | time() - ERROR_REPLY_TIMEOUT), (: 1 :));
error_handler.c | 44 | save_object(SAVE_FILE);
error_handler.c | 112 | implode(restrict, " and ");
error_handler.c | 160 | new(class error_forward);
error_handler.c | 175 | new(class error_comment);
error_handler.c | 190 | new(class error_summary);
error_handler.c | 209 | new(class error_details);
error_handler.c | 210 | create_error_summary(map);
error_handler.c | 226 | new(class error_complete);
error_handler.c | 242 | new(class error_replies);
error_handler.c | 265 | evaluate(finished, type, data, query);
error_handler.c | 269 | create_error_summary(map) });
error_handler.c | 271 | evaluate(finished, type, errors, query);
error_handler.c | 289 | evaluate(finished, DB_SUCCESS, errors, query);
error_handler.c | 294 | create_error_forward(map) });
error_handler.c | 298 | evaluate(finished, type, errors, query);
error_handler.c | 316 | evaluate(finished, DB_SUCCESS, errors, query);
error_handler.c | 321 | create_error_replies(map) });
error_handler.c | 329 | finish_forwards($1, $2, $(finished), $(errors), $(query)) :));
error_handler.c | 330 | evaluate(finished, type, errors, query);
error_handler.c | 347 | evaluate(finished, DB_SUCCESS, errors, query);
error_handler.c | 352 | create_error_comment(map) });
error_handler.c | 360 | finish_details_error_replies($1, $2, $(finished), $(errors), $(ids), $(query)) :));
error_handler.c | 361 | evaluate(finished, type, errors, query);
error_handler.c | 377 | evaluate(finished, type, data, query);
error_handler.c | 382 | create_error_complete(create_error_details(map)) });
error_handler.c | 390 | finish_comments($1, $2, $(finished), $(errors), $(str), $(query)) :));
error_handler.c | 391 | evaluate(finished, type, errors, query);
error_handler.c | 408 | evaluate(finished, type, data);
error_handler.c | 411 | create_error_complete(create_error_details(map));
error_handler.c | 422 | build_sql_update(error->details->summary->id, "directory", newdir);
error_handler.c | 424 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 427 | evaluate(finished, type, data);
error_handler.c | 441 | evaluate(finished, type, data);
error_handler.c | 444 | create_error_complete(create_error_details(map));
error_handler.c | 461 | build_sql_update(error->details->summary->id, "status", status);
error_handler.c | 467 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 478 | evaluate(finished, type, data, query);
error_handler.c | 489 | evaluate(finished, type, data);
error_handler.c | 493 | create_error_replies(map) });
error_handler.c | 495 | evaluate(finished, type, replies);
error_handler.c | 516 | finish_summary($1, $2, $(finished), $(str)) :));
error_handler.c | 530 | new(class error_query);
error_handler.c | 532 | build_sql_query(ERROR_DETAILS_FIELDS, query);
error_handler.c | 538 | finish_details($1, $2, $(finished), $(str)) :));
error_handler.c | 552 | new(class error_query);
error_handler.c | 555 | do_query_bug_summary(query, finished);
error_handler.c | 568 | new(class error_query);
error_handler.c | 571 | do_query_bug_summary(query, finished);
error_handler.c | 584 | new(class error_query);
error_handler.c | 587 | do_query_bug_summary(query, finished);
error_handler.c | 600 | build_sql_update(id, "type", type);
error_handler.c | 605 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 619 | build_sql_update(id, "category", category);
error_handler.c | 624 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 637 | build_sql_update(id, "assignedto", assigned_to);
error_handler.c | 642 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 663 | new(class error_query, id : id);
error_handler.c | 664 | build_sql_query(ERROR_DETAILS_FIELDS, query);
error_handler.c | 703 | new(class error_query, id : id);
error_handler.c | 704 | build_sql_query(ERROR_DETAILS_FIELDS, query);
error_handler.c | 711 | finish_forward_query($1, $2, $(finished), $(user), $(dir)) :));
error_handler.c | 729 | finish_update($1, $2, $(finished), $(str)) :));
error_handler.c | 751 | finish_error_replies($1, $2, $(finished), $(str)) :));
error_handler.c | 768 | finish_update($1, $2, $(finished), $(str)) :));
club_personal.c | 25 | query_club_info(name);
club_personal.c | 27 | new(class personal_info);
club_personal.c | 29 | set_club_changed(name);
club_personal.c | 31 | create_extra_data(name);
club_personal.c | 44 | query_club_info(name);
citizen_elections.c | 35 | finish_election_phase(string area);
citizen_elections.c | 36 | post_citizen_message(string area, string subject, string message);
citizen_elections.c | 44 | create();
citizen_elections.c | 45 | call_out("do_next_event", 10);
citizen_elections.c | 50 | new(class election_data);
citizen_elections.c | 52 | time();
citizen_elections.c | 56 | create_area(area);
citizen_elections.c | 159 | save_me();
citizen_elections.c | 174 | return ({ });
citizen_elections.c | 179 | copy(_elections[area]->nominations[person]);
citizen_elections.c | 183 | return ({ });
citizen_elections.c | 193 | return ({ });
citizen_elections.c | 197 | keys(_elections[area]->nominations);
citizen_elections.c | 200 | return ({ });
citizen_elections.c | 213 | query_nominated_by(area, person);
citizen_elections.c | 214 | if (sizeof(nominations) >
citizen_elections.c | 289 | save_me();
citizen_elections.c | 303 | return ({ });
citizen_elections.c | 307 | keys(_elections[area]->votes);
citizen_elections.c | 310 | return ({ });
citizen_elections.c | 327 | time();
citizen_elections.c | 329 | save_me();
citizen_elections.c | 363 | time();
citizen_elections.c | 365 | save_me();
citizen_elections.c | 375 | finish_election_phase(area);
citizen_elections.c | 416 | query_number_of_magistrates(area);
citizen_elections.c | 449 | sizeof(_elections[area]->voted);
citizen_elections.c | 450 | query_number_of_citizens(area);
citizen_elections.c | 460 | time();
citizen_elections.c | 461 | time();
citizen_elections.c | 464 | post_citizen_message(area, "Election results", results);
citizen_elections.c | 466 | setup_magistrates(area, voted);
citizen_elections.c | 467 | save_me();
citizen_elections.c | 483 | start_election(area);
citizen_elections.c | 489 | finish_nomination_phase(area);
citizen_elections.c | 495 | finish_election_phase(area);
citizen_elections.c | 501 | start_election(area);
citizen_elections.c | 522 | call_out("do_next_event", time_to_next_event);
citizen_elections.c | 536 | save_me();
citizen_elections.c | 561 | save_me();
citizen_elections.c | 586 | query_citizen_board(area);
citizen_elections.c | 606 | query_magistrate_board(area);
citizen_elections.c | 626 | time();
citizen_elections.c | 630 | save_me();
club_discuss.c | 109 | create();
club_discuss.c | 171 | lower_case(position);
club_discuss.c | 187 | while (bing);
club_discuss.c | 199 | while (bing);
club_discuss.c | 303 | remove_discussion_item(club_name, frog);
club_discuss.c | 409 | remove_discussion_item(club_name, frog);
club_discuss.c | 536 | set_club_description(club_name, frog->information);
club_discuss.c | 604 | reset_club_secret(club_name);
club_discuss.c | 607 | set_club_secret(club_name);
club_discuss.c | 718 | lower_case(frog->name);
club_discuss.c | 728 | while (womble);
club_discuss.c | 762 | remove_member(club_name, frog->name);
club_discuss.c | 792 | remove_discussion_item(club_name, frog);
club_discuss.c | 818 | lower_case(frog->name);
club_discuss.c | 828 | while (womble);
club_discuss.c | 860 | catch(set_position_holder(club_name, pos, CLUB_UNKNOWN_MEMBER));
club_discuss.c | 862 | start_election(club_name);
club_discuss.c | 865 | set_position_holder(club_name, frog->name, CLUB_UNKNOWN_MEMBER);
club_discuss.c | 909 | remove_discussion_item(club_name, frog);
club_discuss.c | 922 | remove_discussion_item(club_name, frog);
club_discuss.c | 947 | while (womble);
club_discuss.c | 959 | while (womble);
club_discuss.c | 980 | query_position_name(club_name, frog->name);
club_discuss.c | 1012 | query_multiple_short(nom);
club_discuss.c | 1014 | sizeof(nom) >
club_discuss.c | 1048 | set_position_holder(club_name, frog->name, nominated[0]);
club_discuss.c | 1090 | query_multiple_short(nom);
club_discuss.c | 1092 | sizeof(nom) >
club_discuss.c | 1123 | map_delete(frog->choices, arg1);
club_discuss.c | 1131 | map_delete(frog->choices, arg1);
club_discuss.c | 1138 | map_delete(frog->choices, name);
club_discuss.c | 1160 | remove_discussion_item(club_name, frog);
club_discuss.c | 1184 | query_position_name(club_name, frog->name);
club_discuss.c | 1204 | map_delete(frog->choices, name);
club_discuss.c | 1244 | set_position_holder(club_name, frog->name, voted[0]);
club_discuss.c | 1279 | map_delete(frog->choices, arg1);
club_discuss.c | 1293 | remove_discussion_item(club_name, frog);
club_discuss.c | 1357 | while (womble);
club_discuss.c | 1438 | query_elected_info(club_name);
club_discuss.c | 1458 | query_elected_info(club_name);
club_discuss.c | 1460 | copy(frog->discussion);
club_discuss.c | 1476 | query_discussion_item(club_name, id);
club_discuss.c | 1500 | query_discussion_item(club_name, id);
club_discuss.c | 1559 | query_elected_info(club);
club_discuss.c | 1563 | new(class discussion_idea);
club_discuss.c | 1565 | sizeof(frog->discussion);
club_discuss.c | 1571 | time();
club_discuss.c | 1590 | set_club_changed(club);
club_discuss.c | 1613 | query_elected_info(club_name);
club_discuss.c | 1641 | query_discussion_item(club_name, id);
club_discuss.c | 1643 | keys(frog->choices);
club_discuss.c | 1645 | return ({ });
club_discuss.c | 1658 | query_discussion_item(club_name, id);
club_discuss.c | 1676 | query_discussion_item(club_name, id);
club_discuss.c | 1693 | query_discussion_item(club_name, id);
club_discuss.c | 1710 | query_discussion_item(club_name, id);
club_discuss.c | 1735 | query_discussion_item(club_name, id);
club_discuss.c | 1745 | return ([ ]);
club_discuss.c | 1747 | return ([ ]);
club_discuss.c | 1765 | query_discussion_nomination(club_name, id);
club_discuss.c | 1785 | query_discussion_item(club_name, id);
club_discuss.c | 1806 | query_discussion_item(club_name, id);
club_discuss.c | 1828 | query_discussion_item(club_name, id);
club_discuss.c | 1836 | query_committee(club_name);
club_discuss.c | 1863 | query_discussion_item(club_name, id);
club_discuss.c | 1871 | test_active($1) :)));
club_discuss.c | 1872 | return (num * CLUB_DISCUSS_QUORUM_COMMITTEE / 100);
club_discuss.c | 1877 | test_active($1, 1) :)));
club_discuss.c | 1878 | return (num * CLUB_DISCUSS_QUORUM_OPEN / 100);
club_discuss.c | 1894 | query_discussion_item(club_name, id);
club_discuss.c | 1896 | sizeof(bing->voted);
club_discuss.c | 1913 | query_discussion_item(club_name, id);
club_discuss.c | 1915 | query_discussion_item_quorum_number(club_name, id);
club_discuss.c | 1916 | if (sizeof(bing->voted) >
club_discuss.c | 1935 | query_discussion_item(club_name, id);
club_discuss.c | 1936 | lower_case(choice);
club_discuss.c | 1955 | query_discussion_item(club_name, id);
club_discuss.c | 1979 | query_discussion_item(club_name, id);
club_discuss.c | 2005 | query_discussion_item(club_name, id);
club_discuss.c | 2026 | query_discussion_item(club_name, id);
club_discuss.c | 2049 | query_discussion_item(club_name, id);
club_discuss.c | 2050 | lower_case(choice);
club_discuss.c | 2058 | set_club_changed(club_name);
club_discuss.c | 2078 | query_discussion_item(club_name, id);
club_discuss.c | 2092 | set_club_changed(club_name);
club_discuss.c | 2111 | query_discussion_item(club_name, id);
club_discuss.c | 2120 | set_club_changed(club_name);
club_discuss.c | 2138 | query_elected_info(club_name);
club_discuss.c | 2140 | sizeof(bing->discussion);
club_discuss.c | 2144 | set_club_changed(club_name);
club_discuss.c | 2165 | query_discussion_item(club_name, id);
club_discuss.c | 2166 | query_elected_info(club_name);
club_discuss.c | 2201 | sizeof(frog->voted) + " people voted.\n");
club_discuss.c | 2211 | remove_discussion_item(club_name, frog);
club_discuss.c | 2213 | set_club_changed(club_name);
club_discuss.c | 2259 | query_elected_info(club_name);
club_discuss.c | 2266 | set_club_changed(club_name);
club_discuss.c | 2367 | query_elected_info(name);
club_discuss.c | 2372 | remove_discussion_item(name, womble);
club_discuss.c | 2373 | set_club_changed(name);
club_discuss.c | 2389 | check_elected_information(name, member, startup);
club_discuss.c | 2391 | query_elected_info(name);
club_discuss.c | 2395 | complete_discussion_item(name, frog->id);
club_discuss.c | 2396 | set_club_changed(name);
club_discuss.c | 2403 | set_club_changed(name);
club_discuss.c | 2405 | remove_discussion_item(name, frog);
club_discuss.c | 2427 | set_club_changed(name);
sample_room_1.c | 4 | set_short( "small room" );
sample_room_1.c | 5 | set_light( 20 );
sample_room_1.c | 6 | set_room_size( 15 );
logroom.c | 19 | set_short( "limbo" );
logroom.c | 20 | set_light( 50 );
logroom.c | 27 | add_exit( "drum", "/d/am/am/mendeddrum", "path" );
logroom.c | 30 | unguarded((: restore_object, SAVE_FILE :));
logroom.c | 34 | unguarded((: save_object, SAVE_FILE :));
logroom.c | 42 | query_co_ord() });
logroom.c | 43 | save_this();
logroom.c | 44 | call_out( "check_quitted", 5, (string)player->query_name() );
logroom.c | 51 | m_delete( locations, word );
logroom.c | 52 | save_this();
logroom.c | 66 | move( location );
logroom.c | 67 | m_delete( locations, (string)player->query_name() );
logroom.c | 68 | save_this();
sample_passage.c | 4 | set_short( "dusty corridor" );
sample_passage.c | 5 | set_light( 20 );
sample_passage.c | 6 | set_room_size( 5 );
sample_room_3.c | 4 | set_short( "large room" );
sample_room_3.c | 5 | set_light( 20 );
sample_room_3.c | 6 | set_room_size( 35 );
dungeon_maker.c | 34 | set_name( "box" );
dungeon_maker.c | 35 | set_short( "green box" );
dungeon_maker.c | 36 | add_adjective( "green" );
dungeon_maker.c | 39 | reset_get();
dungeon_maker.c | 40 | allocate( 3 );
dungeon_maker.c | 47 | dest_me();
dungeon_maker.c | 48 | dest_me();
dungeon_maker.c | 52 | set_max_locations( mixed arg ) { max = to_int( arg );
dungeon_maker.c | 57 | allocate( sizeof( args ) );
dungeon_maker.c | 58 | sizeof( args );
dungeon_maker.c | 59 | to_int( args[ i ] );
dungeon_maker.c | 65 | allocate( sizeof( args ) );
dungeon_maker.c | 66 | sizeof( args );
dungeon_maker.c | 67 | to_int( args[ i ] );
dungeon_maker.c | 73 | allocate( sizeof( args ) );
dungeon_maker.c | 74 | sizeof( args );
dungeon_maker.c | 75 | to_int( args[ i ] );
dungeon_maker.c | 81 | allocate( sizeof( args ) );
dungeon_maker.c | 82 | sizeof( args );
dungeon_maker.c | 83 | to_int( args[ i ] );
dungeon_maker.c | 91 | sizeof( args );
dungeon_maker.c | 92 | to_int( args[ i ] );
dungeon_maker.c | 110 | do_generate(string);
dungeon_maker.c | 113 | init();
dungeon_maker.c | 114 | add_command( "generate", "<word'terrainname'>", (:do_generate($4[0]):));
dungeon_maker.c | 124 | query_room_size();
dungeon_maker.c | 127 | make_block( ( 2 * width ) / size + 2 ) );
dungeon_maker.c | 138 | notify_fail( "File "+ word +" does not exist.\n" );
dungeon_maker.c | 139 | explode( read_file( word ), "\n" );
dungeon_maker.c | 140 | sizeof( lines );
dungeon_maker.c | 145 | explode( lines[ i ], " " );
dungeon_maker.c | 156 | sizeof( parameters ) - 1 ] );
dungeon_maker.c | 160 | if ( file_size( RESTORE_PATH + terrain_name +".o" ) >
dungeon_maker.c | 161 | notify_fail( "Terrain "+ terrain_name +" already exists.\n" );
dungeon_maker.c | 162 | clone_object( "/obj/misc/easel" );
dungeon_maker.c | 166 | write( "Working on "+ terrain_name +".\n" );
dungeon_maker.c | 171 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 172 | query_room_size();
dungeon_maker.c | 175 | call_out( "process_passages", 2 );
dungeon_maker.c | 182 | add_shape( ({ 0, 0 }), ({ "@" }) );
dungeon_maker.c | 184 | implode( (string *)easel->query_lines(), "\n" ) );
dungeon_maker.c | 185 | move( environment() );
dungeon_maker.c | 195 | query_room_size() + (int)to->query_room_size();
dungeon_maker.c | 196 | allocate( 3 );
dungeon_maker.c | 208 | tell_room( environment(), "No passages to process.\n" );
dungeon_maker.c | 209 | stop_working();
dungeon_maker.c | 212 | tell_room( environment(), "Reached maximum.\n" );
dungeon_maker.c | 213 | stop_working();
dungeon_maker.c | 221 | delete( passages, 0, 1 );
dungeon_maker.c | 222 | call_out( "process_passages", 2 );
dungeon_maker.c | 225 | shift_in( co_ord, new_direc, type, type );
dungeon_maker.c | 234 | sizeof( room_entries );
dungeon_maker.c | 246 | mark_passage( new_co_ord );
dungeon_maker.c | 247 | delete( room_entries, j, 1 );
dungeon_maker.c | 259 | random( 100 );
dungeon_maker.c | 267 | if ( random( 100 ) >
dungeon_maker.c | 268 | tell_room( environment(), "Passage branching "+ direc +" and " );
dungeon_maker.c | 269 | shift_in( co_ord, direc, type, type );
dungeon_maker.c | 273 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 274 | mark_passage( new_co_ord );
dungeon_maker.c | 282 | shift_in( co_ord, direc, type, type );
dungeon_maker.c | 286 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 287 | mark_passage( new_co_ord );
dungeon_maker.c | 297 | shift_in( co_ord, new_direc, type, type );
dungeon_maker.c | 298 | add_floating_location( terrain_name, type, new_co_ord, 0 );
dungeon_maker.c | 300 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 301 | mark_passage( new_co_ord );
dungeon_maker.c | 302 | tell_room( environment(), "Passage branching "+ new_direc +" and " );
dungeon_maker.c | 308 | shift_in( co_ord, new_direc, type, type );
dungeon_maker.c | 309 | add_floating_location( terrain_name, type, new_co_ord, 0 );
dungeon_maker.c | 311 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 312 | mark_passage( new_co_ord );
dungeon_maker.c | 324 | shift_in( co_ord, new_direc, type, type );
dungeon_maker.c | 328 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 329 | mark_passage( new_co_ord );
dungeon_maker.c | 335 | random( 100 );
dungeon_maker.c | 337 | sizeof( room_files );
dungeon_maker.c | 343 | shift_in( co_ord, direc, type, new_type );
dungeon_maker.c | 348 | mark_room( new_co_ord, new_type );
dungeon_maker.c | 349 | mark_passage( co_ord );
dungeon_maker.c | 353 | shift_in( new_co_ord, new_direc, new_type, type );
dungeon_maker.c | 361 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 362 | mark_passage( co_ord );
dungeon_maker.c | 372 | random( clear[ 1 ] ) }) });
dungeon_maker.c | 373 | mark_passage( co_ord );
dungeon_maker.c | 380 | random( 100 );
dungeon_maker.c | 384 | random( clear[ 1 ] );
dungeon_maker.c | 390 | random( clear[ 1 ] );
dungeon_maker.c | 395 | shift_in( co_ord, direc, type, type );
dungeon_maker.c | 398 | add_floating_location( terrain_name, type, new_co_ord, 0 );
dungeon_maker.c | 401 | mark_passage( new_co_ord );
sample_passage_2.c | 4 | set_short( "rock-walled tunnel" );
sample_passage_2.c | 5 | set_light( 20 );
sample_passage_2.c | 6 | set_room_size( 5 );
sample_room_2.c | 4 | set_short( "largish room" );
sample_room_2.c | 5 | set_light( 20 );
sample_room_2.c | 6 | set_room_size( 25 );
sample_passage_1.c | 4 | set_short( "dusty corridor" );
sample_passage_1.c | 5 | set_light( 20 );
sample_passage_1.c | 6 | set_room_size( 5 );
autodoc_nroff.c | 67 | query_func_def(mixed *stuff, string func);
autodoc_nroff.c | 68 | query_method_description(mapping docs);
autodoc_nroff.c | 69 | parse_string(string inp);
autodoc_nroff.c | 70 | convert_html(string text, int depth, int preformat, int edge_width);
autodoc_nroff.c | 71 | query_defines(mapping defines);
autodoc_nroff.c | 72 | query_class_def(mixed *stuff, string name);
autodoc_nroff.c | 73 | query_class_description(mapping docs);
autodoc_nroff.c | 81 | seteuid(getuid());
autodoc_nroff.c | 107 | explode(file->query_file_name(), "/");
autodoc_nroff.c | 112 | query_main_docs();
autodoc_nroff.c | 115 | convert_html(implode(stuff["main"], " "), 5, 0, 5);
autodoc_nroff.c | 119 | parse_string(query_multiple_short(stuff["author"]));
autodoc_nroff.c | 123 | parse_string(query_multiple_short(stuff["started"]));
autodoc_nroff.c | 162 | query_public_functions()[$1][AUTO_DOCS]["ignore"] :));
autodoc_nroff.c | 163 | query_file_name();
autodoc_nroff.c | 164 | strsrch(base_single, ".", -1);
autodoc_nroff.c | 169 | get_dir(base_single + "*");
autodoc_nroff.c | 176 | if (file_size(base_single + name) >
autodoc_nroff.c | 177 | rm(base_single + name);
autodoc_nroff.c | 186 | query_file_name());
autodoc_nroff.c | 197 | query_file_name());
autodoc_nroff.c | 206 | query_protected_functions()[$1][AUTO_DOCS]["ignore"] :));
autodoc_nroff.c | 212 | query_file_name());
autodoc_nroff.c | 216 | explode(file->query_file_name(), "/");
autodoc_nroff.c | 222 | query_defines(file->query_define_docs());
autodoc_nroff.c | 225 | write_file(output, ret);
autodoc_nroff.c | 233 | sort_array(keys(docs), (: strcasecmp :));
autodoc_nroff.c | 239 | query_method_description(docs[name]);
autodoc_nroff.c | 253 | sort_array(keys(classes), (: strcasecmp :) );
autodoc_nroff.c | 256 | reset_eval_cost();
autodoc_nroff.c | 260 | query_class_description(classes[name][AUTO_CLASS_DOCS]);
autodoc_nroff.c | 279 | sort_array(funcs, (: strcmp($1, $2) :));
autodoc_nroff.c | 281 | sizeof(funcs);
autodoc_nroff.c | 282 | evaluate(data, funcs[i]);
autodoc_nroff.c | 287 | query_method_description(stuff[AUTO_DOCS]);
autodoc_nroff.c | 288 | write_single_description(funcs[i], stuff, base_single + funcs[i], fn);
autodoc_nroff.c | 301 | strlen(ret);
autodoc_nroff.c | 302 | sizeof(stuff[AUTO_CLASS_MEMBERS]);
autodoc_nroff.c | 303 | sprintf("%-" + pad + "s", "");
autodoc_nroff.c | 316 | sizeof(stuff[AUTO_ARGS]);
autodoc_nroff.c | 333 | strlen(ret);
autodoc_nroff.c | 334 | sizeof(stuff[AUTO_ARGS]);
autodoc_nroff.c | 336 | sprintf(",\n%-"+pad+"s", "");
autodoc_nroff.c | 354 | convert_html(implode(docs["main"], " "), 7, 0, 5);
autodoc_nroff.c | 359 | sizeof(docs["member"]);
autodoc_nroff.c | 377 | convert_html(implode(docs["main"], " "), 7, 0, 5);
autodoc_nroff.c | 382 | sizeof(docs["param"]);
autodoc_nroff.c | 409 | reset_eval_cost();
autodoc_nroff.c | 410 | explode(output, "/");
autodoc_nroff.c | 416 | mkdir(blue);
autodoc_nroff.c | 425 | implode(fluff["main"], "\n");
autodoc_nroff.c | 426 | strlen(blue);
autodoc_nroff.c | 427 | strsrch(blue, ".");
autodoc_nroff.c | 431 | strsrch(blue, "!");
autodoc_nroff.c | 435 | strsrch(blue, "?");
autodoc_nroff.c | 445 | sizeof(fluff["param"]);
autodoc_nroff.c | 456 | implode(fluff["return"], " ");
autodoc_nroff.c | 475 | write_file(output, ret);
autodoc_nroff.c | 489 | reset_eval_cost();
autodoc_nroff.c | 490 | explode(output, "/");
autodoc_nroff.c | 496 | mkdir(blue);
autodoc_nroff.c | 505 | implode(fluff["main"], "\n");
autodoc_nroff.c | 506 | strlen(blue);
autodoc_nroff.c | 507 | strsrch(blue, ".");
autodoc_nroff.c | 511 | strsrch(blue, "!");
autodoc_nroff.c | 515 | strsrch(blue, "?");
autodoc_nroff.c | 526 | sizeof(fluff["member"]);
autodoc_nroff.c | 551 | write_file(output, ret);
autodoc_nroff.c | 605 | replace_string(text, "\n", " ");
autodoc_nroff.c | 606 | replace_string(text, "\n.", "\n .");
autodoc_nroff.c | 610 | explode("#" + text, "<");
autodoc_nroff.c | 617 | sizeof(bits);
autodoc_nroff.c | 747 | replace(rest, "\n", " ");
autodoc_nroff.c | 752 | replace_string(rest, "  ", " ");
autodoc_file.c | 78 | setup();
autodoc_file.c | 79 | parse_comment(string stuff);
autodoc_file.c | 80 | do_parse_file(function func);
autodoc_file.c | 81 | query_file_position();
autodoc_file.c | 82 | handle_inherit(mixed *bits);
autodoc_file.c | 89 | seteuid(getuid());
autodoc_file.c | 90 | setup();
autodoc_file.c | 141 | next_character();
autodoc_file.c | 142 | while (ch != '\r' && ch != '\n' && ch != EOF);
autodoc_file.c | 161 | next_character();
autodoc_file.c | 165 | pop_character(1);
autodoc_file.c | 169 | pop_character(1);
autodoc_file.c | 172 | pop_character(1);
autodoc_file.c | 174 | pop_character(1);
autodoc_file.c | 184 | sprintf("%c", ch);
autodoc_file.c | 186 | while (ok);
autodoc_file.c | 205 | pop_character(1);
autodoc_file.c | 211 | skip_to_end_of_line();
autodoc_file.c | 217 | pop_character(2);
autodoc_file.c | 218 | skip_to_end_of_comment();
autodoc_file.c | 221 | pop_character(3);
autodoc_file.c | 223 | pop_character(1);
autodoc_file.c | 226 | parse_comment(skip_to_end_of_comment());
autodoc_file.c | 228 | skip_to_end_of_comment();
autodoc_file.c | 239 | while (ok);
autodoc_file.c | 260 | skip_spaces_and_comments();
autodoc_file.c | 263 | lookahead_character(1);
autodoc_file.c | 268 | lookahead_character(1);
autodoc_file.c | 273 | next_character();
autodoc_file.c | 274 | sprintf("%c", ch);
autodoc_file.c | 278 | while (ok);
autodoc_file.c | 282 | get_word();
autodoc_file.c | 287 | sprintf("%c", next_character());
autodoc_file.c | 291 | lookahead_character(1);
autodoc_file.c | 294 | next_character();
autodoc_file.c | 295 | sprintf("%c", ch);
autodoc_file.c | 299 | while (ok);
autodoc_file.c | 304 | next_character();
autodoc_file.c | 305 | sprintf("%c", ch);
autodoc_file.c | 307 | next_character();
autodoc_file.c | 310 | sprintf("%c", ch);
autodoc_file.c | 313 | next_character();
autodoc_file.c | 314 | sprintf("\\%c", ch);
autodoc_file.c | 318 | sprintf("%c", ch);
autodoc_file.c | 320 | while (ok);
autodoc_file.c | 324 | sprintf("%c%c", next_character(), next_character());
autodoc_file.c | 326 | sprintf("%c", next_character());
autodoc_file.c | 329 | sprintf("%c%c", next_character(), next_character());
autodoc_file.c | 331 | sprintf("%c", next_character());
autodoc_file.c | 338 | sprintf("%c", next_character());
autodoc_file.c | 344 | lookahead_character(1);
autodoc_file.c | 364 | next_character();
autodoc_file.c | 365 | sprintf("%c", ch);
autodoc_file.c | 367 | while (ok);
autodoc_file.c | 393 | query_file_position();
autodoc_file.c | 394 | get_word();
autodoc_file.c | 398 | reset_eval_cost();
autodoc_file.c | 417 | query_file_position();
autodoc_file.c | 418 | get_word();
autodoc_file.c | 429 | reset_eval_cost();
autodoc_file.c | 434 | while (depth > 0);
autodoc_file.c | 453 | return ([ ]);
autodoc_file.c | 461 | explode(stuff, "\n@");
autodoc_file.c | 463 | sizeof(bits);
autodoc_file.c | 464 | strsrch(bits[i], " ");
autodoc_file.c | 465 | strsrch(bits[i], "\n");
autodoc_file.c | 493 | member_array("{", bits);
autodoc_file.c | 506 | parse_comment(current_comment);
autodoc_file.c | 509 | parse_comment(current_comment) });
autodoc_file.c | 522 | member_array("inherit", bits);
autodoc_file.c | 528 | sscanf(str, "\"%s\"", str);
autodoc_file.c | 550 | member_array("(", bits);
autodoc_file.c | 558 | member_array(")", bits, pos);
autodoc_file.c | 564 | member_array(",", bits, pos);
autodoc_file.c | 570 | parse_comment(current_comment);
autodoc_file.c | 601 | lookahead_character(1);
autodoc_file.c | 603 | pop_character(1);
autodoc_file.c | 604 | lookahead_character(1);
autodoc_file.c | 608 | query_file_position();
autodoc_file.c | 609 | next_character();
autodoc_file.c | 612 | next_character();
autodoc_file.c | 615 | next_character();
autodoc_file.c | 620 | reset_eval_cost();
autodoc_file.c | 622 | sprintf("%c", ch);
autodoc_file.c | 623 | while (ch != '\n' && ch != '\r' && ch != EOF);
autodoc_file.c | 642 | get_word();
autodoc_file.c | 649 | get_rest_of_line();
autodoc_file.c | 653 | parse_comment(curr_comm);
autodoc_file.c | 666 | get_rest_of_line();
autodoc_file.c | 669 | explode(file_name, "/");
autodoc_file.c | 670 | sscanf(value, "\"%s\"", name);
autodoc_file.c | 679 | sscanf(value, "<%s>", name);
autodoc_file.c | 683 | read_file(name);
autodoc_file.c | 689 | define_include_dirs();
autodoc_file.c | 691 | read_file(sprintf(bits[i], name));
autodoc_file.c | 694 | replace_string(stuff, "/**", "/* ");
autodoc_file.c | 696 | replace_string(stuff, "class ", "clas ");
autodoc_file.c | 697 | replace_string(stuff, "#define ", "#defin ");
autodoc_file.c | 698 | sprintf(bits[i], name);
autodoc_file.c | 705 | replace(inc_name, "//", "/");
autodoc_file.c | 721 | skip_to_end_of_line();
autodoc_file.c | 735 | get_word();
autodoc_file.c | 738 | handle_hash();
autodoc_file.c | 742 | get_statement(token);
autodoc_file.c | 745 | handle_inherit(bits);
autodoc_file.c | 748 | handle_class(bits);
autodoc_file.c | 751 | handle_function_definition(bits);
autodoc_file.c | 763 | unguarded((: restore_object(SAVE_DIR + replace_string(file_name, "/", ".")) :));
autodoc_file.c | 776 | unguarded((: save_object(SAVE_DIR + replace_string(file_name, "/", ".")) :));
autodoc_file.c | 792 | setup();
autodoc_file.c | 794 | load_file();
autodoc_file.c | 797 | if (sizeof(unguarded( (: stat($(name)) :) )) >
autodoc_file.c | 799 | file_name(this_object());
autodoc_file.c | 800 | sscanf(my_name, "%s#%*s", my_name);
autodoc_file.c | 820 | setup();
autodoc_file.c | 825 | read_file(name);
autodoc_file.c | 828 | evaluate(func);
autodoc_file.c | 833 | save_file();
autodoc_file.c | 835 | call_out( (: evaluate($1) :), 2, func);
autodoc_file.c | 839 | save_file();
autodoc_file.c | 840 | call_out( (: evaluate($1) :), 2, func);
autodoc_file.c | 843 | call_out( (: evaluate($1) :), 2, func);
autodoc_file.c | 852 | parse_file(file_name, func, 0);
autodoc_file.c | 857 | next_statement();
autodoc_file.c | 862 | save_file();
autodoc_file.c | 863 | call_out((: evaluate($1) :), 2, func);
autodoc_file.c | 865 | call_out((: do_parse_file($1) :), 2, func);
autodoc_file.c | 930 | return ([ ]);
autodoc_file.c | 970 | query_includes() { return keys(includes);
autodoc_file.c | 990 | destruct(this_object());
autodoc_handler.c | 143 | mixYellow(12);
autodoc_handler.c | 174 | create_nroff_file(object ob, int type);
autodoc_handler.c | 175 | create_html_file(object ob, int type);
autodoc_handler.c | 176 | after_thingy(int no_index);
autodoc_handler.c | 177 | start_processing();
autodoc_handler.c | 178 | do_parse_next_file();
autodoc_handler.c | 179 | create_index();
autodoc_handler.c | 180 | add_to_index(object ob);
autodoc_handler.c | 181 | load();
autodoc_handler.c | 182 | save();
autodoc_handler.c | 183 | query_files();
autodoc_handler.c | 184 | remove_file(string fname);
autodoc_handler.c | 187 | seteuid(getuid());
autodoc_handler.c | 189 | create_html_file($1, $2) :) });
autodoc_handler.c | 193 | load();
autodoc_handler.c | 194 | do_parse_next_file();
autodoc_handler.c | 196 | create_index();
autodoc_handler.c | 207 | replace(ob->query_file_name(), "/", ".");
autodoc_handler.c | 211 | rm(NROFF_DOC_DIR + fname);
autodoc_handler.c | 212 | create_nroff_file(ob, NROFF_DOC_DIR + fname);
autodoc_handler.c | 220 | explode(name, "/");
autodoc_handler.c | 221 | return ({ bits[sizeof(bits)-1], name });
autodoc_handler.c | 223 | unique_array(index_stuff + stuff, (: lower_case($1[0])[0] :));
autodoc_handler.c | 224 | sizeof(stuff);
autodoc_handler.c | 225 | lower_case(stuff[i][0][0][0..0]);
autodoc_handler.c | 226 | create_nroff_index_file(stuff[i], fname);
autodoc_handler.c | 240 | replace(ob->query_file_name(), "/", ".");
autodoc_handler.c | 245 | rm(HTML_DOC_DIR + fname);
autodoc_handler.c | 246 | create_html_file(ob, HTML_DOC_DIR + fname);
autodoc_handler.c | 253 | explode(name, "/");
autodoc_handler.c | 254 | return ({ bits[sizeof(bits)-1], name, "", summary_map[name] });
autodoc_handler.c | 256 | unique_array(index_stuff + stuff, (: lower_case($1[0])[0] :));
autodoc_handler.c | 258 | sizeof(stuff);
autodoc_handler.c | 260 | rm(HTML_DOC_DIR + fname);
autodoc_handler.c | 263 | reset_eval_cost();
autodoc_handler.c | 268 | rm(fname);
autodoc_handler.c | 269 | create_main_index(chars, fname);
autodoc_handler.c | 279 | previous_object());
autodoc_handler.c | 286 | if (previous_object()->query_num_failed_tries() >
autodoc_handler.c | 291 | remove_file(files[file_pos - 1]);
autodoc_handler.c | 292 | log_file("AUTODOC", ctime(time()) + ": Removing: " + files[file_pos - 1] + " \n");
autodoc_handler.c | 294 | log_file("AUTODOC", ctime(time()) + ": Parsing: " + files[file_pos - 1] + " \n");
autodoc_handler.c | 295 | sizeof(filters);
autodoc_handler.c | 297 | previous_object(), MAIN_FILE);
autodoc_handler.c | 301 | call_out((: $1->dest_me() :), 20, previous_object());
autodoc_handler.c | 302 | save();
autodoc_handler.c | 307 | call_out((: start_processing() :), 60);
autodoc_handler.c | 311 | new(AUTODOC_FILE)->parse_file(files[file_pos++], (: after_thingy(0) :));
autodoc_handler.c | 322 | call_out( (: create_index() :), 2);
autodoc_handler.c | 325 | save();
autodoc_handler.c | 328 | call_out((: do_parse_next_file() :), 360);
autodoc_handler.c | 336 | sizeof(args);
autodoc_handler.c | 340 | implode(args[AUTO_ARGS_TYPE], " ");
autodoc_handler.c | 369 | query_short_args_def(docs[name][AUTO_ARGS]) });
autodoc_handler.c | 383 | implode(fluff["main"], "\n");
autodoc_handler.c | 384 | strlen(blue);
autodoc_handler.c | 385 | strsrch(blue, ".");
autodoc_handler.c | 389 | strsrch(blue, "!");
autodoc_handler.c | 393 | strsrch(blue, "?");
autodoc_handler.c | 402 | replace(blue, ({ " ", "", "\n", "" }));
autodoc_handler.c | 423 | log_file("AUTODOC", ctime(time()) + ": Created index.\n");
autodoc_handler.c | 429 | clone_object(AUTODOC_FILE);
autodoc_handler.c | 430 | sizeof(files);
autodoc_handler.c | 432 | parse_file(files[i], 0, 1);
autodoc_handler.c | 433 | query_file_name();
autodoc_handler.c | 435 | replace(fname, "/", ".");
autodoc_handler.c | 440 | explode(fname[0..strlen(fname)-3], "/");
autodoc_handler.c | 442 | query_main_docs());
autodoc_handler.c | 446 | map_delete(summary_map, fname);
autodoc_handler.c | 451 | query_public_functions()) :) );
autodoc_handler.c | 454 | query_protected_functions()) :) );
autodoc_handler.c | 457 | query_class_docs()) :) );
autodoc_handler.c | 461 | query_define_docs()) :) );
autodoc_handler.c | 464 | reset_eval_cost();
autodoc_handler.c | 470 | sizeof(filters);
autodoc_handler.c | 471 | reset_eval_cost();
autodoc_handler.c | 472 | catch(evaluate(filters[i], index_stuff, INDEX_FILE));
autodoc_handler.c | 475 | time();
autodoc_handler.c | 476 | save();
autodoc_handler.c | 490 | clone_object(AUTODOC_FILE);
autodoc_handler.c | 491 | parse_file(fname, (: after_thingy(1) :));
autodoc_handler.c | 501 | unguarded( (: create_index() :));
autodoc_handler.c | 518 | implode(explode(fname, "/") - ({ "" }), "/");
autodoc_handler.c | 522 | save();
autodoc_handler.c | 524 | start_processing();
autodoc_handler.c | 526 | call_out((: recreate_documentation($1) :), random(60), fname);
autodoc_handler.c | 551 | replace(fname, "/", ".");
autodoc_handler.c | 552 | unguarded((: rm($(fn)) :));
autodoc_handler.c | 554 | replace(fname, "/", ".");
autodoc_handler.c | 555 | unguarded((: rm($(fn)) :));
autodoc_handler.c | 558 | get_dir(fn);
autodoc_handler.c | 562 | unguarded( (: rm($(dfn)) :) );
autodoc_handler.c | 567 | unguarded((: rm($(fn[0..<2])) :));
autodoc_handler.c | 570 | save();
autodoc_handler.c | 572 | remove_call_out(call_id);
autodoc_handler.c | 580 | unguarded( (: restore_object( SAVE_FILE ) :) );
autodoc_handler.c | 584 | unguarded( (: save_object( SAVE_FILE ) :) );
autodoc_handler.c | 618 | if (file_size(file) >
autodoc_html.c | 61 | query_func_def(mixed *stuff, string func);
autodoc_html.c | 64 | query_method_description(mapping docs);
autodoc_html.c | 65 | create_href(string str);
autodoc_html.c | 66 | query_method_summary(string *funcs, object file);
autodoc_html.c | 67 | query_defines(string *defs, mapping docs);
autodoc_html.c | 68 | query_class_summary(mapping classes);
autodoc_html.c | 69 | query_classes(mapping classes);
autodoc_html.c | 70 | query_class_def(mixed *stuff, string name);
autodoc_html.c | 71 | query_class_description(mapping docs);
autodoc_html.c | 74 | seteuid(getuid());
autodoc_html.c | 100 | explode(file->query_file_name(), "/");
autodoc_html.c | 108 | query_main_docs();
autodoc_html.c | 112 | implode(stuff["main"], " ");
autodoc_html.c | 116 | map(stuff["see"], (: create_href($1) :)));
autodoc_html.c | 120 | query_multiple_short(stuff["author"]);
autodoc_html.c | 124 | query_multiple_short(stuff["started"]);
autodoc_html.c | 128 | if (sizeof(stuff["example"]) >
autodoc_html.c | 129 | sizeof(stuff["example"]);
autodoc_html.c | 157 | map(keys(file->query_inherits()), (: create_href :)));
autodoc_html.c | 164 | map(file->query_includes(), (: create_href :)));
autodoc_html.c | 168 | query_class_summary(file->query_class_docs());
autodoc_html.c | 175 | keys(file->query_public_functions());
autodoc_html.c | 176 | keys(file->query_protected_functions());
autodoc_html.c | 182 | query_method_summary(pub_funcs + pro_funcs, file);
autodoc_html.c | 209 | strcasecmp($1, $2) :));
autodoc_html.c | 211 | query_defines(defs, file->query_define_docs());
autodoc_html.c | 219 | query_classes(file->query_class_docs());
autodoc_html.c | 222 | write_file(output, bing, 1);
autodoc_html.c | 224 | www_function(output);
autodoc_html.c | 225 | write_file(output, bing + "</body></html>");
autodoc_html.c | 254 | strcasecmp($1[1], $2[1]) :) );
autodoc_html.c | 255 | sizeof(index);
autodoc_html.c | 256 | replace(index[i][AUTO_INDEX_FILE_NAME], "/", ".");
autodoc_html.c | 278 | reset_eval_cost();
autodoc_html.c | 280 | write_file(output, bing + "</dl>", 1);
autodoc_html.c | 281 | write_file(output, "/www/footer"->www_function(output) + "</body></html>");
autodoc_html.c | 313 | query_summary_map();
autodoc_html.c | 323 | rm (output_eff);
autodoc_html.c | 324 | rm (output_index);
autodoc_html.c | 325 | rm (output_cre);
autodoc_html.c | 330 | evaluate(write_all, "<html><head><title>\n");
autodoc_html.c | 350 | evaluate(write_all, "<h2>Function index</h2>\n");
autodoc_html.c | 351 | query_files();
autodoc_html.c | 352 | sort_array(files, (: strcasecmp :) );
autodoc_html.c | 353 | sort_array(keys(chars), (: strcasecmp :) );
autodoc_html.c | 354 | sizeof(index);
autodoc_html.c | 356 | evaluate(write_all, ", ");
autodoc_html.c | 372 | evaluate(write_all, "<hr><h2>Class index</h2>\n");
autodoc_html.c | 373 | evaluate(write_all, "<dl>\n");
autodoc_html.c | 375 | unique_array(files, (: $1[0..strsrch($1, "/", -1)] :));
autodoc_html.c | 376 | sizeof(stuff);
autodoc_html.c | 393 | evaluate(write_all, "</dl>\n");
autodoc_html.c | 395 | sizeof(stuff);
autodoc_html.c | 399 | reset_eval_cost();
autodoc_html.c | 418 | evaluate(write_all, "@@/footer:footer@@</body></html>\n");
autodoc_html.c | 419 | write_file(output_eff, bing_eff, 1);
autodoc_html.c | 421 | www_function(output_eff) + "</body></html");
autodoc_html.c | 422 | write_file(output_index, bing_index, 1);
autodoc_html.c | 424 | www_function(output_index) + "</body></html");
autodoc_html.c | 425 | write_file(output_cre, bing_cre, 1);
autodoc_html.c | 427 | www_function(output_cre) + "</body></html");
autodoc_html.c | 435 | sort_array(keys(classes), (: strcasecmp :) );
autodoc_html.c | 438 | reset_eval_cost();
autodoc_html.c | 446 | query_class_description(classes[name][AUTO_CLASS_DOCS]);
autodoc_html.c | 459 | sort_array(funcs, (: strcasecmp($1, $2) :));
autodoc_html.c | 461 | sizeof(funcs);
autodoc_html.c | 462 | reset_eval_cost();
autodoc_html.c | 463 | evaluate(data, funcs[i]);
autodoc_html.c | 477 | query_method_description(stuff[AUTO_DOCS]);
autodoc_html.c | 490 | strlen(ret);
autodoc_html.c | 491 | sizeof(stuff[AUTO_ARGS]);
autodoc_html.c | 493 | sprintf(",\n%-"+pad+"s", "");
autodoc_html.c | 508 | strlen(ret);
autodoc_html.c | 509 | sizeof(stuff[AUTO_CLASS_MEMBERS]);
autodoc_html.c | 510 | sprintf("%-" + pad + "s", "");
autodoc_html.c | 536 | sizeof(docs["param"]);
autodoc_html.c | 551 | map(docs["see"], (: create_href($1) :)));
autodoc_html.c | 585 | sizeof(docs["member"]);
autodoc_html.c | 596 | map(docs["see"], (: create_href($1) :)));
autodoc_html.c | 615 | replace(name, "/", ".");
autodoc_html.c | 622 | sscanf(func, "%s(%*s)", func);
autodoc_html.c | 623 | replace(name, "/", ".");
autodoc_html.c | 633 | replace(str, "/", ".");
autodoc_html.c | 654 | sizeof(args);
autodoc_html.c | 658 | implode(args[i + AUTO_ARGS_TYPE], " ");
autodoc_html.c | 674 | implode(main, " ");
autodoc_html.c | 675 | strlen(main);
autodoc_html.c | 676 | strsrch(main, ".");
autodoc_html.c | 680 | strsrch(main, "?");
autodoc_html.c | 684 | strsrch(main, "!");
autodoc_html.c | 698 | sort_array(keys(classes), (: strcasecmp :));
autodoc_html.c | 707 | query_short_desc(classes[name][AUTO_CLASS_DOCS]);
autodoc_html.c | 727 | sort_array(funcs, (: strcasecmp :) );
autodoc_html.c | 728 | sizeof(funcs);
autodoc_html.c | 748 | query_short_desc(stuff[AUTO_DOCS]);
autodoc_html.c | 763 | sizeof(defs);
autodoc_html.c | 768 | query_method_description(docs[defs[i]]);
low_gp_ring.c | 8 | set_name( "ring" );
low_gp_ring.c | 9 | set_short( "pink crystal ring" );
low_gp_ring.c | 10 | add_adjective( ({ "pink", "crystal" }) );
low_gp_ring.c | 11 | set_main_plural( "pink crystal rings" );
low_gp_ring.c | 14 | set_material( "rosy-quartz" );
low_gp_ring.c | 15 | set_value( 250 );
low_gp_ring.c | 16 | set_value_info( "artifact", 5000 );
low_gp_ring.c | 17 | set_weight( 1 );
low_gp_ring.c | 18 | set_enchant( 3 );
low_gp_ring.c | 22 | adjust_charges( 1 + random( 11 ) );
low_gp_ring.c | 23 | set_level( 25 );
low_gp_ring.c | 24 | set_zapper( file_name( this_object() ) );
low_gp_ring.c | 30 | tell_object( person, "You feel slightly more powerful.\n" );
low_gp_ring.c | 31 | if ( ( (string)person->query_gp() + GP_AWARD ) >
low_gp_ring.c | 33 | set_gp( person->query_max_gp() );
low_gp_ring.c | 36 | adjust_gp( GP_AWARD );
low_gp_ring.c | 40 | tell_object( person, "You feel slightly less powerful.\n" );
low_gp_ring.c | 41 | add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
low_gp_ring.c | 43 | set_gp( 0 );
low_gp_ring.c | 46 | adjust_gp( 0 - ( GP_AWARD / 3 ) );
invisibility.c | 4 | set_name( "ring" );
invisibility.c | 5 | set_short( "clear crystal ring" );
invisibility.c | 6 | add_adjective( ({ "clear", "crystal" }) );
invisibility.c | 7 | set_main_plural( "clear crystal rings" );
invisibility.c | 10 | set_material( "calcite" );
invisibility.c | 11 | set_value( 200 );
invisibility.c | 12 | set_value_info( "artifact", 5000 );
invisibility.c | 13 | set_weight( 1 );
invisibility.c | 14 | set_enchant( 2 );
invisibility.c | 15 | add_property( "no recycling", 1 );
invisibility.c | 16 | add_property( "fluff'n'stuff", 1 );
invisibility.c | 20 | adjust_charges( 1 + random( 7 ) );
invisibility.c | 21 | set_level( 60 );
invisibility.c | 22 | set_zapper( file_name( this_object() ) );
invisibility.c | 29 | roll_MdN( 7, (int)ring->query_level() ) );
high_gp_ring.c | 8 | set_name( "ring" );
high_gp_ring.c | 9 | set_short( "pink crystal ring" );
high_gp_ring.c | 10 | add_adjective( ({ "pink", "crystal" }) );
high_gp_ring.c | 11 | set_main_plural( "pink crystal rings" );
high_gp_ring.c | 14 | set_material( "rosy-quartz" );
high_gp_ring.c | 15 | set_value( 750 );
high_gp_ring.c | 16 | set_value_info( "artifact", 15000 );
high_gp_ring.c | 17 | set_weight( 1 );
high_gp_ring.c | 18 | set_enchant( 5 );
high_gp_ring.c | 22 | adjust_charges( 1 + random( 11 ) );
high_gp_ring.c | 23 | set_level( 75 );
high_gp_ring.c | 24 | set_zapper( file_name( this_object() ) );
high_gp_ring.c | 30 | tell_object( person, "You feel slightly more powerful.\n" );
high_gp_ring.c | 31 | if ( ( (string)person->query_gp() + GP_AWARD ) >
high_gp_ring.c | 33 | set_gp( person->query_max_gp() );
high_gp_ring.c | 36 | adjust_gp( GP_AWARD );
high_gp_ring.c | 40 | tell_object( person, "You feel slightly less powerful.\n" );
high_gp_ring.c | 41 | add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
high_gp_ring.c | 43 | set_gp( 0 );
high_gp_ring.c | 46 | adjust_gp( 0 - ( GP_AWARD / 3 ) );
med_gp_ring.c | 8 | set_name( "ring" );
med_gp_ring.c | 9 | set_short( "pink crystal ring" );
med_gp_ring.c | 10 | add_adjective( ({ "pink", "crystal" }) );
med_gp_ring.c | 11 | set_main_plural( "pink crystal rings" );
med_gp_ring.c | 14 | set_material( "rosy-quartz" );
med_gp_ring.c | 15 | set_value( 500 );
med_gp_ring.c | 16 | set_value_info( "artifact", 10000 );
med_gp_ring.c | 17 | set_weight( 1 );
med_gp_ring.c | 18 | set_enchant( 4 );
med_gp_ring.c | 22 | adjust_charges( 1 + random( 11 ) );
med_gp_ring.c | 23 | set_level( 50 );
med_gp_ring.c | 24 | set_zapper( file_name( this_object() ) );
med_gp_ring.c | 30 | tell_object( person, "You feel slightly more powerful.\n" );
med_gp_ring.c | 31 | if ( ( (string)person->query_gp() + GP_AWARD ) >
med_gp_ring.c | 33 | set_gp( person->query_max_gp() );
med_gp_ring.c | 36 | adjust_gp( GP_AWARD );
med_gp_ring.c | 40 | tell_object( person, "You feel slightly less powerful.\n" );
med_gp_ring.c | 41 | add_succeeded_mess( ring, "$N $V $D.\n", ({ }) );
med_gp_ring.c | 43 | set_gp( 0 );
med_gp_ring.c | 46 | adjust_gp( 0 - ( GP_AWARD / 3 ) );
recall.c | 8 | set_name( "ring" );
recall.c | 9 | set_short( "blue crystal ring" );
recall.c | 10 | add_adjective( ({ "blue", "crystal" }) );
recall.c | 11 | set_main_plural( "blue crystal rings" );
recall.c | 14 | set_material( "sapphire" );
recall.c | 15 | set_value( 500 );
recall.c | 16 | set_value_info( "artifact", 10000 );
recall.c | 17 | set_weight( 1 );
recall.c | 18 | set_enchant( 3 );
recall.c | 22 | adjust_charges( 1 + random( 11 ) );
recall.c | 23 | set_level( 30 );
recall.c | 24 | set_zapper( file_name( this_object() ) );
recall.c | 36 | query_start_pos();
recall.c | 47 | query_property( "destination" );
recall.c | 49 | call_out( "move_person", 0, person, find_start_location( person ) );
recall.c | 52 | call_out( "move_person", 0, person, place );
recall.c | 60 | random( 2 ) ] );
recall.c | 61 | add_succeeded_mess( ring, "$N $V $D, but nothing happens.\n", ({ }) );
recall.c | 66 | tell_creator( "taffyd", "%O, %s\n", person, place );
recall.c | 69 | force_load();
recall.c | 79 | random( 2 ) ) );
grain.c | 29 | create();
grain.c | 32 | set_name( "grain" );
grain.c | 33 | set_short( "broken grain" );
grain.c | 34 | set_long( "This is some funky, but broken, grain.\n" );
grain.c | 38 | remove_help_file( "food" );
grain.c | 39 | add_help_file( "grain" );
grain.c | 41 | add_alias( "plant" );
grain.c | 42 | add_plural( "plants" );
grain.c | 44 | set_collective();
grain.c | 46 | set_amount( 1 );
grain.c | 47 | set_weight_unit( ({ 1, 10 }) );
grain.c | 57 | setup();
grain.c | 58 | reset();
grain.c | 65 | init();
grain.c | 67 | add_command( "chew", TO );
grain.c | 68 | add_command( "strip", TO );
grain.c | 94 | query_amount();
grain.c | 97 | add_failed_mess( "You can't chew thin air.\n" );
grain.c | 107 | set_position( "idly chewing " + TO->a_short() );
grain.c | 122 | if ( query_amount() >
grain.c | 128 | transform( TO, "thresh" );
grain.c | 130 | add_failed_mess( "For some reason, you can't strip $D.\n" );
grain.c | 134 | move( TP );
grain.c | 136 | move( environment( TP ) );
grain.c | 142 | add_succeeded_mess( "$N strip$s the grain from $D with $p fingers.\n" );
grain.c | 145 | move( "/room/rubbish" );
grain.c | 151 | int_query_static_auto_load();
handler.dat_dc.c | 8 | dest_me() { destruct( this_object() );
handler.dat_dc.c | 14 | new( class item_data );
handler.dat_dc.c | 16 | random(3) + 3 :);
handler.dat_dc.c | 19 | new( class item_data );
handler.dat_dc.c | 23 | random(4) + 5 :);
handler.dat_dc.c | 26 | new( class item_data );
handler.dat_dc.c | 28 | random(2) + 3 :);
handler.dat_dc.c | 31 | new( class item_data );
handler.dat_dc.c | 33 | random(6) + 20 :);
handler.dat_dc.c | 36 | new( class item_data );
handler.dat_dc.c | 38 | random(3) + 3 :);
handler.dat_dc.c | 41 | new( class item_data );
handler.dat_dc.c | 43 | random(3) + 3 :);
handler.dat_dc.c | 46 | new( class item_data );
handler.dat_dc.c | 48 | random(3) + 3 :);
handler.dat_dc.c | 51 | new( class item_data );
handler.dat_dc.c | 53 | random(3) + 3 :);
handler.dat_dc.c | 56 | new( class item_data );
handler.dat_dc.c | 58 | random(3) + 3 :);
handler.dat_dc.c | 61 | new( class item_data );
handler.dat_dc.c | 63 | random(3) + 3 :);
handler.dat_dc.c | 66 | new( class item_data );
handler.dat_dc.c | 68 | random(3) + 3 :);
handler.dat_dc.c | 71 | new( class item_data );
handler.dat_dc.c | 73 | random( 15 ) :);
handler.dat_dc.c | 76 | new( class item_data );
handler.dat_dc.c | 78 | random( 15 ) :);
handler.dat_dc.c | 81 | new( class item_data );
handler.dat_dc.c | 83 | random(4) + 2 :);
handler.dat_dc.c | 86 | new( class item_data );
handler.dat_dc.c | 91 | new( class item_data );
handler.dat_dc.c | 96 | new( class item_data );
handler.dat_dc.c | 98 | random( 3 ) + 3 :);
handler.dat_dc.c | 101 | new( class item_data );
handler.dat_dc.c | 103 | random(3) + 3 :);
handler.dat_dc.c | 106 | new( class item_data );
handler.dat_dc.c | 108 | random(3) + 3 :);
handler.dat_dc.c | 111 | new( class item_data );
handler.dat_dc.c | 116 | new( class item_data );
handler.dat_dc.c | 121 | new( class item_data );
handler.dat_dc.c | 123 | random(1)+3 :);
handler.dat_dc.c | 126 | new( class item_data );
handler.dat_dc.c | 128 | random(1)+2 :);
handler.dat_dc.c | 131 | new( class item_data );
handler.dat_dc.c | 136 | new( class item_data );
handler.dat_dc.c | 138 | random(1)+1 :);
handler.dat_dc.c | 141 | new( class item_data );
handler.dat_dc.c | 143 | random(1)+1 :);
handler.dat_dc.c | 146 | new( class item_data );
handler.dat_dc.c | 148 | random(1)+2 :);
handler.dat_dc.c | 151 | new( class item_data );
handler.dat_dc.c | 156 | new( class item_data );
handler.dat_dc.c | 161 | new( class item_data );
handler.dat_dc.c | 166 | new( class item_data );
handler.dat_dc.c | 171 | new( class item_data );
handler.dat_dc.c | 176 | new( class item_data );
handler.dat_dc.c | 181 | new( class item_data );
handler.dat_dc.c | 186 | new( class item_data );
handler.dat_dc.c | 191 | new( class item_data );
handler.dat_dc.c | 196 | new( class item_data );
handler.dat_dc.c | 201 | new( class item_data );
handler.dat_dc.c | 205 | random( 3 ) + 3 :);
handler.dat_dc.c | 208 | new( class item_data );
handler.dat_dc.c | 212 | random( 3 ) + 3 :);
handler.dat_dc.c | 215 | new( class item_data );
handler.dat_dc.c | 219 | random( 3 ) + 3 :);
handler.dat_dc.c | 222 | new( class item_data );
handler.dat_dc.c | 226 | random( 3 ) + 3 :);
handler.dat_dc.c | 229 | new( class item_data );
handler.dat_dc.c | 233 | random( 3 ) + 3 :);
handler.dat_dc.c | 236 | new( class item_data );
handler.dat_dc.c | 240 | random( 3 ) + 3 :);
handler.dat_dc.c | 243 | new( class item_data );
handler.dat_dc.c | 247 | random( 3 ) + 3 :);
handler.dat_dc.c | 250 | new( class item_data );
handler.dat_dc.c | 254 | random( 3 ) + 3 :);
handler.dat_dc.c | 257 | new( class item_data );
handler.dat_dc.c | 261 | random( 3 ) + 3 :);
handler.dat_dc.c | 264 | new( class item_data );
handler.dat_dc.c | 268 | random( 3 ) + 3 :);
handler.dat_dc.c | 271 | new( class item_data );
handler.dat_dc.c | 275 | random( 3 ) + 3 :);
handler.dat_dc.c | 278 | new( class item_data );
handler.dat_dc.c | 282 | random( 3 ) + 3 :);
handler.dat_dc.c | 285 | new( class item_data );
handler.dat_dc.c | 289 | random( 3 ) + 3 :);
handler.dat_dc.c | 292 | new( class item_data );
handler.dat_dc.c | 294 | random(3) + 3 :);
handler.dat_dc.c | 297 | new( class item_data );
handler.dat_dc.c | 302 | new( class item_data );
handler.dat_dc.c | 304 | random( 3 ) + 3 :);
handler.dat_dc.c | 307 | new( class item_data );
handler.dat_dc.c | 315 | data_return_0();
handler.dat_old.c | 10 | dest_me() { destruct( this_object() );
handler.dat_old.c | 15 | new( class item_data );
handler.dat_old.c | 17 | random(3) + 3 :);
handler.dat_old.c | 20 | new( class item_data );
handler.dat_old.c | 26 | random(4) + 5 :);
handler.dat_old.c | 29 | new( class item_data );
handler.dat_old.c | 31 | random(2) + 3 :);
handler.dat_old.c | 34 | new( class item_data );
handler.dat_old.c | 36 | random(6) + 20 :);
handler.dat_old.c | 39 | new( class item_data );
handler.dat_old.c | 41 | random(3) + 3 :);
handler.dat_old.c | 44 | new( class item_data );
handler.dat_old.c | 46 | random(3) + 3 :);
handler.dat_old.c | 49 | new( class item_data );
handler.dat_old.c | 54 | new( class item_data );
handler.dat_old.c | 56 | random(3) + 3 :);
handler.dat_old.c | 59 | new( class item_data );
handler.dat_old.c | 61 | random(3) + 3 :);
handler.dat_old.c | 64 | new( class item_data );
handler.dat_old.c | 66 | random(3) + 3 :);
handler.dat_old.c | 69 | new( class item_data );
handler.dat_old.c | 71 | random(1)+3 :);
handler.dat_old.c | 74 | new( class item_data );
handler.dat_old.c | 76 | random(1)+2 :);
handler.dat_old.c | 79 | new( class item_data );
handler.dat_old.c | 84 | new( class item_data );
handler.dat_old.c | 86 | random(1)+1 :);
handler.dat_old.c | 89 | new( class item_data );
handler.dat_old.c | 91 | random(1)+1 :);
handler.dat_old.c | 94 | new( class item_data );
handler.dat_old.c | 110 | dest_me() { destruct( this_object() );
handler.dat_old.c | 115 | new( class item_data );
handler.dat_old.c | 117 | random(3) + 3 :);
handler.dat_old.c | 120 | new( class item_data );
handler.dat_old.c | 126 | random(4) + 5 :);
handler.dat_old.c | 129 | new( class item_data );
handler.dat_old.c | 131 | random(2) + 3 :);
handler.dat_old.c | 134 | new( class item_data );
handler.dat_old.c | 136 | random(6) + 20 :);
handler.dat_old.c | 139 | new( class item_data );
handler.dat_old.c | 141 | random(3) + 3 :);
handler.dat_old.c | 144 | new( class item_data );
handler.dat_old.c | 146 | random(3) + 3 :);
handler.dat_old.c | 149 | new( class item_data );
handler.dat_old.c | 154 | new( class item_data );
handler.dat_old.c | 156 | random(3) + 3 :);
handler.dat_old.c | 159 | new( class item_data );
handler.dat_old.c | 161 | random(3) + 3 :);
handler.dat_old.c | 164 | new( class item_data );
handler.dat_old.c | 166 | random(3) + 3 :);
handler.dat_old.c | 169 | new( class item_data );
handler.dat_old.c | 171 | random(1)+3 :);
handler.dat_old.c | 174 | new( class item_data );
handler.dat_old.c | 176 | random(1)+2 :);
handler.dat_old.c | 179 | new( class item_data );
handler.dat_old.c | 184 | new( class item_data );
handler.dat_old.c | 186 | random(1)+1 :);
handler.dat_old.c | 189 | new( class item_data );
handler.dat_old.c | 191 | random(1)+1 :);
handler.dat_old.c | 194 | new( class item_data );
handler.dat_old.c | 210 | dest_me() { destruct( this_object() );
handler.dat_old.c | 215 | new( class item_data );
handler.dat_old.c | 217 | random(3) + 3 :);
handler.dat_old.c | 220 | new( class item_data );
handler.dat_old.c | 226 | random(4) + 5 :);
handler.dat_old.c | 229 | new( class item_data );
handler.dat_old.c | 231 | random(2) + 3 :);
handler.dat_old.c | 234 | new( class item_data );
handler.dat_old.c | 236 | random(6) + 20 :);
handler.dat_old.c | 239 | new( class item_data );
handler.dat_old.c | 241 | random(3) + 3 :);
handler.dat_old.c | 244 | new( class item_data );
handler.dat_old.c | 246 | random(3) + 3 :);
handler.dat_old.c | 249 | new( class item_data );
handler.dat_old.c | 254 | new( class item_data );
handler.dat_old.c | 256 | random(3) + 3 :);
handler.dat_old.c | 259 | new( class item_data );
handler.dat_old.c | 261 | random(3) + 3 :);
handler.dat_old.c | 264 | new( class item_data );
handler.dat_old.c | 266 | random(3) + 3 :);
handler.dat_old.c | 269 | new( class item_data );
handler.dat_old.c | 271 | random(1)+3 :);
handler.dat_old.c | 274 | new( class item_data );
handler.dat_old.c | 276 | random(1)+2 :);
handler.dat_old.c | 279 | new( class item_data );
handler.dat_old.c | 284 | new( class item_data );
handler.dat_old.c | 286 | random(1)+1 :);
handler.dat_old.c | 289 | new( class item_data );
handler.dat_old.c | 291 | random(1)+1 :);
handler.dat_old.c | 294 | new( class item_data );
handler.dat_old.c | 310 | dest_me() { destruct( this_object() );
handler.dat_old.c | 315 | new( class item_data );
handler.dat_old.c | 317 | random(3) + 3 :);
handler.dat_old.c | 320 | new( class item_data );
handler.dat_old.c | 326 | random(4) + 5 :);
handler.dat_old.c | 329 | new( class item_data );
handler.dat_old.c | 331 | random(2) + 3 :);
handler.dat_old.c | 334 | new( class item_data );
handler.dat_old.c | 336 | random(6) + 20 :);
handler.dat_old.c | 339 | new( class item_data );
handler.dat_old.c | 341 | random(3) + 3 :);
handler.dat_old.c | 344 | new( class item_data );
handler.dat_old.c | 346 | random(3) + 3 :);
handler.dat_old.c | 349 | new( class item_data );
handler.dat_old.c | 354 | new( class item_data );
handler.dat_old.c | 356 | random(3) + 3 :);
handler.dat_old.c | 359 | new( class item_data );
handler.dat_old.c | 361 | random(3) + 3 :);
handler.dat_old.c | 364 | new( class item_data );
handler.dat_old.c | 366 | random(3) + 3 :);
handler.dat_old.c | 369 | new( class item_data );
handler.dat_old.c | 371 | random(1)+3 :);
handler.dat_old.c | 374 | new( class item_data );
handler.dat_old.c | 376 | random(1)+2 :);
handler.dat_old.c | 379 | new( class item_data );
handler.dat_old.c | 384 | new( class item_data );
handler.dat_old.c | 386 | random(1)+1 :);
handler.dat_old.c | 389 | new( class item_data );
handler.dat_old.c | 391 | random(1)+1 :);
handler.dat_old.c | 394 | new( class item_data );
handler.dat_old.c | 410 | dest_me() { destruct( this_object() );
handler.dat_old.c | 415 | new( class item_data );
handler.dat_old.c | 417 | random(3) + 3 :);
handler.dat_old.c | 420 | new( class item_data );
handler.dat_old.c | 426 | random(4) + 5 :);
handler.dat_old.c | 429 | new( class item_data );
handler.dat_old.c | 431 | random(2) + 3 :);
handler.dat_old.c | 434 | new( class item_data );
handler.dat_old.c | 436 | random(6) + 20 :);
handler.dat_old.c | 439 | new( class item_data );
handler.dat_old.c | 441 | random(3) + 3 :);
handler.dat_old.c | 444 | new( class item_data );
handler.dat_old.c | 446 | random(3) + 3 :);
handler.dat_old.c | 449 | new( class item_data );
handler.dat_old.c | 454 | new( class item_data );
handler.dat_old.c | 456 | random(3) + 3 :);
handler.dat_old.c | 459 | new( class item_data );
handler.dat_old.c | 461 | random(3) + 3 :);
handler.dat_old.c | 464 | new( class item_data );
handler.dat_old.c | 466 | random(3) + 3 :);
handler.dat_old.c | 469 | new( class item_data );
handler.dat_old.c | 471 | random(1)+3 :);
handler.dat_old.c | 474 | new( class item_data );
handler.dat_old.c | 476 | random(1)+2 :);
handler.dat_old.c | 479 | new( class item_data );
handler.dat_old.c | 484 | new( class item_data );
handler.dat_old.c | 486 | random(1)+1 :);
handler.dat_old.c | 489 | new( class item_data );
handler.dat_old.c | 491 | random(1)+1 :);
handler.dat_old.c | 494 | new( class item_data );
handler.dat_old.c | 510 | dest_me() { destruct( this_object() );
handler.dat_old.c | 515 | new( class item_data );
handler.dat_old.c | 517 | random(3) + 3 :);
handler.dat_old.c | 520 | new( class item_data );
handler.dat_old.c | 526 | random(4) + 5 :);
handler.dat_old.c | 529 | new( class item_data );
handler.dat_old.c | 531 | random(2) + 3 :);
handler.dat_old.c | 534 | new( class item_data );
handler.dat_old.c | 536 | random(6) + 20 :);
handler.dat_old.c | 539 | new( class item_data );
handler.dat_old.c | 541 | random(3) + 3 :);
handler.dat_old.c | 544 | new( class item_data );
handler.dat_old.c | 546 | random(3) + 3 :);
handler.dat_old.c | 549 | new( class item_data );
handler.dat_old.c | 554 | new( class item_data );
handler.dat_old.c | 556 | random(3) + 3 :);
handler.dat_old.c | 559 | new( class item_data );
handler.dat_old.c | 561 | random(3) + 3 :);
handler.dat_old.c | 564 | new( class item_data );
handler.dat_old.c | 566 | random(3) + 3 :);
handler.dat_old.c | 569 | new( class item_data );
handler.dat_old.c | 571 | random(1)+3 :);
handler.dat_old.c | 574 | new( class item_data );
handler.dat_old.c | 576 | random(1)+2 :);
handler.dat_old.c | 579 | new( class item_data );
handler.dat_old.c | 584 | new( class item_data );
handler.dat_old.c | 586 | random(1)+1 :);
handler.dat_old.c | 589 | new( class item_data );
handler.dat_old.c | 591 | random(1)+1 :);
handler.dat_old.c | 594 | new( class item_data );
handler.dat_old.c | 610 | dest_me() { destruct( this_object() );
handler.dat_old.c | 615 | new( class item_data );
handler.dat_old.c | 617 | random(3) + 3 :);
handler.dat_old.c | 620 | new( class item_data );
handler.dat_old.c | 626 | random(4) + 5 :);
handler.dat_old.c | 629 | new( class item_data );
handler.dat_old.c | 631 | random(2) + 3 :);
handler.dat_old.c | 634 | new( class item_data );
handler.dat_old.c | 636 | random(6) + 20 :);
handler.dat_old.c | 639 | new( class item_data );
handler.dat_old.c | 641 | random(3) + 3 :);
handler.dat_old.c | 644 | new( class item_data );
handler.dat_old.c | 646 | random(3) + 3 :);
handler.dat_old.c | 649 | new( class item_data );
handler.dat_old.c | 654 | new( class item_data );
handler.dat_old.c | 656 | random(3) + 3 :);
handler.dat_old.c | 659 | new( class item_data );
handler.dat_old.c | 661 | random(3) + 3 :);
handler.dat_old.c | 664 | new( class item_data );
handler.dat_old.c | 666 | random(3) + 3 :);
handler.dat_old.c | 669 | new( class item_data );
handler.dat_old.c | 671 | random(1)+3 :);
handler.dat_old.c | 674 | new( class item_data );
handler.dat_old.c | 676 | random(1)+2 :);
handler.dat_old.c | 679 | new( class item_data );
handler.dat_old.c | 684 | new( class item_data );
handler.dat_old.c | 686 | random(1)+1 :);
handler.dat_old.c | 689 | new( class item_data );
handler.dat_old.c | 691 | random(1)+1 :);
handler.dat_old.c | 694 | new( class item_data );
rock.c | 16 | set_name("rock");
rock.c | 19 | set_short("hidden rock");
plant.c | 16 | set_name("plant");
plant.c | 19 | set_short("hidden plant");
boring_stick.c | 13 | set_state(int state);
boring_stick.c | 16 | set_name("stick");
boring_stick.c | 17 | set_state(0);
boring_stick.c | 18 | set_weight(2);
boring_stick.c | 19 | set_value(10);
boring_stick.c | 56 | environment()->add_extra_look(this_object());
boring_stick.c | 58 | environment()->remove_extra_look(this_object());
boring_stick.c | 84 | set_state(new_state);
boring_stick.c | 91 | set_state(!state);
boring_stick.c | 98 | do_flick();
boring_stick.c | 102 | do_flick();
boring_stick.c | 116 | set_state(new_state);
boring_stick.c | 129 | set_state(map["state"]);
boring_stick.c | 131 | init_dynamic_arg( map[ "::" ] );
boring_stick.c | 138 | environment();
boring_stick.c | 139 | move(dest, str1, str2);
boring_stick.c | 143 | remove_extra_look(this_object());
boring_stick.c | 145 | environment()->add_extra_look(this_object());
perfume_bottle.c | 10 | create();
perfume_bottle.c | 11 | create();
perfume_bottle.c | 15 | set_name( "bottle" );
perfume_bottle.c | 16 | set_short( "perfume bottle" );
perfume_bottle.c | 17 | add_adjective( "perfume" );
perfume_bottle.c | 18 | set_value( 4000 );
perfume_bottle.c | 19 | set_weight( 2 );
perfume_bottle.c | 24 | set_short( word +" perfume bottle" );
perfume_bottle.c | 25 | add_adjective( word );
perfume_bottle.c | 26 | set_main_plural( word +" perfume bottles" );
perfume_bottle.c | 58 | this_player()->add_command( "spray", this_object(), "<direct:object> at <indirect:object>" );
perfume_bottle.c | 67 | if ( sizeof( things ) >
perfume_bottle.c | 90 | this_player()->add_succeeded( things[ 0 ] );
perfume_bottle.c | 115 | init_dynamic_arg( map[ "::" ] );
perfume_bottle.c | 121 | init_static_arg( map[ "::" ] );
perfume_bottle.c | 123 | set_glass( map[ "glass" ] );
perfume_bottle.c | 132 | dest_me();
perfume_bottle.c | 133 | dest_me();
perfume_bottle.c | 139 | move(ob);
perfume_bottle.c | 143 | move( ob, mess1, mess2 );
dead_duck.c | 18 | setup();
dead_duck.c | 19 | init();
dead_duck.c | 22 | query_dynamic_auto_load();
dead_duck.c | 23 | init_dynamic_arg(mapping arg, object);
dead_duck.c | 29 | set_name( "duck" );
dead_duck.c | 30 | set_short( "dead duck" );
dead_duck.c | 31 | add_alias( ({ "corpse", "duck corpse" }) );
dead_duck.c | 32 | add_adjective( "dead" );
dead_duck.c | 33 | set_main_plural( "dead ducks" );
dead_duck.c | 45 | set_weight( 10 );
dead_duck.c | 46 | set_value( 400 );
dead_duck.c | 47 | set_weight_per_bite( 2 );
dead_duck.c | 52 | init();
dead_duck.c | 68 | clone_object( DUCK_FEATHER );
dead_duck.c | 70 | move( environment() );
dead_duck.c | 75 | this_player() );
dead_duck.c | 76 | notify_fail( "You pluck the bedraggled, dead duck cheerfully.\n" );
dead_duck.c | 87 | init_dynamic_arg(arg["::"]);
newspaper.c | 13 | set_name("newspaper");
newspaper.c | 14 | set_short("newspaper");
newspaper.c | 15 | add_alias("paper");
newspaper.c | 16 | add_plural("papers");
newspaper.c | 17 | set_long("A bunch of nice newspapers.\n");
newspaper.c | 18 | set_main_plural("newspapers");
newspaper.c | 19 | set_weight(10);
newspaper.c | 20 | set_value(10);
newspaper.c | 21 | set_ignore_saved_pages(1);
newspaper.c | 43 | explode(_paper, " ");
newspaper.c | 45 | set_short("copy of the " + _paper);
newspaper.c | 46 | add_adjective( ({ "the" }) );
newspaper.c | 47 | set_main_plural("copies of the " + _paper);
newspaper.c | 49 | set_short("copy of " + _paper);
newspaper.c | 50 | set_main_plural("copies of " + _paper);
newspaper.c | 51 | add_plural_adjective("copies");
newspaper.c | 53 | map(bits, (: lower_case($1) :));
newspaper.c | 54 | add_adjective( ({ "copy", "of" }) );
newspaper.c | 55 | add_adjective(bits[0..<2]);
newspaper.c | 56 | add_alias(lower_case(bits[<1]));
newspaper.c | 58 | add_property("determinate", "a ");
newspaper.c | 60 | add_property("determinate", "The ");
newspaper.c | 62 | query_open_page();
newspaper.c | 63 | query_edition_articles(_paper, _edition);
newspaper.c | 64 | set_no_pages(sizeof(articles) + 1);
newspaper.c | 68 | sprintf("%2d .... %70-=s\n", 1, "Contents");
newspaper.c | 69 | sizeof(articles);
newspaper.c | 70 | set_open_page(i + 2);
newspaper.c | 71 | query_current_page();
newspaper.c | 72 | set_value(0);
newspaper.c | 79 | query_edition_adverts(_paper, _edition);
newspaper.c | 80 | unique_array(adverts, (: $1->category :) );
newspaper.c | 87 | sprintf("%2d .... %70-=s\n", i + 2, articles[i]->title);
newspaper.c | 91 | sizeof(articles);
newspaper.c | 95 | sprintf("%2d .... %70-=s\n", i + 2, articles[j]->title);
newspaper.c | 97 | sprintf("%2d -=== %65|=s ===-\n", i + 2, articles[i]->title);
newspaper.c | 104 | query_article_text_plain(articles[i]);
newspaper.c | 105 | sprintf("%2d .... %70-=s\n", i + 2, articles[i]->title);
newspaper.c | 114 | set_open_page(1);
newspaper.c | 115 | set_read_mess( index, NEWSPAPER_HANDLER->query_language_for( _paper ), 0);
newspaper.c | 116 | query_current_page();
newspaper.c | 117 | set_value(0);
newspaper.c | 119 | query_paper_long(_paper);
newspaper.c | 123 | set_long(fluff + "Edition " + _edition + " of " + _paper + ".\n");
newspaper.c | 124 | set_open_page(page);
newspaper.c | 130 | set_long(NEWSPAPER_HANDLER->query_paper_long(_paper));
newspaper.c | 131 | setup_paper();
newspaper.c | 136 | setup_paper();
newspaper.c | 142 | query_dynamic_auto_load();
newspaper.c | 143 | add_auto_load_value(map, AUTO_LOAD_TAG, "paper", _paper);
newspaper.c | 144 | add_auto_load_value(map, AUTO_LOAD_TAG, "edition", _edition);
newspaper.c | 149 | init_dynamic_arg(map);
newspaper.c | 150 | set_paper(query_auto_load_value(map, AUTO_LOAD_TAG, "paper"));
newspaper.c | 151 | set_edition(query_auto_load_value(map, AUTO_LOAD_TAG, "edition"));
golem_shard.c | 10 | set_name( "shard" );
golem_shard.c | 11 | set_short( "cracked clay shard" );
golem_shard.c | 12 | add_adjective( ({"clay"}) );
golem_shard.c | 13 | set_long( "This is a heavily cracked clay shard." );
golem_shard.c | 14 | set_main_plural( "cracked clay shards" );
golem_shard.c | 15 | set_weight( 5 );
golem_shard.c | 16 | set_value( 0 );
golem_shard.c | 17 | add_property( "no recycling", 1 );
eel_skin.c | 13 | set_name( "skin" );
eel_skin.c | 14 | set_short( "eel skin" );
eel_skin.c | 15 | add_adjective( "eel" );
eel_skin.c | 16 | set_main_plural( "eel skins" );
eel_skin.c | 19 | set_weight( 3 );
eel_skin.c | 20 | set_value( 100 );
al_receipt.c | 22 | set_name("receipt");
al_receipt.c | 23 | set_short( "missing item receipt" );
al_receipt.c | 26 | set_value(5);
al_receipt.c | 27 | set_weight(1);
al_receipt.c | 28 | add_adjective(({"missing", "item"}));
al_receipt.c | 29 | add_property("writeable", 1);
al_receipt.c | 30 | add_property("sale_value", 1);
al_receipt.c | 31 | add_property("paper", 1);
al_receipt.c | 32 | add_property("nosteal", 1);
al_receipt.c | 33 | set_max_size(1000);
al_receipt.c | 34 | time();
al_receipt.c | 38 | this_player()->add_command("kiss", this_object());
al_receipt.c | 59 | set_obpath(string s) { set_object(s);
al_receipt.c | 71 | set_virtname(string s) { set_virtobname(s);
al_receipt.c | 107 | fragile_auto_str_ob(ob);
al_receipt.c | 108 | set_obname(ob->query_name());
al_receipt.c | 109 | set_object(bits[1]);
al_receipt.c | 110 | set_static_save(bits[2]);
al_receipt.c | 111 | set_value(ob->query_value());
al_receipt.c | 115 | ctime(time())[4..18], base_name(previous_object()));
al_receipt.c | 116 | call_out("dest_me", 2);
al_receipt.c | 125 | call_out("dest_me", 4);
al_receipt.c | 154 | add_adjective( explode( lower_case( _obname ), " " ) );
al_receipt.c | 157 | set_value(arg["obvalue"]);
al_receipt.c | 161 | init_dynamic_arg(arg["::"]);
al_receipt.c | 164 | call_out("dest_me", 2);
al_receipt.c | 238 | write("The receipt whispers: I don't belong to you!\n");
al_receipt.c | 244 | other_file( _virt_name );
al_receipt.c | 247 | remap_file_path(_virt_name);
al_receipt.c | 258 | init_static_arg(_static_save[0]);
al_receipt.c | 259 | init_dynamic_arg(_static_save[1]);
al_receipt.c | 262 | add_property(VIRTUAL_NAME_PROP, _virt_name);
al_receipt.c | 264 | a_short() + ".\n");
al_receipt.c | 269 | this_player() }));
al_receipt.c | 270 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
al_receipt.c | 271 | move("/room/rubbish");
al_receipt.c | 275 | dest_me();
al_receipt.c | 298 | move(environment(dest), messin, messout);
active_toy.c | 26 | init();
active_toy.c | 27 | this_player()->add_command( "hug", this_object() );
active_toy.c | 28 | this_player()->add_command( "pet", this_object() );
active_toy.c | 29 | this_player()->add_command( "cuddle", this_object() );
active_toy.c | 30 | this_player()->add_command( "fondle", this_object() );
active_toy.c | 31 | this_player()->add_command( "snuggle", this_object() );
active_toy.c | 32 | this_player()->add_command( "squeeze", this_object() );
active_toy.c | 33 | this_player()->add_command( "spank", this_object() );
active_toy.c | 41 | poss_short() ), ({ }) );
active_toy.c | 50 | poss_short() ), ({ }) );
active_toy.c | 59 | poss_short() ), ({ }) );
active_toy.c | 68 | poss_short() ), ({ }) );
active_toy.c | 77 | poss_short() ), ({ }) );
active_toy.c | 86 | poss_short() ), ({ }) );
active_toy.c | 95 | poss_short() ), ({ }) );
active_toy.c | 128 | init_dynamic_arg(map["::"]);
active_toy.c | 130 | init_dynamic_arg(map["chat"]);
active_toy.c | 137 | init_static_arg( map[ "::" ] );
camera.c | 23 | set_name( "box" );
camera.c | 24 | add_adjective( ({ "heavy" , "black" }) );
camera.c | 25 | set_short( "heavy black cube" );
camera.c | 26 | set_main_plural( "heavy black cubes" );
camera.c | 30 | set_weight( 10 );
camera.c | 31 | add_alias( ({ "cube" , "camera" }) );
camera.c | 32 | add_plurals(({ "cubes", "cameras"}));
camera.c | 33 | adjust_money( 1 , "gold" );
camera.c | 34 | add_help_file("camera");
camera.c | 43 | add_command("use", "<direct:object> on <indirect:object>");
camera.c | 44 | add_command("use", "<direct:object>");
camera.c | 72 | environment(this_player()) ;
camera.c | 83 | if (env->query_light() >
camera.c | 93 | call_out("out_of_paint", 0, env);
camera.c | 105 | call_out("out_of_colour", 2, env);
camera.c | 113 | sizeof(obs);
camera.c | 116 | this_player()->add_succeeded(obs[i]);
camera.c | 120 | this_player()->add_succeeded(obs[i]);
camera.c | 125 | this_player()->add_succeeded(obs[i]);
camera.c | 131 | query_multiple_short(chars);
camera.c | 133 | query_multiple_short(things);
camera.c | 140 | query_long();
camera.c | 160 | if ((sizeof(players)+sizeof(chars)) >
camera.c | 161 | sizeof(players);
camera.c | 162 | one_short() ;
camera.c | 168 | if (chars_sorted != "" && sizeof(players) >
camera.c | 171 | capitalize(chars_sorted) ;
camera.c | 184 | clone_object("/std/object");
camera.c | 185 | set_name("glass");
camera.c | 186 | add_adjective( ({"tiny", "square"}) );
camera.c | 187 | set_short("tiny square of glass");
camera.c | 188 | set_main_plural("tiny squares of glass");
camera.c | 189 | set_long("/global/events"->convert_message(view));
camera.c | 190 | set_read_mess(photo_of);
camera.c | 191 | add_property("photographer", (string)this_player()->query_name()) ;
camera.c | 192 | move(this_player());
camera.c | 229 | this_player());
camera.c | 240 | this_player());
envelope.c | 33 | make_envelope( "pink", 3 );
envelope.c | 36 | make_envelope( "frog flavoured", 10 );
envelope.c | 61 | add_alias("packet");
envelope.c | 64 | set_name( "envelope" );
envelope.c | 65 | set_short( adjective + " " + description + " " + noun );
envelope.c | 66 | add_adjective( adjective );
envelope.c | 67 | add_adjective( explode( description, " " ) );
envelope.c | 68 | set_long( "This is a " + adjective + " " + description + " envelope.  " );
envelope.c | 69 | set_weight( 1 );
envelope.c | 70 | set_value( 300 + size * 20 );
envelope.c | 71 | set_max_weight( size );
envelope.c | 72 | set_material( "paper" );
envelope.c | 73 | add_property( "writeable", 1 );
envelope.c | 74 | add_extra_look( this_object() );
envelope.c | 81 | init();
envelope.c | 118 | do_close();
envelope.c | 119 | set_stuck( 1 );
envelope.c | 133 | set_stuck( 0 );
envelope.c | 134 | do_open();
envelope.c | 168 | init_static_arg( map["::"] );
envelope.c | 176 | int_query_static_auto_load();
envelope.c | 177 | return ([ ]);
bank_credit_note.c | 18 | set_name("note");
bank_credit_note.c | 19 | set_short("bank credit note");
bank_credit_note.c | 20 | add_adjective( ({ "bank", "credit" }) );
bank_credit_note.c | 23 | set_value(0);
bank_credit_note.c | 24 | set_weight(1);
bank_credit_note.c | 35 | query_property("place");
bank_credit_note.c | 128 | load_object(query_franchise());
bank_credit_note.c | 129 | find_commercial_items("bank");
bank_credit_note.c | 130 | filter(obs, (: $1->query_bank() :));
bank_credit_note.c | 133 | is_valid_note(query_credit_num());
bank_credit_note.c | 151 | load_object(query_franchise());
bank_credit_note.c | 152 | find_commercial_items("bank");
bank_credit_note.c | 153 | filter(obs, (: $1->query_bank() :));
bank_credit_note.c | 156 | process_note(query_credit_num());
bank_credit_note.c | 170 | query_credit_num() }), });
bank_credit_note.c | 177 | query_dynamic_auto_load();
bank_credit_note.c | 178 | add_auto_load_value(map, OBJECT_TAG, "amount", query_amount());
bank_credit_note.c | 179 | add_auto_load_value(map, OBJECT_TAG, "franchise", query_franchise());
bank_credit_note.c | 180 | add_auto_load_value(map, OBJECT_TAG, "id", query_credit_num());
bank_credit_note.c | 181 | add_auto_load_value(map, OBJECT_TAG, "bank", query_bank_name());
bank_credit_note.c | 187 | init_dynamic_arg(map);
bank_credit_note.c | 189 | set_amount(query_auto_load_value(map, OBJECT_TAG, "amount"));
bank_credit_note.c | 190 | set_franchise(query_auto_load_value(map, OBJECT_TAG, "franchise"));
bank_credit_note.c | 191 | set_credit_num(query_auto_load_value(map, OBJECT_TAG, "id"));
bank_credit_note.c | 192 | set_bank_name(query_auto_load_value(map, OBJECT_TAG, "bank"));
golem_eye.c | 10 | set_name( "triangle" );
golem_eye.c | 11 | set_short( "clay triangle" );
golem_eye.c | 12 | add_adjective( ({"clay"}) );
golem_eye.c | 15 | set_main_plural( "clay triangles" );
golem_eye.c | 16 | set_weight( 5 );
golem_eye.c | 17 | set_value( 0 );
golem_eye.c | 18 | add_property( "no recycling", 1 );
juicer.c | 5 | juice_bit( object ob, string fn );
juicer.c | 12 | set_name( "juicer" );
juicer.c | 13 | set_short( "juicer" );
juicer.c | 14 | set_main_plural( "juicers" );
juicer.c | 20 | set_value( 4000 );
juicer.c | 21 | set_weight( 100 );
juicer.c | 22 | set_max_volume( 19200 );
juicer.c | 26 | init();
juicer.c | 27 | this_player()->add_command( "juice", this_object(), "%I 'in' %D" );
juicer.c | 40 | sizeof( things );
juicer.c | 42 | delete( things, i, 1 );
juicer.c | 50 | if ( sizeof( things ) >
juicer.c | 58 | evaluate( juice_funs[ fn ], things[ 0 ], fn );
juicer.c | 62 | evaluate( juice_funs[ fn ], things[ 0 ], fn );
juicer.c | 71 | move("/room/rubbish");
juicer.c | 74 | add_plural( (string)things[ 0 ]->query_name() );
juicer.c | 77 | query_weight_unit();
juicer.c | 82 | set_amount( amount*percent/100 );
juicer.c | 83 | set_weight_per_bite( 0 );
juicer.c | 84 | set_bites_gone( 0 );
juicer.c | 85 | query_medium_short();
juicer.c | 87 | query_short();
juicer.c | 89 | set_medium_alias( "Ground"+ capitalize( medium_short ) );
juicer.c | 97 | set_amount_types( amount_types );
juicer.c | 98 | m_indices( amount_types );
juicer.c | 99 | sizeof( types );
juicer.c | 102 | add_adjective( "of" );
juicer.c | 106 | add_property( "determinate", "some " );
juicer.c | 107 | grind();
juicer.c | 108 | move( this_object() );
juicer.c | 120 | clone_object("/obj/reagents/generic_liquid.ob");
juicer.c | 121 | set_name("juice");
juicer.c | 124 | capitalize(s);
juicer.c | 125 | query_bit_data();
juicer.c | 126 | explode(bit_data[ BIT_NAME ], " ");
juicer.c | 127 | sizeof(m);
juicer.c | 128 | capitalize(m[i]?m[i]:"");
juicer.c | 129 | set_medium_alias(s+"Juice");
juicer.c | 132 | add_adjective("eye");
juicer.c | 133 | add_alias("ichor");
juicer.c | 134 | set_short("clear liquid");
juicer.c | 137 | set_amount(10*(int)ob->query_weight() + 10);
juicer.c | 141 | set_short("liquid");
juicer.c | 146 | move(this_object());
juicer.c | 147 | move("/room/rubbish");
trap.c | 17 | add_help_file("door_trap");
trap.c | 19 | create();
trap.c | 22 | this_object()->setup();
trap.c | 23 | this_object()->reset();
trap.c | 46 | if(sizeof(in_dir) >
trap.c | 89 | random(this_player()->query_skill_bonus("covert.items.traps") / 10);
trap.c | 94 | if(random(difficulty) >
trap.c | 101 | write(message[0]);
trap.c | 102 | say(message[1], this_player());
trap.c | 104 | write(message);
trap.c | 109 | this_player()->do_death();
trap.c | 111 | this_player()->adjust_hp(-(effect));
trap.c | 115 | this_player()->add_effect(effect[0]);
trap.c | 118 | this_player()->add_effect(effect[0], effect[1]);
trap.c | 121 | this_player()->add_effect(effect[0], effect[1..]);
trap.c | 124 | this_player()->add_effect(effect);
trap.c | 126 | this_object()->move("/room/rubbish");
trap.c | 132 | this_player()->query_skill_bonus("covert.items.traps"));
trap.c | 136 | setup_trap(difficulty, trigger, description, message, effect);
trap.c | 139 | load_object( (string)( ob->query_dest() ) );
trap.c | 140 | query_door_control( (string)( ob->query_other_id() ) );
trap.c | 142 | setup_trap(difficulty, trigger, description, message, effect);
trap.c | 143 | environment(this_player())->update_doors();
trap.c | 149 | call_out("break_me", 1);
trap.c | 156 | clone_object("/std/object");
trap.c | 157 | set_name("trap");
trap.c | 158 | set_short("busted trap");
trap.c | 159 | set_long("A broken trap.\n");
trap.c | 160 | set_value(0);
trap.c | 161 | set_weight(this_object()->query_weight());
trap.c | 162 | move(environment());
trap.c | 164 | this_object()->dest_me();
trap.c | 170 | int_query_static_auto_load();
trap.c | 184 | int_query_static_auto_load();
trap.c | 185 | return ([ ]);
trap.c | 194 | init_static_arg(map["::"]);
case.c | 27 | set_name("case");
case.c | 30 | add_alias("container");
case.c | 31 | add_adjective("display");
case.c | 32 | set_transparent();
case.c | 33 | set_weight(1000);
case.c | 34 | set_main_plural("cases");
case.c | 35 | set_max_weight(500000);
case.c | 36 | reset_get();
case.c | 37 | reset_drop();
case.c | 49 | filter( obs, (: environment( $1 ) == this_object() :) );
case.c | 52 | add_failed_mess( "You have to browse something in the display case.\n" );
case.c | 56 | if ( sizeof( obs ) >
case.c | 57 | add_failed_mess( "You can only browse 1 thing at a time.\n" );
case.c | 61 | write( "You peruse the "+ obs[0]->query_short() +".\n" );
case.c | 62 | write( obs[0]->long() );
case.c | 63 | cmd( ({ obs[0] }) );
case.c | 64 | this_player()->add_succeeded_mess( this_object(), "" );
case.c | 90 | add_alias( name );
case.c | 91 | set_long( long + "You feel you could \"peruse\" things in it.\n" );
bug.c | 8 | set_name( "bug");
bug.c | 14 | add_read_mess("68000\n", "silver writing", "general", 0);
bug.c | 18 | add_command("shake", "<direct:object>");
bug.c | 19 | add_command("spray", "<indirect:object> with <direct:object>");
bug.c | 37 | sizeof(obs);
bug.c | 39 | add_effect("/std/effects/object/bug_effect", 0);
bug.c | 41 | this_player()->add_succeeded(obs[i]);
bug.c | 57 | init_dynamic_arg(map["::"]);
wedding_ring.c | 6 | set_name( "ring" );
wedding_ring.c | 7 | set_short( "wedding ring" );
wedding_ring.c | 8 | add_adjective( "wedding" );
wedding_ring.c | 11 | set_main_plural( "wedding rings" );
wedding_ring.c | 12 | set_type( "ring" );
wedding_ring.c | 13 | add_property( "shop type", "jewellers" );
wedding_ring.c | 14 | add_property( "no recycling", 1 );
wedding_ring.c | 15 | set_weight( 1 );
wedding_ring.c | 16 | setup_armour( 1000 );
wedding_ring.c | 17 | set_percentage( 100 );
wedding_ring.c | 18 | set_damage_chance( 0 );
wedding_ring.c | 20 | set_wear_remove_func( file_name( this_object() ), "wear_remove" );
wedding_ring.c | 31 | find_player( giver );
wedding_ring.c | 34 | find_player( owner );
wedding_ring.c | 37 | query_default_language();
wedding_ring.c | 40 | capitalize( giver ) +".\"", language );
wedding_ring.c | 46 | lower_case( word );
wedding_ring.c | 47 | do_inscription();
wedding_ring.c | 53 | lower_case( word );
wedding_ring.c | 54 | do_inscription();
wedding_ring.c | 65 | write( "The ring feels uncomfortable on your finger.\n" );
wedding_ring.c | 67 | write( "You are warmed anew by "+ capitalize( giver ) +"'s love.\n" );
wedding_ring.c | 80 | init_dynamic_arg( args[ "::" ] );
wedding_ring.c | 82 | lower_case( args[ "owner" ] );
wedding_ring.c | 84 | lower_case( args[ "giver" ] );
newspaper_box.c | 14 | set_name("box");
newspaper_box.c | 15 | set_short("newspaper box");
newspaper_box.c | 16 | add_adjective("box");
newspaper_box.c | 17 | add_help_file("newspaper_box");
newspaper_box.c | 18 | reset_get();
newspaper_box.c | 32 | query_property("place");
newspaper_box.c | 35 | environment()->query_property("place");
newspaper_box.c | 37 | previous_object()->query_property("place");
newspaper_box.c | 40 | query_paper_cost(paper);
newspaper_box.c | 41 | set_short(_paper + " box");
newspaper_box.c | 46 | money_value_string(cost, place) + ".\n");
newspaper_box.c | 48 | add_property("determinate", "");
newspaper_box.c | 50 | explode(lower_case(_paper), " ");
newspaper_box.c | 51 | add_adjective(bits);
newspaper_box.c | 62 | query_property("place");
newspaper_box.c | 64 | environment()->query_property("place");
newspaper_box.c | 66 | query_paper_cost(_paper);
newspaper_box.c | 67 | query_last_edition_num(_paper);
newspaper_box.c | 69 | add_failed_mess("There is no edition to buy.\n");
newspaper_box.c | 81 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
newspaper_box.c | 83 | clone_object("/obj/misc/newspaper");
newspaper_box.c | 84 | set_paper(_paper);
newspaper_box.c | 85 | set_edition(edition);
newspaper_box.c | 87 | move(environment(this_player()));
newspaper_box.c | 92 | this_player()->query_property("Paper " + _paper);
newspaper_box.c | 98 | this_player()->add_property("Paper " + _paper, editions);
newspaper_box.c | 101 | query_paper_cost(_paper));
newspaper_box.c | 104 | query_paper_cost(_paper));
newspaper_box.c | 107 | add_succeeded_mess("$N $V a paper from $D.\n");
newspaper_box.c | 112 | add_command("buy", "paper from <direct:object>", (: do_buy() :));
newspaper_box.c | 113 | add_command("pull", "[door] [on] <direct:object>", (: do_buy() :));
newspaper_box.c | 114 | add_command("pull", "open <direct:object>", (: do_buy() :));
present.c | 8 | do_wrap( object *things );
present.c | 9 | do_unwrap();
present.c | 18 | set_name( "wrappingpaper" );
present.c | 20 | set_short( "piece of wrapping paper" );
present.c | 21 | add_alias( "paper" );
present.c | 22 | add_adjective( ({ "piece of", "wrapping" }) );
present.c | 23 | set_main_plural( "pieces of wrapping paper" );
present.c | 26 | set_long( PAPER_LONG );
present.c | 28 | set_weight( 2 );
present.c | 29 | set_max_weight( 225 );
present.c | 30 | set_value( 600 );
present.c | 31 | set_stuck(1);
present.c | 32 | add_property( "writeable", 1 );
present.c | 33 | add_property( "paper", 1);
present.c | 49 | set_short( "piece of " + _colour + " " + _type + " paper" );
present.c | 50 | add_adjective( explode( _colour, " " ) );
present.c | 51 | set_main_plural( "pieces of " + _colour + " " + _type + " paper" );
present.c | 52 | set_long( PAPER_LONG );
present.c | 69 | set_short( "piece of " + _colour + " " + _type + " paper" );
present.c | 70 | add_adjective( explode( _type, " " ) );
present.c | 71 | set_main_plural( "pieces of " + _colour + " " + _type + " paper" );
present.c | 72 | set_long( PAPER_LONG );
present.c | 96 | add_command( "wrap", "<indirect:object:me> in <direct:object'present'>" );
present.c | 97 | add_command( "unwrap", "<direct:object:'present'>", (: do_unwrap :) );
present.c | 98 | add_command( "open", "<direct:object:'present'>", (: do_unwrap :) );
present.c | 110 | this_object() });
present.c | 113 | add_failed_mess( "The paper has already been used to wrap something.\n" );
present.c | 118 | add_failed_mess( "You must wrap something!\n" );
present.c | 123 | move( this_object() ) == MOVE_OK :) );
present.c | 128 | query_multiple_short( failed ) + " in " + the_short() + ".\n" );
present.c | 134 | remove_alias( "paper" );
present.c | 135 | remove_adjective( "piece of" );
present.c | 136 | remove_adjective( "wrapping" );
present.c | 137 | remove_plural( "pieces of wrapping paper" );
present.c | 138 | remove_plural( "pieces of paper" );
present.c | 139 | remove_plural( "papers" );
present.c | 141 | call_out( "set_short", 1, _colour + " present" );
present.c | 142 | add_alias( "present" );
present.c | 143 | set_main_plural( _colour + " presents" );
present.c | 144 | add_plural( "presents" );
present.c | 145 | set_long( PRESENT_LONG );
present.c | 147 | add_succeeded_mess( "$N $V $I in $D.\n", valid );
present.c | 149 | add_succeeded_mess( "" );
present.c | 165 | write( "There is nothing wrapped in the paper.\n" );
present.c | 171 | all_inventory();
present.c | 175 | sizeof( things );
present.c | 178 | move( environment( environment() ) );
present.c | 185 | remove_alias( "present" );
present.c | 186 | remove_plural( "presents" );
present.c | 188 | call_out( "set_short", 1, "piece of " + _colour + " " + _type + " paper" );
present.c | 189 | add_alias( "paper" );
present.c | 190 | add_adjective( ({ "piece of", "wrapping" }) );
present.c | 191 | set_main_plural( "pieces of " + _colour + " " + _type + " paper" );
present.c | 194 | set_long( PAPER_LONG );
present.c | 196 | add_succeeded_mess("$N unwrap$s $D.\n");
present.c | 222 | init_static_arg( args[ "::" ] );
present.c | 241 | init_dynamic_arg( args[ "::" ] );
dead_chicken.c | 18 | setup();
dead_chicken.c | 19 | init();
dead_chicken.c | 22 | query_dynamic_auto_load();
dead_chicken.c | 23 | init_dynamic_arg(mapping arg, object);
dead_chicken.c | 29 | set_name( "chicken" );
dead_chicken.c | 30 | set_short( "dead chicken" );
dead_chicken.c | 31 | add_alias( ({ "corpse", "chicken corpse" }) );
dead_chicken.c | 32 | add_adjective( "dead" );
dead_chicken.c | 33 | set_main_plural( "dead chickens" );
dead_chicken.c | 46 | set_weight( 8 );
dead_chicken.c | 47 | set_value( 300 );
dead_chicken.c | 48 | set_weight_per_bite( 2 );
dead_chicken.c | 53 | init();
dead_chicken.c | 69 | clone_object( CHICKEN_FEATHER );
dead_chicken.c | 71 | move( environment() );
dead_chicken.c | 76 | this_player() );
dead_chicken.c | 77 | notify_fail( "You pluck the bedraggled, dead chicken cheerfully.\n" );
dead_chicken.c | 88 | init_dynamic_arg(arg["::"]);
quest_info_utils.c | 52 | query_name();
quest_info_utils.c | 54 | query_player_quest_info(player, _quest_name);
quest_info_utils.c | 61 | set_player_quest_info(player, _quest_name, info);
quest_info_utils.c | 71 | query_name();
quest_info_utils.c | 73 | query_player_quest_info(player, _quest_name);
quest_info_utils.c | 86 | query_name();
quest_info_utils.c | 88 | set_player_quest_info(player, _quest_name, 0);
shop_owners_guide.c | 7 | set_name("book");
shop_owners_guide.c | 8 | set_short("brilliant vermillion book");
shop_owners_guide.c | 9 | add_adjective(({"brilliant", "vermillion"}));
shop_owners_guide.c | 10 | add_alias("guide");
shop_owners_guide.c | 15 | set_main_plural("brilliant vermillion books");
shop_owners_guide.c | 16 | set_weight(10);
shop_owners_guide.c | 17 | set_value(10);
shop_owners_guide.c | 19 | set_book_language( "general");
shop_owners_guide.c | 20 | set_book_dir("/save/books/shop_owner/page");
shop_owners_guide.c | 22 | set_open_page(0);
shop_owners_guide.c | 23 | set_ignore_saved_pages(1);
quill.c | 12 | do_scribble( object *things, string mess);
quill.c | 18 | set_name( "quill" );
quill.c | 21 | set_weight( 3 );
quill.c | 22 | set_value( 1000 );
quill.c | 23 | new_weapon( 240 );
quill.c | 24 | add_help_file("quill");
quill.c | 25 | set_damage_chance( 100 );
quill.c | 26 | add_attack( "stab", 90, ({ 10, 2, 10 }), "pierce", "sharp", 0 );
quill.c | 27 | add_property( "paper writer", 1 );
quill.c | 32 | add_command( "write", "on <indirect:object> with <direct:object>" );
quill.c | 33 | add_command( "write", "with <direct:object> on <indirect:object>" );
quill.c | 34 | add_command( "sign", "<indirect:object> with <direct:object>");
quill.c | 37 | do_scribble($1, $4[0]) :));
quill.c | 53 | filter(things, (: is_in_me_or_environment($1, this_player()) :));
quill.c | 60 | if ( sizeof( things ) >
quill.c | 61 | add_failed_mess("You can only $V on one object at once with $D.\n");
quill.c | 65 | add_failed_mess("You cannot $V on $I with $D.\n", things );
quill.c | 68 | this_player()->query_current_language();
quill.c | 82 | add_read_mess( mess, type, language, 0 );
quill.c | 83 | add_succeeded_mess("$N $V something on $I.\n", things);
quill.c | 95 | filter(things, (: is_in_me_or_environment($1, this_player()) :));
quill.c | 102 | if ( sizeof( things ) >
quill.c | 103 | add_failed_mess("You can only $V on one object at once with $D.\n");
quill.c | 107 | add_failed_mess("You cannot $V on $I with $D.\n", things );
quill.c | 110 | this_player()->query_current_language();
quill.c | 118 | add_failed_mess("You are already writing on $I with $D.\n", ({ writing_on }) );
quill.c | 121 | add_succeeded_mess("$N start$s writing on $I with $D.\n", things );
quill.c | 123 | call_out( "begin_writing", 0, this_player() );
quill.c | 132 | do_edit( 0, "end_writing" );
quill.c | 140 | the_short() +".\n" );
quill.c | 146 | this_player()->query_current_language();
quill.c | 148 | write( "You seem to have changed to using a non-written language.\n" );
quill.c | 155 | write( "You seem to have lost what you were writing on.\n" );
quill.c | 165 | this_player()->query_pronoun() +"'s lost something.\n" );
quill.c | 173 | this_player()->query_pronoun() +"'s lost something.\n" );
quill.c | 178 | add_read_mess( words, type, language, 0 );
quill.c | 180 | the_short() +".\n" );
quill.c | 182 | a_short() +".\n" );
quill.c | 195 | filter(things, (: is_in_me_or_environment($1, this_player()) :));
quill.c | 202 | if ( sizeof( things ) >
quill.c | 203 | add_failed_mess("You can only $V on one object at once with $D.\n");
quill.c | 207 | add_failed_mess("You cannot $V on $I with $D.\n", things );
quill.c | 211 | this_player()->query_current_language();
quill.c | 220 | add_succeeded_mess("$N $V $I with $D.\n", things);
quill.c | 231 | printf("-------- in_dir\n%O\n------- args\n%O\n", in_dir, args);
quill.c | 243 | write("You can only copy to/from one object at a time.\n");
quill.c | 274 | query_read_mess();
quill.c | 284 | sizeof(src_mess);
quill.c | 296 | for (c = random(perr);
quill.c | 296 | sizeof(mess);
quill.c | 298 | random(26);
quill.c | 300 | random(26);
quill.c | 306 | printf("%O\n", src_mess[i]);
quill.c | 307 | printf("--------\n%O\n", in_dir);
quill.c | 308 | add_read_mess(mess, type, lang, siz);
plate.c | 26 | create();
plate.c | 33 | set_name( "plate" );
plate.c | 34 | set_short( "plate" );
plate.c | 36 | set_long( "This is a nice plate for keeping food on.\n" );
plate.c | 40 | this_object()->setup();
plate.c | 41 | this_object()->reset();
plate.c | 53 | copy( obs );
plate.c | 55 | all_inventory();
plate.c | 58 | filter( food, (: $1->query_edible() :) );
plate.c | 76 | do_eat();
plate.c | 85 | int_query_static_auto_load();
paper_packet.c | 4 | set_name( "packet" );
paper_packet.c | 5 | set_short( "waxed paper packet" );
paper_packet.c | 6 | add_adjective( ({ "waxed", "paper" }) );
paper_packet.c | 7 | set_main_plural( "waxed paper packets" );
paper_packet.c | 10 | set_weight( 1 );
paper_packet.c | 11 | set_value( 10 );
paper_packet.c | 12 | set_max_weight( 3 );
paper_packet.c | 13 | set_transparent();
paper_packet.c | 14 | add_property("writeable", 1);
paper_packet.c | 21 | test_add( thing, flag );
paper_packet.c | 22 | all_inventory( this_object() );
paper_packet.c | 24 | test_add( thing, flag );
paper_packet.c | 25 | query_medium_alias();
paper_packet.c | 27 | test_add( thing, flag );
paper_packet.c | 30 | the_short() ) +", do you?\n" );
paper_packet.c | 36 | all_inventory( this_object() );
paper_packet.c | 45 | query_substance();
paper_packet.c | 47 | short( dark );
paper_packet.c | 48 | short( dark ) +" of "+ (string)thing->short( dark );
paper_packet.c | 52 | query_substance();
paper_packet.c | 54 | query_plural( dark );
paper_packet.c | 55 | query_plural( dark ) +" of "+ (string)thing->short( dark );
paper_packet.c | 59 | query_substance();
paper_packet.c | 61 | parse_command_id_list();
paper_packet.c | 63 | short( 0 ) +" of "+ (string)thing->short( 0 ) });
paper_packet.c | 67 | query_substance();
paper_packet.c | 69 | parse_command_plural_id_list();
paper_packet.c | 71 | query_plural( 0 ) +" of "+ (string)thing->short( 0 ) });
paper_packet.c | 75 | query_substance();
paper_packet.c | 77 | parse_command_adjectiv_id_list();
paper_packet.c | 80 | parse_command_id_list();
golem_toe.c | 10 | set_name( "toe" );
golem_toe.c | 11 | set_short( "remains of a clay toe" );
golem_toe.c | 12 | add_adjective( ({"remains", "of", "a", "clay"}) );
golem_toe.c | 13 | set_long( "This looks part of a toe made of clay.\n" );
golem_toe.c | 14 | set_main_plural( "remains of clay toes" );
golem_toe.c | 15 | set_weight( 5 );
golem_toe.c | 16 | set_value( 0 );
golem_toe.c | 17 | add_property( "no recycling", 1 );
golem_toe.c | 18 | add_property( "determinate", "the " );
animusser.c | 9 | set_name( "lever" );
animusser.c | 10 | set_short( "blue lever" );
animusser.c | 11 | add_adjective( "blue" );
animusser.c | 16 | reset_get();
animusser.c | 23 | this_player()->add_command( "pull", this_object() );
animusser.c | 29 | query_immediate_children( skill );
animusser.c | 32 | return (int)this_player()->query_skill( skill );
animusser.c | 35 | sizeof( others );
animusser.c | 36 | find_level( others[ i ] );
animusser.c | 41 | sizeof( others );
animusser.c | 47 | this_player()->query_skills();
animusser.c | 48 | m_indices( old_skills );
animusser.c | 50 | find_level( skill_names[ 0 ] );
animusser.c | 51 | delete( skill_names, 0, 1 );
animusser.c | 53 | reset_eval_cost();
animusser.c | 54 | m_indices( old_skills );
animusser.c | 55 | sizeof( skill_names );
animusser.c | 58 | write( "Adjusting "+ skill_names[ i ] +" by "+ adjust +".\n" );
animusser.c | 60 | this_player()->set_skills( new_skills + ([ ]) );
glass.c | 22 | create();
glass.c | 25 | set_name("glass");
glass.c | 26 | set_weight(1);
glass.c | 27 | set_value(400);
glass.c | 28 | set_stuck(1);
glass.c | 29 | set_leak_rate(0);
glass.c | 30 | set_material("glass");
glass.c | 31 | add_property("fragile", 200);
glass.c | 34 | this_object()->setup();
glass.c | 54 | clone_object("/obj/glass");
glass.c | 57 | move(this_object());
glass.c | 66 | make_glass("chocolate milkshake", "Yumm...", "shot glass", 100, 0);
glass.c | 83 | set_short( glass_size );
glass.c | 88 | explode( glass_size, " " );
glass.c | 90 | if (sizeof(glass_adjectives) >
glass.c | 91 | add_alias(glass_adjectives[<1..]);
glass.c | 93 | add_alias(glass_size);
glass.c | 95 | add_adjective(glass_adjectives);
glass.c | 96 | set_max_volume(amount);
glass.c | 99 | clone_object("/obj/reagents/generic_liquid.ob");
glass.c | 100 | set_name("drink");
glass.c | 101 | set_short(drink);
glass.c | 102 | set_long("This is some delicious looking " + drink + ".\n" );
glass.c | 103 | add_adjectives(explode(drink, " ")[0..<2]);
glass.c | 105 | explode( drink, " " ) ) - 1 ] );
glass.c | 106 | set_amount(amount);
glass.c | 107 | move(this_object());
glass.c | 123 | init_static_arg(map["::"]);
glass.c | 140 | int_query_static_auto_load();
glass.c | 141 | return ([ ]);
fire_cracker.c | 7 | set_name( "firecracker" );
fire_cracker.c | 8 | add_alias( "cracker" );
fire_cracker.c | 9 | add_adjective( "fire" );
fire_cracker.c | 10 | add_plural( "crackers" );
fire_cracker.c | 11 | set_short( "fire cracker" );
fire_cracker.c | 15 | set_weight( 2 );
fire_cracker.c | 16 | set_value( 500 );
fire_cracker.c | 17 | set_read_mess("ACME Firecracker", "agatean");
fire_cracker.c | 18 | add_property( "no recycling", 1 );
fire_cracker.c | 27 | environment();
fire_cracker.c | 32 | environment()->add_effect (EFFECT, DURATION);
fire_cracker.c | 38 | environment() );
fire_cracker.c | 41 | adjust_hp( -5000000 );
fire_cracker.c | 45 | attack_by( this_object() );
fire_cracker.c | 53 | move( "/room/rubbish" );
fire_cracker.c | 57 | call_out( (: explosion :), 10 );
fire_cracker.c | 70 | add_succeeded_mess( "$N $V $D on the ground.\n", ({ }) );
fire_cracker.c | 71 | move( environment( environment() ) );
fire_cracker.c | 81 | add_command( "light", "<direct:object:me>", (: do_light :) );
fire_cracker.c | 82 | add_command( "throw", "<direct:object:me>", (: do_throw :) );
board.c | 16 | do_read_next();
board.c | 17 | do_read_new();
board.c | 18 | do_read(int num);
board.c | 19 | do_followup(int num);
board.c | 20 | do_reply(int num);
board.c | 21 | do_eat(int num);
board.c | 22 | do_post(string str);
board.c | 25 | set_name("board");
board.c | 26 | set_short("bulletin board");
board.c | 27 | add_adjective("bulletin");
board.c | 28 | set_main_plural("boards");
board.c | 29 | reset_get();
board.c | 30 | add_property("there", "mounted on one wall");
board.c | 31 | add_property("survive fire", 1);
board.c | 32 | add_help_file("board");
board.c | 41 | get_subjects(board_name);
board.c | 54 | get_subjects(board_name);
board.c | 75 | lower_case(search);
board.c | 77 | get_subjects(board_name);
board.c | 79 | add_failed_mess("The board is completely empty.\n");
board.c | 82 | query_newsrc(this_player()->query_name());
board.c | 87 | sizeof(stuff);
board.c | 96 | the_date(stuff[i][B_TIME])+")");
board.c | 101 | the_date(stuff[i][B_TIME])+")");
board.c | 104 | this_player()->set_finish_func(0);
board.c | 105 | this_player()->more_string(ret);
board.c | 115 | get_subjects(board_name);
board.c | 127 | query_newsrc(this_player()->query_name());
board.c | 132 | sizeof(stuff);
board.c | 138 | the_date(stuff[i][B_TIME])+")");
board.c | 144 | the_date(stuff[i][B_TIME])+")");
board.c | 154 | add_command("read", "[new]", (: do_read_new :));
board.c | 155 | add_command("r", "[new]", (: do_read_new :));
board.c | 156 | add_command("read", "<number>", (: do_read($4[0]) :));
board.c | 157 | add_command("r", "<number>", (: do_read($4[0]) :));
board.c | 158 | add_command("read", "next", (: do_read_next :));
board.c | 161 | add_command("post", "<string'subject'>", (: do_post($4[0]) :));
board.c | 162 | add_command("note", "<string'subject'>", (: do_post($4[0]) :));
board.c | 163 | add_command("eat", "<number'message number'>", (: do_eat($4[0]) :));
board.c | 165 | do_followup($4[0]) :));
board.c | 166 | add_command("reply", "<number'message number'>", (: do_reply($4[0]) :));
board.c | 168 | add_command("subjects", "", (: do_subjects("") :));
board.c | 169 | add_command("subjects", "<string'search'>", (: do_subjects($4[0]) :));
board.c | 174 | add_commands();
board.c | 183 | this_player()->query_name();
board.c | 204 | query_newsrc(this_player()->query_name());
board.c | 208 | add_failed_mess("You have not read a note on this board yet!\n");
board.c | 212 | get_subjects(board_name);
board.c | 213 | sizeof(stuff);
board.c | 214 | this_player()->query_name();
board.c | 216 | write("last time: " + ctime(news_rc["last time"]) + "\n");
board.c | 223 | sscanf(sub, "Re:#%*d %s", sub);
board.c | 225 | sizeof(stuff);
board.c | 227 | sscanf(next_sub, "Re:#%*d %s", next_sub);
board.c | 229 | do_read(num);
board.c | 233 | add_failed_mess("No further notes in the thread \"" + sub + "\".\n");
board.c | 244 | query_newsrc(this_player()->query_name());
board.c | 248 | get_subjects(board_name);
board.c | 249 | sizeof(stuff);
board.c | 250 | this_player()->query_name();
board.c | 259 | add_failed_mess("No unread messages.\n");
board.c | 263 | do_read(num);
board.c | 270 | query_newsrc(this_player()->query_name());
board.c | 274 | get_subjects(board_name);
board.c | 279 | add_failed_mess("No note of that number.\n");
board.c | 289 | set_newsrc(this_player()->query_name(), news_rc);
board.c | 304 | add_succeeded_mess(({ "", "$N $V a note.\n" }), ({ }));
board.c | 305 | add_succeeded_mess("", ({ }));
board.c | 335 | string_edit("");
board.c | 341 | add_failed_mess("You cannot write to this board.\n");
board.c | 344 | new(class info_written);
board.c | 348 | this_player()->do_edit(0, "end_of_thing");
board.c | 360 | sprintf( "%-=78s", body ) + this_player()->append_signature();
board.c | 368 | printf( "Error writing message.\n" );
board.c | 370 | printf("Message posted.\n");
board.c | 371 | this_player()->adjust_sp(-50);
board.c | 374 | printf( "No message posted.\n" );
board.c | 376 | map_delete(being_written, this_player()->query_name());
board.c | 382 | add_failed_mess("Failed to eat note.\n");
board.c | 386 | printf("You viciously tear off and eat note %d.\n", num);
board.c | 390 | this_player() );
board.c | 400 | get_subjects(board_name);
board.c | 407 | add_failed_mess("No note of that number.\n", ({ }));
board.c | 425 | add_failed_mess("You cannot followup to this board.\n", ({ }));
board.c | 429 | new(class info_written);
board.c | 437 | printf("Include original post? (y/[n]) ");
board.c | 438 | input_to("include_post", 0, num - 1, stuff[num - 1]);
board.c | 446 | printf("No.\n");
board.c | 447 | this_player()->do_edit(0, "end_of_thing");
board.c | 452 | printf("No including notes for pointless and repeated abuse.\n");
board.c | 453 | this_player()->do_edit(0, "end_of_thing");
board.c | 467 | get_subjects(board_name);
board.c | 469 | add_failed_mess("No note of that number.\n", ({ }));
board.c | 472 | mail(stuff[num-1][B_NAME], stuff[num-1][B_SUBJECT]);
board.c | 485 | query_newsrc(this_player()->query_name());
board.c | 488 | get_subjects(board_name);
board.c | 491 | return (notes[sizeof(notes)-1][B_TIME] > news_rc[board_name]);
housing_creator.c | 16 | list_plans();
housing_creator.c | 19 | set_name("ball");
housing_creator.c | 20 | set_short("small jade ball");
housing_creator.c | 21 | add_adjective(({"small", "jade"}));
housing_creator.c | 22 | set_long("This non-descript jade ball can be used to make player houses.\n");
housing_creator.c | 23 | set_read_mess((: list_plans() :));
housing_creator.c | 24 | set_weight(1);
housing_creator.c | 25 | set_value(0);
housing_creator.c | 26 | seteuid("Room");
housing_creator.c | 33 | do_create($4[0], $4[1], $4[2], $4[3], $4[4], $4[5], 0, 1) :) );
housing_creator.c | 37 | do_create($4[0], $4[1], $4[2], $4[3], $4[4], $4[5], 0, 0) :) );
housing_creator.c | 41 | do_create($4[0], $4[1], $4[2], $4[3], $4[4], $4[5], 1, 1) :) );
housing_creator.c | 73 | sprintf("%-#*s", this_player()->query_cols(), str);
housing_creator.c | 90 | notify_fail("No such floor plan\n");
housing_creator.c | 93 | member_array(orientation, ORIENTATION);
housing_creator.c | 95 | notify_fail("No such orientation.\n");
housing_creator.c | 99 | notify_fail("No such location.\n");
housing_creator.c | 104 | add_failed_mess("Address must start with a number.\n");
housing_creator.c | 111 | while (address[i] != ' ');
housing_creator.c | 136 | replace_string(room, "N", number);
housing_creator.c | 138 | write("Error: file already exists: " + fname + ".\n");
housing_creator.c | 142 | read_file(PATH+type+"/"+room);
housing_creator.c | 144 | notify_fail("Error reading " + PATH+type+"/"+room + ".\n");
housing_creator.c | 148 | sizeof(ORIENTATION);
housing_creator.c | 149 | replace_string(tmp, "%"+i+"%", ORIENTATION[(i + orient) % 8]);
housing_creator.c | 153 | replace_string(tmp, "%N%", number);
housing_creator.c | 155 | replace_string(tmp, "%savedir%", "SAVE_DIR");
housing_creator.c | 175 | replace_string(tmp, "%out%", out);
housing_creator.c | 176 | replace_string(tmp, "%orientation%", "" + (orient % 2));
housing_creator.c | 177 | write("Writing " + fname + ".\n");
housing_creator.c | 178 | write_file(fname, tmp, 1);
housing_creator.c | 195 | map(files[tmp], (: ($1[<2..] == ".c"?$1[0..<3]:$1) :));
housing_creator.c | 198 | add_house(room, files[tmp], number + tmp + address, region, 1);
housing_creator.c | 199 | set_for_sale(room);
housing_creator.c | 214 | write("   add_exit(\"" + orientation + "\", \"" + tmp + "\", \"door\");
housing_creator.c | 215 | write("   \"" + tmp + "\"->setup_doors();
housing_creator.c | 218 | write("   add_exit(\"" + orientation + "\", \"" + tmp + "\", \"path\");
housing_creator.c | 223 | init_dynamic_arg(map);
housing_creator.c | 224 | set_read_mess( (: list_plans() :) );
nroff_paper.c | 12 | seteuid(getuid());
nroff_paper.c | 13 | create();
nroff_paper.c | 31 | unguarded( (: NROFF_HAND->cat_file(file_name+"_nroff", 1) :) );
nroff_paper.c | 33 | unguarded((: NROFF_HAND->create_nroff(file_name, file_name+"_nroff") :));
nroff_paper.c | 34 | unguarded( (: NROFF_HAND->cat_file(file_name+"_nroff", 1) :) );
nroff_paper.c | 49 | query_read_mess();
nroff_paper.c | 56 | query_dynamic_auto_load();
nroff_paper.c | 57 | query_read_mess();
paper.c | 13 | do_uncrumple();
paper.c | 14 | do_crumple();
paper.c | 15 | do_eat();
paper.c | 24 | create();
paper.c | 27 | set_name( "paper" );
paper.c | 28 | set_short( "piece of writing paper" );
paper.c | 29 | add_adjective( ({ "piece of", "writing" }) );
paper.c | 30 | set_main_plural( "pieces of writing paper" );
paper.c | 31 | add_plural( "pieces of writing paper" );
paper.c | 32 | add_adjective(({ "piece", "pieces", "of", "writing" }));
paper.c | 33 | set_long( "This is a nice sheet of writing paper.\n" );
paper.c | 34 | set_value( 25 );
paper.c | 35 | set_weight( 0 );
paper.c | 36 | add_property( "writeable", 1 );
paper.c | 37 | add_property( "paper", 1 );
paper.c | 38 | set_max_size( 1000 );
paper.c | 41 | this_object()->setup();
paper.c | 51 | add_command( "eat", "<direct:object>", (: do_eat :) );
paper.c | 52 | add_command( "crumple", "<direct:object>", (: do_crumple :) );
paper.c | 53 | add_command( "untangle", "<direct:object>", (: do_uncrumple :) );
paper.c | 54 | add_command( "uncrumple", "<direct:object>", (: do_uncrumple :) );
paper.c | 58 | add_origami_commands( this_player(), this_object() );
paper.c | 84 | add_failed_mess("$D is already crumpled.\n");
paper.c | 87 | query_short();
paper.c | 89 | call_out( (: set_short :), 1, "crumpled up " + query_short() );
paper.c | 97 | add_failed_mess("$D is already uncrumpled.\n");
paper.c | 104 | call_out( (: set_short :), 1, _old_short );
paper.c | 123 | move( "/room/rubbish" );
paper.c | 130 | query_readable_message(player, ignore_labels);
paper.c | 138 | parse_command_adjectiv_id_list() + ({ "crumpled", "up" });
paper.c | 140 | parse_command_adjectiv_id_list();
paper.c | 147 | query_dynamic_auto_load();
paper.c | 149 | add_auto_load_value( map, AUTO_LOAD_TAG, "crumpled", _crumpled );
paper.c | 150 | add_auto_load_value( map, AUTO_LOAD_TAG, "old short", _old_short );
paper.c | 157 | init_dynamic_arg(map);
paper.c | 160 | query_auto_load_value( map, AUTO_LOAD_TAG, "crumpled" );
paper.c | 161 | query_auto_load_value( map, AUTO_LOAD_TAG, "old short" );
paper.c | 178 | return ([ ]);
paper.c | 179 | int_query_static_auto_load();
lantern.c | 32 | set_name( "lantern" );
lantern.c | 33 | set_main_plural( "lanterns");
lantern.c | 34 | set_short( "lantern" );
lantern.c | 35 | add_help_file("torch");
lantern.c | 50 | set_weight( 60 );
lantern.c | 51 | set_value( 150 );
club_badge.c | 11 | club_members(int online);
club_badge.c | 12 | do_recruit(object *players, string club);
club_badge.c | 13 | club_chat(string str, int emote);
club_badge.c | 14 | club_members(int online);
club_badge.c | 15 | club_info();
club_badge.c | 16 | do_history();
club_badge.c | 24 | set_name("badge");
club_badge.c | 25 | add_adjective("club");
club_badge.c | 26 | set_type("badge");
club_badge.c | 27 | set_short("club badge");
club_badge.c | 28 | setup_clothing(1000);
club_badge.c | 29 | set_damage_chance(5);
club_badge.c | 32 | add_extra_look(this_object());
club_badge.c | 44 | replace(lower_case(query_club()), " ", "_");
club_badge.c | 54 | init();
club_badge.c | 55 | init();
club_badge.c | 60 | query_dynamic_auto_load();
club_badge.c | 61 | query_dynamic_auto_load(map);
club_badge.c | 69 | init_dynamic_arg(map["::"]);
club_badge.c | 71 | init_dynamic_arg(map);
club_badge.c | 73 | init_dynamic_arg(map);
club_badge.c | 80 | set_short("club badge");
club_badge.c | 83 | query_club_name(name);
club_badge.c | 84 | explode(lower_case(name), " ");
club_badge.c | 87 | set_short(name + " club badge");
club_badge.c | 89 | set_short("club badge");
club_badge.c | 93 | set_club(name);
club_badge.c | 105 | stats();
menu.c | 4 | do_read();
menu.c | 9 | create();
menu.c | 10 | set_name("menu");
menu.c | 11 | set_long("This is a menu.\n");
menu.c | 12 | reset_get();
menu.c | 17 | add_read_mess(our_pub->read(), "printed letters", our_pub->query_language());
menu.c | 23 | this_player()->add_command( "list", this_object(), "" );
menu.c | 30 | read();
menu.c | 31 | query_language();
menu.c | 33 | garble_text(lang, mess, this_object(), player);
menu.c | 38 | write(query_readable_message(this_player()));
menu.c | 39 | add_succeeded_mess(({ "", "$N read$s $D.\n" }));
golem_finger.c | 10 | set_name( "fingertip" );
golem_finger.c | 11 | set_short( "broken clay fingertip" );
golem_finger.c | 12 | add_adjective( ({"broken", "clay"}) );
golem_finger.c | 15 | set_main_plural( "broken clay fingertips" );
golem_finger.c | 16 | set_weight( 5 );
golem_finger.c | 17 | set_value( 0 );
golem_finger.c | 18 | add_property( "no recycling", 1 );
wallpaper_glue.c | 19 | add_glue();
wallpaper_glue.c | 23 | set_name("glue");
wallpaper_glue.c | 24 | set_short("pot of wallpapering glue");
wallpaper_glue.c | 25 | add_adjective( ({ "pot", "of", "wallpapering", "wallpaper" }) );
wallpaper_glue.c | 26 | add_alias("pot");
wallpaper_glue.c | 27 | add_plural("pots");
wallpaper_glue.c | 28 | set_max_volume(VOLUME);
wallpaper_glue.c | 33 | set_value(480);
wallpaper_glue.c | 34 | set_closed();
wallpaper_glue.c | 42 | clone_object( "/obj/reagents/generic_liquid.ob" );
wallpaper_glue.c | 43 | set_name( "glue" );
wallpaper_glue.c | 44 | set_short( "sticky white wallpapering glue" );
wallpaper_glue.c | 47 | set_amount( VOLUME );
wallpaper_glue.c | 48 | set_continuous();
wallpaper_glue.c | 52 | set_pile_name( "puddle" );
wallpaper_glue.c | 53 | add_eat_effect( "/std/effects/ingested/poison", 10 );
wallpaper_glue.c | 54 | move( this_object() );
top_ten_tables.c | 5 | generate_list( mixed *args );
top_ten_tables.c | 6 | generate_table_message();
top_ten_tables.c | 13 | set_name( "table" );
top_ten_tables.c | 14 | set_short( "top ten table" );
top_ten_tables.c | 17 | add_adjective( ({ "top", "ten", "score" }) );
top_ten_tables.c | 18 | reset_get();
top_ten_tables.c | 19 | add_property( "there", "in one corner" );
top_ten_tables.c | 20 | add_property( "survive fire", 1 );
top_ten_tables.c | 22 | call_out( "setup_read_mess", 5 );
top_ten_tables.c | 23 | call_out("dest_me", 30);
top_ten_tables.c | 35 | add_read_mess((: generate_table_message() :), 0, language, 0);
top_ten_tables.c | 43 | query_ordered_table( table_name );
top_ten_tables.c | 83 | sizeof( args );
top_ten_tables.c | 88 | convert_age( args[ i ][ TOP_TEN_AGE ] ) );
chicken_feather.c | 13 | set_name("feather");
chicken_feather.c | 14 | set_short("chicken feather");
chicken_feather.c | 15 | set_main_plural("chicken feathers");
chicken_feather.c | 16 | add_adjective("chicken");
chicken_feather.c | 17 | add_plural("feathers");
chicken_feather.c | 18 | add_adjective("chicken");
chicken_feather.c | 19 | set_weight(1);
chicken_feather.c | 20 | set_long("This is a feather that was plucked from a chicken.\n");
ink_well.c | 4 | create();
ink_well.c | 5 | set_name("well");
ink_well.c | 6 | add_adjective("ink");
ink_well.c | 7 | set_short("ink well");
ink_well.c | 8 | set_long("A nice, small ink well.\n");
ink_well.c | 9 | set_value( 500 );
ink_well.c | 10 | set_leak_rate(0);
ink_well.c | 11 | set_max_volume(250);
ink_well.c | 12 | set_volume(200);
ink_well.c | 13 | set_water_volume(200);
ink_well.c | 14 | set_ps_coord_quantity((int *)"/std/effects/other/ink"->query_coordinate(), 200);
watch.c | 14 | get_text(string line);
watch.c | 17 | set_name("watch");
watch.c | 18 | add_adjective("demonic");
watch.c | 19 | add_alias("watch");
watch.c | 20 | set_main_plural("demonic watches");
watch.c | 21 | set_short("demonic watch");
watch.c | 25 | set_value(20000);
watch.c | 28 | time();
watch.c | 29 | call_out("check_alarm",60);
watch.c | 49 | add_command("time", "");
watch.c | 50 | add_command("gmt", "<word'offset'>", (:this_object()->set_gmt($4[0]):));
watch.c | 51 | add_command("use", "<direct:object>", (:this_object()->use():));
watch.c | 52 | this_player()->add_command("read", this_object());
watch.c | 63 | write("What do you wish to do ? ");
watch.c | 64 | input_to("the_command");
watch.c | 73 | write("Thank you for using this wonderful watch.\n");
watch.c | 80 | write("Usage: set <name> <hour>:<min> [+]\n");
watch.c | 86 | write("Oooooopps, you cannot use that name as an alarm\n");
watch.c | 95 | get_text();
watch.c | 103 | write("Usage: remove <name>\n");
watch.c | 106 | write("You must remove an existing alarm\n");
watch.c | 109 | write("Ohhh dear.\n");
watch.c | 111 | delete(alarms,i);
watch.c | 112 | delete(alarms,i);
watch.c | 113 | delete(alarms,i);
watch.c | 114 | delete(alarms,i);
watch.c | 120 | sizeof(alarms);
watch.c | 121 | write("Alarm "+alarms[i]+" is set for "+alarms[i+1]+":"+alarms[i+2]+"\n");
watch.c | 125 | write("That alarm does not exist.\n");
watch.c | 128 | write("Bing basicly");
watch.c | 142 | off (. to finish)"));
watch.c | 145 | write("What do you wish to do ? ");
watch.c | 146 | input_to("the_command");
watch.c | 150 | write("] ");
watch.c | 151 | input_to("get_text");
watch.c | 175 | time();
watch.c | 177 | sizeof(alarms);
watch.c | 185 | explode(alarms[i+3],"\n");
watch.c | 196 | set_heart_beat(1);
watch.c | 200 | call_out("check_alarm",60);
watch.c | 208 | set_heart_beat(0);
watch.c | 214 | move(ob);
watch.c | 215 | environment();
grinder.c | 7 | test_add(object ob, int flag);
grinder.c | 8 | do_grind( string what );
grinder.c | 9 | do_empty(object *dest, string me, string him, string prep);
grinder.c | 10 | set_max_grindable( int i );
grinder.c | 11 | query_max_grindable();
grinder.c | 12 | long_status();
grinder.c | 18 | set_name( "grinder" );
grinder.c | 19 | set_short( "food grinder" );
grinder.c | 20 | add_adjective( "food" );
grinder.c | 21 | set_main_plural( "food grinders" );
grinder.c | 26 | set_value( 4000 );
grinder.c | 27 | set_weight( 100 );
grinder.c | 28 | set_max_weight( 100 );
grinder.c | 35 | do_grind( $4[0] ) :) );
grinder.c | 39 | do_grind( $1[0] ) :) );
grinder.c | 41 | add_command( "empty", "<direct:object>" );
grinder.c | 46 | first_inventory();
grinder.c | 61 | this_player() }) );
grinder.c | 76 | add_failed_mess( "$D isn't empty.\n" );
grinder.c | 85 | query_amount() >
grinder.c | 86 | query_weight() >
grinder.c | 87 | add_failed_mess( "You cannot grind that much with $D at once.\n" );
grinder.c | 91 | transform( thing, "grind" );
grinder.c | 93 | add_failed_mess( "You cannot $V $I in $D.\n", ({ thing }) );
grinder.c | 97 | move( "/room/rubbish" );
grinder.c | 101 | move( environment( this_player() ) );
grinder.c | 116 | first_inventory( this_object() );
grinder.c | 119 | add_failed_mess( "There is nothing in $D.\n" );
grinder.c | 124 | move( environment( this_player() ) );
top_clubs.c | 12 | _long();
top_clubs.c | 15 | set_name( "table" );
top_clubs.c | 16 | set_short( "top club table" );
top_clubs.c | 19 | add_adjective( ({ "top", "club", "score" }) );
top_clubs.c | 20 | reset_get();
top_clubs.c | 21 | add_property( "there", "in one corner" );
top_clubs.c | 22 | add_property( "survive fire", 1 );
top_clubs.c | 27 | call_out("setup_read_mess", 5);
top_clubs.c | 31 | add_read_mess((: _long() :), 0, _lang, 0);
top_clubs.c | 44 | query_club_name(str);
top_clubs.c | 54 | query_club_info();
top_clubs.c | 73 | file_size($1 + ".c") >
top_clubs.c | 74 | strcmp($1->query_name(), $2->query_name()) :));
top_clubs.c | 80 | club_name(bing));
wallpaper.c | 19 | do_paper(string indirect, object pot);
wallpaper.c | 23 | set_name( "wallpaper" );
wallpaper.c | 24 | set_short( "roll of wallpaper" );
wallpaper.c | 25 | set_main_plural( "rolls of wallpaper");
wallpaper.c | 26 | add_adjective( ({ "roll", "of"}));
wallpaper.c | 27 | add_plural_adjective("rolls");
wallpaper.c | 28 | add_alias(({"paper"}));
wallpaper.c | 31 | set_value( 480 );
wallpaper.c | 32 | set_weight( 10 );
wallpaper.c | 40 | set_short( "roll of " + _design + " wallpaper" );
wallpaper.c | 41 | set_main_plural( "rolls of " + _design + " wallpaper");
wallpaper.c | 42 | add_adjective( ({ _design })) ;
wallpaper.c | 55 | do_paper( $4[1], $1[1][0] ) :));
wallpaper.c | 77 | printf(pot->what_to_paint());
wallpaper.c | 79 | printf("Help: paste " + pot->short() + " with wallpaper\n");
wallpaper.c | 83 | match_objects_for_existence("glue", pot);
wallpaper.c | 130 | remove_volume(pot->query_volume());
wallpaper.c | 131 | this_object()->move("/room/rubbish");
wallpaper.c | 147 | int_query_static_auto_load();
wallpaper.c | 158 | int_query_static_auto_load();
wallpaper.c | 159 | return ([ ]);
wallpaper.c | 168 | init_static_arg(args["::"]);
wallpaper.c | 174 | make_roll(_design);
detabber.c | 4 | set_name("detabber");
detabber.c | 11 | this_player()->add_command("detab",this_object(),"<string>");
detabber.c | 21 | sprintf("\t");
detabber.c | 23 | read_file(args[0]);
detabber.c | 26 | replace_string(file,"\t","    ");
detabber.c | 27 | write_file(args[0],file,1);
golem_corpse.c | 11 | make_fragments();
golem_corpse.c | 15 | set_name( "rubble" );
golem_corpse.c | 16 | set_short( "heap of clay rubble" );
golem_corpse.c | 17 | add_alias( ({"heap", "clay"}) );
golem_corpse.c | 18 | add_adjective( ({"heap of", "clay"}) );
golem_corpse.c | 19 | set_main_plural( "heaps of clay rubble" );
golem_corpse.c | 20 | add_plural( "heaps" );
golem_corpse.c | 22 | set_weight( 40000 );
golem_corpse.c | 23 | set_max_weight( 50000 );
golem_corpse.c | 24 | set_value( 0 );
golem_corpse.c | 25 | set_stuck( 1 );
golem_corpse.c | 26 | make_fragments();
golem_corpse.c | 27 | add_property( "no recycling", 1 );
golem_corpse.c | 32 | random( 8 );
golem_corpse.c | 39 | move( this_object() );
golem_corpse.c | 43 | move( this_object() );
golem_corpse.c | 47 | move( this_object() );
golem_corpse.c | 51 | move( this_object() );
golem_corpse.c | 58 | query_multiple_short( all_inventory( this_object() ) );
football.c | 6 | set_name("football");
football.c | 7 | set_short("leather football");
football.c | 8 | add_adjective("leather");
football.c | 9 | add_alias("ball");
football.c | 12 | set_weight(10);
football.c | 13 | set_value(1);
football.c | 14 | add_plural("footballs");
football.c | 15 | add_plural("balls");
football.c | 21 | add_command( "kickup", "<direct:object>" );
football.c | 22 | init();
football.c | 32 | this_player());
football.c | 42 | this_object()->query_short()+" at you, but it falls on the floor.\n");
football.c | 45 | this_player() }) );
football.c | 46 | move(environment(in_dir[0]));
football.c | 58 | random (6) ]+"\n");
football.c | 71 | this_player() }));
football.c | 73 | this_player()->add_succeeded(in_dir[0..0]);
wearable_pet.c | 16 | wear_remove_function(object);
wearable_pet.c | 23 | evaluate( str, this_object() );
wearable_pet.c | 26 | if(strsrch(str, "$name$") >
wearable_pet.c | 27 | query_random_gossip();
wearable_pet.c | 31 | expand_string(str, 0);
wearable_pet.c | 35 | explode(str[ 1..], ":");
wearable_pet.c | 38 | call_other( this_object(), args[0] );
wearable_pet.c | 41 | call_other( this_object(), args[0], args[1] );
wearable_pet.c | 44 | call_other( this_object(), args[0], args[1], args[2] );
wearable_pet.c | 67 | environment(environment());
wearable_pet.c | 70 | tell_room( room,  str +"\n" );
wearable_pet.c | 72 | environment();
wearable_pet.c | 74 | tell_room( room, expand_string( str, 0 ) +"\n" );
wearable_pet.c | 92 | check_anyone_here();
wearable_pet.c | 100 | this_player()->query_wearing();
wearable_pet.c | 104 | previous_object()->init_command(sprintf("kill %O",worn));
wearable_pet.c | 115 | create();
wearable_pet.c | 116 | create();
wearable_pet.c | 120 | long(str, dark);
wearable_pet.c | 124 | init_dynamic_arg(map);
wearable_pet.c | 125 | init_dynamic_arg(map);
wearable_pet.c | 131 | query_dynamic_auto_load();
wearable_pet.c | 135 | init_static_arg(map);
wearable_pet.c | 136 | init_static_arg(map);
wearable_pet.c | 141 | query_static_auto_load();
wearable_pet.c | 146 | query_base_value();
wearable_pet.c | 150 | stats() + monster::stats();
wearable_pet.c | 159 | do_death();
wearable_pet.c | 163 | health_string();
wearable_pet.c | 167 | adjust_hp( i );
wearable_pet.c | 174 | adjust_hp( number, attacker, weapon, attack);
wearable_pet.c | 178 | set_max_cond(number);
wearable_pet.c | 179 | set_cond(number);
wearable_pet.c | 180 | set_damage_chance( 15 );
wearable_pet.c | 181 | set_lowest_cond(1);
wearable_pet.c | 182 | set_max_hp(number);
frisbee.c | 6 | set_name("frisbee");
frisbee.c | 7 | set_short("black frisbee");
frisbee.c | 8 | add_adjective("black");
frisbee.c | 12 | add_property("feeding_frenzy", "frisbee");
frisbee.c | 13 | set_weight(10);
frisbee.c | 14 | set_value(200);
frisbee.c | 15 | set_main_plural("black frisbees");
frisbee.c | 16 | add_plural("frisbees");
frisbee.c | 35 | this_object()->short()+" at you, but it falls on the floor.\n");
frisbee.c | 38 | this_player() }) );
frisbee.c | 39 | move(environment(in_dir[0]));
frisbee.c | 46 | this_player() }));
frisbee.c | 48 | this_player()->add_succeeded(in_dir[0..0]);
mailer_ob.c | 3 | do_mail(string str);
mailer_ob.c | 6 | set_name("mailer");
mailer_ob.c | 7 | set_short( "mailer object" );
mailer_ob.c | 11 | set_weight(1);
mailer_ob.c | 12 | reset_drop();
mailer_ob.c | 16 | add_command("mail", "", (: do_mail(0) :) );
mailer_ob.c | 17 | add_command("mail", "<string>", (: do_mail($4[0]) :) );
mailer_ob.c | 21 | return (int)"/obj/handlers/mail_track"->mail(str);
lock.c | 10 | add_help_file("door_lock");
lock.c | 12 | create();
lock.c | 15 | this_object()->setup();
lock.c | 16 | this_object()->reset();
lock.c | 41 | notify_fail("This lock is not suitable for a door.\n");
lock.c | 47 | notify_fail("This lock is not suitable for furniture.\n");
lock.c | 50 | notify_fail("This lock is not suitable for safes.\n");
lock.c | 56 | notify_fail("You cannot change the locks here.\n");
lock.c | 65 | notify_fail("Sorry, that object can't take a lock.\n");
lock.c | 83 | set_key(lock->query_property("key prop"));
lock.c | 84 | set_difficulty(lock->query_property("difficulty"));
lock.c | 85 | set_lock_owner(environment(this_player())->query_owner());
lock.c | 86 | set_trap_armed(0);
lock.c | 90 | load_object(item->query_dest());
lock.c | 91 | query_other_id();
lock.c | 93 | modify_exit(other_id, ({ "key", lock->query_property("key prop")}));
lock.c | 95 | query_property("difficulty")}));
lock.c | 100 | environment(this_player())->update_doors();
lock.c | 101 | update_doors();
lock.c | 102 | environment(this_player())->do_save();
lock.c | 103 | do_save();
lock.c | 106 | clone_object("/std/object");
lock.c | 107 | set_name("lock");
lock.c | 108 | set_short("busted lock");
lock.c | 109 | add_adjective("busted");
lock.c | 110 | set_main_plural("busted locks");
lock.c | 111 | set_long("A broken door lock.\n");
lock.c | 112 | set_value(0);
lock.c | 113 | set_weight(lock->query_weight());
lock.c | 114 | move(environment());
lock.c | 116 | dest_me();
lock.c | 128 | int_query_static_auto_load();
lock.c | 129 | return ([ ]);
fountain.c | 30 | set_name( "fountain" );
fountain.c | 31 | set_short( "fountain" );
fountain.c | 32 | set_long( "This is a fountain.\n" );
fountain.c | 33 | set_max_volume( FOUNTAIN_SIZE );
fountain.c | 34 | set_weight( 100000 );
fountain.c | 35 | set_stuck( 1 );
fountain.c | 49 | error( "Path not set in initialise.\n" );
fountain.c | 60 | call_out( "make_water", 5 );
fountain.c | 75 | error( "Path not set in initialise.\n" );
fountain.c | 97 | query_multiple_short( all_inventory() ), this_object()->the_short() ) );
fountain.c | 98 | remove_volume( -VOLUME_QUART * random( 4 ) * 2 );
fountain.c | 101 | clone_object( _liquid_path );
fountain.c | 102 | set_amount( _liquid_volume );
fountain.c | 105 | call_out( (: $(water)->move( this_object() ) :), 1 );
fountain.c | 111 | this_object()->the_short() ) );
fountain.c | 116 | this_object()->the_short() ) );
fountain.c | 121 | this_object()->the_short() ) );
fountain.c | 126 | this_object()->the_short() ) );
fountain.c | 131 | this_object()->the_short() ) );
fountain.c | 134 | call_out( "make_water", _time );
shell.c | 9 | set_weight(10);
shell.c | 10 | set_value(5);
shell.c | 11 | set_name("shell");
shell.c | 12 | add_adjective("sea");
shell.c | 13 | add_alias("seashell");
shell.c | 14 | set_short("sea shell");
shell.c | 21 | this_player()->add_command("blow", this_object());
shell.c | 24 | finish_quest();
shell.c | 28 | write("Blow "+short(0)+" "+prep+" "+indir->short(0)+"????\n");
shell.c | 32 | finish_quest();
shell.c | 33 | add_succeeded_mess("$N $V $D and make$s a horrible noise.\n");
shell.c | 43 | write("The "+short(0)+" blows amazing loudly.\n");
shell.c | 47 | write("Demons glare at you.\n");
shell.c | 48 | say("Demons glare at "+this_player()->one_short()+".\n");
shell.c | 51 | all_inventory(environment(this_player()));
shell.c | 53 | map_array(obs, "bingle_bit", this_object());
shell.c | 68 | match_objects_for_existence("cauldrons", environment(this_player()));
shell.c | 69 | sizeof(obs2);
shell.c | 72 | query_misc_attrs();
shell.c | 92 | match_objects_for_existence("toadstools", environment(this_player()));
shell.c | 93 | filter_array(obs2, "bongle_array", this_object());
shell.c | 98 | write("A bunch of hungry looking demons show up.\n");
shell.c | 99 | write("They look around the clearing.\n");
shell.c | 100 | write("Mutter to themselves about there being "+failure+".\n");
shell.c | 101 | write("Demon glares at you.\n");
shell.c | 102 | say("A bunch of hungry looking demons show up.\n");
shell.c | 103 | say("They look around the clearing.\n");
shell.c | 104 | say("Mutter to themselves about there being "+failure+".\n");
shell.c | 105 | say("Demon glares at "+this_player()->one_short()+".\n");
shell.c | 108 | allocate(4);
shell.c | 109 | sizeof(demons);
shell.c | 110 | clone_object("/std/container");
shell.c | 111 | set_name("demon");
shell.c | 112 | reset_get();
shell.c | 115 | move(environment(this_player()));
shell.c | 116 | move(demons[i]);
shell.c | 118 | reset_get();
shell.c | 119 | reset_get();
shell.c | 120 | dest_me();
shell.c | 121 | move(demons[2]);
shell.c | 122 | move(demons[1]);
shell.c | 128 | call_out("do_finish_it", 10);
shell.c | 152 | dest_me();
shell.c | 153 | dest_me();
shell.c | 154 | all_inventory(environment(demons[0]));
shell.c | 155 | sizeof(obs);
shell.c | 159 | adjust_xp(5000);
shell.c | 161 | sizeof(demons);
shell.c | 162 | all_inventory(demons[i]);
shell.c | 163 | sizeof(obs);
shell.c | 164 | dest_me();
shell.c | 165 | dest_me();
shell.c | 171 | return (mixed)ob->query_property("feeding_frenzy");
suggestion_box.c | 9 | do_fill();
suggestion_box.c | 16 | set_short( "suggestion box" );
suggestion_box.c | 22 | set_name( "box" );
suggestion_box.c | 23 | set_main_plural( "boxes" );
suggestion_box.c | 24 | set_read_mess( "\nPlease fill in a suggestion form", "common" );
suggestion_box.c | 25 | add_property( "there", "sitting in the middle of the floor" );
suggestion_box.c | 26 | set_weight( 1000 );
suggestion_box.c | 27 | reset_get();
suggestion_box.c | 34 | add_command( "fill", "in a suggestion form", (: do_fill() :) );
suggestion_box.c | 94 | tell_object( this_player(), "Please fill in your suggestion below.\n" );
suggestion_box.c | 95 | this_player()->do_edit( 0, "end_suggestion", this_object() );
suggestion_box.c | 113 | previous_object()->query_name();
suggestion_box.c | 114 | sprintf( query_save_dir() + "/%s-%d.txt", player, time() );
suggestion_box.c | 117 | debug_printf( "File: %s", file );
board_rab.c | 6 | do_transfer(int num, string str);
board_rab.c | 8 | do_store(int num, string str);
board_rab.c | 9 | do_storeall(string str);
board_rab.c | 10 | do_minimum(int num);
board_rab.c | 11 | do_maximum(int num);
board_rab.c | 12 | do_timeout(int num);
board_rab.c | 13 | do_add(string str);
board_rab.c | 14 | do_remove(string str);
board_rab.c | 15 | do_board(string str);
board_rab.c | 16 | do_archive(string str);
board_rab.c | 17 | do_killfile(string str);
board_rab.c | 18 | do_unkillfile(string str);
board_rab.c | 21 | setup();
board_rab.c | 22 | add_alias("board master");
board_rab.c | 24 | reset_drop();
board_rab.c | 25 | set_get();
board_rab.c | 37 | get_subjects(board_name);
board_rab.c | 39 | query_minimum(board_name);
board_rab.c | 43 | query_maximum(board_name);
board_rab.c | 46 | query_timeout(board_name);
board_rab.c | 49 | query_archive(board_name);
board_rab.c | 67 | this_player()->query_property(NEWS_RC);
board_rab.c | 70 | sizeof(stuff);
board_rab.c | 74 | the_date(stuff[i][B_TIME])+")");
board_rab.c | 78 | the_date(stuff[i][B_TIME])+")");
board_rab.c | 86 | add_commands();
board_rab.c | 87 | add_command("store", "<number> <word>", (: do_store($4[0], $4[1]) :));
board_rab.c | 88 | add_command("storeall", "<word>", (: do_storeall($4[0]) :));
board_rab.c | 89 | add_command("next", "");
board_rab.c | 90 | add_command("prev", "");
board_rab.c | 91 | add_command("new", "");
board_rab.c | 92 | add_command("board", "<string>", (: do_board($4[0]) :));
board_rab.c | 93 | add_command("boards", "");
board_rab.c | 94 | add_command("killfile", "<string>", (: do_killfile($4[0]) :));
board_rab.c | 95 | add_command("unkillfile", "<string>",(: do_unkillfile($4[0]) :));
board_rab.c | 96 | add_command("listkillfile", "");
board_rab.c | 97 | add_command("security", "");
board_rab.c | 98 | add_command("sadd", "<word>", (: do_add($4[0]) :));
board_rab.c | 99 | add_command("sremove", "<word>", (: do_remove($4[0]) :));
board_rab.c | 100 | add_command("timeout", "<number>", (: do_timeout($4[0]) :));
board_rab.c | 101 | add_command("minimum", "<number>", (: do_minimum($4[0]) :));
board_rab.c | 102 | add_command("maximum", "<number>", (: do_maximum($4[0]) :));
board_rab.c | 103 | add_command("archive", "<word>", (: do_archive($4[0]) :));
board_rab.c | 104 | add_command("summary", "");
board_rab.c | 105 | add_command("skip", "");
board_rab.c | 106 | add_command("arts", "");
board_rab.c | 108 | do_transfer($4[0], $4[1]) :));
board_rab.c | 119 | seteuid( geteuid( this_player() ) );
board_rab.c | 120 | this_player()->query_name();
board_rab.c | 124 | list_of_boards();
board_rab.c | 126 | this_player()->query_property(NEWS_RC);
board_rab.c | 129 | add_failed_mess("Unable to save the file "+file+"\n");
board_rab.c | 132 | sizeof(boards);
board_rab.c | 134 | get_subjects(boards[i]);
board_rab.c | 139 | lower_case(stuff[amt][B_NAME]) != their_name);
board_rab.c | 142 | write_file(file,"\n----> Bulletin Board Name: "+boards[i]+"\n\n\n");
board_rab.c | 144 | sizeof(stuff);
board_rab.c | 149 | get_message(boards[i], j)+"\n\n\n");
board_rab.c | 152 | printf("Storing ");
board_rab.c | 154 | printf(".");
board_rab.c | 163 | this_player()->add_property(NEWS_RC, news_rc);
board_rab.c | 171 | get_subjects(board_name);
board_rab.c | 173 | add_failed_mess("Invalid note number.\n");
board_rab.c | 180 | add_failed_mess("The master object appears and prevents you.\n");
board_rab.c | 195 | list_of_boards();
board_rab.c | 199 | sizeof(boards);
board_rab.c | 210 | list_of_boards();
board_rab.c | 214 | sizeof(boards))%sizeof(boards);
board_rab.c | 222 | this_player()->add_property( "news_kill_" +lower_case( arg ), 1 );
board_rab.c | 223 | add_succeeded_mess(this_object(), ({ "Board "+arg+" killed.\n", "" }), ({}));
board_rab.c | 229 | add_failed_mess("Board "+arg+" is not kill file anyway.\n");
board_rab.c | 232 | this_player()->remove_property( "news_kill_" +lower_case( arg ) );
board_rab.c | 249 | query_multiple_short( boards ) +".\n" );
board_rab.c | 250 | add_succeeded_mess(this_object(), "", ({ }));
board_rab.c | 261 | list_of_boards();
board_rab.c | 262 | this_player()->query_name();
board_rab.c | 264 | this_player()->query_property(NEWS_RC);
board_rab.c | 266 | sizeof(boards);
board_rab.c | 268 | get_subjects(boards[i]);
board_rab.c | 275 | lower_case(stuff[amt][B_NAME]) != their_name);
board_rab.c | 281 | sizeof( stuff ) - amt ) >
board_rab.c | 287 | add_failed_mess("No boards with new messages.\n");
board_rab.c | 295 | list_of_boards();
board_rab.c | 296 | member_array(str, boards);
board_rab.c | 298 | add_failed_mess("The board "+str+" does not exist sorry.\n");
board_rab.c | 316 | implode((string *)BOARD_HAND->query_security(board_name), ", ")+"\n");
board_rab.c | 324 | return (int)BOARD_HAND->add_allowed(board_name, name);
board_rab.c | 331 | return (int)BOARD_HAND->remove_allowed(board_name, name);
board_rab.c | 338 | return (int)BOARD_HAND->set_timeout(board_name, i);
board_rab.c | 345 | return (int)BOARD_HAND->set_minimum(board_name, i);
board_rab.c | 352 | return (int)BOARD_HAND->set_maximum(board_name, i);
board_rab.c | 359 | return (int)BOARD_HAND->set_archive(board_name, name);
board_rab.c | 360 | return (int)BOARD_HAND->set_archive(board_name);
board_rab.c | 367 | move(dest, s1, s2);
board_rab.c | 369 | move(dest, s1, s2);
board_rab.c | 372 | seteuid(geteuid(dest));
board_rab.c | 375 | move(dest, s1, s2);
board_rab.c | 393 | list_of_boards();
board_rab.c | 395 | this_player()->query_property(NEWS_RC);
board_rab.c | 396 | this_player()->query_name();
board_rab.c | 397 | sizeof(boards);
board_rab.c | 399 | get_subjects(boards[i]);
board_rab.c | 404 | lower_case(stuff[amt][B_NAME]) != their_name);
board_rab.c | 408 | sizeof( stuff ) - amt ) >
board_rab.c | 412 | printf("The "+boards[i]+" board has no new messages.\n");
board_rab.c | 421 | add_failed_mess("No boards with new messages.\n");
board_rab.c | 431 | this_player()->query_property(NEWS_RC);
board_rab.c | 432 | get_subjects(board_name);
board_rab.c | 435 | this_player()->add_property(NEWS_RC, news_rc);
board_rab.c | 437 | printf("Marked all of "+board_name+" as read.\n");
board_rab.c | 439 | printf("No new messages.\n");
board_rab.c | 441 | add_succeeded_mess(this_object(), "", ({ }));
board_rab.c | 449 | get_subjects(board_name);
board_rab.c | 450 | sizeof(otherstuff);
board_rab.c | 451 | printf("%2d# %-20s %d\n", i, otherstuff[i][B_NAME], otherstuff[i][B_NUM]);
board_rab.c | 452 | add_succeeded_mess(this_object(), "", ({ }));
board_rab.c | 462 | query_boards();
board_rab.c | 463 | get_subjects(board_name);
board_rab.c | 465 | add_failed_mess("Cannot find the board '"+str+"'.\n");
board_rab.c | 473 | get_message(board_name, num-1);
crystal_phial.c | 4 | set_name( "phial" );
crystal_phial.c | 5 | set_short( "crystal phial" );
crystal_phial.c | 6 | add_adjective( "crystal" );
crystal_phial.c | 7 | set_main_plural( "crystal phials" );
crystal_phial.c | 10 | set_weight( 1 );
crystal_phial.c | 11 | set_value( 1000 );
crystal_phial.c | 12 | set_max_weight( 1 );
crystal_phial.c | 13 | set_max_volume( 10 );
crystal_phial.c | 14 | set_transparent();
crystal_phial.c | 21 | test_add( thing, flag );
crystal_phial.c | 22 | all_inventory( this_object() );
crystal_phial.c | 24 | test_add( thing, flag );
crystal_phial.c | 25 | query_medium_alias();
crystal_phial.c | 27 | test_add( thing, flag );
crystal_phial.c | 30 | the_short() ) +", do you?\n" );
crystal_phial.c | 36 | all_inventory( this_object() );
crystal_phial.c | 45 | query_substance();
crystal_phial.c | 47 | short( dark );
crystal_phial.c | 48 | short( dark ) +" of "+ (string)thing->short( dark );
crystal_phial.c | 52 | query_substance();
crystal_phial.c | 54 | query_plural( dark );
crystal_phial.c | 55 | query_plural( dark ) +" of "+ (string)thing->short( dark );
crystal_phial.c | 59 | query_substance();
crystal_phial.c | 61 | parse_command_adjectiv_id_list();
crystal_phial.c | 63 | query_adjectives();
board_mas.c | 6 | do_store(int num, string str);
board_mas.c | 7 | do_storeall(string str);
board_mas.c | 8 | do_minimum(int num);
board_mas.c | 9 | do_maximum(int num);
board_mas.c | 10 | do_timeout(int num);
board_mas.c | 11 | do_add(string str);
board_mas.c | 12 | do_remove(string str);
board_mas.c | 13 | do_board(string str);
board_mas.c | 14 | do_archive(string str);
board_mas.c | 15 | do_killfile(string str);
board_mas.c | 16 | do_unkillfile(string str);
board_mas.c | 17 | do_transfer(int num, string str);
board_mas.c | 18 | do_summary();
board_mas.c | 19 | do_skip(string str, int move_on);
board_mas.c | 21 | calc_new(object player, string board);
board_mas.c | 24 | setup();
board_mas.c | 25 | add_alias("board master");
board_mas.c | 27 | reset_drop();
board_mas.c | 28 | set_get();
board_mas.c | 40 | get_subjects(board_name);
board_mas.c | 42 | query_minimum(board_name);
board_mas.c | 46 | query_maximum(board_name);
board_mas.c | 49 | query_timeout(board_name);
board_mas.c | 52 | query_archive(board_name);
board_mas.c | 80 | query_newsrc(this_player()->query_name());
board_mas.c | 83 | sizeof(stuff);
board_mas.c | 87 | the_date(stuff[i][B_TIME])+")");
board_mas.c | 91 | the_date(stuff[i][B_TIME])+")");
board_mas.c | 100 | query_newsrc(who->query_name());
board_mas.c | 104 | get_subjects(board);
board_mas.c | 110 | query_name() ) );
board_mas.c | 117 | add_commands();
board_mas.c | 118 | add_command("store", "<number> <word>", (: do_store($4[0], $4[1]) :));
board_mas.c | 119 | add_command("storeall", "<word>", (: do_storeall($4[0]) :));
board_mas.c | 120 | add_command("next", "");
board_mas.c | 121 | add_command("prev", "");
board_mas.c | 122 | add_command("new", "");
board_mas.c | 123 | add_command("board", "<string>", (: do_board($4[0]) :));
board_mas.c | 124 | add_command("boards", "");
board_mas.c | 125 | add_command("killfile", "<string>", (: do_killfile($4[0]) :));
board_mas.c | 126 | add_command("unkillfile", "<string>",(: do_unkillfile($4[0]) :));
board_mas.c | 127 | add_command("listkillfile", "");
board_mas.c | 128 | add_command("security", "");
board_mas.c | 129 | add_command("sadd", "<word>", (: do_add($4[0]) :));
board_mas.c | 130 | add_command("sremove", "<word>", (: do_remove($4[0]) :));
board_mas.c | 131 | add_command("timeout", "<number>", (: do_timeout($4[0]) :));
board_mas.c | 132 | add_command("minimum", "<number>", (: do_minimum($4[0]) :));
board_mas.c | 133 | add_command("maximum", "<number>", (: do_maximum($4[0]) :));
board_mas.c | 134 | add_command("archive", "<word>", (: do_archive($4[0]) :));
board_mas.c | 135 | add_command("summary", "");
board_mas.c | 136 | add_command("skip", "", (: do_skip(0, 1) :));
board_mas.c | 137 | add_command("catchup", "", (: do_skip(0, 0) :));
board_mas.c | 138 | add_command("skip", "<string>", (: do_skip($4[0], 1) :));
board_mas.c | 139 | add_command("catchup", "<string>", (: do_skip($4[0], 0) :));
board_mas.c | 140 | add_command("arts", "");
board_mas.c | 142 | do_transfer($4[0], $4[1]) :));
board_mas.c | 152 | seteuid( geteuid( this_player() ) );
board_mas.c | 153 | this_player()->query_name();
board_mas.c | 157 | list_of_boards();
board_mas.c | 159 | query_newsrc(this_player()->query_name());
board_mas.c | 164 | add_failed_mess("Unable to save the file "+file+"\n");
board_mas.c | 167 | sizeof(boards);
board_mas.c | 168 | reset_eval_cost();
board_mas.c | 170 | get_subjects(boards[i]);
board_mas.c | 175 | lower_case(stuff[amt][B_NAME]) != their_name);
board_mas.c | 178 | write_file(file,"\n----> Bulletin Board Name: "+boards[i]+"\n\n\n");
board_mas.c | 180 | sizeof(stuff);
board_mas.c | 185 | get_message(boards[i], j)+"\n\n\n");
board_mas.c | 188 | printf("Storing ");
board_mas.c | 190 | printf(".");
board_mas.c | 195 | write("\n"+cnt+" new messages are now saved in "+file+"\n");
board_mas.c | 197 | set_newsrc(this_player()->query_name(), news_rc);
board_mas.c | 205 | get_subjects(board_name);
board_mas.c | 207 | add_failed_mess("Invalid note number.\n");
board_mas.c | 212 | seteuid( geteuid( this_player() ) );
board_mas.c | 215 | add_failed_mess("The master object appears and prevents you.\n");
board_mas.c | 218 | write("Ok.\n");
board_mas.c | 231 | do_read_new();
board_mas.c | 233 | list_of_boards();
board_mas.c | 236 | sizeof(boards);
board_mas.c | 237 | sizeof(boards);
board_mas.c | 250 | do_read_new();
board_mas.c | 252 | write("No boards with new messages.\n");
board_mas.c | 261 | list_of_boards();
board_mas.c | 265 | sizeof(boards))%sizeof(boards);
board_mas.c | 267 | write("Okay, changed to board "+board_name+".\n");
board_mas.c | 274 | explode( arg, "," );
board_mas.c | 279 | lower_case( board ));
board_mas.c | 280 | tell_object( this_player(), "Board " + board  + " killed.\n" );
board_mas.c | 296 | add_failed_mess("Board "+arg+" is not kill file anyway.\n");
board_mas.c | 300 | lower_case(arg));
board_mas.c | 301 | write("Board "+arg+" unkilled.\n");
board_mas.c | 309 | list_killfile(this_player()->query_name());
board_mas.c | 312 | query_multiple_short( boards ) +".\n" );
board_mas.c | 320 | list_of_boards();
board_mas.c | 321 | member_array(str, boards);
board_mas.c | 323 | add_failed_mess("The board "+str+" does not exist sorry.\n");
board_mas.c | 326 | write("Okay, changed to board "+ str);
board_mas.c | 327 | calc_new(this_player(), boards[i]);
board_mas.c | 329 | write(" with " + i + " new notes.\n");
board_mas.c | 331 | write(" with no new notes.\n");
board_mas.c | 346 | implode((string *)BOARD_HAND->query_security(board_name), ", ")+"\n");
board_mas.c | 354 | return (int)BOARD_HAND->add_allowed(board_name, name);
board_mas.c | 361 | return (int)BOARD_HAND->remove_allowed(board_name, name);
board_mas.c | 368 | return (int)BOARD_HAND->set_timeout(board_name, i);
board_mas.c | 375 | return (int)BOARD_HAND->set_minimum(board_name, i);
board_mas.c | 382 | return (int)BOARD_HAND->set_maximum(board_name, i);
board_mas.c | 389 | return (int)BOARD_HAND->set_archive(board_name, name);
board_mas.c | 390 | return (int)BOARD_HAND->set_archive(board_name);
board_mas.c | 397 | move(dest, s1, s2);
board_mas.c | 399 | move(dest, s1, s2);
board_mas.c | 402 | seteuid(geteuid(dest));
board_mas.c | 405 | move(dest, s1, s2);
board_mas.c | 421 | list_of_boards();
board_mas.c | 425 | calc_new(this_player(), boards[i]);
board_mas.c | 433 | add_failed_mess( "No boards with new messages.\n" );
board_mas.c | 440 | list_of_boards();
board_mas.c | 444 | calc_new(this_player(), boards[i]);
board_mas.c | 452 | add_failed_mess( "No boards with new messages.\n" );
board_mas.c | 467 | list_of_boards();
board_mas.c | 469 | notify_fail("No such board " + str + ".\n");
board_mas.c | 471 | query_newsrc(this_player()->query_name());
board_mas.c | 474 | get_subjects(str);
board_mas.c | 477 | set_newsrc(this_player()->query_name(), news_rc);
board_mas.c | 479 | printf("Marked all of "+str+" as read.\n");
board_mas.c | 483 | reset_eval_cost();
board_mas.c | 486 | sizeof(boards);
board_mas.c | 487 | sizeof(boards);
board_mas.c | 501 | write("No boards with new messages.\n");
board_mas.c | 510 | get_subjects(board_name);
board_mas.c | 511 | sizeof(otherstuff);
board_mas.c | 512 | printf("%2d# %-20s %d\n", i, otherstuff[i][B_NAME], otherstuff[i][B_NUM]);
board_mas.c | 521 | query_boards();
board_mas.c | 522 | get_subjects(board_name);
board_mas.c | 524 | add_failed_mess("Cannot find the board '"+str+"'.\n");
board_mas.c | 532 | get_message(board_name, num-1);
tin_of_paint.c | 9 | do_paint(string, object);
tin_of_paint.c | 12 | set_name( "tin" );
tin_of_paint.c | 13 | set_short( "tin of paint" );
tin_of_paint.c | 14 | set_main_plural( "tins of paint");
tin_of_paint.c | 15 | add_adjective( ({ "tin", "of"}));
tin_of_paint.c | 16 | add_alias(({"paint"}));
tin_of_paint.c | 19 | set_leak_rate( 0 );
tin_of_paint.c | 20 | set_max_volume( VOLUME );
tin_of_paint.c | 21 | set_value( 30 );
tin_of_paint.c | 22 | set_weight( 10 );
tin_of_paint.c | 23 | set_max_weight( 30 );
tin_of_paint.c | 27 | set_short( "tin of " + _colour + " paint" );
tin_of_paint.c | 28 | set_main_plural( "tins of " + _colour + " paint");
tin_of_paint.c | 29 | add_adjective( ({ _colour}));
tin_of_paint.c | 36 | clone_object( "/obj/reagents/generic_liquid.ob" );
tin_of_paint.c | 37 | set_name( "paint" );
tin_of_paint.c | 38 | set_short( colour + " paint" );
tin_of_paint.c | 39 | add_adjective(({colour }));
tin_of_paint.c | 40 | set_amount( VOLUME );
tin_of_paint.c | 41 | set_continuous();
tin_of_paint.c | 42 | set_long( "This is " + colour + " paint, it's thick and gloopy.\n");
tin_of_paint.c | 43 | set_pile_name( "puddle" );
tin_of_paint.c | 44 | add_eat_effect( "/std/effects/ingested/poison", 10 );
tin_of_paint.c | 45 | move( this_object() );
tin_of_paint.c | 47 | set_closed();
tin_of_paint.c | 49 | setup_attribs();
tin_of_paint.c | 54 | init();
tin_of_paint.c | 57 | do_paint( $4[0] ) :));
tin_of_paint.c | 60 | do_paint( $4[0], $1[0] ) :));
tin_of_paint.c | 63 | do_paint( 0, $1[0] ) :));
tin_of_paint.c | 71 | printf(target->what_to_paint());
tin_of_paint.c | 73 | printf("Help: paint " + target->short() + " with paint\n");
tin_of_paint.c | 77 | match_objects_for_existence("paint", this_object());
tin_of_paint.c | 86 | this_player()->add_failed_mess(this_object(), "$D is closed.\n", ({ }));
tin_of_paint.c | 108 | query_short() + "!\n", ({ }));
tin_of_paint.c | 136 | remove_volume(query_volume());
tin_of_paint.c | 148 | int_query_static_auto_load();
tin_of_paint.c | 157 | int_query_static_auto_load();
tin_of_paint.c | 158 | return ([ ]);
tin_of_paint.c | 164 | init_static_arg(args["::"]);
tin_of_paint.c | 168 | setup_attribs();
torch.c | 14 | finish_it();
torch.c | 16 | setup_shorts();
torch.c | 19 | create();
torch.c | 20 | create();
torch.c | 25 | set_name( "torch" );
torch.c | 26 | add_plural( "torches" );
torch.c | 27 | setup_shorts();
torch.c | 28 | add_help_file("torch");
torch.c | 33 | call_out( (: setup_shorts() :), 2 );
torch.c | 107 | set_weight( 6 );
torch.c | 108 | set_value( 50 );
torch.c | 115 | setup_shorts();
torch.c | 119 | this_player()->add_command( "light", this_object() );
torch.c | 120 | this_player()->add_command( "extinguish", this_object() );
torch.c | 121 | this_player()->add_command( "dowse", this_object() );
torch.c | 126 | set_short( "lit torch" );
torch.c | 127 | set_main_plural( "lit torches" );
torch.c | 128 | remove_adjective( ({ "lightable", "burnt", "out" }) );
torch.c | 129 | add_adjective( "lit" );
torch.c | 131 | set_short( "lightable torch" );
torch.c | 132 | set_main_plural( "lightable torches" );
torch.c | 133 | remove_adjective( ({ "lit", "burnt", "out" }) );
torch.c | 134 | add_adjective( "lightable" );
torch.c | 136 | set_short( "burnt torch" );
torch.c | 137 | set_main_plural( "burnt torches" );
torch.c | 138 | remove_adjective( ({ "lit", "lightable" }) );
torch.c | 139 | add_adjective( ({ "burnt", "out" }) );
torch.c | 167 | add_burner( this_object() );
torch.c | 168 | set_light( BRIGHTNESS );
torch.c | 169 | call_out( "setup_shorts", 2);
torch.c | 175 | set_light( 0 );
torch.c | 176 | set_value( 0 );
torch.c | 177 | remove_burner( this_object() );
torch.c | 180 | call_out( "finish_it", 2 );
torch.c | 198 | do_warning();
torch.c | 201 | out_of_fuel();
torch.c | 210 | this_player()->add_failed_mess(this_object(), "$D is not lit.\n", ({ }) );
torch.c | 215 | remove_burner( this_object() );
torch.c | 217 | set_light( 0 );
torch.c | 218 | call_out( "setup_shorts", 2);
torch.c | 223 | do_extinguish(({ }), 0, 0, 0);
torch.c | 227 | remove_burner( this_object() );
torch.c | 228 | set_light( 0 );
torch.c | 229 | dest_me();
torch.c | 230 | dest_me();
torch.c | 252 | short() +" as you put it down.\n");
torch.c | 258 | do_extinguish( ({ }), "", "", "");
torch.c | 261 | set_light( BRIGHTNESS );
torch.c | 262 | add_burner( this_object() );
torch.c | 267 | setup_shorts();
torch.c | 276 | init_dynamic_arg(arg["hold"], arg["is lit"]);
torch.c | 278 | init_dynamic_arg(arg["::"]);
torch.c | 291 | move(ob);
torch.c | 295 | move( ob, mess1, mess2 );
torch.c | 300 | add_burner( this_object() );
torch.c | 301 | set_light( BRIGHTNESS );
torch.c | 302 | call_out( (: setup_shorts() :), 2);
torch.c | 308 | this_object()->move( "/room/rubbish" );
teddy.c | 10 | set_name("bear");
teddy.c | 11 | set_short("teddy bear");
teddy.c | 12 | add_alias("teddy");
teddy.c | 13 | add_adjective("teddy");
teddy.c | 17 | set_weight(10);
teddy.c | 18 | set_value(25);
teddy.c | 19 | set_main_plural("teddy bears");
teddy.c | 20 | add_plural(({"bears", "teddys"}));
teddy.c | 24 | add_command("hug", TO);
teddy.c | 25 | add_command("cuddle", TO);
teddy.c | 31 | say(TP->one_short()+ " hugs the teddy bear close and smiles happily.\n");
teddy.c | 32 | add_succeeded_mess(TO, "", ({ }) );
teddy.c | 37 | do_hug();
teddy.c | 38 | add_succeeded_mess(TO, "", ({ }) );
top_families.c | 12 | _long();
top_families.c | 15 | set_name( "table" );
top_families.c | 16 | set_short( "top family table" );
top_families.c | 19 | add_adjective( ({ "top", "family", "score" }) );
top_families.c | 20 | reset_get();
top_families.c | 21 | add_property( "there", "in one corner" );
top_families.c | 22 | add_property( "survive fire", 1 );
top_families.c | 27 | call_out("setup_read_mess", 5);
top_families.c | 31 | add_read_mess((: _long() :), 0, _lang, 0);
top_families.c | 44 | query_club_name(str);
top_families.c | 54 | query_family_info();
top_families.c | 73 | file_size($1 + ".c") >
top_families.c | 74 | strcmp($1->query_name(), $2->query_name()) :));
top_families.c | 81 | club_name(bing));
tray.c | 15 | create();
tray.c | 16 | create();
tray.c | 17 | create();
tray.c | 21 | set_name( "tray" );
tray.c | 22 | set_short( "wooden tray" );
tray.c | 27 | add_adjective(({ "small", "wooden" }));
tray.c | 28 | set_material("wood");
tray.c | 31 | set_weight(5);
tray.c | 32 | set_max_weight(40);
tray.c | 35 | set_no_limbs(2);
tray.c | 38 | set_type("sash");
tray.c | 39 | set_cond(1000);
tray.c | 40 | set_max_cond(1000);
tray.c | 41 | add_wear_effect( "/std/effects/attached/single_shoulder" );
tray.c | 45 | long() + wearable::long();
tray.c | 50 | move( dir, messin, messout );
tray.c | 58 | query_static_auto_load();
tray.c | 59 | query_static_auto_load();
tray.c | 60 | query_static_auto_load();
tray.c | 66 | init_static_arg( map["holdable"] );
tray.c | 69 | init_static_arg( map["surface"] );
tray.c | 72 | init_static_arg( map["wearable"] );
tray.c | 77 | dest_me();
tray.c | 78 | dest_me();
tray.c | 84 | query_dynamic_auto_load();
tray.c | 85 | query_dynamic_auto_load();
tray.c | 86 | query_dynamic_auto_load();
tray.c | 92 | init_dynamic_arg( map["holdable"] );
tray.c | 95 | init_dynamic_arg( map["surface"] );
tray.c | 98 | init_dynamic_arg( map["wearable"] );
tray.c | 102 | stats() + wearable::stats();
balance.c | 37 | setup();
balance.c | 38 | init();
balance.c | 39 | query_doing();
balance.c | 40 | query_pans();
balance.c | 41 | long( string words, int dark );
balance.c | 42 | pans_look();
balance.c | 43 | recalculate_balance();
balance.c | 44 | reset_weights();
balance.c | 45 | weight_string( int weight );
balance.c | 46 | weigh_something( object* obs );
balance.c | 47 | figure_it_out();
balance.c | 48 | move_a_specific_weight( string weight_size, string pan_to );
balance.c | 49 | move_a_weight( string weight_size, string pan_from, string pan_to );
balance.c | 50 | it_is_balanced( object person );
balance.c | 55 | set_name( "balance" );
balance.c | 56 | set_short( "weighing balance" );
balance.c | 57 | add_adjective( "weighing" );
balance.c | 58 | add_alias( ({ "pan", "pans", "weight", "weights" }) );
balance.c | 59 | set_weight( 200 );
balance.c | 60 | reset_get();
balance.c | 68 | this_object()->weigh_something($1):));
balance.c | 69 | add_command("reset", "weights on balance", (: reset_weights() :));
balance.c | 70 | add_command("figure", "", (:this_object()->figure_it_out():));
balance.c | 73 | this_object()->move_a_specific_weight($4[0], $4[1]):));
balance.c | 92 | explode( words, " " );
balance.c | 108 | pans_look();
balance.c | 114 | m_indices( pans );
balance.c | 115 | sizeof( places );
balance.c | 119 | m_indices( pans[ places[ i ] ] );
balance.c | 120 | sizeof( weights );
balance.c | 148 | m_indices( pans );
balance.c | 149 | sizeof( places );
balance.c | 154 | m_indices( pans[ places[ i ] ] );
balance.c | 155 | sizeof( weights );
balance.c | 184 | m_indices( pans );
balance.c | 185 | sizeof( places );
balance.c | 190 | m_indices( pans[ places[ i ] ] );
balance.c | 191 | sizeof( weights );
balance.c | 239 | random( 121 ) });
balance.c | 241 | add_succeeded_mess("$N $V the weights on $D.\n");
balance.c | 242 | recalculate_balance();
balance.c | 270 | find_player( doing[ 0 ] );
balance.c | 279 | query_pronoun() + " has finished.\n" );
balance.c | 286 | this_player()->query_name(), "balance" );
balance.c | 304 | sizeof( obs );
balance.c | 305 | query_complete_weight();
balance.c | 307 | write( obs[ i ]->the_short() + " doesn't weigh anything.\n" );
balance.c | 316 | weight_string( weight ) +".\n" );
balance.c | 318 | add_succeeded_mess(({ "", "$N $V $I on $D.\n" }), obs);
balance.c | 328 | find_player( doing[ 0 ] );
balance.c | 337 | query_pronoun() + " has finished.\n" );
balance.c | 344 | this_player()->query_name(), "balance" );
balance.c | 346 | write( "You already know how the balance works.\n" );
balance.c | 357 | random( 121 ) });
balance.c | 358 | recalculate_balance();
balance.c | 368 | find_player( doing[ 0 ] );
balance.c | 376 | query_pronoun() + " has finished.\n" );
balance.c | 393 | move_a_weight(weight_size, pan_from, pan_to);
balance.c | 396 | add_failed_mess("Unable to find the " + weight_size + " weight.\n");
balance.c | 416 | m_delete( pans[ pan_from ], weight_size );
balance.c | 422 | recalculate_balance();
balance.c | 424 | call_out( "it_is_balanced", 0, this_player() );
balance.c | 435 | weight_string( pans[ "left" ][ doing[ 1 ] ][ 1 ] ) +".\n" );
balance.c | 445 | adjust_xp( 5000 );
balance.c | 451 | adjust_xp( 10000 );
delete_thyself.c | 9 | create();
delete_thyself.c | 11 | call_out((: move("/room/rubbish") :), 3);
label.c | 5 | create();
label.c | 7 | set_name( "label" );
label.c | 8 | set_short( "small label" );
label.c | 9 | add_adjective( "small" );
label.c | 10 | set_main_plural( "small labels" );
label.c | 14 | set_value( 100 );
label.c | 15 | add_property( "writeable", 1 );
label.c | 16 | add_property( "label", 1 );
label.c | 17 | set_max_size( 200 );
label.c | 19 | this_object()->setup();
label.c | 28 | if ( sizeof( things ) >
label.c | 29 | add_failed_mess("You can't stick $D to more than one thing at a time.\n");
label.c | 33 | add_failed_mess("You cannott stick $D to itself!\n");
label.c | 36 | add_effect( "/std/effects/object/label", this_object() );
label.c | 39 | the_short() +".\n" );
label.c | 41 | the_short() +".\n" );
label.c | 43 | add_succeeded_mess("$N lick$s $D and stick$s it to $I.\n", things[0..0]);
label.c | 49 | return ([ ]);
label.c | 51 | int_query_static_auto_load();
deplusser.c | 4 | set_short("deplusser");
deplusser.c | 5 | set_name("deplusser");
deplusser.c | 8 | set_weight(9);
deplusser.c | 12 | add_command("deplus", "<string'file'>", (:this_object()->deplus($4[0]):));
deplusser.c | 19 | seteuid(geteuid(this_player()));
deplusser.c | 20 | get_dir( this_player()->get_path( fname ) );
deplusser.c | 22 | notify_fail( "No files found\n" );
deplusser.c | 23 | sizeof(files);
deplusser.c | 25 | read_file( this_player()->get_path( files[i] ) );
deplusser.c | 26 | explode( replace_string( old, "\t", "   " ), "\n" );
deplusser.c | 28 | implode( explode( lines[0], " " ), "" );
deplusser.c | 29 | implode( explode( lines[1], " " ), "" );
deplusser.c | 31 | implode( explode( lines[2], " " ), "" );
deplusser.c | 33 | for (j = 1, sz = sizeof(lines);
deplusser.c | 39 | delete( lines[j], strsrch(lines[j], "+"), 1 );
deplusser.c | 43 | implode( explode( lines[j+2], " " ), "" );
deplusser.c | 46 | write("Couldn't remove old file: " + files[i] + "\n" );
deplusser.c | 49 | write("Could not write new file: " + files[i] + "\n" );
deplusser.c | 51 | notify_fail("Uh-oh, could not replace old file either.\n");
deplusser.c | 53 | write("File deplussed: " + files[i] + "\n");
button.c | 4 | set_name( "button" );
button.c | 5 | set_short( "red button" );
button.c | 6 | add_adjective( "red" );
button.c | 9 | reset_get();
button.c | 10 | add_property( "there", "embedded into the wall" );
button.c | 14 | this_player()->add_command( "press" , this_object() );
button.c | 19 | environment()->query_non_destable();
button.c | 21 | this_object() });
button.c | 23 | this_object() });
button.c | 26 | dest_me();
button.c | 27 | write( "You clean up.\n" );
button.c | 28 | say( (string)this_player()->one_short() +" cleans up.\n" );
easel.c | 19 | set_name( "easel" );
easel.c | 20 | set_short( "small easel" );
easel.c | 21 | add_adjective( "small" );
easel.c | 22 | set_main_plural( "small easels" );
easel.c | 23 | set_value( 800 );
easel.c | 47 | sizeof( lines );
easel.c | 57 | if ( ( origin[ 0 ] + place[ 0 ] ) >
easel.c | 61 | if ( ( origin[ 1 ] + place[ 1 ] ) >
easel.c | 69 | sizeof( pieces );
easel.c | 70 | if ( strlen( pieces[ i ] ) >
easel.c | 71 | strlen( pieces[ i ] );
easel.c | 73 | strlen( lines[ 0 ] );
easel.c | 80 | sizeof( lines );
easel.c | 84 | if ( ( origin[ 0 ] + start[ 0 ] + max ) >
easel.c | 88 | sizeof( lines );
easel.c | 91 | sizeof( pieces );
easel.c | 92 | sizeof( lines );
easel.c | 95 | strlen( lines[ 0 ] );
easel.c | 101 | if ( ( origin[ 1 ] + start[ 1 ] + max ) >
easel.c | 103 | strlen( lines[ 0 ] );
easel.c | 116 | strlen( pieces[ i - origin[ 1 ] - start[ 1 ] ] );
easel.c | 130 | return ({ "@" });
easel.c | 132 | return ({ "#" });
easel.c | 133 | allocate( size );
easel.c | 170 | sizeof( locations );
easel.c | 173 | reset_eval_cost();
easel.c | 175 | sizeof( PRIMES );
easel.c | 178 | sizeof( sizes );
easel.c | 189 | sizeof( sizes );
easel.c | 194 | reset_eval_cost();
easel.c | 196 | sizeof( places );
easel.c | 202 | make_block( 2 * sizes[ i ] - 1, !i ) );
easel.c | 205 | sizeof( connections[ places[ i ] ] );
easel.c | 206 | reset_eval_cost();
easel.c | 212 | member_array( connections[ places[ i ] ][ j + 1 ], places );
easel.c | 225 | reset_eval_cost();
mortar_pestle.c | 12 | set_name( "pestle" );
mortar_pestle.c | 13 | set_short( "mortar and pestle" );
mortar_pestle.c | 18 | set_main_plural( "mortars and pestles" );
mortar_pestle.c | 19 | add_adjective( ({ "mortar and", "rough", "stone", "smooth" }) );
mortar_pestle.c | 20 | add_alias( ({ "mortar", "pestle", "bowl" }) );
mortar_pestle.c | 21 | set_value( 800 );
mortar_pestle.c | 22 | set_weight( 44 );
mortar_pestle.c | 23 | set_max_grindable( 8 );
mortar_pestle.c | 24 | set_max_weight( 8 );
keyring.c | 5 | create();
keyring.c | 6 | set_name( "keyring" );
keyring.c | 7 | set_short( "keyring" );
keyring.c | 9 | add_property( "determinate", "a " );
keyring.c | 11 | set_main_plural( "keyrings" );
keyring.c | 12 | add_property("shop type", "jewellers");
keyring.c | 17 | set_weight( 2 );
keyring.c | 18 | set_value( 20 );
keyring.c | 19 | set_max_weight( 1 );
keyring.c | 22 | this_object()->setup();
keyring.c | 27 | query_contents( "$C$"+ the_short() +" holds: " );
keyring.c | 34 | query_properties();
keyring.c | 35 | copy( keys( props ) );
keyring.c | 37 | query_properties();
keyring.c | 56 | query_property( word );
keyring.c | 61 | query_property( word );
keyring.c | 79 | if(sizeof(all_inventory(this_object())) >
keyring.c | 81 | add_weight(n);
keyring.c | 86 | int_query_static_auto_load();
keyring.c | 88 | return ([ ]);
dead_book.c | 8 | seteuid(getuid());
dead_book.c | 9 | add_property("dead usable", 1);
dead_book.c | 10 | set_short("dark brown book");
dead_book.c | 11 | set_name("book");
dead_book.c | 12 | add_adjective( ({ "dark", "brown", "dead", "death", "dieing" }) );
dead_book.c | 17 | set_book_language("general");
dead_book.c | 18 | set_book_dir(DEAD_PAGES);
dead_book.c | 20 | set_open_page(0);
dead_book.c | 25 | previous_object());
dead_book.c | 26 | call_out("dest_me", 2);
dead_book.c | 37 | say(the_short()+" vanishes suddenly and randomly.\n");
dead_book.c | 38 | call_out("dest_me", 1);
dead_book.c | 43 | move(dest, mess1, mess2);
dead_book.c | 44 | call_out("check_location", 1);
cash_register.c | 15 | query_long();
cash_register.c | 16 | present( MONEY_ALIAS, this_object() );
cash_register.c | 19 | half_short( 1 );
cash_register.c | 23 | sizeof( coins );
cash_register.c | 32 | save_register();
cash_register.c | 38 | save_register();
dart_board.c | 30 | setup();
dart_board.c | 31 | init();
dart_board.c | 32 | abandon( string str );
dart_board.c | 33 | find_target();
dart_board.c | 34 | play( string str );
dart_board.c | 35 | throw_dart();
dart_board.c | 36 | score_it( int i );
dart_board.c | 37 | heart_beat();
dart_board.c | 38 | end_game();
dart_board.c | 42 | set_name("dartboard");
dart_board.c | 43 | add_property( "there", "mounted on the wall" );
dart_board.c | 44 | add_adjective("party");
dart_board.c | 45 | set_main_plural("dartboards");
dart_board.c | 46 | set_short("party dartboard");
dart_board.c | 49 | set_weight(10000);
dart_board.c | 50 | set_value(0);
dart_board.c | 51 | reset_get();
dart_board.c | 63 | add_command("abandon", "", (:this_object()->abandon(""):));
dart_board.c | 64 | add_command("play", "", (:this_object()->play(0):));
dart_board.c | 67 | add_command("play", "<word'bet'>", (:this_object()->play($4[0]):));
dart_board.c | 69 | add_command("throw", "", (:this_object()->throw_dart():));
dart_board.c | 75 | write("You call off the game of darts.\n");
dart_board.c | 77 | this_player()->query_short()+".\n");
dart_board.c | 78 | end_game();
dart_board.c | 87 | get_dir("/w/");
dart_board.c | 88 | random(sizeof(creators)))]);
dart_board.c | 91 | random(sizeof(creators)))]);
dart_board.c | 94 | capitalize(victim);
dart_board.c | 102 | write("The dartboard is in use right now.\n");
dart_board.c | 109 | write("Bets must be for zero or greater coins.\n");
dart_board.c | 121 | write("You can't play against yourself!\n");
dart_board.c | 126 | write("Bet amounts must match. " + name1 + " bet " + bet + ".\n");
dart_board.c | 130 | this_player();
dart_board.c | 131 | query_short();
dart_board.c | 132 | find_target();
dart_board.c | 147 | this_player();
dart_board.c | 148 | query_short();
dart_board.c | 150 | write("You can 'abandon' the game if no one takes up your challenge.\n");
dart_board.c | 151 | say( name1 + " is looking for someone else to play darts with.\n");
dart_board.c | 153 | set_heart_beat(1);
dart_board.c | 163 | notify_fail( "You are not currently playing.\n ");
dart_board.c | 166 | notify_fail( "You are not currently playing.\n" );
dart_board.c | 172 | write("You throw a dart.\n");
dart_board.c | 173 | say( name1 + " throws a dart.\n" );
dart_board.c | 175 | score_it(random(21) + ((player1->query_dex() -13 ) / 2 ));
dart_board.c | 178 | write("You feel a bit more experienced.\n");
dart_board.c | 179 | ajdust_xp(10);
dart_board.c | 185 | write("That was your third dart. Your score is " + score1 + ".\n");
dart_board.c | 186 | say(name1 + " has a score of " + score1 + " after three darts.\n");
dart_board.c | 187 | if (player2) tell_object(player2, "Your turn to throw.\n");
dart_board.c | 197 | write("You throw a dart.\n");
dart_board.c | 198 | say(name2+ " throws a dart.\n" );
dart_board.c | 200 | score_it(random(21) + ((player2->query_dex() - 13 ) / 2 ));
dart_board.c | 203 | write("You feel a bit more experienced.\n");
dart_board.c | 204 | adjust_xp(10);
dart_board.c | 210 | write("That was your third dart.\n");
dart_board.c | 215 | write(name1 + " beats you" + start);
dart_board.c | 218 | tell_object(player1, "You beat " + name2 + start);
dart_board.c | 222 | write("You beat " + name1 + start);
dart_board.c | 225 | tell_object(player1, name2 + " beats you" + start);
dart_board.c | 231 | end_game();
dart_board.c | 237 | write("It's not your turn to throw a dart!\n");
dart_board.c | 260 | write("You hit " + rest_mess);
dart_board.c | 261 | say( this_player()->query_short() + " hit " + rest_mess);
dart_board.c | 268 | if (!player1) player1 = find_player(lower_case(name1));
dart_board.c | 269 | if (name2 && !player2) player2 = find_player(lower_case(name2));
dart_board.c | 272 | say(name1 + " is no longer here. The game of darts is called off.\n");
dart_board.c | 274 | say(name2 + " is no longer here. The game of darts is called off.\n");
dart_board.c | 278 | end_game();
dart_board.c | 283 | set_heart_beat(0);
dart_board.c | 285 | if (player1) player1->add_money(bet);
dart_board.c | 286 | if (player2) player2->add_money(bet);
wearable_corpse.c | 17 | create();
wearable_corpse.c | 18 | create();
wearable_corpse.c | 22 | long( word, dark ) + wearable::long( word, dark );
wearable_corpse.c | 27 | init_static_arg( map[ "corpse" ] );
wearable_corpse.c | 29 | init_static_arg( map[ "wearable" ] );
wearable_corpse.c | 34 | init_dynamic_arg( map[ "corpse" ] );
wearable_corpse.c | 37 | init_dynamic_arg( map[ "wearable" ] );
wearable_corpse.c | 55 | stats() + wearable::stats();
beeswax_candle.c | 12 | set_name( "candle" );
beeswax_candle.c | 13 | set_short( "beeswax candle" );
beeswax_candle.c | 14 | add_adjective( "beeswax" );
beeswax_candle.c | 25 | set_empty_mess( "is burnt to a stub." );
beeswax_candle.c | 26 | set_max_fuel( 900 );
beeswax_candle.c | 27 | set_fuel( 900 );
beeswax_candle.c | 28 | set_brightness( 60 );
beeswax_candle.c | 29 | set_value( 400 );
beeswax_candle.c | 30 | set_hold_required( 1 );
beeswax_candle.c | 31 | add_property( "no recycling", 1 );
beeswax_candle.c | 32 | new_weapon( 10 );
beeswax_candle.c | 33 | set_weight( 1 );
beeswax_candle.c | 34 | set_hide_cond( 1 );
pawn_receipt.c | 31 | do_kiss();
pawn_receipt.c | 36 | set_name( "receipt" );
pawn_receipt.c | 37 | set_short( "pawned item receipt" ) ;
pawn_receipt.c | 38 | add_adjective( ({ "pawned", "item" }) );
pawn_receipt.c | 39 | set_long( "This is a small slip of paper, with a black border.\n" );
pawn_receipt.c | 40 | set_main_plural( "pawned item receipts" ) ;
pawn_receipt.c | 41 | add_plural( "receipts" );
pawn_receipt.c | 42 | add_adjective( "pawned" ) ;
pawn_receipt.c | 43 | set_value( 0 ) ;
pawn_receipt.c | 44 | set_weight( 1 );
pawn_receipt.c | 48 | time();
pawn_receipt.c | 54 | add_command( "reclaim", "<direct:object:me'receipt'>" ) ;
pawn_receipt.c | 62 | if ( ( ! _expired ) && time() >
pawn_receipt.c | 64 | set_short( "expired pawned item receipt" ) ;
pawn_receipt.c | 65 | add_adjective( "expired" ) ;
pawn_receipt.c | 69 | do_kiss() ;
pawn_receipt.c | 71 | move( _shop_path->query_store_room() ) ;
pawn_receipt.c | 138 | base_name( shop ) ;
pawn_receipt.c | 275 | if ( ob->query_collective() && ob->query_amount() >
pawn_receipt.c | 300 | set_object_plural( ob );
pawn_receipt.c | 302 | pluralize( ob->query_short() );
pawn_receipt.c | 305 | query_short();
pawn_receipt.c | 316 | fragile_auto_str_ob(ob);
pawn_receipt.c | 317 | set_obname(ob->query_name());
pawn_receipt.c | 318 | set_obshort( query_correct_short( ob ) );
pawn_receipt.c | 319 | set_object(bits[1]);
pawn_receipt.c | 320 | set_static_save(bits[2]);
pawn_receipt.c | 373 | query_language();
pawn_receipt.c | 379 | query_details() :), "neat printing", lang, 0 }) });
pawn_receipt.c | 409 | add_adjective( explode( lower_case( _obname ), " " ) );
pawn_receipt.c | 412 | set_value(arg["obvalue"]);
pawn_receipt.c | 423 | init_dynamic_arg(arg["::"]);
pawn_receipt.c | 426 | set_short( "expired pawned item receipt" ) ;
pawn_receipt.c | 427 | add_adjective( "expired" ) ;
pawn_receipt.c | 428 | set_main_plural( "expired pawned item receipts" ) ;
pawn_receipt.c | 429 | add_plural( "pawned item receipts" ) ;
pawn_receipt.c | 475 | other_file( _virt_name );
pawn_receipt.c | 478 | remap_file_path(_virt_name);
pawn_receipt.c | 489 | init_static_arg(_static_save[0]);
pawn_receipt.c | 490 | init_dynamic_arg(_static_save[1]);
pawn_receipt.c | 491 | add_property(VIRTUAL_NAME_PROP, _virt_name);
pawn_receipt.c | 492 | move("/room/rubbish");
pawn_receipt.c | 497 | dest_me();
pawn_receipt.c | 518 | add_failed_mess( "$D is not a pawned item receipt.\n" ) ;
pawn_receipt.c | 538 | query_obshort() + " will be available for sale in the shop.\n" ) ;
pawn_receipt.c | 543 | query_property( "place" ) ;
pawn_receipt.c | 550 | query_pawn_markup() ) ;
pawn_receipt.c | 555 | money_value_string( cost, place ) + "\n" ) ;
pawn_receipt.c | 559 | pay_amount_from( cost, TP, place ) ;
pawn_receipt.c | 561 | move( TP ) ;
pawn_receipt.c | 562 | short() ;
pawn_receipt.c | 566 | do_kiss();
pawn_receipt.c | 574 | move( TP );
pawn_receipt.c | 577 | the_short() + ", so it is placed on the floor for you.\n" );
pawn_receipt.c | 578 | move( environment(TP) );
press_credentials.c | 14 | set_owner_stuff();
press_credentials.c | 15 | update_stuff();
press_credentials.c | 18 | add_property("press credentials",1);
press_credentials.c | 19 | set_name( "badge" );
press_credentials.c | 20 | set_short( "press credentials badge" );
press_credentials.c | 21 | add_adjective( ({ "press", "credentials" }) );
press_credentials.c | 22 | add_alias( "badge" );
press_credentials.c | 23 | add_property( "nosteal", 1 );
press_credentials.c | 24 | add_alias( "credentials" );
press_credentials.c | 25 | set_type( "badge" );
press_credentials.c | 26 | setup_clothing( 1000 );
press_credentials.c | 27 | set_weight( 1 );
press_credentials.c | 28 | reset_drop();
press_credentials.c | 29 | set_wear_remove_func(base_name(this_object()), "wear_badge");
press_credentials.c | 34 | update_stuff();
press_credentials.c | 37 | add_command( "show", "<direct:object:me'credentials'>");
press_credentials.c | 44 | remove_title("newspaper");
press_credentials.c | 47 | set_title("newspaper", "Reporter for " + _paper);
press_credentials.c | 57 | query_worn_by()->set_title("newspaper", "Reporter for " + _paper);
press_credentials.c | 81 | environment();
press_credentials.c | 83 | query_cap_name();
press_credentials.c | 85 | set_owner_stuff();
press_credentials.c | 99 | init_dynamic_arg( map[ "::" ] );
press_credentials.c | 100 | set_owner_stuff();
dead_eel.c | 16 | setup();
dead_eel.c | 17 | init();
dead_eel.c | 20 | test_sharp( object weapon );
dead_eel.c | 21 | query_dynamic_auto_load();
dead_eel.c | 22 | init_dynamic_arg(mapping arg, object);
dead_eel.c | 28 | set_name( "eel" );
dead_eel.c | 29 | set_short( "dead eel" );
dead_eel.c | 30 | add_alias( ({ "corpse", "eel corpse" }) );
dead_eel.c | 31 | add_adjective( "dead" );
dead_eel.c | 32 | set_main_plural( "dead eels" );
dead_eel.c | 44 | set_weight( 60 );
dead_eel.c | 45 | set_value( 200 );
dead_eel.c | 46 | set_weight_per_bite( 2 );
dead_eel.c | 51 | init();
dead_eel.c | 61 | if ( skinned ) return notify_fail( "The eel is already skinned.\n" );
dead_eel.c | 67 | this_player() );
dead_eel.c | 74 | clone_object( EEL_SKIN );
dead_eel.c | 76 | move( environment() );
dead_eel.c | 80 | this_player() );
dead_eel.c | 82 | the_short() + ".\n" );
dead_eel.c | 90 | weapon_attacks();
dead_eel.c | 91 | sizeof( pongo );
dead_eel.c | 107 | init_dynamic_arg(arg["::"]);
terrain_shovel.c | 7 | set_name( "shovel" );
terrain_shovel.c | 8 | set_short( "ceremonial shovel" );
terrain_shovel.c | 9 | add_adjective( "ceremonial" );
terrain_shovel.c | 17 | add_action( "do_add", "add" );
terrain_shovel.c | 18 | add_action( "do_remove", "remove" );
terrain_shovel.c | 19 | add_action( "do_visit", "visit" );
terrain_shovel.c | 28 | notify_fail( "Add what?\n" );
terrain_shovel.c | 30 | notify_fail( "Syntax: add fixed|floating <file> <direction>\n" );
terrain_shovel.c | 31 | member_array( direc, STD_ORDERS );
terrain_shovel.c | 35 | environment( this_player() );
terrain_shovel.c | 41 | notify_fail( capitalize( file ) +" does not exist.\n" );
terrain_shovel.c | 42 | force_load();
terrain_shovel.c | 44 | notify_fail( capitalize( file ) +" will not load.\n" );
terrain_shovel.c | 46 | query_room_size();
terrain_shovel.c | 47 | query_co_ord();
terrain_shovel.c | 49 | notify_fail( "Environment does not have coordinates.\n" );
terrain_shovel.c | 50 | allocate( 3 );
terrain_shovel.c | 53 | query_property( "terrain name" );
terrain_shovel.c | 67 | notify_fail( "Type must be fixed or floating.\n" );
terrain_shovel.c | 77 | dest_me();
terrain_shovel.c | 78 | clear_connections( terrain );
terrain_shovel.c | 79 | delete_cloned_location( terrain, file_name( room ) );
terrain_shovel.c | 80 | all_inventory( room );
terrain_shovel.c | 81 | move( "/room/void" );
terrain_shovel.c | 82 | dest_me();
terrain_shovel.c | 83 | find_location( terrain, old_co_ord );
terrain_shovel.c | 84 | move( room );
terrain_shovel.c | 89 | write( "This function has not been written yet.\n" );
terrain_shovel.c | 98 | notify_fail( "Visit where?\n" );
terrain_shovel.c | 102 | find_location( terrain, ({ x, y, z }) );
s_badge.c | 14 | access_mail(string str);
s_badge.c | 15 | list_destinations();
s_badge.c | 16 | list_transits();
s_badge.c | 17 | do_goto(string destination);
s_badge.c | 20 | set_name( "badge" );
s_badge.c | 21 | set_short( "bejewelled gold badge" );
s_badge.c | 22 | add_adjective( "gold" );
s_badge.c | 27 | setup_armour( 100 );
s_badge.c | 28 | set_damage_chance( 0 );
s_badge.c | 29 | set_type( "badge" );
s_badge.c | 30 | reset_drop();
s_badge.c | 33 | call_out( (: add_wear_effect :), 0, PROTECTION_EFFECT );
s_badge.c | 75 | Liaison(s)." );
s_badge.c | 85 | environment()->query_name();
s_badge.c | 89 | set_drop();
s_badge.c | 90 | move( "/room/rubbish" );
s_badge.c | 94 | add_command( "mail", "", (: access_mail(0) :) );
s_badge.c | 95 | add_command( "mail", "<string>", (: access_mail($4[0]) :) );
s_badge.c | 98 | add_command("destinations", "", (: list_destinations() :) );
s_badge.c | 99 | add_command("transits", "", (: list_transits() :) );
s_badge.c | 100 | add_command("goto", "<string>", (: do_goto($4[0]) :) );
s_badge.c | 105 | return (int)MAIL_TRACK->mail( words );
s_badge.c | 112 | file_name( environment( this_player() ) );
s_badge.c | 114 | notify_fail( "You cannot use the badge to move from here.\n" );
s_badge.c | 115 | write( "From here you can use the badge to move to:\n" );
s_badge.c | 116 | sizeof( theres );
s_badge.c | 124 | catch( theres[ i ]->force_load() );
s_badge.c | 131 | write( sprintf( "%c: %s\n", 65 + i, (string)there->a_short() ) );
s_badge.c | 140 | keys( routes );
s_badge.c | 142 | notify_fail( "There are no transit points at the moment.\n" );
s_badge.c | 143 | write( "You can use the badge to move from:\n" );
s_badge.c | 144 | sizeof( theres );
s_badge.c | 152 | catch( theres[ i ]->force_load() );
s_badge.c | 159 | write( sprintf( "   %s\n", (string)there->a_short() ) );
s_badge.c | 175 | file_name( environment( this_player() ) );
s_badge.c | 177 | notify_fail( "You cannot use the badge to move from here.\n" );
s_badge.c | 181 | notify_fail( "That is not a valid label from here.\n" );
s_badge.c | 188 | catch( theres[ i ]->force_load() );
s_badge.c | 194 | write( "Moving you to "+ (string)there->the_short() +"...\n" );
paint_brush.c | 10 | set_name("brush");
paint_brush.c | 11 | set_short("camel hair brush");
paint_brush.c | 12 | add_adjective("hair");
paint_brush.c | 13 | add_adjective("camel");
paint_brush.c | 14 | add_adjective("paint");
paint_brush.c | 18 | set_value(15);
paint_brush.c | 19 | set_weight(15);
buffing_cloth.c | 10 | set_name("cloth");
buffing_cloth.c | 11 | set_short("buffing cloth");
buffing_cloth.c | 12 | set_main_plural("buffing cloths");
buffing_cloth.c | 13 | add_adjective( "buffing" );
buffing_cloth.c | 16 | set_value(32);
buffing_cloth.c | 17 | set_weight(2);
shoelace.c | 10 | set_name("lace");
shoelace.c | 11 | set_short("shoe lace");
shoelace.c | 12 | add_adjective("shoe");
shoelace.c | 13 | add_alias("shoelace");
shoelace.c | 14 | set_main_plural("shoe laces");
shoelace.c | 15 | add_plural("shoelaces");
shoelace.c | 18 | set_value(15);
shoelace.c | 19 | set_weight(2);
shoehorn.c | 10 | set_name("horn");
shoehorn.c | 11 | set_short("shoe horn");
shoehorn.c | 12 | add_adjective("shoe");
shoehorn.c | 13 | set_long("A normal shoe horn.\n");
shoehorn.c | 14 | set_value(10);
shoehorn.c | 15 | set_weight(5);
nail.c | 10 | set_name("nail");
nail.c | 11 | set_short("nail");
nail.c | 12 | set_main_plural("nails");
nail.c | 15 | set_value(4);
nail.c | 16 | set_weight(1);
glass.c | 12 | set_name("glass");
glass.c | 13 | set_short("glass");
glass.c | 17 | set_max_volume(VOLUME_HALFPINT);
glass.c | 18 | set_max_weight(10);
glass.c | 19 | set_leak_rate(0);
glass.c | 20 | set_value(30);
glass.c | 21 | set_weight(5);
glass.c | 22 | set_stuck(1);
wedge.c | 10 | set_name("wedge");
wedge.c | 11 | set_short("door wedge");
wedge.c | 12 | add_adjective("door");
wedge.c | 13 | set_main_plural("door wedges");
wedge.c | 16 | set_value(10);
wedge.c | 17 | set_weight(10);
book_end.c | 10 | set_name("end");
book_end.c | 11 | set_short("book end");
book_end.c | 12 | set_main_plural("book ends");
book_end.c | 15 | set_value(35);
book_end.c | 16 | set_weight(40);
small_keyring.c | 10 | set_name("keyring");
small_keyring.c | 11 | set_short("small keyring");
small_keyring.c | 12 | set_main_plural("small keyrings");
small_keyring.c | 13 | add_adjective( "small" );
small_keyring.c | 16 | set_weight(1);
small_keyring.c | 17 | set_max_weight( 10 );
small_keyring.c | 18 | set_value( 200 );
safety_clip.c | 10 | set_name("clip");
safety_clip.c | 11 | set_short("safety clip");
safety_clip.c | 12 | add_adjective("safety");
safety_clip.c | 17 | set_value(25);
safety_clip.c | 18 | set_weight(2);
bottleopener.c | 10 | set_name("opener");
bottleopener.c | 11 | set_short("bottle opener");
bottleopener.c | 12 | add_adjective("bottle");
bottleopener.c | 13 | set_main_plural("bottle openers");
bottleopener.c | 16 | set_value(15);
bottleopener.c | 17 | set_weight(5);
hair_brush.c | 10 | set_name("brush");
hair_brush.c | 11 | set_short("stiff hair brush");
hair_brush.c | 12 | add_adjective("hair");
hair_brush.c | 13 | add_adjective("stiff");
hair_brush.c | 17 | set_value(10);
hair_brush.c | 18 | set_weight(20);
picframe.c | 10 | set_name("frame");
picframe.c | 11 | set_short("picture frame");
picframe.c | 12 | add_adjective("picture");
picframe.c | 13 | set_long("A lovely gold painted picture frame.\n");
picframe.c | 14 | set_value(20);
picframe.c | 15 | set_weight(30);
picframe.c | 16 | set_max_weight(1);
picframe.c | 17 | set_open();
picframe.c | 18 | set_stuck(1);
beeswax_candle.c | 12 | set_name( "candle" );
beeswax_candle.c | 13 | set_short( "beeswax candle" );
beeswax_candle.c | 14 | add_adjective( "beeswax" );
beeswax_candle.c | 25 | set_empty_mess( "is burnt to a stub." );
beeswax_candle.c | 26 | set_max_fuel( 900 );
beeswax_candle.c | 27 | set_fuel( 900 );
beeswax_candle.c | 28 | set_brightness( 60 );
beeswax_candle.c | 29 | set_value( 24 );
beeswax_candle.c | 30 | set_hold_required( 1 );
beeswax_candle.c | 31 | add_property( "no recycling", 1 );
beeswax_candle.c | 32 | new_weapon( 10 );
beeswax_candle.c | 33 | set_weight( 1 );
beeswax_candle.c | 34 | set_hide_cond( 1 );
item_shop_safe.c | 3 | set_max_float( int );
item_shop_safe.c | 4 | query_max_float();
item_shop_safe.c | 7 | set_name( "safe" );
item_shop_safe.c | 8 | set_short( "cash safe" );
item_shop_safe.c | 11 | add_adjective( "float" );
item_shop_safe.c | 12 | add_property( "there", "in the wall" );
item_shop_safe.c | 13 | set_difficulty( 10 );
item_shop_safe.c | 15 | reset_get();
item_shop_safe.c | 16 | set_closed();
item_shop_safe.c | 17 | set_locked();
item_shop_safe.c | 19 | set_key( "non-existent key" );
item_shop_safe.c | 20 | add_property( "no recycling", 1 );
item_shop_safe.c | 21 | set_pick_skill( "covert.lockpick.safes" );
item_shop_safe.c | 23 | set_weight( 2000 );
item_shop_safe.c | 24 | set_max_weight( 5000 );
item_shop_safe.c | 26 | set_value( 120000 );
item_shop_safe.c | 30 | this_object()->set_unlocked();
basic_door_lock.c | 4 | set_name("lock");
basic_door_lock.c | 5 | set_short("basic door lock");
basic_door_lock.c | 6 | add_adjective( ({ "basic", "door" }));
basic_door_lock.c | 7 | set_long("A basic brass door lock.\n");
basic_door_lock.c | 8 | add_property("difficulty", 2);
basic_door_lock.c | 9 | set_weight(19);
basic_door_lock.c | 10 | set_value(20000);
basic_door_lock.c | 14 | add_property("key prop", "door_lock_"+num);
basic_door_lock.c | 15 | add_property("locktype", "door");
flimsy_door_lock.c | 4 | set_name("lock");
flimsy_door_lock.c | 5 | set_short("flimsy door lock");
flimsy_door_lock.c | 6 | add_adjective( ({ "flimsy", "door" }));
flimsy_door_lock.c | 7 | set_long("A flimsy brass door lock.\n");
flimsy_door_lock.c | 8 | add_property("difficulty", 1);
flimsy_door_lock.c | 9 | set_weight(19);
flimsy_door_lock.c | 10 | set_value(10000);
flimsy_door_lock.c | 14 | add_property("key prop", "door_lock_"+num);
flimsy_door_lock.c | 15 | add_property("locktype", "door");
standard_door_lock.c | 4 | set_name("lock");
standard_door_lock.c | 5 | set_short("standard door lock");
standard_door_lock.c | 6 | add_adjective( ({ "standard", "door" }));
standard_door_lock.c | 7 | set_long("A standard brass door lock.\n");
standard_door_lock.c | 8 | add_property("difficulty", 4);
standard_door_lock.c | 9 | set_weight(19);
standard_door_lock.c | 10 | set_value(40000);
standard_door_lock.c | 14 | add_property("key prop", "door_lock_"+num);
standard_door_lock.c | 15 | add_property("locktype", "door");
furniture_key.c | 4 | set_key("small furniture", "furniture_lock_" + num);
furniture_key.c | 7 | set_value(10);
furniture_key.c | 12 | set_lock_number(num);
furniture_key.c | 16 | int_query_static_auto_load();
chubby_special_door_lock.c | 4 | set_name("lock");
chubby_special_door_lock.c | 5 | set_short("chubby special door lock");
chubby_special_door_lock.c | 6 | add_adjective( ({ "chubby", "special", "door" }));
chubby_special_door_lock.c | 13 | add_property("difficulty", 8);
chubby_special_door_lock.c | 14 | set_weight(19);
chubby_special_door_lock.c | 15 | set_value(160000);
chubby_special_door_lock.c | 19 | add_property("key prop", "door_lock_"+num);
chubby_special_door_lock.c | 20 | add_property("locktype", "door");
brass_door_key.c | 4 | set_key("small brass", "door_lock_" + num);
brass_door_key.c | 7 | set_value(10);
brass_door_key.c | 11 | int_query_static_auto_load();
basic_furniture_lock.c | 4 | set_name("lock");
basic_furniture_lock.c | 5 | set_short("basic furniture lock");
basic_furniture_lock.c | 6 | add_adjective( ({ "basic", "furniture" }));
basic_furniture_lock.c | 7 | set_long("A basic brass furniture lock.\n");
basic_furniture_lock.c | 8 | add_property("difficulty", 1);
basic_furniture_lock.c | 9 | set_weight(19);
basic_furniture_lock.c | 10 | set_value(10000);
basic_furniture_lock.c | 14 | add_property("key prop", "furniture_lock_"+num);
basic_furniture_lock.c | 15 | add_property("locktype", "furniture");
chubby_standard_door_lock.c | 4 | set_name("lock");
chubby_standard_door_lock.c | 5 | set_short("chubby standard door lock");
chubby_standard_door_lock.c | 6 | add_adjective( ({ "chubby", "standard", "door" }));
chubby_standard_door_lock.c | 14 | add_property("difficulty", 6);
chubby_standard_door_lock.c | 15 | set_weight(19);
chubby_standard_door_lock.c | 16 | set_value(80000);
chubby_standard_door_lock.c | 20 | add_property("key prop", "door_lock_"+num);
chubby_standard_door_lock.c | 21 | add_property("locktype", "door");
chubby_ultra_door_lock.c | 4 | set_name("lock");
chubby_ultra_door_lock.c | 5 | set_short("chubby ultra door lock");
chubby_ultra_door_lock.c | 6 | add_adjective( ({ "ultra", "chubby", "door" }));
chubby_ultra_door_lock.c | 13 | add_property("difficulty", 10);
chubby_ultra_door_lock.c | 14 | set_weight(19);
chubby_ultra_door_lock.c | 15 | set_value(300000);
chubby_ultra_door_lock.c | 19 | add_property("key prop", "door_lock_"+num);
chubby_ultra_door_lock.c | 20 | add_property("locktype", "door");
standard_furniture_lock.c | 4 | set_name("lock");
standard_furniture_lock.c | 5 | set_short("standard furniture lock");
standard_furniture_lock.c | 6 | add_adjective( ({ "standard", "furniture" }));
standard_furniture_lock.c | 7 | set_long("A standard brass furniture lock.\n");
standard_furniture_lock.c | 8 | add_property("difficulty", 2);
standard_furniture_lock.c | 9 | set_weight(19);
standard_furniture_lock.c | 10 | set_value(10000);
standard_furniture_lock.c | 14 | add_property("key prop", "furniture_lock_"+num);
standard_furniture_lock.c | 15 | add_property("locktype", "furniture");
paper_file.c | 7 | seteuid(getuid());
paper_file.c | 8 | create();
paper_file.c | 20 | read_file(file_name);
paper_file.c | 24 | this_player()->add_command("read", this_object());
paper_file.c | 25 | init();
shop_notice.c | 17 | set_name("notice");
shop_notice.c | 18 | set_short("policy notice");
shop_notice.c | 19 | set_long("");
shop_notice.c | 20 | add_adjective("policy");
shop_notice.c | 21 | reset_get();
shop_notice.c | 32 | get_policies(_type);
shop_notice.c | 63 | sprintf("%d. %s\n", i++, policies[policy][0]);
shop_notice.c | 78 | get_stock_policy();
shop_cabinet.c | 23 | do_save();
shop_cabinet.c | 28 | create();
shop_cabinet.c | 32 | this_object()->setup();
shop_cabinet.c | 33 | this_object()->reset();
shop_cabinet.c | 58 | move(player);
shop_cabinet.c | 60 | remove_call_out(_call_save);
shop_cabinet.c | 61 | call_out((: do_save() :), 1);
shop_cabinet.c | 72 | do_save();
shop_cabinet.c | 74 | dest_me();
shop_cabinet.c | 84 | if (file_size(_save_file + ".o") >
shop_cabinet.c | 86 | unguarded((: restore_object, _save_file :));
shop_cabinet.c | 89 | init_dynamic_arg(_stock,0);
shop_cabinet.c | 103 | debug_printf("Saving cabinet data to %s.\n", _save_file);
shop_cabinet.c | 105 | query_dynamic_auto_load();
shop_cabinet.c | 106 | unguarded((: save_object, _save_file :));
shop_cabinet.c | 131 | move(environment(player));
shop_cabinet.c | 133 | remove_call_out(_call_save);
shop_cabinet.c | 134 | call_out((: do_save() :), 1);
shop_cabinet.c | 147 | do_load();
shop_chart.c | 19 | set_name("chart");
shop_chart.c | 20 | set_short("items chart");
shop_chart.c | 21 | add_adjective("items");
shop_chart.c | 22 | reset_get();
shop_chart.c | 32 | query_list_mapping();
shop_chart.c | 33 | sort_array(keys(list),1);
shop_chart.c | 43 | sizeof( items );
shop_chart.c | 48 | reset_eval_cost();
shop_chart.c | 55 | implode(list[items[i]][CHART_CAB], (: $1+","+$2 :), "")[1..]);
shop_chart.c | 57 | sprintf("%s%s", ::long(word,dark), chart);
shop_chart.c | 71 | query_place()))+ ".\n");
shopping_bag.c | 16 | set_name("bag");
shopping_bag.c | 17 | set_short("shopping bag");
shopping_bag.c | 18 | add_adjective("shopping");
shopping_bag.c | 19 | set_main_plural("shopping bags");
shopping_bag.c | 22 | set_value(3);
shopping_bag.c | 23 | set_transparent();
shopping_bag.c | 24 | add_property("no recycling",1);
shopping_bag.c | 27 | set_weight(1);
shopping_bag.c | 28 | set_max_weight(MAX_BAG_WEIGHT);
shopping_bag.c | 34 | adjust_cond(-(10 + random(10)));
shopping_bag.c | 39 | if (sizeof(all_inventory()) >
shopping_bag.c | 42 | query_num(MAX_BAG_ITEMS)+ " items.\n");
shopping_bag.c | 45 | if (!query_cond()) set_cond(20);
shopping_bag.c | 46 | call_out((: change_condition() :), 1);
shopping_bag.c | 47 | test_add(thing,flag);
shopping_bag.c | 53 | if (!query_cond()) set_cond(20);
shopping_bag.c | 54 | call_out((: change_condition() :), 1);
shopping_bag.c | 55 | test_remove(thing,flag,dest);
staff_book.c | 19 | set_name( "book" );
staff_book.c | 20 | add_alias( "handbook" );
staff_book.c | 21 | set_short( "staff handbook");
staff_book.c | 22 | set_main_plural( "staff handbooks" );
staff_book.c | 23 | add_adjective( "staff" );
staff_book.c | 24 | set_weight( 5 );
staff_book.c | 25 | set_value( 5 );
staff_book.c | 26 | set_no_pages( 12 );
staff_book.c | 27 | add_property( "no recycling", 1 );
staff_book.c | 35 | query_cap_name(name);
staff_book.c | 36 | capitalize(name);
staff_book.c | 45 | add_property( "office", office );
staff_book.c | 53 | set_open_page( 1 );
staff_book.c | 67 | set_open_page( 2 );
staff_book.c | 84 | set_open_page( 3 );
staff_book.c | 102 | set_open_page( 4 );
staff_book.c | 111 | cap_name( _office->query_creator() )+ " (caretaker)\n", "common", 100 );
staff_book.c | 113 | set_open_page( 5 );
staff_book.c | 135 | set_open_page( 6 );
staff_book.c | 160 | set_open_page( 7 );
staff_book.c | 181 | set_open_page( 8 );
staff_book.c | 207 | set_open_page( 9 );
staff_book.c | 230 | set_open_page( 10 );
staff_book.c | 243 | set_open_page( 11 );
staff_book.c | 267 | set_open_page( 12 );
staff_book.c | 288 | set_open_page( 0 );
staff_book.c | 295 | set_open_page( 0 );
staff_book.c | 302 | query_property( "office" );
staff_book.c | 303 | set_office( _office );
staff_book.c | 311 | init();
mgr_book.c | 18 | set_name( "book" );
mgr_book.c | 19 | add_alias( "handbook" );
mgr_book.c | 20 | set_short( "manager handbook");
mgr_book.c | 21 | set_main_plural( "manager handbooks" );
mgr_book.c | 22 | add_adjective( "manager" );
mgr_book.c | 23 | set_weight( 5 );
mgr_book.c | 24 | set_value( 5 );
mgr_book.c | 25 | set_no_pages( 11 );
mgr_book.c | 26 | add_property( "no recycling", 1 );
mgr_book.c | 34 | query_cap_name(name);
mgr_book.c | 35 | capitalize(name);
mgr_book.c | 42 | add_property( "office", office );
mgr_book.c | 50 | set_open_page( 1 );
mgr_book.c | 62 | set_open_page( 2 );
mgr_book.c | 73 | set_open_page( 3 );
mgr_book.c | 93 | set_open_page( 4 );
mgr_book.c | 112 | set_open_page( 5 );
mgr_book.c | 135 | set_open_page( 6 );
mgr_book.c | 158 | set_open_page( 7 );
mgr_book.c | 176 | set_open_page( 8 );
mgr_book.c | 197 | set_open_page( 9 );
mgr_book.c | 211 | set_open_page( 10 );
mgr_book.c | 232 | set_open_page( 11 );
mgr_book.c | 244 | set_open_page( 0 );
mgr_book.c | 250 | set_open_page( 0 );
mgr_book.c | 255 | query_property( "office" );
mgr_book.c | 256 | set_office( _office );
mgr_book.c | 263 | init();
shop_badge.c | 16 | do_badge(string);
shop_badge.c | 17 | do_chat(string);
shop_badge.c | 18 | get_properties();
shop_badge.c | 19 | cap_name(string);
shop_badge.c | 30 | set_name("badge");
shop_badge.c | 31 | set_short("employee badge");
shop_badge.c | 32 | add_adjective("employee");
shop_badge.c | 33 | add_adjective("tin");
shop_badge.c | 34 | add_adjective("small");
shop_badge.c | 35 | set_main_plural("employee badges");
shop_badge.c | 36 | set_weight(1);
shop_badge.c | 37 | set_value(0);
shop_badge.c | 38 | set_type("badge");
shop_badge.c | 39 | setup_armour(640);
shop_badge.c | 40 | set_damage_chance(5);
shop_badge.c | 43 | add_property("no recycling", 1);
shop_badge.c | 44 | add_extra_look(this_object());
shop_badge.c | 49 | query_property("office");
shop_badge.c | 50 | query_property("owner");
shop_badge.c | 51 | query_property("echo");
shop_badge.c | 52 | shop_very_short();
shop_badge.c | 53 | query_channel();
shop_badge.c | 56 | query_shop_name()+ ", "+ _office->query_place()+ ".\n");
shop_badge.c | 57 | add_adjective(_channel);
shop_badge.c | 66 | query_cap_name(name);
shop_badge.c | 67 | capitalize(name);
shop_badge.c | 80 | query_shop_name()+ ", "+ _office->query_place()+ ".\n");
shop_badge.c | 81 | add_adjective(_channel);
shop_badge.c | 83 | this_player();
shop_badge.c | 90 | add_command("badge", ({ "help", "echo" }), (: do_badge($5) :));
shop_badge.c | 91 | add_command("h"+ _channel, "", (: do_badge("hist") :));
shop_badge.c | 92 | add_command(_channel+"?", "", (: do_badge("who") :));
shop_badge.c | 93 | add_command(_channel, "<string'text'>", (: do_chat($4[0]) :));
shop_badge.c | 94 | add_command(_channel+"@", "<string'text'>", (: do_chat("@"+$4[0]) :));
shop_badge.c | 106 | add_succeeded_mess("");
shop_badge.c | 111 | badge_list());
shop_badge.c | 117 | query_chat_history(lower_case(_channel));
shop_badge.c | 131 | tell_object(this_player(), result);
shop_badge.c | 137 | tell_object(this_player(), "Local echo now off.\n");
shop_badge.c | 142 | tell_object(this_player(), "Local echo now on.\n");
shop_badge.c | 145 | add_property("echo", _echo);
shop_badge.c | 158 | tell_object(this_player(), result);
shop_badge.c | 171 | add_succeeded_mess("");
shop_badge.c | 176 | this_player();
shop_badge.c | 190 | replace_string(wisp, "%^", "");
shop_badge.c | 194 | notify_fail("Chat what?\n");
shop_badge.c | 201 | tell_object(tp,  "You whisper into the badge.\n");
shop_badge.c | 202 | query_cap_name();
shop_badge.c | 205 | query_short();
shop_badge.c | 207 | replace(wisp, sprintf("%c", 7), "!");
shop_badge.c | 208 | children(BADGE);
shop_badge.c | 212 | find_object(BADGE)});
shop_badge.c | 216 | this_object(), find_object(BADGE)});
shop_badge.c | 218 | receive(_channel ,sender, wisp);
shop_badge.c | 223 | add_chat_history(_channel, sender, wisp[1..1000]);
shop_badge.c | 227 | add_chat_history(_channel, sender+ " ", wisp[1..1000]);
shop_badge.c | 232 | add_chat_history(_channel, sender +": ", wisp);
shop_badge.c | 244 | this_player();
shop_badge.c | 266 | move("/room/rubbish");
shop_badge.c | 269 | query_property("office");
shop_badge.c | 270 | query_property("owner");
shop_badge.c | 271 | query_property("echo");
shop_badge.c | 272 | shop_very_short();
shop_badge.c | 273 | query_channel();
shop_badge.c | 280 | query_channel() { return copy(_channel);
shop_badge.c | 286 | environment();
shop_badge.c | 293 | base_name(previous_object());
shop_badge.c | 298 | LOG_ERROR("shop_badge.c", "receive("+channel+","+sender+","+text+")");
shop_badge.c | 311 | query_property("ignoring");
shop_badge.c | 352 | LOG_ERROR("shop_badge.c", "set_props("+path+","+owner+")");
shop_badge.c | 357 | query_shop_name()+ ", "+ path->query_place()+ ".\n");
shop_badge.c | 358 | add_property("office", path);
shop_badge.c | 359 | add_property("owner", owner);
shop_badge.c | 362 | shop_very_short();
shop_badge.c | 363 | query_channel();
shop_badge.c | 364 | add_adjective( _channel );
shop_badge.c | 388 | add_property(_channel+ "_on", 1);
shop_badge.c | 392 | query_employee(thing->query_name());
shop_badge.c | 417 | add_property(_channel+ "_on", 1);
shop_badge.c | 418 | set_title(_title, start + _office->query_shop_name());
shop_badge.c | 421 | previous_object()->query_worn_by();
shop_badge.c | 424 | remove_property(_channel+ "_on");
shop_badge.c | 425 | remove_title(_title);
powder_trap.c | 4 | set_name("trap");
powder_trap.c | 5 | set_weight(1);
powder_trap.c | 6 | set_short("anthrax trap");
powder_trap.c | 7 | add_adjective("anthrax");
powder_trap.c | 23 | set_value(10000);
fast_acting_needle_trap.c | 4 | set_name("trap");
fast_acting_needle_trap.c | 5 | set_weight(1);
fast_acting_needle_trap.c | 6 | set_short("fast-acting needle trap");
fast_acting_needle_trap.c | 7 | add_adjective(({ "fast-acting", "fast", "acting", "needle" }));
fast_acting_needle_trap.c | 22 | set_value(80000);
gas_trap.c | 4 | set_name("trap");
gas_trap.c | 5 | set_weight(1);
gas_trap.c | 6 | set_short("gas trap");
gas_trap.c | 7 | add_adjective("gas");
gas_trap.c | 20 | set_value(120000);
leg_trap.c | 9 | set_name("trap");
leg_trap.c | 10 | set_weight(1);
leg_trap.c | 11 | set_short("leg trap");
leg_trap.c | 12 | add_adjective("leg");
leg_trap.c | 30 | set_value(1000000);
needle_trap.c | 4 | set_name("trap");
needle_trap.c | 5 | set_weight(1);
needle_trap.c | 6 | set_short("needle trap");
needle_trap.c | 7 | add_adjective("needle");
needle_trap.c | 21 | set_value(20000);
.bucket_small.ob_virtual_.c | 3 | dest_me() { destruct( this_object() );
.bucket_small.ob_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.bucket_small.ob_virtual_.c | 13 | create_virtual_object( "/obj/vessel.c", 1 );
.bucket_small.ob_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/misc/buckets/bucket_small.ob#1" );
.bucket_small.ob_virtual_.c | 15 | call_other( clone, "set_name",  "bucket"  );
.bucket_small.ob_virtual_.c | 16 | call_other( clone, "set_short",  "small bucket"  );
.bucket_small.ob_virtual_.c | 17 | call_other( clone, "set_long",  "This is a small metal bucket.  It is not very shiny.\n"  );
.bucket_small.ob_virtual_.c | 18 | call_other( clone, "set_main_plural",  "small buckets"  );
.bucket_small.ob_virtual_.c | 19 | call_other( clone, "add_adjective",  "small"  );
.bucket_small.ob_virtual_.c | 20 | call_other( clone, "add_plural",  "buckets"  );
.bucket_small.ob_virtual_.c | 21 | call_other( clone, "set_stuck",  1  );
.bucket_small.ob_virtual_.c | 22 | call_other( clone, "set_leak_rate",  0  );
.bucket_small.ob_virtual_.c | 23 | call_other( clone, "set_max_volume",  3000  );
.bucket_small.ob_virtual_.c | 24 | call_other( clone, "set_max_weight",  30  );
.bucket_small.ob_virtual_.c | 25 | call_other( clone, "set_full_weight",  30  );
.bucket_small.ob_virtual_.c | 26 | call_other( clone, "set_value",  85  );
.bucket_small.ob_virtual_.c | 27 | call_other( clone, "set_weight",  10  );
.bucket_small.ob_virtual_.c | 28 | call_other( clone, "set_material",  "metal" );
commercial.c | 8 | do_list(int force);
commercial.c | 11 | set_name("spulluf");
commercial.c | 12 | set_gender(1 + random(2) );
commercial.c | 13 | set_long("A nice happy person with a nice smile.\n");
commercial.c | 14 | add_property("demon", 1);
commercial.c | 15 | set_race( "human" );
commercial.c | 16 | set_level( 1 );
commercial.c | 18 | add_help_file("spulluf");
commercial.c | 20 | add_respond_to_with(({ "@say", "browse" }), "#do_browse");
commercial.c | 21 | add_respond_to_with(({ "@say", "buy" }), "#do_buy");
commercial.c | 39 | environment()->query_property("place");
commercial.c | 47 | setup_nationality(sellto->query_nationality(), sellto->query_nationality_region());
commercial.c | 53 | do_list(1);
commercial.c | 64 | call_out("leave_room", 5);
commercial.c | 77 | query_money_place();
commercial.c | 85 | query_commercial_size()));
commercial.c | 91 | query_commercial_size();
commercial.c | 113 | move("/room/rubbish", "$N shuffles away.");
commercial.c | 128 | call_out("leave_room", 5);
commercial.c | 131 | query_money_place();
commercial.c | 139 | lower_case(str);
commercial.c | 142 | filter(_furniture, (: $1->query_commercial_type() == _commercial_type :));
commercial.c | 146 | if (strlen(str) >
commercial.c | 168 | long()[0..<2]);
commercial.c | 169 | query_commercial_information();
commercial.c | 174 | query_commercial_options();
commercial.c | 178 | the_short());
commercial.c | 183 | money_value_string(cost, place) });
commercial.c | 187 | query_multiple_short(bits));
commercial.c | 215 | call_out("leave_room", 5);
commercial.c | 218 | query_money_place();
commercial.c | 226 | lower_case(str);
commercial.c | 229 | filter(_furniture, (: $1->query_commercial_type() == _commercial_type :));
commercial.c | 233 | if (strlen(str) >
commercial.c | 246 | explode(options, ",");
commercial.c | 250 | strip_spaces(name);
commercial.c | 251 | strip_spaces(value);
commercial.c | 252 | lower_case(name)] = lower_case(value);
commercial.c | 257 | query_commercial_size();
commercial.c | 260 | if (size + furns[pos]->query_commercial_size() >
commercial.c | 264 | environment()->the_short());
commercial.c | 271 | query_commercial_options();
commercial.c | 292 | query_multiple_short(keys(values)) + ".");
commercial.c | 303 | query_value();
commercial.c | 308 | the_short() + ".");
commercial.c | 314 | clone_object(furns[pos]);
commercial.c | 316 | set_commercial_option(name, thing, environment());
commercial.c | 318 | move(environment());
commercial.c | 332 | call_out("leave_room", 5);
commercial.c | 341 | filter(obs, (: $1->query_commercial_furniture() :));
commercial.c | 352 | filter(ok, (: !$1->can_trash_furniture() :));
commercial.c | 362 | input_to("complete_trash", 0, ok);
commercial.c | 363 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
commercial.c | 369 | lower_case(str);
commercial.c | 371 | write("Aborting trash.\n");
commercial.c | 375 | query_multiple_short(obs) + " for you.\n");
commercial.c | 381 | init();
commercial.c | 388 | do_dismiss() :));
commercial.c | 391 | do_list(0) :));
commercial.c | 394 | do_list(0) :));
commercial.c | 397 | do_browse($4[0]) :));
commercial.c | 400 | do_buy($4[0], "") :));
commercial.c | 403 | do_buy($4[0], $4[1]) :));
cabbage.c | 13 | query_owner();
cabbage.c | 14 | check_env();
cabbage.c | 15 | zap_cabbage();
cabbage.c | 16 | long_desc();
cabbage.c | 25 | set_name( "cabbage" );
cabbage.c | 26 | set_short( "cabbage" );
cabbage.c | 27 | set_long( "A small cute looking cabbage.\n" );
cabbage.c | 28 | set_race( "cabbage" );
cabbage.c | 29 | set_level( 1 );
cabbage.c | 41 | add_property( "player", 1 );
cabbage.c | 42 | set_get();
cabbage.c | 49 | init();
cabbage.c | 50 | this_player()->add_command("eat", this_object(), "<direct:object'cabbage'>" );
cabbage.c | 51 | call_out( "check_env", 3 );
cabbage.c | 58 | set_long( (: long_desc :) );
cabbage.c | 60 | query_name();
cabbage.c | 61 | query_short();
cabbage.c | 62 | query_default_language();
cabbage.c | 64 | add_language( language );
cabbage.c | 65 | set_language( language );
cabbage.c | 75 | check_env();
cabbage.c | 93 | do_command("nestle " + souler->query_name() );
cabbage.c | 95 | do_command("peer curiously " + souler->query_name() );
cabbage.c | 104 | do_command("gasp");
cabbage.c | 105 | do_command("cry");
cabbage.c | 107 | do_command( "sburn " + souler->query_name() + " dreams");
cabbage.c | 137 | this_player()->add_effect("/std/effects/object/cabbage", 150);
cabbage.c | 138 | call_out("zap_cabbage", 2 );
cabbage.c | 146 | all_inventory()->move( environment() );
cabbage.c | 149 | do_command( "unfollow " + owner_name );
cabbage.c | 155 | move( "/room/rubbish" );
cabbage.c | 162 | call_out( "coleslaw", 2 );
cabbage.c | 164 | stop_fight(this_object());
cabbage.c | 165 | tell_object(ob, "The cabbage is a terrible pacifist.\n");
cabbage.c | 169 | stop_fight(this_object());
cabbage.c | 170 | tell_object(ob, "The cabbage is a terrible pacifist.\n");
cabbage.c | 184 | do_command( "sniffle sadly" );
cabbage.c | 190 | do_command( souls[random(sizeof(souls))] + owner_name );
cabbage.c | 200 | environment();
cabbage.c | 206 | do_command( "cry" );
cabbage.c | 207 | do_command( "'Woe is me! Where art thou, " + owner_short + "?" );
cabbage.c | 208 | call_out("zap_cabbage", 1);
cabbage.c | 212 | environment( owner );
cabbage.c | 237 | match_objects_for_existence( "caterpillar", ({ owner_env }) );
cabbage.c | 242 | do_command( "follow " + owner_name );
cabbage.c | 266 | request_object("coleslaw", 100);
cabbage.c | 268 | move( environment() );
cabbage.c | 270 | zap_cabbage();
cockroach.c | 4 | set_name("cockroach");
cockroach.c | 5 | set_short("cockroach");
cockroach.c | 6 | set_race("cockroach");
cockroach.c | 7 | set_level( random( 1 + random( 3 ) ) );
cockroach.c | 8 | set_main_plural("cockroaches");
cockroach.c | 9 | add_alias( "roach" );
cockroach.c | 10 | add_plural( "roaches" );
cockroach.c | 11 | add_adjective("dirty");
cockroach.c | 22 | set_wimpy( 30 );
greco.c | 22 | seteuid("Root");
greco.c | 24 | set_name("greco");
greco.c | 25 | set_short("Greco the Departure Gecko");
greco.c | 29 | query_possessive() + " notebook furiously.\n");
greco.c | 32 | set_name("gumboot");
greco.c | 33 | set_short("Gumboot");
greco.c | 40 | add_property("determinate", "");
greco.c | 41 | add_property("no_attack", 1);
greco.c | 42 | set_gender(1+random(2));
greco.c | 43 | basic_setup("gnome", "warrior", 30);
greco.c | 44 | set_language("general");
greco.c | 50 | setup();
greco.c | 60 | catch(set_grecos_day_off("/obj/monster/greco"->query_grecos_day_off()));
greco.c | 71 | query_possessive()+" ear.\n");
greco.c | 75 | all_inventory(player);
greco.c | 78 | sizeof(save_obs);
greco.c | 79 | call_out("get_ob_al", 1, save_obs[i], verbose);
greco.c | 80 | call_out("finish_player", 2, verbose);
greco.c | 90 | fragile_auto_str_ob(ob);
greco.c | 101 | catch(ob->move("/room/broken"));
greco.c | 103 | catch(value = ob->query_value());
greco.c | 105 | catch(obname = ob->short(1));
greco.c | 106 | catch("/obj/misc/al_receipt"->set_object(file_name(ob)));
greco.c | 107 | set_obname(obname);
greco.c | 108 | set_value(value);
greco.c | 110 | fragile_auto_str_ob(find_object("/obj/misc/al_receipt"));
greco.c | 118 | ctime(time()), my_player?my_player->query_name():"0", ob);
greco.c | 130 | call_out("finish_player", 2, verbose);
greco.c | 136 | call_out("finish_player", 2, verbose);
greco.c | 141 | sizeof(missing_obs);
greco.c | 159 | sizeof(missing_obs);
greco.c | 160 | handle_dead_ob(missing_obs[i]);
greco.c | 163 | save_with_auto_load(total_als);
greco.c | 166 | do_command( "smile brightly" );
greco.c | 167 | do_command( "'Well, everything seems to be in order.  Bye bye!" );
greco.c | 168 | do_command( "wave" );
greco.c | 195 | do_command("smile strangely");
greco.c | 196 | do_command("'Well.  Uhhhh.  Thats it.");
greco.c | 197 | do_command("'I...  Umm.  Hope.");
greco.c | 208 | short(1)+" gets flung out through the door.\n");
greco.c | 239 | tell_object(my_player, "Do come again!\n");
greco.c | 246 | reset_eval_cost();
greco.c | 248 | catch(saved_ob->set_tracked_item_status_reason("PLAYER_QUIT"));
greco.c | 249 | catch(saved_ob->dest_me());
greco.c | 252 | catch(saved_ob->dwep());
greco.c | 257 | reset_eval_cost();
greco.c | 259 | catch( ITEM_TRACKER->save_all_item_states_delete_cache( my_player->query_name() ));
greco.c | 260 | catch(my_player->effects_quiting());
greco.c | 261 | catch(my_player->dest_me());
greco.c | 263 | catch( my_player->dwep() );
greco.c | 266 | say(short(1) + " sighs deeply.\n");
granny.c | 5 | finish_up();
granny.c | 12 | time();
granny.c | 13 | set_name( "godmother" );
granny.c | 14 | set_short( "fairy godmother" );
granny.c | 15 | add_adjective( "fairy" );
granny.c | 22 | set_race( "human" );
granny.c | 23 | set_guild( "witch" );
granny.c | 24 | set_level( 300 );
granny.c | 25 | set_gender( 2 );
granny.c | 26 | set_language("general");
granny.c | 27 | set_response_mon_understand_anything(1);
granny.c | 28 | add_property( "anchor", 1);
granny.c | 30 | request_item("hobnailed boots", 100)->move( this_object() );
granny.c | 31 | request_item("antique black dress", 100)->move( this_object() );
granny.c | 32 | request_item("witchs pointy hat", 100)->move( this_object() );
granny.c | 33 | request_item("black witches cloak", 100)->move( this_object() );
granny.c | 34 | init_equip();
granny.c | 36 | add_respond_to_with(({ "yes" }), "#yes_response");
granny.c | 37 | add_respond_to_with(({ "@nod" }), "#yes_response");
granny.c | 38 | add_respond_to_with(({ "no" }), "#no_response");
granny.c | 39 | add_respond_to_with(({ "@shake" }), "#no_response");
granny.c | 40 | add_respond_to_with(({ "@think", "somewhere", "safe" }), "#think_safe");
granny.c | 41 | add_respond_to_with(({ "@think", "safe" }), "#think_safe");
granny.c | 42 | add_respond_to_with(({ "@think", "safety" }), "#think_safe");
granny.c | 43 | add_respond_to_with(({ "@womble" }), "#think_mended_drum");
granny.c | 52 | query_nationality();
granny.c | 57 | finish_up();
granny.c | 61 | query_default_start_location();
granny.c | 62 | query_short();
granny.c | 69 | queue_command( "glare "+pl->query_name() );
granny.c | 71 | time();
granny.c | 81 | queue_command( "say Right then.  Close your eyes and concentrate." );
granny.c | 82 | queue_command( "say Think of somewhere safe." );
granny.c | 84 | call_out("check_think", 30);
granny.c | 91 | queue_command( "say So why did you call me up then?", 1 );
granny.c | 92 | queue_command( "roll eyes "+lost->query_name() );
granny.c | 93 | queue_command( "pinch "+lost->query_name()+" cheek" );
granny.c | 94 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 105 | finish_panic(lost, PANIC_OK);
granny.c | 116 | queue_command( "tap" );
granny.c | 118 | call_out("check_think", 60);
granny.c | 120 | queue_command( "say Young people of today..." );
granny.c | 121 | queue_command( "mutter no manners" );
granny.c | 122 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 130 | queue_command("hrmph");
granny.c | 133 | queue_command("glare "+lost->query_name() );
granny.c | 134 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 143 | adjust_tmp_str(-4);
granny.c | 144 | adjust_tmp_con(-4);
granny.c | 145 | adjust_tmp_dex(-4);
granny.c | 146 | adjust_tmp_int(-4);
granny.c | 147 | adjust_tmp_wis(-4);
granny.c | 150 | queue_command( "say "+attacker->one_short()+" I here by curse you!" );
granny.c | 151 | queue_command( "say Don't expect me to help you again." );
granny.c | 152 | queue_command( "glare "+attacker->query_name() );
granny.c | 153 | add_property("attacked godmother", time());
granny.c | 154 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 163 | queue_command( "blink" );
granny.c | 164 | queue_command( "say Where'd that bugger go?  Oh well.");
granny.c | 165 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 168 | check_think();
granny.c | 176 | queue_command( "glare " + lost->query_name() );
granny.c | 180 | queue_command( "peer" );
granny.c | 183 | queue_command( "scowl" );
granny.c | 185 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 191 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 199 | finish_panic(lost, PANIC_NOT_OK);
granny.c | 202 | dest_me();
magrat.c | 5 | finish_up();
magrat.c | 12 | time();
magrat.c | 13 | set_name("garlick");
magrat.c | 14 | set_short("fairy godmother");
magrat.c | 15 | add_alias("godmother");
magrat.c | 16 | add_adjective("fairy");
magrat.c | 28 | set_race("human");
magrat.c | 29 | set_guild("witch");
magrat.c | 30 | set_level(200);
magrat.c | 31 | set_gender(2);
magrat.c | 32 | set_language("general");
magrat.c | 33 | set_response_mon_understand_anything(1);
magrat.c | 34 | add_property( "anchor", 1);
magrat.c | 36 | request_item("startling green dress", 100)->move( this_object() );
magrat.c | 37 | request_item("spiderweb shawl", 100)->move( this_object() );
magrat.c | 38 | request_item("pumps", 50)->move( this_object() );
magrat.c | 39 | init_equip();
magrat.c | 41 | add_respond_to_with(({ "yes" }), "#yes_response");
magrat.c | 42 | add_respond_to_with(({ "@nod" }), "#yes_response");
magrat.c | 43 | add_respond_to_with(({ "no" }), "#no_response");
magrat.c | 44 | add_respond_to_with(({ "@shake" }), "#no_response");
magrat.c | 53 | query_nationality();
magrat.c | 58 | finish_up();
magrat.c | 62 | query_default_start_location();
magrat.c | 63 | query_short();
magrat.c | 67 | queue_command( "emote waves her wand around a bit." );
magrat.c | 72 | request_item("pumpkin", 100)->move(environment());
magrat.c | 73 | queue_command( "say Whoops." );
magrat.c | 75 | time();
magrat.c | 77 | call_out("do_prod", 30);
magrat.c | 88 | queue_command( "say Oh, ahhh.  Good." );
magrat.c | 89 | queue_command( "peer wor" );
magrat.c | 90 | tell_object( lost, the_short() + " waves her wand in your direction.\n");
magrat.c | 92 | the_short() + "'s direction.\n", lost );
magrat.c | 93 | finish_panic(lost, PANIC_OK);
magrat.c | 95 | request_item("pumpkin", 100)->move(lost);
magrat.c | 96 | request_item("pumpkin", 100)->move(environment(lost));
magrat.c | 104 | queue_command( "say Oh, I must have got lost somewhere then." );
magrat.c | 105 | queue_command( "wave" );
magrat.c | 106 | queue_command( "say Oh dear." );
magrat.c | 107 | request_item("pumpkin", 100)->move(lost);
magrat.c | 108 | request_item("pumpkin", 100)->move(environment(lost));
magrat.c | 109 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 120 | queue_command( "expect "+lost->query_name() );
magrat.c | 122 | call_out("do_prod", 60);
magrat.c | 124 | queue_command( "say Oh well.  I guess it wasn't me you wanted after all" );
magrat.c | 125 | queue_command( "sigh" );
magrat.c | 126 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 134 | queue_command( "say Bye..." );
magrat.c | 135 | queue_command( "wave" );
magrat.c | 136 | queue_command( "say Whoops." );
magrat.c | 137 | queue_command( "tell "+lost->query_name()+" Sorry to have bothered you." );
magrat.c | 138 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 139 | request_item("pumpkin", 100)->move(environment(lost));
magrat.c | 148 | queue_command( "blink twice" );
magrat.c | 149 | queue_command( "say I guess my help wasn't wanted, then..." );
magrat.c | 150 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 153 | do_prod();
magrat.c | 159 | queue_command( "say Look, this is really not very nice." );
magrat.c | 160 | queue_command( "frown" );
magrat.c | 161 | queue_command( "say I know the art of self defence you know!" );
magrat.c | 162 | set_hp(query_max_hp(), attacker);
magrat.c | 163 | adjust_tmp_str(-2);
magrat.c | 164 | adjust_tmp_dex(-2);
magrat.c | 165 | adjust_tmp_wis(-2);
magrat.c | 166 | adjust_tmp_int(-2);
magrat.c | 167 | adjust_tmp_con(-2);
magrat.c | 168 | add_property("attacked godmother", time());
magrat.c | 169 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 176 | queue_command( "shuffle" );
magrat.c | 177 | queue_command( "say Umm.  I have to go." );
magrat.c | 178 | queue_command( "smile appol" );
magrat.c | 179 | queue_command( "wave" );
magrat.c | 180 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 187 | finish_panic(lost, PANIC_NOT_OK);
magrat.c | 190 | dest_me();
horse.c | 5 | set_race("horse");
horse.c | 6 | set_level(20);
horse.c | 7 | set_name("horse");
horse.c | 8 | set_gender( query_mount_gender() );
horse.c | 16 | set_value(40000 * 10);
horse.c | 17 | set_maximum_speed(RIDE_GALLOP);
horse.c | 18 | set_transport_type("horse");
horse.c | 19 | set_default_mount_difficulty(100);
horse.c | 20 | set_default_direction_difficulty(100);
horse.c | 21 | set_wander_time( 40 + random(10) );
horse.c | 22 | set_transport_speed(2);
horse.c | 23 | set_maximum_exhaustion(300);
camel.c | 5 | set_race("camel");
camel.c | 6 | set_level(20);
camel.c | 7 | set_name("camel");
camel.c | 14 | set_value(40000 * 12);
camel.c | 15 | set_maximum_speed(RIDE_GALLOP);
camel.c | 16 | set_transport_type( "camel" );
camel.c | 17 | set_default_mount_difficulty(150);
camel.c | 18 | set_default_direction_difficulty(150);
camel.c | 19 | set_wander_time( 60 + random(20) );
camel.c | 20 | set_gender( 1 + random(2) );
camel.c | 21 | set_transport_speed(1);
camel.c | 22 | set_maximum_exhaustion(400);
camel.c | 23 | set_transport_colour("off-yellow");
warhorse.c | 5 | set_race("horse");
warhorse.c | 6 | set_level(50);
warhorse.c | 7 | set_name("horse");
warhorse.c | 8 | add_adjective("war");
warhorse.c | 9 | set_gender( query_mount_gender() );
warhorse.c | 11 | query_pronoun() + " just stands there and looks very calm.\n" );
warhorse.c | 16 | set_value(40000 * 10);
warhorse.c | 17 | set_maximum_speed(RIDE_GALLOP);
warhorse.c | 18 | set_transport_type("horse");
warhorse.c | 19 | set_default_mount_difficulty(100);
warhorse.c | 20 | set_default_direction_difficulty(20);
warhorse.c | 21 | set_wander_time( 50 + random(10) );
warhorse.c | 22 | set_transport_speed(3);
warhorse.c | 23 | set_maximum_exhaustion(600);
warhorse.c | 24 | adjust_bonus_str(5);
warhorse.c | 25 | adjust_bonus_con(5);
camel_base.c | 40 | explode( mess, " " ) - ({ "" });
camel_base.c | 44 | do_command( "follow " + player->query_name() );
camel_base.c | 47 | do_command( "unfollow " + player->query_name() );
camel_base.c | 50 | do_command( "unfollow all" );
camel_base.c | 53 | set_quiet(1);
camel_base.c | 57 | set_quiet(0);
camel_base.c | 67 | do_command( "slook " + player->query_name() );
camel_base.c | 71 | do_command( "spit" );
camel_base.c | 74 | do_command( ":ruminates." );
camel_base.c | 77 | do_command( ":looks thoughtful." );
camel_base.c | 93 | lower_case( mess );
camel_base.c | 98 | do_command( "grumble" );
camel_base.c | 101 | environment(thing) );
camel_base.c | 110 | query_quiet() ]);
camel_base.c | 118 | npc_hear_shouts( this_object() );
camel_base.c | 123 | init_dynamic_arg( map["::"] );
camel_base.c | 125 | set_quiet( map["quiet"] );
camel_base.c | 128 | setup_responses();
camel_base.c | 129 | set_short( query_transport_name() );
camel_base.c | 132 | add_property( "determinate", "" );
camel_base.c | 141 | setup_responses();
camel_base.c | 142 | set_short( query_transport_name() );
horse_base.c | 39 | explode( mess, " " ) - ({ "" });
horse_base.c | 43 | do_command( "follow " + player->query_name() );
horse_base.c | 46 | do_command( "unfollow " + player->query_name() );
horse_base.c | 49 | do_command( "unfollow all" );
horse_base.c | 52 | set_quiet(1);
horse_base.c | 56 | set_quiet(0);
horse_base.c | 65 | do_command( "nuzzle " + player->query_name() );
horse_base.c | 69 | do_command( "whicker" );
horse_base.c | 72 | do_command( "nicker" );
horse_base.c | 75 | do_command( "whinny" );
horse_base.c | 92 | lower_case( mess );
horse_base.c | 97 | do_command( "whicker" );
horse_base.c | 100 | environment(thing) );
horse_base.c | 109 | query_quiet() ]);
horse_base.c | 117 | npc_hear_shouts( this_object() );
horse_base.c | 122 | init_dynamic_arg( map["::"] );
horse_base.c | 124 | set_quiet( map["quiet"] );
horse_base.c | 131 | setup_responses();
base.hdr_dc.c | 2 | dest_me() { destruct( this_object() );
base.hdr_dc.c | 8 | if (!mapp(data["TeaLeaf"])) data["TeaLeaf"] = ([]);
base.hdr_dc.c | 9 | new( class reaction );
base.hdr_dc.c | 15 | if (!mapp(data["BatGuano"])) data["BatGuano"] = ([]);
base.hdr_dc.c | 16 | new( class reaction );
base.hdr_dc.c | 37 | if (!mapp(data["BlueHealingWater"])) data["BlueHealingWater"] = ([]);
base.hdr_dc.c | 38 | new( class reaction );
base.hdr_dc.c | 56 | if (!mapp(data["BlueHealingWater"])) data["BlueHealingWater"] = ([]);
base.hdr_dc.c | 57 | new( class reaction );
base.hdr_dc.c | 78 | data_return_0();
chintz_chair.c | 6 | set_name( "chair" );
chintz_chair.c | 7 | set_short( "overstuffed chintz chair" );
chintz_chair.c | 8 | add_adjective( ({ "overstuffed", "chintz" }) );
chintz_chair.c | 13 | set_allowed_positions(({ "sitting", "meditating", "lounging" }));
chintz_chair.c | 17 | set_weight(400);
chintz_chair.c | 18 | set_value(6000);
pine_kitchen_cupboards.c | 7 | set_name("cupboard");
pine_kitchen_cupboards.c | 8 | set_short("set of white pine kitchen cupboards");
pine_kitchen_cupboards.c | 9 | add_adjective( ({ "set", "of", "white", "pine", "kitchen" }) );
pine_kitchen_cupboards.c | 17 | set_weight(250);
pine_kitchen_cupboards.c | 18 | set_max_weight(100);
pine_kitchen_cupboards.c | 19 | set_value(80000);
pine_kitchen_cupboards.c | 20 | set_allowed_room_verbs((["hanging" : "hangs" ]));
marquetry_sideboard.c | 4 | set_name( "sideboard" );
marquetry_sideboard.c | 5 | set_short( "marquetry sideboard" );
marquetry_sideboard.c | 6 | add_alias( "table" );
marquetry_sideboard.c | 7 | add_adjective( ({ "marquetry"}) );
marquetry_sideboard.c | 11 | set_allowed_positions(({ "sitting", "lying", "squatting", "standing"}));
marquetry_sideboard.c | 12 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands"]));
marquetry_sideboard.c | 13 | set_weight(360);
marquetry_sideboard.c | 14 | set_max_weight(200);
marquetry_sideboard.c | 15 | set_value(100000);
marquetry_sideboard.c | 16 | set_allow_use_internals(1);
money_changer.c | 15 | set_name( "counter" );
money_changer.c | 16 | set_short( "money changer counter" );
money_changer.c | 17 | add_adjective( ({ "money", "changer" } ));
money_changer.c | 18 | add_alias("changer");
money_changer.c | 21 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
money_changer.c | 22 | set_allowed_room_verbs((["sitting" : "sits" ]));
money_changer.c | 23 | set_weight(2000);
money_changer.c | 24 | set_value(240000);
money_changer.c | 27 | add_help_file("money_changer");
money_changer.c | 28 | set_commercial_size(5);
money_changer.c | 55 | query_money_place();
money_changer.c | 60 | query_values_in( place );
money_changer.c | 61 | set_money_array( values );
money_changer.c | 62 | find_best_fit( type );
money_changer.c | 68 | parse_money( words, this_player(), place );
money_changer.c | 72 | notify_fail( "You do not have \""+ words +"\".\n" );
money_changer.c | 74 | notify_fail( "You can only change money here.\n" );
money_changer.c | 76 | notify_fail( "You can only change legal tender.\n" );
money_changer.c | 82 | filter_legal_tender(money, "default");
money_changer.c | 83 | if (monies[0])  monies[0]->move(this_player());
money_changer.c | 85 | notify_fail( "You can only change legal tender.\n" );
money_changer.c | 93 | query_money_array();
money_changer.c | 95 | query_value_in( place );
money_changer.c | 100 | member_array(values[val_index], money->query_money_array());
money_changer.c | 105 | printf("%O %O %O\n", value_unit, values[val_index + 1], _cut);
money_changer.c | 113 | move( this_player() );
money_changer.c | 123 | move( this_player() );
money_changer.c | 131 | sizeof(money_bits);
money_changer.c | 135 | clone_object( MONEY_OBJECT );
money_changer.c | 138 | create_money_array( value_change, place );
money_changer.c | 139 | sizeof(changed);
money_changer.c | 150 | query_multiple_short( (string)changed->half_short( 1 ) ) +".\n" );
money_changer.c | 151 | move( "/room/rubbish" );
money_changer.c | 153 | adjust_money( change );
money_changer.c | 160 | move( this_object() );
money_changer.c | 171 | query_money_place();
money_changer.c | 199 | query_money_place();
money_changer.c | 200 | value_from_string(str, place);
money_changer.c | 202 | add_failed_mess("Unable to parse the string " + str + ".\n");
money_changer.c | 207 | money_value_string(value, place) + ".\n");
money_changer.c | 225 | add_failed_mess("You need to set the cut to a number greator than 0.\n");
money_changer.c | 230 | add_failed_mess("You need to set the cut to a number less than 500.\n");
money_changer.c | 235 | add_succeeded_mess("$N set$s the cut for $D to " + _cut + "%.\n");
money_changer.c | 254 | this_player()->query_money_array();
money_changer.c | 255 | sizeof(values);
money_changer.c | 260 | member_array(str, values);
money_changer.c | 262 | add_failed_mess("You do not have any " + str + " to deposit.\n");
money_changer.c | 273 | this_player()->adjust_money(-num, values[i]);
money_changer.c | 275 | add_succeeded_mess("$N deposit$s " + num + " of " + str + " in $D.\n");
money_changer.c | 306 | add_failed_mess("You do not appear to have any " + str + " in $D.\n");
money_changer.c | 312 | map_delete(_money, str);
money_changer.c | 314 | this_player()->adjust_money(num, str);
money_changer.c | 316 | add_succeeded_mess("$N withdraw$s " + num + " of " + str + " from $D.\n");
money_changer.c | 321 | init();
money_changer.c | 323 | change($4[0], $4[1]) :));
money_changer.c | 326 | do_set_cut($4[0]) :));
money_changer.c | 328 | do_deposit($4[0], $4[1]) :));
money_changer.c | 330 | do_withdraw($4[0], $4[1]) :));
money_changer.c | 333 | do_set_cost($4[0]) :));
money_changer.c | 342 | query_dynamic_auto_load();
money_changer.c | 343 | add_auto_load_value(map, BOARD_TAG, "cut", _cut);
money_changer.c | 344 | add_auto_load_value(map, BOARD_TAG, "money", _money);
money_changer.c | 345 | add_auto_load_value(map, BOARD_TAG, "cost", _cost);
money_changer.c | 351 | init_dynamic_arg(map, player);
money_changer.c | 353 | query_auto_load_value(map, BOARD_TAG, "cut");
money_changer.c | 354 | query_auto_load_value(map, BOARD_TAG, "money");
money_changer.c | 355 | query_auto_load_value(map, BOARD_TAG, "cost");
newspaper_archive_box.c | 18 | set_name("box");
newspaper_archive_box.c | 19 | set_short("newspaper archive box");
newspaper_archive_box.c | 20 | add_adjective(({ "archive", "box" }));
newspaper_archive_box.c | 21 | add_help_file("newspaper_archive_box");
newspaper_archive_box.c | 22 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
newspaper_archive_box.c | 23 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
newspaper_archive_box.c | 24 | set_value(2700);
newspaper_archive_box.c | 25 | set_commercial_size(5);
newspaper_archive_box.c | 26 | reset_get();
newspaper_archive_box.c | 42 | query_money_place();
newspaper_archive_box.c | 43 | set_short(_paper + " box");
newspaper_archive_box.c | 54 | add_property("determinate", "");
newspaper_archive_box.c | 56 | explode(lower_case(_paper), " ");
newspaper_archive_box.c | 57 | add_adjective(bits);
newspaper_archive_box.c | 69 | query_money_place();
newspaper_archive_box.c | 71 | query_last_edition_num(_paper);
newspaper_archive_box.c | 73 | add_failed_mess("There is no edition to buy.\n");
newspaper_archive_box.c | 79 | query_last_edition_num(_paper);
newspaper_archive_box.c | 98 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
newspaper_archive_box.c | 99 | adjust_float(cost - paper_cost);
newspaper_archive_box.c | 101 | clone_object("/obj/misc/newspaper");
newspaper_archive_box.c | 102 | set_paper(_paper);
newspaper_archive_box.c | 103 | set_edition(edition);
newspaper_archive_box.c | 105 | move(environment(this_player()));
newspaper_archive_box.c | 110 | this_player()->query_property("Paper " + _paper);
newspaper_archive_box.c | 116 | this_player()->add_property("Paper " + _paper, editions);
newspaper_archive_box.c | 119 | query_paper_cost(_paper));
newspaper_archive_box.c | 122 | query_paper_cost(_paper));
newspaper_archive_box.c | 125 | add_succeeded_mess("$N pull$s a newspaper from $D.\n");
newspaper_archive_box.c | 136 | query_money_place();
newspaper_archive_box.c | 137 | query_paper_cost(_paper);
newspaper_archive_box.c | 163 | query_money_place();
newspaper_archive_box.c | 165 | value_from_string(amount, place);
newspaper_archive_box.c | 167 | add_failed_mess("The value " + amount + " is invalid.\n");
newspaper_archive_box.c | 188 | money_value_string(amt, place) + ".\n");
newspaper_archive_box.c | 191 | money_value_string(amt, place) + ".\n");
newspaper_archive_box.c | 198 | do_buy($4[0]) :));
newspaper_archive_box.c | 199 | add_command("pull", "[door] [on] <direct:object>", (: do_buy(-1) :));
newspaper_archive_box.c | 200 | add_command("pull", "open <direct:object>", (: do_buy(-1) :));
newspaper_archive_box.c | 204 | do_set_cost($4[0], 0) :));
newspaper_archive_box.c | 206 | do_set_cost($4[0], 1) :));
newspaper_archive_box.c | 209 | init();
newspaper_archive_box.c | 221 | return ([ "paper" : ret ]);
newspaper_archive_box.c | 228 | query_paper_cost(name);
newspaper_archive_box.c | 230 | call_out("set_paper", 1, name);
newspaper_archive_box.c | 239 | query_dynamic_auto_load();
newspaper_archive_box.c | 240 | add_auto_load_value(map, BOARD_TAG, "cost", _cost);
newspaper_archive_box.c | 241 | add_auto_load_value(map, BOARD_TAG, "paper", _paper);
newspaper_archive_box.c | 242 | add_auto_load_value(map, BOARD_TAG, "back cost", _back_issue_cost);
newspaper_archive_box.c | 250 | init_dynamic_arg(map, player);
newspaper_archive_box.c | 252 | query_auto_load_value(map, BOARD_TAG, "cost");
newspaper_archive_box.c | 253 | query_auto_load_value(map, BOARD_TAG, "back cost");
newspaper_archive_box.c | 254 | query_auto_load_value(map, BOARD_TAG, "paper");
newspaper_archive_box.c | 255 | call_out("set_paper", 1, name);
newspaper_box.c | 17 | set_name("box");
newspaper_box.c | 18 | set_short("newspaper box");
newspaper_box.c | 19 | add_adjective("box");
newspaper_box.c | 20 | add_help_file("newspaper_box");
newspaper_box.c | 21 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
newspaper_box.c | 22 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
newspaper_box.c | 23 | set_value(900);
newspaper_box.c | 24 | set_commercial_size(1);
newspaper_box.c | 25 | reset_get();
newspaper_box.c | 41 | query_money_place();
newspaper_box.c | 42 | set_short(_paper + " box");
newspaper_box.c | 47 | money_value_string(_cost, place) + ".\n");
newspaper_box.c | 49 | add_property("determinate", "");
newspaper_box.c | 51 | explode(lower_case(_paper), " ");
newspaper_box.c | 52 | add_adjective(bits);
newspaper_box.c | 64 | query_money_place();
newspaper_box.c | 67 | query_last_edition_num(_paper);
newspaper_box.c | 69 | add_failed_mess("There is no edition to buy.\n");
newspaper_box.c | 81 | this_player()->pay_money(MONEY_HAND->create_money_array(cost, place), place);
newspaper_box.c | 82 | adjust_float(cost - paper_cost);
newspaper_box.c | 84 | clone_object("/obj/misc/newspaper");
newspaper_box.c | 85 | set_paper(_paper);
newspaper_box.c | 86 | set_edition(edition);
newspaper_box.c | 88 | move(environment(this_player()));
newspaper_box.c | 93 | this_player()->query_property("Paper " + _paper);
newspaper_box.c | 99 | this_player()->add_property("Paper " + _paper, editions);
newspaper_box.c | 102 | query_paper_cost(_paper));
newspaper_box.c | 105 | query_paper_cost(_paper));
newspaper_box.c | 108 | add_succeeded_mess("$N pull$s a newspaper from $D.\n");
newspaper_box.c | 118 | query_money_place();
newspaper_box.c | 139 | query_money_place();
newspaper_box.c | 141 | value_from_string(amount, place);
newspaper_box.c | 143 | add_failed_mess("The value " + amount + " is invalid.\n");
newspaper_box.c | 152 | money_value_string(_cost, place) + ".\n");
newspaper_box.c | 154 | money_value_string(amt, place) + ".\n");
newspaper_box.c | 159 | add_command("buy", "paper from <direct:object>", (: do_buy() :));
newspaper_box.c | 160 | add_command("pull", "[door] [on] <direct:object>", (: do_buy() :));
newspaper_box.c | 161 | add_command("pull", "open <direct:object>", (: do_buy() :));
newspaper_box.c | 165 | do_set_cost($4[0]) :));
newspaper_box.c | 168 | init();
newspaper_box.c | 180 | return ([ "paper" : ret ]);
newspaper_box.c | 187 | query_paper_cost(name);
newspaper_box.c | 188 | call_out("set_paper", 1, name);
newspaper_box.c | 197 | query_dynamic_auto_load();
newspaper_box.c | 198 | add_auto_load_value(map, BOARD_TAG, "cost", _cost);
newspaper_box.c | 199 | add_auto_load_value(map, BOARD_TAG, "paper", _paper);
newspaper_box.c | 207 | init_dynamic_arg(map, player);
newspaper_box.c | 209 | query_auto_load_value(map, BOARD_TAG, "cost");
newspaper_box.c | 210 | query_auto_load_value(map, BOARD_TAG, "paper");
newspaper_box.c | 211 | call_out("set_paper", 1, name);
pickler.c | 18 | set_name( "pickler" );
pickler.c | 19 | set_short( "pickler" );
pickler.c | 22 | add_read_mess("Pickler, pull for results", 0, "common");
pickler.c | 23 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
pickler.c | 24 | set_allowed_room_verbs((["sitting" : "sits" ]));
pickler.c | 25 | set_weight(2000);
pickler.c | 26 | set_value(240000);
pickler.c | 27 | add_help_file("pickler");
pickler.c | 29 | set_commercial_size(2);
pickler.c | 30 | set_commercial_type("utility");
pickler.c | 31 | set_shop_use_types(({ "pickler" }));
pickler.c | 42 | add_failed_mess("The pickler is not open.\n");
pickler.c | 46 | query_money_place();
pickler.c | 49 | query_decay_speed()) :));
pickler.c | 52 | query_multiple_short(obs) + ".\n");
pickler.c | 73 | this_player()->pay_money(MONEY_HAND->create_money_array(amt, place), place);
pickler.c | 74 | do_cure();
pickler.c | 75 | adjust_float(here_amt);
pickler.c | 77 | add_succeeded_mess("$N pickle$s $I on $D.\n", pickleable);
pickler.c | 85 | query_money_place();
pickler.c | 87 | value_from_string(amount, place);
pickler.c | 89 | add_failed_mess("The value " + amount + " is invalid.\n");
pickler.c | 95 | money_value_string(amt, place) + ".\n");
pickler.c | 102 | query_money_place();
pickler.c | 115 | query_main_status(0);
pickler.c | 116 | write(ret);
pickler.c | 117 | add_succeeded_mess("");
pickler.c | 122 | init();
pickler.c | 133 | do_stats() :));
pickler.c | 135 | do_set_cost($4[0]) :));
pickler.c | 143 | query_dynamic_auto_load();
pickler.c | 144 | add_auto_load_value(map, BOARD_TAG, "revenue", _revenue);
pickler.c | 145 | add_auto_load_value(map, BOARD_TAG, "cost", _cost);
pickler.c | 151 | init_dynamic_arg(map, player);
pickler.c | 153 | query_auto_load_value(map, BOARD_TAG, "revenue");
pickler.c | 154 | query_auto_load_value(map, BOARD_TAG, "cost");
medium_shop.c | 7 | set_name( "counter" );
medium_shop.c | 8 | set_short( "medium shop counter" );
medium_shop.c | 9 | add_adjective( ({ "medium", "shop" } ));
medium_shop.c | 12 | set_allowed_positions(({"sitting", "standing" }));
medium_shop.c | 13 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
medium_shop.c | 14 | set_weight(1000);
medium_shop.c | 15 | set_value(1200000);
medium_shop.c | 16 | set_maximum_inventory_size(100);
medium_shop.c | 17 | set_commercial_size(60);
postal.c | 16 | set_name( "counter" );
postal.c | 17 | set_short( "postal counter" );
postal.c | 18 | add_adjective("postal");
postal.c | 21 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
postal.c | 22 | set_allowed_room_verbs((["sitting" : "sits" ]));
postal.c | 23 | set_weight(2000);
postal.c | 24 | set_value(6400000);
postal.c | 25 | add_help_file("postal");
postal.c | 27 | set_commercial_size(25);
postal.c | 28 | set_commercial_type("utility");
postal.c | 29 | set_shop_use_types(({ "pickler" }));
postal.c | 43 | query_money_place();
postal.c | 49 | init();
postal.c | 51 | do_mail($4[0]) :));
postal.c | 53 | do_mail(0) :));
postal.c | 60 | query_dynamic_auto_load();
postal.c | 61 | add_auto_load_value(map, BOARD_TAG, "uses", _num_uses);
postal.c | 67 | init_dynamic_arg(map, player);
postal.c | 69 | query_auto_load_value(map, BOARD_TAG, "uses");
filing_cabinet.c | 4 | set_short("filing cabinet");
filing_cabinet.c | 5 | set_name("cabinet");
filing_cabinet.c | 6 | add_alias("filing");
filing_cabinet.c | 11 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
filing_cabinet.c | 12 | set_allowed_room_verbs((["sitting" : "sits" ]));
filing_cabinet.c | 13 | set_weight(2000);
filing_cabinet.c | 14 | set_value(240000);
filing_cabinet.c | 16 | set_commercial_size(5);
filing_cabinet.c | 17 | set_commercial_type("utility");
blackboard.c | 17 | do_write( string language );
blackboard.c | 20 | set_name ("blackboard");
blackboard.c | 21 | set_short ("blackboard");
blackboard.c | 22 | add_alias (({"board", "sign"}));
blackboard.c | 31 | set_commercial_size(1);
blackboard.c | 32 | set_weight(2000);
blackboard.c | 33 | set_value(240000);
blackboard.c | 38 | do_write($4[1]) :) );
blackboard.c | 39 | add_command ("clean", "<direct:object>");
blackboard.c | 48 | query_readable_message(player, ignore_labels);
blackboard.c | 55 | capitalize (query_owner()) + "'s blackboard!\n", ({ }));
blackboard.c | 60 | set_read_mess( 0 );
blackboard.c | 80 | capitalize (query_owner()) + "'s blackboard!\n", ({ }));
blackboard.c | 84 | lower_case( language );
blackboard.c | 95 | find_words( language );
blackboard.c | 98 | this_object(), 0, language);
blackboard.c | 113 | this_player());
blackboard.c | 114 | tell_object (this_player(), "Okay, nothing has been changed.\n");
blackboard.c | 123 | add_read_mess( text, "chalk", language );
blackboard.c | 126 | this_player());
blackboard.c | 132 | init_dynamic_arg(map, player);
blackboard.c | 134 | query_auto_load_value(map, BOARD_TAG, "words");
blackboard.c | 137 | add_read_mess(my_words, "chalk", DEFAULT_LANGUAGE);
blackboard.c | 139 | set_read_mess( filter( query_read_mess(), (: $1[READ_LANG] != "common" :) ) );
poll_data.c | 20 | create();
poll_data.c | 21 | create();
poll_data.c | 26 | set_name( "poll" );
poll_data.c | 27 | set_short( "opinion poll" );
poll_data.c | 28 | add_adjective( ({ "opinion" } ));
poll_data.c | 31 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
poll_data.c | 32 | set_allowed_room_verbs((["sitting" : "sits" ]));
poll_data.c | 33 | set_weight(2000);
poll_data.c | 34 | set_value(240000);
poll_data.c | 35 | set_commercial_size(2);
poll_data.c | 36 | set_commercial_type("misc");
poll_data.c | 37 | set_shop_use_types(({ "poll add", "poll vote" }));
poll_data.c | 39 | set_completion_action((: finish_vote :));
poll_data.c | 40 | set_no_elections(1);
poll_data.c | 41 | set_vote_conditions((: is_open_for("poll vote", $1->query_name()) :));
poll_data.c | 43 | add_help_file("poll_data");
poll_data.c | 49 | setup_new_commercial_id();
poll_data.c | 51 | set_save_file(query_save_dir() + query_commercial_id());
poll_data.c | 65 | write("$P$Vote Archive$P$" + ret);
poll_data.c | 66 | add_succeeded_mess("");
poll_data.c | 72 | add_failed_mess("Unable to add a vote.\n");
poll_data.c | 76 | do_create_vote(choices);
poll_data.c | 88 | sizeof(choices);
poll_data.c | 96 | if (sizeof(_finished_votes) >
poll_data.c | 99 | save_room();
poll_data.c | 104 | add_failed_mess("The duration must be positive.\n");
poll_data.c | 108 | set_vote_duration(hours * 60 * 60);
poll_data.c | 109 | add_succeeded_mess("Set the vote duration to " + hours + " hours.\n");
poll_data.c | 115 | add_failed_mess("Cannot delete the vote id #" + id + ".\n");
poll_data.c | 119 | add_succeeded_mess("Deleted the vote id#" + id + ".\n");
poll_data.c | 125 | add_failed_mess("Cannot end the vote id #" + id + ".\n");
poll_data.c | 129 | end_vote(id);
poll_data.c | 130 | add_succeeded_mess("Finished the vote id#" + id + ".\n");
poll_data.c | 143 | init();
poll_data.c | 144 | init();
poll_data.c | 145 | init_add_vote();
poll_data.c | 146 | add_command("results", "of votes", (: do_show_results() :));
poll_data.c | 149 | do_set_duration($4[0]) :));
poll_data.c | 151 | do_delete_vote($4[0]) :));
poll_data.c | 153 | do_end_vote($4[0]) :));
bank_master.c | 7 | set_name( "counter" );
bank_master.c | 8 | set_short( "master bank counter" );
bank_master.c | 9 | add_alias("bank");
bank_master.c | 10 | add_adjective( ({ "master", "bank" } ));
bank_master.c | 13 | set_allowed_positions(({"sitting", "standing" }));
bank_master.c | 14 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
bank_master.c | 15 | set_weight(1000);
bank_master.c | 16 | set_value(16000000);
bank_master.c | 17 | set_commercial_size(91);
bank_master.c | 19 | set_shop_use_types(({ "bank", "withdraw", "deposit" }));
small_shop.c | 7 | set_name( "counter" );
small_shop.c | 8 | set_short( "small shop counter" );
small_shop.c | 9 | add_adjective( ({ "small", "shop" } ));
small_shop.c | 12 | set_allowed_positions(({"sitting", "standing" }));
small_shop.c | 13 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
small_shop.c | 14 | set_weight(1000);
small_shop.c | 15 | set_value(480000);
small_shop.c | 16 | set_maximum_inventory_size(50);
small_shop.c | 17 | set_commercial_size(40);
blackjack.c | 41 | query_hand_value(class playing_card* cards);
blackjack.c | 44 | create();
blackjack.c | 45 | create();
blackjack.c | 49 | set_name( "table" );
blackjack.c | 50 | set_short( "blackjack table" );
blackjack.c | 51 | add_adjective( ({ "blackjack" } ));
blackjack.c | 52 | add_alias("blackjack");
blackjack.c | 56 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
blackjack.c | 57 | set_allowed_room_verbs((["sitting" : "sits" ]));
blackjack.c | 58 | set_weight(2000);
blackjack.c | 59 | set_value(240000);
blackjack.c | 65 | add_player_id_type("green", 0);
blackjack.c | 66 | add_player_id_type("red", 0);
blackjack.c | 67 | add_player_id_type("blue", 0);
blackjack.c | 68 | add_player_id_type("maroon", 0);
blackjack.c | 70 | set_minimum_needed(1);
blackjack.c | 71 | add_help_file("blackjack");
blackjack.c | 73 | set_commercial_size(15);
blackjack.c | 74 | set_commercial_type("gambling");
blackjack.c | 75 | set_shop_use_types(({ "blackjack" }));
blackjack.c | 94 | query_player_ids();
blackjack.c | 95 | environment()->query_property("place");
blackjack.c | 101 | query_player_data(id_bing);
blackjack.c | 105 | money_value_string(data->starting_bet, place);
blackjack.c | 108 | query_card_string(card);
blackjack.c | 140 | query_card_string(card);
blackjack.c | 142 | if (query_hand_value(_dealer_hand) >
blackjack.c | 157 | long() + query_card_status();
blackjack.c | 169 | make_deck(_num_decks, 0);
blackjack.c | 170 | shuffle_deck(_deck);
blackjack.c | 172 | make_deck(_num_decks, 0);
blackjack.c | 173 | shuffle_deck(_deck);
blackjack.c | 174 | shuffle_deck(_discard);
blackjack.c | 193 | query_next_card(), query_next_card() });
blackjack.c | 198 | query_player_data(id);
blackjack.c | 199 | query_next_card(), query_next_card() });
blackjack.c | 209 | tell_all_players(hands);
blackjack.c | 217 | randomise_player_numbers();
blackjack.c | 222 | new(class player_data);
blackjack.c | 226 | set_player_data(id, data);
blackjack.c | 230 | redeal_cards();
blackjack.c | 231 | tell_all_players("Place your starting bets.\n");
blackjack.c | 309 | query_player_data(id);
blackjack.c | 311 | call_out("deal_cards", 2, id);
blackjack.c | 327 | remove_call_out(_timeout_call);
blackjack.c | 329 | environment()->query_property("place");
blackjack.c | 330 | query_hand_value(_dealer_hand);
blackjack.c | 333 | query_next_card() });
blackjack.c | 334 | query_hand_value(_dealer_hand);
blackjack.c | 340 | query_card_string(card);
blackjack.c | 351 | query_player_data(id);
blackjack.c | 353 | query_hand_value(data->hand);
blackjack.c | 357 | query_player_object(id);
blackjack.c | 364 | adjust_float(-(data->starting_bet * 3) / 2);
blackjack.c | 366 | query_cap_name();
blackjack.c | 377 | query_player_object(id);
blackjack.c | 384 | adjust_float(-data->starting_bet);
blackjack.c | 386 | the_short();
blackjack.c | 408 | sizeof(winners) > 1?"":"s") + " the blackjack hand.\n");
blackjack.c | 410 | tell_room(environment(),  "No one wins the blackjack hand.\n");
blackjack.c | 413 | finish_game(0);
blackjack.c | 419 | complete_round();
blackjack.c | 433 | add_failed_mess("The game has not started.\n");
blackjack.c | 437 | find_player_id_of_person(this_player());
blackjack.c | 439 | add_failed_mess("You are not playing.\n");
blackjack.c | 443 | environment()->query_property("place");
blackjack.c | 445 | value_from_string(str, place);
blackjack.c | 447 | add_failed_mess("Invalid bet amount.\n");
blackjack.c | 451 | add_failed_mess("You do not have that much to bid.\n");
blackjack.c | 457 | money_value_string(_min_bet, place) + ".\n");
blackjack.c | 462 | money_value_string(_max_bet, place) + ".\n");
blackjack.c | 466 | query_player_data(id);
blackjack.c | 468 | add_failed_mess("You have already bet on $D.\n");
blackjack.c | 475 | adjust_float(amount);
blackjack.c | 480 | finish_bet(id);
blackjack.c | 499 | add_failed_mess("The game has not started.\n");
blackjack.c | 503 | find_player_id_of_person(this_player());
blackjack.c | 505 | add_failed_mess("You are not playing.\n");
blackjack.c | 509 | query_player_data(id);
blackjack.c | 518 | add_failed_mess("You cannot hit before you have been dealt cards.\n");
blackjack.c | 522 | query_next_card();
blackjack.c | 524 | query_hand_value(data->hand);
blackjack.c | 531 | query_player_data(id);
blackjack.c | 538 | remove_call_out(_timeout_call);
blackjack.c | 539 | call_out("complete_round", 2);
blackjack.c | 556 | add_failed_mess("The game has not started.\n");
blackjack.c | 560 | find_player_id_of_person(this_player());
blackjack.c | 562 | add_failed_mess("You are not playing.\n");
blackjack.c | 566 | query_player_data(id);
blackjack.c | 569 | add_failed_mess("You are not playing and set yourself to stand.\n");
blackjack.c | 573 | query_hand_value(data->hand);
blackjack.c | 577 | query_player_data(id);
blackjack.c | 584 | remove_call_out(_timeout_call);
blackjack.c | 585 | call_out("complete_round", 2);
blackjack.c | 597 | add_failed_mess("The blackjack table is not open.\n");
blackjack.c | 613 | add_failed_mess("The float is too low for the table to open.\n");
blackjack.c | 616 | add_failed_mess("The blackjack table is not open.\n");
blackjack.c | 621 | add_failed_mess("You must be playing the game to start it.\n");
blackjack.c | 626 | add_failed_mess("You need at least three people to play modern art.\n");
blackjack.c | 630 | add_succeeded_mess("$N $V a game on $D.\n");
blackjack.c | 631 | remove_call_out(_timeout_call);
blackjack.c | 632 | call_out("force_finish", _timeout_length);
blackjack.c | 645 | add_failed_mess("The game has not started.\n");
blackjack.c | 649 | find_player_id_of_person(this_player());
blackjack.c | 651 | add_failed_mess("You must actually be playing to finish the game.\n");
blackjack.c | 655 | force_finish();
blackjack.c | 663 | query_money_place();
blackjack.c | 666 | query_float() >
blackjack.c | 721 | query_money_place();
blackjack.c | 722 | value_from_string(str, place);
blackjack.c | 724 | add_failed_mess("Unable to parse the string " + str + ".\n");
blackjack.c | 730 | money_value_string(value, place) + " on $D.\n");
blackjack.c | 734 | money_value_string(value, place) + " on $D.\n");
blackjack.c | 751 | add_failed_mess("The timeout must be greator than 0.\n");
blackjack.c | 755 | add_succeeded_mess("$N set$s the timeout on $D to " + length + " minutes.\n");
blackjack.c | 802 | add_failed_mess("The timeout must be greator than 0.\n");
blackjack.c | 806 | add_failed_mess("The number of decks must be less than 10.\n");
blackjack.c | 816 | init();
blackjack.c | 817 | init();
blackjack.c | 819 | do_bet($4[0]) :));
blackjack.c | 821 | do_hit() :));
blackjack.c | 823 | do_stand() :));
blackjack.c | 826 | do_finish() :));
blackjack.c | 829 | do_start() :));
blackjack.c | 833 | do_set_bet($4[0], 0) :));
blackjack.c | 835 | do_set_bet($4[0], 1) :));
blackjack.c | 837 | do_set_timeout($4[0]) :));
blackjack.c | 839 | do_set_num_decks($4[0]) :));
blackjack.c | 842 | do_set_double_on_doubles($4[0] == "on") :));
blackjack.c | 845 | do_set_soft_seventeen($4[0] == "on") :));
blackjack.c | 853 | query_dynamic_auto_load();
blackjack.c | 854 | query_dynamic_auto_load(map);
blackjack.c | 855 | add_auto_load_value(map, BOARD_TAG, "return", _return);
blackjack.c | 856 | add_auto_load_value(map, BOARD_TAG, "cost", _cost);
blackjack.c | 857 | add_auto_load_value(map, BOARD_TAG, "pay out", _pay_out);
blackjack.c | 858 | add_auto_load_value(map, BOARD_TAG, "revenue", _revenue);
blackjack.c | 859 | add_auto_load_value(map, BOARD_TAG, "dealer hand", _dealer_hand);
blackjack.c | 860 | add_auto_load_value(map, BOARD_TAG, "deck", _deck);
blackjack.c | 861 | add_auto_load_value(map, BOARD_TAG, "discard", _discard);
blackjack.c | 862 | add_auto_load_value(map, BOARD_TAG, "finished", _finished);
blackjack.c | 863 | add_auto_load_value(map, BOARD_TAG, "max bet", _max_bet);
blackjack.c | 864 | add_auto_load_value(map, BOARD_TAG, "min bet ", _min_bet);
blackjack.c | 865 | add_auto_load_value(map, BOARD_TAG, "timeout", _timeout_length);
blackjack.c | 866 | add_auto_load_value(map, BOARD_TAG, "num decks", _num_decks);
blackjack.c | 867 | add_auto_load_value(map, BOARD_TAG, "soft seventeen", _soft_seventeen);
blackjack.c | 868 | add_auto_load_value(map, BOARD_TAG, "double on doublet", _double_on_doubles);
blackjack.c | 874 | init_dynamic_arg(map, player);
blackjack.c | 875 | init_dynamic_arg(map, player);
blackjack.c | 877 | query_auto_load_value(map, BOARD_TAG, "return");
blackjack.c | 878 | query_auto_load_value(map, BOARD_TAG, "cost");
blackjack.c | 879 | query_auto_load_value(map, BOARD_TAG, "pay out");
blackjack.c | 880 | query_auto_load_value(map, BOARD_TAG, "revenue");
blackjack.c | 881 | query_auto_load_value(map, BOARD_TAG, "dealer hand");
blackjack.c | 882 | query_auto_load_value(map, BOARD_TAG, "deck");
blackjack.c | 883 | query_auto_load_value(map, BOARD_TAG, "discard");
blackjack.c | 884 | query_auto_load_value(map, BOARD_TAG, "finished");
blackjack.c | 885 | query_auto_load_value(map, BOARD_TAG, "min bet");
blackjack.c | 886 | query_auto_load_value(map, BOARD_TAG, "max bet");
blackjack.c | 887 | query_auto_load_value(map, BOARD_TAG, "timeout");
blackjack.c | 888 | query_auto_load_value(map, BOARD_TAG, "num decks");
blackjack.c | 889 | query_auto_load_value(map, BOARD_TAG, "soft seventeen");
blackjack.c | 890 | query_auto_load_value(map, BOARD_TAG, "double on doublet");
blackjack.c | 897 | remove_call_out(_timeout_call);
blackjack.c | 898 | call_out("force_finish", _timeout_length);
bank_franchise_small.c | 7 | set_name( "counter" );
bank_franchise_small.c | 8 | set_short( "small bank counter" );
bank_franchise_small.c | 9 | add_alias("bank");
bank_franchise_small.c | 10 | add_adjective( ({ "small", "bank" } ));
bank_franchise_small.c | 13 | set_allowed_positions(({"sitting", "standing" }));
bank_franchise_small.c | 14 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
bank_franchise_small.c | 15 | set_weight(1000);
bank_franchise_small.c | 16 | set_value(400000);
bank_franchise_small.c | 17 | set_commercial_size(10);
bank_franchise_small.c | 18 | set_maximum_total_difference(200000);
mountain_painting.c | 7 | set_name( "painting" );
mountain_painting.c | 8 | set_short( "painting of a misty mountain range" );
mountain_painting.c | 9 | add_adjective( ({ "of", "a", "misty", "mountain", "range" }) );
mountain_painting.c | 17 | set_weight( 40 );
mountain_painting.c | 18 | set_value( 46775 );
mountain_painting.c | 19 | set_allowed_positions( ({"hanging"}) );
silk_cabbage_plant.c | 8 | set_name( "plant" );
silk_cabbage_plant.c | 9 | add_adjective( ({ "silk", "potted", "cabbage" }) );
silk_cabbage_plant.c | 10 | set_short( "potted silk cabbage plant" );
silk_cabbage_plant.c | 11 | add_alias( "cabbage" );
silk_cabbage_plant.c | 12 | set_main_plural ( "potted silk cabbage plants" );
silk_cabbage_plant.c | 13 | add_property( "determinate", "a " );
silk_cabbage_plant.c | 21 | set_value( 35000 );
silk_cabbage_plant.c | 22 | set_weight( 150 );
small_safe.c | 4 | set_name("safe");
small_safe.c | 5 | set_short("small iron safe");
small_safe.c | 6 | add_adjective(({"small", "iron"}));
small_safe.c | 11 | add_drawer("top", 50);
small_safe.c | 12 | add_drawer("middle", 25);
small_safe.c | 13 | add_drawer("bottom", 25);
small_safe.c | 16 | set_drawers_inside(1);
small_safe.c | 18 | set_weight(900);
small_safe.c | 19 | set_value(120000);
small_safe.c | 21 | set_allowed_room_verbs((["squatting" : "squats" ]));
small_safe.c | 22 | set_pick_skill("covert.lockpick.safes");
small_safe.c | 23 | set_difficulty(4);
small_safe.c | 38 | random(10000);
small_safe.c | 39 | set_key(key_id);
small_safe.c | 41 | clone_object("/std/key");
small_safe.c | 42 | set_key("small iron", key_id);
small_safe.c | 45 | move(this_object());
small_safe.c | 46 | set_closed();
small_safe.c | 50 | init();
pine_chest_of_drawers.c | 7 | set_name("chest");
pine_chest_of_drawers.c | 8 | set_short("Agatean pine chest of drawers");
pine_chest_of_drawers.c | 9 | add_adjective(({"agatean", "pine", "chest", "of", "drawers"}));
pine_chest_of_drawers.c | 10 | add_alias("chest of drawers");
pine_chest_of_drawers.c | 19 | set_weight(900);
pine_chest_of_drawers.c | 20 | set_max_weight(400);
pine_chest_of_drawers.c | 21 | set_value(200000);
pine_chest_of_drawers.c | 23 | set_allowed_room_verbs((["squatting" : "squats" ]));
pine_chest_of_drawers.c | 24 | set_pick_skill("covert.lockpick.doors");
pine_chest_of_drawers.c | 25 | set_difficulty(4);
pine_chest_of_drawers.c | 34 | random(1000);
pine_chest_of_drawers.c | 35 | set_key(key_id);
pine_chest_of_drawers.c | 37 | clone_object("/std/key");
pine_chest_of_drawers.c | 38 | set_key("small iron", key_id);
pine_chest_of_drawers.c | 41 | move(this_object());
pine_chest_of_drawers.c | 42 | set_closed();
pine_chest_of_drawers.c | 46 | init();
pumpkin_chest.c | 10 | set_name("chest");
pumpkin_chest.c | 11 | set_short("pumpkin chest");
pumpkin_chest.c | 12 | add_adjective(({"pumpkin","fairytale"}));
pumpkin_chest.c | 21 | set_weight(1200);
pumpkin_chest.c | 22 | set_max_weight(200);
pumpkin_chest.c | 23 | set_value(590000);
bird_bath.c | 6 | set_name( "birdbath" );
bird_bath.c | 7 | set_short( "stone bird bath" );
bird_bath.c | 8 | add_adjective( ({ "stone", "bird", "bath" }) );
bird_bath.c | 9 | add_alias( ({ "bath", "bird bath" }) );
bird_bath.c | 14 | set_allowed_positions(({"sitting","standing"}));
bird_bath.c | 15 | set_allowed_room_verbs((["standing" : "stands" ]));
bird_bath.c | 16 | set_weight(200);
bird_bath.c | 17 | set_value(4000);
frog_cushion.c | 6 | set_name( "cushion" );
frog_cushion.c | 7 | set_short( "frog cushion" );
frog_cushion.c | 8 | add_adjective( ({ "frog", "green" }) );
frog_cushion.c | 9 | add_alias( "pillow" );
frog_cushion.c | 15 | set_allowed_room_verbs((["lying" : "lays", "hanging" : "hangs"]));
frog_cushion.c | 16 | set_weight(2);
frog_cushion.c | 17 | set_value(8000);
pine_nightstand.c | 7 | set_name( "nightstand" );
pine_nightstand.c | 8 | set_short( "pine nightstand" );
pine_nightstand.c | 9 | add_adjective( ({ "pine", "bedside" }) );
pine_nightstand.c | 10 | add_alias("cabinet");
pine_nightstand.c | 17 | add_drawer( "top", 50 );
pine_nightstand.c | 20 | set_weight(135);
pine_nightstand.c | 21 | set_value(10000);
pine_nightstand.c | 23 | set_allowed_positions(({"sitting"}));
pine_nightstand.c | 24 | set_allowed_room_verbs((["sitting" : "sits" ]));
pine_nightstand.c | 32 | random(100);
pine_nightstand.c | 33 | set_key(key_id);
pine_nightstand.c | 34 | set_difficulty(1);
pine_nightstand.c | 36 | clone_object("/std/key");
pine_nightstand.c | 37 | set_key("small", key_id);
pine_nightstand.c | 40 | move(this_object());
pine_nightstand.c | 42 | set_closed();
pine_nightstand.c | 45 | init();
happiness_jar.c | 8 | set_name( "happiness" );
happiness_jar.c | 9 | set_short( "jar of double happiness" );
happiness_jar.c | 10 | add_adjective( ({ "jar", "of", "double" }) );
happiness_jar.c | 16 | set_weight( 140 );
happiness_jar.c | 17 | set_max_weight(27);
happiness_jar.c | 18 | set_value( 25000 );
jasmine_mirror.c | 13 | reflect();
jasmine_mirror.c | 17 | set_name( "mirror" );
jasmine_mirror.c | 18 | set_short( "jasmine mirror" );
jasmine_mirror.c | 19 | add_adjective( ({ "jasmine", "flower", "oval" }) );
jasmine_mirror.c | 26 | set_weight(60);
jasmine_mirror.c | 27 | set_value(50000);
rose_display_cabinet.c | 7 | set_name("cabinet");
rose_display_cabinet.c | 8 | set_short("rosewood display cabinet");
rose_display_cabinet.c | 9 | add_adjective( ({ "rosewood", "display" }) );
rose_display_cabinet.c | 15 | set_transparent();
rose_display_cabinet.c | 16 | set_weight(1200);
rose_display_cabinet.c | 17 | set_max_weight(200);
rose_display_cabinet.c | 18 | set_value(590000);
rose_display_cabinet.c | 19 | set_allowed_room_verbs((["squatting" : "squats" ]));
pedestal_table.c | 7 | set_name( "table" );
pedestal_table.c | 8 | set_short( "pedestal table" );
pedestal_table.c | 9 | add_adjective( "pedestal" );
pedestal_table.c | 16 | set_allowed_positions( ({ "on" }) );
pedestal_table.c | 17 | set_allowed_room_verbs( ([ "standing" : "stands" ]) );
pedestal_table.c | 18 | set_weight( 250 );
pedestal_table.c | 19 | set_max_weight( 50 );
pedestal_table.c | 20 | set_value( 88000 );
pedestal_table.c | 21 | set_allow_use_internals( 1 );
burnt_bamboo_screen.c | 8 | set_name( "screen" );
burnt_bamboo_screen.c | 9 | set_short( "burnt bamboo screen" );
burnt_bamboo_screen.c | 10 | add_adjective( ({ "burnt", "bamboo" }) );
burnt_bamboo_screen.c | 17 | set_allowed_positions( ({ "standing", "sitting" }) );
burnt_bamboo_screen.c | 18 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
burnt_bamboo_screen.c | 19 | set_weight(150);
burnt_bamboo_screen.c | 20 | set_value(400000);
brass_gong.c | 8 | set_name("gong");
brass_gong.c | 9 | set_short("brass gong");
brass_gong.c | 10 | add_adjective( "brass" );
brass_gong.c | 16 | set_weight( 60 );
brass_gong.c | 17 | set_value( 10000 );
brass_gong.c | 18 | set_material( "brass" );
brass_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
brass_gong.c | 27 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
antique_food_basket.c | 8 | set_name( "basket" );
antique_food_basket.c | 9 | set_short( "antique food basket" );
antique_food_basket.c | 10 | add_adjective( ({ "antique", "food", "basket" }) );
antique_food_basket.c | 17 | set_weight( 60 );
antique_food_basket.c | 18 | set_max_weight(38);
antique_food_basket.c | 19 | set_value( 62000 );
crane_umbrella_stand.c | 7 | set_name("stand");
crane_umbrella_stand.c | 8 | set_short("lacquered umbrella stand");
crane_umbrella_stand.c | 9 | add_adjective( ({ "lacquered", "umbrella" }) );
crane_umbrella_stand.c | 16 | set_open();
crane_umbrella_stand.c | 17 | set_stuck(1);
crane_umbrella_stand.c | 18 | set_weight(90);
crane_umbrella_stand.c | 19 | set_max_weight(55);
crane_umbrella_stand.c | 20 | set_value(40000);
small_stove.c | 4 | set_name("stove");
small_stove.c | 5 | set_short("small stove");
small_stove.c | 6 | add_adjective("small");
small_stove.c | 7 | set_long("This is a small stove.\n");
small_stove.c | 12 | set_weight(495);
small_stove.c | 13 | set_max_weight(45);
small_stove.c | 14 | set_value(8000);
bamboo_screen.c | 7 | set_name( "screen" );
bamboo_screen.c | 8 | set_short( "bamboo matchstick screen" );
bamboo_screen.c | 9 | add_adjective( ({ "bamboo", "matchstick" }) );
bamboo_screen.c | 16 | set_allowed_positions( ({ "standing", "sitting" }) );
bamboo_screen.c | 17 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
bamboo_screen.c | 18 | set_weight(20);
bamboo_screen.c | 19 | set_value(400000);
samurai_screen.c | 8 | set_name( "screen" );
samurai_screen.c | 9 | set_short( "rice paper samurai screen" );
samurai_screen.c | 10 | add_adjective( ({ "rice", "paper", "samurai" }) );
samurai_screen.c | 17 | set_allowed_positions( ({ "standing", "sitting" }) );
samurai_screen.c | 18 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
samurai_screen.c | 19 | set_weight(150);
samurai_screen.c | 20 | set_value(329000);
dragon_umbrella_stand.c | 7 | set_name("stand");
dragon_umbrella_stand.c | 8 | set_short("enamelled umbrella stand");
dragon_umbrella_stand.c | 9 | add_adjective( ({ "enamelled", "umbrella" }) );
dragon_umbrella_stand.c | 18 | set_open();
dragon_umbrella_stand.c | 19 | set_stuck(1);
dragon_umbrella_stand.c | 20 | set_weight(90);
dragon_umbrella_stand.c | 21 | set_max_weight(55);
dragon_umbrella_stand.c | 22 | set_value(44000);
crackled_fishbowl.c | 8 | set_name( "fishbowl" );
crackled_fishbowl.c | 9 | set_short( "fishbowl with crackled blue enamel" );
crackled_fishbowl.c | 10 | add_adjective( ({ "with", "crackled", "blue", "enamel" }) );
crackled_fishbowl.c | 11 | add_alias("bowl");
crackled_fishbowl.c | 12 | add_plural( ({ "bowls", "fishbowls" }) );
crackled_fishbowl.c | 13 | set_main_plural("fishbowls with cracked blue enamel");
crackled_fishbowl.c | 24 | set_weight( 120 );
crackled_fishbowl.c | 25 | set_value( 46000 );
crackled_fishbowl.c | 26 | set_allowed_positions(({"sitting"}));
silver_gong.c | 8 | set_name("gong");
silver_gong.c | 9 | set_short("silver gong");
silver_gong.c | 10 | add_adjective( "silver" );
silver_gong.c | 16 | set_weight( 40 );
silver_gong.c | 17 | set_value( 22000 );
silver_gong.c | 18 | set_material( "silver" );
silver_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
silver_gong.c | 27 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
huge_gong.c | 8 | set_name("gong");
huge_gong.c | 9 | set_short("huge brass gong");
huge_gong.c | 10 | add_adjective( ({ "huge", "brass" }) );
huge_gong.c | 16 | set_weight( 100 );
huge_gong.c | 17 | set_value( 42000 );
huge_gong.c | 18 | set_material( "brass" );
huge_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
huge_gong.c | 28 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
newspaper_box.c | 28 | check_for_new_papers();
newspaper_box.c | 29 | set_paper( string _paper );
newspaper_box.c | 30 | set_issues_left( int _issues );
newspaper_box.c | 31 | set_international( int value );
newspaper_box.c | 32 | set_last_issue( int _issue );
newspaper_box.c | 34 | query_dynamic_auto_load();
newspaper_box.c | 35 | init_dynamic_arg( mapping map, object thing );
newspaper_box.c | 37 | query_last_issue();
newspaper_box.c | 38 | query_international();
newspaper_box.c | 39 | query_issues_left();
newspaper_box.c | 40 | query_paper();
newspaper_box.c | 53 | set_name( "box" );
newspaper_box.c | 54 | set_short( "newspaper box" );
newspaper_box.c | 55 | add_adjective( "newspaper" );
newspaper_box.c | 58 | set_allowed_positions( ({ "hanging", "standing" }) );
newspaper_box.c | 59 | set_allowed_room_verbs( ([ "standing": "stands", "hanging": "hangs" ]) );
newspaper_box.c | 60 | add_extra_look( this_object() );
newspaper_box.c | 61 | set_weight( 100 );
newspaper_box.c | 62 | set_max_weight( 300 );
newspaper_box.c | 63 | set_value( 10000 );
newspaper_box.c | 64 | set_open();
newspaper_box.c | 65 | set_stuck( 1 );
newspaper_box.c | 66 | call_out( "check_for_new_papers", 5 );
newspaper_box.c | 91 | environment( this_object() );
newspaper_box.c | 97 | call_out( "check_for_new_papers", 3600 );
newspaper_box.c | 109 | query_last_edition_num( _paper );
newspaper_box.c | 110 | environment( this_object() )->query_owner();
newspaper_box.c | 120 | clone_object( NEWSPAPER_OB );
newspaper_box.c | 121 | set_paper( _paper );
newspaper_box.c | 122 | set_edition( _last_issue + 1 );
newspaper_box.c | 127 | move( room );
newspaper_box.c | 145 | query_paper_cost( _paper ) );
newspaper_box.c | 148 | query_paper_cost( _paper ) );
newspaper_box.c | 163 | call_out( "check_for_new_papers", 3600 );
newspaper_box.c | 222 | init_dynamic_arg( map[ "::" ], thing );
newspaper_box.c | 224 | init_dynamic_arg( map[ "::" ] );
newspaper_box.c | 227 | set_paper( map[ "_paper" ] );
newspaper_box.c | 230 | set_issues_left( map[ "_issues_left" ] );
newspaper_box.c | 233 | set_last_issue( map[ "_last_issue" ] );
newspaper_box.c | 236 | set_international( map[ "_international" ] );
garden_fishbowl.c | 8 | set_name( "fishbowl" );
garden_fishbowl.c | 9 | set_short( "gold-leafed garden fishbowl" );
garden_fishbowl.c | 12 | add_alias("bowl");
garden_fishbowl.c | 13 | add_plural( ({ "bowls", "fishbowls" }) );
garden_fishbowl.c | 24 | set_weight( 110 );
garden_fishbowl.c | 25 | set_value( 52000 );
garden_fishbowl.c | 26 | set_allowed_positions(({"sitting"}));
cherryblossom_screen.c | 7 | set_name( "screen" );
cherryblossom_screen.c | 8 | set_short( "cherry blossom shoji screen" );
cherryblossom_screen.c | 9 | add_adjective( ({ "cherry", "blossom", "shoji" }) );
cherryblossom_screen.c | 16 | set_allowed_positions( ({ "standing", "sitting" }) );
cherryblossom_screen.c | 17 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
cherryblossom_screen.c | 18 | set_weight(20);
cherryblossom_screen.c | 19 | set_value(400000);
calligraphy_fishbowl.c | 8 | set_name( "fishbowl" );
calligraphy_fishbowl.c | 9 | set_short( "calligraphised fishbowl" );
calligraphy_fishbowl.c | 10 | add_adjective( ({ "calligraphised", "fish" }) );
calligraphy_fishbowl.c | 11 | add_alias("bowl");
calligraphy_fishbowl.c | 12 | add_plural( ({ "bowls", "fishbowls" }) );
calligraphy_fishbowl.c | 19 | set_weight( 110 );
calligraphy_fishbowl.c | 20 | set_value( 48000 );
calligraphy_fishbowl.c | 21 | set_allowed_positions(({"sitting"}));
muslin_screen.c | 8 | set_name( "screen" );
muslin_screen.c | 9 | set_short( "muslin screen" );
muslin_screen.c | 10 | add_adjective( "muslin" );
muslin_screen.c | 17 | set_allowed_positions( ({ "standing", "sitting" }) );
muslin_screen.c | 18 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
muslin_screen.c | 19 | set_weight(150);
muslin_screen.c | 20 | set_value(225000);
large_gong.c | 8 | set_name("gong");
large_gong.c | 9 | set_short("large brass gong");
large_gong.c | 10 | add_adjective( ({ "large", "brass" }) );
large_gong.c | 16 | set_weight( 80 );
large_gong.c | 17 | set_value( 38000 );
large_gong.c | 18 | set_material( "brass" );
large_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
large_gong.c | 27 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
hatstand.c | 6 | set_name("stand");
hatstand.c | 7 | set_short("tall hat stand");
hatstand.c | 8 | add_adjective( ({"tall", "hat"}) );
hatstand.c | 9 | add_alias( "hatstand" );
hatstand.c | 10 | add_plural("tall hat stands");
hatstand.c | 18 | set_weight(150);
hatstand.c | 19 | set_max_weight(200);
hatstand.c | 22 | set_put_aliases(({"hang"}));
hatstand.c | 23 | set_value(75000);
flint.c | 6 | set_name("flint");
flint.c | 7 | set_short("flint stone");
flint.c | 10 | add_property("no recycling", 1);
flint.c | 11 | add_alias("stone");
flint.c | 12 | set_value( 600 );
satsuma_fishbowl.c | 8 | set_name( "fishbowl" );
satsuma_fishbowl.c | 9 | set_short( "satsuma fishbowl" );
satsuma_fishbowl.c | 10 | add_adjective( ({ "satsuma" }) );
satsuma_fishbowl.c | 11 | add_alias("bowl");
satsuma_fishbowl.c | 12 | add_plural( ({ "bowls", "fishbowls" }) );
satsuma_fishbowl.c | 25 | set_weight( 110 );
satsuma_fishbowl.c | 26 | set_value( 56000 );
satsuma_fishbowl.c | 27 | set_allowed_positions(({"sitting"}));
latticed_screen.c | 7 | set_name( "screen" );
latticed_screen.c | 8 | set_short( "latticed shoji screen" );
latticed_screen.c | 9 | add_adjective( ({ "latticed", "shoji" }) );
latticed_screen.c | 16 | set_allowed_positions( ({ "standing", "sitting" }) );
latticed_screen.c | 17 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
latticed_screen.c | 18 | set_weight(20);
latticed_screen.c | 19 | set_value(400000);
tiny_gong.c | 8 | set_name("gong");
tiny_gong.c | 9 | set_short("tiny brass gong");
tiny_gong.c | 10 | add_adjective( ({ "tiny", "brass" }) );
tiny_gong.c | 16 | set_weight( 20 );
tiny_gong.c | 17 | set_value( 15000 );
tiny_gong.c | 18 | set_material( "brass" );
tiny_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
tiny_gong.c | 27 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
mandarin_fan_screen.c | 8 | set_name( "screen" );
mandarin_fan_screen.c | 9 | set_short( "mandarin fan screen" );
mandarin_fan_screen.c | 10 | add_adjective( ({ "mandarin", "fan", "hana" }) );
mandarin_fan_screen.c | 18 | set_allowed_positions( ({ "standing", "sitting" }) );
mandarin_fan_screen.c | 19 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
mandarin_fan_screen.c | 20 | set_weight(150);
mandarin_fan_screen.c | 21 | set_value(395000);
sung_umbrella_stand.c | 7 | set_name("stand");
sung_umbrella_stand.c | 8 | set_short("Sung umbrella stand");
sung_umbrella_stand.c | 9 | add_adjective( ({ "Sung", "umbrella" }) );
sung_umbrella_stand.c | 19 | set_open();
sung_umbrella_stand.c | 20 | set_stuck(1);
sung_umbrella_stand.c | 21 | set_weight(90);
sung_umbrella_stand.c | 22 | set_max_weight(55);
sung_umbrella_stand.c | 23 | set_value(51000);
landscape_screen.c | 8 | set_name( "screen" );
landscape_screen.c | 9 | set_short( "watercolour landscape screen" );
landscape_screen.c | 10 | add_adjective( ({ "watercolour", "landscape" }) );
landscape_screen.c | 19 | set_allowed_positions( ({ "standing", "sitting" }) );
landscape_screen.c | 20 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
landscape_screen.c | 21 | set_weight(150);
landscape_screen.c | 22 | set_value(400000);
peony_fishbowl.c | 8 | set_name( "fishbowl" );
peony_fishbowl.c | 9 | set_short( "gold-leafed peony fishbowl" );
peony_fishbowl.c | 12 | add_plural( ({ "bowls", "fishbowls" }) );
peony_fishbowl.c | 13 | add_alias("bowl");
peony_fishbowl.c | 22 | set_weight( 110 );
peony_fishbowl.c | 23 | set_value( 51000 );
peony_fishbowl.c | 24 | set_allowed_positions(({"sitting"}));
blackboard.c | 14 | query_allowed (string);
blackboard.c | 16 | read_stuff();
blackboard.c | 17 | query_words();
blackboard.c | 24 | set_name ("blackboard");
blackboard.c | 25 | set_short ("blackboard");
blackboard.c | 26 | add_alias (({"board", "sign"}));
blackboard.c | 33 | set_read_mess ((: read_stuff :));
blackboard.c | 36 | set_value(0);
blackboard.c | 40 | this_player()->add_command ("write", this_object(), "[on] <direct:object>");
blackboard.c | 41 | this_player()->add_command ("clean", this_object(), "<direct:object>");
blackboard.c | 56 | query_words();
blackboard.c | 74 | set_words ("");
blackboard.c | 86 | query_words();
blackboard.c | 88 | this_player()->do_edit(bean, "blackboard_text", this_object());
blackboard.c | 101 | this_player());
blackboard.c | 102 | tell_object (this_player(), "Okay, nothing has been changed.\n");
blackboard.c | 106 | set_words (text);
blackboard.c | 109 | this_player());
blackboard.c | 144 | init_dynamic_arg( map[ "::" ] );
blackboard.c | 145 | set_words (map["words"]);
blackboard.c | 147 | set_read_mess ((: read_stuff :));
mado_screen.c | 8 | set_name( "screen" );
mado_screen.c | 9 | set_short( "mado screen" );
mado_screen.c | 10 | add_adjective( "mado" );
mado_screen.c | 16 | set_allowed_positions( ({ "standing", "sitting" }) );
mado_screen.c | 17 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
mado_screen.c | 18 | set_weight(150);
mado_screen.c | 19 | set_value(350000);
fine_fireplace.c | 13 | set_allowed_positions(({"sitting"}));
fine_fireplace.c | 14 | set_allowed_room_verbs((["sitting" : "sits" ]));
fine_fireplace.c | 15 | set_weight(700);
fine_fireplace.c | 16 | set_max_weight(100);
fine_fireplace.c | 18 | set_short("finely crafted fireplace");
fine_fireplace.c | 21 | set_value(900000);
hunghungese_screen.c | 8 | set_name( "screen" );
hunghungese_screen.c | 9 | set_short( "HungHungese screen" );
hunghungese_screen.c | 20 | set_allowed_positions( ({ "standing", "sitting" }) );
hunghungese_screen.c | 21 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
hunghungese_screen.c | 22 | set_weight(150);
hunghungese_screen.c | 23 | set_value(325000);
waterbuffalo_dung.c | 6 | set_name("dung");
waterbuffalo_dung.c | 20 | set_weight( 9 );
waterbuffalo_dung.c | 21 | set_value( 200 );
log.c | 9 | set_name("log");
log.c | 22 | set_weight( WEIGHT );
log.c | 23 | set_value( 400 );
textured_leaf_screen.c | 8 | set_name( "screen" );
textured_leaf_screen.c | 9 | set_short( "textured leaf screen" );
textured_leaf_screen.c | 10 | add_adjective( ({ "textured", "leaf" }) );
textured_leaf_screen.c | 19 | set_allowed_positions( ({ "standing", "sitting" }) );
textured_leaf_screen.c | 20 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
textured_leaf_screen.c | 21 | set_weight(150);
textured_leaf_screen.c | 22 | set_value(290000);
spruce_screen.c | 8 | set_name( "screen" );
spruce_screen.c | 9 | set_short( "double cross spruce screen" );
spruce_screen.c | 10 | add_adjective( ({ "double", "cross", "spruce" }) );
spruce_screen.c | 18 | set_allowed_positions( ({ "standing", "sitting" }) );
spruce_screen.c | 19 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
spruce_screen.c | 20 | set_weight(150);
spruce_screen.c | 21 | set_value(400000);
lava_lamp.c | 8 | set_name("lamp");
lava_lamp.c | 9 | set_short("lava lamp");
lava_lamp.c | 10 | set_light(25);
lava_lamp.c | 11 | add_adjective( ({ "lava", "red" }) );
lava_lamp.c | 12 | add_alias( ({ "lamp" }) );
lava_lamp.c | 27 | set_allowed_positions(({"sitting","standing"}));
lava_lamp.c | 28 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
lava_lamp.c | 29 | set_weight(82);
lava_lamp.c | 30 | set_value(20500);
lava_lamp.c | 35 | init();
lava_lamp.c | 36 | add_command( "stare", "at <direct:object'lamp'>" );
lava_lamp.c | 40 | call_out( (: $(this_player())->add_effect( MEDITATION ) :), 1 );
lava_lamp.c | 41 | add_succeeded_mess( "$N $V dreamily at $D and zone$s out.\n");
lectern.c | 4 | set_name("lectern");
lectern.c | 5 | set_short("oak lectern");
lectern.c | 6 | add_adjective(({"oak", "ornate"}));
lectern.c | 9 | set_allowed_positions(({"sitting"}));
lectern.c | 10 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
lectern.c | 11 | set_weight(350);
lectern.c | 12 | set_max_weight(50);
lectern.c | 13 | set_value(1400);
geisha_screen.c | 8 | set_name( "screen" );
geisha_screen.c | 9 | set_short( "rice paper geisha screen" );
geisha_screen.c | 10 | add_adjective( ({ "rice", "paper", "geisha" }) );
geisha_screen.c | 18 | set_allowed_positions( ({ "standing", "sitting" }) );
geisha_screen.c | 19 | set_allowed_room_verbs((["standing" : "stands", "sitting" : "sits" ]) );
geisha_screen.c | 20 | set_weight(150);
geisha_screen.c | 21 | set_value(320000);
platinum_gong.c | 8 | set_name("gong");
platinum_gong.c | 9 | set_short("platinum gong");
platinum_gong.c | 10 | add_adjective( "platinum" );
platinum_gong.c | 16 | set_weight( 30 );
platinum_gong.c | 17 | set_value( 28000 );
platinum_gong.c | 18 | set_material( "platinum" );
platinum_gong.c | 19 | set_allowed_positions( ({"hanging"}) );
platinum_gong.c | 27 | this_player()->add_command( "hit", this_object(), "<direct:object:me>" );
iron_hatstand.c | 6 | set_name( "stand" );
iron_hatstand.c | 7 | set_short( "wrought iron hat stand" );
iron_hatstand.c | 8 | add_adjective( ({ "wrought", "iron", "hat" }) );
iron_hatstand.c | 9 | add_alias( ({ "hatstand", "rack", "hat rack", "hatrack" }) );
iron_hatstand.c | 10 | add_plural( "wrought iron hat stands" );
iron_hatstand.c | 15 | set_weight(250);
iron_hatstand.c | 16 | set_max_weight(200);
iron_hatstand.c | 17 | set_allowed_room_verbs(([ "standing" : "stands" ]));
iron_hatstand.c | 18 | set_put_aliases( ({ "hang" }) );
iron_hatstand.c | 19 | set_value(9000);
teahouse_stone_lamp.c | 13 | dest_me();
teahouse_stone_lamp.c | 14 | do_dowse();
teahouse_stone_lamp.c | 15 | do_extinguish();
teahouse_stone_lamp.c | 16 | do_light();
teahouse_stone_lamp.c | 17 | init();
teahouse_stone_lamp.c | 18 | init_arg( mixed arg );
teahouse_stone_lamp.c | 19 | out_of_fuel();
teahouse_stone_lamp.c | 20 | pretty_plural(string str);
teahouse_stone_lamp.c | 21 | query_auto_load();
teahouse_stone_lamp.c | 22 | setup();
teahouse_stone_lamp.c | 23 | short( int i );
teahouse_stone_lamp.c | 24 | do_replace();
teahouse_stone_lamp.c | 32 | set_name("lamp");
teahouse_stone_lamp.c | 33 | set_short("stone teahouse lamp");
teahouse_stone_lamp.c | 34 | set_weight( 40 );
teahouse_stone_lamp.c | 35 | set_value( 50000 );
teahouse_stone_lamp.c | 36 | add_adjective( ({ "stone", "teahouse" }) );
teahouse_stone_lamp.c | 37 | add_alias( ({ "teahouse lamp", "stone lamp" }) );
teahouse_stone_lamp.c | 49 | find_call_out("out_of_fuel");
teahouse_stone_lamp.c | 68 | set_allowed_positions(({"sitting","standing"}));
teahouse_stone_lamp.c | 69 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
teahouse_stone_lamp.c | 70 | set_weight(9);
teahouse_stone_lamp.c | 71 | set_value(20500);
teahouse_stone_lamp.c | 73 | init_dynamic_arg( query_dynamic_auto_load() );
teahouse_stone_lamp.c | 80 | add_command("replace", "tealight in <direct:object:me>");
teahouse_stone_lamp.c | 81 | this_player()->add_command("light", this_object());
teahouse_stone_lamp.c | 82 | this_player()->add_command("extinguish", this_object());
teahouse_stone_lamp.c | 87 | set_light( 0 );
teahouse_stone_lamp.c | 88 | dest_me();
teahouse_stone_lamp.c | 108 | remove_call_out( "out_of_fuel" );
teahouse_stone_lamp.c | 111 | set_light( 0 );
teahouse_stone_lamp.c | 136 | call_out( "out_of_fuel" , fuel_left );
teahouse_stone_lamp.c | 139 | set_light( BRIGHTNESS );
teahouse_stone_lamp.c | 147 | all_inventory( this_player() );
teahouse_stone_lamp.c | 148 | sizeof( things );
teahouse_stone_lamp.c | 153 | destruct( things[ i ] );
teahouse_stone_lamp.c | 165 | notify_fail( "You do not have a tealight to put in the lamp.\n" );
teahouse_stone_lamp.c | 171 | find_call_out("out_of_fuel");
teahouse_stone_lamp.c | 196 | if (arg["::"]) ::init_dynamic_arg(arg["::"]);
teahouse_stone_lamp.c | 206 | call_out("out_of_fuel", fuel_left);
teahouse_stone_lamp.c | 208 | set_light(BRIGHTNESS);
teahouse_stone_lamp.c | 212 | set_light(0);
teahouse_stone_lamp.c | 223 | environment(this_object());
teahouse_stone_lamp.c | 228 | set_light( 45 );
teahouse_stone_lamp.c | 229 | tell_room(env, "The tealight in the lamp burns out.\n" );
teahouse_stone_lamp.c | 236 | pretty_plural( str);
teahouse_stone_lamp.c | 242 | short( 0 );
owl_clock.c | 6 | set_name("clock");
owl_clock.c | 7 | set_short("owl clock");
owl_clock.c | 8 | add_adjective("owl");
owl_clock.c | 15 | set_allowed_positions(({}));
owl_clock.c | 16 | set_allowed_room_verbs((["hanging" : "hangs" ]));
owl_clock.c | 17 | set_weight(50);
owl_clock.c | 18 | set_value(42000);
owl_clock.c | 19 | add_property("no recycling", 1);
owl_clock.c | 20 | set_chimes(2, "The owl clock opens its beak and hoots twice.\n");
owl_clock.c | 21 | set_chimes(1, "The owl clock opens its beak and hoots once.\n");
owl_clock.c | 22 | set_show_date();
owl_clock.c | 30 | environment(this_object())->query_co_ord();
owl_clock.c | 34 | tell_room(environment(this_object()), mess);
bath.c | 4 | set_name("bathtub");
bath.c | 5 | set_short("cast iron bathtub");
bath.c | 6 | add_adjective(({"cast", "iron"}));
bath.c | 7 | add_alias( ({ "tub", "bath" }) );
bath.c | 11 | set_allowed_positions( ({"sitting", "standing", "lying" }) );
bath.c | 12 | set_allowed_room_verbs((["sitting" : "sits", "standing" : "stands" ]));
bath.c | 13 | set_weight(350);
bath.c | 14 | set_value(14000);
red_futon.c | 8 | do_unfold(object ob);
red_futon.c | 9 | do_fold(object ob);
red_futon.c | 14 | set_name( "futon" );
red_futon.c | 15 | set_short( "traditional red futon" );
red_futon.c | 16 | add_adjective( ({ "traditional", "red" } ));
red_futon.c | 17 | add_alias( "couch" );
red_futon.c | 18 | add_alias( "sofa" );
red_futon.c | 27 | set_allowed_positions(({"sitting", "lying", "kneeling", "meditating"}));
red_futon.c | 28 | set_allowed_room_verbs((["sitting" : "sits" ]));
red_futon.c | 29 | set_weight(150);
red_futon.c | 30 | set_value(650000);
red_futon.c | 31 | add_extra_look( this_object() );
red_futon.c | 37 | add_command("unfold", "<indirect:object'futon'>" );
red_futon.c | 38 | add_command("fold", "<indirect:object'futon'>" );
red_futon.c | 40 | init();
red_futon.c | 47 | add_failed_mess("$D is already folded.\n", ({ }) );
red_futon.c | 51 | add_succeeded_mess("$N $V $D back into a sofa.\n", ({ }) );
red_futon.c | 60 | add_failed_mess("$D is already folded.\n", ({ }) );
red_futon.c | 64 | add_succeeded_mess("$N $V $D out into a bed.\n", ({ }) );
foot_bed.c | 12 | set_name("bed");
foot_bed.c | 13 | set_short ("duck-footed bed");
foot_bed.c | 14 | add_alias ("duck-footed");
foot_bed.c | 23 | set_weight( 800 );
foot_bed.c | 24 | set_value( 100000 );
foot_bed.c | 29 | set_allowed_room_verbs((["sitting" : "sits" ]));
large_wood_stove.c | 8 | set_name("oven");
large_wood_stove.c | 9 | set_short("large wood oven");
large_wood_stove.c | 10 | add_adjective( ({ "large", "wood" }) );
large_wood_stove.c | 25 | set_weight(495);
large_wood_stove.c | 26 | set_max_weight(100);
large_wood_stove.c | 27 | set_value(120000);
golden_ebony_wardrobe.c | 4 | set_name("wardrobe");
golden_ebony_wardrobe.c | 5 | set_short("golden ebony wood wardrobe");
golden_ebony_wardrobe.c | 6 | add_adjective(({"golden", "ebony", "wood"}));
golden_ebony_wardrobe.c | 16 | set_weight(900);
golden_ebony_wardrobe.c | 17 | set_max_weight(500);
golden_ebony_wardrobe.c | 18 | set_value(740000);
golden_ebony_wardrobe.c | 20 | set_allowed_room_verbs((["squatting" : "squats" ]));
golden_ebony_wardrobe.c | 21 | set_pick_skill("covert.lockpick.doors");
golden_ebony_wardrobe.c | 22 | set_difficulty(4);
golden_ebony_wardrobe.c | 30 | random(1000);
golden_ebony_wardrobe.c | 31 | set_key(key_id);
golden_ebony_wardrobe.c | 33 | clone_object("/std/key");
golden_ebony_wardrobe.c | 34 | set_key("small iron", key_id);
golden_ebony_wardrobe.c | 37 | move(this_object());
golden_ebony_wardrobe.c | 38 | set_closed();
golden_ebony_wardrobe.c | 41 | init();
.chisel.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.chisel.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.chisel.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.chisel.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/chisel.wep#1" );
.chisel.wep_virtual_.c | 15 | call_other( clone, "set_name", "chisel"  );
.chisel.wep_virtual_.c | 16 | call_other( clone, "set_short", "chisel"  );
.chisel.wep_virtual_.c | 17 | call_other( clone, "set_long", "This is a tool with a sharp edge which is used to shape and cut metal, wood, or stone.\n"  );
.chisel.wep_virtual_.c | 18 | call_other( clone, "set_weight", 11  );
.chisel.wep_virtual_.c | 19 | call_other( clone, "set_length", 6  );
.chisel.wep_virtual_.c | 20 | call_other( clone, "set_width", 3  );
.chisel.wep_virtual_.c | 21 | call_other( clone, "set_material",  "steel"  );
.chisel.wep_virtual_.c | 22 | call_other( clone, "set_value", 300  );
.chisel.wep_virtual_.c | 23 | call_other( clone, "new_weapon", 19200  );
.chisel.wep_virtual_.c | 24 | call_other( clone, "set_damage_chance", 5  );
.chisel.wep_virtual_.c | 25 | call_other( clone, "add_attack", "slash", 30, ({ 10, 3, 10 }), "sharp", "sharp", 0  );
.chisel.wep_virtual_.c | 26 | call_other( clone, "add_attack", "stab", 30, ({ 10, 3, 10 }), "pierce", "pierce", 0 );
.sharp_butter_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.sharp_butter_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.sharp_butter_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.sharp_butter_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/sharp_butter_knife.wep#1" );
.sharp_butter_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.sharp_butter_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "sharp butter knife"  );
.sharp_butter_knife.wep_virtual_.c | 17 | call_other( clone, "set_main_plural", "sharp butter knives"  );
.sharp_butter_knife.wep_virtual_.c | 18 | call_other( clone, "add_adjective", ({ "sharp", "butter" })  );
.sharp_butter_knife.wep_virtual_.c | 19 | call_other( clone, "add_alias", ({ "utensil" })  );
.sharp_butter_knife.wep_virtual_.c | 20 | call_other( clone, "add_plural", "knives"  );
.sharp_butter_knife.wep_virtual_.c | 21 | call_other( clone, "set_long",  "This is a butter knife that has been sharpened a bit.\n"  );
.sharp_butter_knife.wep_virtual_.c | 22 | call_other( clone, "set_weight",  3  );
.sharp_butter_knife.wep_virtual_.c | 23 | call_other( clone, "set_length",  6  );
.sharp_butter_knife.wep_virtual_.c | 24 | call_other( clone, "set_width",  1  );
.sharp_butter_knife.wep_virtual_.c | 25 | call_other( clone, "set_material",  "steel"  );
.sharp_butter_knife.wep_virtual_.c | 26 | call_other( clone, "set_value",  75  );
.sharp_butter_knife.wep_virtual_.c | 27 | call_other( clone, "new_weapon",  500  );
.sharp_butter_knife.wep_virtual_.c | 28 | call_other( clone, "add_attack",  "slash", 70, ({ 15, 2, 20 }), "sharp", "sharp", 0  );
.sharp_butter_knife.wep_virtual_.c | 29 | call_other( clone, "add_attack",  "stab", 40, ({ 20, 2, 30 }), "pierce", "pierce", 0 );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/black_handled_ceremonial_bronze_knife.wep#1" );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "black handled ceremonial bronze knife"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "black", "handled", "ceremonial", "bronze" })  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 18 | call_other( clone, "set_main_plural", "black handled ceremonial bronze knives"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 19 | call_other( clone, "add_plural", "knives"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 20 | call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ebony and its long bronze blade has been carved with mystic runes.\n"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 21 | call_other( clone, "set_weight", 11  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 22 | call_other( clone, "set_length", 13  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 23 | call_other( clone, "set_width", 4  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 24 | call_other( clone, "set_material", "copper"  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 25 | call_other( clone, "set_value", 1000  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 2000  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
.black_handled_ceremonial_bronze_knife.wep_virtual_.c | 28 | call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
.letter_opener.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.letter_opener.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.letter_opener.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.letter_opener.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/letter_opener.wep#1" );
.letter_opener.wep_virtual_.c | 15 | call_other( clone, "set_name", "opener"  );
.letter_opener.wep_virtual_.c | 16 | call_other( clone, "set_short", "pearl-handled letter opener"  );
.letter_opener.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "pearl-handled", "pearl", "handled", "letter" })  );
.letter_opener.wep_virtual_.c | 18 | call_other( clone, "set_main_plural", "pearl-handled letter openers"  );
.letter_opener.wep_virtual_.c | 19 | call_other( clone, "set_long", "This letter opener has a lovely pearl handle.  It has a pointy blade that could come in handy in a crunch.\n"  );
.letter_opener.wep_virtual_.c | 20 | call_other( clone, "set_weight", 4  );
.letter_opener.wep_virtual_.c | 21 | call_other( clone, "set_length", 8  );
.letter_opener.wep_virtual_.c | 22 | call_other( clone, "set_width", 1  );
.letter_opener.wep_virtual_.c | 23 | call_other( clone, "set_material", "steel"  );
.letter_opener.wep_virtual_.c | 24 | call_other( clone, "set_value", 5000  );
.letter_opener.wep_virtual_.c | 25 | call_other( clone, "new_weapon", 1600  );
.letter_opener.wep_virtual_.c | 26 | call_other( clone, "set_damage_chance", 8  );
.letter_opener.wep_virtual_.c | 27 | call_other( clone, "add_attack", "stab", 40, ({ 30, 3, 10 }), "pierce", "pierce", 0 );
.tanto.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.tanto.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.tanto.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.tanto.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/tanto.wep#1" );
.tanto.wep_virtual_.c | 15 | call_other( clone, "set_name", "tanto"  );
.tanto.wep_virtual_.c | 16 | call_other( clone, "set_short", "tanto"  );
.tanto.wep_virtual_.c | 17 | call_other( clone, "add_alias", "dagger"  );
.tanto.wep_virtual_.c | 18 | call_other( clone, "add_plural", ({"daggers","tantos"})  );
.tanto.wep_virtual_.c | 19 | call_other( clone, "set_main_plural", "tantos"  );
.tanto.wep_virtual_.c | 20 | call_other( clone, "set_long", "This large auriental dagger is an excellent weapon for close-in fighting.  It is short, well crafted and looks pretty durable.\n"  );
.tanto.wep_virtual_.c | 21 | call_other( clone, "set_weight", 9  );
.tanto.wep_virtual_.c | 22 | call_other( clone, "set_length", 10  );
.tanto.wep_virtual_.c | 23 | call_other( clone, "set_width", 3  );
.tanto.wep_virtual_.c | 24 | call_other( clone, "set_material", "steel"  );
.tanto.wep_virtual_.c | 25 | call_other( clone, "set_value", 4000  );
.tanto.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 50000  );
.tanto.wep_virtual_.c | 27 | call_other( clone, "set_damage_chance", 2  );
.tanto.wep_virtual_.c | 28 | call_other( clone, "add_attack", "slash", 75, ({ 0, 2, 40 }), "sharp", "sharp", 0  );
.tanto.wep_virtual_.c | 29 | call_other( clone, "add_attack", "stab", 50, ({ 9, 4, 30 }), "pierce", "pierce", 0 );
.stiletto.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.stiletto.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.stiletto.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.stiletto.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/stiletto.wep#1" );
.stiletto.wep_virtual_.c | 15 | call_other( clone, "set_name", "stiletto"  );
.stiletto.wep_virtual_.c | 16 | call_other( clone, "set_short", "stiletto"  );
.stiletto.wep_virtual_.c | 17 | call_other( clone, "add_alias", "knife"  );
.stiletto.wep_virtual_.c | 18 | call_other( clone, "add_adjective", "slender"  );
.stiletto.wep_virtual_.c | 19 | call_other( clone, "set_main_plural", "stilettoes"  );
.stiletto.wep_virtual_.c | 20 | call_other( clone, "add_plural", "knives"  );
.stiletto.wep_virtual_.c | 21 | call_other( clone, "set_long", "This is a slender knife with a dark steel blade, and sharp tip.  "         "It's perfect for slipping between someone's ribs.\n"  );
.stiletto.wep_virtual_.c | 22 | call_other( clone, "set_weight", 7  );
.stiletto.wep_virtual_.c | 23 | call_other( clone, "set_length", 10  );
.stiletto.wep_virtual_.c | 24 | call_other( clone, "set_width", 1  );
.stiletto.wep_virtual_.c | 25 | call_other( clone, "set_material",  "steel"  );
.stiletto.wep_virtual_.c | 26 | call_other( clone, "set_value", 2000  );
.stiletto.wep_virtual_.c | 27 | call_other( clone, "new_weapon",  5000  );
.stiletto.wep_virtual_.c | 28 | call_other( clone, "set_damage_chance",  5  );
.stiletto.wep_virtual_.c | 29 | call_other( clone, "add_attack",  "stab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
.stiletto.wep_virtual_.c | 30 | call_other( clone, "add_attack",  "stabstab", 70, ({ 40, 4, 20 }), "pierce", "pierce"  );
.stiletto.wep_virtual_.c | 31 | call_other( clone, "set_no_limbs", 1 );
.small_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.small_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.small_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.small_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_knife.wep#1" );
.small_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.small_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "small knife"  );
.small_knife.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "small" })  );
.small_knife.wep_virtual_.c | 18 | call_other( clone, "add_alias", "utensil"  );
.small_knife.wep_virtual_.c | 19 | call_other( clone, "add_plural", "utensils"  );
.small_knife.wep_virtual_.c | 20 | call_other( clone, "set_long", "This small knife might be the sort of thing " "you'd use to peel an apple, slice carrots or " "stab in someone's kidney.  You could say " "that it's a multi-purpose utensil.\n"  );
.small_knife.wep_virtual_.c | 21 | call_other( clone, "set_weight", 6  );
.small_knife.wep_virtual_.c | 22 | call_other( clone, "set_length", 7  );
.small_knife.wep_virtual_.c | 23 | call_other( clone, "set_width", 1  );
.small_knife.wep_virtual_.c | 24 | call_other( clone, "set_material",  "steel"  );
.small_knife.wep_virtual_.c | 25 | call_other( clone, "set_value", 50  );
.small_knife.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 500  );
.small_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "slash", 70, ({ 5, 2, 20 }), "sharp", "sharp", 0  );
.small_knife.wep_virtual_.c | 28 | call_other( clone, "add_attack", "stab", 40, ({ 10, 2, 30 }), "pierce", "pierce", 0 );
.small_copper_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.small_copper_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.small_copper_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.small_copper_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/small_copper_knife.wep#1" );
.small_copper_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.small_copper_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "small copper knife"  );
.small_copper_knife.wep_virtual_.c | 17 | call_other( clone, "set_main_plural", "small copper knives"  );
.small_copper_knife.wep_virtual_.c | 18 | call_other( clone, "add_adjective", ({ "small", "copper" })  );
.small_copper_knife.wep_virtual_.c | 19 | call_other( clone, "set_long", "This is a small, Djelian, copper knife.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
.small_copper_knife.wep_virtual_.c | 20 | call_other( clone, "set_weight", 5  );
.small_copper_knife.wep_virtual_.c | 21 | call_other( clone, "set_length", 8  );
.small_copper_knife.wep_virtual_.c | 22 | call_other( clone, "set_width", 3  );
.small_copper_knife.wep_virtual_.c | 23 | call_other( clone, "set_material",  "copper"  );
.small_copper_knife.wep_virtual_.c | 24 | call_other( clone, "set_value", 100  );
.small_copper_knife.wep_virtual_.c | 25 | call_other( clone, "new_weapon", 16000  );
.small_copper_knife.wep_virtual_.c | 26 | call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 10 }), "sharp", "sharp"  );
.small_copper_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 15 }), "pierce", "pierce" );
.dagger.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.dagger.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.dagger.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.dagger.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/dagger.wep#1" );
.dagger.wep_virtual_.c | 15 | call_other( clone, "set_name", "dagger"  );
.dagger.wep_virtual_.c | 16 | call_other( clone, "set_short", "dagger"  );
.dagger.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ })  );
.dagger.wep_virtual_.c | 18 | call_other( clone, "add_alias", ({ })  );
.dagger.wep_virtual_.c | 19 | call_other( clone, "add_plural", ({ "daggers" })  );
.dagger.wep_virtual_.c | 20 | call_other( clone, "set_long",  "This is a largish looking knife.\n"  );
.dagger.wep_virtual_.c | 21 | call_other( clone, "set_material", "steel"  );
.dagger.wep_virtual_.c | 22 | call_other( clone, "set_weight", 10  );
.dagger.wep_virtual_.c | 23 | call_other( clone, "set_length", 11  );
.dagger.wep_virtual_.c | 24 | call_other( clone, "set_width", 2  );
.dagger.wep_virtual_.c | 25 | call_other( clone, "set_value",  200  );
.dagger.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 12800  );
.dagger.wep_virtual_.c | 27 | call_other( clone, "set_damage_chance", 5  );
.dagger.wep_virtual_.c | 28 | call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
.dagger.wep_virtual_.c | 29 | call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/white_handled_ceremonial_bronze_knife.wep#1" );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "white handled ceremonial bronze knife"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "white", "handled", "ceremonial", "bronze" })  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 18 | call_other( clone, "set_main_plural", "white handled ceremonial bronze knives"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 19 | call_other( clone, "add_plural", "knives"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 20 | call_other( clone, "set_long", "This is a ceremonial knife, for use in magic rituals.  Its ornate handle is made of ivory and its long bronze blade has been carved with mystic runes.\n"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 21 | call_other( clone, "set_weight", 11  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 22 | call_other( clone, "set_length", 18  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 23 | call_other( clone, "set_width", 3  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 24 | call_other( clone, "set_material",  "bronze"  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 25 | call_other( clone, "set_value", 1000  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 2000  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
.white_handled_ceremonial_bronze_knife.wep_virtual_.c | 28 | call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
.copper_fighting_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.copper_fighting_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.copper_fighting_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.copper_fighting_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/copper_fighting_knife.wep#1" );
.copper_fighting_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.copper_fighting_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "copper fighting knife"  );
.copper_fighting_knife.wep_virtual_.c | 17 | call_other( clone, "set_main_plural", "copper fighting knives"  );
.copper_fighting_knife.wep_virtual_.c | 18 | call_other( clone, "add_adjective", ({ "copper", "fighting" })  );
.copper_fighting_knife.wep_virtual_.c | 19 | call_other( clone, "set_long", "This Djelian copper knife is designed for fighting.  Its straight blade and hilt are undecorated, clean and functional.\n"  );
.copper_fighting_knife.wep_virtual_.c | 20 | call_other( clone, "set_weight", 9  );
.copper_fighting_knife.wep_virtual_.c | 21 | call_other( clone, "set_length", 10  );
.copper_fighting_knife.wep_virtual_.c | 22 | call_other( clone, "set_width", 2  );
.copper_fighting_knife.wep_virtual_.c | 23 | call_other( clone, "set_material", "copper"  );
.copper_fighting_knife.wep_virtual_.c | 24 | call_other( clone, "set_value", 180  );
.copper_fighting_knife.wep_virtual_.c | 25 | call_other( clone, "new_weapon", 32000  );
.copper_fighting_knife.wep_virtual_.c | 26 | call_other( clone, "add_attack", "slash", 100, ({ 10, 5, 15 }), "sharp", "sharp"  );
.copper_fighting_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 20 }), "pierce", "pierce" );
.klatchian_steel_dirk.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.klatchian_steel_dirk.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.klatchian_steel_dirk.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.klatchian_steel_dirk.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/klatchian_steel_dirk.wep#1" );
.klatchian_steel_dirk.wep_virtual_.c | 15 | call_other( clone, "set_name", "dirk"  );
.klatchian_steel_dirk.wep_virtual_.c | 16 | call_other( clone, "set_short", "Klatchian steel dirk"  );
.klatchian_steel_dirk.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "klatchian", "steel" })  );
.klatchian_steel_dirk.wep_virtual_.c | 18 | call_other( clone, "add_alias", "dagger"  );
.klatchian_steel_dirk.wep_virtual_.c | 19 | call_other( clone, "add_plural", "daggers"  );
.klatchian_steel_dirk.wep_virtual_.c | 20 | call_other( clone, "set_long", "This is a very long, curving knife with a wickedly sharp point.  It is made of Klatchian steel.\n"  );
.klatchian_steel_dirk.wep_virtual_.c | 21 | call_other( clone, "set_weight", 12  );
.klatchian_steel_dirk.wep_virtual_.c | 22 | call_other( clone, "set_length", 18  );
.klatchian_steel_dirk.wep_virtual_.c | 23 | call_other( clone, "set_width", 3  );
.klatchian_steel_dirk.wep_virtual_.c | 24 | call_other( clone, "set_material", "steel"  );
.klatchian_steel_dirk.wep_virtual_.c | 25 | call_other( clone, "set_value", 400  );
.klatchian_steel_dirk.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 32000  );
.klatchian_steel_dirk.wep_virtual_.c | 27 | call_other( clone, "set_damage_chance", 5  );
.klatchian_steel_dirk.wep_virtual_.c | 28 | call_other( clone, "add_attack", "slash", 75, ({ 10, 5, 20 }), "sharp", "sharp"  );
.klatchian_steel_dirk.wep_virtual_.c | 29 | call_other( clone, "add_attack", "stab", 50, ({ 10, 2, 27 }), "pierce", "pierce" );
.meat_cleaver.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.meat_cleaver.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.meat_cleaver.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.meat_cleaver.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/meat_cleaver.wep#1" );
.meat_cleaver.wep_virtual_.c | 15 | call_other( clone, "set_name", "cleaver"  );
.meat_cleaver.wep_virtual_.c | 16 | call_other( clone, "set_short", "meat cleaver"  );
.meat_cleaver.wep_virtual_.c | 17 | call_other( clone, "add_alias", ({ "utensil", "knife" })  );
.meat_cleaver.wep_virtual_.c | 18 | call_other( clone, "add_adjective", "meat"  );
.meat_cleaver.wep_virtual_.c | 19 | call_other( clone, "set_main_plural", "meat cleavers"  );
.meat_cleaver.wep_virtual_.c | 20 | call_other( clone, "add_plural", ({ "utensils", "knives" })  );
.meat_cleaver.wep_virtual_.c | 21 | call_other( clone, "set_long", "This is a butcher's implement for cutting animal carcasses into joints or pieces.  It is a large, rectangular knife and is quite heavy.\n"  );
.meat_cleaver.wep_virtual_.c | 22 | call_other( clone, "set_weight", 16  );
.meat_cleaver.wep_virtual_.c | 23 | call_other( clone, "set_length",  11  );
.meat_cleaver.wep_virtual_.c | 24 | call_other( clone, "set_width", 5  );
.meat_cleaver.wep_virtual_.c | 25 | call_other( clone, "set_material",  "steel"  );
.meat_cleaver.wep_virtual_.c | 26 | call_other( clone, "set_value", 400  );
.meat_cleaver.wep_virtual_.c | 27 | call_other( clone, "new_weapon", 750  );
.meat_cleaver.wep_virtual_.c | 28 | call_other( clone, "set_damage_chance", 5  );
.meat_cleaver.wep_virtual_.c | 29 | call_other( clone, "add_attack", "slash", 50, ({ 10, 4, 10 }), "sharp", "sharp", 0  );
.meat_cleaver.wep_virtual_.c | 30 | call_other( clone, "add_attack", "hack", 90, ({ 20, 3, 20 }), "sharp", "sharp", 0 );
.howondalandish_throwing_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.howondalandish_throwing_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.howondalandish_throwing_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.howondalandish_throwing_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/howondalandish_throwing_knife.wep#1" );
.howondalandish_throwing_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.howondalandish_throwing_knife.wep_virtual_.c | 16 | call_other( clone, "add_adjective", ({ "howondalandish", "throwing" })  );
.howondalandish_throwing_knife.wep_virtual_.c | 17 | call_other( clone, "set_short", "howondalandish throwing knife"  );
.howondalandish_throwing_knife.wep_virtual_.c | 18 | call_other( clone, "set_main_plural", "howondalandish throwing knives"  );
.howondalandish_throwing_knife.wep_virtual_.c | 19 | call_other( clone, "set_long", "From one of the more remote Howondalandish tribes, this knife "   "doesn't look throwable, much less a knife.  From a short handle, "   "spiky steel blades jut out at all angles, sure to deliver a nasty "   "shock to whoever gets hit with it.\n"  );
.howondalandish_throwing_knife.wep_virtual_.c | 20 | call_other( clone, "set_weight", 9  );
.howondalandish_throwing_knife.wep_virtual_.c | 21 | call_other( clone, "set_length", 9  );
.howondalandish_throwing_knife.wep_virtual_.c | 22 | call_other( clone, "set_width", 3  );
.howondalandish_throwing_knife.wep_virtual_.c | 23 | call_other( clone, "set_material", "steel"  );
.howondalandish_throwing_knife.wep_virtual_.c | 24 | call_other( clone, "new_weapon", 200  );
.howondalandish_throwing_knife.wep_virtual_.c | 25 | call_other( clone, "set_damage_chance", 10  );
.howondalandish_throwing_knife.wep_virtual_.c | 26 | call_other( clone, "add_attack", "stab", 60, ({ 40, 3, 30 }), "pierce", "pierce", 0  );
.howondalandish_throwing_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "slash", 60, ({ 25, 5, 30 }), "sharp", "sharp", 0  );
.howondalandish_throwing_knife.wep_virtual_.c | 28 | call_other( clone, "set_value", 7000 );
.carving_knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.carving_knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.carving_knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.carving_knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/carving_knife.wep#1" );
.carving_knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.carving_knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "carving knife"  );
.carving_knife.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "carving" })  );
.carving_knife.wep_virtual_.c | 18 | call_other( clone, "add_alias", "utensil"  );
.carving_knife.wep_virtual_.c | 19 | call_other( clone, "add_plural", "utensils"  );
.carving_knife.wep_virtual_.c | 20 | call_other( clone, "set_long", "This is a knife such as you might use to carve up your Octeday roast, and then use to substantiate your arguments with your spouse as to who should do the washing up.\n"  );
.carving_knife.wep_virtual_.c | 21 | call_other( clone, "set_weight", 9  );
.carving_knife.wep_virtual_.c | 22 | call_other( clone, "set_length", 12  );
.carving_knife.wep_virtual_.c | 23 | call_other( clone, "set_width", 2  );
.carving_knife.wep_virtual_.c | 24 | call_other( clone, "set_material", "steel"  );
.carving_knife.wep_virtual_.c | 25 | call_other( clone, "set_value", 500  );
.carving_knife.wep_virtual_.c | 26 | call_other( clone, "new_weapon", 2000  );
.carving_knife.wep_virtual_.c | 27 | call_other( clone, "add_attack", "slash", 70, ({ 10, 2, 20 }), "sharp", "sharp", 0  );
.carving_knife.wep_virtual_.c | 28 | call_other( clone, "add_attack", "stab", 40, ({ 20, 2, 60 }), "pierce", "pierce", 0 );
.silver_sickle.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.silver_sickle.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.silver_sickle.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.silver_sickle.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/silver_sickle.wep#1" );
.silver_sickle.wep_virtual_.c | 15 | call_other( clone, "set_name", "sickle"  );
.silver_sickle.wep_virtual_.c | 16 | call_other( clone, "set_short", "silver sickle"  );
.silver_sickle.wep_virtual_.c | 17 | call_other( clone, "add_adjective", "silver"  );
.silver_sickle.wep_virtual_.c | 18 | call_other( clone, "set_long", "This is a dagger with a crescent shaped blade cast from silver.\n"  );
.silver_sickle.wep_virtual_.c | 19 | call_other( clone, "set_weight", 9  );
.silver_sickle.wep_virtual_.c | 20 | call_other( clone, "set_length", 12  );
.silver_sickle.wep_virtual_.c | 21 | call_other( clone, "set_width", 8  );
.silver_sickle.wep_virtual_.c | 22 | call_other( clone, "set_material",  "silver"  );
.silver_sickle.wep_virtual_.c | 23 | call_other( clone, "set_value",  2000  );
.silver_sickle.wep_virtual_.c | 24 | call_other( clone, "new_weapon", 12800  );
.silver_sickle.wep_virtual_.c | 25 | call_other( clone, "set_damage_chance", 5  );
.silver_sickle.wep_virtual_.c | 26 | call_other( clone, "add_attack",  "slash", 75, ({ 10, 5, 15 }), "sharp", "sharp"  );
.silver_sickle.wep_virtual_.c | 27 | call_other( clone, "add_attack",  "stab", 50, ({ 10, 2, 25 }), "pierce", "pierce" );
.knife.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.knife.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.knife.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.knife.wep_virtual_.c | 14 | add_property( VIRTUAL_NAME_PROP, "/obj/weapons/knives/knife.wep#1" );
.knife.wep_virtual_.c | 15 | call_other( clone, "set_name", "knife"  );
.knife.wep_virtual_.c | 16 | call_other( clone, "set_short", "knife"  );
.knife.wep_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "medium-sized", "medium" })  );
.knife.wep_virtual_.c | 18 | call_other( clone, "set_main_plural", "knives"  );
.knife.wep_virtual_.c | 19 | call_other( clone, "set_long", "This is a medium-sized knife, the sort of thing someone might keep in a boot to ward off a would-be attacker.  You just have to hope that it's not then used to prepare your dinner.\n"  );
.knife.wep_virtual_.c | 20 | call_other( clone, "set_weight", 8  );
.knife.wep_virtual_.c | 21 | call_other( clone, "set_length", 7  );
.knife.wep_virtual_.c | 22 | call_other( clone, "set_width", 2  );
.knife.wep_virtual_.c | 23 | call_other( clone, "set_material",  "steel"  );
.knife.wep_virtual_.c | 24 | call_other( clone, "set_value", 100  );
.knife.wep_virtual_.c | 25 | call_other( clone, "new_weapon", 9000  );
.knife.wep_virtual_.c | 26 | call_other( clone, "add_attack",  "slash", 70, ({ 10, 3, 20 }), "sharp", "sharp", 0  );
.knife.wep_virtual_.c | 27 | call_other( clone, "add_attack",  "stab", 40, ({ 15, 3, 30 }), "pierce", "pierce", 0 );
base.hdr_dc.c | 2 | dest_me() { destruct( this_object() );
base.hdr_dc.c | 8 | new( class state_change );
base.hdr_dc.c | 13 | new( class state_change );
base.hdr_dc.c | 18 | new( class state_change );
base.hdr_dc.c | 28 | new( class state_change );
base.hdr_dc.c | 33 | new( class state_change );
base.hdr_dc.c | 43 | new( class state_change );
base.hdr_dc.c | 48 | new( class state_change );
base.hdr_dc.c | 58 | new( class state_change );
base.hdr_dc.c | 63 | new( class state_change );
base.hdr_dc.c | 78 | new( class state_change );
base.hdr_dc.c | 83 | new( class state_change );
base.hdr_dc.c | 94 | new( class state_change );
base.hdr_dc.c | 99 | new( class state_change );
base.hdr_dc.c | 104 | new( class state_change );
base.hdr_dc.c | 109 | new( class state_change );
base.hdr_dc.c | 114 | new( class state_change );
base.hdr_dc.c | 119 | new( class state_change );
base.hdr_dc.c | 124 | new( class state_change );
base.hdr_dc.c | 127 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 129 | new( class state_change );
base.hdr_dc.c | 132 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 134 | new( class state_change );
base.hdr_dc.c | 137 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 139 | new( class state_change );
base.hdr_dc.c | 142 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 144 | new( class state_change );
base.hdr_dc.c | 147 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 149 | new( class state_change );
base.hdr_dc.c | 152 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 154 | new( class state_change );
base.hdr_dc.c | 157 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 159 | new( class state_change );
base.hdr_dc.c | 162 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 164 | new( class state_change );
base.hdr_dc.c | 167 | add_eat_effect( "/std/effects/ingested/poison", 400 ) :) });
base.hdr_dc.c | 169 | new( class state_change );
base.hdr_dc.c | 174 | new( class state_change );
base.hdr_dc.c | 178 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
base.hdr_dc.c | 180 | new( class state_change );
base.hdr_dc.c | 184 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) / 5 ) ) :) });
base.hdr_dc.c | 186 | new( class state_change );
base.hdr_dc.c | 190 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
base.hdr_dc.c | 192 | new( class state_change );
base.hdr_dc.c | 196 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
base.hdr_dc.c | 198 | new( class state_change );
base.hdr_dc.c | 202 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
base.hdr_dc.c | 204 | new( class state_change );
base.hdr_dc.c | 208 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 1.5 ) ) :) });
base.hdr_dc.c | 210 | new( class state_change );
base.hdr_dc.c | 221 | new( class state_change );
base.hdr_dc.c | 236 | new( class state_change );
base.hdr_dc.c | 251 | new( class state_change );
base.hdr_dc.c | 267 | new( class state_change );
base.hdr_dc.c | 272 | new( class state_change );
base.hdr_dc.c | 290 | new( class state_change );
base.hdr_dc.c | 308 | new( class state_change );
base.hdr_dc.c | 322 | new( class state_change );
base.hdr_dc.c | 338 | new( class state_change );
base.hdr_dc.c | 354 | new( class state_change );
base.hdr_dc.c | 369 | new( class state_change );
base.hdr_dc.c | 386 | new( class state_change );
base.hdr_dc.c | 398 | new( class state_change );
base.hdr_dc.c | 414 | new( class state_change );
base.hdr_dc.c | 430 | new( class state_change );
base.hdr_dc.c | 447 | new( class state_change );
base.hdr_dc.c | 463 | new( class state_change );
base.hdr_dc.c | 479 | new( class state_change );
base.hdr_dc.c | 498 | new( class state_change );
base.hdr_dc.c | 514 | new( class state_change );
base.hdr_dc.c | 530 | new( class state_change );
base.hdr_dc.c | 545 | new( class state_change );
base.hdr_dc.c | 560 | new( class state_change );
base.hdr_dc.c | 574 | new( class state_change );
base.hdr_dc.c | 589 | new( class state_change );
base.hdr_dc.c | 601 | new( class state_change );
base.hdr_dc.c | 615 | new( class state_change );
base.hdr_dc.c | 629 | new( class state_change );
base.hdr_dc.c | 643 | new( class state_change );
base.hdr_dc.c | 660 | new( class state_change );
base.hdr_dc.c | 674 | new( class state_change );
base.hdr_dc.c | 688 | new( class state_change );
base.hdr_dc.c | 703 | new( class state_change );
base.hdr_dc.c | 719 | new( class state_change );
base.hdr_dc.c | 735 | new( class state_change );
base.hdr_dc.c | 751 | new( class state_change );
base.hdr_dc.c | 767 | new( class state_change );
base.hdr_dc.c | 783 | new( class state_change );
base.hdr_dc.c | 800 | new( class state_change );
base.hdr_dc.c | 817 | new( class state_change );
base.hdr_dc.c | 833 | new( class state_change );
base.hdr_dc.c | 849 | new( class state_change );
base.hdr_dc.c | 866 | new( class state_change );
base.hdr_dc.c | 882 | new( class state_change );
base.hdr_dc.c | 897 | new( class state_change );
base.hdr_dc.c | 913 | new( class state_change );
base.hdr_dc.c | 928 | new( class state_change );
base.hdr_dc.c | 946 | new( class state_change );
base.hdr_dc.c | 961 | new( class state_change );
base.hdr_dc.c | 976 | new( class state_change );
base.hdr_dc.c | 991 | new( class state_change );
base.hdr_dc.c | 1006 | new( class state_change );
base.hdr_dc.c | 1021 | new( class state_change );
base.hdr_dc.c | 1036 | new( class state_change );
base.hdr_dc.c | 1041 | new( class state_change );
base.hdr_dc.c | 1046 | new( class state_change );
base.hdr_dc.c | 1061 | new( class state_change );
base.hdr_dc.c | 1066 | new( class state_change );
base.hdr_dc.c | 1077 | new( class state_change );
base.hdr_dc.c | 1081 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
base.hdr_dc.c | 1083 | new( class state_change );
base.hdr_dc.c | 1087 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
base.hdr_dc.c | 1089 | new( class state_change );
base.hdr_dc.c | 1093 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) * 10 ) ) :) });
base.hdr_dc.c | 1095 | new( class state_change );
base.hdr_dc.c | 1099 | to_int( $3->query_skill_bonus( "covert.items.poisons" ) ) ) :) });
base.hdr_dc.c | 1101 | new( class state_change );
base.hdr_dc.c | 1107 | new( class state_change );
base.hdr_dc.c | 1113 | new( class state_change );
base.hdr_dc.c | 1119 | new( class state_change );
base.hdr_dc.c | 1130 | new( class state_change );
base.hdr_dc.c | 1142 | new( class state_change );
base.hdr_dc.c | 1157 | new( class state_change );
base.hdr_dc.c | 1173 | new( class state_change );
base.hdr_dc.c | 1189 | new( class state_change );
base.hdr_dc.c | 1206 | new( class state_change );
base.hdr_dc.c | 1215 | new( class state_change );
base.hdr_dc.c | 1227 | new( class state_change );
base.hdr_dc.c | 1240 | new( class state_change );
base.hdr_dc.c | 1253 | new( class state_change );
base.hdr_dc.c | 1266 | new( class state_change );
base.hdr_dc.c | 1281 | new( class state_change );
base.hdr_dc.c | 1296 | new( class state_change );
base.hdr_dc.c | 1309 | new( class state_change );
base.hdr_dc.c | 1322 | new( class state_change );
base.hdr_dc.c | 1327 | new( class state_change );
base.hdr_dc.c | 1342 | new( class state_change );
base.hdr_dc.c | 1356 | new( class state_change );
base.hdr_dc.c | 1370 | new( class state_change );
base.hdr_dc.c | 1384 | new( class state_change );
base.hdr_dc.c | 1397 | new( class state_change );
base.hdr_dc.c | 1412 | new( class state_change );
base.hdr_dc.c | 1430 | new( class state_change );
base.hdr_dc.c | 1443 | new( class state_change );
base.hdr_dc.c | 1456 | new( class state_change );
base.hdr_dc.c | 1469 | new( class state_change );
base.hdr_dc.c | 1482 | new( class state_change );
base.hdr_dc.c | 1494 | new( class state_change );
base.hdr_dc.c | 1507 | new( class state_change );
base.hdr_dc.c | 1519 | new( class state_change );
base.hdr_dc.c | 1532 | new( class state_change );
base.hdr_dc.c | 1545 | new( class state_change );
base.hdr_dc.c | 1557 | new( class state_change );
base.hdr_dc.c | 1571 | new( class state_change );
base.hdr_dc.c | 1583 | new( class state_change );
base.hdr_dc.c | 1596 | new( class state_change );
base.hdr_dc.c | 1610 | new( class state_change );
base.hdr_dc.c | 1626 | new( class state_change );
base.hdr_dc.c | 1641 | new( class state_change );
base.hdr_dc.c | 1658 | new( class state_change );
base.hdr_dc.c | 1672 | new( class state_change );
base.hdr_dc.c | 1686 | new( class state_change );
base.hdr_dc.c | 1691 | new( class state_change );
base.hdr_dc.c | 1702 | new( class state_change );
base.hdr_dc.c | 1713 | new( class state_change );
base.hdr_dc.c | 1720 | new( class state_change );
base.hdr_dc.c | 1728 | data_return_0();
base.hdr_dc.c | 1729 | data_return_1();
base.hdr_dc.c | 1730 | data_return_2();
base.hdr_dc.c | 1731 | data_return_3();
search.c | 10 | set_short( "primary search room" );
search.c | 11 | add_property( "determinate", "the " );
search.c | 19 | set_light( 50 );
search.c | 21 | get_keywords( ({ }) );
search.c | 24 | add_exit( word, "??", "path" );
search.c | 26 | add_exit( "exit", ENTRANCE, "door" );
search.c | 37 | add_property( "keywords", ({ "virtual", "room" }) );
search.c | 40 | add_property( "no map", 1 );
search.c | 51 | modify_exit( keyword, ({ "dest", SEARCH->find_room( ({ keyword }) ) }) );
master.c | 19 | capitalize(DOMAIN);
master.c | 25 | check_permission(euid, path, mask);
master.c | 41 | valid_read(string *path, string euid, string funct);
master.c | 44 | if ((sizeof(path) >
master.c | 53 | return (members[euid] != 0);
master.c | 66 | add_member(name);
master.c | 72 | remove_member(name);
master.c | 78 | set_project(name, pro);
master.c | 94 | save_me();
search_room.c | 9 | set_short( "uninitialised search room" );
search_room.c | 19 | add_property( "no map", 1 );
search_room.c | 23 | set_light( 50 );
search_room.c | 25 | add_exit( "exit", LEARNING +"search", "path" );
search_room.c | 36 | add_property( "keywords", ({ "room", "virtual" }) );
search_room.c | 45 | return ({ });
search_room.c | 55 | set_short( "\""+ word +"\" search room" );
search_room.c | 56 | add_property( "determinate", "the " );
search_room.c | 61 | sizeof( words ) >
search_room.c | 62 | get_keywords( words );
search_room.c | 68 | add_exit( word, "/??", "path" );
search_room.c | 74 | sizeof( search_result[ 1 ] );
search_room.c | 76 | query_short( search_result[ 1 ][ i ] ) );
search_room.c | 83 | set_long( description );
search_room.c | 96 | find_room( keywords + ({ keyword }) ) }) );
search_room.c | 99 | call_out( "check_empty", 10 );
search_room.c | 108 | dest_me();
search_room.c | 125 | return ({ SEARCH, "find_room", keywords });
search_room.c | 138 | query_quit_handler();
search_room.c | 140 | remove_from_list( thing );
functions.c | 8 | do_list();
functions.c | 9 | word();
functions.c | 21 | set_short( "room of function examples" );
functions.c | 22 | add_property( "determinate", "the " );
functions.c | 40 | set_light( 50 );
functions.c | 43 | query_functions();
functions.c | 45 | add_exit( word, "??", "path" );
functions.c | 46 | modify_exit( word, ({ "obvious", 0 }) );
functions.c | 48 | add_exit( "exit", ENTRANCE, "door" );
functions.c | 58 | add_property( "keywords", ({ }) );
functions.c | 63 | init();
functions.c | 64 | add_command( "list","functions");
functions.c | 67 | add_command(cmd,"");
functions.c | 75 | implode( functions, "\n" ) ) );
functions.c | 88 | modify_exit( word, ({ "dest", SEARCH->find_function_room( word ) }) );
function_room.c | 9 | set_short( "uninitialised search room for functions" );
function_room.c | 19 | add_property( "no map", 1 );
function_room.c | 23 | set_light( 50 );
function_room.c | 25 | add_exit( "exit", PATH +"functions", "path" );
function_room.c | 36 | add_property( "keywords", ({ "room", "virtual" }) );
function_room.c | 46 | set_short( "\""+ word +"\" search room" );
function_room.c | 47 | add_property( "determinate", "the " );
function_room.c | 56 | query_short( exit_room ) );
function_room.c | 57 | add_exit( exit_letter, exit_room, "path" );
function_room.c | 62 | set_long( description );
function_room.c | 71 | dest_me();
function_room.c | 88 | return ({ SEARCH, "find_function_room", function_chosen });
function_room.c | 99 | call_out( "check_empty", 10 );
function_room.c | 102 | query_quit_handler();
function_room.c | 104 | remove_from_list( thing );
main.c | 13 | set_short( "entrance to learning" );
main.c | 14 | add_property( "determinate", "the " );
main.c | 41 | set_light( 50 );
main.c | 45 | set_co_ord( ({ 30, 0, 40 }) );
main.c | 52 | add_exit( "search", PATH + "search", "door" );
main.c | 53 | add_exit( "functions", PATH + "functions", "door" );
main.c | 54 | add_exit( "common", "/w/common", "door" );
main.c | 57 | add_exit( "learning", ENTRANCE, "door" );
main.c | 69 | add_property( "keywords", ({ "room" }) );
common.c | 14 | do_claim(int);
common.c | 15 | do_remove(int);
common.c | 16 | do_request(string, string);
common.c | 21 | set_light( 100 );
common.c | 22 | set_short( "somewhat boring commonroom of the learning domain" );
common.c | 23 | add_property( "determinate", "the " );
common.c | 49 | add_exit( "entrance", PATH +"main", "path" );
common.c | 50 | add_exit( "drum", CONFIG_START_LOCATION, "path" );
common.c | 56 | add_extra_look( this_object() );
common.c | 60 | add_property( "keywords", ({ "room", "add_item", "action" }) );
common.c | 62 | clone_object( "/obj/misc/board" );
common.c | 63 | set_datafile( DOMAIN );
common.c | 64 | move( this_object() );
common.c | 68 | init();
common.c | 69 | add_command( "show", "list" );
common.c | 70 | add_command( "claim", "<number>", (:do_claim( $4[0] ):) );
common.c | 72 | do_request( $4[0], $4[1] ):));
common.c | 73 | add_command( "remove", "<number>", (:do_remove( $4[0] ):) );
common.c | 77 | write( HANDLER->query_list() );
common.c | 83 | add_succeeded_mess("$N $V a request.\n", ({}));
common.c | 85 | notify_fail( "Illegal request number.\n" );
common.c | 92 | add_succeeded_mess("$N $V a request.\n", ({}));
common.c | 94 | notify_fail( "You can't remove that request.\n" );
common.c | 103 | write( "You request some documentation.\n");
common.c | 104 | say( this_player()->the_short() +" requests some documentation.\n");
common.c | 110 | write( "You request some example.\n");
common.c | 111 | say( this_player()->the_short() +" requests some example.\n");
common.c | 135 | this_player() });
common.c | 138 | this_player()->add_extra_look( this_object() );
common.c | 147 | filter_array( chairs, (: $1 != 0 :) );
common.c | 150 | environment( $1 ) == this_object() :) );
common.c | 178 | remove_extra_look( this_object() );
void_arg2.c | 1 | bing(void);
var_to_nonvar.c | 5 | bing( ({ })...);
no_such_class.c | 2 | new(class bing);
bad_foreach.c | 2 | foreach (x in ({})) ;
make_person.c | 16 | set_short( "room telling about adding NPC's" );
make_person.c | 17 | add_property( "determinate", "the " );
make_person.c | 34 | set_light( 60 );
make_person.c | 36 | add_exit( "exit", ENTRANCE, "path" );
make_person.c | 48 | add_property( "keywords", ({ "npc", "clone", "permanent", "make" }) );
make_person.c | 61 | call_out( "make_demon", 5 );
make_person.c | 71 | clone_object( "/obj/monster" );
make_person.c | 72 | set_name( "imp" );
make_person.c | 73 | set_short( "small red imp" );
make_person.c | 74 | add_adjective( ({ "small", "red" }) );
make_person.c | 77 | set_base_weight( 10 );
make_person.c | 78 | set_height( 17 );
make_person.c | 79 | set_race( "imp" );
make_person.c | 80 | set_level( 1 );
make_person.c | 87 | move( this_object(), "$N materialize$s with a small *POP*." );
grassyfield.c | 7 | set_terrain("tutorial_grassy_field");
grassyfield.c | 8 | set_short("grassy field");
grassyfield.c | 9 | set_long("This field is covered with nicely mowed grass.\n");
grassyfield.c | 10 | add_item("grass", "It's grass.  There isn't much to say about it.");
foyer.c | 10 | set_short( "foyer of the terrain school" );
foyer.c | 11 | add_property( "determinate", "the " );
foyer.c | 69 | set_light( 60 );
foyer.c | 71 | add_exit( "grassyfield", PATH "grassystep", "hidden" );
foyer.c | 72 | add_exit( "desert", PATH "sandtent", "hidden" );
foyer.c | 73 | add_exit( "mountaintop", PATH "mountaincabin", "hidden" );
foyer.c | 74 | add_exit( "back", LEARNING +"search", "path" );
foyer.c | 75 | add_exit( "exit", ENTRANCE, "path" );
foyer.c | 92 | if (sign) sign->set_get();
foyer.c | 101 | load_object( CHARS "terrain_teacher" );
foyer.c | 103 | pupil_arrived( this_object() );
mountaintree.c | 9 | set_room_size( 20 );
mountaintree.c | 10 | set_terrain( "tutorial_mountain" );
mountaintree.c | 11 | set_short( "tree in the mountains" );
mountaintree.c | 14 | add_extra_look( this_object() );
mountaintree.c | 16 | add_property( "climate", ({ -40, 50, 40 }) );
mountainsnows.c | 7 | set_terrain( "tutorial_mountain" );
mountainsnows.c | 8 | set_short( "the snowy wastes" );
mountainsnows.c | 9 | add_property( "determinate", "" );
mountainsnows.c | 12 | add_item( "tree", "No, I said there _weren't_ any trees." );
mountainsnows.c | 14 | add_property( "climate", ({ -40, 50, 40 }) );
sandoasis.c | 7 | set_terrain( "tutorial_desert" );
sandoasis.c | 8 | set_short( "desert oasis" );
sandoasis.c | 18 | add_property( "climate", ({ 10, -100, -100 }) );
sanddunes.c | 7 | set_terrain( "tutorial_desert" );
sanddunes.c | 8 | set_short( "sandy wasteland" );
sanddunes.c | 14 | add_property( "climate", ({ 40, -100, -100 }) );
mountainbedroom.c | 7 | set_terrain( "tutorial_mountain" );
mountainbedroom.c | 8 | set_short( "mountain cabin attic" );
mountainbedroom.c | 19 | set_light( 50 );
grassystep.c | 7 | set_terrain( "tutorial_grassy_field" );
grassystep.c | 8 | set_short( "doorstep");
grassystep.c | 11 | add_item( "grass", "It's grass.  There isn't much to say about it." );
grassystep.c | 15 | add_exit( "cottage", PATH "foyer", "corridor" );
sandtent.c | 7 | set_terrain( "tutorial_desert" );
sandtent.c | 8 | set_short( "outside tent" );
sandtent.c | 18 | add_exit( "tent", PATH "foyer", "corridor" );
sandtent.c | 20 | add_property( "climate", ({ 40, -100, -100 }) );
mountaincabin.c | 7 | set_terrain( "tutorial_mountain" );
mountaincabin.c | 8 | set_short( "rustic mountain cabin" );
mountaincabin.c | 25 | set_light( 50 );
mountaincabin.c | 34 | add_exit( "down", PATH "foyer", "stair" );
func_arguments.c | 6 | set_short( "'add_item' room telling about the arguments of the function" );
func_arguments.c | 7 | set_light( 100 );
func_arguments.c | 8 | add_property( "determinate", "the " );
func_arguments.c | 42 | add_exit( "east", PATH +"args_integer", "path" );
func_arguments.c | 43 | add_exit( "west", PATH +"verb_patterns", "path" );
func_arguments.c | 44 | add_exit( "start", MAIN, "path" );
func_arguments.c | 45 | add_exit( "exit", LEARNING +"search", "path" );
args_string.c | 6 | set_short( "'add_item' room telling about getting string arguments" );
args_string.c | 7 | set_light( 100 );
args_string.c | 8 | add_property( "determinate", "the " );
args_string.c | 20 | add_exit( "east", PATH +"args_object", "path");
args_string.c | 21 | add_exit( "west", PATH +"args_integer", "path");
args_string.c | 22 | add_exit( "start", MAIN, "path" );
args_string.c | 23 | add_exit( "exit", LEARNING +"search", "path" );
args_string.c | 38 | this_player()->add_succeeded_mess( previous_object(), mess, ({ }) );
action_verbs.c | 6 | set_short( "'add_item' room telling about making verbs do stuff" );
action_verbs.c | 7 | set_light(100);
action_verbs.c | 18 | this_object(), "do_touch" }) }) );
action_verbs.c | 35 | add_exit( "east", PATH +"verb_failure", "path" );
action_verbs.c | 36 | add_exit( "west", PATH +"many_verbs", "path" );
action_verbs.c | 37 | add_exit( "start", MAIN, "path" );
action_verbs.c | 38 | add_exit( "exit", LEARNING +"search", "path" );
action_verbs.c | 45 | tell_object(this_player(),...))\n" );
main.c | 6 | set_short( "primary room for \"add_item\"" );
main.c | 7 | add_property( "determinate", "the " );
main.c | 8 | set_light( 100 );
main.c | 12 | add_exit( "start", PATH +"intro", "path" );
main.c | 13 | add_exit( "failure", PATH +"verb_failure", "path" );
main.c | 14 | add_exit( "success", PATH +"verb_success", "path" );
main.c | 15 | add_exit( "patterns", PATH +"verb_patterns", "path" );
main.c | 16 | add_exit( "arguments", PATH +"func_arguments", "path" );
main.c | 17 | add_exit( "args_int", PATH +"args_integer", "path" );
main.c | 18 | add_exit( "args_string", PATH +"args_string", "path" );
main.c | 19 | add_exit( "args_object", PATH +"args_object", "path" );
main.c | 20 | add_exit( "helper", PATH +"item_helper", "path" );
main.c | 21 | add_exit( "exit", LEARNING + "search", "path" );
main.c | 25 | add_property( "commented functions", ({ "add_item" }) );
main.c | 26 | add_property( "keywords", ({ "room", "add_item", "action", "command" }) );
verb_patterns.c | 6 | set_short("add_item room #9, verb patterns ");
verb_patterns.c | 7 | set_light(100);
verb_patterns.c | 62 | add_exit( "east", PATH +"func_arguments", "path");
verb_patterns.c | 63 | add_exit( "west", PATH +"verb_success", "path");
verb_patterns.c | 64 | add_exit( "start", MAIN, "path" );
verb_patterns.c | 65 | add_exit( "exit", LEARNING +"search", "path" );
verbs.c | 8 | set_short("add_item room #3, verbs ");
verbs.c | 9 | set_light(100);
verbs.c | 56 | add_exit( "east", PATH +"many_verbs", "path" );
verbs.c | 57 | add_exit( "west", PATH +"many_names", "path" );
verbs.c | 58 | add_exit( "start", MAIN, "path" );
verbs.c | 59 | add_exit( "exit", LEARNING +"search", "path" );
many_verbs.c | 8 | set_short("add_item room #4, many verbs ");
many_verbs.c | 9 | set_light(100);
many_verbs.c | 39 | add_exit( "east", PATH +"action_verbs", "path");
many_verbs.c | 40 | add_exit( "west", PATH +"verbs", "path");
many_verbs.c | 41 | add_exit( "start", MAIN, "path" );
many_verbs.c | 42 | add_exit( "exit", LEARNING +"search", "path" );
item_helper.c | 11 | set_short("add_item room #15, Testing and creating a form ");
item_helper.c | 12 | set_light(100);
item_helper.c | 28 | add_exit("west",PATH+"item_conflicts","path");
item_helper.c | 29 | add_exit("north",MAIN,"path" );
item_helper.c | 99 | all_inventory(this_object());
item_helper.c | 100 | move("/room/void");
item_helper.c | 101 | move(this_object());
item_helper.c | 102 | this_player()->move(this_object());
item_helper.c | 112 | printf("\nThe Verb:(A1):  %O\nThe Objects(A2):\n%O\nDirect Object(A3):  %O\nIndirect Object(A4):  %O\nReturn Array(A5):\n%O\nPattern(A6):  %O\n\n",a1,a2,a3,a4,a5,a6);
item_helper.c | 114 | tell_object(this_player(),"Hope that worked...\n");
args_object.c | 9 | set_short( "'add_item' room telling about getting the object as argument" );
args_object.c | 10 | set_light(100);
args_object.c | 11 | add_property( "determinate", "the " );
args_object.c | 24 | add_exit( "east", PATH +"item_conflicts", "path" );
args_object.c | 25 | add_exit( "west", PATH +"args_string", "path" );
args_object.c | 26 | add_exit( "start", MAIN, "path" );
args_object.c | 27 | add_exit( "exit", LEARNING +"search", "path" );
args_object.c | 45 | write( "wrong key\n" );
args_object.c | 51 | this_player()->add_succeeded( ob );
args_object.c | 55 | write( "You succeeded!\n" );
args_object.c | 60 | call_out( "check_key", 2 );
args_object.c | 65 | clone_object( "std/object" );
args_object.c | 66 | set_name( "key" );
args_object.c | 67 | set_short( "Mithal's key" );
args_object.c | 68 | add_property( "Mithal", 1 );
verb_failure.c | 8 | set_short("add_item room #7, verb failure messages ");
verb_failure.c | 9 | set_light(100);
verb_failure.c | 47 | this_object(), "do_touch" }) }));
verb_failure.c | 49 | add_exit( "east", PATH +"verb_success", "path" );
verb_failure.c | 50 | add_exit( "west", PATH +"action_verbs", "path" );
verb_failure.c | 51 | add_exit( "start", MAIN, "path" );
verb_failure.c | 52 | add_exit( "exit", LEARNING +"search", "path" );
args_char.c | 8 | set_short("add_item room #12, Getting character arguments ");
args_char.c | 9 | set_light(100);
args_char.c | 55 | add_exit("east",ROOM+"args_object","door");
args_char.c | 56 | add_exit("west",ROOM+"args_integer","door");
args_char.c | 57 | add_exit("north",MAIN,"door" );
args_integer.c | 6 | set_short( "'add_item' room telling about getting integer arguments" );
args_integer.c | 7 | set_light( 100 );
args_integer.c | 8 | add_property( "determinate", "the " );
args_integer.c | 23 | add_exit( "east", PATH +"args_string", "path");
args_integer.c | 24 | add_exit( "west", PATH +"func_arguments", "path");
args_integer.c | 25 | add_exit( "start", MAIN, "path" );
args_integer.c | 26 | add_exit( "exit", LEARNING +"search", "path" );
verb_success.c | 8 | set_short("add_item room #8, verb success messages ");
verb_success.c | 9 | set_light(100);
verb_success.c | 55 | this_object(), "do_touch" }) }));
verb_success.c | 57 | add_exit("west",PATH+"verb_failure","path");
verb_success.c | 58 | add_exit("east",PATH+"verb_patterns","path");
verb_success.c | 59 | add_exit( "start", MAIN, "path" );
verb_success.c | 60 | add_exit( "exit", LEARNING +"search", "path" );
changing_descs.c | 8 | set_short("add_item room #5b, item descriptions that change with time");
changing_descs.c | 9 | set_light(100);
changing_descs.c | 32 | file_name(this_object())+\"&&\\n\");
changing_descs.c | 42 | file_name(this_object())+"@@\n");
changing_descs.c | 45 | add_exit("east",PATH+"action_verbs2","path");
changing_descs.c | 46 | add_exit("west",PATH+"action_verbs","path");
changing_descs.c | 47 | add_exit( "start", MAIN, "path" );
changing_descs.c | 48 | add_exit( "exit", LEARNING +"search", "path" );
action_verbs2.c | 8 | set_short("add_item room #6, making verbs do stuff, better version ");
action_verbs2.c | 9 | set_light(100);
action_verbs2.c | 26 | this_object(), \"do_touch\" }) }) );
action_verbs2.c | 55 | this_object(), \"always_fail\" }) }) );
action_verbs2.c | 72 | add_exit("east",ROOM+"verb_failure","door");
action_verbs2.c | 73 | add_exit("west",ROOM+"changing_descs","door");
action_verbs2.c | 74 | add_exit("north",MAIN,"door" );
action_verbs2.c | 83 | tell_object(this_player(),...)) \n");
item_conflicts.c | 9 | set_short( "'add_item' room telling about resolving item conflicts" );
item_conflicts.c | 10 | set_light( 100 );
item_conflicts.c | 41 | add_exit( "east", PATH + "item_helper", "path" );
item_conflicts.c | 42 | add_exit( "west", PATH + "args_object", "path" );
item_conflicts.c | 43 | add_exit( "start", MAIN, "path" );
item_conflicts.c | 44 | add_exit( "exit", LEARNING +"search", "path" );
item_conflicts.c | 80 | do_success_thing( 1, 0, no );
item_conflicts.c | 84 | tell_object( this_player(), "You throw coins!\n");
item_conflicts.c | 101 | do_success_thing( 0, 1, no );
item_conflicts.c | 104 | tell_object( this_player(),  "*giggle*\n");
intro.c | 6 | set_short( "'add_item' room telling about simple items" );
intro.c | 7 | set_light( 100 );
intro.c | 8 | add_property( "determinate", "the " );
intro.c | 18 | add_item( "noun", "Nouns should have descriptions." );
intro.c | 19 | add_item( "description", "Descriptions should be witty wherever reasonable." );
intro.c | 20 | add_item( "discworld", "The mud you are learning to code for." );
intro.c | 21 | add_item( "information", "See the note." );
intro.c | 26 | add_item( \"room\", \"It is a big room.\" );
intro.c | 32 | add_item( "room", "It is a big room." );
intro.c | 34 | add_exit( "east", PATH +"many_names", "path" );
intro.c | 35 | add_exit( "start", MAIN, "path" );
intro.c | 36 | add_exit( "exit", LEARNING +"search", "path" );
many_names.c | 6 | set_short( "'add_item' room telling about simple items with many names" );
many_names.c | 7 | set_light( 100 );
many_names.c | 18 | add_item( \"candle\", \"Very nice.\" );
many_names.c | 42 | add_item( "candle", "Very nice." );
many_names.c | 44 | add_item( ({ "corridor", "long hallway" }), "It is long." );
many_names.c | 45 | add_item( "chair", "This chair looks about ready to fall over", 1 );
many_names.c | 46 | add_item( "chairs", "The chairs look ready to fall over", 1 );
many_names.c | 48 | add_item( "item", "You don't see any since noone coded one yet!" );
many_names.c | 49 | add_item( "reference", "Like one that you would find in a theusaures." );
many_names.c | 50 | add_item( "room", "It is a big room." );
many_names.c | 52 | add_exit( "east", PATH +"verbs", "path");
many_names.c | 53 | add_exit( "west", PATH +"intro", "path");
many_names.c | 54 | add_exit( "start", MAIN, "path" );
many_names.c | 55 | add_exit( "exit", LEARNING +"search", "path" );
sitroom4.c | 18 | set_short("Exclusion and random words situations example room");
sitroom4.c | 19 | set_light(100);
sitroom4.c | 32 | add_exit( "back", LEARNING +"search", "path" );
sitroom4.c | 33 | add_exit( "next", SIT+"sitroom5", "path" );
sitroom4.c | 34 | add_exit( "exit", ENTRANCE, "path" );
sitroom4.c | 36 | add_item( "pier", "There is small pier here." );
sitroom4.c | 89 | automate_situation( "boat2", 61, WHEN_ANY_TIME, 300, "boat" );
sitroom4.c | 91 | automate_situation( "boat1", 50, WHEN_ANY_TIME, 200, "boat" );
sitroom1.c | 18 | set_short("Basic situation example room");
sitroom1.c | 19 | set_light(100);
sitroom1.c | 26 | add_exit( "next", SIT+"sitroom2", "path" );
sitroom1.c | 27 | add_exit( "back", LEARNING +"search", "path" );
sitroom1.c | 28 | add_exit( "exit", ENTRANCE, "path" );
sitroom1.c | 30 | add_item( "button", "There is a button on the wall you might \"press\".");
sitroom1.c | 53 | tell_object(this_player(),"You press the button.\n");
sitroom1.c | 57 | room ( look ) and some chats.%^RESET%^\n");
sitroom1.c | 60 | change_situation( "frog", 60 );
sitroom1.c | 69 | this_player()->add_command( "press", this_object(), "button" );
sitroom1.c | 70 | init();
sitroom2.c | 18 | set_short("Combination of situations example room");
sitroom2.c | 19 | set_light(40);
sitroom2.c | 27 | add_exit( "next", SIT+"sitroom3", "path" );
sitroom2.c | 28 | add_exit( "back", LEARNING +"search", "path" );
sitroom2.c | 29 | add_exit( "exit", ENTRANCE, "path" );
sitroom2.c | 31 | add_item( "button", "There is a button on the wall you might \"press\".");
sitroom2.c | 33 | add_item( "house", "There are old wooden houses here.");
sitroom2.c | 74 | tell_object(this_player(),"You press the button.\n");
sitroom2.c | 85 | change_situation( ({ "argue,house", "murder,house" }), ({ 80, 40 }) );
sitroom2.c | 94 | this_player()->add_command( "press", this_object(), "button" );
sitroom2.c | 95 | init();
sitroom5.c | 18 | set_short("Situation with a background state example room");
sitroom5.c | 19 | set_light(100);
sitroom5.c | 31 | add_exit( "back", LEARNING +"search", "path" );
sitroom5.c | 32 | add_exit( "exit", ENTRANCE, "path" );
sitroom3.c | 20 | set_short("Automated situations (with function pointers) example room");
sitroom3.c | 21 | set_light(40);
sitroom3.c | 30 | add_exit( "next", SIT+"sitroom4", "path" );
sitroom3.c | 31 | add_exit( "back", LEARNING +"search", "path" );
sitroom3.c | 32 | add_exit( "exit", ENTRANCE, "path" );
sitroom3.c | 34 | add_item( "window", "There is window up high with maroon curtains." );
sitroom3.c | 35 | add_item( "curtain", "That is all you can see, sorry." );
sitroom3.c | 64 | add_situation( "pause", new(class situation) );
sitroom3.c | 84 | the_short()+" races off to kill something.") :), 5, warrior );
sitroom3.c | 86 | clone_object( "/d/am/chars/am_warrior_human" );
sitroom3.c | 89 | query_objective()+"self.");
am_poor_beggar.c | 28 | set_gender( gender );
am_poor_beggar.c | 30 | query_objective() +" some money.\n" );
am_poor_beggar.c | 36 | set_name("beggar");
am_poor_beggar.c | 37 | set_short( "poor beggar" );
am_poor_beggar.c | 38 | set_main_plural( "poor beggars" );
am_poor_beggar.c | 39 | add_adjective("poor");
am_poor_beggar.c | 40 | add_alias("beggar");
am_poor_beggar.c | 41 | set_race("human");
am_poor_beggar.c | 42 | set_level( 3 + random( 10 ) );
am_poor_beggar.c | 43 | set_wimpy( 80 );
am_poor_beggar.c | 44 | set_al( HOSPITAL->pick_al() / 10 );
am_poor_beggar.c | 45 | fix_gender(1+random(2));
am_poor_beggar.c | 46 | add_move_zone("docks");
am_poor_beggar.c | 47 | add_move_zone("underdocks");
am_poor_beggar.c | 48 | random( 300 );
am_poor_beggar.c | 49 | adjust_money( start_money, "Ankh-Morpork pence" );
am_poor_beggar.c | 51 | initial_chats();
am_poor_beggar.c | 53 | add_effect( "/std/effects/npc/gossip", 5 );
am_poor_beggar.c | 54 | add_effect( "/std/effects/npc/given", ({ this_object(), "given_thing" }));
am_poor_beggar.c | 71 | environment()->query_menu_items();
am_poor_beggar.c | 78 | this_object(), "at_pub" }), 20 }) );
am_poor_beggar.c | 82 | this_object(), "done_drinking" }) );
am_poor_beggar.c | 91 | query_gender()==3-($2->query_gender()) :), this_object() );
am_poor_beggar.c | 100 | random(sizeof(things))]->the_short() ));
am_poor_beggar.c | 107 | random(5)] );
am_poor_beggar.c | 123 | call_out( function() { this_object()->initial_chats();
am_poor_beggar.c | 125 | this_object(), "done_everything" }), 5 }) );
am_poor_beggar.c | 126 | random(300)+300 );
am_poor_beggar.c | 135 | if(ob->query_value_in("Ankh-Morpork") >
am_poor_beggar.c | 136 | this_player()->adjust_al( -5 );
am_poor_beggar.c | 139 | add_effect( "/std/effects/npc/no_follow", 0 );
am_poor_beggar.c | 142 | this_object(), "at_pub" }), 20 }) );
am_poor_beggar.c | 149 | query_name());
am_poor_beggar.c | 154 | file_name(environment());
am_poor_beggar.c | 155 | this_player()->adjust_al( -5 );
am_poor_beggar.c | 157 | file_name(environment());
am_poor_beggar.c | 159 | a_short());
am_poor_beggar.c | 160 | init_command("womble");
am_poor_beggar.c | 162 | add_effect( "/std/effects/npc/no_follow", 0 );
am_poor_beggar.c | 169 | this_object(), "at_pub" }), 20 }) );
am_poor_beggar.c | 174 | call_out( (: do_command(":looks around nervously.") :), 2 );
am_poor_beggar.c | 175 | call_out( (: do_command("get coins from corpse") :), 5+random(10) );
crowd_merge_shadow.c | 15 | effects_matching("npc.crowd.merge");
crowd_merge_shadow.c | 16 | delete_effect(effs[0]);
crowd_merge_shadow.c | 20 | tell_creator("shaggy","hmm: %O %O\n",player,player->query_attacker_list());
crowd_merge_shadow.c | 24 | call_out( "crowd_merge", 60 );
crowd_merge_shadow.c | 33 | call_out( "crowd_merge", 60 );
crowd_merge_shadow.c | 40 | merge_crowd_member( player );
crowd_merge_shadow.c | 45 | this_object(), "crowd_merge" }), 1 }) );
crowd_merge_shadow.c | 49 | tell_creator("shaggy","%O attacked by %O\n",player,thing);
crowd_merge_shadow.c | 51 | attack_by( thing );
crowd_merge_shadow.c | 60 | if ((arg())[0]) ((arg())[0])->crowd_member_died();
crowd_merge_shadow.c | 61 | do_death( thing );
am_crippled_beggar.c | 28 | set_gender( gender );
am_crippled_beggar.c | 37 | set_name("beggar");
am_crippled_beggar.c | 38 | set_short( "crippled beggar" );
am_crippled_beggar.c | 39 | set_main_plural( "crippled beggars" );
am_crippled_beggar.c | 40 | add_adjective("crippled");
am_crippled_beggar.c | 41 | add_alias("beggar");
am_crippled_beggar.c | 42 | set_race("human");
am_crippled_beggar.c | 43 | set_level( 3 + random( 10 ) );
am_crippled_beggar.c | 44 | set_wimpy( 80 );
am_crippled_beggar.c | 45 | set_al( HOSPITAL->pick_al() / 10 );
am_crippled_beggar.c | 46 | fix_gender(1+random(2));
am_crippled_beggar.c | 47 | add_move_zone("docks");
am_crippled_beggar.c | 48 | add_move_zone("underdocks");
am_crippled_beggar.c | 49 | random( 300 );
am_crippled_beggar.c | 50 | adjust_money( start_money, "Ankh-Morpork pence" );
am_crippled_beggar.c | 52 | initial_chats();
am_crippled_beggar.c | 54 | add_effect( "/std/effects/npc/gossip", 5 );
am_crippled_beggar.c | 55 | add_effect( "/std/effects/npc/given", ({ this_object(), "given_thing" }));
am_crippled_beggar.c | 72 | environment()->query_menu_items();
am_crippled_beggar.c | 79 | this_object(), "at_pub" }), 20 }) );
am_crippled_beggar.c | 83 | this_object(), "done_drinking" }) );
am_crippled_beggar.c | 92 | query_gender()==3-($2->query_gender()) :), this_object() );
am_crippled_beggar.c | 101 | random(sizeof(things))]->the_short() ));
am_crippled_beggar.c | 108 | random(5)] );
am_crippled_beggar.c | 124 | call_out( function() { this_object()->initial_chats();
am_crippled_beggar.c | 126 | this_object(), "done_everything" }), 5 }) );
am_crippled_beggar.c | 127 | random(300)+300 );
am_crippled_beggar.c | 136 | if(ob->query_value_in("Ankh-Morpork") >
am_crippled_beggar.c | 137 | this_player()->adjust_al( -5 );
am_crippled_beggar.c | 140 | add_effect( "/std/effects/npc/no_follow", 0 );
am_crippled_beggar.c | 143 | this_object(), "at_pub" }), 20 }) );
am_crippled_beggar.c | 150 | query_name());
am_crippled_beggar.c | 155 | file_name(environment());
am_crippled_beggar.c | 156 | this_player()->adjust_al( -5 );
am_crippled_beggar.c | 158 | file_name(environment());
am_crippled_beggar.c | 160 | a_short());
am_crippled_beggar.c | 161 | init_command("womble");
am_crippled_beggar.c | 163 | add_effect( "/std/effects/npc/no_follow", 0 );
am_crippled_beggar.c | 170 | this_object(), "at_pub" }), 20 }) );
am_crippled_beggar.c | 175 | call_out( (: do_command(":looks around nervously.") :), 2 );
am_crippled_beggar.c | 176 | call_out( (: do_command("get coins from corpse") :), 5+random(10) );
am_diseased_beggar.c | 28 | set_gender( gender );
am_diseased_beggar.c | 37 | set_name("beggar");
am_diseased_beggar.c | 38 | set_short( "diseased beggar" );
am_diseased_beggar.c | 39 | set_main_plural( "diseased beggars" );
am_diseased_beggar.c | 40 | add_adjective("diseased");
am_diseased_beggar.c | 41 | add_alias("beggar");
am_diseased_beggar.c | 42 | set_race("human");
am_diseased_beggar.c | 43 | set_level( 3 + random( 10 ) );
am_diseased_beggar.c | 44 | set_wimpy( 80 );
am_diseased_beggar.c | 45 | set_al( HOSPITAL->pick_al() / 10 );
am_diseased_beggar.c | 46 | fix_gender(1+random(2));
am_diseased_beggar.c | 47 | add_move_zone("docks");
am_diseased_beggar.c | 48 | add_move_zone("underdocks");
am_diseased_beggar.c | 49 | random( 300 );
am_diseased_beggar.c | 50 | adjust_money( start_money, "Ankh-Morpork pence" );
am_diseased_beggar.c | 52 | initial_chats();
am_diseased_beggar.c | 54 | add_effect( "/std/effects/npc/gossip", 5 );
am_diseased_beggar.c | 55 | add_effect( "/std/effects/npc/given", ({ this_object(), "given_thing" }));
am_diseased_beggar.c | 72 | environment()->query_menu_items();
am_diseased_beggar.c | 79 | this_object(), "at_pub" }), 20 }) );
am_diseased_beggar.c | 83 | this_object(), "done_drinking" }) );
am_diseased_beggar.c | 92 | query_gender()==3-($2->query_gender()) :), this_object() );
am_diseased_beggar.c | 101 | random(sizeof(things))]->the_short() ));
am_diseased_beggar.c | 108 | random(5)] );
am_diseased_beggar.c | 124 | call_out( function() { this_object()->initial_chats();
am_diseased_beggar.c | 126 | this_object(), "done_everything" }), 5 }) );
am_diseased_beggar.c | 127 | random(300)+300 );
am_diseased_beggar.c | 136 | if(ob->query_value_in("Ankh-Morpork") >
am_diseased_beggar.c | 137 | this_player()->adjust_al( -5 );
am_diseased_beggar.c | 140 | add_effect( "/std/effects/npc/no_follow", 0 );
am_diseased_beggar.c | 143 | this_object(), "at_pub" }), 20 }) );
am_diseased_beggar.c | 150 | query_name());
am_diseased_beggar.c | 155 | file_name(environment());
am_diseased_beggar.c | 156 | this_player()->adjust_al( -5 );
am_diseased_beggar.c | 158 | file_name(environment());
am_diseased_beggar.c | 160 | a_short());
am_diseased_beggar.c | 161 | init_command("womble");
am_diseased_beggar.c | 163 | add_effect( "/std/effects/npc/no_follow", 0 );
am_diseased_beggar.c | 170 | this_object(), "at_pub" }), 20 }) );
am_diseased_beggar.c | 175 | call_out( (: do_command(":looks around nervously.") :), 2 );
am_diseased_beggar.c | 176 | call_out( (: do_command("get coins from corpse") :), 5+random(10) );
crowd_merge_effect.c | 32 | call_out( (: $1->crowd_merge() :), 5, player );
crowd.c | 37 | query_store() { return ({ store, cnt });
crowd.c | 70 | query_crowd() { return ({ selection, crowd });
crowd.c | 82 | replace( long, ({ "$POSS$","her","$OBJ$","her","$PRO$","She" }) );
crowd.c | 85 | replace( long, ({ "$POSS$","his","$OBJ$","him","$PRO$","He" }) );
crowd.c | 93 | tell_creator("shaggy","flags: %O %O %O %O %O %O %O %O %O %O\n",word,dark,lookflag,lastmatch,query_verb(),sizeof(crowd),previous_object(), previous_object(1), previous_object(2), previous_object(3));
crowd.c | 96 | foreach (i in crowd) ret += include_gender( (members[i>>2])->long, i&3 );
crowd.c | 101 | include_gender( (members[i>>2])->long, i&3 );
crowd.c | 106 | include_gender( (members[i>>2])->long, i&3 );
crowd.c | 111 | include_gender( members[i>>2]->long, i&3 );
crowd.c | 119 | file_name(previous_object(1));
crowd.c | 121 | tell_creator("shaggy","flags: %O %O %O %O %O %O %O\n",lookflag,lastmatch,query_verb(),previous_object(), previous_object(1), previous_object(2), previous_object(3));
crowd.c | 144 | tell_creator("shaggy",ret+"\n");
crowd.c | 145 | printf(ret+"\n");
crowd.c | 152 | tell_creator("shaggy","It called the_short! Arg! %O %O \n",previous_object(),previous_object(1),previous_object(2));
crowd.c | 161 | tell_creator("shaggy","It called one_short! Arg! %O %O \n",previous_object(),previous_object(1),previous_object(2));
crowd.c | 168 | tell_creator("shaggy","It called poss_short! Arg! %O %O \n",previous_object(),previous_object(1),previous_object(2));
crowd.c | 169 | a_short();
crowd.c | 173 | tell_creator("shaggy","It called short! Arg! %O %O \n",previous_object(),previous_object(1),previous_object(2));
crowd.c | 174 | tell_creator("shaggy","i_member: %O %O\n",i_member,(members[crowd[i_member]>>2])->short);
crowd.c | 187 | create();
crowd.c | 190 | set_name("beggar");
crowd.c | 191 | set_short("crowd of crowd.");
crowd.c | 192 | set_long("This is a crowd of people.");
crowd.c | 193 | enable_commands();
crowd.c | 196 | sizeof(members);
crowd.c | 198 | explode(p->short," ");
crowd.c | 200 | pluralize(tmp[<1]) });
crowd.c | 204 | sizeof(p->original_number);
crowd.c | 207 | shuffle(shuffle(crowd));
crowd.c | 208 | sizeof(crowd);
crowd.c | 209 | sizeof(crowd);
crowd.c | 218 | pluralize(names[0]) });
crowd.c | 231 | if (!n_alive) dest_me();
crowd.c | 235 | tell_creator("shaggy","%O is returning to the fold (%O)\n", member, this_object());
crowd.c | 236 | tell_room(environment(),"%^YELLOW%^"+sprintf("%O reabsorbed into %O", member, this_object())+"%^RESET%^\n");
crowd.c | 240 | sizeof(members);
crowd.c | 245 | crowd_number() });
crowd.c | 249 | dest_me();
crowd.c | 253 | tell_creator("shaggy","Don't want %O\n", member );
crowd.c | 262 | member_array( i, crowd );
crowd.c | 264 | tell_creator("shaggy","crowd: %O %O %O\n",sizeof(selection),i,n_crowd);
crowd.c | 266 | clone_object(members[i>>2]->file);
crowd.c | 277 | tell_room(environment(),"%^YELLOW%^"+sprintf("Cloned %O : %i of %i selected (%i remaining)",frog,i_member+1,sizeof(selection)+1,n_crowd)+"%^RESET%^\n");
crowd.c | 278 | fix_gender( i&3 );
crowd.c | 279 | add_effect( CROWD+"crowd_merge_effect", ({ this_object(), i }) );
crowd.c | 280 | tell_creator("shaggy","New one: %O %O %O %O %O %O %O %O\n", frog, previous_object(), previous_object(2), previous_object(3), previous_object(4), previous_object(5), previous_object(6), query_verb() );
crowd.c | 281 | move( environment(this_object()) );
crowd.c | 288 | tell_creator("shaggy","id_list\n");
crowd.c | 293 | tell_creator("shaggy","plural_list\n");
crowd.c | 298 | tell_creator("shaggy","adj_list\n");
crowd.c | 306 | sizeof(array[i+1]), top, bot }) );
crowd.c | 331 | tell_creator("shaggy","parse: %O %O %O %O %O %O\n",arr,query_verb(),previous_object(), previous_object(1), previous_object(2), previous_object(3));
crowd.c | 352 | explode(arr[P_STR]," ");
crowd.c | 355 | copy(crowd);
crowd.c | 357 | sizeof(members);
crowd.c | 364 | sizeof(members);
crowd.c | 372 | sizeof(members);
crowd.c | 379 | sizeof(members);
crowd.c | 386 | tell_creator("shaggy","Selection: %O\n",selection);
crowd.c | 393 | if (arr[P_THING] == 0) return this_object();
crowd.c | 400 | this_object();
crowd.c | 408 | this_object();
crowd.c | 411 | this_object();
crowd.c | 419 | while (i--) things += ({ make_member() });
crowd.c | 429 | make_member();
crowd.c | 439 | make_member() });
crowd.c | 445 | make_member();
crowd.c | 452 | crowd_object() == this_object() :) ));
crowd.c | 454 | if ( n_here ) here = map( things, (: $1->crowd_number() :) );
crowd.c | 457 | tell_creator("shaggy","ENTER %O: n_here: %i n_cloned: %i n_alive: %i n_crowd:%i n_max: %i %O\n",from,n_here,n_cloned,n_alive,n_crowd,n_max, here);
crowd.c | 464 | crowd_object() == this_object() :) ));
crowd.c | 466 | if ( n_here ) here = map( things, (: $1->crowd_number() :) );
crowd.c | 469 | tell_creator("shaggy","EXIT: n_here: %i n_cloned: %i n_alive: %i n_crowd:%i n_max: %i %O\n",n_here,n_cloned,n_alive,n_crowd,n_max, here);
crowdroom.c | 18 | set_short("crowd demonstration room");
crowdroom.c | 19 | set_light(100);
crowdroom.c | 30 | add_exit( "next", SIT+"crowdroom2", "path" );
crowdroom.c | 31 | add_exit( "back", LEARNING +"search", "path" );
crowdroom.c | 32 | add_exit( "exit", ENTRANCE, "path" );
crowdroom.c | 34 | modify_exit( "next", ({ "function", (: interactive($2) :) }) );
crowdroom.c | 35 | modify_exit( "back", ({ "function", (: interactive($2) :) }) );
crowdroom.c | 36 | modify_exit( "exit", ({ "function", (: interactive($2) :) }) );
crowdroom.c | 43 | clone_object( CROWD+"crowd" );
crowdroom.c | 44 | move( this_object() );
crowdroom.c | 45 | call_out( (: $1->move($2) :), 2, crowd, this_object() );
container_save.c | 11 | set_short("room of shelf and wardrobe examples");
container_save.c | 12 | add_property( "determinate", "the " );
container_save.c | 26 | call_out() to a function that makes them.\n" );
container_save.c | 27 | set_light( 100 );
container_save.c | 28 | add_exit( "back", LEARNING +"search", "path" );
container_save.c | 29 | add_exit( "exit", ENTRANCE, "path" );
container_save.c | 47 | clone_object("/obj/surf_save");
container_save.c | 48 | set_name( "shelf" );
container_save.c | 49 | set_short( "oaken shelf" );
container_save.c | 50 | add_adjective( "wooden" );
container_save.c | 51 | add_adjective( "oak" );
container_save.c | 52 | add_adjective( "oaken" );
container_save.c | 53 | add_property( "there", "hanging from the wall" );
container_save.c | 56 | set_weight( 2000 );
container_save.c | 57 | set_max_weight( 2000 );
container_save.c | 58 | reset_get();
container_save.c | 63 | check_euid();
container_save.c | 67 | set_save_file( SAVEPATH+"/oak_shelf" );
container_save.c | 69 | move( this_object() );
container_save.c | 72 | clone_object("/obj/cont_save");
container_save.c | 73 | set_name( "wardrobe" );
container_save.c | 74 | set_short( "oaken wardrobe" );
container_save.c | 75 | add_adjective( "wooden" );
container_save.c | 76 | add_adjective( "oaken" );
container_save.c | 77 | add_adjective( "oak" );
container_save.c | 80 | set_weight( 2000 );
container_save.c | 81 | set_max_weight( 2000 );
container_save.c | 82 | reset_get();
container_save.c | 87 | check_euid();
container_save.c | 91 | set_save_file( SAVEPATH+"/wardrobe" );
container_save.c | 93 | move( this_object() );
vessel.c | 11 | set_short("room of vessel and liquid examples");
vessel.c | 12 | add_property( "determinate", "the " );
vessel.c | 16 | wall (\"read note1\", \"read note2\", etc).\n" );
vessel.c | 17 | set_light( 100 );
vessel.c | 80 | add_exit( "back", LEARNING +"search", "path" );
vessel.c | 81 | add_exit( "exit", ENTRANCE, "path" );
vessel.c | 95 | call_out( "check_vessels", 3 );
vessel.c | 107 | clone_object( "/obj/bottle" );
vessel.c | 112 | make_bottle( "green", 600 );
vessel.c | 118 | clone_object( "/obj/reagents/generic_liquid.ob" );
vessel.c | 119 | set_name( "wine" );
vessel.c | 120 | set_short( "red wine" );
vessel.c | 121 | set_long( "This is a deep red wine, $amount_size$.\n");
vessel.c | 122 | set_medium_alias( "RedWine" );
vessel.c | 123 | add_adjective( "red" );
vessel.c | 124 | add_eat_effect( "/std/effects/ingested/drunk", 325 );
vessel.c | 127 | set_amount( 2400 );
vessel.c | 128 | move( wine_bottle );
vessel.c | 131 | clone_object( "/obj/vessel" );
vessel.c | 132 | set_name( "glass" );
vessel.c | 133 | set_short( "wine glass" );
vessel.c | 134 | set_long( "This is a fine crystal wine glass.\n" );
vessel.c | 135 | set_weight( 4 );
vessel.c | 136 | set_max_weight( 8 );
vessel.c | 138 | set_max_volume( 480 );
vessel.c | 139 | add_adjective( ({ "crystal", "wine" }));
vessel.c | 144 | clone_object( "/obj/vessel" );
vessel.c | 145 | set_name( "cup" );
vessel.c | 146 | set_short( "coffee cup" );
vessel.c | 150 | set_weight( 4 );
vessel.c | 151 | set_max_weight( 8 );
vessel.c | 152 | set_max_volume( 960 );
vessel.c | 153 | add_adjective( ({ "china", "coffee" }) );
vessel.c | 156 | clone_object( "/obj/reagents/generic_liquid.ob" );
vessel.c | 157 | set_name( "coffee" );
vessel.c | 158 | set_short( "coffee" );
vessel.c | 161 | set_medium_alias( "KlatchianCoffee" );
vessel.c | 162 | add_adjective( "klatchian" );
vessel.c | 163 | add_eat_effect( "/std/effects/ingested/knurd", 325 );
vessel.c | 164 | set_amount( 960 );
vessel.c | 165 | move( cup );
womble01.c | 6 | add_property( "determinate", "the " );
womble01.c | 7 | set_short( "southwestern corner of Womble square" );
womble01.c | 13 | set_zone( "Tiny Town");
womble01.c | 20 | add_exit( "north", PATH +"womble03", "road" );
womble01.c | 21 | add_exit( "northeast", PATH +"womble04", "hidden" );
womble01.c | 22 | add_exit( "east", PATH +"womble02", "road" );
womble01.c | 23 | add_exit( "south", TTOWNBUILDINGS +"item-shop", "door" );
womble03.c | 6 | add_property( "determinate", "the " );
womble03.c | 7 | set_short( "northwestern corner of Womble square" );
womble03.c | 13 | set_zone( "Tiny Town");
womble03.c | 20 | add_exit( "south", PATH +"womble01", "road" );
womble03.c | 21 | add_exit( "southeast", PATH +"womble02", "hidden" );
womble03.c | 22 | add_exit( "east", PATH +"womble04", "road" );
womble04.c | 6 | add_property( "determinate", "the " );
womble04.c | 7 | set_short( "northeastern corner of Womble square" );
womble04.c | 13 | set_zone( "Tiny Town");
womble04.c | 20 | add_exit( "south", PATH +"womble02", "road" );
womble04.c | 21 | add_exit( "southwest", PATH +"womble01", "hidden" );
womble04.c | 22 | add_exit( "west", PATH +"womble03", "road" );
womble02.c | 6 | add_property( "determinate", "the " );
womble02.c | 7 | set_short( "southeastern corner of Womble square" );
womble02.c | 13 | set_zone( "Tiny Town");
womble02.c | 20 | add_exit( "north", PATH +"womble04", "road" );
womble02.c | 21 | add_exit( "northwest", PATH +"womble03", "hidden" );
womble02.c | 22 | add_exit( "west", PATH +"womble01", "road" );
shop-ledge.c | 6 | set_short( "small ledge" );
shop-ledge.c | 12 | set_room_size( 10 );
shop-ledge.c | 15 | set_slope(60, "ledge", TTOWNROADS + "womble01");
shop-ledge.c | 25 | set_weak_roof(2500, TTOWNROADS + "womble01");
shop-ledge.c | 33 | add_exit("window", PATH+"shop-upstairs", "window");
shop-ledge.c | 40 | set_wall( ({ "bottom", ({ TTOWNROADS + "womble01", 200 }), }) );
item-shop.c | 7 | add_property( "determinate", "A " );
item-shop.c | 9 | set_short( "simple item shop" );
item-shop.c | 13 | set_light( 60 );
item-shop.c | 17 | set_room_size( 10 );
item-shop.c | 20 | set_zone( "Tiny Town");
item-shop.c | 22 | add_exit( "north", TTOWNROADS +"womble01", "door" );
item-shop.c | 33 | add_exit("up", PATH+"shop-upstairs", "stair");
item-shop.c | 34 | modify_exit("up", ({"upgrade", 9 }));
shop-upstairs.c | 6 | set_short( "bedroom" );
shop-upstairs.c | 10 | set_light( 60 );
shop-upstairs.c | 14 | set_room_size( 10 );
shop-upstairs.c | 17 | set_zone( "Tiny Town");
shop-upstairs.c | 25 | add_exit("window", PATH+"shop-ledge", "window");
shop-upstairs.c | 26 | add_exit("down", PATH +"item-shop", "stair" );
shop-upstairs.c | 29 | modify_exit("down", ({ "downgrade", 9 }));
function_room.c | 9 | set_short( "uninitialised search room for functions" );
function_room.c | 19 | add_property( "no map", 1 );
function_room.c | 23 | set_light( 50 );
function_room.c | 25 | add_exit( "exit", PATH +"functions", "path" );
function_room.c | 36 | add_property( "keywords", ({ "room", "virtual" }) );
function_room.c | 46 | set_short( "\""+ word +"\" search room" );
function_room.c | 47 | add_property( "determinate", "the " );
function_room.c | 56 | query_short( exit_room ) );
function_room.c | 57 | add_exit( exit_letter, exit_room, "path" );
function_room.c | 62 | set_long( description );
function_room.c | 71 | dest_me();
function_room.c | 88 | return ({ SEARCH, "find_function_room", function_chosen });
function_room.c | 99 | call_out( "check_empty", 10 );
function_room.c | 102 | query_quit_handler();
function_room.c | 104 | remove_from_list( thing );
surface_decorator.c | 20 | set_name( "worker" );
surface_decorator.c | 22 | set_short( "construction worker" );
surface_decorator.c | 23 | add_property( "determinate", "a " );
surface_decorator.c | 24 | add_adjective( "construction" );
surface_decorator.c | 25 | add_property( "unique", 1 );
surface_decorator.c | 26 | setup_nationality( "/std/nationality/agatean", "Bes Pelargic" );
surface_decorator.c | 27 | basic_setup( "human", "warrior", 30 );
surface_decorator.c | 28 | set_gender( 1 );
surface_decorator.c | 40 | add_property( "place", "Counterweight Continent" );
surface_decorator.c | 50 | add_allowed_surface( "floor" );
surface_decorator.c | 51 | add_allowed_surface( "wall" );
surface_decorator.c | 70 | add_property( "place", <location> );
surface_decorator.c | 91 | set_under_construction_mess( "covered in dust, plaster and carpet bits" );
surface_decorator.c | 109 | add_allowed_domain( "/w/una" );
surface_decorator.c | 110 | add_allowed_domain( "/d/cwc/Bes_Pelargic" );
field.c | 12 | set_short("grassy field");
field.c | 13 | set_long("This is a large grassy field.\n");
field.c | 15 | add_item("field", "Large and grassy.");
field.c | 16 | add_item("grass", "It's green, which should come as no surprise at all.");
field_handler.c | 19 | add_room_type(".", __DIR__ + "field");
field_handler.c | 45 | add_exit_at(2, 0, "south", __DIR__ + "entrance", "road");
entrance.c | 12 | set_short("field entrance");
entrance.c | 13 | set_long("You are at the entrance to a large grassy field.\n");
entrance.c | 15 | add_item("path", "Trampled down by the hooves of time.");
entrance.c | 16 | add_item("field", "Large and grassy.");
entrance.c | 17 | add_item("grass", "It's green, which should come as no surprise at all.");
entrance.c | 19 | add_exit("north", __DIR__ + "path:2:0", "road");
path.c | 12 | set_short("trampled path");
path.c | 13 | set_long("This path meanders through a large grassy field.\n");
path.c | 15 | add_item("path", "Trampled down by the hooves of time.");
path.c | 16 | add_item("field", "Large and grassy.");
path.c | 17 | add_item("grass", "It's green, which should come as no surprise at all.");
cuthbert.c | 21 | set_name( "cuthbert" );
cuthbert.c | 22 | set_short( "Cuthbert" );
cuthbert.c | 23 | add_property("determinate", "");
cuthbert.c | 24 | add_alias( ({"npc", "warrior", "man"}) );
cuthbert.c | 28 | basic_setup ("human", "warrior", 50);
cuthbert.c | 29 | set_gender( 1 );
cuthbert.c | 31 | add_language( "common" );
cuthbert.c | 32 | set_language( "common" );
cuthbert.c | 43 | random(30))->move( TO );
cuthbert.c | 45 | random(30))->move( TO );
cuthbert.c | 47 | random(30))->move( TO );
cuthbert.c | 52 | clone_object( "/obj/clothing" );
cuthbert.c | 53 | set_name( "britches" );
cuthbert.c | 54 | add_adjective(({"pair", "of"}));
cuthbert.c | 55 | set_short( "pair of britches" );
cuthbert.c | 56 | add_alias("trousers");
cuthbert.c | 59 | set_value( 100 );
cuthbert.c | 60 | set_weight( 7 );
cuthbert.c | 63 | query_all_clothing_types());
cuthbert.c | 65 | set_type( "trousers" );
cuthbert.c | 66 | add_pocket( "side", 100 );
cuthbert.c | 67 | add_pocket( "side", 100 );
cuthbert.c | 68 | set_damage_chance( 10 );
cuthbert.c | 69 | set_max_cond( 800 );
cuthbert.c | 70 | set_cond( 600 + random( 200 ) );
cuthbert.c | 71 | move( TO );
cuthbert.c | 73 | clone_object( "/obj/clothing" );
cuthbert.c | 74 | set_name( "cape" );
cuthbert.c | 75 | set_short( "orange cape" );
cuthbert.c | 76 | add_adjective("orange");
cuthbert.c | 79 | set_value( 100 );
cuthbert.c | 80 | set_weight( 7 );
cuthbert.c | 81 | set_type( "cape" );
cuthbert.c | 82 | set_damage_chance( 10 );
cuthbert.c | 83 | set_max_cond( 800 );
cuthbert.c | 84 | set_cond( 600 + random( 200 ) );
cuthbert.c | 85 | move( TO );
cuthbert.c | 86 | init_equip();
cuthbert.c | 88 | give_money( 10, 30, "Ankh-Morpork pence" );
room2.c | 9 | set_light(70);
room2.c | 10 | set_short( "seperate file NPC room" );
room2.c | 11 | add_property( "determinate", "the " );
room2.c | 17 | add_exit("backwards", PATH +"room1", "door");
room2.c | 18 | add_exit("onwards", PATH +"room3", "door");
room2.c | 25 | clone_object( PATH +"pugh2" );
room2.c | 26 | move( this_object() );
pugh2.c | 12 | set_name( "pugh" );
pugh2.c | 13 | set_short( "Pugh" );
pugh2.c | 14 | add_property("determinate", "");
pugh2.c | 15 | add_alias( ({"npc", "warrior", "man"}) );
pugh2.c | 19 | basic_setup ("human", "warrior", 10);
pugh2.c | 20 | set_gender( 1 );
room3.c | 9 | set_light(70);
room3.c | 10 | set_short( "variable NPC room" );
room3.c | 11 | add_property( "determinate", "the " );
room3.c | 17 | add_exit("backwards", PATH +"room2", "door");
room3.c | 18 | add_exit("onwards", PATH +"room4", "door");
room3.c | 25 | clone_object( PATH +"rat" );
room3.c | 26 | move( this_object() );
barley.c | 11 | set_name( "barley" );
barley.c | 12 | set_short( "Barley" );
barley.c | 13 | add_property("determinate", "");
barley.c | 14 | add_alias( ({"npc", "warrior", "man"}) );
barley.c | 18 | basic_setup ("human", "warrior", 50);
barley.c | 19 | set_gender( 1 );
barley.c | 23 | add_language( "common" );
barley.c | 24 | set_language( "common" );
rat.c | 21 | set_name("rat");
rat.c | 22 | add_alias("rodent");
rat.c | 24 | set_gender(1 + random(2));
rat.c | 25 | set_short(adjective + " rat");
rat.c | 26 | add_adjective(adjective);
rat.c | 34 | basic_setup ("rat", "fighter", 2 + random(5));
room4.c | 9 | set_light(70);
room4.c | 10 | set_short( "chatting NPC room" );
room4.c | 11 | add_property( "determinate", "the " );
room4.c | 16 | add_exit("backwards", PATH +"room3", "door");
room4.c | 17 | add_exit("onwards", PATH +"room5", "door");
room4.c | 24 | clone_object( PATH +"barley" );
room4.c | 25 | move( this_object() );
macgrew.c | 17 | set_name( "macgrew" );
macgrew.c | 18 | set_short( "MacGrew" );
macgrew.c | 19 | add_property("determinate", "");
macgrew.c | 20 | add_alias( ({"npc", "warrior", "man"}) );
macgrew.c | 24 | basic_setup ("human", "warrior", 50);
macgrew.c | 25 | set_gender( 1 );
macgrew.c | 27 | add_language( "common" );
macgrew.c | 28 | set_language( "common" );
macgrew.c | 47 | random(30))->move(this_object());
macgrew.c | 49 | random(30))->move(this_object());
macgrew.c | 51 | random(30))->move(this_object());
macgrew.c | 55 | init_equip();
macgrew.c | 58 | give_money( 10, 30, "Ankh-Morpork pence" );
room1.c | 11 | set_light(70);
room1.c | 12 | set_short( "cloned NPC room" );
room1.c | 13 | add_property( "determinate", "the " );
room1.c | 18 | add_exit("onwards", PATH +"room2", "door");
room1.c | 27 | clone_object( "/obj/monster" );
room1.c | 30 | set_name("pugh");
room1.c | 31 | set_short("Pugh");
room1.c | 34 | add_property("determinate", "");
room1.c | 37 | add_alias( ({"npc", "warrior", "man"}) );
room1.c | 46 | basic_setup("human", "warrior", 10);
room1.c | 49 | set_gender( 1 );
room1.c | 52 | move( this_object() );
room6.c | 9 | set_light(70);
room6.c | 10 | set_short( "room with a fashion-victim NPC" );
room6.c | 11 | add_property( "determinate", "the " );
room6.c | 16 | add_exit("backwards", PATH +"room5", "door");
room6.c | 17 | add_exit("onwards", PATH +"room7", "door");
room6.c | 24 | clone_object( PATH +"cuthbert" );
room6.c | 25 | move( this_object() );
room5.c | 9 | set_light(70);
room5.c | 10 | set_short( "room with a non-naked NPC" );
room5.c | 11 | add_property( "determinate", "the " );
room5.c | 17 | add_exit("backwards", PATH +"room4", "door");
room5.c | 18 | add_exit("onwards", PATH +"room6", "door");
room5.c | 25 | clone_object( PATH +"macgrew" );
room5.c | 26 | move( this_object() );
search.c | 28 | seteuid( (string)master()->get_bb_uid() );
search.c | 31 | unguarded( (: restore_object, SAVE :) );
search.c | 45 | keys( keywords );
search.c | 50 | member_array( $1, objects[ word ] ) != -1 :) );
search.c | 56 | keys( keywords );
search.c | 61 | member_array( $1, rooms[ word ] ) != -1 :) );
search.c | 87 | keys( rooms );
search.c | 88 | keys( objects );
search.c | 89 | keys( objects );
search.c | 91 | return ({ found_words, found_rooms, found_objects });
search.c | 101 | find_object( file );
search.c | 102 | query_property( "commented functions" );
search.c | 106 | query_property( "keywords" );
search.c | 130 | unguarded( (: save_object, SAVE :) );
search.c | 143 | all_inventory( find_object( room ) );
search.c | 144 | sizeof( obs );
search.c | 147 | move( "/room/void" );
search.c | 149 | delete( obs, i, 1 );
search.c | 152 | dest_me();
search.c | 153 | force_load();
search.c | 154 | move( room );
search.c | 165 | get_dir( dir, -1 );
search.c | 173 | if( ( sizeof( file_info[ 0 ] ) >
search.c | 175 | update_info_for( dir + file_info[ 0 ][ 0 .. <3 ] );
search.c | 182 | call_out( "collect_one", 3 );
search.c | 185 | tell_object( find_living( "olorin" ), "Collect finished.\n" );
search.c | 188 | unguarded( (: save_object, SAVE :) );
search.c | 192 | update_search( LEARNING +"search" );
search.c | 193 | update_search( LEARNING +"functions" );
search.c | 206 | collect_one();
search.c | 223 | implode( sort_array( words, 1 ), ", " );
search.c | 224 | children( SEARCH_ROOM ) - ({ find_object( SEARCH_ROOM ) });
search.c | 227 | file_name( thing );
search.c | 229 | clone_object( SEARCH_ROOM );
search.c | 230 | set_marker( word_mark, words );
search.c | 231 | file_name( thing );
search.c | 239 | children( FUNCTION_ROOM ) - ({ find_object( FUNCTION_ROOM ) });
search.c | 242 | file_name( thing );
search.c | 244 | clone_object( FUNCTION_ROOM );
search.c | 245 | set_marker( word );
search.c | 246 | file_name( thing );
search.c | 257 | sort_array( functions_found, 1 );
search.c | 268 | uniq_array(rooms_found);
request.c | 8 | seteuid( (string)master()->get_bb_uid() );
request.c | 10 | unguarded( (: restore_object, SAVE :) );
request.c | 11 | if( !requests ) requests = ({ });
request.c | 15 | unguarded( (: save_object, SAVE :) );
request.c | 42 | save_me();
request.c | 48 | save_me();
request.c | 57 | delete( requests, number, 1 );
request.c | 58 | save_me();
quit.c | 10 | set_short( "quit handler of the search rooms" );
quit.c | 11 | set_light( 50 );
quit.c | 16 | add_exit( "back", ENTRANCE, "path" );
quit.c | 19 | unguarded( (: restore_object, SAVE_FILE :) );
quit.c | 20 | call_out( "check_names", 2 );
quit.c | 25 | save_this() { unguarded( (: save_object, SAVE_FILE :) );
quit.c | 34 | m_delete( locations, word );
quit.c | 35 | save_this();
quit.c | 45 | query_keywords();
quit.c | 50 | query_marker();
quit.c | 52 | save_this();
quit.c | 60 | query_name();
quit.c | 62 | m_delete( locations, word );
quit.c | 63 | save_this();
quit.c | 80 | query_name();
quit.c | 87 | find_room( locations[ word ] );
quit.c | 89 | find_function_room( locations[ word ] );
quit.c | 91 | move( location, "$N enter$s the game." );
advanced_item_1.c | 12 | set_name("bag");
advanced_item_1.c | 13 | set_short("little green bag");
advanced_item_1.c | 14 | set_long("This is a little green bag.\n");
advanced_item_1.c | 15 | add_adjective(({"little", "green"}));
advanced_item_1.c | 16 | set_weight(5);
advanced_item_1.c | 17 | set_max_weight(20);
advanced_item_1.c | 25 | test_add(ob, flag);
advanced_item_1.c | 34 | test_remove(ob, flag, dest);
.simple_weapon.wep_virtual_.c | 3 | dest_me() { destruct( this_object() );
.simple_weapon.wep_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.simple_weapon.wep_virtual_.c | 13 | create_virtual_object( "/obj/weapon.c", 1 );
.simple_weapon.wep_virtual_.c | 14 | add_property( "virtual name", "/d/learning/newbie/introduction/examples/simple_weapon.wep#1" );
.simple_weapon.wep_virtual_.c | 15 | call_other( clone, "set_name",  "mop"  );
.simple_weapon.wep_virtual_.c | 16 | call_other( clone, "set_short",  "dirty mop"  );
.simple_weapon.wep_virtual_.c | 17 | call_other( clone, "set_long",  "This is a dirty mop, dripping with ooze.\n"  );
.simple_weapon.wep_virtual_.c | 18 | call_other( clone, "add_adjective",  "dirty"  );
.simple_weapon.wep_virtual_.c | 19 | call_other( clone, "set_weight",  20  );
.simple_weapon.wep_virtual_.c | 20 | call_other( clone, "set_value",  2000  );
.simple_weapon.wep_virtual_.c | 21 | call_other( clone, "new_weapon", 10000  );
.simple_weapon.wep_virtual_.c | 22 | call_other( clone, "add_attack",  "prod", 50, ({ 5, 6, 6 }), "blunt", "blunt", 0  );
.simple_weapon.wep_virtual_.c | 23 | call_other( clone, "add_attack",  "whack", 50, ({ 10, 10, 5 }), "blunt", "blunt", 0 );
.advanced_item_4.food_virtual_.c | 3 | dest_me() { destruct( this_object() );
.advanced_item_4.food_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.advanced_item_4.food_virtual_.c | 13 | create_virtual_object( "/obj/food.c", 1 );
.advanced_item_4.food_virtual_.c | 14 | add_property( "virtual name", "/d/learning/newbie/introduction/examples/advanced_item_4.food#1" );
.advanced_item_4.food_virtual_.c | 15 | call_other( clone, "set_name", "sandwich"  );
.advanced_item_4.food_virtual_.c | 16 | call_other( clone, "set_short", "monkey sandwich"  );
.advanced_item_4.food_virtual_.c | 17 | call_other( clone, "add_adjective", ({ "monkey" })  );
.advanced_item_4.food_virtual_.c | 18 | call_other( clone, "set_value", 0  );
.advanced_item_4.food_virtual_.c | 19 | call_other( clone, "set_weight", 1  );
.advanced_item_4.food_virtual_.c | 20 | call_other( clone, "set_long", "This is a monkey sandwich.  Made from real monkey.  Mmm!\n"  );
.advanced_item_4.food_virtual_.c | 21 | call_other( clone, "add_eat_effect",  "/std/effects/ingested/poison", 600 );
.simple_object.clo_virtual_.c | 3 | dest_me() { destruct( this_object() );
.simple_object.clo_virtual_.c | 7 | seteuid( (string)"/secure/master"->creator_file( file_name( this_object() ) ) );
.simple_object.clo_virtual_.c | 13 | create_virtual_object( "/obj/clothing.c", 1 );
.simple_object.clo_virtual_.c | 14 | add_property( "virtual name", "/d/learning/newbie/introduction/examples/simple_object.clo#1" );
.simple_object.clo_virtual_.c | 15 | call_other( clone, "set_name",  "dungarees"  );
.simple_object.clo_virtual_.c | 16 | call_other( clone, "set_short",  "pair of waterproof dungarees"  );
.simple_object.clo_virtual_.c | 17 | call_other( clone, "set_long",  "This is a pair of waterproof dungarees.  Luckily they "     "are also ooze proof.\n"  );
.simple_object.clo_virtual_.c | 18 | call_other( clone, "add_adjective",  ({"pair of", "waterproof"})  );
.simple_object.clo_virtual_.c | 19 | call_other( clone, "set_weight",  45  );
.simple_object.clo_virtual_.c | 20 | call_other( clone, "set_value",  4000  );
.simple_object.clo_virtual_.c | 21 | call_other( clone, "setup_clothing",  50000  );
.simple_object.clo_virtual_.c | 22 | call_other( clone, "set_type",  "robe" );
simple_object.c | 11 | set_name("dungarees");
simple_object.c | 12 | set_short("pair of waterproof dungarees");
simple_object.c | 13 | add_adjective(({"pair of", "waterproof"}));
simple_object.c | 16 | add_adjective(({"pair of", "waterproof"}));
simple_object.c | 17 | set_weight(45);
simple_object.c | 18 | set_value(4000);
simple_object.c | 19 | setup_clothing(50000);
simple_object.c | 20 | set_type("robe");
simple_room.c | 13 | set_short("blobby lair");
simple_room.c | 17 | add_property("determinate", "a ");
simple_room.c | 18 | set_light(50);
simple_room.c | 27 | add_item("strange oozy things", "Ewww!");
simple_room.c | 29 | add_zone("my rooms");
simple_room.c | 40 | add_exit("east", PATH + "advanced_room_1", "road");
simple_room.c | 45 | call_out("after_reset", 3);
simple_room.c | 62 | load_object(PATH + "simple_npc");
simple_room.c | 73 | move(this_object(), "$N appear$s with a wet squelch.\n");
simple_room.c | 81 | move(this_object(), "$N appear$s with a wet squelch.\n");
advanced_room_1.c | 11 | set_short("market square");
advanced_room_1.c | 22 | add_property("climate",({20, 20, 10}));
advanced_room_1.c | 24 | set_light(80);
advanced_room_1.c | 25 | add_zone("my rooms");
advanced_room_1.c | 37 | add_night_item("stall", "The stalls lie dormant in the night.  Creepy!");
advanced_room_1.c | 49 | add_exit("north", PATH + "advanced_room_3", "road");
advanced_room_1.c | 50 | add_exit("south", PATH + "advanced_room_2", "road");
advanced_room_1.c | 51 | add_exit("east", "/w/drakkos/workroom", "road");
advanced_room_1.c | 52 | add_exit("west", PATH + "simple_room", "road");
advanced_room_1.c | 76 | this_player()->adjust_hp(-100);
advanced_room_1.c | 78 | this_player()->attack_by(this_object());
advanced_room_1.c | 85 | notify_fail("Try searching something else, perhaps?\n");
advanced_room_1.c | 96 | notify_fail ("");
advanced_room_1.c | 97 | tell_object (ob, "You are not a creator!  You may not pass!\n");
advanced_room_3.c | 13 | set_short("road to the market");
advanced_room_3.c | 14 | add_property("determinate", "the ");
advanced_room_3.c | 17 | set_night_long("This is a quiet road.  But at night!.\n");
advanced_room_3.c | 22 | set_light(80);
advanced_room_3.c | 23 | add_zone("my rooms");
advanced_room_3.c | 25 | add_item("road", "I *said*, there's nothing interesting at all here.");
advanced_room_3.c | 27 | add_exit("south", PATH + "advanced_room_1", "road");
advanced_room_2.c | 13 | set_short("road to the market");
advanced_room_2.c | 14 | add_property("determinate", "the ");
advanced_room_2.c | 17 | set_night_long("This is a quiet road.  But at night!.\n");
advanced_room_2.c | 22 | set_light(80);
advanced_room_2.c | 23 | add_zone("my rooms");
advanced_room_2.c | 25 | add_item("road", "I *said*, there's nothing interesting at all here.");
advanced_room_2.c | 27 | add_exit("north", PATH + "advanced_room_1", "road");
advanced_item_3.c | 11 | set_name("ruler");
advanced_item_3.c | 12 | set_short("wooden ruler");
advanced_item_3.c | 13 | add_adjective("wooden");
advanced_item_3.c | 16 | set_weight(1);
advanced_item_3.c | 17 | set_value(0);
advanced_item_3.c | 18 | new_weapon(5000);
advanced_item_3.c | 19 | add_attack("rap", 50,({ 25, 10, 5 }), "blunt", "blunt", "do_shame");
advanced_item_3.c | 29 | set_wield_func( "test_creator", base_name( this_object() ) );
advanced_item_3.c | 48 | tell_object(ob, "You have been deemed worthy, leetle creator!\n");
advanced_item_3.c | 52 | tell_object(ob, "You have been deemed unworthy, leetle player!\n");
advanced_item_3.c | 60 | tell_object(attack_ob, "Your knuckles %^BOLD%^sting!%^RESET%^\n");
advanced_item_3.c | 62 | one_short() + " whimpers in pain!\n");
simple_npc.c | 12 | set_name("blob");
simple_npc.c | 13 | set_short("grey blob");
simple_npc.c | 16 | basic_setup("human", "warrior", 10);
simple_npc.c | 17 | set_gender("male");
simple_npc.c | 18 | add_adjective(({"oozing", "grey"}));
simple_npc.c | 19 | set_main_plural("grey blobses");
simple_npc.c | 20 | add_alias("porridge");
advanced_item_2.c | 11 | set_name("trousers");
advanced_item_2.c | 12 | set_short("pair of flourescent pink flared trousers");
advanced_item_2.c | 13 | add_adjective(({"pair of", "flourescent", "pink", "flared"}));
advanced_item_2.c | 16 | set_weight(10);
advanced_item_2.c | 17 | set_value(0);
advanced_item_2.c | 18 | set_type("trousers");
advanced_item_2.c | 19 | add_alias("flares");
advanced_item_2.c | 20 | set_main_plural("pairs of flourescent pink flared trousers");
advanced_item_2.c | 21 | add_plural("trousers");
advanced_item_2.c | 22 | setup_clothing(10000);
advanced_item_2.c | 23 | add_pocket("left", 20);
advanced_item_2.c | 24 | add_pocket("right", 20);
advanced_item_2.c | 25 | set_wear_remove_func(base_name(this_object()), "do_wear_stuff");
advanced_npc.c | 13 | do_bunny(object, object);
advanced_npc.c | 14 | do_maintain(object, object);
advanced_npc.c | 17 | set_name("gnome");
advanced_npc.c | 18 | set_short("laughing gnome");
advanced_npc.c | 23 | add_property("unique", 1);
advanced_npc.c | 24 | basic_setup("gnome", "wizard", 50);
advanced_npc.c | 25 | set_gender("male");
advanced_npc.c | 27 | set_int(23);
advanced_npc.c | 28 | set_str(18);
advanced_npc.c | 29 | set_wis(18);
advanced_npc.c | 31 | add_skill_level("magic", 100);
advanced_npc.c | 32 | add_skill_level("fighting", 50);
advanced_npc.c | 47 | add_spell("bunnies", "/obj/spells/fire_bunny", "cast_spell");
advanced_npc.c | 48 | add_spell("flowers", "/obj/spells/flowers", "cast_spell");
advanced_npc.c | 49 | add_spell("shield", "/obj/spells/small_shield", "cast_spell");
advanced_npc.c | 51 | add_combat_action(25, "bunny_them",(: do_bunny :));
advanced_npc.c | 52 | add_combat_action(25, "maintain_me",(: do_maintain :));
advanced_npc.c | 54 | add_attack( "claws", 88,({ 10, 8, 20 }), "sharp", "sharp", 0 );
advanced_npc.c | 55 | add_attack( "teeth", 88,({ 5, 5, 25 }), "pierce", "pierce", 0 );
advanced_npc.c | 97 | queue_command("cast flowers");
advanced_npc.c | 98 | queue_command("give flowers to " + player->query_name());
advanced_npc.c | 99 | queue_command("bow with a flourish");
advanced_npc.c | 113 | request_item ("carrot");
advanced_npc.c | 114 | move(this_object());
advanced_npc.c | 118 | request_item ("torch");
advanced_npc.c | 119 | move(this_object());
advanced_npc.c | 122 | do_command("cast bunnies on " + target->query_name());
advanced_npc.c | 131 | request_item("wooden djelian shield", 100);
advanced_npc.c | 132 | move(this_object());
advanced_npc.c | 135 | do_command("cast shield on " + this_object()->query_name());
kess.c | 37 | set_name("kess");
kess.c | 38 | set_short("Kess of Sek");
kess.c | 39 | set_main_plural("Kesses of Sek");
kess.c | 46 | add_adjective(({"archcardinal", "of", "sek"}));
kess.c | 49 | add_alias(({"priestess", "archcardinal", "cardinal"}));
kess.c | 51 | add_property("determinate","");
kess.c | 52 | add_property("unique", 1);
kess.c | 53 | set_gender("female");
kess.c | 56 | set_race("human");
kess.c | 57 | set_class("priest");
kess.c | 58 | set_deity("sek");
kess.c | 59 | set_level(260);
kess.c | 62 | set_height(140);
kess.c | 63 | set_weight(1000);
kess.c | 64 | set_al(2000);
kess.c | 67 | adjust_str(2);
kess.c | 68 | adjust_con(2);
kess.c | 69 | adjust_wis(5);
kess.c | 70 | adjust_int(-6);
kess.c | 71 | adjust_dex(-3);
kess.c | 75 | add_skill_level( "faith.items.rod", 250, 0 );
kess.c | 76 | add_skill_level( "fighting.combat.melee.blunt", 200, 0 );
kess.c | 77 | add_skill_level( "fighting.combat.parry.held", 200, 0 );
kess.c | 80 | add_known_command("kick");
kess.c | 97 | set_join_fight_type(1);
kess.c | 100 | request_armour("chainmail", 100);
kess.c | 101 | add_ac("magic", "magic", 60);
kess.c | 102 | add_ac("fire", "fire" , 60);
kess.c | 103 | add_ac("cold", "cold", 60);
kess.c | 104 | move(this_object());
kess.c | 105 | add_property("holy amulet", "sek");
kess.c | 106 | add_property("sek", 1);
kess.c | 108 | request_armour("blood red cloak", 100)->move(this_object());
kess.c | 109 | request_armour("rope belt", 100)->move(this_object());
kess.c | 110 | request_armour("soft leather shoes", 100)->move(this_object());
kess.c | 113 | request_weapon( "cleric rod", 100 );
kess.c | 114 | whichone(6);
kess.c | 115 | set_enchant(8);
kess.c | 116 | move(this_object());
kess.c | 119 | clone_object("/obj/faith/sek_symbol.arm")->move(this_object());
kess.c | 121 | init_equip();
kess.c | 125 | request_weapon("dagger", 100))->move(this_object());
kess.c | 128 | do_command("tactics response parry");
kess.c | 129 | do_command("tactics parry both");
kess.c | 130 | do_command("tactics attitude offensive");
kess.c | 143 | set_virtual_move(1);
kess.c | 144 | set_move_after(30, 120);
kess.c | 145 | add_move_zone("Ankh-Morpork");
kess.c | 146 | add_move_zone("sek");
kess.c | 150 | add_enter_commands("#get_heart");
kess.c | 157 | add_combat_action(100, "maintenance", ({ "maintain_self" }) );
kess.c | 158 | add_combat_action(70, "fighting_stuff", ({ "fighting_stuff" }) );
kess.c | 159 | add_combat_action(50, "reequip", ({ "reequip" }));
kess.c | 167 | do_command( "get yellow rod" );
kess.c | 168 | do_command( "hold yellow rod" );
kess.c | 180 | do_command("cast rage on "+thing1->query_name());
kess.c | 183 | do_command("cast fear on "+thing1->query_name());
kess.c | 186 | do_command("cast paralysis on "+thing1->query_name());
kess.c | 189 | do_command("use rod to cast dustdevil");
kess.c | 192 | do_command("use rod to cast barrier");
kess.c | 195 | do_command("concentrate on "+thing1->query_name());
kess.c | 196 | do_command("kick "+thing1->query_name());
kess.c | 209 | adjust_gp( 200 );
kess.c | 214 | do_command( "use rod to cast sanctuary" );
kess.c | 217 | do_command( "cast calm on "+thing1->query_name());
kess.c | 220 | do_command( "cast cure medium wounds on kess" );
kess.c | 228 | call_out("get_heart", 3);
kess.c | 240 | do_command("hold dagger");
kess.c | 241 | do_command("get heart from corpse");
kess.c | 242 | do_command("eat heart");
kess.c | 243 | do_command("hold rod");
kess.c | 253 | adjust_hp(hp, attacker);
kess.c | 258 | init_command("cast cure medium wounds on kess");
kess.c | 262 | call_out("eek", 0);
kess.c | 268 | do_command("lose all");
kess.c | 269 | run_away();
althea.c | 34 | do_heal(object);
althea.c | 35 | check_injured();
althea.c | 36 | maintain_self(object, object);
althea.c | 37 | fighting_stuff(object, object);
althea.c | 38 | ritual_stuff(object, object);
althea.c | 41 | set_name("althea");
althea.c | 42 | set_short("Althea of Pishe");
althea.c | 43 | set_main_plural("Altheas of Pishe");
althea.c | 47 | add_adjective(({"arch", "cardinal", "of", "pishe"}));
althea.c | 48 | add_alias(({"priestess", "archcardinal", "cardinal"}));
althea.c | 49 | add_property("determinate","");
althea.c | 50 | add_property("unique", 1);
althea.c | 51 | set_gender("female");
althea.c | 52 | set_race("human");
althea.c | 53 | set_guild("priest");
althea.c | 54 | set_deity("pishe");
althea.c | 55 | set_level(400);
althea.c | 57 | set_height(140);
althea.c | 58 | set_weight(1000);
althea.c | 59 | set_al(-2000 - random(501));
althea.c | 60 | set_con(15);
althea.c | 61 | set_dex(13);
althea.c | 62 | set_int(12);
althea.c | 63 | set_str(15);
althea.c | 64 | set_wis(20);
althea.c | 66 | add_skill_level("fighting", 300, 0);
althea.c | 67 | add_skill_level("fighting.combat.melee.blunt", 150, 0);
althea.c | 68 | add_skill_level("faith", 200);
althea.c | 69 | add_skill_level("faith.rituals.misc.area", 300);
althea.c | 71 | add_skill_level("other.perception", 400, 0);
althea.c | 72 | add_skill_level("other.health", 200, 0);
althea.c | 73 | add_known_command("strike");
althea.c | 74 | add_known_command("crush");
althea.c | 76 | add_spell("cure light wounds", "/obj/rituals/curelight", "cast_spell");
althea.c | 77 | add_spell("cure serious wounds", "/obj/rituals/cureserious", "cast_spell");
althea.c | 78 | add_spell("cure critical wounds", "/obj/rituals/curecritical", "cast_spell");
althea.c | 79 | add_spell("minor shield", "/obj/rituals/minorshield", "cast_spell");
althea.c | 80 | add_spell("dust devil", "/obj/rituals/dustdevil", "cast_spell");
althea.c | 82 | add_combat_action(100, "maintenance", (: maintain_self :)) ;
althea.c | 83 | add_combat_action(70, "fighting_stuff", (: fighting_stuff :));
althea.c | 84 | add_combat_action(50, "ritual_stuff", (: ritual_stuff :));
althea.c | 86 | request_item("white cotton tunic", 100)->move(this_object());
althea.c | 87 | request_item("rope belt", 100)->move(this_object());
althea.c | 88 | request_item("soft leather shoes", 100)->move(this_object());
althea.c | 89 | clone_object("/obj/faith/pishe_symbol.ob")->move(this_object());
althea.c | 91 | do_command("tactics response parry");
althea.c | 92 | do_command("tactics attitude defensive");
althea.c | 104 | set_virtual_move(1);
althea.c | 105 | set_move_after(30, 120);
althea.c | 106 | add_move_zone("Ankh-Morpork");
althea.c | 107 | add_move_zone("Temple");
althea.c | 108 | set_wimpy(10);
althea.c | 115 | add_respond_to_with(({ "@smile", "althea" }), "smile $hname$");
althea.c | 119 | add_enter_commands((: check_injured :));
althea.c | 122 | request_item("cleric rod", 100);
althea.c | 123 | set_enchant(flail->query_max_enchant() / 2);
althea.c | 124 | whichone(7);
althea.c | 125 | move(this_object());
althea.c | 126 | call_out((: init_equip :), 2);
althea.c | 140 | queue_command("get flail");
althea.c | 141 | queue_command("hold flail");
althea.c | 148 | adjust_gp(200);
althea.c | 151 | do_command("cast cure serious wounds on althea");
althea.c | 156 | do_command("use flail to cast sanctuary");
althea.c | 160 | do_command("cast dust devil on althea");
althea.c | 164 | do_command("cast minor shield on althea");
althea.c | 168 | do_command("cast cure light wounds on althea");
althea.c | 178 | do_command("concentrate " + thing1->query_name());
althea.c | 179 | do_command("tactics attitude offensive" );
althea.c | 180 | do_command("crush "+ thing1->query_name() + " with flail");
althea.c | 189 | do_command( "cast minor shield on althea" );
althea.c | 192 | do_command( "use flail to cast barrier" );
althea.c | 196 | do_command("cast dust devil on althea");
althea.c | 197 | do_command("cast dust devil on althea");
althea.c | 198 | do_command("cast dust devil on althea");
althea.c | 202 | do_command("use flail to cast fear on " + thing1->query_name());
althea.c | 206 | do_command("tactics attitude defensive");
althea.c | 211 | do_command("say I'm not going to heal you!");
althea.c | 215 | if (victim->query_hp() >
althea.c | 217 | short()+".");
althea.c | 228 | do_command("say I thought wizards didn't believe in gods?");
althea.c | 229 | do_command("smirk");
althea.c | 233 | if (victim->query_al() >
althea.c | 234 | do_command("say You are far too wicked for Pishe's healing.");
althea.c | 238 | do_command("say May the power of Pishe heal you.");
althea.c | 240 | the_short() + " and starts to pray softly.\n");
althea.c | 248 | tell_room(environment(), "Gradually the light fades.\n");
althea.c | 249 | tell_object(victim, "You feel much better.\n");
althea.c | 252 | set_hp(victim->query_max_hp());
althea.c | 253 | adjust_gp(-HEAL_COST);
althea.c | 262 | query_al() < -300 :));
althea.c | 264 | this_object() });
althea.c | 271 | do_command("say Oh my, " + person->short()+ " you don't look so good.");
althea.c | 272 | do_command("say Allow me to heal you.");
althea.c | 273 | call_out((: do_heal($1) :), 1, person);
althea.c | 283 | do_command( "protect dickens" );
althea.c | 284 | attack_ob( attacker );
althea.c | 288 | event_fight_in_progress( attacker, victim );
althea.c | 294 | adjust_hp(hp, attacker);
althea.c | 297 | call_out("eek", 0);
althea.c | 303 | init_command("use flail to cast sanctuary", 1);
althea.c | 304 | init_command("cast cure critical wounds on althea", 2);
althea.c | 305 | run_away();
althea.c | 310 | do_command( "say Whoops, I must have dropped my precious flail!" );
althea.c | 311 | do_command( "get " + file_name( ob ) );
althea.c | 312 | do_command( "hold " + file_name( ob ) );
althea.c | 317 | event_enter( ob, mess, from );
althea.c | 321 | call_out( (: check_fumble :), 1, ob );
matcher.c | 7 | add_cmds( object player );
matcher.c | 8 | do_add( string command, string pattern );
matcher.c | 9 | do_remove( int i );
matcher.c | 12 | read_msg();
matcher.c | 17 | set_name( "matcher" );
matcher.c | 18 | set_short( "Tannah's pattern matcher" );
matcher.c | 19 | add_property( "determinate", "" );
matcher.c | 20 | add_alias( "pattern matcher" );
matcher.c | 25 | add_adjective( ({ "handy", "patterned" }) );
matcher.c | 26 | set_weight( 1 );
matcher.c | 27 | set_value( 0 );
matcher.c | 28 | add_property( "no recycling", 1 );
matcher.c | 32 | add_cmds( this_player() );
matcher.c | 36 | set_read_mess( (: read_msg :) );
matcher.c | 39 | do_add( $4[0], $4[1] ) :) );
matcher.c | 41 | do_remove( $4[0] ) :) );
matcher.c | 44 | sizeof( cmds );
matcher.c | 52 | this_player()->remove_object( this_object(), 1 );
matcher.c | 53 | add_cmds( this_player() );
matcher.c | 61 | printf( "Invalid command number.\n" );
matcher.c | 67 | this_player()->remove_object( this_object(), 1 );
matcher.c | 68 | add_cmds( this_player() );
matcher.c | 74 | printf( "Indirect objects: %O\n", indirect_obs );
matcher.c | 75 | printf( "Direct match: %s\n", dir_match );
matcher.c | 76 | printf( "Indirect match: %O\n", indirect_match );
matcher.c | 77 | printf( "Args: %O\n", args );
matcher.c | 78 | printf( "Pattern: \"%s\"\n", pattern );
matcher.c | 89 | sizeof( cmds );
matcher.c | 100 | printf( "Commands and patterns added:\n%O\n", cmds );
terrain_teacher.c | 18 | costume_normal();
terrain_teacher.c | 19 | costume_desert();
terrain_teacher.c | 20 | costume_wet();
terrain_teacher.c | 21 | costume_cold();
terrain_teacher.c | 22 | to_terrain();
terrain_teacher.c | 23 | from_terrain(string to);
terrain_teacher.c | 445 | set_name("terrain teacher");
terrain_teacher.c | 446 | add_alias("teacher");
terrain_teacher.c | 447 | set_short("terrain teacher");
terrain_teacher.c | 448 | add_property("determinate", "the ");
terrain_teacher.c | 449 | add_property("unique", 1);
terrain_teacher.c | 454 | set_race("human");
terrain_teacher.c | 455 | set_guild("monk");
terrain_teacher.c | 456 | set_level(50);
terrain_teacher.c | 457 | set_gender(1);
terrain_teacher.c | 459 | add_effect("/std/effects/other/wetness", 10000);
terrain_teacher.c | 468 | request_item("large backpack", 80);
terrain_teacher.c | 469 | if (!backpack) backpack = ARMOURY->request_item("black leather backpack", 80);
terrain_teacher.c | 470 | if (!backpack) backpack = ARMOURY->request_item("small backpack", 80);
terrain_teacher.c | 471 | if (backpack) backpack->move(this_object());
terrain_teacher.c | 473 | request_item("large leather boots", 20);
terrain_teacher.c | 474 | if (obj) obj->move(this_object());
terrain_teacher.c | 476 | request_item("thermal underwear", 10);
terrain_teacher.c | 477 | if (obj) obj->move(this_object());
terrain_teacher.c | 479 | request_item("fawn cotton trousers", 50);
terrain_teacher.c | 480 | if (obj) obj->move(this_object());
terrain_teacher.c | 482 | request_item("leather belt", 50);
terrain_teacher.c | 483 | if (obj) obj->move(this_object());
terrain_teacher.c | 485 | request_item("black wool socks", 40);
terrain_teacher.c | 486 | if (obj) obj->move(this_object());
terrain_teacher.c | 488 | request_item("gaudy shirt", 35);
terrain_teacher.c | 489 | if (obj) obj->move(this_object());
terrain_teacher.c | 491 | request_item("brown felt hat", 10);
terrain_teacher.c | 492 | if (obj) obj->move(this_object());
terrain_teacher.c | 494 | request_item("white cotton toga", 80);
terrain_teacher.c | 495 | if (obj) obj->move(backpack);
terrain_teacher.c | 497 | request_item("yellow raincoat", 60);
terrain_teacher.c | 498 | if (obj) obj->move(backpack);
terrain_teacher.c | 500 | request_item("old black cloak", 72);
terrain_teacher.c | 501 | if (obj) obj->move(backpack);
terrain_teacher.c | 503 | request_item("amusing earmuffs", 100);
terrain_teacher.c | 504 | if (obj) obj->move(backpack);
terrain_teacher.c | 506 | init_equip();
terrain_teacher.c | 509 | find_object(TERRAIN_TUTORIAL "foyer");
terrain_teacher.c | 517 | check_anyone_here();
terrain_teacher.c | 521 | heart_beat();
terrain_teacher.c | 526 | init_command("emote is beginning to look a bit impatient.", 1);
terrain_teacher.c | 528 | init_command("emote begins tapping his foot.", 1);
terrain_teacher.c | 531 | short(), 1);
terrain_teacher.c | 532 | call_out("come", 3 + costume_normal(), hq);
terrain_teacher.c | 543 | query_property(PROPERTY);
terrain_teacher.c | 545 | init_command("think", 1);
terrain_teacher.c | 546 | init_command("'Odd, you seem to have done more lessons than I know.", 2);
terrain_teacher.c | 547 | init_command("'I'm afraid I have nothing to teach you.", 3);
terrain_teacher.c | 548 | remove_property(PROPERTY);
terrain_teacher.c | 555 | costume_normal();
terrain_teacher.c | 556 | costume_desert();
terrain_teacher.c | 557 | costume_wet();
terrain_teacher.c | 558 | costume_cold();
terrain_teacher.c | 560 | init_command(lessons[lesson][0], delay + 2);
terrain_teacher.c | 562 | call_out("speech", delay + 10);
terrain_teacher.c | 569 | short() + "?  I'm not teaching you.", 0);
terrain_teacher.c | 577 | this_object() }) );
terrain_teacher.c | 584 | this_object() }) );
terrain_teacher.c | 591 | this_object()->a_short() + " stomps away" );
terrain_teacher.c | 592 | init_command( "emote looks around", 1 );
terrain_teacher.c | 593 | init_command( "sigh", 4 );
terrain_teacher.c | 594 | init_command( "get sign", 7 );
terrain_teacher.c | 595 | init_command( "emote looks at the sign", 9 );
terrain_teacher.c | 596 | init_command( "sit on bench", 10 );
terrain_teacher.c | 597 | init_command( "'What can I do for you?", 12 );
terrain_teacher.c | 601 | costume_normal();
terrain_teacher.c | 608 | remove_property(PROPERTY);
terrain_teacher.c | 610 | add_property(PROPERTY, lesson);
terrain_teacher.c | 612 | init_command("emote looks around", delay + 1);
terrain_teacher.c | 613 | init_command("sigh", delay + 4);
terrain_teacher.c | 614 | init_command("get sign", delay + 7);
terrain_teacher.c | 615 | init_command("emote looks at the sign", delay + 9);
terrain_teacher.c | 616 | init_command("sit on bench", delay + 10);
terrain_teacher.c | 624 | query_property(PROPERTY);
terrain_teacher.c | 630 | init_command(lessons[lesson][3], delay + 3);
terrain_teacher.c | 631 | call_out("done", delay + 4);
terrain_teacher.c | 632 | call_out( (: speeching = 0 :), delay + 5);
terrain_teacher.c | 637 | call_out(lessons[lesson][2][lesson_step], ++delay);
terrain_teacher.c | 639 | init_command(lessons[lesson][2][lesson_step], ++delay);
terrain_teacher.c | 642 | init_command(lessons[lesson][3], delay + 3);
terrain_teacher.c | 643 | call_out("done", delay + 4);
terrain_teacher.c | 644 | call_out( (: speeching = 0 :), delay + 5);
terrain_teacher.c | 647 | while (lessons[lesson][2][lesson_step]);
terrain_teacher.c | 649 | init_command("emote waits for " + pupil->a_short(), ++delay);
terrain_teacher.c | 650 | call_out( (: speeching = 0 :), ++delay);
terrain_teacher.c | 657 | call_out("annoyed_coming", 0, where);
terrain_teacher.c | 659 | call_out("come", 10, where);
terrain_teacher.c | 661 | call_out("coming", 2, where);
terrain_teacher.c | 664 | init_command("'Oh, a pupil!", 2);
terrain_teacher.c | 671 | tell_object(pupil, "Something snags you through space\n");
terrain_teacher.c | 673 | short() + " looks surprised and disappears.");
terrain_teacher.c | 679 | tell_object(pupil, "Something snags you through space\n");
terrain_teacher.c | 681 | short() + " looks surprised and disappears.");
terrain_teacher.c | 688 | living($1) && $1->query_gender() != 1 :) ));
terrain_teacher.c | 704 | modesty();
terrain_teacher.c | 705 | init_command("remove backpack", ++i);
terrain_teacher.c | 706 | init_command("remove toga, raincoat, cloak, earmuffs", ++i);
terrain_teacher.c | 707 | init_command("put toga, raincoat, cloak, earmuffs in backpack", ++i);
terrain_teacher.c | 708 | init_command("get trousers, belt, shirt, hat from backpack", ++i);
terrain_teacher.c | 709 | init_command("equip", ++i);
terrain_teacher.c | 718 | modesty();
terrain_teacher.c | 719 | init_command("remove backpack", ++i);
terrain_teacher.c | 720 | init_command("remove raincoat, cloak, earmuffs", ++i);
terrain_teacher.c | 721 | init_command("remove belt, hat, shirt", ++i);
terrain_teacher.c | 722 | init_command("remove trousers", ++i);
terrain_teacher.c | 725 | init_command("get toga from backpack", ++i);
terrain_teacher.c | 726 | init_command("equip", ++i);
terrain_teacher.c | 735 | modesty();
terrain_teacher.c | 736 | init_command("remove backpack", ++i);
terrain_teacher.c | 737 | init_command("remove toga, cloak, earmuffs", ++i);
terrain_teacher.c | 738 | init_command("put toga, cloak, earmuffs in backpack", ++i);
terrain_teacher.c | 741 | init_command("equip", ++i);
terrain_teacher.c | 750 | modesty();
terrain_teacher.c | 751 | init_command("remove backpack", ++i);
terrain_teacher.c | 752 | init_command("remove toga, raincoat, hat", ++i);
terrain_teacher.c | 753 | init_command("put toga, raincoat, hat in backpack", ++i);
terrain_teacher.c | 756 | init_command("equip", ++i);
terrain_teacher.c | 766 | call_out("speech", 1);
terrain_teacher.c | 773 | init_command("pat " + who->short(), 1);
terrain_teacher.c | 776 | short(), 3);
terrain_teacher.c | 779 | short() + " right now.", 1);
terrain_teacher.c | 783 | set_heart_beat(1);
terrain_teacher.c | 786 | init_command("drop sign", 3);
terrain_teacher.c | 787 | init_command("stand", 4);
terrain_teacher.c | 788 | init_command("'follow me, if you will", 6);
terrain_teacher.c | 795 | init_command("emote hums quietly to himself.", 2);
terrain_teacher.c | 796 | init_command("mumble rude pupils", 5);
npc_example.c | 20 | set_name( "ralph" );
npc_example.c | 24 | set_short( "Ralph the spotted giraffe" );
npc_example.c | 28 | add_property( "determinate", "" );
npc_example.c | 35 | add_adjective( "spotted" );
npc_example.c | 42 | set_main_plural("Ralph the spotted giraffes");
npc_example.c | 46 | add_plural(( { "ralphs", "giraffes" } ));
npc_example.c | 52 | add_plural( "keys" );
npc_example.c | 54 | add_alias(( { "giraffe", "Ralph" } ));
npc_example.c | 66 | add_property( "unique", 1 );
npc_example.c | 73 | set_race( "horse" );
npc_example.c | 80 | set_guild("wizard");
npc_example.c | 87 | set_height( 300 );
npc_example.c | 90 | set_weight( 1600 );
npc_example.c | 94 | set_gender( 1 );
npc_example.c | 97 | set_al( -500 );
npc_example.c | 102 | set_level( 15 );
npc_example.c | 108 | set_con(18);
npc_example.c | 109 | set_dex(18);
npc_example.c | 110 | set_str(16);
npc_example.c | 111 | set_wis(15);
npc_example.c | 112 | set_int(15);
npc_example.c | 116 | add_move_zone( "Short" );
npc_example.c | 117 | add_move_zone( "Filigree" );
npc_example.c | 121 | set_move_after( 50, 60 );
npc_example.c | 125 | set_virtual_move(1);
npc_example.c | 174 | request_weapon("meat cleaver", 80+random(20))->move(this_object());
npc_example.c | 175 | request_armour("gigantic dog collar", 100)->move(this_object());
npc_example.c | 176 | request_armour("straw hat", 80)->move(this_object());
npc_example.c | 183 | clone_object("/d/am/items/comb");
npc_example.c | 184 | move( this_object() );
npc_example.c | 188 | init_equip();
master.c | 25 | capitalize(DOMAIN);
master.c | 31 | check_permission(euid, path, mask);
master.c | 42 | valid_read(string *path, string euid, string funct);
master.c | 44 | valid_write(string *path, string euid, string funct);
common.c | 18 | set_dom(DOMAIN);
common.c | 19 | set_light(100);
common.c | 20 | add_exit("drum", "/d/am/am/mendeddrum", "door");
common.c | 21 | set_short("Common room of "+DOM_TITLE);
common.c | 28 | add_alias("chairs", "chair");
common.c | 29 | add_alias("cloths", "cloth");
common.c | 30 | add_alias("motifs", "motif");
common.c | 31 | add_alias("figurines", "figurine");
common.c | 62 | clone_object("/obj/misc/board");
common.c | 63 | set_datafile(DOMAIN);
common.c | 64 | move(this_object());
common.c | 69 | if(board) board->dest_me();
common.c | 70 | dest_me();
loader.c | 20 | seteuid((string)"/secure/master"->creator_file(file_name()));
loader.c | 21 | unguarded((: restore_object, file_name(this_object()) :));
loader.c | 24 | sizeof(pre_load);
loader.c | 25 | printf(DOMAIN+" pre_loading "+pre_load[i]+".\n");
loader.c | 27 | call_out("do_load", 0, pre_load[i]);
loader.c | 33 | call_other(str, "??");
loader.c | 39 | save_object(file_name(this_object()));
loader.c | 48 | delete(pre_load, i, 1);
loader.c | 49 | save_object(file_name(this_object()));
mtf2.c | 35 | return ([ ]);
mtf2.c | 80 | debug_printf("%0", exits);
mtf2.c | 100 | keys(map[ypos][xpos]->exits);
mtf2.c | 114 | if(!find_nearby(ny, nx, ++distance);
mtf2.c | 211 | find_nearby(ypos, xpos);
mtf2.c | 228 | query_multiple_short(exits);
mtf2.c | 234 | debug_printf("%O", exits);
mtf2.c | 253 | set_short(\"" + room->short + "\");
mtf2.c | 254 | set_long(\"" + room->long + "\\n\");
mtf2.c | 255 | set_light( 80 );
mtf2.c | 268 | member_array(exit, DIRECTIONS);
mtf2.c | 272 | sprintf("  add_exit(\"%s\", %s, \"secret\");
mtf2.c | 275 | sprintf("  add_exit(\"%s\", %s, \"road\");
mtf2.c | 283 | mkdir(fdir + "/" + room->basename);
mtf2.c | 287 | write_file(fdir + "/" + room->basename + "/path.h", tmp, 1);
mtf2.c | 290 | debug_printf("Str: %s", str);
mtf2.c | 303 | explode(read_file(mapfile), "\n");
mtf2.c | 304 | allocate(sizeof(lines));
mtf2.c | 306 | sizeof(lines);
mtf2.c | 307 | allocate(strlen(lines[i]));
mtf2.c | 308 | strlen(lines[i]);
mtf2.c | 311 | debug_printf("%c:%s", lines[i][j], key_data[lines[i][j]][2]);
mtf2.c | 315 | debug_printf("Key data too small: %O", key_data[lines[i][j]]);
mtf2.c | 345 | explode(read_file(keyfile), "\n");
mtf2.c | 347 | explode(line[1..], "\t");
mtf2.c | 348 | debug_printf("%c: %s", line[0], key_data[line[0]][2]);
mtf2.c | 364 | this_player()->get_files(mapfile);
mtf2.c | 372 | this_player()->query_path() });
mtf2.c | 374 | this_player()->get_files(fdir);
mtf2.c | 384 | this_player()->get_files(keyfile);
mtf2.c | 391 | read_keys(keyfile);
mtf2.c | 392 | read_map(mapfile);
mtf2.c | 394 | debug_printf("Map read %O", map);
mtf2.c | 396 | sizeof(map);
mtf2.c | 397 | sizeof(map[ y ]);
mtf2.c | 399 | get_exits(y, x);
mtf2.c | 402 | reset_eval_cost();
mtf2.c | 403 | sizeof(map);
mtf2.c | 404 | sizeof(map[ y ]);
mtf2.c | 406 | calc_long(y, x);
mtf2.c | 408 | reset_eval_cost();
mtf2.c | 409 | sizeof(map);
mtf2.c | 410 | sizeof(map[ y ]);
mtf2.c | 412 | write_this_file(fdir, y, x);
mtf2.c | 422 | write_file( fdir+ "/path.h", pstr, 1 );
mtf.c | 10 | keys(keys);
mtf.c | 30 | debug_printf("Room %s has exit to %d,%d [%d,%d]", room, x+xpos,y+ypos, x, y);
mtf.c | 36 | debug_printf("%O", exits);
mtf.c | 45 | debug_printf("Creating %s", fname);
mtf.c | 51 | set_short(\"" + sname + "\");
mtf.c | 54 | set_light( 80 );
mtf.c | 57 | sizeof(LIST);
mtf.c | 64 | sizeof(LIST)], i+1);
mtf.c | 66 | map_delete(exits, LIST[(i)]);
mtf.c | 67 | map_delete(exits, LIST[(i+2) % sizeof(LIST)]);
mtf.c | 72 | sprintf("  add_exit(\"%s\", %s, \"road\");
mtf.c | 79 | debug_printf("Creating directory %s", dir);
mtf.c | 80 | mkdir(dir);
mtf.c | 84 | write_file(dir + "/path.h", tmp, 1);
mtf.c | 87 | write_file( dir + "/" + fname + ".c", str, 1 );
mtf.c | 95 | explode(read_file(mapfile), "\n");
mtf.c | 96 | allocate(sizeof(lines));
mtf.c | 98 | sizeof(lines);
mtf.c | 99 | allocate(strlen(lines[i]));
mtf.c | 100 | strlen(lines[i]);
mtf.c | 113 | log_file("/w/ceres/tmp.log", "%O", map);
mtf.c | 123 | explode(read_file(keyfile), "\n");
mtf.c | 125 | explode(line[1..], "\t");
mtf.c | 141 | this_player()->get_files(mapfile);
mtf.c | 149 | this_player()->query_path() });
mtf.c | 151 | this_player()->get_files(fdir);
mtf.c | 161 | this_player()->get_files(keyfile);
mtf.c | 168 | read_keys(keyfile);
mtf.c | 169 | read_map(mapfile, keys);
mtf.c | 171 | debug_printf("Map read %O", temp_map);
mtf.c | 173 | sizeof(temp_map);
mtf.c | 174 | reset_eval_cost();
mtf.c | 175 | sizeof(temp_map[ y ]);
mtf.c | 177 | get_exits(y, x, temp_map, keys);
mtf.c | 179 | debug_printf("%O", temp_map[y][x]);
mtf.c | 190 | debug_printf("finished with files.");
mtf.c | 198 | write_file( fdir+ "/path.h", pstr, 1 );
entrance.c | 6 | set_short("entrance");
entrance.c | 9 | set_light(70);
entrance.c | 11 | add_exit("pumpkin", CONFIG_START_LOCATION, "road");
hospital.c | 39 | ok_to_clone();
hospital.c | 41 | get_weapon(object ob, string *items);
hospital.c | 42 | get_armour(object ob, string *items);
hospital.c | 43 | get_jewellery(object ob, string *items);
hospital.c | 46 | set_keep_room_loaded(1);
hospital.c | 47 | time();
hospital.c | 48 | allocate( 50 );
hospital.c | 50 | if ( file_size( SAVE_FILE +".o" ) >
hospital.c | 51 | unguarded( (: restore_object, SAVE_FILE :) );
hospital.c | 54 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 60 | allocate( MAX_MOVERS );
hospital.c | 61 | call_out( "check_movers", 10 );
hospital.c | 62 | call_out( "housekeeping", INTERVAL );
hospital.c | 76 | if ( random( 100 ) >
hospital.c | 87 | time();
hospital.c | 94 | query_al();
hospital.c | 97 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 98 | call_out( "housekeeping", INTERVAL );
hospital.c | 104 | allocate( 3 );
hospital.c | 105 | allocate( 4 );
hospital.c | 114 | sizeof( alignments );
hospital.c | 115 | sizeof( alignments );
hospital.c | 131 | roll_MdN( al_data[ 1 ], al_data[ 2 ] );
hospital.c | 139 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 149 | log_file("HOSPITAL_DATA", "Hospital: add_mover called with %O.\n", thing );
hospital.c | 152 | random( MAX_MOVERS / 2 );
hospital.c | 167 | get_monster( city[ random( sizeof( city ) ) ] );
hospital.c | 169 | query_property( "monster type" ) );
hospital.c | 170 | add_move_zone( "Pumpkin" );
hospital.c | 171 | add_mover( thing );
hospital.c | 175 | clone_object( CHARS + "dog" );
hospital.c | 177 | set_type( "small" );
hospital.c | 179 | set_type( "large" );
hospital.c | 182 | add_effect( "/std/effects/npc/eat_edible" );
hospital.c | 183 | add_effect( "/std/effects/npc/savage_corpse" );
hospital.c | 184 | add_property( "monster type", type );
hospital.c | 185 | add_property("animal type", type);
hospital.c | 188 | clone_object( CHARS + "child_human" );
hospital.c | 192 | clone_object(MONSTER);
hospital.c | 193 | add_property("monster type", type);
hospital.c | 194 | set_name("guard");
hospital.c | 195 | add_adjective("city");
hospital.c | 196 | set_main_plural( "city guards" );
hospital.c | 197 | set_short("city guard");
hospital.c | 200 | set_race("human");
hospital.c | 201 | set_gender("male");
hospital.c | 202 | set_guild("fighter");
hospital.c | 203 | set_level(8);
hospital.c | 204 | set_al( pick_al() / 5 );
hospital.c | 205 | adjust_money( 5 + random( 10 ), "Pumpkin pence" );
hospital.c | 216 | request_weapon("long sword", 40+random(40))->move(ob);
hospital.c | 218 | request_armour("hard leather cap", 70 + random(30))->move(ob);
hospital.c | 219 | init_equip();
hospital.c | 222 | clone_object(MONSTER);
hospital.c | 223 | set_name("mercenary");
hospital.c | 224 | set_main_plural( "mercenaries" );
hospital.c | 225 | add_plural( "mercenaries" );
hospital.c | 226 | add_adjective("tough");
hospital.c | 227 | set_race("human");
hospital.c | 228 | set_class("fighter");
hospital.c | 229 | set_level( 50 + roll_MdN( 5, 50 ) );
hospital.c | 230 | set_al( pick_al() );
hospital.c | 231 | set_gender(random(2) + 1);
hospital.c | 234 | query_objective()+".\n");
hospital.c | 235 | adjust_money( 5 + random( 50 ), "Ankh-Morpork pence" );
hospital.c | 236 | adjust_money( 1 + random( 5 ), "Ankh-Morpork dollar" );
hospital.c | 250 | get_armour(ob, ({"chainmail", "splintmail", "ringmail"}));
hospital.c | 251 | add_property("monster type", type);
hospital.c | 252 | init_equip();
hospital.c | 255 | clone_object(MONSTER);
hospital.c | 256 | set_name("rat");
hospital.c | 257 | set_short("rat");
hospital.c | 258 | set_race("rat");
hospital.c | 259 | set_level( random( 1 + random( 3 ) ) );
hospital.c | 260 | add_alias("city rat");
hospital.c | 261 | set_main_plural("rats");
hospital.c | 262 | add_adjective("dirty");
hospital.c | 263 | add_adjective("city");
hospital.c | 272 | set_wimpy( 10 );
hospital.c | 279 | add_effect( "/std/effects/npc/eat_edible" );
hospital.c | 280 | add_effect( "/std/effects/npc/savage_corpse" );
hospital.c | 281 | add_property("monster type", type);
hospital.c | 282 | add_property("animal type", type);
hospital.c | 285 | clone_object(MONSTER);
hospital.c | 286 | set_name("cockroach");
hospital.c | 287 | set_short("cockroach");
hospital.c | 288 | set_race("cockroach");
hospital.c | 289 | set_level( random( 1 + random( 3 ) ) );
hospital.c | 290 | set_main_plural("cockroaches");
hospital.c | 291 | add_adjective("dirty");
hospital.c | 292 | add_alias("roach");
hospital.c | 304 | set_wimpy( 30 );
hospital.c | 311 | add_property("monster type", type);
hospital.c | 312 | add_property("animal type", type);
hospital.c | 315 | clone_object(MONSTER);
hospital.c | 316 | set_name("failure");
hospital.c | 317 | set_short("failure");
hospital.c | 319 | file_name( previous_object() ) +".\n" );
hospital.c | 320 | add_property( "monster type", "failure:"+ type );
hospital.c | 327 | move(ob);
hospital.c | 332 | move(ob);
hospital.c | 337 | move(ob);
hospital.c | 346 | query_property("monster type");
hospital.c | 347 | query_property("start location");
hospital.c | 355 | get_monster( explode( nam, ":" )[ 0 ] );
hospital.c | 356 | add_monster(player, ob);
hospital.c | 357 | call_out("do_move", 10, ({ ob, dest }) );
hospital.c | 361 | move(junk[1]);
hospital.c | 366 | query_name();
hospital.c | 371 | run_away();
hospital.c | 376 | previous_object()->attack_ob(ob1);
hospital.c | 387 | if ( sizeof( empties ) >
hospital.c | 398 | log_file("HOSPITAL_DATA", "Hospital: move_monster called with %O.\n", thing );
hospital.c | 406 | add_mover( thing );
hospital.c | 409 | query_move_zones();
hospital.c | 413 | query_zones();
hospital.c | 419 | member_array( zone, movez );
hospital.c | 425 | move( place );
hospital.c | 426 | add_monster( 0, thing );
hospital.c | 427 | announce_entry( thing );
hospital.c | 429 | add_mover( thing );
hospital.c | 432 | environment( thing );
hospital.c | 435 | add_mover( thing );
hospital.c | 437 | set_destination( direc );
hospital.c | 438 | query_destination( direc );
hospital.c | 444 | query_zones();
hospital.c | 446 | query_zones( dest );
hospital.c | 450 | member_array( zone, movez );
hospital.c | 457 | find_rel( direc, 0 );
hospital.c | 473 | call_out( "check_movers", 10 );
hospital.c | 479 | call_out( "move_monster", when, thing );
hospital.c | 488 | if(time() >
hospital.c | 489 | time();
hospital.c | 494 | return ( am_npcs < MAX_AM_LIVING );
hospital.c | 499 | return ({ am_npcs, last_check });
parcel_post.c | 6 | set_short("Parcel Post");
parcel_post.c | 11 | set_light(70);
parcel_post.c | 13 | add_exit("south", CRUMPT + "post_office", "south");
parcel_post.c | 15 | add_property("place", "Pumpkin");
bank.c | 6 | set_short("Pumpkin's Bank");
bank.c | 17 | add_item("pumpkin", "There are little pumpkins everywhere in the room.");
bank.c | 19 | set_light(70);
bank.c | 21 | set_percentage(95);
bank.c | 22 | set_place("Pumpkin");
bank.c | 24 | add_exit("south", CRUMPT + "crumpt7", "door");
bank.c | 26 | add_property("place", "Pumpkin");
club_office.c | 7 | set_light(70);
club_office.c | 8 | set_club_control_type(CLUB_ROOM_CLUB_ONLY);
club_office.c | 9 | set_short("Club control room");
club_office.c | 28 | set_not_replaceable(1);
club_office.c | 30 | clone_object("/obj/misc/top_clubs")->move(this_object());
club_office.c | 32 | add_exit("south", PATH + "crumpt6", "door");
club_office.c | 34 | add_property("place", "Pumpkin");
crumpt3.c | 6 | set_short("Crumpet Circle");
crumpt3.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt3.c | 8 | set_light( 80 );
crumpt3.c | 9 | add_exit("north", CRUMPT + "crumpt1", "road");
crumpt3.c | 10 | add_exit("south", CRUMPT + "crumpt5", "road");
crumpt3.c | 12 | set_monster( 1, "city" );
crumpt1.c | 6 | set_short("Crumpet Circle");
crumpt1.c | 9 | set_light( 80 );
crumpt1.c | 10 | add_exit("northeast", PUMPKIN + "pumpkin1", "road");
crumpt1.c | 11 | add_exit("southwest", CRUMPT + "crumpt2", "road");
crumpt1.c | 12 | add_exit("south", CRUMPT + "crumpt3", "road");
crumpt1.c | 14 | set_monster( 1, "city" );
crumpt5.c | 6 | set_short("Crumpet Circle");
crumpt5.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt5.c | 8 | set_light( 80 );
crumpt5.c | 9 | add_exit("southwest", CRUMPT + "crumpt7", "road");
crumpt5.c | 10 | add_exit("north", CRUMPT + "crumpt3", "road");
crumpt5.c | 12 | set_monster( 1, "city" );
crumpt6.c | 6 | set_short("Crumpet Circle");
crumpt6.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt6.c | 8 | set_light( 80 );
crumpt6.c | 9 | add_exit("northeast", CRUMPT + "crumpt4", "road");
crumpt6.c | 10 | add_exit("south", CRUMPT + "crumpt8", "road");
crumpt6.c | 11 | add_exit("north", PATH + "club_office", "door");
crumpt6.c | 13 | set_monster( 1, "city" );
crumpt4.c | 6 | set_short("Crumpet Circle");
crumpt4.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt4.c | 8 | set_light( 80 );
crumpt4.c | 9 | add_exit("northeast", CRUMPT + "crumpt2", "road");
crumpt4.c | 10 | add_exit("southwest", CRUMPT + "crumpt6", "road");
crumpt4.c | 11 | add_exit("north", CRUMPT + "family_office", "door");
crumpt4.c | 13 | set_monster( 1, "city" );
crumpt7.c | 6 | set_short("Crumpet Circle");
crumpt7.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt7.c | 8 | set_light( 80 );
crumpt7.c | 9 | add_exit("northeast", CRUMPT + "crumpt5", "road");
crumpt7.c | 10 | add_exit("southwest", CRUMPT + "crumpt9", "road");
crumpt7.c | 11 | add_exit("north", CRUMPT + "bank", "door");
crumpt7.c | 13 | set_monster( 1, "city" );
post_office.c | 6 | do_mail( string words );
post_office.c | 11 | add_help_file("mail_room");
post_office.c | 12 | set_short("Post Office");
post_office.c | 13 | set_light(70);
post_office.c | 23 | add_exit("southeast", CRUMPT + "crumpt2", "door");
post_office.c | 24 | add_exit("north", CRUMPT + "parcel_post", "corridor");
post_office.c | 26 | add_property("place", "Pumpkin");
post_office.c | 31 | clone_object( "/net/obj/dict" );
post_office.c | 32 | add_property( "there", "attached to the counter" );
post_office.c | 33 | reset_get();
post_office.c | 34 | move( this_object() );
post_office.c | 39 | init();
post_office.c | 40 | add_command("mail", "<string>", (: do_mail($4[0]) :));
post_office.c | 41 | add_command("mail", "", (: do_mail(0) :));
post_office.c | 45 | return (int)MAIL_TRACK->mail( words );
post_office.c | 52 | clone_object( CHARS +"post_et" );
post_office.c | 53 | set_home( file_name( this_object() ) );
post_office.c | 54 | move( this_object(), "$N pop$s out of the counter and grab$s the mail." );
post_office.c | 56 | goto_player( recipient, from );
post_office.c | 58 | goto_dest( COMM_ROOM, from );
crumpt2.c | 6 | set_short("Crumpet Circle");
crumpt2.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt2.c | 8 | set_light( 80 );
crumpt2.c | 9 | add_exit("northeast", CRUMPT + "crumpt1", "road");
crumpt2.c | 10 | add_exit("southwest", CRUMPT + "crumpt4", "road");
crumpt2.c | 11 | add_exit("northwest", CRUMPT + "post_office", "door");
crumpt2.c | 13 | set_monster( 1, "city" );
crumpt9.c | 6 | set_short("Crumpet Circle");
crumpt9.c | 7 | set_long("This is the end of Crumpet Circle\n");
crumpt9.c | 8 | set_light( 80 );
crumpt9.c | 9 | add_exit("northeast", CRUMPT + "crumpt7", "road");
crumpt9.c | 10 | add_exit("west", CRUMPT + "crumpt8", "road");
crumpt9.c | 12 | set_monster( 1, "city" );
crumpt8.c | 6 | set_short("Crumpet Circle");
crumpt8.c | 9 | set_light( 80 );
crumpt8.c | 10 | add_exit("east", CRUMPT + "crumpt9", "road");
crumpt8.c | 11 | add_exit("north", CRUMPT + "crumpt6", "road");
crumpt8.c | 12 | add_exit("south", FRUITBAT + "fruitbat1", "road");
crumpt8.c | 14 | set_monster( 1, "city" );
family_office.c | 6 | check_playtester(string str, object ob, string special_mess);
family_office.c | 11 | set_light(100);
family_office.c | 12 | set_club_control_type(CLUB_ROOM_FAMILY_ONLY);
family_office.c | 13 | set_short("Family control room");
family_office.c | 49 | set_not_replaceable(1);
family_office.c | 51 | add_exit("south", PATH + "crumpt4", "door");
family_office.c | 53 | clone_object("/obj/misc/top_families");
family_office.c | 54 | move(this_object());
family_office.c | 56 | add_property("place", "Pumpkin");
cityroom.c | 57 | random( sizeof( froms ) ) ] +".\n" );
cityroom.c | 62 | add_empty( this_object() );
cityroom.c | 67 | get_monster( type );
cityroom.c | 68 | add_property( "start location", this_object() );
cityroom.c | 69 | this_object()->do_zoning( monsters[ number ] );
cityroom.c | 70 | move( this_object() );
cityroom.c | 71 | announce_entry( monsters[ number ] );
cityroom.c | 78 | call_out( "make_citymonster", 5 + random( 5 ), number );
cityroom.c | 92 | allocate( random( 1 + number ) );
cityroom.c | 101 | create();
cityroom.c | 103 | add_property( "room size", 20 );
cityroom.c | 104 | add_property( "room zone", ({ "Pumpkin" }) );
cityroom.c | 105 | add_extra_look( this_object() );
cityroom.c | 107 | this_object()->setup();
cityroom.c | 108 | this_object()->reset();
cityroom.c | 114 | call_out( "make_citymonster", 5 + random( 5 ), 0 );
cityroom.c | 119 | dest_me();
cityroom.c | 126 | clean_up( 0 );
cityroom.c | 155 | clone_object( "/obj/money" );
cityroom.c | 157 | adjust_money( 1, "Pumpkin cent" );
cityroom.c | 160 | adjust_money( 1, "Pumpkin dollar" );
cityroom.c | 162 | adjust_money( 10, "Pumpkin dollar" );
cityroom.c | 167 | if((time() - last_found) >
cityroom.c | 168 | choose_small_item();
cityroom.c | 170 | set_percentage(5 + random(30));
cityroom.c | 174 | time();
cityroom.c | 178 | if(sizeof(match_objects_for_existence("cockroach", this_object())) >
cityroom.c | 182 | get_monster( "cockroach" );
cityroom.c | 187 | if(sizeof(match_objects_for_existence("rodent", this_object())) >
cityroom.c | 191 | get_monster( "rodent" );
cityroom.c | 203 | this_player()->query_pronoun() +" throws it away.\n" );
cityroom.c | 205 | roll_MdN( 5, 60 ) );
cityroom.c | 212 | a_short() +" from "+ CREVICE +".\n" );
cityroom.c | 213 | say( (string)this_player()->a_short() +" looks closely at the ground.\n" );
cityroom.c | 215 | write( "You pick it up.\n" );
cityroom.c | 216 | say( (string)this_player()->query_pronoun() +" picks something up.\n" );
cityroom.c | 228 | member_array( old_thing, monsters );
cityroom.c | 233 | member_array( 0, monsters );
cityroom.c | 244 | call_out( "check_stuff", 30 );
cityroom.c | 251 | all_inventory( this_object() );
cityroom.c | 254 | call_out( "check_stuff", 30 );
cityroom.c | 262 | move( "/room/rubbish" );
cityroom.c | 268 | move( "/d/am/filigree/general_store" );
hospital.c | 38 | load_file();
hospital.c | 39 | save_file();
hospital.c | 40 | set_save_file(string new_save);
hospital.c | 41 | restore_default_npcs();
hospital.c | 42 | set_max_living(int new_living);
hospital.c | 43 | set_hospital_type(string new_type);
hospital.c | 44 | make_monster(string type);
hospital.c | 45 | get_monster(string type);
hospital.c | 46 | hospital_log_file(string file, string format, mixed *args ...);
hospital.c | 47 | get_item(object destination, string *items);
hospital.c | 48 | query_save_file();
hospital.c | 49 | query_max_living();
hospital.c | 50 | query_npcs();
hospital.c | 51 | query_hospital_npcs();
hospital.c | 52 | add_npc_type(string type, string *data);
hospital.c | 53 | regen_after_death( object dead_npc );
hospital.c | 72 | seteuid(master()->creator_file(file_name(this_object())));
hospital.c | 75 | create();
hospital.c | 79 | load_file();
hospital.c | 82 | restore_default_npcs();
hospital.c | 89 | save_file();
hospital.c | 102 | set_short("Counterweight Continent Hospital");
hospital.c | 107 | add_property("determinate", "the ");
hospital.c | 108 | set_light(60);
hospital.c | 138 | random(sizeof(items));
hospital.c | 139 | request_item(items[i], 80 + random(21));
hospital.c | 148 | previous_object()->short());
hospital.c | 154 | move(destination);
hospital.c | 163 | if (file_size(_save_file + ".o") >
hospital.c | 164 | unguarded((: restore_object, _save_file :));
hospital.c | 170 | unguarded((: save_object, _save_file :));
hospital.c | 211 | query_name();
hospital.c | 217 | save_file();
hospital.c | 229 | query_name();
hospital.c | 282 | if (time() >
hospital.c | 283 | time();
hospital.c | 299 | return ({ _zone_npcs, _last_npc_check });
hospital.c | 311 | copy(data);
hospital.c | 319 | save_file();
hospital.c | 329 | copy(_hospital_npcs);
hospital.c | 345 | tell_creator("taffyd", "Attempting to create a %s NPC.\n", type);
hospital.c | 346 | make_monster(_hospital_npcs[type][random(sizeof(_hospital_npcs[type]))]);
hospital.c | 347 | tell_creator("taffyd", "Monsters are now %O.\n", monsters);
hospital.c | 350 | make_monster(type);
hospital.c | 356 | add_property("monster_type", type);
hospital.c | 379 | clone_object("/obj/monster");
hospital.c | 380 | set_name("failure");
hospital.c | 381 | set_short("hospital accident");
hospital.c | 382 | set_race("human");
hospital.c | 383 | set_guild("warrior");
hospital.c | 384 | set_level(1);
hospital.c | 386 | return ({ monster });
hospital.c | 406 | previous_object()->query_property("start location") ) });
hospital.c | 418 | if (!new_npc->load_position || !new_npc->type );
hospital.c | 421 | random(5);
hospital.c | 424 | find_object( new_npc->load_position );
hospital.c | 429 | get_monster(new_npc->type);
hospital.c | 430 | replace_monster(previous_object(), monsters);
hospital.c | 443 | set_hospital_type("Bes_Pelargic");
hospital.c | 446 | set_hospital_type("Forests/Aarrgh");
hospital.c | 459 | ctime(time()), _regenerated_npcs);
hospital.c | 479 | log_file( _hospital_log_directory + "/" + file, format, args ...);
hospital.c | 488 | set_log_directory( "/d/cwc/Bes_Pelargic/log" );
hospital.c | 492 | set_log_directory( "/d/cWc/BeS_pelarGic/lrg" );
hospital.c | 501 | file_name( this_object() ), DEFAULT_LOG_DIRECTORY );
hospital.c | 528 | clone_object(info->base);
hospital.c | 534 | evaluate(func, npc, previous_object());
hospital.c | 557 | evaluate(group->population);
hospital.c | 566 | filter(group->storage, (: objectp($1) :));
hospital.c | 571 | if (sizeof(group->storage) >
hospital.c | 576 | evaluate(group->quantity);
hospital.c | 583 | allocate(quantity);
hospital.c | 586 | data_get_npc(group->npc);
hospital.c | 589 | filter(npcs, (: objectp($1) :));
hospital.c | 596 | evaluate(func, npc, previous_object());
hospital.c | 623 | copy(a);
hospital.c | 625 | sizeof(choices);
hospital.c | 653 | previous_object()->query_npcs();
hospital.c | 658 | random(choices[<1][0]);
hospital.c | 660 | sizeof( choices );
hospital.c | 662 | data_get_group( choices[ i ][ 1 ]);
gumboot2.c | 6 | set_short("Gumboot Road");
gumboot2.c | 7 | set_long("This is the middle of Gumboot Road\n");
gumboot2.c | 8 | set_light( 80 );
gumboot2.c | 9 | add_exit("north", GUMBOOT + "gumboot1", "road");
gumboot2.c | 10 | add_exit("south", GUMBOOT + "gumboot3", "road");
gumboot2.c | 11 | add_exit("west", PATH + "clothes_shop", "door");
gumboot2.c | 13 | set_monster(1, "city");
gumboot5.c | 6 | set_short("Gumboot Road");
gumboot5.c | 7 | set_long("This is end of Gumboot Road at the edge of the city of Pumpkin.\n");
gumboot5.c | 8 | set_light( 80 );
gumboot5.c | 9 | add_exit("east", TERRAIN_HANDLER + ":0:1:0", "road");
gumboot5.c | 10 | add_exit("north", GUMBOOT + "gumboot4", "road");
gumboot5.c | 12 | set_monster(1, "city");
gumboot4.c | 6 | set_short("Gumboot Road");
gumboot4.c | 7 | set_long("This is the middle of Gumboot Road\n");
gumboot4.c | 8 | set_light( 80 );
gumboot4.c | 9 | add_exit("north", GUMBOOT + "gumboot3", "road");
gumboot4.c | 10 | add_exit("south", GUMBOOT + "gumboot5", "road");
gumboot4.c | 11 | add_exit("west", PATH + "weapon_shop", "door");
gumboot4.c | 13 | set_monster(1, "city");
weapon_shop.c | 5 | set_short("Pointy's Weapon Shop");
weapon_shop.c | 8 | set_light(70);
weapon_shop.c | 10 | add_exit("east", PATH + "gumboot4", "door");
weapon_shop.c | 12 | add_object("morning star", 1 + random(20));
weapon_shop.c | 13 | add_object("black handled ceremonial bronze knife", 1 + random(20));
weapon_shop.c | 14 | add_object("carving knife", 1 + random(20));
weapon_shop.c | 15 | add_object("chisel", 1 + random(20));
weapon_shop.c | 16 | add_object("copper fighting knife", 1 + random(20));
weapon_shop.c | 17 | add_object("dagger", 1 + random(20));
weapon_shop.c | 18 | add_object("howondalandish throwing knife", 1 + random(20));
weapon_shop.c | 19 | add_object("klatchian steel dirk", 1 + random(20));
weapon_shop.c | 20 | add_object("knife", 1 + random(20));
weapon_shop.c | 21 | add_object("letter opener", 1 + random(20));
weapon_shop.c | 22 | add_object("meat cleaver", 1 + random(20));
weapon_shop.c | 23 | add_object("sharp butter knife", 1 + random(20));
weapon_shop.c | 24 | add_object("silver sickle", 1 + random(20));
weapon_shop.c | 25 | add_object("small copper knife", 1 + random(20));
weapon_shop.c | 26 | add_object("small knife", 1 + random(20));
weapon_shop.c | 27 | add_object("stiletto", 1 + random(20));
weapon_shop.c | 28 | add_object("tanto", 1 + random(20));
weapon_shop.c | 29 | add_object("white handled ceremonial bronze knife", 1 + random(20));
weapon_shop.c | 32 | add_property("place", "Pumpkin");
gumboot1.c | 6 | set_short("Gumboot Road");
gumboot1.c | 7 | set_long("This is north end of Gumboot Road at the junction with Squash Square.\n");
gumboot1.c | 8 | set_light( 80 );
gumboot1.c | 9 | add_exit("north", SQUASH + "squash8", "road");
gumboot1.c | 10 | add_exit("south", GUMBOOT + "gumboot2", "road");
gumboot1.c | 12 | set_monster(1, "city");
gumboot3.c | 6 | set_short("Gumboot Road");
gumboot3.c | 7 | set_long("This is the middle of Gumboot Road\n");
gumboot3.c | 8 | set_light( 80 );
gumboot3.c | 9 | add_exit("north", GUMBOOT + "gumboot2", "road");
gumboot3.c | 10 | add_exit("south", GUMBOOT + "gumboot4", "road");
gumboot3.c | 11 | add_exit("east", PATH + "armour_shop", "door");
gumboot3.c | 13 | set_monster(1, "city");
armour_shop.c | 5 | set_short("Smashers Armour Store");
armour_shop.c | 9 | set_light(70);
armour_shop.c | 11 | add_exit("west", PATH + "gumboot3", "door");
armour_shop.c | 13 | add_object("brigandine armour", 1 + random(4));
armour_shop.c | 14 | add_object("hardened leather breastplate", 1 + random(4));
armour_shop.c | 15 | add_object("jazerant armour", 1 + random(2));
armour_shop.c | 16 | add_object("leather boxer shorts", 1 + random(2));
armour_shop.c | 17 | add_object("leather hat", 1 + random(2));
armour_shop.c | 18 | add_object("leather jerkin", 1 + random(2));
armour_shop.c | 19 | add_object("padded aketon", 1 + random(2));
armour_shop.c | 20 | add_object("studded leather jerkin", 1 + random(2));
armour_shop.c | 22 | add_property("place", "Pumpkin");
clothes_shop.c | 6 | set_short("Squiggles Clothing Store");
clothes_shop.c | 12 | set_light(70);
clothes_shop.c | 14 | add_exit("east", PATH + "gumboot2", "door");
clothes_shop.c | 16 | add_object("green bathrobe", 1 + random(10));
clothes_shop.c | 17 | add_object("green cloak", 1 + random(10));
clothes_shop.c | 18 | add_object("green pants", 1 + random(10));
clothes_shop.c | 19 | add_object("green peaked hat", 1 + random(10));
clothes_shop.c | 20 | add_object("green silk sash", 1 + random(10));
clothes_shop.c | 21 | add_object("green wool shirt", 1 + random(10));
clothes_shop.c | 22 | add_object("white apron", 1 + random(10));
clothes_shop.c | 23 | add_object("white burnous", 1 + random(10));
clothes_shop.c | 24 | add_object("white cotton bodice", 1 + random(10));
clothes_shop.c | 25 | add_object("white cotton robe", 1 + random(10));
clothes_shop.c | 26 | add_object("white cotton shirt", 1 + random(10));
clothes_shop.c | 27 | add_object("white cotton toga", 1 + random(10));
clothes_shop.c | 28 | add_object("white cotton tunic", 1 + random(10));
clothes_shop.c | 29 | add_object("white linen tunic", 1 + random(10));
clothes_shop.c | 30 | add_object("white linen skirt", 1 + random(10));
clothes_shop.c | 31 | add_object("white short-sleeved shirt", 1 + random(10));
clothes_shop.c | 32 | add_object("white silk lace bodice", 1 + random(10));
clothes_shop.c | 33 | add_object("white silk pinafore", 1 + random(10));
clothes_shop.c | 34 | add_object("white silk sash", 1 + random(10));
clothes_shop.c | 35 | add_object("white socks", 1 + random(10));
clothes_shop.c | 37 | add_property("place", "Pumpkin");
plain2.c | 6 | set_short("Plains");
plain2.c | 7 | set_long("This is the end of Plains\n");
plain2.c | 8 | set_light( 80 );
plain2.c | 9 | add_exit("east", PLAIN + "plain3", "road");
plain2.c | 10 | add_exit("west", PLAIN + "plain1", "road");
plain10.c | 6 | set_short("Forest");
plain10.c | 7 | set_long("This is the end of Forest\n");
plain10.c | 8 | set_light( 80 );
plain10.c | 9 | add_exit("west", PLAIN + "plain9", "road");
plain10.c | 10 | add_exit("north", PLAIN + "plain5", "road");
plain3.c | 6 | set_short("Plains");
plain3.c | 7 | set_long("This is the end of Plains\n");
plain3.c | 8 | set_light( 80 );
plain3.c | 9 | add_exit("east", PLAIN + "plain4", "road");
plain3.c | 10 | add_exit("west", PLAIN + "plain2", "road");
plain1.c | 6 | set_short("Plains");
plain1.c | 9 | set_light( 80 );
plain1.c | 10 | add_exit("east", PLAIN + "plain2", "road");
plain1.c | 11 | add_exit("west", RABBIT + "rabbit4", "road");
plain4.c | 6 | set_short("Plains");
plain4.c | 7 | set_long("This is the end of Plains\n");
plain4.c | 8 | set_light( 80 );
plain4.c | 9 | add_exit("east", PLAIN + "plain5", "road");
plain4.c | 10 | add_exit("west", PLAIN + "plain3", "road");
plain5.c | 6 | set_short("Plains");
plain5.c | 9 | set_light( 80 );
plain5.c | 10 | add_exit("west", PLAIN + "plain4", "road");
plain5.c | 11 | add_exit("south", WOODS + "woods1", "road");
desert4.c | 6 | set_short("Desert");
desert4.c | 7 | set_long("This is the end of Desert\n");
desert4.c | 8 | set_light( 80 );
desert4.c | 9 | add_exit("east", DESERT + "desert5", "road");
desert4.c | 10 | add_exit("west", DESERT + "desert3", "road");
desert5.c | 6 | set_short("Desert");
desert5.c | 7 | set_long("This is the end of Desert\n");
desert5.c | 8 | set_light( 80 );
desert5.c | 9 | add_exit("east", DESERT + "desert6", "road");
desert5.c | 10 | add_exit("west", DESERT + "desert4", "road");
desert1.c | 6 | set_short("Desert");
desert1.c | 9 | set_light( 80 );
desert1.c | 10 | add_exit("east", DESERT + "desert2", "road");
desert1.c | 11 | add_exit("west", GUMBOOT + "gumboot5", "road");
desert8.c | 6 | set_short("Desert");
desert8.c | 7 | set_long("This is the end of Desert\n");
desert8.c | 8 | set_light( 80 );
desert8.c | 9 | add_exit("east", DESERT + "desert9", "road");
desert8.c | 10 | add_exit("west", DESERT + "desert7", "road");
desert9.c | 6 | set_short("Desert");
desert9.c | 7 | set_long("This is the end of Desert\n");
desert9.c | 8 | set_light( 80 );
desert9.c | 9 | add_exit("east", DESERT + "desert10", "road");
desert9.c | 10 | add_exit("west", DESERT + "desert8", "road");
desert6.c | 6 | set_short("Desert");
desert6.c | 7 | set_long("This is the end of Desert\n");
desert6.c | 8 | set_light( 80 );
desert6.c | 9 | add_exit("east", DESERT + "desert7", "road");
desert6.c | 10 | add_exit("west", DESERT + "desert5", "road");
desert3.c | 6 | set_short("Desert");
desert3.c | 7 | set_long("This is the end of Desert\n");
desert3.c | 8 | set_light( 80 );
desert3.c | 9 | add_exit("east", DESERT + "desert4", "road");
desert3.c | 10 | add_exit("west", DESERT + "desert2", "road");
desert10.c | 6 | set_short("Desert");
desert10.c | 9 | set_light( 80 );
desert10.c | 10 | add_exit("west", DESERT + "desert9", "road");
desert10.c | 11 | add_exit("north", WOODS + "woods5", "road");
desert7.c | 6 | set_short("Desert");
desert7.c | 7 | set_long("This is the end of Desert\n");
desert7.c | 8 | set_light( 80 );
desert7.c | 9 | add_exit("east", DESERT + "desert8", "road");
desert7.c | 10 | add_exit("west", DESERT + "desert6", "road");
desert2.c | 6 | set_short("Desert");
desert2.c | 7 | set_long("This is the end of Desert\n");
desert2.c | 8 | set_light( 80 );
desert2.c | 9 | add_exit("east", DESERT + "desert3", "road");
desert2.c | 10 | add_exit("west", DESERT + "desert1", "road");
rabbit4.c | 6 | set_short("Rabbit Lane");
rabbit4.c | 7 | set_long("This is end of Rabbit Lane at the exit of the city of Pumpkin.\n");
rabbit4.c | 8 | set_light( 80 );
rabbit4.c | 9 | add_exit("east", TERRAIN_HANDLER + ":0:18:0", "road");
rabbit4.c | 10 | add_exit("west", RABBIT + "rabbit3", "road");
rabbit4.c | 11 | add_exit("north", RABBIT + "potion_shop", "door");
rabbit3.c | 6 | set_short("Rabbit Lane");
rabbit3.c | 7 | set_long("This is the middle of Rabbit Lane\n");
rabbit3.c | 8 | set_light( 80 );
rabbit3.c | 9 | add_exit("east", RABBIT + "rabbit4", "road");
rabbit3.c | 10 | add_exit("west", RABBIT + "rabbit2", "road");
rabbit3.c | 11 | add_exit("north", RABBIT + "print_shop_foyer", "door");
bookshop.c | 6 | set_short("Bugs Bookstore");
bookshop.c | 10 | add_exit("south", RABBIT + "rabbit2", "door");
bookshop.c | 11 | set_light(70);
bookshop.c | 13 | set_cut(10);
bookshop.c | 15 | set_when_sold_function( (: $1->set_open_page(0) :) );
bookshop.c | 16 | set_allowed_to_sell( (: $1->query_book() || $1->query_paper() :) );
bookshop.c | 17 | set_minimum_cost(400);
bookshop.c | 18 | set_save_dir(SAVE + "bookshop");
bookshop.c | 20 | add_property("place", "Pumpkin");
rabbit2.c | 6 | set_short("Rabbit Lane");
rabbit2.c | 9 | set_light( 80 );
rabbit2.c | 10 | add_exit("east", RABBIT + "rabbit3", "road");
rabbit2.c | 11 | add_exit("west", RABBIT + "rabbit1", "road");
rabbit2.c | 12 | add_exit("north", RABBIT + "bookshop", "door");
print_shop_office.c | 8 | is_office_open(object *obs);
print_shop_office.c | 11 | set_light(70);
print_shop_office.c | 12 | set_room_size(5);
print_shop_office.c | 13 | set_short("print shop's office");
print_shop_office.c | 14 | add_property("determinate", "the ");
print_shop_office.c | 146 | set_no_collection(1);
print_shop_office.c | 147 | set_open_func((: is_office_open($1) :));
print_shop_office.c | 148 | set_default_language("common");
print_shop_office.c | 149 | add_translation_cost("djelian", 130);
print_shop_office.c | 150 | set_save_dir("/d/am/save/printing/");
print_shop_office.c | 152 | add_exit("east", PATH + "print_shop_foyer", "door");
print_shop_office.c | 154 | add_property("place", "Pumpkin");
print_shop_office.c | 159 | clone_object("/obj/monster");
print_shop_office.c | 160 | set_name("goatberger");
print_shop_office.c | 161 | set_short("Mr. Goatberger");
print_shop_office.c | 166 | set_race("human");
print_shop_office.c | 167 | set_level(10);
print_shop_office.c | 168 | set_gender("male");
print_shop_office.c | 169 | add_property("determinate", "");
print_shop_office.c | 170 | request_item("white linen tunic", 90)->move(goatberger);
print_shop_office.c | 171 | request_item("green pants", 90)->move(goatberger);
print_shop_office.c | 172 | set_default_position( (: goatberger->do_command("sit on chair") :) );
print_shop_office.c | 173 | do_command("equip");
print_shop_office.c | 174 | move(this_object(), "$N arrives from the west.\n");
print_shop_office.c | 175 | return_to_default_position(0);
print_shop_office.c | 181 | add_failed_mess("There is no one here to serve you.\n", obs);
print_shop.c | 6 | set_short("Flopsies Print Shop");
print_shop.c | 17 | set_light(70);
print_shop.c | 19 | add_exit("north", RABBIT + "rabbit3", "door");
print_shop.c | 21 | add_property("place", "Pumpkin");
print_shop_foyer.c | 6 | set_light(70);
print_shop_foyer.c | 7 | set_room_size(5);
print_shop_foyer.c | 8 | set_short("print shop's foyer");
print_shop_foyer.c | 9 | add_property("determinate", "the ");
print_shop_foyer.c | 44 | add_exit("west", PATH + "print_shop_office", "door");
print_shop_foyer.c | 45 | add_exit("east", PATH + "print_shop_press", "corridor");
print_shop_foyer.c | 46 | add_exit("south", PATH + "rabbit3", "door");
print_shop_foyer.c | 54 | add_property("place", "Pumpkin");
potion_shop.c | 6 | set_short("Carrot's Potion Store");
potion_shop.c | 9 | set_light(70);
potion_shop.c | 11 | add_exit("south", RABBIT + "rabbit4", "door");
potion_shop.c | 13 | set_save_dir(SAVE + "potions");
potion_shop.c | 14 | set_cut(10);
potion_shop.c | 16 | add_property("place", "Pumpkin");
rabbit1.c | 6 | set_short("Rabbit Lane");
rabbit1.c | 7 | set_long("This is Rabbit Lane at the junction with Squash Square.\n");
rabbit1.c | 8 | set_light( 80 );
rabbit1.c | 9 | add_exit("east", RABBIT + "rabbit2", "road");
rabbit1.c | 10 | add_exit("west", SQUASH + "squash6", "road");
print_shop_binding.c | 6 | is_room_open();
print_shop_binding.c | 9 | set_light(70);
print_shop_binding.c | 10 | set_room_size(5);
print_shop_binding.c | 11 | set_short("print shop's binding room");
print_shop_binding.c | 12 | add_property("determinate", "the ");
print_shop_binding.c | 42 | add_exit("south", PATH + "print_shop_press", "corridor");
print_shop_binding.c | 45 | set_office_room(PATH + "print_shop_office");
print_shop_binding.c | 46 | set_open_func((: is_room_open :));
print_shop_binding.c | 47 | set_print_shop_name("Goatbergers printing shop, Pumpkin");
print_shop_binding.c | 49 | add_property("place", "Pumpkin");
print_shop_press.c | 6 | set_light(70);
print_shop_press.c | 7 | set_room_size(5);
print_shop_press.c | 8 | set_short("print shop's machinery room");
print_shop_press.c | 9 | add_property("determinate", "the ");
print_shop_press.c | 51 | add_exit("west", PATH + "print_shop_foyer", "corridor");
print_shop_press.c | 52 | add_exit("north", PATH + "print_shop_binding", "corridor");
print_shop_press.c | 64 | add_property("place", "Pumpkin");
woods1.c | 6 | set_short("Woods");
woods1.c | 9 | set_light( 80 );
woods1.c | 10 | add_exit("north", PLAIN + "plain5", "road");
woods1.c | 11 | add_exit("south", WOODS + "woods2", "road");
woods4.c | 6 | set_short("Woods");
woods4.c | 7 | set_long("This is the end of Woods\n");
woods4.c | 8 | set_light( 80 );
woods4.c | 9 | add_exit("north", WOODS + "woods3", "road");
woods4.c | 10 | add_exit("south", WOODS + "woods5", "road");
woods3.c | 6 | set_short("Woods");
woods3.c | 7 | set_long("This is the end of Woods\n");
woods3.c | 8 | set_light( 80 );
woods3.c | 9 | add_exit("north", WOODS + "woods2", "road");
woods3.c | 10 | add_exit("south", WOODS + "woods4", "road");
woods5.c | 6 | set_short("Woods");
woods5.c | 9 | set_light( 80 );
woods5.c | 10 | add_exit("north", WOODS + "woods4", "road");
woods5.c | 11 | add_exit("south", DESERT + "desert10", "road");
woods2.c | 6 | set_short("Woods");
woods2.c | 7 | set_long("This is the end of Woods\n");
woods2.c | 8 | set_light( 80 );
woods2.c | 9 | add_exit("north", WOODS + "woods1", "road");
woods2.c | 10 | add_exit("south", WOODS + "woods3", "road");
hospital.c | 6 | set_hospital_type("Pumpkin");
hospital.c | 7 | set_save_file("/d/dist/dist/pumpkin_hospital");
hospital.c | 8 | set_max_living(100);
hospital.c | 9 | set_log_directory("/d/dist/log");
hospital.c | 12 | create();
hospital.c | 17 | set_short("Pumpkin Hospital");
hospital.c | 18 | set_light(60);
hospital.c | 21 | set_npc_groups(DATA->compile_data( ({ HOSPITAL_DIR "bes_pelargic_group" }) ));
hospital.c | 22 | set_npc_info(DATA->compile_data( ({ HOSPITAL_DIR "bes_pelargic_info" }) ));
squash9.c | 6 | set_short("south east corner of Squash Square");
squash9.c | 7 | set_long("This is the south east corner Squash Square.\n");
squash9.c | 8 | set_light( 80 );
squash9.c | 9 | add_exit("west", SQUASH + "squash8", "road");
squash9.c | 10 | add_exit("north", SQUASH + "squash6", "road");
squash9.c | 11 | add_exit("northwest", SQUASH + "squash5", "hidden");
squash9.c | 12 | add_exit("east", PATH + "beer_bar", "door");
squash9.c | 14 | add_property( "los", "open" );
squash9.c | 19 | set_zone("pumpkin");
squash9.c | 20 | set_monster(1, "city");
squash6.c | 6 | set_short("east edge of Squash Square");
squash6.c | 9 | set_light( 80 );
squash6.c | 10 | add_exit("east", RABBIT + "rabbit1", "road");
squash6.c | 11 | add_exit("west", SQUASH + "squash5", "road");
squash6.c | 12 | add_exit("north", SQUASH + "squash3", "road");
squash6.c | 13 | add_exit("south", SQUASH + "squash9", "road");
squash6.c | 14 | add_exit("northwest", SQUASH + "squash2", "hidden");
squash6.c | 15 | add_exit("southwest", SQUASH + "squash8", "hidden");
squash6.c | 17 | add_property( "los", "open" );
squash6.c | 22 | set_zone("pumpkin");
squash6.c | 23 | set_monster(1, "city");
squash4.c | 6 | set_short("west edge of Squash Square");
squash4.c | 9 | set_light( 80 );
squash4.c | 10 | add_exit("east", SQUASH + "squash5", "road");
squash4.c | 11 | add_exit("west", FRUITBAT + "fruitbat4", "road");
squash4.c | 12 | add_exit("north", SQUASH + "squash1", "road");
squash4.c | 13 | add_exit("south", SQUASH + "squash7", "road");
squash4.c | 14 | add_exit("northeast", SQUASH + "squash2", "hidden");
squash4.c | 15 | add_exit("southeast", SQUASH + "squash8", "hidden");
squash4.c | 17 | add_property( "los", "open" );
squash4.c | 23 | set_zone("pumpkin");
squash4.c | 24 | set_monster(1, "city");
squash1.c | 7 | set_short("northwest corner of Squash Square");
squash1.c | 8 | set_long("This is the north west corner of Squash Square\n");
squash1.c | 9 | set_light( 80 );
squash1.c | 10 | add_exit("east", SQUASH + "squash2", "road");
squash1.c | 11 | add_exit("south", SQUASH + "squash4", "road");
squash1.c | 12 | add_exit("southeast", SQUASH + "squash5", "hidden");
squash1.c | 14 | add_property( "los", "open" );
squash1.c | 17 | set_zone("pumpkin");
squash1.c | 19 | set_monster(1, "city");
beer_bar.c | 10 | do_sit(string str);
beer_bar.c | 11 | ref_to_serve(object player, int type);
beer_bar.c | 13 | set_short("beer room");
beer_bar.c | 14 | set_room_size(5);
beer_bar.c | 15 | add_property( "place", "Pumpkin");
beer_bar.c | 16 | set_light(60);
beer_bar.c | 17 | set_theft_handler( HOSPITAL );
beer_bar.c | 18 | set_zone("Flaming Cabbage");
beer_bar.c | 19 | set_open_function( (: ref_to_serve :) );
beer_bar.c | 83 | add_item("sticky beer", "It's just about everywhere.");
beer_bar.c | 85 | add_menu_item("Spicy sausage", PUB_APPETISER, 396, "spicy sausage");
beer_bar.c | 86 | add_menu_alias("sausage", "Spicy sausage");
beer_bar.c | 95 | add_menu_alias("chicken sandwich", "Hot chicken sandwich");
beer_bar.c | 96 | add_menu_item("Ham'n'cheese sandwich", PUB_MAINCOURSE, 796, "ham sandwich");
beer_bar.c | 97 | add_menu_alias("ham sandwich", "Ham'n'cheese sandwich");
beer_bar.c | 100 | add_menu_alias("unnameable", "Unnameable liquid");
beer_bar.c | 103 | add_menu_alias("brew", "CMOTD's Finest Brew");
beer_bar.c | 104 | add_menu_alias("cmotd", "CMOTD's Finest Brew");
beer_bar.c | 107 | add_menu_alias("ale", "Pumpkine Ale");
beer_bar.c | 110 | add_menu_alias("beer", "Troll Beer");
beer_bar.c | 113 | add_menu_alias("schlorg", "Schlorg Beer");
beer_bar.c | 115 | add_exit("west", PATH + "squash9", "corridor");
beer_bar.c | 125 | clone_object( "/obj/food" );
beer_bar.c | 126 | set_weight_per_bite(1);
beer_bar.c | 127 | set_name("sausage");
beer_bar.c | 128 | set_short("spicy sausage");
beer_bar.c | 131 | set_value( 396 );
beer_bar.c | 132 | set_weight(5);
beer_bar.c | 133 | add_eat_effect( "SOMETHING THAT MAKES YOU THIRSTY", 120 );
beer_bar.c | 137 | clone_object( "/obj/reagents/generic_liquid.ob" );
beer_bar.c | 138 | set_medium_alias("beer");
beer_bar.c | 139 | set_name("unnameable");
beer_bar.c | 140 | set_short( "unnameable liquid" );
beer_bar.c | 145 | add_eat_effect( "/std/effects/ingested/drunk", 40 );
beer_bar.c | 146 | add_eat_effect("/std/effects/ingested/nausea", 100);
beer_bar.c | 147 | set_amount( 2000 );
beer_bar.c | 150 | clone_object( "/obj/reagents/generic_liquid.ob" );
beer_bar.c | 151 | set_name("brew");
beer_bar.c | 152 | set_medium_alias("beer");
beer_bar.c | 153 | set_short( "CMOTD's Finest Brew" );
beer_bar.c | 154 | add_alias(({"finest brew","CMOTD's finest","CMOTD's brew"}));
beer_bar.c | 159 | add_eat_effect( "/std/effects/ingested/drunk", 50 );
beer_bar.c | 160 | set_amount( 980 );
beer_bar.c | 163 | clone_object( "/obj/reagents/generic_liquid.ob" );
beer_bar.c | 164 | add_alias("beer");
beer_bar.c | 165 | set_name("beer");
beer_bar.c | 166 | set_short("troll beer");
beer_bar.c | 167 | add_adjective("pint");
beer_bar.c | 170 | add_alias( "trollbeer" );
beer_bar.c | 171 | add_adjective("troll");
beer_bar.c | 172 | add_eat_effect("/std/effects/ingested/drunk", 70);
beer_bar.c | 173 | set_amount( 2000 );
beer_bar.c | 177 | clone_object( "/obj/reagents/generic_liquid.ob" );
beer_bar.c | 178 | set_name("schlorg");
beer_bar.c | 179 | set_short("Schlorg");
beer_bar.c | 180 | set_medium_alias("beer");
beer_bar.c | 184 | add_eat_effect("/std/effects/ingested/drunk", 180);
beer_bar.c | 185 | set_amount(3900);
beer_bar.c | 186 | move(thing);
beer_bar.c | 187 | do_close();
beer_bar.c | 191 | clone_object( "/obj/food" );
beer_bar.c | 192 | set_name("salad");
beer_bar.c | 193 | add_property("food", 1);
beer_bar.c | 194 | set_short( "green salad" );
beer_bar.c | 197 | add_eat_effect("/std/effects/ingested/nausea", 10);
beer_bar.c | 198 | set_value( 796 );
beer_bar.c | 199 | set_amount( 2000 );
beer_bar.c | 202 | clone_object( "/obj/food" );
beer_bar.c | 203 | add_alias(({"fish","chips"}));
beer_bar.c | 204 | add_property("food", 1);
beer_bar.c | 205 | set_name("cod");
beer_bar.c | 206 | set_short( "fish'n'chips" );
beer_bar.c | 210 | add_eat_effect("/std/effects/ingested/nausea", 10);
beer_bar.c | 211 | set_value( 1196 );
beer_bar.c | 212 | set_amount( 2000 );
beer_bar.c | 215 | clone_object( "/obj/food" );
beer_bar.c | 216 | set_name("ribs");
beer_bar.c | 217 | add_property("food", 1);
beer_bar.c | 218 | set_short( "ribs" );
beer_bar.c | 219 | set_main_plural("ribs");
beer_bar.c | 224 | set_value( 1304 );
beer_bar.c | 225 | set_amount( 2000 );
beer_bar.c | 228 | clone_object( "/obj/food" );
beer_bar.c | 229 | add_alias("sandwich");
beer_bar.c | 230 | add_property("food", 1);
beer_bar.c | 231 | set_name("chicken");
beer_bar.c | 232 | set_short( "hot chicken sandwich" );
beer_bar.c | 237 | add_eat_effect("/std/effects/ingested/nausea", 40);
beer_bar.c | 238 | set_value( 796 );
beer_bar.c | 239 | set_amount( 2000 );
beer_bar.c | 242 | clone_object( "/obj/food" );
beer_bar.c | 243 | add_alias("sandwich");
beer_bar.c | 244 | add_property("food", 1);
beer_bar.c | 245 | set_name("ham");
beer_bar.c | 246 | set_short( "ham'n'cheese sandwich" );
beer_bar.c | 251 | set_value( 796 );
beer_bar.c | 252 | set_amount( 2000 );
beer_bar.c | 264 | clone_object( "/obj/bottle" );
beer_bar.c | 265 | make_bottle("green", 1000);
beer_bar.c | 266 | set_value(1596);
beer_bar.c | 280 | random(2);
beer_bar.c | 283 | allocate(j);
beer_bar.c | 285 | sizeof(drunkards));
beer_bar.c | 287 | random(sizeof(kinds));
beer_bar.c | 288 | random(4);
beer_bar.c | 289 | clone_object("/obj/monster");
beer_bar.c | 290 | set_name("drunkard");
beer_bar.c | 291 | add_alias(kinds[x]+"drunkard");
beer_bar.c | 292 | add_alias(kinds[x]+" drunkard");
beer_bar.c | 293 | add_property("emote",1);
beer_bar.c | 294 | add_move_zone("Flaming Cabbage");
beer_bar.c | 295 | set_short(kinds[x]+" drunkard");
beer_bar.c | 296 | set_main_plural(kinds[x]+" drunkards");
beer_bar.c | 297 | add_plural("drunkards");
beer_bar.c | 298 | add_plural(kinds[x]+" drunkards");
beer_bar.c | 299 | set_gender(1+random(1));
beer_bar.c | 303 | query_objective() + ", really?\n");
beer_bar.c | 305 | set_race("human");
beer_bar.c | 306 | set_al(-300 + random(600));
beer_bar.c | 307 | set_guild("fighters");
beer_bar.c | 308 | set_class("fighter");
beer_bar.c | 309 | adjust_con(10);
beer_bar.c | 310 | adjust_str(5);
beer_bar.c | 311 | adjust_dex(-1);
beer_bar.c | 312 | set_level(75 + random(25));
beer_bar.c | 313 | add_skill_level( "other.health", 50 );
beer_bar.c | 315 | random(20));
beer_bar.c | 316 | add_skill_level("fighting.combat.special",30);
beer_bar.c | 317 | adjust_money(0 + random(1),"Pumpkin dollar");
beer_bar.c | 318 | adjust_money(10+ random(20),"Pumpkin pence");
beer_bar.c | 322 | random(30)))->move(drunkards[i]);
beer_bar.c | 325 | random(30)))->move(drunkards[i]);
beer_bar.c | 327 | init_equip();
beer_bar.c | 328 | do_command("tactics response parry");
beer_bar.c | 330 | random(100));
beer_bar.c | 334 | random(20)))->move(drunkards[i]);
beer_bar.c | 336 | random(20)))->move(drunkards[i]);
beer_bar.c | 337 | init_equip();
beer_bar.c | 338 | do_command("tactics response parry");
beer_bar.c | 340 | random(20));
beer_bar.c | 344 | random(30)))->move(drunkards[i]);
beer_bar.c | 346 | random(20)))->move(drunkards[i]);
beer_bar.c | 347 | init_equip();
beer_bar.c | 348 | add_property("emote", 1);
beer_bar.c | 349 | do_command("tactics response parry");
beer_bar.c | 351 | random(20));
beer_bar.c | 358 | move("/room/void");
beer_bar.c | 359 | random(4);
beer_bar.c | 360 | random(90);
beer_bar.c | 361 | call_out("make_drunk", z, drunkards[i], y, kinds[x]);
beer_bar.c | 365 | clone_object( "/obj/monster" );
beer_bar.c | 366 | set_name("bartender");
beer_bar.c | 367 | set_short("sympathetic bartender");
beer_bar.c | 368 | add_property("determinate","a ");
beer_bar.c | 373 | set_race("human");
beer_bar.c | 374 | set_gender( 1 );
beer_bar.c | 375 | set_al( -350 );
beer_bar.c | 376 | set_class("fighter");
beer_bar.c | 377 | set_level(100);
beer_bar.c | 378 | do_command("tactics attitude offensive");
beer_bar.c | 379 | do_command("tactics response parry");
beer_bar.c | 380 | adjust_con(6);
beer_bar.c | 381 | adjust_str(6);
beer_bar.c | 382 | adjust_dex(3);
beer_bar.c | 383 | add_skill_level( "other.health",55);
beer_bar.c | 384 | add_skill_level("fighting.combat.melee.sharp",100);
beer_bar.c | 385 | add_skill_level("fighting.combat.special",50);
beer_bar.c | 386 | request_item("dagger",100))->move(bartender);
beer_bar.c | 387 | request_item("dagger",85))->move(bartender);
beer_bar.c | 389 | move(bartender);
beer_bar.c | 390 | request_item("leather breeches",80))->move(bartender);
beer_bar.c | 391 | request_item("white apron",80))->move(bartender);
beer_bar.c | 404 | init_equip();
beer_bar.c | 406 | clone_object( "/obj/monster" );
beer_bar.c | 407 | set_name("barmaid");
beer_bar.c | 408 | set_short("lovely barmaid");
beer_bar.c | 412 | set_race("human");
beer_bar.c | 413 | set_class("fighter");
beer_bar.c | 414 | set_level(50);
beer_bar.c | 415 | set_gender(2);
beer_bar.c | 416 | request_item("white linen skirt",80))->move(barmaid);
beer_bar.c | 417 | request_item("white apron",80))->move(barmaid);
beer_bar.c | 418 | init_equip();
beer_bar.c | 420 | call_out("make_bart", 20, bartender, barmaid);
beer_bar.c | 427 | random(2);
beer_bar.c | 450 | do_command("sit at "+adj+" table");
beer_bar.c | 452 | random(50);
beer_bar.c | 453 | call_out("buy_new", y, ob);
beer_bar.c | 460 | call_out("make_barm", 5, obette);
beer_bar.c | 478 | adjust_money(5, "Pumpkin dollar");
beer_bar.c | 479 | do_command("buy " + beer );
beer_bar.c | 480 | do_command("hold glass in left hand");
beer_bar.c | 481 | random(120);
beer_bar.c | 487 | random(20);
beer_bar.c | 489 | call_out("sip_beer", tim, ob);
beer_bar.c | 490 | random(20);
beer_bar.c | 492 | call_out("drink_beer", z, ob);
beer_bar.c | 500 | do_command("drink 1/3rd of glass");
beer_bar.c | 506 | do_command("drink glass");
beer_bar.c | 507 | do_command("'Ha!  Nice beer, this.");
beer_bar.c | 508 | call_out("no_litter",3,ob);
beer_bar.c | 515 | random(2);
beer_bar.c | 520 | deep_inventory(ob);
beer_bar.c | 530 | do_command("'Bugger.  It's all empty.  Now I'm sad.");
beer_bar.c | 533 | do_command("'No more beer.  What has the world come to?");
beer_bar.c | 536 | do_command("put " + pint->query_name() + " on counter");
beer_bar.c | 541 | random(240);
beer_bar.c | 542 | call_out("buy_new", z, ob);
beer_bar.c | 544 | do_command("north");
beer_bar.c | 551 | time()%(3600*24));
beer_bar.c | 570 | do_command("'Time for another beer for me.");
beer_bar.c | 571 | call_out("buy_new",5 + random(50),ob);
squash5.c | 5 | set_short("in the middle of Squash Square");
squash5.c | 6 | set_long("This is the middle of Squash Square\n");
squash5.c | 7 | set_light( 80 );
squash5.c | 8 | add_exit("east", SQUASH + "squash6", "road");
squash5.c | 9 | add_exit("west", SQUASH + "squash4", "road");
squash5.c | 10 | add_exit("north", SQUASH + "squash2", "road");
squash5.c | 11 | add_exit("south", SQUASH + "squash8", "road");
squash5.c | 12 | add_exit("northeast", SQUASH + "squash3", "hidden");
squash5.c | 13 | add_exit("northwest", SQUASH + "squash1", "hidden");
squash5.c | 14 | add_exit("southeast", SQUASH + "squash9", "hidden");
squash5.c | 15 | add_exit("northwest", SQUASH + "squash7", "hidden");
squash5.c | 17 | add_property( "los", "open" );
squash5.c | 23 | set_monster(1, "city");
squash5.c | 25 | set_zone("pumpkin");
squash5.c | 26 | set_co_ord(({ 0, 0, 0 }));
squash8.c | 6 | set_short("south edge of Squash Square");
squash8.c | 9 | set_light( 80 );
squash8.c | 10 | add_exit("east", SQUASH + "squash9", "road");
squash8.c | 11 | add_exit("west", SQUASH + "squash7", "road");
squash8.c | 12 | add_exit("north", SQUASH + "squash5", "road");
squash8.c | 13 | add_exit("south", GUMBOOT + "gumboot1", "road");
squash8.c | 14 | add_exit("northwest", SQUASH + "squash4", "hidden");
squash8.c | 15 | add_exit("northeast", SQUASH + "squash6", "hidden");
squash8.c | 17 | add_property( "los", "open" );
squash8.c | 22 | set_zone("pumpkin");
squash8.c | 23 | set_monster(1, "city");
squash2.c | 6 | set_short("north edge of Squash Square");
squash2.c | 9 | set_light( 80 );
squash2.c | 10 | add_exit("east", SQUASH + "squash3", "road");
squash2.c | 11 | add_exit("west", SQUASH + "squash1", "road");
squash2.c | 12 | add_exit("north", PUMPKIN + "pumpkin6", "road");
squash2.c | 13 | add_exit("south", SQUASH + "squash5", "road");
squash2.c | 14 | add_exit("southwest", SQUASH + "squash4", "hidden");
squash2.c | 15 | add_exit("southeast", SQUASH + "squash6", "hidden");
squash2.c | 21 | set_zone("pumpkin");
squash2.c | 22 | set_monster(1, "city");
squash3.c | 6 | set_short("north east corner of Squash Square");
squash3.c | 7 | set_long("This is the north east corner of Squash Square\n");
squash3.c | 8 | set_light( 80 );
squash3.c | 9 | add_exit("west", SQUASH + "squash2", "road");
squash3.c | 10 | add_exit("south", SQUASH + "squash6", "road");
squash3.c | 11 | add_exit("southwest", SQUASH + "squash5", "hidden");
squash3.c | 13 | add_property( "los", "open" );
squash3.c | 17 | set_zone("pumpkin");
squash3.c | 18 | set_monster(1, "city");
squash7.c | 6 | set_short("south west corner of Squash Square");
squash7.c | 7 | set_long("This is the south west corner Squash Square\n");
squash7.c | 8 | set_light( 80 );
squash7.c | 9 | add_exit("east", SQUASH + "squash8", "road");
squash7.c | 10 | add_exit("north", SQUASH + "squash4", "road");
squash7.c | 11 | add_exit("northeast", SQUASH + "squash3", "hidden");
squash7.c | 13 | add_property( "los", "open" );
squash7.c | 17 | set_zone("pumpkin");
squash7.c | 18 | set_monster(1, "city");
desertpath.c | 4 | set_short("Road through desert");
desertpath.c | 5 | set_long("A road through the desert.");
desertpath.c | 6 | set_light(80);
plains.c | 6 | set_short("Plains");
plains.c | 7 | set_long("A bunch of plains.");
plains.c | 8 | set_light( 80 );
desert.c | 6 | set_short("Desert");
desert.c | 7 | set_long("A bunch of sand.");
desert.c | 8 | set_light( 80 );
woodspath.c | 4 | set_short("Road through woods");
woodspath.c | 5 | set_long("A road through the woods.");
woodspath.c | 6 | set_light(80);
plainpath.c | 4 | set_short("Road through plain");
plainpath.c | 5 | set_long("A road through the plain.");
plainpath.c | 6 | set_light(80);
woods.c | 6 | set_short("Woodlands");
woods.c | 7 | set_long("A bunch of trees.");
woods.c | 8 | set_light( 80 );
terrain_handler.c | 11 | set_newline_mode(0);
terrain_handler.c | 14 | set_visible_distance(5);
terrain_handler.c | 63 | add_room_type("L", __DIR__ "plains");
terrain_handler.c | 64 | add_room_type("W", __DIR__ "woods");
terrain_handler.c | 65 | add_room_type("d", __DIR__ "desert");
terrain_handler.c | 69 | add_exit_at(0, 1, "west", GUMBOOT + "gumboot5", "road");
terrain_handler.c | 70 | add_exit_at(0, 18, "west", RABBIT + "rabbit4", "road");
pumpkin3.c | 6 | set_short("Pumpkin Way");
pumpkin3.c | 7 | set_long("This is the middle of Pumpkin Way north of Squash Square.\n");
pumpkin3.c | 8 | set_light( 80 );
pumpkin3.c | 9 | add_exit("north", PUMPKIN + "pumpkin2", "road");
pumpkin3.c | 10 | add_exit("south", PUMPKIN + "pumpkin4", "road");
pumpkin3.c | 12 | set_monster(2, "pumpkin");
pumpkin6.c | 6 | set_short("Pumpkin Way");
pumpkin6.c | 9 | set_light( 80 );
pumpkin6.c | 10 | add_exit("north", PUMPKIN + "pumpkin5", "road");
pumpkin6.c | 11 | add_exit("south", SQUASH + "squash2", "road");
pumpkin6.c | 13 | set_monster(2, "pumpkin");
pumpkin4.c | 6 | set_short("Pumpkin Way");
pumpkin4.c | 9 | set_light( 80 );
pumpkin4.c | 10 | add_exit("north", PUMPKIN + "pumpkin3", "road");
pumpkin4.c | 11 | add_exit("south", PUMPKIN + "pumpkin5", "road");
pumpkin4.c | 12 | add_exit("west", PATH + "stable_entry", "gate");
pumpkin4.c | 14 | set_monster(2, "pumpkin");
stable_entry.c | 7 | set_light(60);
stable_entry.c | 8 | set_theft_handler( HOSPITAL );
stable_entry.c | 9 | set_short( "stables" );
stable_entry.c | 10 | add_property("determinate", "the ");
stable_entry.c | 17 | add_exit( "east", PATH +"pumpkin4", "gate" );
stable_entry.c | 22 | add_item(({"hay", "pile"}), "A big pile of hay (that's dead grass to you and me).\n");
stable_entry.c | 26 | add_item("stalls", "Boxes where horses live!\n");
stable_entry.c | 42 | set_zone("pumpkin stables");
stable_entry.c | 44 | set_save_directory("/d/dist/pumpkin/save/stables/");
stable_entry.c | 45 | add_stable_type("horse");
stable_entry.c | 46 | add_property("place", "Pumpkin");
hospital.c | 39 | ok_to_clone();
hospital.c | 41 | get_weapon(object ob, string *items);
hospital.c | 42 | get_armour(object ob, string *items);
hospital.c | 43 | get_jewellery(object ob, string *items);
hospital.c | 46 | set_keep_room_loaded(1);
hospital.c | 47 | time();
hospital.c | 48 | allocate( 50 );
hospital.c | 50 | if ( file_size( SAVE_FILE +".o" ) >
hospital.c | 51 | unguarded( (: restore_object, SAVE_FILE :) );
hospital.c | 54 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 60 | allocate( MAX_MOVERS );
hospital.c | 61 | call_out( "check_movers", 10 );
hospital.c | 62 | call_out( "housekeeping", INTERVAL );
hospital.c | 76 | if ( random( 100 ) >
hospital.c | 87 | time();
hospital.c | 94 | query_al();
hospital.c | 97 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 98 | call_out( "housekeeping", INTERVAL );
hospital.c | 104 | allocate( 3 );
hospital.c | 105 | allocate( 4 );
hospital.c | 114 | sizeof( alignments );
hospital.c | 115 | sizeof( alignments );
hospital.c | 131 | roll_MdN( al_data[ 1 ], al_data[ 2 ] );
hospital.c | 139 | unguarded( (: save_object, SAVE_FILE :) );
hospital.c | 149 | log_file("HOSPITAL_DATA", "Hospital: add_mover called with %O.\n", thing );
hospital.c | 152 | random( MAX_MOVERS / 2 );
hospital.c | 167 | get_monster( city[ random( sizeof( city ) ) ] );
hospital.c | 169 | query_property( "monster type" ) );
hospital.c | 170 | add_move_zone( "Pumpkin" );
hospital.c | 171 | add_mover( thing );
hospital.c | 175 | clone_object( CHARS + "dog" );
hospital.c | 177 | set_type( "small" );
hospital.c | 179 | set_type( "large" );
hospital.c | 182 | add_effect( "/std/effects/npc/eat_edible" );
hospital.c | 183 | add_effect( "/std/effects/npc/savage_corpse" );
hospital.c | 184 | add_property( "monster type", type );
hospital.c | 185 | add_property("animal type", type);
hospital.c | 188 | clone_object( CHARS + "child_human" );
hospital.c | 192 | clone_object(MONSTER);
hospital.c | 193 | add_property("monster type", type);
hospital.c | 194 | set_name("guard");
hospital.c | 195 | add_adjective("city");
hospital.c | 196 | set_main_plural( "city guards" );
hospital.c | 197 | set_short("city guard");
hospital.c | 200 | set_race("human");
hospital.c | 201 | set_gender("male");
hospital.c | 202 | set_guild("fighter");
hospital.c | 203 | set_level(8);
hospital.c | 204 | set_al( pick_al() / 5 );
hospital.c | 205 | adjust_money( 5 + random( 10 ), "Pumpkin pence" );
hospital.c | 216 | request_weapon("long sword", 40+random(40))->move(ob);
hospital.c | 218 | request_armour("hard leather cap", 70 + random(30))->move(ob);
hospital.c | 219 | init_equip();
hospital.c | 222 | clone_object(MONSTER);
hospital.c | 223 | set_name("mercenary");
hospital.c | 224 | set_main_plural( "mercenaries" );
hospital.c | 225 | add_plural( "mercenaries" );
hospital.c | 226 | add_adjective("tough");
hospital.c | 227 | set_race("human");
hospital.c | 228 | set_class("fighter");
hospital.c | 229 | set_level( 50 + roll_MdN( 5, 50 ) );
hospital.c | 230 | set_al( pick_al() );
hospital.c | 231 | set_gender(random(2) + 1);
hospital.c | 234 | query_objective()+".\n");
hospital.c | 235 | adjust_money( 5 + random( 50 ), "Ankh-Morpork pence" );
hospital.c | 236 | adjust_money( 1 + random( 5 ), "Ankh-Morpork dollar" );
hospital.c | 250 | get_armour(ob, ({"chainmail", "splintmail", "ringmail"}));
hospital.c | 251 | add_property("monster type", type);
hospital.c | 252 | init_equip();
hospital.c | 255 | clone_object(MONSTER);
hospital.c | 256 | set_name("rat");
hospital.c | 257 | set_short("rat");
hospital.c | 258 | set_race("rat");
hospital.c | 259 | set_level( random( 1 + random( 3 ) ) );
hospital.c | 260 | add_alias("city rat");
hospital.c | 261 | set_main_plural("rats");
hospital.c | 262 | add_adjective("dirty");
hospital.c | 263 | add_adjective("city");
hospital.c | 272 | set_wimpy( 10 );
hospital.c | 279 | add_effect( "/std/effects/npc/eat_edible" );
hospital.c | 280 | add_effect( "/std/effects/npc/savage_corpse" );
hospital.c | 281 | add_property("monster type", type);
hospital.c | 282 | add_property("animal type", type);
hospital.c | 285 | clone_object(MONSTER);
hospital.c | 286 | set_name("cockroach");
hospital.c | 287 | set_short("cockroach");
hospital.c | 288 | set_race("cockroach");
hospital.c | 289 | set_level( random( 1 + random( 3 ) ) );
hospital.c | 290 | set_main_plural("cockroaches");
hospital.c | 291 | add_adjective("dirty");
hospital.c | 292 | add_alias("roach");
hospital.c | 304 | set_wimpy( 30 );
hospital.c | 311 | add_property("monster type", type);
hospital.c | 312 | add_property("animal type", type);
hospital.c | 315 | clone_object(MONSTER);
hospital.c | 316 | set_name("failure");
hospital.c | 317 | set_short("failure");
hospital.c | 319 | file_name( previous_object() ) +".\n" );
hospital.c | 320 | add_property( "monster type", "failure:"+ type );
hospital.c | 327 | move(ob);
hospital.c | 332 | move(ob);
hospital.c | 337 | move(ob);
hospital.c | 346 | query_property("monster type");
hospital.c | 347 | query_property("start location");
hospital.c | 355 | get_monster( explode( nam, ":" )[ 0 ] );
hospital.c | 356 | add_monster(player, ob);
hospital.c | 357 | call_out("do_move", 10, ({ ob, dest }) );
hospital.c | 361 | move(junk[1]);
hospital.c | 366 | query_name();
hospital.c | 371 | run_away();
hospital.c | 376 | previous_object()->attack_ob(ob1);
hospital.c | 387 | if ( sizeof( empties ) >
hospital.c | 398 | log_file("HOSPITAL_DATA", "Hospital: move_monster called with %O.\n", thing );
hospital.c | 406 | add_mover( thing );
hospital.c | 409 | query_move_zones();
hospital.c | 413 | query_zones();
hospital.c | 419 | member_array( zone, movez );
hospital.c | 425 | move( place );
hospital.c | 426 | add_monster( 0, thing );
hospital.c | 427 | announce_entry( thing );
hospital.c | 429 | add_mover( thing );
hospital.c | 432 | environment( thing );
hospital.c | 435 | add_mover( thing );
hospital.c | 437 | set_destination( direc );
hospital.c | 438 | query_destination( direc );
hospital.c | 444 | query_zones();
hospital.c | 446 | query_zones( dest );
hospital.c | 450 | member_array( zone, movez );
hospital.c | 457 | find_rel( direc, 0 );
hospital.c | 473 | call_out( "check_movers", 10 );
hospital.c | 479 | call_out( "move_monster", when, thing );
hospital.c | 488 | if(time() >
hospital.c | 489 | time();
hospital.c | 494 | return ( am_npcs < MAX_AM_LIVING );
hospital.c | 499 | return ({ am_npcs, last_check });
pumpkin1.c | 6 | set_short("Pumpkin Way");
pumpkin1.c | 7 | set_long("This is end of Pumpkin Way at the junction with Crumpet Circle.\n");
pumpkin1.c | 8 | set_light( 80 );
pumpkin1.c | 9 | add_exit("east", PUMPKIN + "pumpkin2", "road");
pumpkin1.c | 10 | add_exit("southwest", CRUMPT + "crumpt1", "road");
pumpkin1.c | 12 | set_monster(2, "pumpkin");
pumpkin2.c | 6 | set_short("Pumpkin Way");
pumpkin2.c | 7 | set_long("This is middle of Pumpkin Way just north of Crumpt Circle.\n");
pumpkin2.c | 8 | set_light( 80 );
pumpkin2.c | 9 | add_exit("west", PUMPKIN + "pumpkin1", "road");
pumpkin2.c | 10 | add_exit("south", PUMPKIN + "pumpkin3", "road");
pumpkin2.c | 12 | set_monster(2, "pumpkin");
pumpkin5.c | 6 | set_short("Pumpkin Way");
pumpkin5.c | 9 | set_light( 80 );
pumpkin5.c | 10 | add_exit("north", PUMPKIN + "pumpkin4", "road");
pumpkin5.c | 11 | add_exit("south", PUMPKIN + "pumpkin6", "road");
pumpkin5.c | 12 | add_exit("east", PATH + "stable_shop", "gate");
pumpkin5.c | 14 | set_monster(2, "pumpkin");
stable_shop.c | 6 | set_short("Stable shop");
stable_shop.c | 11 | add_exit("west", PATH + "pumpkin5", "gate");
stable_shop.c | 12 | set_light(70);
stable_shop.c | 15 | add_object("/obj/clothes/transport/horse/bit.trans");
stable_shop.c | 16 | add_object("/obj/clothes/transport/horse/bridle.trans");
stable_shop.c | 17 | add_object("/obj/clothes/transport/horse/saddle.trans");
stable_shop.c | 18 | add_object("/obj/clothes/transport/horse/reins.trans");
stable_shop.c | 19 | add_object("/obj/clothes/transport/horse/blinkers.trans");
stable_shop.c | 22 | add_object("pale grey horse");
stable_shop.c | 23 | add_object("painted grey horse");
stable_shop.c | 24 | add_object("plaid horse");
stable_shop.c | 25 | add_object("dappled brown horse");
stable_shop.c | 26 | add_object("light brown horse");
stable_shop.c | 27 | add_object("dark brown horse");
stable_shop.c | 28 | add_object("dark red horse");
stable_shop.c | 30 | add_object("black warhorse");
stable_shop.c | 32 | add_property("place", "Pumpkin");
stable_shop.c | 39 | if (strlen(thing) >
stable_shop.c | 40 | clone_object("/obj/monster/transport/warhorse");
stable_shop.c | 41 | set_colour(thing[0..<10]);
stable_shop.c | 42 | set_value(8);
stable_shop.c | 43 | add_property("cost here", 8);
stable_shop.c | 45 | if (strlen(thing) >
stable_shop.c | 46 | clone_object("/obj/monster/transport/horse");
stable_shop.c | 47 | set_colour(thing[0..<7]);
stable_shop.c | 48 | set_value(8);
stable_shop.c | 49 | add_property("cost here", 8);
stable_shop.c | 52 | clone_object(thing);
stable_shop.c | 53 | setup_clothing(1000);
stable_shop.c | 54 | set_value(8);
child_human.c | 6 | respond_to_soul(object play);
child_human.c | 12 | set_name( "child" );
child_human.c | 13 | random( sizeof( types ) );
child_human.c | 14 | set_short( types[ i ] +" child" );
child_human.c | 15 | add_adjective( types[ i ] );
child_human.c | 16 | set_main_plural( types[ i ] +" children" );
child_human.c | 17 | set_race( "human" );
child_human.c | 18 | set_gender( 1 + random( 2 ) );
child_human.c | 20 | query_weight();
child_human.c | 21 | modifier( weight );
child_human.c | 22 | set_base_weight( ( 3 * i ) / ( 4 + random( 6 ) ) );
child_human.c | 23 | query_height();
child_human.c | 24 | modifier( height );
child_human.c | 25 | set_height( ( 2 * i ) / ( 3 + random( 4 ) ) );
child_human.c | 26 | set_con( ( 2 * query_con() ) / ( 3 + random( 4 ) ) );
child_human.c | 27 | set_dex( ( 2 * query_dex() ) / ( 3 + random( 4 ) ) );
child_human.c | 28 | set_str( ( 2 * query_str() ) / ( 3 + random( 4 ) ) );
child_human.c | 29 | set_al( -50 + (int)HOSPITAL->pick_al() / 10 );
child_human.c | 30 | set_level( random( 5 ) );
child_human.c | 31 | set_wimpy( 90 );
child_human.c | 32 | set_long( "This is one of the inhabitants of Pumpkin.\n" );
child_human.c | 33 | add_effect( "/std/effects/npc/gossip", 5);
child_human.c | 34 | load_chat(40, ({ 1, "#do_gossip_say:$mess$" }));
child_human.c | 44 | do_command("'Thats not very nice!");
child_human.c | 47 | do_command("'Pick on someone your own size.");
child_human.c | 48 | do_command("glare " + player->query_name());
child_human.c | 51 | do_command("cry");
child_human.c | 52 | do_command("accuse " + player->query_name() + " of child abuse");
child_human.c | 55 | do_command("spunch " + player->query_name());
child_human.c | 56 | do_command("'Take that!  and that!");
child_human.c | 57 | do_command("skick " + player->query_name());
child_human.c | 60 | do_command("accuse " + player->query_name() + " of child abuse");
child_human.c | 63 | do_command("'I will tell my brother!");
child_human.c | 66 | call_out("run_away", 2);
dog.c | 26 | check_for_hidden();
dog.c | 27 | test_rabid_attack();
dog.c | 28 | test_urinate();
dog.c | 29 | pat_me( object per );
dog.c | 30 | sic_em( object per, string mess );
dog.c | 37 | set_name("dog");
dog.c | 38 | set_race("dog");
dog.c | 39 | set_gender(1 + random(2));
dog.c | 40 | set_level( 1 + random( 1 + random( 3 ) ) );
dog.c | 41 | add_adjective("hairy");
dog.c | 42 | add_adjective(explode(colour, " "));
dog.c | 46 | set_short( type +" "+ colour +" dog" );
dog.c | 47 | set_main_plural( type +" "+ colour +" dogs" );
dog.c | 48 | add_adjective( type );
dog.c | 55 | add_skill_level( "fighting", random( 10 + random( 30 ) ) );
dog.c | 56 | add_skill_level( "other.health", random( 10 + random( 30 ) ) );
dog.c | 57 | set_main_plural("large "+colour+" dogs");
dog.c | 58 | add_adjective("large");
dog.c | 64 | add_enter_commands( "#check_for_hidden" );
dog.c | 67 | add_effect( "/std/effects/disease/flea_infestation", 10000 );
dog.c | 71 | set_wimpy(10);
dog.c | 83 | query_name() }), "bite $hname$");
dog.c | 85 | set_wimpy( 70 );
dog.c | 99 | query_name() }), "#pat_me" );
dog.c | 100 | add_respond_to_with( ({ "@say", ({ "get", "sic" }), }), "#sic_em" );
dog.c | 103 | add_effect("/std/effects/npc/eat_edible", 0);
dog.c | 105 | add_effect("/std/effects/npc/i_died", ({ HOSPITAL, "regen_after_death" }));
dog.c | 106 | add_triggered_action("regen", "death", HOSPITAL, "regen_after_death");
dog.c | 107 | add_property("monster_type", type);
dog.c | 108 | add_property("animal type", type);
dog.c | 115 | query_hide_invis();
dog.c | 118 | do_command("bark loudly");
dog.c | 121 | query_name());
dog.c | 123 | do_command("bark loudly");
dog.c | 124 | call_out("bark_at_hidden", 2, per);
dog.c | 135 | query_property("following");
dog.c | 136 | all_inventory(environment(this_object()));
dog.c | 137 | sizeof(obs);
dog.c | 138 | query_hide_invis();
dog.c | 141 | call_out("bark_at_hidden", 0, obs[i]);
dog.c | 154 | query_level() >
dog.c | 155 | this_object());
dog.c | 157 | attack_ob(obs[0]);
dog.c | 165 | query_property("following");
dog.c | 166 | all_inventory(environment());
dog.c | 169 | check_for_hidden();
dog.c | 172 | sizeof(obs);
dog.c | 185 | tell_object(blue, capitalize(the_short()) + " urinates on your leg.\n");
dog.c | 186 | add_effect("/std/effects/other/dog_urinate", 120);
dog.c | 194 | call_out("i_like_them", 60+random(240), them);
dog.c | 196 | do_command("bounce excit");
dog.c | 199 | do_command("nuzzle "+them->query_name());
dog.c | 202 | do_command("stare pitifully at "+them->query_name());
dog.c | 205 | do_command("smile "+them->query_name());
dog.c | 208 | do_command("eye "+them->query_name());
dog.c | 211 | do_command("drool "+them->query_name());
dog.c | 219 | query_property("following");
dog.c | 222 | init_command("nuzzle "+per->query_name());
dog.c | 226 | init_command("follow "+per->query_name());
dog.c | 227 | init_command("protect "+per->query_name());
dog.c | 228 | add_property("following", per);
dog.c | 229 | call_out("i_like_them", 60+random(240), per);
dog.c | 231 | init_command("ignore "+per->query_name());
dog.c | 237 | if (query_property("excited") >
dog.c | 240 | do_command("growl");
dog.c | 243 | do_command("bark");
dog.c | 246 | do_command("caper");
dog.c | 249 | do_command("bounce excit");
dog.c | 253 | do_command("bounce excit");
dog.c | 255 | do_command("caper");
dog.c | 256 | call_out("periodic_excited", 10+random(10));
dog.c | 266 | explode(replace(mess, "!", ""), " ");
dog.c | 267 | query_property("following");
dog.c | 269 | match_objects_for_existence(bing[1], environment());
dog.c | 270 | filter_array(obs, (: living($1) :));
dog.c | 272 | query_property( "excited" );
dog.c | 273 | add_property( "excited", lvl+1 );
dog.c | 277 | query_property("excited");
dog.c | 279 | add_property("excited", lvl - 1);
dog.c | 281 | remove_property("excited");
dog.c | 282 | this_object());
dog.c | 284 | call_out("periodic_excited", 10+random(10));
dog.c | 288 | init_command("bounce excit");
dog.c | 291 | init_command("growl "+obs[0]->query_name());
dog.c | 294 | call_out((: attack_ob($2) :), 0, obs[0]);
fruitbat1.c | 6 | set_short("Fruitbat Avenue");
fruitbat1.c | 7 | set_long("This is Fruitbat Avenue at the junction with Crumpet Circle.\n");
fruitbat1.c | 8 | set_light( 80 );
fruitbat1.c | 9 | add_exit("east", FRUITBAT + "fruitbat2", "road");
fruitbat1.c | 10 | add_exit("north", CRUMPT + "crumpt8", "road");
fruitbat1.c | 12 | set_monster(1, "city");
fruitbat2.c | 6 | set_short("Fruitbat Avenue");
fruitbat2.c | 9 | set_light( 80 );
fruitbat2.c | 10 | add_exit("east", FRUITBAT + "fruitbat3", "road");
fruitbat2.c | 11 | add_exit("west", FRUITBAT + "fruitbat1", "road");
fruitbat2.c | 12 | add_exit("south", FRUITBAT + "general_store", "door");
fruitbat2.c | 14 | set_monster(1, "city");
fruitbat4.c | 6 | set_short("Fruitbat Avenue");
fruitbat4.c | 9 | set_light( 80 );
fruitbat4.c | 10 | add_exit("east", SQUASH + "squash4", "road");
fruitbat4.c | 11 | add_exit("west", FRUITBAT + "fruitbat3", "road");
fruitbat4.c | 13 | set_monster(1, "city");
general_store.c | 5 | set_short("Elephant's Stamp");
general_store.c | 10 | add_exit("north", FRUITBAT + "fruitbat2", "door");
general_store.c | 11 | set_light(70);
general_store.c | 12 | set_store_room(FRUITBAT + "storeroom");
general_store.c | 14 | add_property("place", "Pumpkin");
fruitbat3.c | 6 | set_short("Fruitbat Avenue");
fruitbat3.c | 9 | set_light( 80 );
fruitbat3.c | 10 | add_exit("east", FRUITBAT + "fruitbat4", "road");
fruitbat3.c | 11 | add_exit("west", FRUITBAT + "fruitbat2", "road");
fruitbat3.c | 12 | add_exit("north", FRUITBAT + "walrus_vault_entry", "door");
fruitbat3.c | 14 | set_monster(1, "city");
storeroom.c | 4 | set_short("Elephant's Storeroom");
storeroom.c | 5 | set_light(70);
storeroom.c | 6 | set_long("Lots of stored stuff.\n");
walrus_vault_entry.c | 7 | set_short("Wulrus's vault");
walrus_vault_entry.c | 12 | set_light(70);
walrus_vault_entry.c | 14 | set_vault_name("walrus");
walrus_vault_entry.c | 15 | set_visit_cost(400);
walrus_vault_entry.c | 16 | set_open_cost(4000);
walrus_vault_entry.c | 18 | add_exit("south", FRUITBAT + "fruitbat3", "door");
walrus_vault_entry.c | 19 | set_vault_exit("north", FRUITBAT + "walrus_vault", "door");
walrus_vault_entry.c | 20 | add_property("place", "Pumpkin");
walrus_vault_entry.c | 24 | set_proprietor(_npc);
walrus_vault.c | 5 | set_short("Wulrus's vault");
walrus_vault.c | 10 | set_light(70);
walrus_vault.c | 12 | set_vault_name("walrus");
walrus_vault.c | 14 | set_vault_exit("south", FRUITBAT + "walrus_vault_entry", "door");
walrus_vault.c | 15 | add_property("place", "Pumpkin");
master.c | 18 | create();
master.c | 20 | if( ( unguarded( (: file_size, LOGS + file :) ) >
master.c | 22 | unguarded( (: file_size, LOGS + file :) ) >
master.c | 26 | if(file_size(LOGS+file+"."+BACKUP_COUNT) >
master.c | 27 | unguarded( (: rm, LOGS + file +"."+ BACKUP_COUNT :) );
master.c | 30 | for(i=(BACKUP_COUNT-1);
master.c | 31 | if(file_size(LOGS+file+"."+i) >
master.c | 32 | unguarded( (: rename, LOGS+file+"."+i, LOGS+file+"."+(i+1) :) );
master.c | 35 | unguarded( (: rename, LOGS+file+".log", LOGS+file+"."+"1" :) );
master.c | 45 | capitalize(DOMAIN);
master.c | 51 | check_permission(euid, path, mask);
master.c | 62 | valid_read(string *path, string euid, string funct);
master.c | 64 | valid_write(string *path, string euid, string funct);
master.c | 75 | add_member(name);
master.c | 81 | remove_member(name);
master.c | 87 | set_project(name, pro);
common.c | 10 | set_dom(DOMAIN);
common.c | 11 | set_light(100);
common.c | 12 | add_exit("drum", CONFIG_START_ROOM, "door");
common.c | 13 | modify_exit( "drum", ({ "one way", 1 }) );
common.c | 14 | set_short("Common room of "+DOM_TITLE);
common.c | 21 | add_alias("chairs", "chair");
common.c | 22 | add_alias("cloths", "cloth");
common.c | 23 | add_alias("motifs", "motif");
common.c | 24 | add_alias("figurines", "figurine");
common.c | 55 | clone_object("/obj/misc/board");
common.c | 56 | set_datafile(DOMAIN);
common.c | 57 | move(this_object());
cloner_control.c | 18 | do_add(string from, string to);
cloner_control.c | 19 | do_remove(string from);
cloner_control.c | 20 | do_list(string matching);
cloner_control.c | 23 | set_light(100);
cloner_control.c | 24 | set_short("Cloner Room");
cloner_control.c | 31 | add_exit("southwest" , ROOM+"development" , "door");
cloner_control.c | 35 | init();
cloner_control.c | 58 | add_mapping(from, to);
cloner_control.c | 63 | remove_mapping(str);
cloner_control.c | 68 | this_player()->more_string(CLONER->list_mappings(from));
quest_room.c | 33 | do_create( string quest );
quest_room.c | 34 | do_delete( string quest );
quest_room.c | 35 | do_help( string what );
quest_room.c | 36 | do_level( string new_level );
quest_room.c | 37 | do_list();
quest_room.c | 38 | do_name( string new_name );
quest_room.c | 39 | do_story( string new_story );
quest_room.c | 40 | do_title( string new_title );
quest_room.c | 41 | remove_quest( string answer );
quest_room.c | 42 | init();
quest_room.c | 43 | setup();
quest_room.c | 62 | write( "You must set the quest level first.\n" );
quest_room.c | 67 | write( "You must set the quest story first.\n" );
quest_room.c | 72 | write( "You must set the quest title first.\n" );
quest_room.c | 77 | tell_room( this_object() , "Quest \"" + quest + "\" added.\n" );
quest_room.c | 84 | tell_room( this_object() , "Quest failed to add.\n" );
quest_room.c | 97 | query_quest_names();
quest_room.c | 103 | write( "Quest not found.\n" );
quest_room.c | 110 | input_to( "remove_quest" );
quest_room.c | 143 | sscanf( new_level , "%d" , level );
quest_room.c | 145 | tell_room( this_object() , "Quest level set to " + level + ".\n" );
quest_room.c | 162 | query_quest_names();
quest_room.c | 163 | sizeof( names );
quest_room.c | 171 | reset_eval_cost();
quest_room.c | 172 | this_player()->more_string( list, "Quest List", 1 );
quest_room.c | 182 | tell_room( this_object() , "Quest story set to:\n" + story + "\n" );
quest_room.c | 196 | tell_room( this_object() , "Quest title set to \"" + title + "\".\n" );
quest_room.c | 214 | this_player();
quest_room.c | 215 | geteuid( tp );
quest_room.c | 223 | add_action( "do_create" , "create" );
quest_room.c | 224 | add_action( "do_help"   , "help"   );
quest_room.c | 225 | add_action( "do_level"  , "level"  );
quest_room.c | 226 | add_action( "do_story"  , "story"  );
quest_room.c | 227 | add_action( "do_title"  , "title"  );
quest_room.c | 233 | add_action( "do_delete" , "delete" );
quest_room.c | 234 | add_action( "do_list"   , "list"   );
quest_room.c | 243 | do_help( "room" );
quest_room.c | 246 | init().\n\n" );
quest_room.c | 248 | init();
quest_room.c | 256 | lower_case( answer );
quest_room.c | 276 | set_short( "Quest Room" );
quest_room.c | 279 | set_long("Don't use this room, get a lord to use the quests command instead. This room will break the quests!\n");
quest_room.c | 280 | set_light( 100 );
quest_room.c | 281 | add_exit( "west" , ROOM+"development" , "corridor" );
site_control.c | 7 | do_banish(string);
site_control.c | 8 | do_access();
site_control.c | 9 | do_suspend(string);
site_control.c | 10 | do_unsuspend(string);
site_control.c | 17 | set_light(100);
site_control.c | 18 | set_short("site-access control room");
site_control.c | 19 | add_property("determinate", "the ");
site_control.c | 32 | seteuid("Admin");
site_control.c | 34 | add_exit("north", ROOM+"domain_control", "corridor");
site_control.c | 44 | init();
site_control.c | 47 | add_command("ban", "<string>", (:do_banish($4[0]):));
site_control.c | 48 | add_command("access", "", (:do_access():));
site_control.c | 49 | add_command("suspend", "<string'person'>", (:do_suspend($4[0]):));
site_control.c | 50 | add_command("unsuspend", "<string'person'>", (:do_unsuspend($4[0]):));
site_control.c | 59 | m_indices(bing);
site_control.c | 62 | sizeof(bits);
site_control.c | 79 | sizeof(bits);
site_control.c | 80 | print_access(bit+"."+bits[i], bing[bits[i]], depth+1, cols);
site_control.c | 89 | query_all_access();
site_control.c | 91 | notify_fail("No access control defined.\n");
site_control.c | 95 | write("Current access list:\n");
site_control.c | 96 | print_access("", bing, 0, (int)this_player()->query_cols());
site_control.c | 119 | write("Access permisions changed.\n");
site_control.c | 133 | notify_fail("Syntax: suspend <name> <time> <reason>\nWhere time is in hours.\n");
site_control.c | 136 | notify_fail("We failed!\n");
site_control.c | 139 | write(name+" suspended until "+ctime(time()+tim*60*60)+"\n");
site_control.c | 148 | notify_fail("We failed!\n");
site_control.c | 151 | write(str+" unsuspended.\n");
access_control.c | 14 | do_read(string euid, string path);
access_control.c | 15 | do_write(string euid, string path);
access_control.c | 16 | do_grant(string euid, string path);
access_control.c | 17 | do_lock(string path);
access_control.c | 18 | do_noread(string euid, string path);
access_control.c | 19 | do_nowrite(string euid, string path);
access_control.c | 20 | do_nogrant(string euid, string path);
access_control.c | 21 | do_unlock(string path);
access_control.c | 22 | do_summary(string str);
access_control.c | 23 | do_tidy();
access_control.c | 26 | set_light(100);
access_control.c | 27 | set_short("file-access control room");
access_control.c | 28 | add_property("determinate", "the ");
access_control.c | 44 | add_exit("east", ROOM+"domain_control", "corridor");
access_control.c | 48 | init();
access_control.c | 50 | do_read($4[0], $4[1]) :) );
access_control.c | 52 | do_write($4[0], $4[1]) :) );
access_control.c | 54 | do_grant($4[0], $4[1]) :) );
access_control.c | 56 | do_lock($4[0]) :) );
access_control.c | 58 | do_noread($4[0], $4[1]) :) );
access_control.c | 60 | do_nowrite($4[0], $4[1]) :) );
access_control.c | 62 | do_nogrant($4[0], $4[1]) :) );
access_control.c | 64 | do_unlock($4[0]) :) );
access_control.c | 66 | do_summary($4[0]) :) );
access_control.c | 68 | do_tidy() :) );
access_control.c | 74 | this_player()->one_short(), "cheat");
access_control.c | 76 | do_read("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 79 | this_player()->get_path(path);
access_control.c | 82 | notify_fail("You do not have permission to add read access.\n");
access_control.c | 85 | notify_fail("Something went wrong.\n");
access_control.c | 86 | return (int)master()->add_read_permission(euid, path);
access_control.c | 92 | this_player()->one_short(), "cheat");
access_control.c | 94 | do_write("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 97 | this_player()->get_path(path);
access_control.c | 100 | notify_fail("You do not have permission to add write access.\n");
access_control.c | 103 | notify_fail("Something went wrong.\n");
access_control.c | 104 | return (int)master()->add_write_permission(euid, path);
access_control.c | 110 | this_player()->one_short(), "cheat");
access_control.c | 112 | do_grant("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 115 | this_player()->get_path(path);
access_control.c | 118 | notify_fail("You do not have permission to add grant access.\n");
access_control.c | 121 | notify_fail("Something went wrong.\n");
access_control.c | 122 | return (int)master()->add_grant_permission(euid, path);
access_control.c | 128 | this_player()->one_short(), "cheat");
access_control.c | 130 | do_lock("+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 134 | notify_fail("Syntax: "+query_verb()+" <path>\n");
access_control.c | 136 | notify_fail("You don't have permission to lock paths.\n");
access_control.c | 139 | notify_fail("You don't have permission to lock paths there.\n");
access_control.c | 140 | notify_fail("Something went wrong.\n");
access_control.c | 141 | return (int)master()->lock_path(path);
access_control.c | 147 | this_player()->one_short(), "cheat");
access_control.c | 149 | do_noread("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 152 | this_player()->get_path(path);
access_control.c | 155 | notify_fail("You do not have permission to remove read access.\n");
access_control.c | 158 | notify_fail("Something went wrong.\n");
access_control.c | 159 | return (int)master()->remove_read_permission(euid, path);
access_control.c | 165 | this_player()->one_short(), "cheat");
access_control.c | 167 | do_nowrite("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 170 | this_player()->get_path(path);
access_control.c | 173 | notify_fail("You do not have permission to remove write access.\n");
access_control.c | 176 | notify_fail("Something went wrong.\n");
access_control.c | 177 | return (int)master()->remove_write_permission(euid, path);
access_control.c | 183 | this_player()->one_short(), "cheat");
access_control.c | 185 | do_nogrant("+euid+", "+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 188 | this_player()->get_path(path);
access_control.c | 191 | notify_fail("You do not have permission to remove grant access.\n");
access_control.c | 194 | notify_fail("Something went wrong.\n");
access_control.c | 195 | return (int)master()->remove_grant_permission(euid, path);
access_control.c | 201 | this_player()->one_short(), "cheat");
access_control.c | 203 | do_unlock("+path+").\nBacktrace: "+ back_trace() :));
access_control.c | 207 | notify_fail("Syntax: "+query_verb()+" <path>\n");
access_control.c | 209 | notify_fail("You don't have permission to lock paths.\n");
access_control.c | 212 | notify_fail("You don't have permission to lock paths there.\n");
access_control.c | 213 | notify_fail("Something went wrong.\n");
access_control.c | 214 | return (int)master()->unlock_path(path);
access_control.c | 230 | master()->query_permissions();
access_control.c | 234 | write("There are no permissions for "+str+".\n");
access_control.c | 243 | sort_array( m_indices( perms ), "list_before", this_object() );
access_control.c | 247 | sprintf("%11-s    Path\n", "Euid");
access_control.c | 248 | sizeof(paths);
access_control.c | 249 | m_indices(perms[paths[i]]);
access_control.c | 250 | sizeof(euids);
access_control.c | 254 | sprintf("%11-s LCK %s\n", euids[j], paths[i]);
access_control.c | 262 | this_player()->more_string( ret, "Permissions", 1 );
access_control.c | 273 | this_player()->query_name(), "cheat" );
access_control.c | 276 | this_player()->query_name() +"\n" :));
access_control.c | 277 | notify_fail( "Failed.\n" );
access_control.c | 279 | master()->query_permissions();
access_control.c | 286 | write( "No creator: "+ creator +".\n" );
access_control.c | 288 | master()->remove_read_permission( creator, path );
access_control.c | 290 | master()->remove_write_permission( creator, path );
access_control.c | 292 | master()->remove_grant_permission( creator, path );
access_control.c | 299 | write( "Access to / supercedes "+ path +" for "+ creator +".\n" );
access_control.c | 301 | master()->remove_read_permission( creator, path );
access_control.c | 303 | master()->remove_write_permission( creator, path );
access_control.c | 305 | master()->remove_grant_permission( creator, path );
access_control.c | 308 | explode( path, "/" );
access_control.c | 319 | master()->remove_read_permission( creator, path );
access_control.c | 321 | master()->remove_write_permission( creator, path );
access_control.c | 323 | master()->remove_grant_permission( creator, path );
playroom.c | 9 | clone_object("obj/misc/board");
playroom.c | 10 | set_datafile("playerhelp");
playroom.c | 11 | move(this_object());
playroom.c | 16 | set_light(60);
playroom.c | 17 | set_short("Player Help Room");
playroom.c | 27 | add_exit("east", "/w/common", "door");
playroom.c | 32 | dest_me();
playroom.c | 33 | dest_me();
playroom.c | 38 | tell_object(ob, "Whoops!  You don't seem to be a creator.\n");
playroom.c | 39 | call_out("do_move", 2, ob);
playroom.c | 44 | tell_object( ob, "A trap door opens in the floor and you fall through!\n" );
mail_room.c | 9 | do_add(string list, string name);
mail_room.c | 10 | do_list(string str);
mail_room.c | 11 | do_create(string str);
mail_room.c | 12 | do_remove(string list, string names);
mail_room.c | 15 | set_short("Mail control room");
mail_room.c | 22 | set_light(100);
mail_room.c | 24 | add_exit("south", ROOM + "development", "door");
mail_room.c | 46 | init();
mail_room.c | 53 | do_add($4[0], $4[1]) :) );
mail_room.c | 57 | do_list($4[0]) :) );
mail_room.c | 61 | do_list() :) );
mail_room.c | 65 | do_remove($4[0], $4[1]) :) );
mail_room.c | 69 | do_create($4[0]) :) );
mail_room.c | 76 | notify_fail("The mailing list \"" + list + "\" does not exist.\n");
mail_room.c | 84 | explode(replace(lower_case(name), " ", ","), ",") - ({ "" });
mail_room.c | 86 | notify_fail("It helps if you tell me who to add.\n");
mail_room.c | 94 | write("The player \"" + name + "\" does not exist.\n");
mail_room.c | 96 | write("Added " + name + " as a controller of \"" + list + "\".\n");
mail_room.c | 103 | write("The player \"" + name + "\" does not exist.\n");
mail_room.c | 105 | write("Added " + name + " to the mailing list.\n");
mail_room.c | 107 | write("Failed to add " + name + " to the mailing list.\n");
mail_room.c | 117 | query_mailing_lists();
mail_room.c | 118 | write("$I$5=Current mailing lists: " + query_multiple_short(strs) + ".\n");
mail_room.c | 120 | query_members(str);
mail_room.c | 121 | query_controllers(str);
mail_room.c | 123 | notify_fail("The mailing list \""+str+"\" does not exist.\n");
mail_room.c | 127 | write("The list \"" + str + "\" was created by " + creator + ".\n");
mail_room.c | 131 | query_multiple_short(cont) + ".\n");
mail_room.c | 134 | query_multiple_short(strs) + ".\n");
mail_room.c | 143 | notify_fail("The mailing list \""+list+"\" does not exist.\n");
mail_room.c | 151 | explode(replace(lower_case(name), " ", ","), ",") - ({ "" });
mail_room.c | 153 | notify_fail("It helps if you tell me who to remove.\n");
mail_room.c | 161 | write("Removed " + name + " as a controller of \"" + list + "\".\n");
mail_room.c | 170 | write("Removed " + name + " from the mailing list.\n");
mail_room.c | 172 | write("Could not remove " + name + " from the mailing list.\n");
mail_room.c | 180 | notify_fail("The list \"" + str + "\" already exists.\n");
mail_room.c | 184 | notify_fail("The mailing list name cannot have spaces or commas in it.\n");
mail_room.c | 188 | write("Created the mailing list \""+str+"\".\n");
mail_room.c | 191 | notify_fail("Failed to create the mailing list.\n");
domain_control.c | 7 | do_list(string arg);
domain_control.c | 8 | do_create(string dom, string lord);
domain_control.c | 9 | do_list_all();
domain_control.c | 10 | do_deputy(string cre, string dom);
domain_control.c | 11 | do_undeputy(string cre, string dom);
domain_control.c | 12 | do_create(string dom, string lord);
domain_control.c | 13 | do_project(string cre, string dom, string project);
domain_control.c | 14 | do_add(string cre, string dom);
domain_control.c | 15 | do_delete(string cre, string dom);
domain_control.c | 21 | set_light(100);
domain_control.c | 22 | set_short("domain-control room");
domain_control.c | 23 | add_property("determinate", "the ");
domain_control.c | 45 | add_alias("elephant", "elephants");
domain_control.c | 46 | add_exit("north", ROOM+"development", "corridor");
domain_control.c | 47 | add_exit("south", ROOM+"site_control", "corridor");
domain_control.c | 48 | add_exit("west", ROOM+"access_control", "corridor");
domain_control.c | 49 | seteuid("Admin");
domain_control.c | 53 | init();
domain_control.c | 55 | add_action("list", "list", 10);
domain_control.c | 56 | add_action("create_domain", "create", 10);
domain_control.c | 57 | add_action("add_creator", "add", 10);
domain_control.c | 58 | add_action("delete_creator", "delete", 10);
domain_control.c | 59 | add_action("do_project", "project", 10);
domain_control.c | 61 | add_command("list", "", (: do_list_all() :) );
domain_control.c | 62 | add_command("list", "<word>", (: do_list($4[0]) :) );
domain_control.c | 63 | add_command("create", "<word>", (: do_create($4[0], 0) :) );
domain_control.c | 64 | add_command("create", "<word> <word>", (: do_create($4[0], $4[1]) :) );
domain_control.c | 65 | add_command("add", "<word> <word>", (: do_add($4[0], $4[1]) :) );
domain_control.c | 66 | add_command("delete", "<word> <word>", (: do_delete($4[0], $4[1]) :) );
domain_control.c | 68 | do_project($4[0], $4[1], $4[2]) :) );
domain_control.c | 69 | add_command("deputy", "<word> <word>", (: do_deputy($4[0], $4[1]) :) );
domain_control.c | 70 | add_command("undeputy", "<word> <word>", (: do_undeputy($4[0], $4[1]) :) );
domain_control.c | 80 | query_domains();
domain_control.c | 82 | notify_fail("No domains exist.\n");
domain_control.c | 86 | write("Current domains:\n");
domain_control.c | 87 | sizeof(domains);
domain_control.c | 89 | query_members();
domain_control.c | 93 | capitalize( (string)mast->query_lord() ) );
domain_control.c | 105 | query_domains();
domain_control.c | 107 | notify_fail("No domains exist.\n");
domain_control.c | 112 | notify_fail("No such domain as " + arg + ".\n");
domain_control.c | 118 | query_members();
domain_control.c | 119 | this_player()->query_cols();
domain_control.c | 120 | sizeof(members);
domain_control.c | 123 | query_deputy(members[i])?" (deputy)":""));
domain_control.c | 133 | notify_fail("You lack the Power of Change on this scale!\n");
domain_control.c | 137 | this_player()->query_name();
domain_control.c | 158 | notify_fail("No such domain as " + dom + ".\n");
domain_control.c | 162 | this_player()->expand_nickname(cre);
domain_control.c | 167 | notify_fail( "You are not a Lord.\n" );
domain_control.c | 178 | write("Creator " + capitalize(cre) + " now added to domain " + dom + ".\n");
domain_control.c | 189 | notify_fail("No such domain as " + dom + ".\n");
domain_control.c | 193 | this_player()->expand_nickname(cre);
domain_control.c | 198 | notify_fail( "You are not a Lord.\n" );
domain_control.c | 209 | write("Member " + capitalize(cre) + " removed from domain " + dom + ".\n");
domain_control.c | 220 | notify_fail("No such domain as " + dom + ".\n");
domain_control.c | 223 | this_player()->expand_nickname(cre);
domain_control.c | 227 | notify_fail( "You are not a Lord.\n" );
domain_control.c | 234 | capitalize(cre) + " in the domain " + dom + "\n");
domain_control.c | 250 | notify_fail("No such domain as " + dom + ".\n");
domain_control.c | 253 | this_player()->expand_nickname(cre);
domain_control.c | 258 | capitalize(cre) + " to the domain " + dom + "\n");
domain_control.c | 274 | notify_fail("No such domain as " + dom + ".\n");
domain_control.c | 277 | this_player()->expand_nickname(cre);
domain_control.c | 282 | capitalize(cre) + " from the domain " + dom + "\n");
meeting.c | 8 | set_short("Meeting room");
meeting.c | 16 | set_light(70);
meeting.c | 25 | used (you can tell, all the dust).\n");
meeting.c | 43 | clone_object("/std/object");
meeting.c | 44 | set_name("floor");
meeting.c | 45 | set_short( "floor" );
meeting.c | 46 | add_property( "determinate", "the " );
meeting.c | 51 | move(this_object());
meeting.c | 57 | init();
meeting.c | 62 | previous_object()->query_name();
meeting.c | 65 | add_action("appoint", "appoint");
meeting.c | 66 | add_action("bang", "bang");
meeting.c | 67 | add_action("recover", "recover");
meeting.c | 69 | add_action("do_log", "log");
meeting.c | 77 | notify_fail("The chair has already been apointed.\n");
meeting.c | 81 | notify_fail("Sorry, cannot find "+str+" to be the chair.\n");
meeting.c | 87 | write("Ok, "+str+" is now the chair of the meeting.\n");
meeting.c | 91 | move(this_object());
meeting.c | 92 | set_read_mess("The chair of the meeting is "+str+".\n");
meeting.c | 98 | notify_fail("Only the chair can bang the gavel.\n");
meeting.c | 109 | reset();
meeting.c | 110 | move(this_player());
meeting.c | 111 | write("Floor recovered.\n");
meeting.c | 112 | say(this_player()->one_short()+" has recovered the floor.\n");
meeting.c | 118 | write("Stopped logging.\n");
meeting.c | 128 | write("Stopped loggin to "+log_bing+" and started logging to "+str+".\n");
meeting.c | 130 | write("Logging to "+str+".\n");
meeting.c | 137 | log_file(log_bing, start+rest+"\n");
meeting.c | 142 | log_file(log_bing, rest);
meeting.c | 147 | log_file(log_bing, rest);
meeting.c | 152 | dest_me();
meeting.c | 153 | dest_me();
terrain.c | 9 | do_help();
terrain.c | 10 | do_terrain(string name);
terrain.c | 11 | do_list(string what);
terrain.c | 12 | do_member(string type, string params);
terrain.c | 13 | do_clear();
terrain.c | 23 | set_short( "terrain-maker room" );
terrain.c | 24 | add_property( "determinate", "the " );
terrain.c | 25 | set_light( 100 );
terrain.c | 31 | add_exit( "northwest", ROOM +"development", "door" );
terrain.c | 56 | clone_object( "/obj/handlers/terrain_things/dungeon_maker" );
terrain.c | 57 | move( this_object() );
terrain.c | 62 | init();
terrain.c | 63 | add_command("help", "room", (: do_help() :) );
terrain.c | 64 | add_command("terrain", "<string>", (: do_terrain($4[0]) :) );
terrain.c | 65 | add_command("list", "fixed", (: do_list("fixed") :) );
terrain.c | 66 | add_command("list", "floating", (: do_list("floating") :) );
terrain.c | 67 | add_command("member", "", (: do_member(0,0) :) );
terrain.c | 69 | do_member("fixed", $4[0]) :) );
terrain.c | 71 | do_member("floating", $4[0]) :) );
terrain.c | 74 | do_add(0, $4[0], $4[1], $4[2], $4[3], 0, 0, 0, 0) :) );
terrain.c | 89 | do_remove(0, $4[0], 0, 0, 0, 0, 0, 0) :) );
terrain.c | 99 | add_command("clear", "", (: do_clear() :) );
terrain.c | 116 | write( "Terrain name is "+ terrain_name +".\n" );
terrain.c | 118 | write( "There is no terrain name set.\n" );
terrain.c | 121 | write( "Terrain name set to "+ name +".\n" );
terrain.c | 132 | write( "List what? Options are \"fixed\" and \"floating\".\n" );
terrain.c | 136 | write( "There is no current terrain name.\n" );
terrain.c | 140 | write( "There are no locations in the terrain "+ terrain_name +".\n" );
terrain.c | 144 | query_fixed_locations( terrain_name );
terrain.c | 145 | m_sizeof( locations );
terrain.c | 146 | m_indices( locations );
terrain.c | 147 | m_values( locations );
terrain.c | 159 | this_player()->more_string( list, "Fixed" );
terrain.c | 162 | query_floating_locations( terrain_name );
terrain.c | 163 | sizeof( locations );
terrain.c | 182 | this_player()->more_string( list, "Floating" );
terrain.c | 191 | write( "Syntax: member <fixed|floating> <coord1> ...\n" );
terrain.c | 195 | write( "Syntax: member <fixed|floating> ...\n" );
terrain.c | 199 | write( "There is no current terrain name.\n" );
terrain.c | 202 | allocate( 3 );
terrain.c | 206 | write( "Syntax: member fixed <coord1> <coord2> <coord3>\n" );
terrain.c | 209 | get_data_file( terrain_name );
terrain.c | 210 | member_fixed_locations( co_ords );
terrain.c | 224 | write( "Syntax: member floating <coord1> <coord2> <coord3>\n" );
terrain.c | 227 | get_data_file( terrain_name );
terrain.c | 228 | member_floating_locations( co_ords );
terrain.c | 243 | this_player()->more_string( list, "Member" );
terrain.c | 254 | write( "There is no current terrain name.\n" );
terrain.c | 258 | allocate(3);
terrain.c | 263 | allocate(6);
terrain.c | 282 | add_floating_location( terrain_name, file, co_ords, level );
terrain.c | 301 | write( "There is no current terrain name.\n" );
terrain.c | 305 | allocate(3);
terrain.c | 310 | allocate(6);
terrain.c | 354 | write( "There is no current terrain name.\n" );
terrain.c | 357 | clear_cloned_locations( terrain_name );
terrain.c | 358 | clear_connections( terrain_name );
development.c | 8 | clone_object("obj/misc/board");
development.c | 9 | set_datafile("development");
development.c | 10 | move(this_object());
development.c | 15 | set_light(80);
development.c | 16 | set_short("Mud Development Office");
development.c | 22 | add_item("clerk", "They seem more interested in coffee than work.\n");
development.c | 25 | add_exit("west", "w/common", "door");
development.c | 26 | add_exit("east", ROOM+"quest_room", "door");
development.c | 27 | add_exit("north", ROOM+"mail_room", "door");
development.c | 28 | add_exit("south", ROOM+"domain_control", "corridor");
development.c | 29 | add_exit("northeast", ROOM+"cloner_control", "door");
development.c | 30 | add_exit( "southeast", ROOM +"terrain", "door" );
development.c | 35 | dest_me();
development.c | 36 | dest_me();
main_club_room.c | 6 | set_short("main club room");
main_club_room.c | 7 | set_long("The main club room.\n");
main_club_room.c | 8 | set_club_controller(CONTROLLER);
main_club_room.c | 9 | set_light(70);
main_club_room.c | 10 | set_leave_exit("south");
main_club_room.c | 12 | add_exit("south", "/d/admin/room/meeting", "door");
owned_room1.c | 5 | set_short("The first owned room");
owned_room1.c | 6 | set_long("A room that is owned.\n");
owned_room1.c | 8 | set_club_controller(CLUB_CONTROLLER);
owned_room1.c | 9 | set_club_owned_id("main office");
club_room_controller.c | 6 | set_save_file("/d/admin/save/club_room");
club_room_controller.c | 7 | set_board_associated(1);
club_room_controller.c | 11 | query_president_position($2) :));
check.c | 16 | destruct(this_object());
check.c | 31 | m_indices(illegal);
check.c | 32 | values(illegal);
check.c | 34 | if(sizeof(illegal)>
check.c | 36 | ctime(time())+" from here.\n" :));
check.c | 38 | sizeof(illegal);
check.c | 52 | sizeof(things);
check.c | 54 | explode(file_name(things[q]),"#");
check.c | 58 | explode(filename,"/");
check.c | 62 | query_name()]);
check.c | 66 | stats();
check.c | 68 | sizeof(info);
check.c | 80 | destruct(things[q]);
check.c | 82 | dest_me();
check.c | 86 | if ( (!owner->query_creator()) && (sizeof(switcher)>
check.c | 95 | stats();
check.c | 97 | sizeof(info);
check.c | 107 | query_name()]);
check.c | 109 | destruct(things[q]);
check.c | 122 | deep_inventory(player);
check.c | 125 | check_sub_inv(things, player);
check.c | 133 | seteuid("Admin");
check.c | 135 | users();
check.c | 137 | sizeof(everyone_on);
check.c | 139 | check_inv(everyone_on[p]);
check.c | 142 | log_file();
bingle.c | 4 | set_name("domainer");
bingle.c | 12 | add_action("do_info", "info");
bingle.c | 24 | this_player()->query_cols();
bingle.c | 25 | get_dir("/w/");
bingle.c | 26 | get_dir("/d/");
bingle.c | 30 | sizeof(creators);
bingle.c | 32 | delete(creators, i, 1);
bingle.c | 36 | delete(creators, i, 1);
bingle.c | 39 | sizeof(domains);
bingle.c | 41 | query_lord() });
bingle.c | 45 | sizeof(mem);
bingle.c | 53 | printf("%s%-=*s\n", bit, cols-strlen(bit), implode(mem, ", ")+".");
bingle.c | 56 | write("These creators are in domains but do not have a directory:\n");
bingle.c | 57 | printf("    %-=*s", cols-5, implode(keys(no_dir), ", ")+".\n");
bingle.c | 60 | write("These creators are in domains but are not actually creators:\n");
bingle.c | 61 | printf("    %-=*s", cols-5, implode(keys(not_creator), ", ")+".\n");
bingle.c | 64 | write("These creators are not in any domain:\n");
bingle.c | 65 | printf("    %-=*s", cols-5, implode(creators, ", ")+".\n");
bingle.c | 68 | write("These creators have a directory, but are not creators...:\n");
bingle.c | 69 | printf("    %-=*s", cols-5, implode(cre_not, ", ")+".\n");
inv_check.c | 13 | do_seek();
inv_check.c | 19 | unguarded ((: save_object (FILENAME) :));
inv_check.c | 23 | destruct( this_object() );
inv_check.c | 24 | save_me();
inv_check.c | 29 | seteuid( "Admin" );
inv_check.c | 30 | unguarded ((: restore_object (FILENAME) :));
inv_check.c | 31 | do_seek();
inv_check.c | 35 | if( sizeof( to_log ) >
inv_check.c | 53 | query_property( "virtual name" );
inv_check.c | 55 | explode( file_name( thing ),"#" );
inv_check.c | 59 | explode( filename, "/" );
inv_check.c | 65 | query_cloned_by() );
inv_check.c | 69 | if ( ( sizeof( switcher ) >
inv_check.c | 78 | query_cloned_by() );
inv_check.c | 85 | query_cloned_by() );
inv_check.c | 97 | query_cloned_by() );
inv_check.c | 100 | reset_eval_cost();
inv_check.c | 104 | query_cloned_by() );
inv_check.c | 106 | add_property ("no recycling", 1);
inv_check.c | 108 | all_inventory (thing);
inv_check.c | 125 | filter (contents, (: $1->query_property("fragile") :));
inv_check.c | 131 | move (owner_ob);
inv_check.c | 135 | clone_object ("/obj/baggage");
inv_check.c | 136 | set_name ("bag");
inv_check.c | 137 | set_short ("brown paper bag");
inv_check.c | 138 | add_adjective (({"brown", "paper"}));
inv_check.c | 139 | set_weight(5);
inv_check.c | 141 | query_complete_weight() :)),(: $1 + $2 :)) + 1);
inv_check.c | 142 | set_value (0);
inv_check.c | 146 | move (bag);
inv_check.c | 159 | tell_object (owner_ob, mess);
inv_check.c | 160 | move( "/room/rubbish" );
inv_check.c | 161 | call_out( "check_obs", 7, obs );
inv_check.c | 169 | dest_me();
inv_check.c | 177 | deep_inventory( player );
inv_check.c | 178 | check_sub_inv( things, (string)player->query_name(), player );
inv_check.c | 191 | check_inv( user );
inv_check.c | 194 | log_it();
inv_check.c | 196 | call_out( "do_seek", 300 );
inv_check.c | 232 | printf ("Please get a lord to ban your object for you.\n");
inv_check.c | 236 | parse_filename (filename);
inv_check.c | 239 | printf ("No file with that filename.\n", filename);
inv_check.c | 245 | printf ("%s added to the list of banned objects.\n", filename);
inv_check.c | 246 | save_me();
inv_check.c | 249 | printf ("%s already banned.\n", filename);
inv_check.c | 258 | printf ("Please get a lord to unban your object for you.\n");
inv_check.c | 262 | parse_filename (filename);
inv_check.c | 265 | printf ("No file with that filename.\n", filename);
inv_check.c | 271 | printf ("%s removed from the list of banned objects.\n", filename);
inv_check.c | 272 | save_me();
inv_check.c | 275 | printf ("%s not currently banned.\n", filename);
inv_check.c | 285 | implode (forbidden, "\n"));
master.c | 20 | capitalize(DOMAIN);
master.c | 26 | check_permission(euid, path, mask);
master.c | 37 | valid_read(string *path, string euid, string funct);
master.c | 39 | valid_write(string *path, string euid, string funct);
master.c | 51 | add_member(name);
master.c | 57 | remove_member(name);
master.c | 63 | set_project(name, pro);
master.c | 93 | map_delete(member_alias, name);
master.c | 98 | sizeof( member_alias[ name ] );
master.c | 100 | lower_case( member_alias[ name ][ i ] );
master.c | 115 | save_me();
master.c | 127 | save_me();
master.c | 132 | query_members();
master.c | 144 | sort_array(query_deputies(),1);
master.c | 148 | sort_array( temporary_array, 1 );
master.c | 168 | copy(member_cache);
master.c | 173 | values(members);
cre_corridor.c | 11 | do_mirror();
cre_corridor.c | 14 | set_short("Liaison hallway");
cre_corridor.c | 15 | set_light(100);
cre_corridor.c | 16 | add_property("determinate", "the ");
cre_corridor.c | 53 | add_alias("mission", "statement");
cre_corridor.c | 55 | add_item("frame", "It's just a frame holding a large scroll in place.");
cre_corridor.c | 56 | add_item("hair", "It's hair.  It's reddish blond and it's Ohdamn's.");
cre_corridor.c | 57 | add_item("rum", "It's rum.  Held very securely by Ohdamn.");
cre_corridor.c | 58 | add_item("chocolates", "They are chocolates.  On Ohdamn's painting.");
cre_corridor.c | 69 | add_item("socks", "Stop looking - that's illegal in some countries!");
cre_corridor.c | 75 | add_item("pint", "A half empty pint in Nevvyn's hand.  Says it all!");
cre_corridor.c | 79 | add_item("wings", "Wings.  On Wyvyrn.");
cre_corridor.c | 80 | add_alias("painting of me", "painting of you");
cre_corridor.c | 92 | add_item("mirror", (: do_mirror() :));
cre_corridor.c | 94 | add_exit("common", "/d/liaison/common", "door");
cre_corridor.c | 95 | add_exit("drum", "/d/am/am/mendeddrum", "path");
cre_corridor.c | 99 | add_exit(CREATOR, "workroom path", "door");
cre_corridor.c | 111 | this_player()->long(this_player());
cre_corridor.c | 114 | this_player());
common.c | 11 | set_dom( DOMAIN );
common.c | 12 | set_light( 100 );
common.c | 13 | set_short( "Liaison Domain Common room" );
common.c | 14 | add_property( "determinate", "the " );
common.c | 24 | add_alias("balls", "ball");
common.c | 25 | add_alias("devices", "device");
common.c | 26 | add_alias("bottles", "bottle");
common.c | 27 | add_alias("chairs", "chair");
common.c | 28 | add_alias("whips", "whip");
common.c | 29 | add_alias("chains", "chain");
common.c | 30 | add_alias("easy chair", "chair");
common.c | 31 | add_alias("dolls", "doll");
common.c | 32 | add_alias("armrests", "armrest");
common.c | 33 | add_alias("cushions", "cushion");
common.c | 34 | add_alias("strings", "string");
common.c | 35 | add_alias("needles", "needle");
common.c | 61 | add_item("whip", "I told you not to mention them.");
common.c | 62 | add_item("chain", "I told you not to mention them.");
common.c | 108 | add_item("armrest", "It's an armrest.  You rest your arm on it.");
common.c | 109 | add_item("wall", "It's a wall.  That's about it.");
common.c | 110 | add_item("cushion", "It's a cushion. You rest your bum on it.");
common.c | 128 | clone_object("/obj/misc/board");
common.c | 129 | set_datafile(DOMAIN);
common.c | 130 | move(this_object());
common.c | 131 | add_exit("office", "/w/wyvyrn/rooms/study", "door");
common.c | 132 | add_exit("drum", CONFIG_START_LOCATION, "path");
common.c | 133 | add_exit("corridor", "/d/liaison/cre_corridor", "door");
common.c | 134 | add_exit("interview", "/d/liaison/utils/interview", "door");
common.c | 135 | add_exit("common", "/d/"+DOMAIN+"/common", "door");
common.c | 139 | this_player()->add_command( "add", this_object(), "<word> <word>" );
common.c | 140 | this_player()->add_command( "add", this_object(), "<word>" );
common.c | 141 | this_player()->add_command( "remove", this_object(), "<word> <word>" );
common.c | 142 | this_player()->add_command( "remove", this_object(), "<word>" );
common.c | 143 | this_player()->add_command( "list", this_object(), "" );
common.c | 144 | this_player()->add_command( "list", this_object(), "<word>" );
common.c | 231 | this_player()->query_name();
common.c | 234 | member_alias( name );
common.c | 235 | capitalize( name );
common.c | 236 | sizeof( names );
common.c | 240 | capitalize( names[ i ] );
common.c | 244 | query_multiple_short( names )+".\n" );
common.c | 248 | capitalize( names[ 0 ] )+".\n" );
newbie_book.c | 43 | set_name( "book" );
newbie_book.c | 44 | set_short( "newbie guide book");
newbie_book.c | 45 | set_main_plural( "newbie guide books" );
newbie_book.c | 46 | add_adjective( ({"newbie", "guide"}) );
newbie_book.c | 47 | add_alias( "newbiebook" );
newbie_book.c | 48 | set_weight( 2 );
newbie_book.c | 49 | set_value( 0 );
newbie_book.c | 56 | set_book_language( "general" );
newbie_book.c | 57 | set_book_dir( NEWBIE_SAVE + "newbie_book_page" );
help.c | 15 | set_zone( "Newbie" );
help.c | 16 | set_short( "Help Room" );
help.c | 17 | set_light( 75 );
help.c | 27 | add_item("wall", "The walls are hidden behind row upon row of shelves.\n");
help.c | 28 | add_item(({ "shelves", "shelf" }), "The shelves are filled with books.\n");
help.c | 118 | add_exit( "foyer", PATH +"foyer", "door");
help.c | 119 | add_alias( "southeast", "foyer");
help.c | 122 | add_property("no godmother", 1);
hints.c | 21 | set_zone( "Newbie" );
hints.c | 22 | set_short("Hints Room" );
hints.c | 23 | set_light( 75 );
hints.c | 24 | add_property("no teleport", 1);
hints.c | 60 | set_short("sign marked 'statistics'");
hints.c | 69 | set_short("sign marked 'combat'");
hints.c | 80 | set_short("sign marked 'navigation'");
hints.c | 102 | set_short("sign marked 'assistance'");
hints.c | 111 | set_short("sign marked 'skills'");
hints.c | 130 | set_short("sign marked 'advancement'");
hints.c | 138 | set_short("sign marked 'dying'");
hints.c | 141 | add_property("no godmother", 1);
hints.c | 143 | add_exit( "foyer", PATH + "foyer", "door" );
hints.c | 144 | add_alias( "northwest", "foyer");
hints.c | 186 | tell_object(this_player(), "You pick up the brooch.\n");
hints.c | 189 | clone_object( PATH + "womble_brooch" );
hints.c | 190 | move( this_player() );
newbie_book_old.c | 39 | set_name( "book" );
newbie_book_old.c | 40 | set_short( "newbie guide book");
newbie_book_old.c | 41 | set_main_plural( "newbie guide books" );
newbie_book_old.c | 42 | add_adjective( ( {"newbie", "guide"} ) );
newbie_book_old.c | 43 | set_weight( 2 );
newbie_book_old.c | 44 | set_value( 0 );
newbie_book_old.c | 45 | set_no_pages( PAGES );
newbie_book_old.c | 80 | set_open_page( 1 );
newbie_book_old.c | 100 | set_open_page( 2 );
newbie_book_old.c | 124 | set_open_page( 3 );
newbie_book_old.c | 145 | set_open_page( 4 );
newbie_book_old.c | 170 | set_open_page( 5 );
newbie_book_old.c | 185 | set_open_page( 6 );
newbie_book_old.c | 205 | set_open_page( 7 );
newbie_book_old.c | 217 | set_open_page( 8 );
newbie_book_old.c | 239 | set_open_page( 0 );
combat_room3.c | 13 | set_zone( "Newbie" );
combat_room3.c | 14 | set_short("John's Boot Camp");
combat_room3.c | 15 | add_property("determinate", "");
combat_room3.c | 16 | set_light( 75 );
combat_room3.c | 17 | add_property("no teleport", 1);
combat_room3.c | 35 | add_property("no godmother", 1);
combat_room3.c | 37 | add_exit( "combat", PATH + "combat", "door" );
combat_room3.c | 38 | add_alias( "southeast", "foyer");
combat_room3.c | 54 | add_property("there", "on the wall");
combat_room3.c | 57 | clone_object(PATH + "dummy");
combat_room3.c | 58 | move(this_object());
combat_room3.c | 60 | call_out("get_trainer", 1);
combat_room3.c | 65 | dest_me();
combat_room3.c | 67 | dest_me();
combat_room3.c | 69 | dest_me();
combat_room3.c | 70 | dest_me();
combat_room3.c | 75 | clone_object(PATH +"trainer");
combat_room3.c | 78 | whichone("john");
combat_room3.c | 79 | move( this_object(), "$N hobble$s toward you on his straw-filled stumps." );
combat_room3.c | 80 | set_trainer(trainer);
combat_room3.c | 86 | stop_them(who, dummy);
combat_room1.c | 13 | set_short("Xrazzicaz' Boot Camp");
combat_room1.c | 14 | add_property("determinate", "");
combat_room1.c | 15 | set_light( 75 );
combat_room1.c | 16 | add_property("no teleport", 1);
combat_room1.c | 34 | add_property("no godmother", 1);
combat_room1.c | 36 | add_exit( "combat", PATH + "combat", "door" );
combat_room1.c | 37 | add_alias( "southeast", "foyer");
combat_room1.c | 53 | add_property("there", "on the wall");
combat_room1.c | 56 | clone_object(PATH + "dummy");
combat_room1.c | 57 | move(this_object());
combat_room1.c | 59 | call_out("get_trainer", 1);
combat_room1.c | 64 | dest_me();
combat_room1.c | 66 | dest_me();
combat_room1.c | 68 | dest_me();
combat_room1.c | 69 | dest_me();
combat_room1.c | 74 | clone_object(PATH +"trainer");
combat_room1.c | 77 | whichone("xrazzicaz");
combat_room1.c | 78 | move( this_object(), "$N hobble$s toward you on his straw-filled stumps." );
combat_room1.c | 79 | set_trainer(trainer);
combat_room1.c | 85 | stop_them(who, dummy);
guilds_foyer.c | 15 | set_zone( "Newbie" );
guilds_foyer.c | 16 | set_short( "Garden of Guilds" );
guilds_foyer.c | 17 | set_light( 100 );
guilds_foyer.c | 18 | add_property("no teleport", 1);
guilds_foyer.c | 59 | add_property("no godmother", 1);
guilds_foyer.c | 61 | add_exit( "foyer", PATH + "foyer", "gate" );
guilds_foyer.c | 63 | add_exit( "witch", PATH +"witches", "gate" );
guilds_foyer.c | 64 | add_exit( "wizard", PATH +"wizards", "gate" );
guilds_foyer.c | 65 | add_exit( "thief", PATH +"thieves", "gate" );
guilds_foyer.c | 66 | add_exit( "assassin", PATH + "assassins", "gate" );
guilds_foyer.c | 67 | add_exit( "warrior", PATH +"fighters", "gate" );
guilds_foyer.c | 68 | add_exit( "priest", PATH +"priests", "gate" );
guilds_foyer.c | 69 | add_alias( "north", "communication");
guilds_foyer.c | 84 | modify_exit("witch", ({ "closed", 1}));
guilds_foyer.c | 85 | modify_exit("wizard", ({ "closed", 1}));
guilds_foyer.c | 86 | modify_exit("thief", ({ "closed", 1}));
guilds_foyer.c | 87 | modify_exit("assassin", ({ "closed", 1}));
guilds_foyer.c | 88 | modify_exit("warrior", ({ "closed", 1}));
guilds_foyer.c | 89 | modify_exit("priest", ({ "closed", 1}));
guilds_foyer.c | 127 | add_night_item("brazier", "Basically this is a torch on a pole.\n");
guilds_foyer.c | 168 | query_light();
foyer.c | 14 | format_sign(string message);
foyer.c | 17 | add_property("no teleport", 1);
foyer.c | 18 | set_zone( "Newbie" );
foyer.c | 19 | set_short( "Discworld foyer" );
foyer.c | 20 | set_light( 75 );
foyer.c | 99 | add_exit("helpme", PATH+"help", "door");
foyer.c | 100 | add_exit("communication", PATH +"communication", "door");
foyer.c | 101 | add_exit("hints", PATH +"hints", "door");
foyer.c | 102 | add_exit("guilds", PATH+"guilds_foyer", "door");
foyer.c | 103 | add_exit("commerce", PATH+"shop", "door");
foyer.c | 104 | add_exit("align", PATH+"align", "door");
foyer.c | 105 | add_exit("advancement", PATH+"advancement", "door");
foyer.c | 106 | add_exit("combat", PATH+"combat","door");
foyer.c | 108 | add_alias("east", "communication");
foyer.c | 109 | add_alias("southeast", "hints");
foyer.c | 110 | add_alias("south", "guilds");
foyer.c | 111 | add_alias("southwest", "commerce");
foyer.c | 112 | add_alias("west", "align");
foyer.c | 113 | add_alias("northwest", "helpme");
foyer.c | 114 | add_alias("north", "advancement");
foyer.c | 115 | add_alias("northeast", "combat");
foyer.c | 119 | add_property("no godmother", 1);
foyer.c | 121 | add_exit("out", PATH + "choose_land", "path" );
foyer.c | 122 | modify_exit( "out", ({ "function", "check_allow" }) );
foyer.c | 127 | set_language("general");
foyer.c | 135 | notify_fail( "" );
foyer.c | 139 | init();
foyer.c | 140 | find_object( PATH +"womble" );
foyer.c | 142 | move( this_object(), "$N womble$s in." );
foyer.c | 152 | explode(sprintf("%-="+(SIGN_WIDTH-2)+"s", message), "\n");
foyer.c | 163 | for(i=sizeof(bit);
assassins.c | 15 | set_short( "Assassins' gazebo" );
assassins.c | 16 | set_light( 80 );
assassins.c | 17 | add_property("no teleport", 1);
assassins.c | 27 | set_zone( "Newbie" );
assassins.c | 35 | add_item("carpet", "A well-made carpet, thick and luxurious.");
assassins.c | 57 | add_property("no godmother", 1);
assassins.c | 59 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
choose_land.c | 30 | add_property("no teleport", 1);
choose_land.c | 31 | add_property("determinate", "");
choose_land.c | 33 | add_property("no godmother", 1);
choose_land.c | 34 | set_zone( "Newbie" );
choose_land.c | 35 | set_short( "Discworld's realm of choice" );
choose_land.c | 36 | set_light( 75 );
choose_land.c | 92 | if (file_size(nationality + ".c") >
choose_land.c | 93 | add_item(name, nationality->query_information());
choose_land.c | 95 | add_exit("choose " + name + " " + lower_case(region), nationality->query_region_start_location(region), "stairs");
choose_land.c | 96 | modify_exit("choose " + name + " " + lower_case(region), ({ "function", "setup_nationality" }) );
choose_land.c | 97 | add_item(name + " " + lower_case(region), nationality->query_region_description(region));
choose_land.c | 100 | printf("Bad nationality %O\n", nationality);
choose_land.c | 104 | add_help_file(PATH + "doc/choose_land");
choose_land.c | 132 | this_player()->query_nationality();
choose_land.c | 134 | debug_printf("Old nationality was %O, new nationality is %O.\n", old_nationality, nationality);
choose_land.c | 137 | query_language();
choose_land.c | 138 | query_language_spoken_skill(lang);
choose_land.c | 139 | query_language_written_skill(lang);
choose_land.c | 140 | this_player()->query_skill(skill_speak);
choose_land.c | 141 | this_player()->query_skill(skill_write);
choose_land.c | 145 | this_player()->add_skill_level(skill_speak, 100 - old_speak);
choose_land.c | 149 | this_player()->add_skill_level(skill_write, 100 - old_write);
choose_land.c | 154 | query_language();
choose_land.c | 155 | query_language_spoken_skill(lang);
choose_land.c | 156 | query_language_written_skill(lang);
choose_land.c | 157 | this_player()->query_skill(skill_speak);
choose_land.c | 158 | this_player()->query_skill(skill_write);
choose_land.c | 162 | this_player()->add_skill_level(skill_speak, old_speak - new_speak);
choose_land.c | 166 | this_player()->add_skill_level(skill_write, old_write - new_write);
choose_land.c | 168 | this_player()->set_nationality(nationality);
choose_land.c | 169 | this_player()->set_nationality_region(find_region(nationality, region));
choose_land.c | 170 | query_language();
choose_land.c | 172 | this_player()->set_default_language(lang);
choose_land.c | 173 | this_player()->set_language(lang);
choose_land.c | 175 | this_player()->query_guild_ob();
choose_land.c | 176 | this_player()->query_property("not real newbie");
choose_land.c | 184 | capitalize(this_player()->query_nationality()[17..<1]));
choose_land.c | 192 | this_player()->query_value_in("Newbie Area");
choose_land.c | 193 | this_player()->query_nationality()->query_currency_area();
choose_land.c | 206 | create_money_array(value, currency_area);
choose_land.c | 207 | this_player()->set_money_array(array);
choose_land.c | 213 | move(nationality->query_region_start_location(region));
choose_land.c | 221 | this_player()->query_nationality_region());
choose_land.c | 228 | explode(direction, " ");
choose_land.c | 229 | change_nationality(person, bits[1], implode(bits[2..], " "));
choose_land.c | 238 | lower_case(nat);
choose_land.c | 240 | add_failed_mess("There is no nationality " + nationality + ".\n");
choose_land.c | 245 | find_region(nationality, region);
choose_land.c | 250 | query_multiple_short(nationality->query_regions()) + ".\n");
choose_land.c | 257 | this_player()->query_short());
choose_land.c | 259 | change_nationality(this_player(), nat, region_new);
choose_land.c | 260 | query_region_start_location(region_new);
choose_land.c | 263 | this_player()->remove_property("not real newbie");
choose_land.c | 265 | call_out((: dest_me :), 10);
choose_land.c | 267 | dest_me();
choose_land.c | 277 | lower_case(nat);
choose_land.c | 279 | add_failed_mess("There is no nationality " + nationality + ".\n");
choose_land.c | 283 | find_region(nationality, region);
choose_land.c | 288 | query_multiple_short(nationality->query_regions()) + ".\n");
choose_land.c | 295 | this_player()->query_short());
choose_land.c | 297 | write(nationality->query_region_description(region_new) + "\n");
choose_land.c | 305 | lower_case(nationality);
choose_land.c | 307 | add_failed_mess("There is no nationality " + nationality + ".\n");
choose_land.c | 318 | write(ret);
choose_land.c | 323 | add_command("info", "<word'nation'>", (: do_nationality_info($4[0]) :));
choose_land.c | 324 | add_command("info", "<word'nation'> <string'region'>", (: do_info($4[0], $4[1]) :));
choose_land.c | 325 | add_command("choose", "<word'nationality'> <string'region'>", (: do_choose($4[0], $4[1]) :));
choose_land.c | 331 | clone_object(__FILE__);
choose_land.c | 332 | move_with_look(ob);
inside.c | 14 | create();
inside.c | 18 | this_object()->setup();
inside.c | 19 | this_object()->reset();
inside.c | 24 | init();
inside.c | 25 | this_player()->add_command("speak", this_object(), "<string'language'>" );
inside.c | 29 | write("Sorry, you cannot do that here.\n");
align.c | 20 | do_pull(object lever);
align.c | 25 | set_zone("Newbie");
align.c | 26 | set_short("alignment room" );
align.c | 27 | set_light( 75 );
align.c | 28 | add_property("no teleport", 1);
align.c | 46 | set_short("sign");
align.c | 47 | add_adjective("wooden");
align.c | 50 | add_property("no godmother", 1);
align.c | 52 | add_exit( "foyer", PATH + "foyer", "door");
align.c | 53 | add_alias( "east", "foyer");
align.c | 66 | do_pull(_wlever) :));
align.c | 70 | do_pull(_blever) :));
align.c | 74 | do_pull(_glever) :));
align.c | 76 | init();
align.c | 81 | clone_object("/std/object");
align.c | 82 | set_name("lever");
align.c | 83 | add_adjective("white");
align.c | 84 | set_short("white lever");
align.c | 88 | reset_get();
align.c | 89 | add_property("there", "on the east wall");
align.c | 90 | move(this_object());
align.c | 93 | clone_object("/std/object");
align.c | 94 | set_name("lever");
align.c | 95 | add_adjective("black");
align.c | 96 | set_short("black lever");
align.c | 101 | reset_get();
align.c | 102 | add_property("there", "on the west wall");
align.c | 103 | move(this_object());
align.c | 106 | clone_object("/std/object");
align.c | 107 | set_name("lever");
align.c | 108 | add_adjective("grey");
align.c | 109 | set_short("grey lever");
align.c | 112 | reset_get();
align.c | 113 | add_property("there", "on the south wall");
align.c | 114 | move(this_object());
align.c | 126 | this_player()->set_al(0);
align.c | 130 | random(400);
align.c | 136 | this_player()->set_al(align);
womble.c | 10 | set_name("womble");
womble.c | 11 | set_short("womble");
womble.c | 15 | add_property( "unique", 1 );
womble.c | 16 | set_gender(2);
womble.c | 17 | add_plural("wombles");
womble.c | 18 | set_race("human");
womble.c | 19 | set_level(100);
womble.c | 20 | set_language("general");
womble.c | 21 | add_move_zone("Newbie");
womble.c | 22 | set_move_after(30, 30);
womble.c | 23 | set_response_mon_understand_anything(1);
womble.c | 39 | add_respond_to_with(({ "fuck" }), "waggle $hname$");
womble.c | 75 | call_out("brooch", 1, ({ this_player() }) );
womble.c | 83 | do_command("'Thank you for returning my brooch again.");
womble.c | 85 | add_property("womble's brooch", 1, 86400);
womble.c | 86 | adjust_xp(10000);
womble.c | 87 | do_command("'Wow!  My brooch!");
womble.c | 88 | do_command("'Thank you very much!");
womble.c | 91 | do_command("'You may now enter the game by typing \"out\" in the foyer.");
womble.c | 92 | do_command("'Good Luck!");
womble.c | 93 | do_command("huggle "+(string)tp->query_short());
womble.c | 94 | do_command("emote sets the brooch down, and quickly forgets where she left it.");
womble.c | 96 | dest_me();
womble.c | 105 | do_command("'Hey, that's not nice!\n");
womble.c | 106 | add_effect("/std/effects/ingested/tranquil_sleep", 120);
womble.c | 107 | this_object()->stop_fight(thing);
womble.c | 108 | stop_fight(this_object());
womble.c | 113 | this_object()->stop_fight(thing);
womble.c | 114 | stop_fight(this_object());
newbie_brochure.c | 30 | set_name( "brochure" );
newbie_brochure.c | 31 | set_short( "newbie brochure");
newbie_brochure.c | 32 | set_main_plural( "brochures" );
newbie_brochure.c | 33 | add_alias ( ( {"brochure", "pamphlet", "newbie brochure"} ) );
newbie_brochure.c | 34 | set_weight( 0 );
newbie_brochure.c | 35 | set_value( 400 );
newbie_brochure.c | 36 | set_no_pages( PAGES );
newbie_brochure.c | 43 | set_open_page( 1 );
newbie_brochure.c | 63 | set_open_page( 2 );
newbie_brochure.c | 87 | set_open_page( 3 );
newbie_brochure.c | 105 | set_open_page( 4 );
newbie_brochure.c | 135 | set_open_page( 5 );
newbie_brochure.c | 157 | set_open_page( 6 );
newbie_brochure.c | 175 | set_open_page( 1 );
newbie_brochure.c | 180 | this_player()->add_command( "scan", this_object(), "'page' %d 'of' %D" );
newbie_brochure.c | 188 | do_read();
newbie_brochure.c | 193 | set_open_page( pg );
newbie_brochure.c | 194 | do_read();
common.c | 3 | if(coins->query_number_coins() >
common.c | 10 | move("/room/rubbish");
common.c | 15 | call_out("dest_money", 0, ob);
greg.c | 19 | add_property("determinate", "");
greg.c | 20 | set_name( "greg" );
greg.c | 21 | set_short("Greg" );
greg.c | 22 | set_main_plural("Gregs" );
greg.c | 23 | set_race( "human" );
greg.c | 24 | set_response_mon_understand_anything(1);
greg.c | 25 | set_gender( 1 );
greg.c | 26 | set_al(-500 );
greg.c | 27 | set_class( "fighter" );
greg.c | 28 | set_language( "general" );
greg.c | 29 | set_level( 100 + random( 100 ) );
greg.c | 32 | adjust_money( 10 + random( 40 ), "Ankh-Morpork pence" );
greg.c | 41 | add_respond_to_with(({ "yes" }), ({ "#yes" }));
greg.c | 42 | add_respond_to_with(({ "no" }), ({ "#no" }));
greg.c | 56 | add_respond_to_with(({ "fuck" }), "waggle $hname$");
greg.c | 77 | add_skill_level( "other.health", 50 + random( 50 ) );
greg.c | 78 | request_weapon("long sword", 75))->move(this_object());
greg.c | 79 | request_armour("ringmail", 80))->move(this_object());
greg.c | 80 | request_armour("metal clad boots", 80))->move(this_object());
greg.c | 81 | request_armour("metal helmet", 80))->move(this_object());
greg.c | 82 | request_armour("metal gauntlets", 80))->move(this_object());
greg.c | 83 | init_equip();
greg.c | 89 | event_enter(ob, message, from);
greg.c | 92 | event_enter(ob, message, from);
greg.c | 95 | event_enter(ob, message, from);
greg.c | 98 | event_enter(ob, message, from);
greg.c | 101 | remove_call_out(callouts[ob]);
greg.c | 102 | map_delete(callouts, ob);
greg.c | 105 | call_out("do_greeting", 1, ob, from);
greg.c | 116 | do_command("'Hey, that's not nice!");
greg.c | 117 | add_effect("/std/effects/ingested/tranquil_sleep", 120);
greg.c | 118 | this_object()->stop_fight(thing);
greg.c | 119 | stop_fight(this_object());
greg.c | 130 | environment($1) == environment(this_object()) :));
greg.c | 140 | member_array(0, in_use);
greg.c | 158 | call_out("throw_out", THROW_OUT, ob);
greg.c | 159 | environment();
greg.c | 168 | check_room();
greg.c | 176 | do_command("'Okay.  Well, come back if you feel like having a go later.");
greg.c | 177 | do_command("smile " + ob->query_name());
greg.c | 204 | member_array(ob, in_use);
greg.c | 208 | do_command(RNAMES[room]);
greg.c | 209 | call_out("tell_them", 2, ob, room);
greg.c | 218 | do_command("combat");
greg.c | 222 | do_command("'Ok " + ob->one_short() + ", time's up.");
greg.c | 223 | do_command("'Come with me.");
greg.c | 224 | environment()->stop_them(ob);
greg.c | 225 | tell_object(ob, "Greg leads you out of the room.\n");
greg.c | 226 | do_command("combat");
greg.c | 238 | member_array(ob, in_use);
greg.c | 245 | do_command("'Would you like to try out your skills?");
greg.c | 260 | check_room();
trainer.c | 16 | setup_nationality( "/std/nationality/morpork", "Ankh-Morpork" );
trainer.c | 17 | set_language( "general" );
trainer.c | 18 | basic_setup( "human", "warrior", 100 );
trainer.c | 19 | set_gender( 1 );
trainer.c | 21 | request_item("leather jerkin", 30)->move( this_object() );
trainer.c | 22 | request_item("leather breeches", 30)->move( this_object() );
trainer.c | 23 | request_item("hard leather boots", 30)->move( this_object() );
trainer.c | 25 | init_equip();
trainer.c | 33 | set_name( "xrazzicaz" );
trainer.c | 34 | add_alias( "xraz" );
trainer.c | 35 | add_property( "determinate", "" );
trainer.c | 36 | set_short( "Xrazzicaz" );
trainer.c | 42 | set_name( "zazzifraz" );
trainer.c | 43 | add_alias( "zazz" );
trainer.c | 44 | add_property( "determinate", "" );
trainer.c | 45 | set_short( "Zazzifraz" );
trainer.c | 51 | set_name( "john" );
trainer.c | 52 | add_property( "determinate", "" );
trainer.c | 53 | set_short( "John" );
trainer.c | 64 | this_object()->stop_fight(thing);
trainer.c | 65 | stop_fight(this_object());
trainer.c | 70 | this_object()->stop_fight(thing);
trainer.c | 71 | stop_fight(this_object());
trainer.c | 92 | this_player()});
trainer.c | 93 | call_out("do_greeting", 1, this_player());
trainer.c | 105 | query_visible(this_object()) :));
trainer.c | 106 | uniq_array(greeters);
trainer.c | 108 | replace(str, "$name$", query_multiple_short(greeters));
trainer.c | 109 | do_command("'" + str);
trainer.c | 116 | the_short() +".\n" );
trainer.c | 119 | the_short() +".\n", attacker );
trainer.c | 120 | stop_fight( dummy );
trainer.c | 121 | stop_all_fight();
combat_room2.c | 13 | set_zone( "Newbie" );
combat_room2.c | 14 | set_short("Zazzifraz' Boot Camp");
combat_room2.c | 15 | add_property("determinate", "");
combat_room2.c | 16 | set_light( 75 );
combat_room2.c | 17 | add_property("no teleport", 1);
combat_room2.c | 35 | add_property("no godmother", 1);
combat_room2.c | 37 | add_exit( "combat", PATH + "combat", "door" );
combat_room2.c | 38 | add_alias( "northwest", "combat");
combat_room2.c | 54 | add_property("there", "on the wall");
combat_room2.c | 57 | clone_object(PATH + "dummy");
combat_room2.c | 58 | move(this_object());
combat_room2.c | 60 | call_out("get_trainer", 1);
combat_room2.c | 65 | dest_me();
combat_room2.c | 67 | dest_me();
combat_room2.c | 69 | dest_me();
combat_room2.c | 70 | dest_me();
combat_room2.c | 75 | clone_object(PATH +"trainer");
combat_room2.c | 78 | whichone("zazzifraz");
combat_room2.c | 79 | move( this_object(), "$N hobble$s toward you on his straw-filled stumps." );
combat_room2.c | 80 | set_trainer(trainer);
combat_room2.c | 86 | stop_them(who, dummy);
outside.c | 14 | create();
outside.c | 18 | this_object()->setup();
outside.c | 19 | this_object()->reset();
outside.c | 24 | init();
outside.c | 25 | this_player()->add_command("speak", this_object(), "<string'language'>" );
outside.c | 29 | write("Sorry, you cannot do that here.\n");
womble_brooch.c | 29 | set_name("brooch");
womble_brooch.c | 30 | add_adjective( ({ "womble", "brass" }) );
womble_brooch.c | 31 | set_short("womble brooch");
womble_brooch.c | 34 | add_alias("jewellery");
womble_brooch.c | 35 | add_plural("jewellery");
womble_brooch.c | 36 | set_type("badge");
womble_brooch.c | 37 | setup_armour(1000);
womble_brooch.c | 38 | set_percentage(100);
womble_brooch.c | 39 | set_damage_chance(0);
womble_brooch.c | 40 | set_weight(2);
womble_brooch.c | 41 | add_property("wombles brooch", 1);
womble_brooch.c | 42 | add_property( "shop type", "jewellers" );
fighters.c | 12 | set_short( "Warriors' gazebo" );
fighters.c | 13 | set_light( 75 );
fighters.c | 14 | add_property("no teleport", 1);
fighters.c | 24 | set_zone( "Newbie" );
fighters.c | 45 | add_property("no godmother", 1);
fighters.c | 47 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
advancement.c | 9 | set_zone( "Newbie" );
advancement.c | 10 | set_short("Advancement Room" );
advancement.c | 11 | set_light( 75 );
advancement.c | 12 | add_property("no teleport", 1);
advancement.c | 46 | add_item(({"ball", "yarn"}), "A large ball of string.");
advancement.c | 76 | add_property("determinate","the ");
advancement.c | 77 | set_short("sign marked 'statistics and rearrange'");
advancement.c | 86 | add_property("determinate","the ");
advancement.c | 87 | set_short("sign marked 'guild points'");
advancement.c | 95 | add_property("determinate","the ");
advancement.c | 96 | set_short("sign marked 'experience'");
advancement.c | 106 | add_property("determinate","the ");
advancement.c | 107 | set_short("sign marked 'hitpoints'");
advancement.c | 115 | add_property("determinate","the ");
advancement.c | 116 | set_short("sign marked 'skills'");
advancement.c | 134 | add_property("determinate","the ");
advancement.c | 135 | set_short("sign marked 'advancement'");
advancement.c | 138 | add_property("no godmother", 1);
advancement.c | 140 | add_exit( "foyer", PATH + "foyer", "door" );
advancement.c | 141 | add_alias( "south", "foyer");
combat.c | 23 | set_zone( "Newbie" );
combat.c | 24 | set_short("Combat Training Room");
combat.c | 25 | add_property("determinate", "");
combat.c | 26 | set_light( 75 );
combat.c | 27 | add_property("no teleport", 1);
combat.c | 42 | add_property("no godmother", 1);
combat.c | 44 | add_exit( "foyer", PATH + "foyer", "door" );
combat.c | 45 | add_alias( "southwest", "foyer");
combat.c | 47 | add_exit("one", PATH + "combat_room1", "door");
combat.c | 48 | add_exit("two", PATH+"combat_room2", "door");
combat.c | 49 | add_exit("three", PATH+"combat_room3", "door");
combat.c | 72 | dest_me();
combat.c | 75 | dest_me();
combat.c | 76 | dest_me();
combat.c | 80 | call_out("get_instructor", 0);
combat.c | 85 | load_object(PATH +"greg");
combat.c | 88 | move( this_object(), "$N marches in from another room.");
combat.c | 110 | tell_object(ob, "The door slams closed in your face.\n");
combat.c | 111 | modify_exit("one", ({ "closed", 1}));
combat.c | 112 | notify_fail("");
priests.c | 11 | list_deities();
priests.c | 14 | set_short( "Priests' Gazebo" );
priests.c | 15 | set_light( 75 );
priests.c | 16 | add_property("no teleport", 1);
priests.c | 27 | set_zone( "Newbie" );
priests.c | 54 | add_property("no godmother", 1);
priests.c | 56 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
priests.c | 63 | unguarded((: get_dir("/save/deities/") :));
priests.c | 66 | sizeof(deities);
priests.c | 67 | replace(deities[i], ".o", "");
priests.c | 68 | replace(deities[i], ".gz", "");
priests.c | 72 | capitalize ($1) :));
priests.c | 74 | query_multiple_short(deities);
witches.c | 13 | set_short( "Witches' Gazebo" );
witches.c | 14 | set_light( 75 );
witches.c | 15 | add_property("no teleport", 1);
witches.c | 27 | set_zone( "Newbie" );
witches.c | 60 | add_property("no godmother", 1);
witches.c | 62 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
communication.c | 15 | set_zone( "Newbie" );
communication.c | 16 | set_short( "Communication room" );
communication.c | 17 | set_light( 75 );
communication.c | 18 | add_property("no teleport", 1);
communication.c | 46 | set_short("sign marked 'general'");
communication.c | 47 | add_property("determinate","the ");
communication.c | 58 | set_short("sign marked 'speaking'");
communication.c | 59 | add_property("determinate","the ");
communication.c | 67 | set_short("sign marked 'expression'");
communication.c | 68 | add_property("determinate","the ");
communication.c | 75 | set_short("sign marked 'emote'");
communication.c | 76 | add_property("determinate","the ");
communication.c | 85 | set_short("sign marked 'newbie'");
communication.c | 86 | add_property("determinate","the ");
communication.c | 97 | set_short("sign marked 'mail'");
communication.c | 98 | add_property("determinate","the ");
communication.c | 102 | add_property("no godmother", 1);
communication.c | 111 | add_exit( "foyer", PATH + "foyer", "door" );
communication.c | 112 | add_alias( "west", "foyer" );
shop.c | 8 | set_zone("Newbie");
shop.c | 9 | set_light( 75 );
shop.c | 10 | add_property("no teleport", 1);
shop.c | 11 | add_property("place", "Newbie Area");
shop.c | 13 | set_short("Commerce room");
shop.c | 14 | set_room_size( 5 );
shop.c | 43 | add_property("determinate","the ");
shop.c | 44 | add_exit( "foyer", PATH +"foyer", "door" );
shop.c | 45 | set_store_room( PATH +"store" );
shop.c | 46 | set_min_amount(1);
shop.c | 47 | set_max_inventory(200);
shop.c | 51 | init();
shop.c | 52 | this_player()->add_command("speak", this_object(), "<string'language'>" );
shop.c | 56 | write("Sorry, you cannot do that here.\n");
store.c | 26 | set_short( "storeroom" );
store.c | 27 | add_property( "determinate", "the " );
store.c | 28 | set_long( "This is a storeroom.\n" );
store.c | 29 | set_light( 100 );
store.c | 32 | reset() { call_out( "restock", 0 );
store.c | 39 | sizeof( match_objects_for_existence( "buckets", this_object() ) );
store.c | 41 | clone_object( "/obj/vessel" );
store.c | 43 | random( 3 );
store.c | 44 | set_leak_rate( 0 );
store.c | 45 | set_max_volume( 1000 + size * 2000 );
store.c | 46 | set_max_weight( 20 + size * 40 );
store.c | 47 | set_full_weight( 20 + size * 40 );
store.c | 48 | set_stuck( 1 );
store.c | 49 | set_name( "bucket" );
store.c | 54 | add_adjective( ({ "small", "medium", "large" })[ size ] );
store.c | 55 | set_value( 60 + size * 25 );
store.c | 56 | set_long( "This is a metal thing.  It is not very shiny.\n" );
store.c | 57 | set_weight( 10 + size * 10 );
store.c | 58 | move( this_object() );
store.c | 62 | sizeof( match_objects_for_existence( "torches", this_object() ) );
store.c | 64 | request_item("torch", 100) );
store.c | 65 | if (new_item) new_item->move( this_object() );
store.c | 72 | if (new_item) new_item->move( this_object() );
store.c | 78 | if (new_item) new_item->move( this_object() );
store.c | 84 | if (new_item) new_item->move( this_object() );
wizards.c | 14 | set_short( "Wizards' Gazebo" );
wizards.c | 15 | set_light( 75 );
wizards.c | 16 | add_property("no teleport", 1);
wizards.c | 27 | set_zone( "Newbies" );
wizards.c | 48 | add_property("no godmother", 1);
wizards.c | 50 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
thieves.c | 15 | set_short( "Thieves' Gazebo" );
thieves.c | 16 | set_light( 75 );
thieves.c | 17 | add_property("no teleport", 1);
thieves.c | 29 | set_zone( "Newbie" );
thieves.c | 49 | add_property("no godmother", 1);
thieves.c | 51 | add_exit( "garden", PATH +"guilds_foyer", "gate" );
dummy.c | 37 | assault_dummy();
dummy.c | 38 | callback(int stage, class attack att, mixed data);
dummy.c | 39 | failed_defense( object );
dummy.c | 40 | failed_attack( object );
dummy.c | 41 | tell_misc( object );
dummy.c | 42 | spin_arm( object, object );
dummy.c | 73 | set_name( "dummy" );
dummy.c | 74 | add_adjective( ({ "wood", "wooden", "training" }) );
dummy.c | 75 | add_property( "determinate", "A" );
dummy.c | 76 | set_short( "training dummy" );
dummy.c | 79 | basic_setup( "human", "warrior", 10 );
dummy.c | 80 | set_gender( 0 );
dummy.c | 81 | add_property( "run away", -1 );
dummy.c | 82 | set_dex(6);
dummy.c | 83 | set_str(6);
dummy.c | 84 | set_con(18);
dummy.c | 85 | set_int(6);
dummy.c | 86 | set_wis(6);
dummy.c | 87 | remove_ac( "sharp" );
dummy.c | 88 | remove_ac( "pierce" );
dummy.c | 89 | remove_ac( "blunt" );
dummy.c | 90 | remove_ac( "unarmed" );
dummy.c | 91 | add_skill_level( "other.health", 1000 );
dummy.c | 92 | add_combat_action( 100, "spin_arm", (: spin_arm :) );
dummy.c | 94 | request_item( "dirty rags", 30 )->move( this_object() );
dummy.c | 106 | assault_dummy() :) );
dummy.c | 108 | assault_dummy() :) );
dummy.c | 120 | this_object()->the_short() + " for a while.\n", this_player() );
dummy.c | 124 | reset_trainee();
dummy.c | 130 | this_object()->the_short() + ".\n" );
dummy.c | 131 | notify_fail( "" );
dummy.c | 134 | this_object()->the_short() + ".\n" );
dummy.c | 135 | notify_fail( "" );
dummy.c | 143 | copy(MISC_MESSAGES);
dummy.c | 144 | this_player()->query_weapons();
dummy.c | 146 | if( sizeof( weapons ) >
dummy.c | 147 | stop_them( previous_object(), this_object() );
dummy.c | 156 | this_player()->attack_ob( this_object() );
dummy.c | 157 | write( "You attack " + this_object()->the_short() + ".\n" );
dummy.c | 159 | this_player() );
dummy.c | 160 | this_player();
dummy.c | 163 | query_specials() );
dummy.c | 165 | query_specials()[i]->id );
dummy.c | 177 | call_out("attack_dummy", 0);
dummy.c | 178 | attack_by(ob);
dummy.c | 199 | this_player()->query_weapons();
dummy.c | 201 | if( sizeof( weapons ) >
dummy.c | 202 | stop_them( newbie, dumdum );
dummy.c | 205 | debug_printf( "More than one weapon, removing special.\n" );
dummy.c | 206 | return({ R_CONTINUE | R_REMOVE_ME, att, data });
dummy.c | 213 | stop_them( newbie, dumdum );
dummy.c | 214 | do_command( "say You've changed weapons!" );
dummy.c | 215 | debug_printf( "Changed weapons, removing special.\n" );
dummy.c | 216 | return({ R_CONTINUE | R_REMOVE_ME, att, data });
dummy.c | 224 | failed_attack(newbie);
dummy.c | 230 | query_attack_data();
dummy.c | 244 | a_short() + ".%^RESET%^\n" );
dummy.c | 252 | convert_message( ( string )weapon->the_short() );
dummy.c | 255 | stop_them( newbie, dumdum );
dummy.c | 257 | do_command( "think" );
dummy.c | 261 | do_command( "say Well, you're rather hopeless." );
dummy.c | 273 | do_command( "say Hmmm... You have some skill." );
dummy.c | 292 | return({ R_CONTINUE | R_REMOVE_ME, att, data });
dummy.c | 295 | tell_misc(newbie);
dummy.c | 297 | return ({ R_CONTINUE, att, data });
dummy.c | 302 | calc_rating( newbie );
dummy.c | 304 | calc_rating( weapon );
dummy.c | 314 | debug_printf("%d", number);
dummy.c | 325 | return ({ R_CONTINUE, att, data });
dummy.c | 331 | debug_printf( "specials %O\n", this_player()->query_specials() );
dummy.c | 355 | random( 2 );
dummy.c | 362 | if( newbie->query_skill( DODGE ) >
dummy.c | 365 | tell_object( newbie, PERSON_DODGE_FAILURE );
dummy.c | 375 | tell_object( newbie,PERSON_DODGE_SUCESS );
dummy.c | 384 | if( newbie->query_skill( PARRY ) >
dummy.c | 387 | tell_object( newbie, PERSON_PARRY_FAILURE );
dummy.c | 397 | tell_object( newbie, PERSON_PARRY_SUCCESS );
dummy.c | 405 | failed_defense(newbie);
dummy.c | 415 | random(sizeof(misc));
dummy.c | 416 | do_command("say " + misc[which]);
dummy.c | 452 | this_object()->query_max_hp();
master.c | 29 | set_eval_limit(2000000);
master.c | 38 | error("The master object couldn't restore its save file.");
master.c | 52 | log_file("REBOOT", "Mud rebooted at "+ctime(time())+"["+time()+"]"+"\n");
master.c | 59 | printf("LPmud version : %s on port %d.", VERSION, port);
master.c | 62 | clone_object("/secure/nlogin");
master.c | 64 | destruct(this_object());
master.c | 67 | clone_object("/secure/login");
master.c | 70 | set_login_port(port);
master.c | 71 | printf("\n");
master.c | 82 | filter(str, (: interactive($1) :));
master.c | 87 | geteuid($1)] :))) == sizeof(str);
master.c | 95 | query_trustee(str);
master.c | 100 | query_trustee(str);
master.c | 110 | filter(arg, (: interactive($1) :));
master.c | 114 | query_trustee( geteuid( $1 ) ) :) ) ) == sizeof( arg );
master.c | 116 | return ( ( positions[ arg ] == DIRECTOR ) || query_trustee( arg ) );
master.c | 120 | query_leader( mixed arg ) { return query_director( arg );
master.c | 122 | query_lord( mixed arg ) { return query_director( arg );
master.c | 134 | query_only_leader( string word ) { return query_only_director( word );
master.c | 136 | query_only_lord( string word ) { return query_only_director( word );
master.c | 144 | this_object());
master.c | 148 | query_leaders() { return query_directors();
master.c | 150 | query_lords() { return query_directors();
master.c | 154 | query_trustee(str) && PLAYER_HANDLER->test_user(str);
master.c | 159 | query_player_trustee(str);
master.c | 163 | query_player_trustee(str);
master.c | 167 | high_programmers() { return keys( trustees );
master.c | 169 | query_administrators() { return keys( trustees );
master.c | 174 | query_trustees() { return keys( trustees );
master.c | 181 | filter_array(keys(positions), "query_director", this_object() );
master.c | 185 | query_all_leaders() { return query_all_directors();
master.c | 187 | query_all_lords() { return query_all_directors();
master.c | 208 | return ("/d/" + domain + "/master")->query_deputy(person);
master.c | 217 | query_deputy(person);
master.c | 228 | filter(arg, (: interactive($1) :));
master.c | 232 | is_liaison_deputy( geteuid( $1 ) ) :) ) ) == sizeof( arg );
master.c | 234 | return ( is_liaison_deputy(arg) || query_director( arg ) );
master.c | 239 | query_liaison_deputy_or_director(arg);
master.c | 251 | query_leader( geteuid( $1 ) ) :) ) ) == sizeof( arg );
master.c | 252 | return ( ( positions[ arg ] == SENIOR ) || query_leader( arg ) );
master.c | 260 | filter_array( keys( positions ), "query_senior", this_object() );
master.c | 270 | get_dir("/d/") - ({ "lost+found", "core" }));
master.c | 271 | filter(domains, (: $1[<4..] != "_dev" :));
master.c | 298 | return ({ "/include/%s" });
master.c | 312 | shut(min);
master.c | 322 | map_delete(checked_master, name);
master.c | 346 | error("Illegal unguarded apply.");
master.c | 351 | master();
master.c | 353 | previous_object(1);
master.c | 354 | catch(val = (mixed)(*f)());
master.c | 357 | error(err);
command.c | 20 | eventRehash(string *paths);
command.c | 23 | seteuid(getuid());
command.c | 54 | uniq_array(Paths + ({ path }));
command.c | 77 | eventGuildRaceRehash();
command.c | 90 | uniq_array(Paths + ({ path }));
command.c | 99 | replace_string(args, "%^", " ");
command.c | 102 | explode("f" + args, "%^");
command.c | 103 | sizeof(bits);
command.c | 107 | implode(bits, "%^");
command.c | 121 | strcmp(s1[0..len-1], s2[0..len-1]);
command.c | 161 | keys(Commands);
command.c | 162 | filter(files, (: (int)$1[0] == $(cmd)->verb[0] :));
command.c | 171 | delete(file, i, 1);
command.c | 172 | strlen(tmpfile);
command.c | 182 | strlen(cmd->verb);
command.c | 218 | eventRehash(tmp);
command.c | 220 | HandleCommandLine(cmd);
command.c | 223 | sprintf("%s/%s", tmp[0], cmd->verb);
command.c | 226 | delete(cmd->verb, i, 1);
command.c | 251 | eventRehash(tmp);
command.c | 258 | sprintf("%s/%s", fname, cmd->verb);
command.c | 260 | delete(cmd->verb, i, 1);
command.c | 262 | query_patterns();
command.c | 267 | sizeof(q_patterns);
command.c | 271 | query_pattern(q_patterns[i]);
command.c | 293 | new(class command);
command.c | 296 | ReturnPatterns(cmd, path);
command.c | 305 | keys(Commands);
command.c | 324 | new(class command, verb : cmd);
command.c | 338 | new(class command, verb : cmd);
command.c | 341 | return (member_array(tmp->verb, GRCommands) != -1);
delete_clear.c | 20 | do_checks();
delete_clear.c | 21 | do_delete_check();
delete_clear.c | 22 | do_appeal_check();
delete_clear.c | 25 | seteuid("Root");
delete_clear.c | 26 | unguarded((: restore_object(SAVE_FILE) :));
delete_clear.c | 27 | do_checks();
delete_clear.c | 31 | unguarded((: do_delete_check() :));
delete_clear.c | 32 | unguarded((: do_appeal_check() :));
delete_clear.c | 33 | save_object(SAVE_FILE);
delete_clear.c | 34 | call_out("do_checks", ONE_DAY);
delete_clear.c | 42 | get_dir(PLAYER_SAVE_DIR+DELETE_DIR+"/*.o");
delete_clear.c | 43 | get_dir(PLAYER_SAVE_DIR+DELETE_DIR+"/*.o.gz");
delete_clear.c | 44 | sizeof(bits);
delete_clear.c | 45 | stat(PLAYER_SAVE_DIR+DELETE_DIR+"/"+bits[i]);
delete_clear.c | 47 | log_file( "EXPIRED", "Requested player deletion: "+bits[ i ] +".\n" );
delete_clear.c | 50 | user_event( "inform", "Auto deleting user "+name, "delete");
delete_clear.c | 51 | delete_related_files(name, 1);
delete_clear.c | 52 | unguarded((: rm( PLAYER_SAVE_DIR+DELETE_DIR+"/"+$(bits[i])) :));
delete_clear.c | 53 | player_deleted(name);
delete_clear.c | 63 | get_dir(PLAYER_SAVE_DIR+APPEAL_DIR+"/*.o");
delete_clear.c | 64 | get_dir(PLAYER_SAVE_DIR+APPEAL_DIR+"/*.o.gz");
delete_clear.c | 65 | sizeof(bits);
delete_clear.c | 66 | stat(PLAYER_SAVE_DIR+APPEAL_DIR+"/"+bits[i]);
delete_clear.c | 72 | user_event( "inform", "Auto deleting user "+name, "delete");
delete_clear.c | 73 | delete_related_files(name, 1);
delete_clear.c | 74 | unguarded((: rm( PLAYER_SAVE_DIR+APPEAL_DIR+"/"+$(bits[i])) :));
delete_clear.c | 75 | player_deleted(name);
related_files.c | 20 | previous_object());
related_files.c | 23 | back_trace() :) );
related_files.c | 27 | unguarded( (: rm, "/save/artifacts/"+ name :) );
related_files.c | 28 | unguarded( (: rm, "/save/bank_accounts/"+name[0..0] + "/" + name + ".o" :) );
related_files.c | 29 | unguarded( (: rm, "/save/cmr_library/"+ name +".o" :) );
related_files.c | 30 | catch("/obj/handlers/library"->restart(name));
related_files.c | 31 | unguarded( (: rm, "/save/library/"+ name[0..0] + "/" + name + ".o" :) );
related_files.c | 32 | unguarded( (: rm, "/save/philosophies/"+ name[0..0] + "/"+ name + ".o" :) );
related_files.c | 36 | unguarded( (: rm, "/save/vaults/" + dir + "/" + name + ".o" :) );
related_files.c | 38 | unguarded( (: rm, "/save/newsrc/"+name[0..0]+"/"+name+".o" :) );
related_files.c | 40 | get_dir( "/w/.dead_ed_files/"+ name +"-*" );
related_files.c | 42 | map(files, (: unguarded( (: rm, "/w/.dead_ed_files/"+ $1 :) ) :) );
related_files.c | 47 | delete_account( name );
related_files.c | 48 | player_remove( name );
related_files.c | 51 | player_refreshed( name );
related_files.c | 52 | delete_crimes( name );
related_files.c | 53 | remove_thief(name);
related_files.c | 54 | remove_player(name);
related_files.c | 55 | remove_member( name );
related_files.c | 56 | delete_crimes( name );
related_files.c | 59 | remove_citizen(area, name);
ftpd.c | 27 | create();
ftpd.c | 28 | seteuid("Root");
ftpd.c | 31 | SetSocketType(STREAM);
ftpd.c | 32 | write(mud_name() + "\n");
ftpd.c | 34 | call_out("setup_ftp", 2);
ftpd.c | 36 | destruct(this_object());
ftpd.c | 48 | map_delete(_log_file_info, fname);
ftpd.c | 49 | unguarded((: write_file, fname, data :));
ftpd.c | 56 | call_out((: flush_log_files :), DELAY_LOG_FLUSH);
ftpd.c | 62 | sprintf(fmt, args ...);
ftpd.c | 72 | if (this_object()) destruct(this_object());
ftpd.c | 75 | call_out("check_connections", 5*60);
ftpd.c | 84 | values(socket_info);
ftpd.c | 88 | capitalize(val->user_name) });
ftpd.c | 103 | TP(sprintf("ls(%s,%d)\n",path,mask));
ftpd.c | 115 | get_dir(path);
ftpd.c | 128 | strsrch(path, '/', -1);
ftpd.c | 132 | sprintf("%s%s/", path, files[i]);
ftpd.c | 145 | sprintf("%-#70s\n", implode(files, "\n"));
ftpd.c | 153 | get_dir(path, -1);
ftpd.c | 155 | filter_array(xfiles, "check_dots", this_object());
ftpd.c | 158 | allocate(s);
ftpd.c | 163 | master()->author_file(path);
ftpd.c | 167 | master()->domain_file(path);
ftpd.c | 171 | strsrch(path, '/', -1);
ftpd.c | 174 | time();
ftpd.c | 177 | ctime((xfiles[i])[2]);
ftpd.c | 181 | sprintf("%s  %s", tmp2[4..9], tmp2[20..23]);
ftpd.c | 194 | stat(path + (xfiles[i])[0]);
ftpd.c | 196 | sizeof(stats) >
ftpd.c | 198 | sizeof(stats) >
ftpd.c | 206 | ls( path, (mask & ~MASK_R) );
ftpd.c | 211 | reset_eval_cost();
ftpd.c | 213 | ls( path + "/*", (mask & ~MASK_R) );
ftpd.c | 216 | ls( path + files[ 0 ] + "/*", (mask & ~MASK_R) );
ftpd.c | 217 | get_dir( path + files[ 0 ] + "/*", -1 );
ftpd.c | 245 | new(class dataconn);
ftpd.c | 247 | replace_string(mess, "\n", "\r\n") : mess);
ftpd.c | 251 | strlen(mess) : file_size(mess));
ftpd.c | 255 | TP("Accepting after delay...\n");
ftpd.c | 259 | eventWrite(fd, "425 Can't open data connection.\r\n");
ftpd.c | 260 | socket_close(sess->pasv_fd);
ftpd.c | 264 | socket_close(sess->pasv_fd);
ftpd.c | 267 | TP("No connection yet...\n");
ftpd.c | 275 | eventWrite(fd, "425 Can't open data connection.\r\n");
ftpd.c | 282 | eventWrite(fd, "425 Can't create data socket.\r\n");
ftpd.c | 287 | eventWrite(fd, "425 Can't open data connection.\r\n");
ftpd.c | 288 | socket_close(new_fd);
ftpd.c | 292 | sscanf(socket_address(fd, 1), "%s %*d", addr);
ftpd.c | 293 | sprintf("%s %d", addr, (FTP_PORT - 1));
ftpd.c | 295 | TP(sprintf("socket_bind(%d, 0, %s)\n", new_fd, addr));
ftpd.c | 298 | socket_error(ret)));
ftpd.c | 299 | socket_close(new_fd);
ftpd.c | 311 | TP("Error: " + sess->data_addr + " " + sess->data_port + "\n");
ftpd.c | 312 | TP(socket_error(ret) + "\n");
ftpd.c | 313 | eventWrite(fd, "425 Can't build data connection.\r\n");
ftpd.c | 315 | socket_close(new_fd);
ftpd.c | 316 | map_delete(data_sockets, new_fd);
ftpd.c | 322 | data_write_callback(new_fd);
ftpd.c | 342 | if (file_size(path) >
ftpd.c | 343 | catch(rm(path));
ftpd.c | 346 | new(class dataconn);
ftpd.c | 349 | file_size(opath)==-1?0:file_size(opath)));
ftpd.c | 358 | eventWrite(fd, "425 Can't open data connection.\r\n");
ftpd.c | 359 | socket_close(sess->pasv_fd);
ftpd.c | 363 | socket_close(sess->pasv_fd);
ftpd.c | 372 | eventWrite(fd, "425 Can't open data connection.\r\n");
ftpd.c | 380 | eventWrite(fd, "425 Can't create data socket.\r\n");
ftpd.c | 384 | sscanf(socket_address(fd, 1), "%s %*d", addr);
ftpd.c | 385 | sprintf("%s %d", addr, (FTP_PORT - 1));
ftpd.c | 387 | TP(sprintf("socket_bind(%d, 0, %s)\n", new_fd, addr));
ftpd.c | 390 | socket_error(ret)));
ftpd.c | 391 | socket_close(new_fd);
ftpd.c | 403 | TP("Error: " + sess->data_addr + " " + sess->data_port + "\n");
ftpd.c | 404 | TP(socket_error(ret) + "\n");
ftpd.c | 405 | eventWrite(fd, "425 Can't build data connection.\r\n");
ftpd.c | 407 | socket_close(new_fd);
ftpd.c | 408 | map_delete(data_sockets, new_fd);
ftpd.c | 435 | eventWrite(sess->fd, "425 Can't open passive connection.\r\n");
ftpd.c | 443 | sscanf(socket_address(sess->fd, 1), "%s %*d", addr);
ftpd.c | 444 | sprintf("%s %d", addr, 0);
ftpd.c | 446 | TP(sprintf("socket_bind(%d, 0, %s)\n", new_fd, addr));
ftpd.c | 448 | eventWrite(sess->fd, "425 Can't open passive connection.\r\n");
ftpd.c | 449 | socket_close(new_fd);
ftpd.c | 454 | eventWrite(sess->fd, "425 Can't open passive connection.\r\n");
ftpd.c | 455 | socket_close(new_fd);
ftpd.c | 459 | new(class dataconn, parent_fd : sess->fd);
ftpd.c | 462 | sscanf(socket_address(new_fd, 1), "%s %d", sess->data_addr, sess->data_port);
ftpd.c | 476 | socket_close(fd);
ftpd.c | 479 | map_delete(data_sockets, fd);
ftpd.c | 482 | socket_close(fd);
ftpd.c | 486 | TP("Accepting...\n");
ftpd.c | 492 | socket_accept(fd, "data_read_callback", "data_write_callback");
ftpd.c | 494 | eventWrite(sess->fd, "425 Can't open data connection.\r\n");
ftpd.c | 495 | socket_close(fd);
ftpd.c | 499 | socket_close(fd);
ftpd.c | 512 | data_write_callback(new_fd);
ftpd.c | 515 | TP("Delaying...\n");
ftpd.c | 532 | time();
ftpd.c | 535 | replace_string(mess, "\r", "");
ftpd.c | 539 | stringp(mess)?strlen(mess):sizeof(mess)) + ".\n");
ftpd.c | 541 | write_buffer(dcon->path, dcon->pos, mess);
ftpd.c | 542 | stringp(mess)?strlen(mess):sizeof(mess));
ftpd.c | 551 | map_delete(data_sockets, fd);
ftpd.c | 556 | map_delete(data_sockets, fd);
ftpd.c | 565 | eventWrite(pfd, "226 Transfer complete.\r\n");
ftpd.c | 567 | eventWrite(pfd, "226 Transfer complete.\r\n");
ftpd.c | 568 | catch(rm(dcon->path[0..<8]));
ftpd.c | 569 | catch(rename(dcon->path, dcon->path[0..<8]));
ftpd.c | 572 | map_delete(data_sockets, fd);
ftpd.c | 583 | map_delete(data_sockets, fd);
ftpd.c | 585 | TP("dcc() complete, exiting.\n");
ftpd.c | 604 | time();
ftpd.c | 607 | TP("pos > len\n");
ftpd.c | 608 | eventWrite(pfd, "226 Transfer complete.\r\n");
ftpd.c | 609 | socket_close(fd);
ftpd.c | 610 | map_delete(data_sockets, fd);
ftpd.c | 615 | TP("dwc() complete, exiting.\n");
ftpd.c | 621 | TP("Entering dwc(), pos: " + pos + " length should be: " + BLOCK_SIZE + ".\n");
ftpd.c | 626 | TP("type == STRING\n");
ftpd.c | 633 | eventWrite(pfd, "226 Transfer complete.\r\n");
ftpd.c | 634 | socket_close(fd);
ftpd.c | 635 | map_delete(data_sockets, fd);
ftpd.c | 640 | TP("dwc() complete, exiting.\n");
ftpd.c | 647 | TP("type is other then STRING\n");
ftpd.c | 652 | eventWrite(pfd, "551 Error on input file.\r\n");
ftpd.c | 653 | replace_string(tmp, "\n", "\r\n");
ftpd.c | 655 | allocate_buffer(0);
ftpd.c | 657 | eventWrite(pfd, "551 Error on input file.\r\n");
ftpd.c | 662 | TP("sent from " + pos + " to " + (pos + BLOCK_SIZE) + ".\n");
ftpd.c | 663 | TP("ret_val was: " + ret_val + ".\n");
ftpd.c | 669 | eventWrite(pfd, "226 Transfer complete.\r\n");
ftpd.c | 670 | socket_close(fd);
ftpd.c | 671 | map_delete(data_sockets, fd);
ftpd.c | 676 | TP("dwc() complete, exiting.\n");
ftpd.c | 683 | eventWrite(pfd, "551 Error on input file.\r\n");
ftpd.c | 684 | replace_string(tmp, "\n", "\r\n");
ftpd.c | 686 | allocate_buffer(0);
ftpd.c | 688 | eventWrite(pfd, "551 Error on input file.\r\n");
ftpd.c | 693 | TP("ret_val was: " + ret_val + ".\n");
ftpd.c | 694 | TP("leaving dwc(), pos: " + pos + ".\n");
ftpd.c | 700 | TP("Adding call_out\n");
ftpd.c | 702 | call_out("data_write_callback", 1, fd);
ftpd.c | 716 | TP("Killing callout.\n");
ftpd.c | 727 | user_event( "inform", sprintf("%s logged out of ftpd", "name"), "ftp");
ftpd.c | 731 | sprintf("%s logged out at %s.\n", name, ctime(time())));
ftpd.c | 740 | eventNewConnection(fd);
ftpd.c | 741 | new(class session);
ftpd.c | 745 | time();
ftpd.c | 748 | sscanf(socket_address(fd), "%s %d", t->data_addr, t->data_port);
ftpd.c | 752 | mud_name()));
ftpd.c | 763 | TP("Parsing " + str + ".\n");
ftpd.c | 765 | explode(str, " ");
ftpd.c | 767 | if (sizeof( bits ) >
ftpd.c | 768 | implode( bits[1 .. ], " " );
ftpd.c | 772 | time();
ftpd.c | 776 | explode(rest, ",");
ftpd.c | 778 | eventWrite(fd, sprintf("500 '%s': command not understood.\r\n", str));
ftpd.c | 780 | implode(bits[0..3], ".");
ftpd.c | 781 | sscanf(bits[4], "%d", i);
ftpd.c | 783 | sscanf(bits[5], "%d", i);
ftpd.c | 788 | socket_close(sess->pasv_fd);
ftpd.c | 791 | eventWrite(fd, "200 PORT command successful.\r\n");
ftpd.c | 795 | CHECK_CMD(1);
ftpd.c | 798 | shut(10);
ftpd.c | 800 | eventWrite(fd, "530 Offler loaded.\r\n");
ftpd.c | 802 | eventWrite(fd, "530 Offler failed to load.\r\n");
ftpd.c | 806 | logout(fd);
ftpd.c | 808 | eventWrite(fd, sprintf("530 User %s access denied...\r\n", bits[1]));
ftpd.c | 810 | eventWrite(fd, sprintf("331 Password required for %s.\r\n", bits[1]));
ftpd.c | 816 | eventWrite(fd, "503 Login with USER first.\r\n");
ftpd.c | 820 | eventWrite(fd, "530 Login incorrect.\r\n");
ftpd.c | 831 | ctime(time())));
ftpd.c | 835 | HOME_DIR(sess->user_name);
ftpd.c | 841 | ctime(time())));
ftpd.c | 845 | eventWrite(fd, "230 Cannot cd to home.  Logging in with dir=/\r\n");
ftpd.c | 848 | eventWrite(fd, sprintf("230 User %s logged in.\r\n", sess->user_name));
ftpd.c | 851 | CHECK_CMD(0);
ftpd.c | 852 | eventWrite(fd, "201 ALLO command ignored.\r\n");
ftpd.c | 855 | CHECK_CMD(0);
ftpd.c | 856 | eventWrite(fd, "200 NOOP operation successful.\r\n");
ftpd.c | 859 | CHECK_LOGIN();
ftpd.c | 860 | CHECK_CMD(1);
ftpd.c | 861 | CHECK_PLAYER();
ftpd.c | 862 | get_path(fd, rest);
ftpd.c | 870 | eventWrite(fd, "350 File exists, ready for destination name\r\n");
ftpd.c | 876 | CHECK_LOGIN();
ftpd.c | 877 | CHECK_CMD(1);
ftpd.c | 878 | CHECK_PLAYER();
ftpd.c | 880 | eventWrite(fd, "503 Bad sequence of commands.\r\n");
ftpd.c | 883 | get_path(fd, rest);
ftpd.c | 887 | eventWrite(fd, "250 RNTO command successful.\r\n");
ftpd.c | 889 | eventWrite(fd, "550 rename: No such file or directory.\r\n");
ftpd.c | 891 | eventWrite(fd, "550 rename: Operation not permitted.\r\n");
ftpd.c | 895 | CHECK_LOGIN();
ftpd.c | 896 | CHECK_CMD(1);
ftpd.c | 897 | sscanf(rest, "%d", sess->offset);
ftpd.c | 902 | CHECK_LOGIN();
ftpd.c | 903 | CHECK_CMD(1);
ftpd.c | 904 | get_path(fd, rest);
ftpd.c | 907 | eventWrite(fd, sprintf("550 %s: Not a plain file.\r\n", rest));
ftpd.c | 924 | ctime(time())));
ftpd.c | 926 | data_conn(fd, tmp, rest, FILE);
ftpd.c | 932 | CHECK_LOGIN();
ftpd.c | 933 | CHECK_CMD(1);
ftpd.c | 934 | CHECK_PLAYER();
ftpd.c | 935 | get_path(fd, rest);
ftpd.c | 939 | ctime(time())));
ftpd.c | 942 | read_connection(fd, tmp, 1);
ftpd.c | 944 | read_connection(fd, tmp, 0);
ftpd.c | 946 | eventWrite(fd, sprintf("553 Permision denied to %s.\r\n", rest));
ftpd.c | 950 | CHECK_LOGIN();
ftpd.c | 951 | CHECK_CMD(1);
ftpd.c | 952 | CHECK_PLAYER();
ftpd.c | 953 | get_path(fd, rest);
ftpd.c | 962 | ctime(time())));
ftpd.c | 968 | eventWrite(fd, "250 DELE command successful.\r\n");
ftpd.c | 970 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 975 | CHECK_LOGIN();
ftpd.c | 976 | CHECK_CMD(1);
ftpd.c | 977 | CHECK_PLAYER();
ftpd.c | 978 | get_path(fd, rest);
ftpd.c | 982 | ctime(time())));
ftpd.c | 985 | eventWrite(fd, sprintf("550 %s: File exists.\r\n", rest));
ftpd.c | 987 | eventWrite(fd, "257 MKD command successful.\r\n");
ftpd.c | 989 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 994 | CHECK_LOGIN();
ftpd.c | 995 | CHECK_CMD(1);
ftpd.c | 996 | CHECK_PLAYER();
ftpd.c | 997 | get_path(fd, rest);
ftpd.c | 1005 | eventWrite(fd, sprintf("550 %s: Not a directory.\r\n", rest));
ftpd.c | 1014 | ctime(time())));
ftpd.c | 1016 | eventWrite(fd, "250 RMD command successful.\r\n");
ftpd.c | 1019 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 1023 | CHECK_LOGIN();
ftpd.c | 1024 | CHECK_CMD(1);
ftpd.c | 1025 | CHECK_PLAYER();
ftpd.c | 1026 | get_path(fd, rest);
ftpd.c | 1030 | ctime(time())));
ftpd.c | 1032 | read_connection(fd, tmp, 1);
ftpd.c | 1034 | eventWrite(fd, sprintf("553 Permision denied to %s.\r\n", rest));
ftpd.c | 1037 | if (sizeof(bits) >
ftpd.c | 1038 | lower_case(bits[1]);
ftpd.c | 1044 | eventWrite(fd, sprintf("214 Syntax: %s %s.\r\n", misc[0], misc[2]));
ftpd.c | 1050 | eventWrite(fd, sprintf("502 Unknown command %s.\r\n", bits[1]));
ftpd.c | 1057 | keys(cmdtab);
ftpd.c | 1058 | sizeof(misc);
ftpd.c | 1064 | eventWrite(fd, tmp + "\r\n");
ftpd.c | 1069 | eventWrite(fd, tmp + "\r\n");
ftpd.c | 1075 | CHECK_LOGIN();
ftpd.c | 1076 | if (sizeof( bits ) >
ftpd.c | 1077 | implode( bits[2 .. ], " " );
ftpd.c | 1090 | eventWrite(fd, "550 SITE IDLE command failed.\r\n");
ftpd.c | 1096 | eventWrite(fd, sprintf("200 Maximum IDLE time set to %d seconds\r\n", i));
ftpd.c | 1100 | sprintf("200 Local TIME is %s.\r\n", ctime(time())[4..15]));
ftpd.c | 1104 | CHECK_CMD(2);
ftpd.c | 1105 | get_path(fd, rest2);
ftpd.c | 1106 | do_update(tmp, fd);
ftpd.c | 1109 | ctime(time())));
ftpd.c | 1113 | if (sizeof(bits) >
ftpd.c | 1114 | lower_case(bits[2]);
ftpd.c | 1124 | eventWrite(fd, sprintf("502 Unknown command %s.\r\n", bits[2]));
ftpd.c | 1130 | keys(sitecmdtab);
ftpd.c | 1131 | sizeof(misc);
ftpd.c | 1137 | eventWrite(fd, tmp + "\r\n");
ftpd.c | 1142 | eventWrite(fd, tmp + "\r\n");
ftpd.c | 1160 | CHECK_LOGIN();
ftpd.c | 1161 | CHECK_CMD(1);
ftpd.c | 1162 | get_path(fd, rest);
ftpd.c | 1165 | eventWrite(fd, sprintf("550 %s not a plain file.\r\n", rest));
ftpd.c | 1167 | eventWrite(fd, sprintf("550 %s does not exist.\r\n", rest));
ftpd.c | 1171 | localtime(stat(tmp)[1]+localtime(0)[LT_GMTOFF]);
ftpd.c | 1177 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 1180 | CHECK_LOGIN();
ftpd.c | 1181 | CHECK_CMD(1);
ftpd.c | 1182 | get_path(fd, rest) ;
ftpd.c | 1184 | file_size(tmp);
ftpd.c | 1186 | eventWrite(fd, sprintf("550 %s not a plain file.\r\n", rest));
ftpd.c | 1188 | eventWrite(fd, sprintf("550 %s does not exist.\r\n", rest));
ftpd.c | 1192 | ctime(time())));
ftpd.c | 1194 | eventWrite(fd, sprintf("213 %d\r\n", i));
ftpd.c | 1197 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 1200 | if (sizeof(bits) >
ftpd.c | 1201 | CHECK_LOGIN();
ftpd.c | 1202 | get_path(fd, rest);
ftpd.c | 1207 | ls(tmp, MASK_L)));
ftpd.c | 1212 | eventWrite(fd, sprintf("211 Permission denied to %s.\r\n", rest));
ftpd.c | 1215 | eventWrite(fd, sprintf("211-%s FTP server status:\r\n", mud_name()));
ftpd.c | 1217 | ctime(stat(file_name(this_object())+".c")[1])));
ftpd.c | 1218 | sscanf(socket_address(fd), "%s %*d", tmp);
ftpd.c | 1219 | eventWrite(fd, sprintf("     Connected to %s\r\n", tmp));
ftpd.c | 1221 | eventWrite(fd, sprintf("     Logged in as %s\r\n", sess->user_name));
ftpd.c | 1223 | eventWrite(fd, "     Waiting for password\r\n");
ftpd.c | 1225 | eventWrite(fd, "     Waiting for user name\r\n");
ftpd.c | 1230 | eventWrite(fd, "     Data connection open\r\n");
ftpd.c | 1240 | eventWrite(fd, "     No data connection\r\n");
ftpd.c | 1241 | eventWrite(fd, "211 End of status\r\n");
ftpd.c | 1249 | CHECK_LOGIN();
ftpd.c | 1250 | if ((i = sizeof(bits)) >
ftpd.c | 1251 | strlen(bits[1]);
ftpd.c | 1281 | if (sizeof(bits) >
ftpd.c | 1282 | get_path(fd, implode( bits[1..], " "));
ftpd.c | 1286 | data_conn(fd, ls(tmp, mask), "ls", STRING);
ftpd.c | 1288 | eventWrite(fd, sprintf("550 Permision denied to %s.\r\n", tmp));
ftpd.c | 1292 | CHECK_LOGIN();
ftpd.c | 1293 | CHECK_CMD(0);
ftpd.c | 1299 | CHECK_CMD(0);
ftpd.c | 1304 | CHECK_LOGIN();
ftpd.c | 1305 | if (sizeof(bits) >
ftpd.c | 1306 | get_path(fd, rest);
ftpd.c | 1310 | HOME_DIR(sess->user_name);
ftpd.c | 1315 | eventWrite(fd, "553 Permission denied (you are not a creator)\r\n");
ftpd.c | 1324 | ctime(time())));
ftpd.c | 1326 | get_path(fd, tmp);
ftpd.c | 1327 | eventWrite(fd, "250 CWD command successful.\r\n");
ftpd.c | 1334 | eventWrite(fd, sprintf("550 %s: Not a directory.\r\n", rest));
ftpd.c | 1338 | eventWrite(fd, sprintf("550 Permission denied to %s.\r\n", rest));
ftpd.c | 1341 | CHECK_CMD(0);
ftpd.c | 1342 | eventWrite(fd, "221 Goodbye, and remember: The Turtle Moves.\r\n", 1);
ftpd.c | 1343 | user_event( "inform", sprintf("%s quit ftpd", sess->user_name), "ftp");
ftpd.c | 1346 | ctime(time())));
ftpd.c | 1350 | CHECK_LOGIN();
ftpd.c | 1351 | CHECK_CMD(1);
ftpd.c | 1354 | eventWrite(fd, "200 Type set to I.\r\n");
ftpd.c | 1357 | eventWrite(fd, "200 Type set to A.\r\n");
ftpd.c | 1359 | eventWrite(fd, sprintf("504 Type %s not implemented.\r\n", bits[1]));
ftpd.c | 1365 | CHECK_CMD(0);
ftpd.c | 1367 | socket_close(sess->data_fd);
ftpd.c | 1368 | map_delete(data_sockets, sess->data_fd);
ftpd.c | 1372 | eventWrite(fd, "426 Transfer aborted. Data connection closed.\r\n");
ftpd.c | 1373 | eventWrite(fd, "225 ABOR command successful.\r\n");
ftpd.c | 1376 | CHECK_CMD(0);
ftpd.c | 1377 | eventWrite(fd, "215 UNIX Type: L8\r\n");
ftpd.c | 1380 | CHECK_CMD(0);
ftpd.c | 1381 | passive(sess);
ftpd.c | 1396 | eventWrite(fd, sprintf("502 %s command not implemented.\r\n", bits[0]));
ftpd.c | 1399 | eventWrite(fd, sprintf("500 '%s': command not understood.\r\n", str));
ftpd.c | 1409 | sprintf("%c", 244), ""}));
ftpd.c | 1410 | explode(str, "\n");
ftpd.c | 1412 | parse_comm(fd, bit);
ftpd.c | 1421 | TP("socket_close failed, reason: "+socket_error(ret)+"\n");
ftpd.c | 1424 | map_delete(data_sockets, sess->data_fd);
ftpd.c | 1429 | TP("socket_close failed, reason: "+socket_error(ret)+"\n");
ftpd.c | 1432 | map_delete(data_sockets, sess->pasv_fd);
ftpd.c | 1435 | map_delete(socket_info, fd);
ftpd.c | 1450 | HOME_DIR(sess->user_name);
ftpd.c | 1454 | sscanf(str, "~%s", temp);
ftpd.c | 1460 | extract(str, 1);
ftpd.c | 1461 | HOME_DIR(name);
ftpd.c | 1473 | explode(str, "/") - ({ "" });
ftpd.c | 1475 | sizeof(array);
ftpd.c | 1484 | implode(array1, "/");
ftpd.c | 1496 | file_name(o);
ftpd.c | 1502 | desc_object(o);
ftpd.c | 1524 | bingle_bingle();
ftpd.c | 1526 | find_object("room/void");
ftpd.c | 1528 | eventWrite(fd, "530 The void is lost!\r\n");
ftpd.c | 1531 | get_cfile(name);
ftpd.c | 1532 | find_object(name);
ftpd.c | 1534 | if(file_size(name) >
ftpd.c | 1536 | eventWrite(fd, sprintf("530 Loaded %s.\r\n", name));
ftpd.c | 1539 | replace(err, ({ "\r", " ", "\n", " "}))));
ftpd.c | 1542 | eventWrite(fd, sprintf("530 File %s does not exist.\r\n", name));
ftpd.c | 1546 | environment(ov);
ftpd.c | 1547 | all_inventory(ov);
ftpd.c | 1548 | sizeof(invent);
ftpd.c | 1550 | move(rsv);
ftpd.c | 1553 | file_name(ov);
ftpd.c | 1556 | dest_me();
ftpd.c | 1558 | dwep();
ftpd.c | 1561 | destruct(ov);
ftpd.c | 1564 | find_object(pname);
ftpd.c | 1566 | catch(call_other(pname, "??"));
ftpd.c | 1567 | find_object(pname);
ftpd.c | 1569 | find_object(pname);
ftpd.c | 1570 | query_static_auto_load();
ftpd.c | 1571 | query_dynamic_auto_load();
ftpd.c | 1573 | dest_me();
ftpd.c | 1576 | dwep();
ftpd.c | 1579 | destruct(loaded);
ftpd.c | 1582 | catch(dup = clone_object(pname));
ftpd.c | 1584 | dest_me();
ftpd.c | 1586 | dwep();
ftpd.c | 1589 | destruct(ov);
ftpd.c | 1593 | init_static_arg(static_arg);
ftpd.c | 1596 | init_dynamic_arg(dynamic_arg);
ftpd.c | 1601 | eventWrite(fd, "530 Error updating your object, see /log/error-log or /log/catch.\r\n");
ftpd.c | 1605 | sizeof(invent);
ftpd.c | 1608 | move(ov);
ftpd.c | 1613 | move(env);
ftpd.c | 1615 | eventWrite(fd, sprintf("530 Updated %s.\r\n", desc_f_object(ov)));
ftpd.c | 1622 | keys(socket_info);
ftpd.c | 1623 | sizeof(bits);
ftpd.c | 1633 | call_out("check_connections", 5 * 60);
ftpd.c | 1637 | return (arg[0] != ".." && arg[0] != ".");
bulk_delete.c | 24 | delete_name(string name);
bulk_delete.c | 25 | check_name(string name);
bulk_delete.c | 33 | seteuid("Root");
bulk_delete.c | 35 | if (file_size(SAVEFILE) >
bulk_delete.c | 36 | unguarded((: read_file, SAVEFILE :));
bulk_delete.c | 37 | restore_variable(var);
bulk_delete.c | 39 | call_out("continuous_erase", 1);
bulk_delete.c | 45 | save_variable(dirs);
bulk_delete.c | 46 | unguarded((: write_file, SAVEFILE, var, 1 :));
bulk_delete.c | 48 | call_out("continuous_erase", 1);
bulk_delete.c | 59 | log_file("EXPIRED", "%s Starting letter %s\n", ctime(time()), current);
bulk_delete.c | 61 | get_dir(PLAYER_SAVE_DIR + current + "/*.o");
bulk_delete.c | 62 | get_dir(PLAYER_SAVE_DIR + current + "/*.o.gz");
bulk_delete.c | 67 | check_name(all_files[0][0..<6]);
bulk_delete.c | 69 | check_name(all_files[0][0..<3]);
bulk_delete.c | 71 | call_out("continuous_erase", ERASE_RATE, all_files[1..]);
bulk_delete.c | 81 | delete_name(name);
bulk_delete.c | 94 | test_age(name);
bulk_delete.c | 95 | test_last(name);
bulk_delete.c | 98 | if((time() - last_log_on) >
bulk_delete.c | 99 | mail_count(name);
bulk_delete.c | 103 | ctime(time()), name);
bulk_delete.c | 105 | log_file("EXPIRED", "%s erased mail for %s\n", ctime(time()), name);
bulk_delete.c | 106 | delete_account(name);
bulk_delete.c | 121 | time() - last_log_on, time_on * 60);
bulk_delete.c | 127 | if((time() - last_log_on) >
bulk_delete.c | 130 | ctime(time()), name);
bulk_delete.c | 132 | delete_name(name);
bulk_delete.c | 137 | if((time() - last_log_on) >
bulk_delete.c | 138 | mail_count(name);
bulk_delete.c | 142 | get_messages(name, "inbox");
bulk_delete.c | 144 | sizeof(folder);
bulk_delete.c | 145 | if(folder[i]->status == "N");
bulk_delete.c | 147 | reset_eval_cost();
bulk_delete.c | 150 | delete_it(name, "inbox", tmp);
bulk_delete.c | 159 | query_player_file_name(name);
bulk_delete.c | 161 | unguarded((: rm,  fname + ".o" :));
bulk_delete.c | 162 | unguarded((: rm, fname + ".o.gz" :));
bulk_delete.c | 165 | query_player_ram_file_name(name);
bulk_delete.c | 166 | unguarded((: rm,  fname + ".o" :));
bulk_delete.c | 167 | unguarded((: rm, fname + ".o.gz" :));
bulk_delete.c | 169 | query_player_disk_file_name(name);
bulk_delete.c | 170 | unguarded((: rm,  fname + ".o" :));
bulk_delete.c | 171 | unguarded((: rm, fname + ".o.gz" :));
bulk_delete.c | 174 | delete_related_files(name, 1);
bulk_delete.c | 175 | remove_cache_entry(name);
bulk_delete.c | 184 | back_trace() :));
bulk_delete.c | 190 | back_trace() :));
bulk_delete.c | 193 | log_file("EXPIRED", "Manually Requested Processing of %s.\n", letter);
bulk_delete.c | 195 | get_dir(PLAYER_SAVE_DIR+ letter +"/*.o");
bulk_delete.c | 196 | get_dir(PLAYER_SAVE_DIR+ letter +"/*.o.gz");
bulk_delete.c | 198 | notify_fail("Directory empty.\n");
bulk_delete.c | 200 | call_out("continuous_erase", 5, all_files);
bulk_delete.c | 211 | back_trace() :));
bulk_delete.c | 217 | back_trace() :));
bulk_delete.c | 222 | get_dir("/save/"+ dir +"/*");
bulk_delete.c | 225 | get_dir("/save/"+ dir +"/*inbox.o");
bulk_delete.c | 229 | get_dir("/save/"+ dir +"/*.o");
bulk_delete.c | 232 | get_dir("/save/vaults/*/*.o");
bulk_delete.c | 235 | get_dir("/w/.dead_ed_files/");
bulk_delete.c | 238 | notify_fail("Invalid directory.\n");
bulk_delete.c | 242 | notify_fail("Directory empty.\n");
bulk_delete.c | 247 | call_out((: check_name :), 5 * (i + 1), all_files[i]);
bulk_delete.c | 251 | explode(all_files[i], "inbox")[0]);
bulk_delete.c | 255 | explode(all_files[i], "-")[0]);
bulk_delete.c | 258 | call_out((: check_name :), 5 * (i + 1), all_files[i][0..<3]);
loader.c | 33 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 36 | sizeof(pre_load);
loader.c | 41 | printf(domain +" pre_loading "+pre_load[i]+".\n");
loader.c | 43 | call_out("do_load", 0, pre_load[i]);
loader.c | 51 | call_other(str, "??");
loader.c | 64 | query_name();
loader.c | 88 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 95 | save_object("/d/" + domain + "/loader");
loader.c | 112 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
loader.c | 118 | delete(pre_load, i, 1);
loader.c | 119 | save_object("/d/" + domain + "/loader");
loader.c | 130 | return ({ });
loader.c | 132 | unguarded((: restore_object, "/d/"+ domain + "/loader" :));
rcs_handler.c | 10 | unguarded((: restore_object, SAVE_FILE :));
rcs_handler.c | 11 | call_out("clean_up", 2);
rcs_handler.c | 19 | keys(_locks);
rcs_handler.c | 27 | if(sizeof(names) >
rcs_handler.c | 28 | while(sizeof(names) >
rcs_handler.c | 30 | if(sizeof(names) >
rcs_handler.c | 31 | call_out("clean_up", random(15), names[1..]);
rcs_handler.c | 40 | if((time() - stat(file)[1]) >
rcs_handler.c | 54 | map_delete(_locks, name);
rcs_handler.c | 59 | unguarded((: save_object, SAVE_FILE, 2 :));
rcs_handler.c | 71 | if (stringp(cre))  name = lower_case(cre);
rcs_handler.c | 72 | query_name();
rcs_handler.c | 77 | unguarded((: save_object, SAVE_FILE, 2 :));
rcs_handler.c | 88 | if (stringp(cre))  name = lower_case(cre);
rcs_handler.c | 89 | query_name();
rcs_handler.c | 92 | unguarded((: save_object, SAVE_FILE, 2 :));
rcs_handler.c | 116 | if (stringp(cre))  name = lower_case(cre);
rcs_handler.c | 117 | query_name();
rcs_handler.c | 129 | lower_case(cre);
rcs_handler.c | 131 | query_name();
rcs_handler.c | 139 | strsrch(file, "/", -1);
rcs_handler.c | 142 | if (file_size(rcsfile) >
rcs_handler.c | 143 | read_file(rcsfile, 4, 1);
rcs_handler.c | 146 | read_file(rcsfile, 5, 1);
rcs_handler.c | 147 | sscanf(tmp, "\t%s:", lockname);
rcs_handler.c | 160 | map_delete(_locks, name);
rcs_handler.c | 165 | unguarded((: save_object, SAVE_FILE, 2 :));
force.c | 30 | sscanf(file_name(this_object()), "%s#", fname);
force.c | 33 | add_action("do_force", "force");
force.c | 35 | add_action("no_force", "noforce");
force.c | 43 | write("Ok.\n");
force.c | 48 | write("Ok.\n");
force.c | 51 | write("Forcing you is currently ");
force.c | 53 | write("disabled.\n");
force.c | 56 | write("enabled.\n");
force.c | 68 | notify_fail("You do not have the ability to do that yet.\n");
force.c | 72 | notify_fail("Usage : force <person> <command>\n");
force.c | 76 | notify_fail("Insufficient social points.\n");
force.c | 79 | this_player()->expand_nickname(who);
force.c | 80 | lower_case(who);
force.c | 81 | match_objects_in_environments(who, environment(this_object()));
force.c | 83 | notify_fail(match_objects_failed_mess(omatch));
force.c | 89 | notify_fail("No such living thing.\n");
force.c | 93 | sizeof(obs);
force.c | 95 | write(capitalize(who) + " didn't want to do that.\n");
force.c | 96 | write("Ok.\n");
force.c | 104 | this_player(1);
force.c | 106 | previous_object();
force.c | 110 | this_object()->query_name() + " : " + str);
force.c | 115 | log_file("FORCE", " (failed)\n");
force.c | 124 | log_file("FORCE", " (failed)\n");
force.c | 127 | command(str);
force.c | 128 | log_file("FORCE", " (succeeded)\n");
simul_efun.c | 48 | seteuid("Root");
simul_efun.c | 49 | create();
security.c | 18 | call_other(previous_object(), func, a1, a2, a3, a4);
login.c | 87 | finish_compiling(string, mapping);
login.c | 88 | load_file();
login.c | 89 | enter_state(string);
login.c | 90 | dest_me();
login.c | 95 | seteuid("Root");
login.c | 97 | load_file();
login.c | 105 | resolve(query_ip_number(this_object()), "");
login.c | 107 | call_out("time_out", TIMEOUT_TIME);
login.c | 113 | ctime(time())[4..18], args ...);
login.c | 125 | debug_log("Already compiling, exiting.");
login.c | 129 | if(file_size(base_name(this_object()) + ".o") >
login.c | 132 | debug_log("loading data.");
login.c | 133 | unguarded((: restore_object, base_name(this_object()) :));
login.c | 136 | debug_log("data load complete.");
login.c | 138 | debug_log("Compiling script");
login.c | 139 | debug_printf("Compiling script");
login.c | 141 | compile_file(LOGIN_SCRIPT, (: finish_compiling :));
login.c | 155 | debug_printf("Finished compiling");
login.c | 162 | debug_log("Error, state %s already exists!", thing["name"]);
login.c | 169 | debug_log("State %s found", thing["name"]);
login.c | 180 | debug_log("Error event %O in state %s", event, thing["name"]);
login.c | 185 | tell_creator("ceres", "Name: " + name + "\n");
login.c | 189 | debug_log("Validating state machine.");
login.c | 192 | debug_log("Action function %s doesn't exist", _states[s]->action);
login.c | 199 | debug_log("Done. %d states created.", sizeof(keys(_states)));
login.c | 200 | debug_log("Saving data.");
login.c | 202 | unguarded((: save_object, base_name(this_object()) :));
login.c | 223 | enter_state((_states[_state])->events[type + "-" + lower_case(event)]);
login.c | 225 | enter_state((_states[_state])->events[type]);
login.c | 227 | enter_state((_states[_state])->events["default"]);
login.c | 231 | query_multiple_short(keys(_states[_state]->events)));
login.c | 249 | debug_log("entering state %s", _state);
login.c | 255 | debug_log("invalid state %s exiting", _state);
login.c | 256 | dest_me();
login.c | 261 | debug_log("writing %s", _states[_state]->write);
login.c | 262 | if(file_size(_states[_state]->write) >
login.c | 263 | get_message(_states[_state]->write);
login.c | 270 | replace_string(tmp, "$"+field, _data[field]);
login.c | 273 | write(tmp);
login.c | 279 | debug_log("calling %s", _states[_state]->action);
login.c | 280 | call_other(this_object(), _states[_state]->action, _event);
login.c | 287 | input_to("process_event", _states[_state]->noecho, "input");
login.c | 300 | process_event(retval, "return");
login.c | 303 | call_out("process_event", 0, retval, "return");
login.c | 316 | strlen(str);
login.c | 332 | if(strlen(name) >
login.c | 345 | write("\nSorry the player name " + name + " has been banished.\n");
login.c | 350 | write("Sorry that name is not allowed.\n");
login.c | 354 | write("Sorry that name has already been taken.\n");
login.c | 359 | write("Sorry that name is already in use for a club or family.\n");
login.c | 377 | sprintf("%c", 65 + random(26));
login.c | 380 | sprintf("%c", 97 + random(26));
login.c | 383 | sprintf("%c", 48 + random(10));
login.c | 401 | write(LOGIN_HANDLER->get_message(FILE_PATH+ "/BANNER"));
login.c | 409 | query_ip_number(this_object()));
login.c | 410 | log_file("BAD_PASSWORD", ctime(time())[4..18] + ": " + mess + "\n");
login.c | 411 | event(efun::users(), "inform", mess, "bad-password");
login.c | 426 | write(LOGIN_HANDLER->get_message(FILE_PATH+ "/MAIN_MENU"));
login.c | 435 | lower_case(replace_string(event, "input-", ""));
login.c | 438 | write("There is no such player.\n\nPress enter to continue ");
login.c | 464 | replace_string(event, "input-", "");
login.c | 467 | write("\nPassword incorrect.\n");
login.c | 509 | write("WARNING! Unable to delete your character.\n\n");
login.c | 511 | write("Press enter to continue ");
login.c | 553 | accounts (hotmail, yahoo etc.)\n\n");
login.c | 563 | query_ip_number(this_object())) - ({ this_object() });
login.c | 613 | replace_string(event, "input-", "");
login.c | 615 | lower_case(player);
login.c | 617 | if (stringp(player) && strlen(player) >
login.c | 618 | finger_info(player, 1);
login.c | 620 | write("I am sorry, there is no such player.\n\n");
login.c | 622 | write(strip_colours(finger_info) + "\n\n");
login.c | 625 | write("Invalid name, returning to the login menu.\n\n");
login.c | 627 | write("Press enter to continue ");
login.c | 641 | write( "\nPress enter to continue ");
login.c | 659 | replace_string(event, "input-", "");
login.c | 667 | sscanf(address, "%s@%s", name, domain);
login.c | 684 | lower_case(replace_string(event, "input-", ""));
login.c | 691 | capitalize(_data["name"]);
login.c | 709 | replace_string(event, "input-", "");
login.c | 711 | if((tmp[0] - '1') < 0 || (tmp[0] - '1') >
login.c | 714 | lower_case(_data["random_names"][tmp[0] - '1']);
login.c | 727 | query_languages();
login.c | 728 | sizeof(langs);
login.c | 730 | unique_name(langs[i]));
login.c | 750 | replace_string(event, "input-", "");
login.c | 751 | sizeof(RANDOM_NAME_GENERATOR->query_languages());
login.c | 756 | write("Incorrect choice.\n");
login.c | 767 | replace_string(event, "return-", "");
login.c | 768 | write("Here is a list of 9 random names.  Please choose one:\n");
login.c | 769 | allocate(9);
login.c | 770 | sizeof(_data["random_names"]);
login.c | 771 | unique_name(lang);
login.c | 772 | write(sprintf("%c - %s\n", i+'1', _data["random_names"][i]));
login.c | 790 | replace_string(event, "input-", "");
login.c | 791 | write("\n");
login.c | 797 | write("Password is too short, must be at least 6 characters.\n");
login.c | 802 | write("Password is the same as your name, please try again.\n");
login.c | 815 | write("\n");
login.c | 817 | replace_string(event, "input-", "");
login.c | 822 | write("Passwords do not match.\n");
login.c | 832 | capitalize(_data["name"]);
login.c | 845 | replace_string(event, "input-", "");
login.c | 851 | write("Sorry it has to be the same as your name.");
login.c | 866 | replace_string(event, "input-", "");
login.c | 868 | lower_case(name);
login.c | 871 | write("There is no such player.\n\nPress enter to continue ");
login.c | 888 | test_email(name);
login.c | 889 | if(sizeof(email) >
login.c | 902 | query_temp_password(name);
login.c | 911 | generate_password();
login.c | 912 | set_temp_password(name, crypt(pass, 0));
login.c | 922 | query_ip_number(this_object()));
login.c | 924 | log_file("BAD_PASSWORD", ctime(time())[4..18] + ": " + mess + "\n");
login.c | 925 | event(efun::users(), "inform", mess, "bad-password");
login.c | 943 | lower_case(replace_string(event, "input-", ""));
login.c | 1024 | query_lockedout(_data["name"]);
login.c | 1036 | query_alt_of(_data["name"]) });
login.c | 1038 | query_alts(_data["name"]);
login.c | 1042 | filter(alts, (: LIVING->find_player($1) :));
login.c | 1069 | if(PLAYER_HANDLER->test_age(_data["name"]) >
login.c | 1096 | this_object() });
login.c | 1117 | replace_string(event, "input-", "");
login.c | 1127 | query_temp_password(_data["name"]);
login.c | 1130 | write("\nPassword incorrect.\n");
login.c | 1135 | failed_login(query_ip_number(this_object()));
login.c | 1136 | write("\nToo many retries.\n\nPress enter to continue ");
login.c | 1141 | query_ip_number(this_object()));
login.c | 1142 | event(users(), "inform", mess, "bad-password");
login.c | 1143 | log_file("BAD_PASSWORD", ctime(time())[4..18] + ": " + mess + "\n");
login.c | 1146 | do_reset(_data["name"], _data["password"]);
login.c | 1151 | clear_temp_password(_data["name"]);
login.c | 1178 | lower_case(replace_string(event, "input-", ""));
login.c | 1191 | write("That's too weird even for this game!\nTry male or female ");
login.c | 1200 | write("Error\n");
login.c | 1201 | dest_me();
login.c | 1217 | find_player(_data["name"]);
login.c | 1219 | write("Your other copy has been eaten.  Logging in normally.\n");
login.c | 1224 | query_ip_name(this_object()) + ".\n");
login.c | 1226 | destruct(pl);
login.c | 1228 | dest_me();
login.c | 1238 | find_player(_data["name"]);
login.c | 1240 | write("Your other copy has been eaten.  Logging in normally.\n");
login.c | 1246 | query_ip_name(this_object()) + ".\n");
login.c | 1247 | clone_object("/std/object");
login.c | 1248 | exec(ob, pl);
login.c | 1249 | dest_me();
login.c | 1251 | exec(pl, this_object());
login.c | 1252 | look_me();
login.c | 1254 | player_reconnected(pl->query_name());
login.c | 1260 | inform_reconnect_game();
login.c | 1263 | resolve(query_ip_number(pl), "");
login.c | 1281 | int_is_discworld_full(WITHOUT_LOGINS_NOT_IN_QUEUE);
login.c | 1284 | write("Sorry, there are no player slots available.\n\n");
login.c | 1299 | write("You are already in the login queue.\n");
login.c | 1301 | query_name() == $2 :), _data["name"]);
login.c | 1305 | write("Reconnecting you to the login queue.\n");
login.c | 1309 | query_ip_name(this_object()) + ".\n");
login.c | 1310 | clone_object("/std/object");
login.c | 1311 | exec(ob, pl);
login.c | 1312 | dest_me();
login.c | 1314 | this_object();
login.c | 1315 | exec(pl, ob);
login.c | 1320 | add_to_login_queue(this_object());
login.c | 1321 | find_player(_data["name"]);
login.c | 1327 | quit();
login.c | 1335 | remove_call_out("time_out");
login.c | 1336 | call_out("check_status", 15);
login.c | 1345 | write(LOGIN_HANDLER->get_message(FILE_PATH+ "/TERMS"));
login.c | 1346 | call_out("terms_delayed", 30);
login.c | 1358 | enter_state("agree-terms");
login.c | 1393 | set_name(_data["name"]);
login.c | 1394 | generate_password();
login.c | 1395 | set_password(crypt(pass, 0));
login.c | 1396 | set_email(_data["email"]);
login.c | 1397 | add_property("authorised player", 1);
login.c | 1398 | add_property("new player", 1);
login.c | 1399 | add_property("authorised email", _data["email"]);
login.c | 1400 | allow_save();
login.c | 1401 | save_me();
login.c | 1402 | dest_me();
login.c | 1426 | write("Something bad happened.\n");
login.c | 1432 | add_property("authorised player", 1);
login.c | 1440 | set_name(_data["name"]);
login.c | 1442 | set_password(crypt(_data["password"], 0));
login.c | 1445 | add_property("guest", 1);
login.c | 1446 | set_title("guest of Discworld");
login.c | 1448 | set_gender(_data["gender"]);
login.c | 1449 | set_language("general");
login.c | 1450 | set_default_language("general");
login.c | 1452 | this_object();
login.c | 1454 | write("Oh dear, something went wrong.\n");
login.c | 1459 | quit();
login.c | 1461 | write("\n");
login.c | 1466 | resolve(query_ip_number(pl), "");
login.c | 1482 | dest_me();
login.c | 1484 | query_cap_name(_data["name"]);
login.c | 1493 | write("Removing player from delete queue.\n");
login.c | 1495 | query_delete_player_file_name(_data["name"]) + ".o.gz") >
login.c | 1502 | write("Removing player from delete queue.\n");
login.c | 1511 | write("Something bad happened.\n");
login.c | 1515 | this_object();
login.c | 1517 | write("Oh dear, something went wrong.\n");
login.c | 1522 | quit();
login.c | 1524 | write("\n");
login.c | 1525 | move_player_to_start(_data["name"], 0, cap_name, 0, _data["go_invis"]);
login.c | 1527 | terminal_type(_terminal_name);
login.c | 1530 | window_size(_cols, _rows);
login.c | 1533 | resolve(query_ip_number(pl), "");
login.c | 1540 | call_out("time_out", TIMEOUT_TIME);
login.c | 1551 | remove_from_login_queue(this_object());
login.c | 1555 | enter_state("leaving-queue");
login.c | 1560 | write("Come back soon!\n");
login.c | 1561 | dest_me();
login.c | 1567 | dest_me();
login.c | 1572 | if((query_idle(this_object()) >
login.c | 1573 | time() >
login.c | 1575 | write("\nTime out.\n\n");
login.c | 1576 | dest_me();
login.c | 1579 | call_out( "time_out", TIMEOUT_TIME);
login.c | 1593 | add_to_login_queue(this_object());
login.c | 1598 | write("You now have position " + pos + " in the queue.\n");
login.c | 1602 | implode(QUOTE_HANDLER->query_random_quote(), "\n")));
login.c | 1603 | call_out("check_status", 30);
login.c | 1610 | this_player();
login.c | 1611 | this_object();
login.c | 1613 | query_cur_term();
login.c | 1614 | query_cols();
login.c | 1615 | query_rows();
login.c | 1617 | exec(tp, ob);
login.c | 1618 | quit();
login.c | 1620 | lower_case(str);
login.c | 1621 | debug_log("Suing to %s", str);
login.c | 1622 | enter_state("check-login-access");
login.c | 1632 | save();
login.c | 1633 | query_name();
login.c | 1634 | exec(this_object(), old);
login.c | 1635 | destruct(old);
login.c | 1636 | enter_state("player-login");
login.c | 1644 | debug_log("Connection received.");
login.c | 1646 | call_out("time_out", TIMEOUT_TIME);
login.c | 1647 | time();
login.c | 1649 | enter_state("main-menu");
login.c | 1657 | tell_object(this_object(), sprintf("%-=*s", 79, str));
login.c | 1679 | remove_from_login_queue(this_object());
login.c | 1684 | remove_from_login_queue(this_object());
login.c | 1685 | destruct(this_object());
login.c | 1703 | query_player_file_name(name);
login.c | 1715 | query_delete_player_file_name(name);
finger.c | 38 | seteuid("Root");
finger.c | 60 | explode(read_file("/banish/" + name[0..0] + "/" + name + ".o"), "\n");
finger.c | 79 | replace(retval, "@@", "@ @ ");
finger.c | 89 | query_time_string(time_elapsed, -1);
finger.c | 121 | query_domains();
finger.c | 125 | sizeof(bing);
finger.c | 127 | capitalize(bing[i]);
finger.c | 141 | capitalize(bing[i]);
finger.c | 167 | sprintf("Domains : %-=*s", width - 10, tmp);
finger.c | 185 | test_start_time(name);
finger.c | 201 | time() - PLAYER_HANDLER->test_last(name);
finger.c | 216 | find_player(name);
finger.c | 232 | finger_mail(name);
finger.c | 233 | query_project(name);
finger.c | 235 | strip_colours(tmp);
finger.c | 236 | replace(tmp, "%^", " ");
finger.c | 246 | query_plan(name);
finger.c | 248 | strip_colours(tmp);
finger.c | 249 | replace(tmp, "%^", " ");
finger.c | 279 | find_player(name);
finger.c | 281 | query_cap_name(name);
finger.c | 283 | capitalize(name);
finger.c | 285 | allocate(9);
finger.c | 291 | test_real_name(name) : "???");
finger.c | 295 | test_last(name))));
finger.c | 296 | query_invis() ? query_idle(ob) : -1);
finger.c | 299 | get_additional_info(name, 1, 0, 80, 0);
finger.c | 338 | capitalize((string) master->query_lord()) + ".\n");
finger.c | 339 | query_members();
finger.c | 340 | query_deputies();
finger.c | 342 | if (sizeof(deputies) >
finger.c | 349 | query_multiple_short(map(deputies, (: link_name($1) :)));
finger.c | 352 | query_multiple_short(map(deputies, (: capitalize($1) :)));
finger.c | 366 | sizeof(members);
finger.c | 377 | capitalize(members[i]), width - 14, projects);
finger.c | 387 | sprintf("%-=*s", width, (string) master->query_info());
finger.c | 408 | club_info_string(name, 0, "gumball lord");
finger.c | 418 | family_info_string(name, "gumball lord");
finger.c | 446 | domain_finger(name, width, www);
finger.c | 450 | if (file_size("/save/deities/" + name + ".o") >
finger.c | 451 | file_size("/save/deities/" + name + ".o.gz") >
finger.c | 452 | deity_finger(name);
finger.c | 458 | club_finger(name[5..]);
finger.c | 462 | domain_finger(name[7..], width, www);
finger.c | 466 | family_finger(name[7..]);
finger.c | 470 | family_finger(name);
finger.c | 472 | club_finger(name);
finger.c | 476 | if (file_size("/banish/" + name[0..0] + "/" + name + ".o") >
finger.c | 477 | banish_finger(name, caller);
finger.c | 500 | other_finger(name, no_colour, user_colour, width, caller, www);
finger.c | 514 | test_email(name);
finger.c | 515 | test_birthday(name);
finger.c | 527 | htmlise(tmp);
finger.c | 529 | htmlise(tmp2);
finger.c | 534 | sprintf("Email : %-*s\n", (width - 2) / 2 - 8, tmp[0..30]);
finger.c | 537 | htmlise(tmp2);
finger.c | 543 | test_deleting(name);
finger.c | 550 | time() - i) / (60 * 60 * 24)));
finger.c | 562 | test_appealing(name);
finger.c | 569 | time() - i) / (60 * 60 * 24)));
finger.c | 580 | test_home_dir(name);
finger.c | 583 | sprintf("%*-s", (width - 2) / 2, "Home directory : " + tmp + "<br>");
finger.c | 585 | test_guild(name);
finger.c | 595 | test_location(name);
finger.c | 597 | htmlise(tmp);
finger.c | 601 | test_homepage(name);
finger.c | 603 | htmlise(tmp);
finger.c | 608 | query_suspended(name);
finger.c | 611 | ctime(suspended[SUSPEND_TIME]);
finger.c | 621 | query_lockedout(name);
finger.c | 624 | ctime(lockedout[SUSPEND_TIME]);
finger.c | 634 | htmlise(get_additional_info(name, no_colour, user_colour, width, caller));
finger.c | 643 | strsrch(str, "http:");
finger.c | 649 | strsrch(str, " ");
finger.c | 675 | this_player()->query_name();
finger.c | 676 | this_player()->query_property(PLAYER_ALLOW_COLOURED_SOULS);
finger.c | 679 | this_player()->expand_nickname(name);
finger.c | 682 | this_player()->query_cols();
finger.c | 706 | replace_string(retval, str, REPLACEMENTS[str]);
finger.c | 736 | internal_finger_info(name, 0, 1, 80, caller, 1);
finger.c | 741 | replace_string(retval, str, WWW_REPLACEMENTS[str]);
finger.c | 743 | strip_colours(retval);
finger.c | 761 | this_player()->expand_nickname(name);
finger.c | 762 | this_player()->query_cols();
finger.c | 769 | other_finger(name, 0, 0, width, 0, 0);
finger.c | 772 | replace_string(retval, str, REPLACEMENTS[str]);
finger.c | 779 | test_player_title(name);
finger.c | 786 | query_cap_name(name);
finger.c | 791 | test_family_name(name);
finger.c | 810 | find_player(name);
finger.c | 820 | query_title();
finger.c | 838 | capitalize(ob->query_nationality_name());
finger.c | 841 | capitalize(ob->query_nationality_region());
finger.c | 848 | test_desc(name);
finger.c | 851 | strip_colours(tmp);
finger.c | 852 | test_gender(name);
finger.c | 875 | player_relationships_string(name);
finger.c | 885 | query_reference(name);
finger.c | 887 | strip_colours(tmp);
bastards.c | 29 | query_access(object ob);
bastards.c | 30 | timeout_access();
bastards.c | 31 | save_me();
bastards.c | 34 | seteuid("Root");
bastards.c | 42 | write("Failed to restore bastards.\n");
bastards.c | 44 | write("mmm, no site access\n");
bastards.c | 54 | timeout_access();
bastards.c | 57 | move_object(find_object("/room/void"));
bastards.c | 79 | query_all_access() { return copy(site_access);
bastards.c | 88 | query_ip_number(ob);
bastards.c | 92 | implode((string *)explode(tmp, ".")[0..<2], ".");
bastards.c | 95 | query_ip_name(ob);
bastards.c | 99 | implode(explode(tmp, ".")[1..], ".");
bastards.c | 108 | query_ip_number(ob);
bastards.c | 112 | implode((string *)explode(tmp, ".")[0..<2], ".");
bastards.c | 115 | query_ip_name(ob);
bastards.c | 119 | implode(explode(tmp, ".")[1..], ".");
bastards.c | 125 | query_all_multi() { return copy(multiuser);
bastards.c | 135 | map_delete(multiuser, address);
bastards.c | 154 | map_delete(site_access, bit);
bastards.c | 158 | map_delete(multiuser, bit);
bastards.c | 162 | unguarded((: save_object, base_name(this_object()), 2 :));
bastards.c | 171 | notify_fail("Invalid parameters.\n");
bastards.c | 176 | add_access(address, level, reason, timeout);
bastards.c | 177 | save_me();
bastards.c | 181 | this_player()->query_name()+".\n" :));
bastards.c | 191 | notify_fail("Invalid parameters.\n");
bastards.c | 196 | add_multi(address, multi, timeout);
bastards.c | 197 | save_me();
bastards.c | 202 | this_player()->query_name()+".\n" :));
bastards.c | 219 | time() + tim, reason });
bastards.c | 220 | save_me();
bastards.c | 223 | this_player()->query_name()+" because "+ reason + ".\n" :));
bastards.c | 235 | map_delete(suspended, str);
bastards.c | 236 | unguarded((: save_object, base_name(this_object()), 2 :));
bastards.c | 238 | ctime(time())[4..16] + " " + str+" unsuspended.\n" :));
bastards.c | 239 | add_entry(this_player(), str, "suspend", "Unsuspended.");
bastards.c | 246 | copy(suspended[name]);
bastards.c | 248 | map_delete(suspended, name);
bastards.c | 249 | save_me();
bastards.c | 267 | time() + tim, reason });
bastards.c | 268 | save_me();
bastards.c | 282 | copy(lockedout[name]);
bastards.c | 284 | map_delete(lockedout, name);
bastards.c | 285 | save_me();
bastards.c | 291 | time(), pass });
bastards.c | 292 | save_me();
bastards.c | 302 | map_delete(temp_passwords, tmp);
bastards.c | 307 | save_me();
bastards.c | 309 | copy(temp_passwords[name]);
bastards.c | 314 | map_delete(temp_passwords, name);
bastards.c | 315 | save_me();
ftp_auth.c | 25 | create();
ftp_auth.c | 26 | SetSocketType(STREAM);
ftp_auth.c | 27 | SetDestructOnClose(1);
ftp_auth.c | 29 | call_out("setup", 2);
ftp_auth.c | 30 | call_out("clean_sockets", 3600);
ftp_auth.c | 37 | destruct(this_object());
ftp_auth.c | 47 | eventNewConnection(fd);
ftp_auth.c | 48 | socket_address(fd);
ftp_auth.c | 51 | eventWrite(fd, "", 1);
ftp_auth.c | 54 | new(class ftp_session, fd : fd);
ftp_auth.c | 65 | explode(str, "/") - ({ "" });
ftp_auth.c | 67 | sizeof(array);
ftp_auth.c | 77 | implode(array1, "/");
ftp_auth.c | 90 | eventWrite(fd, "DENIED\n", 1);
ftp_auth.c | 94 | eventWrite(fd, sprintf("OKAY: %s\n", mud_name()));
ftp_auth.c | 98 | eventWrite(fd, "Syntax error\n", 1);
ftp_auth.c | 101 | lower_case(name);
ftp_auth.c | 112 | eventWrite(fd, "DENIED\n");
ftp_auth.c | 119 | eventWrite(fd, "DENIED invalid\n");
ftp_auth.c | 125 | eventWrite(fd, "DENIED suspended\n");
ftp_auth.c | 129 | time();
ftp_auth.c | 130 | crypt("" + timestamp, "" + random(12000));
ftp_auth.c | 135 | sprintf("OKAY: %s * /pub\n", token);
ftp_auth.c | 138 | get_password(name), name);
ftp_auth.c | 140 | eventWrite(fd, ret);
ftp_auth.c | 144 | eventWrite(fd, "Syntax error\n", 1);
ftp_auth.c | 147 | if ((token != sess->token) || ((time() - sess->timestamp) >
ftp_auth.c | 148 | eventWrite(fd, "DENIED\n");
ftp_auth.c | 151 | get_path(path);
ftp_auth.c | 158 | master()->valid_read(path, name, "read_file") ? "OKAY\n" : "DENIED\n");
ftp_auth.c | 160 | master()->valid_copy(path, name, "read_file") ? "OKAY\n" : "DENIED\n");
ftp_auth.c | 161 | eventWrite(fd, ret);
ftp_auth.c | 167 | master()->valid_write(path, name, "write_file") ? "OKAY\n" : "DENIED\n");
ftp_auth.c | 168 | eventWrite(fd, ret);
ftp_auth.c | 171 | eventWrite(fd, "DENIED\n");
ftp_auth.c | 183 | map_delete(Sockets, fd);
ftp_auth.c | 192 | time();
ftp_auth.c | 196 | eventWrite(sess->fd, "Timeout\n", 1);
ftp_auth.c | 199 | call_out("clean_sockets", 3600);
ftp_auth.c | 210 | capitalize(val->user) });
delete_clear.c | 27 | seteuid("Root");
delete_clear.c | 28 | restore_object(SAVE_FILE);
delete_clear.c | 30 | call_out("do_delete_check", 0);
delete_clear.c | 32 | call_out("do_delete_check", last_clear+ONE_DAY-time());
delete_clear.c | 41 | get_dir("/players/"+DELETE_DIR+"/*.o");
delete_clear.c | 42 | sizeof(bits);
delete_clear.c | 43 | stat("/players/"+DELETE_DIR+"/"+bits[i]);
delete_clear.c | 45 | log_file("DELETE_PL", ctime(time())+": Auto deleteing "+bits[i]+"\n");
delete_clear.c | 46 | remove_player(bits[i]);
delete_clear.c | 47 | rm("/players/"+DELETE_DIR+"/"+bits[i]);
delete_clear.c | 50 | time();
delete_clear.c | 51 | save_object(SAVE_FILE);
str_inven.c | 39 | if ((i = member_array(desc, inv)) >
aggregate.c | 1 | mapping_to_string( mapping map );
aggregate.c | 6 | copy(args);
aggregate.c | 9 | array_to_string( args[ i ] );
aggregate.c | 13 | mapping_to_string( args[ i ] );
aggregate.c | 16 | sprintf( "%O", args[ i ] );
aggregate.c | 30 | sprintf( "%O", map );
aggregate.c | 32 | keys( map );
aggregate.c | 36 | array_to_string( map[ args[ i ] ] ) );
aggregate.c | 41 | mapping_to_string( map[ args[ i ] ] ) );
aggregate.c | 44 | sprintf( "%O : %O", args[ i ], map[ args[ i ] ] );
aggregate.c | 52 | evaluate(bind((:move_object, dest:), ob));
multiple_short.c | 98 | this_player()->check_dark(environment(this_player())->query_light());
multiple_short.c | 105 | copy(args);
multiple_short.c | 109 | sizeof( args );
multiple_short.c | 121 | sizeof( args );
multiple_short.c | 122 | call_other(args[ i ], func, quiet);
multiple_short.c | 127 | sizeof( args );
multiple_short.c | 129 | call_other(args[ i ], func, quiet);
multiple_short.c | 141 | sizeof( args );
multiple_short.c | 154 | this_player()->convert_message(ret);
multiple_short.c | 156 | convert_message(ret);
ctime_elapsed.c | 12 | query_num( sec );
ctime_elapsed.c | 13 | query_num( min );
ctime_elapsed.c | 14 | query_num( hour );
ctime_elapsed.c | 15 | query_num( day );
find_member.c | 13 | member_array( target, array, start );
query_number.c | 6 | number_as_string(int n);
query_number.c | 51 | number_as_string(n);
query_number.c | 52 | number_as_string(n);
query_number.c | 115 | word_ordinal(part % 10);
debug.c | 36 | debug_printf("Error, player is: %O\n", player);
debug.c | 45 | previous_object();
debug.c | 48 | environment(env);
debug.c | 52 | environment(this_player());
debug.c | 89 | find_player(cre);
debug.c | 91 | find_player(cre);
debug.c | 97 | tell_object(cre, sprintf("%O:\n" + fmt, previous_object(), args ...));
debug.c | 99 | tell_object(cre, sprintf("%O:\n"+fmt, previous_object()));
array.c | 60 | previous_object();
array.c | 62 | environment(ob);
query_ident.c | 22 | return (string)ob->query_my_ident();
get_function_pointer.c | 6 | bing();
get_function_pointer.c | 7 | destruct(find_object("/secure/functemp"));
get_function_pointer.c | 10 | rm("/secure/functemp.c");
get_function_pointer.c | 13 | bind(this_object()->unguarded((:evaluate($(tmp), $(lpc)):)), previous_object());
add_command.c | 43 | write("Need to specify a verb for add_command.\n");
add_command.c | 47 | write("Need to specify a pattern for add_command.\n");
add_command.c | 50 | this_player()->add_command(verb, previous_object(), pattern, func);
add_command.c | 66 | this_player()->add_succeeded_mess(previous_object(), mess, indir);
add_command.c | 78 | this_player()->add_succeeded(ob);
add_command.c | 95 | this_player()->add_failed_mess(previous_object(), mess, indir);
virtual.c | 25 | clone_object(str);
virtual.c | 27 | clone_object(str, args ...);
virtual.c | 28 | if (!ob && file_size(str) >
virtual.c | 29 | create_virtual_object(str, 1);
virtual.c | 33 | catch(garbage_handler = load_object("/obj/handlers/garbage"));
virtual.c | 35 | catch(garbage_handler->cloned(ob));
pk_check.c | 47 | query_name() );
pk_check.c | 57 | query_owner_pk_check();
pk_check.c | 62 | this_object()->find_player(thing1);
pk_check.c | 69 | interactive(thing1);
pk_check.c | 73 | test_player_killer(thing1);
pk_check.c | 90 | query_owner_pk_check();
pk_check.c | 95 | this_object()->find_player(thing2);
pk_check.c | 102 | interactive(thing2);
pk_check.c | 106 | test_player_killer(thing2);
pk_check.c | 140 | query_owner_pk_check();
pk_check.c | 143 | this_object()->find_player(assistee);
pk_check.c | 154 | query_owner_pk_check();
pk_check.c | 157 | this_object()->find_player(assister);
pk_check.c | 169 | query_player_killer() :))) >
modified_efuns.c | 18 | back_trace();
modified_efuns.c | 21 | event(mixed,string,mixed ...);
modified_efuns.c | 25 | _notify_fail(string);
modified_efuns.c | 26 | living(object ob);
modified_efuns.c | 27 | find_player(string);
modified_efuns.c | 53 | this_player(), previous_object() }) + ({ avoid });
modified_efuns.c | 55 | this_player(), previous_object() });
modified_efuns.c | 59 | event(environment(this_player()), "say", str, avoid);
modified_efuns.c | 61 | event(previous_object(), "say", str, avoid);
modified_efuns.c | 65 | event(environment(environment(previous_object())), "say", str, avoid);
modified_efuns.c | 67 | event(environment(previous_object()), "say", str, avoid);
modified_efuns.c | 80 | load_object(ob);
modified_efuns.c | 82 | event(ob, "say", str, avoid);
modified_efuns.c | 90 | do_efun_write( str );
modified_efuns.c | 110 | query_invis();
modified_efuns.c | 117 | this_player();
modified_efuns.c | 124 | query_name();
modified_efuns.c | 128 | find_player(referrer);
modified_efuns.c | 139 | query_allowed();
modified_efuns.c | 150 | master()->high_programmer( referrer_name );
modified_efuns.c | 153 | master()->query_lord( referrer_name );
modified_efuns.c | 157 | query_creator();
modified_efuns.c | 159 | test_creator( referrer_name );
modified_efuns.c | 179 | find_living( word );
modified_efuns.c | 181 | find_living( word );
modified_efuns.c | 202 | find_player( word );
modified_efuns.c | 204 | find_player( word );
modified_efuns.c | 222 | users();
modified_efuns.c | 224 | filter( efun::users(), (: $1 && reference_allowed($1) :) );
modified_efuns.c | 230 | filter( efun::named_livings(), (: reference_allowed :) );
modified_efuns.c | 232 | filter( LIV->named_livings(), (: reference_allowed :) );
modified_efuns.c | 239 | filter( efun::children(name), (: reference_allowed :) );
modified_efuns.c | 241 | children(name);
modified_efuns.c | 259 | call_other( efun::users(), "event_"+ first, from, args ... );
modified_efuns.c | 263 | event( efun::users(), first, args ... );
modified_efuns.c | 267 | unguarded(function f);
modified_efuns.c | 279 | file_size(LOG_NAME(fname));
modified_efuns.c | 281 | if ( file_size( LOG_NAME(fname) + ".5" ) >
modified_efuns.c | 282 | unguarded((: rm, LOG_NAME(fname)+".5" :));
modified_efuns.c | 284 | if ( file_size( LOG_NAME(fname) + ".4" ) >
modified_efuns.c | 285 | unguarded((: rename, LOG_NAME(fname)+".4", LOG_NAME(fname)+".5" :));
modified_efuns.c | 287 | if ( file_size( LOG_NAME(fname) + ".3" ) >
modified_efuns.c | 288 | unguarded((: rename, LOG_NAME(fname)+".3", LOG_NAME(fname)+".4" :));
modified_efuns.c | 290 | if ( file_size( LOG_NAME(fname) + ".2" ) >
modified_efuns.c | 291 | unguarded((: rename, LOG_NAME(fname)+".2", LOG_NAME(fname)+".3" :));
modified_efuns.c | 293 | if ( file_size( LOG_NAME(fname) + ".1" ) >
modified_efuns.c | 294 | unguarded((: rename, LOG_NAME(fname)+".1", LOG_NAME(fname)+".2" :));
modified_efuns.c | 296 | unguarded((: rename, LOG_NAME(fname), LOG_NAME(fname)+".1" :));
modified_efuns.c | 299 | map_delete(_log_file_info, fname);
modified_efuns.c | 302 | unguarded((: write_file, LOG_NAME(fname), data :));
modified_efuns.c | 318 | log_file("ROGER", "%s: frog and %s\n", ctime(time()), query_gumboot());
modified_efuns.c | 326 | if ( strlen( fmt ) >
modified_efuns.c | 329 | base_name(previous_object());
modified_efuns.c | 330 | terminal_colour(fmt, ([]));
modified_efuns.c | 332 | call_out((: flush_log_files :), DELAY_LOG_FLUSH);
modified_efuns.c | 338 | sprintf(fmt, args ...);
modified_efuns.c | 353 | capitalize(MUD_NAME);
modified_efuns.c | 372 | read_file(file, start_line, number);
modified_efuns.c | 374 | printf("%s", bing[0..5000]);
modified_efuns.c | 388 | interactive(arg) && arg->query_creator();
modified_efuns.c | 404 | exec(to, from);
modified_efuns.c | 410 | sprintf("%8s ", prev -> query_name());
modified_efuns.c | 414 | sprintf("%8s ", prev -> query_name());
modified_efuns.c | 417 | sprintf("%8s ", file_name(previous_object()));
modified_efuns.c | 419 | log_file("ILLEGAL", "Exec: %-40s : %s\n", s, ctime( time() ) );
modified_efuns.c | 431 | real_time() - time();
modified_efuns.c | 434 | time();
modified_efuns.c | 440 | file_name(previous_object());
modified_efuns.c | 449 | previous_object(), previous_object()->query_name(), fun);
modified_efuns.c | 453 | previous_object(), file_name(previous_object()), fun);
modified_efuns.c | 459 | previous_object()));
modified_efuns.c | 473 | query_verb();
modified_efuns.c | 480 | return (string)this_player()->query_current_verb();
modified_efuns.c | 492 | strcmp(lower_case(str1), lower_case(str2));
modified_efuns.c | 504 | file_size(fname);
modified_efuns.c | 515 | read_bytes(fname, offset, 1080);
modified_efuns.c | 522 | write(str);
modified_efuns.c | 539 | file_size(fname);
modified_efuns.c | 543 | reset_eval_cost();
modified_efuns.c | 559 | member_array('\n', str, p+1);
modified_efuns.c | 575 | this_player()->do_efun_write(str);
modified_efuns.c | 584 | evaluate( stuff );
modified_efuns.c | 589 | this_player()->print_messages();
modified_efuns.c | 590 | this_player()->convert_message( stuff );
modified_efuns.c | 592 | this_player()->fit_message( stuff );
modified_efuns.c | 594 | this_player()->fix_string( stuff );
modified_efuns.c | 597 | notify_fail( stuff );
modified_efuns.c | 599 | _notify_fail( stuff );
modified_efuns.c | 612 | replace(str, ({ "search", "replace", "orange", "apple" });
modified_efuns.c | 626 | sizeof(bing);
modified_efuns.c | 628 | replace_string(str, bing[i], bing[i+1]);
modified_efuns.c | 635 | replace_string(str, bing, rep);
modified_efuns.c | 645 | implode(map(explode(words, " "), (: capitalize :)), " ");
modified_efuns.c | 660 | keys(allocate_mapping(arr, 1));
modified_efuns.c | 671 | users();
modified_efuns.c | 675 | event_say( previous_object(), words, ({ }) );
modified_efuns.c | 694 | call_stack(1);
modified_efuns.c | 695 | call_stack(2);
modified_efuns.c | 696 | sizeof(obs);
modified_efuns.c | 698 | base_name(obs[i]) + "#" + obs[i]->query_name();
modified_efuns.c | 700 | base_name(obs[i]);
modified_efuns.c | 716 | time();
modified_efuns.c | 717 | real_time();
modified_efuns.c | 718 | previous_object();
modified_efuns.c | 720 | reset_eval_cost();
modified_efuns.c | 730 | member_array(item, arr, start);
modified_efuns.c | 734 | map(arr, (:$1[0..$(strlen(item)-1)]:));
modified_efuns.c | 735 | member_array(item, tmp, start);
modified_efuns.c | 744 | filter(ob, (:$1:));
modified_efuns.c | 745 | call_other(ob, name, origin, rest ...);
modified_efuns.c | 751 | call_other(ob, name, origin, rest ...);
modified_efuns.c | 752 | all_inventory(ob);
modified_efuns.c | 754 | filter(bing, (:$1:));
modified_efuns.c | 755 | call_other(bing, name, origin, rest ...);
modified_efuns.c | 766 | find_object(ob);
modified_efuns.c | 769 | evaluate(bind((: efun::move_object($(ob)):), previous_object()));
modified_efuns.c | 775 | this_player();
modified_efuns.c | 778 | set_this_player(previous_object());
modified_efuns.c | 779 | init();
modified_efuns.c | 780 | all_inventory(ob) - ({previous_object()}))->init();
modified_efuns.c | 784 | living($1) && $1 != $(previous_object()):));
modified_efuns.c | 786 | set_this_player(bing);
modified_efuns.c | 787 | previous_object()->init();
modified_efuns.c | 791 | set_this_player(ob);
modified_efuns.c | 792 | previous_object()->init();
modified_efuns.c | 795 | set_this_player(tp);
modified_efuns.c | 803 | real_time();
modified_efuns.c | 805 | evaluate(bind((:efun::db_exec, fd, fmt:), previous_object()));
modified_efuns.c | 807 | evaluate(bind((:efun::db_exec, fd, sprintf(fmt, args ...):), previous_object()));
modified_efuns.c | 809 | if((real_time() - starttime) >
modified_efuns.c | 811 | previous_object(), real_time() - starttime);
modified_efuns.c | 817 | error("No database installed");
modified_efuns.c | 827 | error("No database installed");
modified_efuns.c | 836 | base_name(previous_object());
modified_efuns.c | 839 | sprintf("value %d\n%s", bing, back_trace()):));
modified_efuns.c | 841 | shutdown(bing);
modified_efuns.c | 846 | real_time(){return time();
modified_efuns.c | 868 | debug_info( operation, ob );
modified_efuns.c | 870 | base_name( ob );
modified_efuns.c | 878 | base_name( ob ) ) :));
modified_efuns.c | 886 | query_name() ) :));
modified_efuns.c | 889 | debug_info( operation, ob );
modified_efuns.c | 896 | real_time();
modified_efuns.c | 898 | evaluate(fun, input, args...);
modified_efuns.c | 900 | evaluate(bind((:call_other, ob, fun, input, args ...:), ob));
modified_efuns.c | 901 | if((real_time() - t) >
modified_efuns.c | 907 | real_time() - t);
modified_efuns.c | 918 | input_to(f, flag, previous_object(), fun, args);
modified_efuns.c | 924 | real_time();
modified_efuns.c | 926 | call_other(this_object(), func, args ...);
modified_efuns.c | 928 | evaluate(func, args ...);
modified_efuns.c | 930 | if((real_time() - t) >
modified_efuns.c | 931 | log_file("GARBAGE", "object: %O function: %O time: %d\n", this_object(), func, real_time()-t);
modified_efuns.c | 939 | bind(_wrap, previous_object());
modified_efuns.c | 942 | time();
modified_efuns.c | 948 | file_name(previous_object());
modified_efuns.c | 957 | previous_object(), previous_object()->query_name(), fun);
modified_efuns.c | 961 | previous_object(), file_name(previous_object()), fun);
modified_efuns.c | 968 | previous_object()));
qip.c | 3 | query_ip_number(player);
qip.c | 4 | query_ip_name(player);
query_number_and_ctime_elapsed.c | 6 | number_as_string(int n);
query_number_and_ctime_elapsed.c | 52 | number_as_string(n);
query_number_and_ctime_elapsed.c | 53 | number_as_string(n);
query_number_and_ctime_elapsed.c | 117 | word_ordinal(part % 10);
query_number_and_ctime_elapsed.c | 140 | query_num( sec, 99999 );
query_number_and_ctime_elapsed.c | 141 | query_num( min, 99999 );
query_number_and_ctime_elapsed.c | 142 | query_num( hour, 99999 );
query_number_and_ctime_elapsed.c | 143 | query_num( day, 99999 );
uniq_array.c | 28 | keys(allocate_mapping(arr, 1));
mapping.c | 15 | map_delete(map, key);
alt_move.c | 5 | evaluate(bind((:move_object, dest:), ob));
add_action.c | 4 | log_file(string name, string fmt, mixed *args ...);
add_action.c | 7 | set_this_player(previous_object());
add_action.c | 8 | enable_commands(previous_object());
add_action.c | 12 | set_living_name(name, previous_object());
add_action.c | 19 | _living();
add_action.c | 19 | living(ob);
add_action.c | 32 | eval_cost();
add_action.c | 41 | actions_defined(mixed, mixed, mixed){ return ({});
add_action.c | 44 | error("Illegal use of set_this_player.");
thing_to_string.c | 13 | mapping_to_string( mapping map );
thing_to_string.c | 28 | copy(args);
thing_to_string.c | 31 | array_to_string( args[ i ] );
thing_to_string.c | 35 | mapping_to_string( args[ i ] );
thing_to_string.c | 38 | sprintf( "%O", args[ i ] );
thing_to_string.c | 58 | sprintf( "%O", map );
thing_to_string.c | 60 | keys( map );
thing_to_string.c | 64 | array_to_string( map[ args[ i ] ] ) );
thing_to_string.c | 69 | mapping_to_string( map[ args[ i ] ] ) );
thing_to_string.c | 72 | sprintf( "%O : %O", args[ i ], map[ args[ i ] ] );
amtime.c | 54 | query_num(int num);
amtime.c | 89 | query_am_time(number, format);
amtime.c | 195 | sizeof (toret);
amtime.c | 196 | sscanf (toret[x], "%d %s", tmp_int, tmp_string);
amtime.c | 210 | query_multiple_short (toret);
shuffle.c | 29 | return ({ });
shuffle.c | 32 | sizeof( args );
shuffle.c | 33 | random( i + 1 );
obj_parser.c | 57 | tell_creator(string player, string text, mixed arg ...);
obj_parser.c | 59 | living (object);
obj_parser.c | 130 | if (sizeof(objects) >
obj_parser.c | 143 | set_it_them(context);
obj_parser.c | 210 | this_player();
obj_parser.c | 213 | lower_case(input);
obj_parser.c | 220 | query_it_them();
obj_parser.c | 223 | new(class obj_match_context);
obj_parser.c | 226 | set_it_them(context);
obj_parser.c | 237 | replace_string( input, " and ", ", " );
obj_parser.c | 240 | TRACE( "            Processed input: " + input );
obj_parser.c | 242 | new( class obj_match );
obj_parser.c | 250 | TRACE( "            Splitting input" );
obj_parser.c | 264 | fixup_context(player, omatch->objects, context);
obj_parser.c | 271 | replace_string(input, " and ", ",");
obj_parser.c | 276 | TRACE( "            Splitting input" );
obj_parser.c | 287 | fixup_context(player, omatch->objects, context);
obj_parser.c | 296 | expand_nickname(input);
obj_parser.c | 306 | strsrch(input, " in ", -1);
obj_parser.c | 308 | strsrch(input, " on ", -1);
obj_parser.c | 323 | strsrch( input, " " );
obj_parser.c | 338 | new( class obj_match );
obj_parser.c | 354 | strsrch(input, " ");
obj_parser.c | 378 | sscanf( first_word, "%d", count );
obj_parser.c | 389 | strsrch( input, " ", -1);
obj_parser.c | 397 | strsrch(input, " ");
obj_parser.c | 411 | new( class obj_match );
obj_parser.c | 415 | explode(input, " ");
obj_parser.c | 440 | filter(ob_list, (: $1->query_visible($(player)) :));
obj_parser.c | 454 | parse_match_object( bits, player, context );
obj_parser.c | 474 | if (sizeof(singular_objects) >
obj_parser.c | 487 | random(sizeof(singular_objects));
obj_parser.c | 496 | TRACE( "            No matches" );
obj_parser.c | 509 | random(sizeof(omatch->objects));
obj_parser.c | 527 | if (sizeof(omatch->objects) >
obj_parser.c | 573 | TRACE( "            No matches (living/visible elimination)" );
obj_parser.c | 578 | fixup_context(player, omatch->objects, context);
obj_parser.c | 627 | this_player();
obj_parser.c | 632 | find_match(input, env_list, player);
obj_parser.c | 633 | new(class obj_match);
obj_parser.c | 649 | new( class obj_match );
obj_parser.c | 656 | find_inv_match(input,player);
obj_parser.c | 668 | find_inv_match(input,player);
obj_parser.c | 676 | new( class obj_match );
obj_parser.c | 708 | return ({ });
inside_shorts.c | 9 | query_pocket_mess();
inside_shorts.c | 29 | this_player();
inside_shorts.c | 32 | environment(play);
inside_shorts.c | 34 | replace_string(ob_short(ob), "$ob_short$", ob->the_short());
inside_shorts.c | 38 | environment(ob);
inside_shorts.c | 40 | the_short());
inside_shorts.c | 58 | this_player();
inside_shorts.c | 61 | environment(play);
inside_shorts.c | 63 | replace_string(ob_short(ob), "$ob_short$", ob->a_short());
inside_shorts.c | 67 | environment(ob);
inside_shorts.c | 69 | the_short());
inside_shorts.c | 87 | this_player();
inside_shorts.c | 90 | environment(play);
inside_shorts.c | 92 | replace_string(ob_short(ob), "$ob_short$", ob->one_short());
inside_shorts.c | 96 | environment(ob);
inside_shorts.c | 98 | the_short());
find_other_call_out.c | 25 | evaluate(bind((: find_call_out($(co)) :), ob));
strip_colours.c | 43 | terminal_colour(str, term_cache);
base_name.c | 42 | file_name(val);
unguarded.c | 35 | master();
unguarded.c | 38 | previous_object();
unguarded.c | 41 | apply_unguarded(f, 1);
unguarded.c | 43 | apply_unguarded(f);
pl_to_ob.c | 23 | player_to_object("antiriad");
pl_to_ob.c | 33 | this_player()->expand_nickname(lower_case(str));
pl_to_ob.c | 35 | this_object()->find_player(lower_case(str));
roll_MdN.c | 25 | roll_MdN(3, 6);
roll_MdN.c | 26 | roll_MdN(1, 20);
roll_MdN.c | 33 | random( sides );
mxp.c | 16 | this_player();
mxp.c | 37 | this_player();
mxp.c | 54 | this_player();
mxp.c | 70 | this_player();
mxp.c | 73 | sprintf("%c[6z", 27);
mxp.c | 85 | this_player();
mxp.c | 88 | sprintf("%c[5z", 27);
mxp.c | 101 | this_player();
mxp.c | 104 | sprintf("%c[4z", 27);
mxp.c | 116 | this_player();
sqrt.c | 29 | sqrt(number);
sqrt.c | 32 | typeof(number)+ ".\n");
sqrt.c | 35 | to_int(efun::sqrt(to_float(number)));
dump_socket_status.c | 16 | sprintf("%2d  %|9s  %|8s  %-21s  %-21s\n", item[0], item[1], item[2], item[3], item[4]);
process_value.c | 55 | this_object();
process_value.c | 57 | printf("func:   %O\n", func);
process_value.c | 58 | printf("file:   %O\n", file);
process_value.c | 61 | reg_assoc(arg, pattern, token);
process_value.c | 63 | sizeof(assoc[0]);
process_value.c | 69 | write("process_value: syntax error: " + assoc[0][i] + "\n");
process_value.c | 88 | sizeof(assoc[0]);
process_value.c | 91 | printf("bar:    %O\n", assoc[0][i]);
process_value.c | 94 | printf("int:    %O\n", to_int(assoc[0][i]));
process_value.c | 95 | to_int(assoc[0][i]) });
process_value.c | 99 | printf("string: %O\n", assoc[0][i]);
process_value.c | 104 | printf("OTHER:  %O\n", assoc[0][i]);
process_value.c | 108 | call_other( ob, params );
process_value.c | 120 | explode(s, "@@");
process_value.c | 123 | sizeof(ss);
process_value.c | 124 | process_value(ss[i]);
process_value.c | 128 | implode(ss, "");
snoop_simul.c | 17 | snoop(sno);
snoop_simul.c | 19 | snoop(sno, snop);
tell_creator.c | 16 | find_player(cre);
tell_creator.c | 18 | find_player(cre);
tell_creator.c | 23 | tell_object(cre, sprintf(fmt, args ...));
tell_creator.c | 25 | tell_object(cre, fmt);
find_match.c | 89 | query_strange_inventory(mixed *arr);
find_match.c | 90 | query_simul_efun_id(object ob, mixed *arr);
find_match.c | 91 | query_frac_simul_efun_id(object ob, mixed *arr);
find_match.c | 94 | living(object);
find_match.c | 126 | environment(env);
find_match.c | 143 | filter(obs, (: is_in_me_or_environment($1, $2) :), player);
back_trace.c | 29 | map(call_stack(0), (: $1[1..<3] :));
back_trace.c | 30 | map(call_stack(1), (: file_name($1)[1..] :));
back_trace.c | 31 | call_stack(2);
back_trace.c | 32 | sizeof(progs);
back_trace.c | 39 | query_name();
back_trace.c | 43 | sprintf("%s() in /%s (%s)\n", funcs[i], progs[i], name);
clean.c | 6 | set_name("test");
clean.c | 7 | set_short("test");
clean.c | 12 | init();
clean.c | 13 | add_action("purge","purge");
clean.c | 16 | stat(string str, int|DEFAULT 0);
clean.c | 33 | seteuid("Root");
clean.c | 34 | time();
clean.c | 38 | get_dir("/players/"+let[j]+"/*.o");
clean.c | 39 | sizeof(dir);
clean.c | 41 | stat("/players/"+let[j]+"/"+dir[i]);
clean.c | 42 | if ( sizeof(s) && ((t-(int)s[1]) >
clean.c | 44 | sscanf(dir[i],"%s.o",tmp);
clean.c | 47 | log_file("EXPIRED",dir[i]+" unused for > 60 days, moved\n");
clean.c | 48 | rename("/players/"+let[j]+"/"+dir[i],"/players/OLD/"+dir[i]);
clean.c | 51 | log_file("EXPIRED",dir[i]+" unused for > 60 days, promoted, not moved\n");
clean.c | 56 | clean_library();
clean.c | 57 | clean_bank();
clean.c | 58 | clean_post();
bomb.c | 4 | set_name( "bomb" );
bomb.c | 5 | set_short( "bomb of departure" );
bomb.c | 6 | set_long( "This is a handy creator object to get rid of annoying swine.\n" );
bomb.c | 7 | set_main_plural( "bombs" );
bomb.c | 8 | reset_drop();
bomb.c | 12 | call_out( "detonate", 2 );
bomb.c | 16 | environment( this_object() )->quit();
bomb.c | 17 | call_out( "detonate", 15 );
bomb.c | 21 | init_dynamic_arg( args );
bomb.c | 22 | call_out( "detonate", 15 );
hl_ord.c | 20 | seteuid(geteuid(this_player()));
hl_ord.c | 21 | query_lord_history();
hl_ord.c | 23 | notify_fail("Nobody said anything on the lord channel.\n");
hl_ord.c | 24 | write("The lord channel history is:\n");
hl_ord.c | 25 | sizeof(hist);
hl_ord.c | 26 | if (sizeof(hist[i]) >
hl_ord.c | 43 | destruct(this_object());
hl_ord.c | 47 | dest_me();
hl_ord.c | 51 | dest_me();
cleanup.c | 18 | write("Ok.\n");
cleanup.c | 20 | notify_fail("Sorry.\n");
rcsc_reate.c | 58 | notify_fail("rcscreate: No arguments.\n");
rcsc_reate.c | 61 | notify_fail("rcscreate: no such file "+arg+".\n");
rcsc_reate.c | 63 | explode(arg, " ");
rcsc_reate.c | 78 | this_player()->get_files(bit);
rcsc_reate.c | 84 | explode(file, "/");
rcsc_reate.c | 92 | if (sizeof(tmpbits) >
rcsc_reate.c | 99 | write("No directory "+dir+", creating one.\n");
rcsc_reate.c | 100 | mkdir(dir);
rcsc_reate.c | 105 | read_file(file);
rcsc_reate.c | 108 | replace_string(tmp, "/*  -*- LPC -*-  */\n", "");
rcsc_reate.c | 109 | replace_string(tmp, "/* -*- LPC -*- */\n", "");
rcsc_reate.c | 130 | replace_string( tmp, "#  -*- LPC -*-  #\n", "" );
rcsc_reate.c | 131 | replace_string( tmp, "# -*- LPC -*- #\n", "" );
rcsc_reate.c | 148 | notify_fail("You do not have write access to "+file+"\n");
rcsc_reate.c | 157 | printf("Enter a comment.\n");
rcsc_reate.c | 159 | this_player()->do_edit(0, "do_ci");
rcsc_reate.c | 165 | allocate(4);
rcsc_reate.c | 168 | printf("No comment given, aborting.\n");
rcsc_reate.c | 172 | this_player()->query_name();
rcsc_reate.c | 176 | explode(cmd_str, " ");
rcsc_reate.c | 178 | printf("CMD: %O\n", cmd);
rcsc_reate.c | 183 | this_player();
rcsc_reate.c | 189 | replace_string(mess, "/home/atuin/lib", "");
rcsc_reate.c | 194 | tell_object(TP, "rcscreate: Write_call_back called.\n");
rcsc_reate.c | 200 | more_string(RET);
rcsc_reate.c | 202 | tell_object(TP, "rcscreate completed.\n");
rcsc_reate.c | 204 | map_delete(ret, fd);
rcsc_reate.c | 205 | map_delete(globals, fd);
rcsi_n.c | 30 | notify_fail("rcsin: No arguments.\n");
rcsi_n.c | 33 | explode(arg, " ");
rcsi_n.c | 47 | explode(file, "/");
rcsi_n.c | 48 | if(file_size("/" + implode(tmp[0..<2], "/") + "/RCS/" + tmp[<1]+",v") >
rcsi_n.c | 58 | file_name(things[0]);
rcsi_n.c | 59 | sscanf(file, "%s#%*d", file);
rcsi_n.c | 63 | explode(file, "/");
rcsi_n.c | 64 | if(file_size("/" + implode(tmp[0..<2], "/") + "/RCS/" + tmp[<1]+",v") >
rcsi_n.c | 78 | query_multiple_short(notin) + ".\n");
rcsi_n.c | 80 | notify_fail("rcsin: no such file "+arg+".\n");
rcsi_n.c | 84 | write("rcsin: file not in RCS " + query_multiple_short(notin) + ".\n");
rcsi_n.c | 86 | printf("Enter a comment.\n");
rcsi_n.c | 88 | this_player()->do_edit(0, "do_ci");
rcsi_n.c | 94 | allocate(3);
rcsi_n.c | 97 | printf("No comment given, aborting.\n");
rcsi_n.c | 101 | this_player()->query_name();
rcsi_n.c | 104 | explode(CMDS, " ");
rcsi_n.c | 108 | printf("CMD: %O\n", cmd);
rcsi_n.c | 113 | this_player();
rcsi_n.c | 120 | replace(mess, "/home/atuin/lib", "");
rcsi_n.c | 125 | tell_object(TP, "rcsin: Write_call_back called.\n");
rcsi_n.c | 134 | more_string(RET);
rcsi_n.c | 135 | explode(RET, "\n");
rcsi_n.c | 139 | sscanf(file_stuff[i], "%*s  <--  %s", file);
rcsi_n.c | 140 | remove_lock(TP, file);
rcsi_n.c | 145 | explode(file, "/");
rcsi_n.c | 146 | if(sizeof(bits) >
rcsi_n.c | 148 | find_object("/d/" + bits[1]+"/master");
rcsi_n.c | 153 | query_changelog(file);
rcsi_n.c | 165 | log_file(lname, log);
rcsi_n.c | 177 | tell_object(TP, "rcsin completed.\n");
rcsi_n.c | 180 | map_delete(ret, fd);
rcsi_n.c | 181 | map_delete(globals, fd);
rcsi_n.c | 182 | map_delete(comments, TP);
lo_ad.c | 13 | notify_fail("Load what?\n");
lo_ad.c | 15 | this_player()->get_cfiles(str);
lo_ad.c | 17 | notify_fail("No such object.\n");
lo_ad.c | 27 | sprintf("Failed to load %s, error: %s", fname, err);
lo_ad.c | 42 | sprintf("$I$5=$C$Loaded %s.\n", query_multiple_short(succ));
lo_ad.c | 44 | this_player()->show_message("$P$Load$P$" + ret);
du.c | 19 | get_dir(path+"*");
du.c | 20 | this_player()] += sizeof(files);
du.c | 21 | sizeof(files);
du.c | 25 | file_size(path+files[i]);
du.c | 29 | printf("%-30s %5d\n", path+files[i], (size = rec_du(path+files[i])));
du.c | 42 | printf( "%-30s %5d\n", "Total:", rec_du( path ) );
du.c | 44 | printf("Note: count truncated due to file limit\n");
du.c | 54 | cmd( $4[0] ) :) });
cp2.c | 27 | notify_fail("Usage : cp file [file|dir...]\n");
cp2.c | 31 | explode(str, " ");
cp2.c | 34 | filter(filenames, (:$1[<1] != '.':));
cp2.c | 37 | notify_fail("Usage : cp file [file|dir...]\n");
cp2.c | 41 | this_player()->get_path(dest);
cp2.c | 44 | write("No destination\n");
cp2.c | 48 | sizeof(filenames);
cp2.c | 52 | notify_fail("Permission denied.\n");
cp2.c | 55 | write("No such file : " + str + "\n");
cp2.c | 59 | file_size(dest);
cp2.c | 62 | write("File exists : " + dest + "\n");
cp2.c | 72 | write( src + " is unreadable.\n" );
cp2.c | 76 | write( dest + " is unreadable.\n" );
cp2.c | 85 | write( "Unable to copy " + src + " to " + dest + "\n" );
cp2.c | 90 | write( "Ok.\n" );
compile.c | 18 | this_player()->get_files(str);
compile.c | 21 | notify_fail("Syntax: compile <files>\n");
compile.c | 25 | catch(generate_source(bit));
compile.c | 27 | printf("Compiled %s Ok.\n", bit);
compile.c | 29 | printf("Error compiling %s: %s\n", bit, error_str);
compile.c | 32 | catch(generate_source(bits));
compile.c | 34 | printf("Compiled %@s OK.\n", bits);
compile.c | 36 | printf("Error compiling %@s: %s\n", bits, error_str);
di_scard.c | 17 | ask_discard(object *obs);
di_scard.c | 23 | this_player()->get_cfiles(str);
di_scard.c | 27 | add_failed_mess("No such object: " + str + "\n");
di_scard.c | 32 | find_object(str);
di_scard.c | 34 | printf("%s is not loaded.\n", str);
di_scard.c | 37 | catch(discard_obj->dest_me());
di_scard.c | 38 | this_player()->handle_error(err, "dest_me");
di_scard.c | 44 | ask_discard(no_dis);
di_scard.c | 47 | write("Ok.\n");
di_scard.c | 53 | printf("Nothing left to be discarded.\n");
di_scard.c | 58 | desc_object(obs[0]));
di_scard.c | 59 | input_to("no_discard", 0, obs);
di_scard.c | 65 | desc_object(obs[0]);
di_scard.c | 67 | catch(obs[0]->dwep());
di_scard.c | 68 | this_player()->handle_error(err, "DWEP");
di_scard.c | 70 | printf("%s REALLY doesn't want to be discarded.\n", name);
di_scard.c | 71 | catch(destruct(obs[0]));
di_scard.c | 73 | printf("%s didn't destruct.\n", name);
di_scard.c | 78 | printf("%s discarded.\n", name);
di_scard.c | 79 | ask_discard(obs[1..]);
di_scard.c | 83 | return ({ "<string>", (: cmd($4[0]) :) });
ls.c | 33 | ls(string str, int mask);
ls.c | 34 | check_dots(mixed arg);
ls.c | 43 | this_player()->expand_nickname( str );
ls.c | 46 | explode(str, " ") - ({"", 0});
ls.c | 48 | strlen(bits[0]);
ls.c | 77 | write("ls version 2.6 (c) 1995-1998 Turrican@Discworld\n");
ls.c | 99 | delete(bits, 0, 1);
ls.c | 101 | implode(bits, " ");
ls.c | 104 | this_player()->query_path();
ls.c | 106 | this_player()->get_path(str);
ls.c | 109 | notify_fail("No current directory.\n");
ls.c | 112 | ls(path, mask);
ls.c | 114 | notify_fail("$I$0=ls: "+ str + ": Permission denied.\n");
ls.c | 168 | get_dir(path, -1);
ls.c | 172 | filter(direc, (: check_dots($1) :));
ls.c | 176 | printf("No files.\n");
ls.c | 181 | printf("No files.\n");
ls.c | 183 | printf("ls: %s: No such file or directory.\n", str);
ls.c | 192 | explode(path, "/");
ls.c | 199 | allocate(sizeof(direc));
ls.c | 200 | sizeof(direc);
ls.c | 209 | implode(direc, "\n"));
ls.c | 210 | explode(bong, "\n");
ls.c | 240 | implode(bing, "\n");
ls.c | 246 | sizeof(direc);
ls.c | 250 | implode(bing, ""));
ls.c | 259 | sprintf(" %s%s%s", "%^GREEN%^", direc[i][0], "%^RESET%^"));
ls.c | 262 | sprintf(" %s%s%s", "%^MAGENTA%^", direc[i][0], "%^RESET%^"));
ls.c | 266 | sprintf(" %s%s", "%^RESET%^", direc[i][0]));
ls.c | 285 | get_dir( str, -1 );
ls.c | 287 | filter_array(direc, (: check_dots($1) :));
ls.c | 297 | allocate(size);
ls.c | 298 | allocate(size);
ls.c | 300 | strsrch(str, '/', -1);
ls.c | 305 | time();
ls.c | 307 | reset_eval_cost();
ls.c | 309 | ctime((direc[i])[2]);
ls.c | 313 | sprintf("%s  %s", tmp2[4..9], tmp2[20..23]);
ls.c | 342 | stat(str + (direc[i])[0]);
ls.c | 344 | sizeof(stats)) >
ls.c | 361 | is_autodoc_file(str + direc[i][0])?"@":"")));
ls.c | 363 | implode(bit, "\n");
ls.c | 366 | this_player()->more_string( bong, str, 1 );
rcsf_orce.c | 40 | allocate(3);
rcsf_orce.c | 49 | notify_fail("rcsforce: No arguments.\n");
rcsf_orce.c | 52 | explode(arg, " ");
rcsf_orce.c | 63 | this_player()->get_files(bit);
rcsf_orce.c | 72 | notify_fail("rcsforce: no such file " + arg + ".\n");
rcsf_orce.c | 76 | explode(file, "/");
rcsf_orce.c | 81 | notify_fail("That file is not in RCS.\n");
rcsf_orce.c | 85 | notify_fail("That file is not locked.\n");
rcsf_orce.c | 87 | explode(read_file(file, 5, 1), ":");
rcsf_orce.c | 97 | explode(file, "/");
rcsf_orce.c | 110 | this_player()->query_name();
rcsf_orce.c | 111 | explode(arg, " ");
rcsf_orce.c | 114 | printf("CMD: %O\n", cmd);
rcsf_orce.c | 118 | printf("Edit mail? (y/[n]): ");
rcsf_orce.c | 119 | input_to("edit_mail", 0, new (class rcsforce_args, player: this_player(), cmd: cmd, locker: locker, filen:filen));
rcsf_orce.c | 128 | this_player();
rcsf_orce.c | 139 | printf("No.\n");
rcsf_orce.c | 140 | do_ci(0, args);
rcsf_orce.c | 145 | printf("Invalid choice. Please answer y or n. (y/[n]): ");
rcsf_orce.c | 146 | input_to("edit_mail", 0, args);
rcsf_orce.c | 148 | printf("Yes. Entering editor.\n");
rcsf_orce.c | 149 | do_edit(0, "do_ci", this_object(), 0, args);
rcsf_orce.c | 165 | strlen(text) ? "\n" + text : ""));
rcsf_orce.c | 180 | replace(mess, "/home/atuin/lib", "");
rcsf_orce.c | 186 | tell_object(TP, "rcsforce: write_call_back() called.\n");
rcsf_orce.c | 196 | more_string(RET);
rcsf_orce.c | 197 | explode(RET, "\n");
rcsf_orce.c | 201 | sscanf(file_stuff[i], "%*s  <--  %s", file);
rcsf_orce.c | 202 | remove_lock(LCK, file);
rcsf_orce.c | 213 | tell_object(TP, "rcsforce completed.\n");
rcsf_orce.c | 216 | map_delete(_ret, fd);
rcsf_orce.c | 217 | map_delete(_globals, fd);
rcsf_orce.c | 218 | map_delete(_lockers, fd);
cp.c | 28 | notify_fail("Usage : cp file [file|dir...]\n");
cp.c | 29 | explode(str, " ");
cp.c | 32 | filter(filenames, (:$1[<1] != '.':));
cp.c | 34 | notify_fail("Usage : cp file [file|dir...]\n");
cp.c | 38 | this_player()->get_path(dest);
cp.c | 40 | write("No destination\n");
cp.c | 44 | sizeof(filenames);
cp.c | 47 | notify_fail("Permission denied.\n");
cp.c | 48 | file_size(dest);
cp.c | 52 | explode(str, "/");
cp.c | 53 | file_size(dest + "/" + names[sizeof(names) - 1]);
cp.c | 55 | write("file exists " + dest + "/" + names[sizeof(names) - 1] + "\n");
cp.c | 61 | write("File exists : " + dest + "\n");
cp.c | 68 | write(str + " copied to " + dstr + ".\n");
cp.c | 71 | write(str + " is unreadable.\n");
cp.c | 74 | write(dstr + " is unreadable.\n");
cp.c | 77 | write("I/O error copying " + str + " to " + dstr + ".\n");
printe_rrors.c | 15 | finish_details(string player, int result, mixed results);
printe_rrors.c | 31 | this_player()->query_name();
printe_rrors.c | 32 | write_file("/w/" + player + "/print_errors.txt", "", 1);
printe_rrors.c | 36 | new(class error_query);
printe_rrors.c | 42 | finish_details($(player), $1, $2) :));
printe_rrors.c | 58 | sprintf("Filename       : %s\n", error->summary->filename);
printe_rrors.c | 59 | sprintf("Directory      : %s\n", error->summary->directory);
printe_rrors.c | 60 | sprintf("Made by        : %s\n", capitalize(error->summary->reporter));
printe_rrors.c | 61 | sprintf("at             : %s\n\n", ctime(error->summary->entry_date));
printe_rrors.c | 63 | sprintf("Forwarded by   : %s\n", capitalize(forward->forwarder));
printe_rrors.c | 64 | sprintf("from           : %s\n", forward->old_directory);
printe_rrors.c | 65 | sprintf("at             : %s\n", ctime(forward->date));
printe_rrors.c | 72 | sprintf("\nComment by     : %s\n", capitalize(comment->commenter));
printe_rrors.c | 73 | sprintf(  "at             : %s\n", ctime(comment->date));
printe_rrors.c | 86 | tell_creator(player, "Failed to return the results " + results);
printe_rrors.c | 91 | get_bug(detail);
printe_rrors.c | 92 | unguarded( (: write_file("/w/" + $(player) + "/print_errors.txt", $(str)) :) );
printe_rrors.c | 94 | tell_creator(player, "Finished gathering the details.\n");
upd_ate.c | 22 | load_object("room/void");
upd_ate.c | 24 | notify_fail("The void is lost!\n");
upd_ate.c | 32 | write("Can't update interactive object: " + ob->query_name() + "\n");
upd_ate.c | 35 | environment(ob);
upd_ate.c | 36 | all_inventory(ob);
upd_ate.c | 38 | sizeof(invent);
upd_ate.c | 41 | move(rsv);
upd_ate.c | 43 | delete(invent, i--, 1);
upd_ate.c | 47 | file_name(ob);
upd_ate.c | 49 | query_static_auto_load();
upd_ate.c | 50 | query_dynamic_auto_load();
upd_ate.c | 51 | dest_me();
upd_ate.c | 53 | dwep();
upd_ate.c | 56 | destruct(ob);
upd_ate.c | 59 | notify_fail("I can't seem to destruct the old object.\n");
upd_ate.c | 61 | load_object(pname);
upd_ate.c | 63 | init_static_arg(static_arg);
upd_ate.c | 66 | init_dynamic_arg(dynamic_arg);
upd_ate.c | 69 | find_object(pname);
upd_ate.c | 70 | query_static_auto_load();
upd_ate.c | 71 | query_dynamic_auto_load();
upd_ate.c | 73 | dest_me();
upd_ate.c | 76 | dwep();
upd_ate.c | 79 | destruct(loaded);
upd_ate.c | 82 | clone_object(pname);
upd_ate.c | 84 | dest_me();
upd_ate.c | 86 | dwep();
upd_ate.c | 89 | destruct(ob);
upd_ate.c | 93 | init_static_arg(static_arg);
upd_ate.c | 96 | init_dynamic_arg(dynamic_arg);
upd_ate.c | 102 | printf("I seem to have lost your object.\n");
upd_ate.c | 106 | sizeof(invent);
upd_ate.c | 108 | move(ob);
upd_ate.c | 113 | move(env);
upd_ate.c | 115 | printf("Updated %s.\n", WIZ_PRESENT->desc_f_object(ob));
upd_ate.c | 129 | notify_fail("No such object.\n");
upd_ate.c | 132 | file_name(environment(this_player()));
upd_ate.c | 138 | base_name(str);
upd_ate.c | 142 | this_player()->get_cfiles(str);
upd_ate.c | 145 | wiz_present(tring, this_player());
upd_ate.c | 147 | notify_fail("No matching objects/filenames\n");
upd_ate.c | 150 | do_update(val);
upd_ate.c | 153 | sizeof(filenames);
upd_ate.c | 155 | find_object(str);
upd_ate.c | 157 | if (file_size(str) >
upd_ate.c | 159 | printf("Loaded %s\n", str);
upd_ate.c | 161 | printf("Failed to load %s, error: %s\n", str, err);
upd_ate.c | 164 | wiz_present(tring, this_player());
upd_ate.c | 174 | do_update(obs);
indent.c | 24 | notify_fail("rcsin: No arguments.\n");
indent.c | 27 | explode(arg, " ");
indent.c | 45 | file_name(things[0]);
indent.c | 46 | sscanf(file, "%s#%*d", file);
indent.c | 58 | notify_fail("rcsin: no such file "+arg+".\n");
indent.c | 65 | this_player();
indent.c | 72 | replace(mess, "/home/atuin/lib", "");
indent.c | 77 | tell_object(TP, "rcsin: Write_call_back called.\n");
indent.c | 85 | more_string(RET);
indent.c | 86 | explode(RET, "\n");
indent.c | 90 | sscanf(file_stuff[i], "%*s  <--  %s", file);
indent.c | 91 | remove_lock(TP, file);
indent.c | 105 | tell_object(TP, "rcsin completed.\n");
indent.c | 108 | map_delete(ret, fd);
indent.c | 109 | map_delete(globals, fd);
locks.c | 6 | get_dir(this_player()->query_current_path()+"/");
locks.c | 7 | write("locked files in this directory:\n");
locks.c | 10 | explode(path, "/");
locks.c | 13 | if(sizeof(bits) >
locks.c | 22 | if(file_size(rcspath) >
locks.c | 23 | read_file(rcspath, 4, 1);
locks.c | 26 | read_file(rcspath, 5, 1);
locks.c | 27 | sscanf(tmp, "\t%s:", lockname);
locks.c | 28 | printf("%s locked by %s\n", path, lockname);
;_.c | 25 | init_expr(str);
;_.c | 26 | expr();
;_.c | 27 | printf("Returns: %O\n", ((pointerp(res) && sizeof(res) == 1)?res[0]:res));
;_.c | 28 | finish_expr();
find.c | 16 | file_exists(string str) { return (file_size(str) > -1);
find.c | 20 | this_player();
find.c | 26 | notify_fail("Usage: find [-a] [-d] [-n] function() <object(s)>\n");
find.c | 45 | notify_fail("Unknown option '"+ s +"'.\n");
find.c | 52 | wiz_present(thing, user);
find.c | 55 | notify_fail("Can't find " + thing + ".\n");
find.c | 60 | sizeof(obs);
find.c | 63 | find_object($1) :));
find.c | 65 | sizeof(list);
find.c | 81 | base_name(fish) });
find.c | 98 | if (sizeof(fnd) >
find.c | 109 | notify_fail("The file for "+ thing +" doesn't exist.\n");
find.c | 111 | read_file(ping);
find.c | 114 | notify_fail("Could not read file.\n");
find.c | 126 | sizeof(explode(implode(tmp[0][0..j], ""), "\n"));
find.c | 137 | more_string(sprintf("%s%s", s, tmp), 0, 1);
find.c | 143 | implode(tmp[0][j-1..j+1], "");
find.c | 153 | more_string(s, 0, 1);
rcso_ut.c | 23 | notify_fail("rcsout: No arguments.\n");
rcso_ut.c | 26 | explode(arg, " ");
rcso_ut.c | 45 | uniq_array(map(things, (: base_name($1) :)));
rcso_ut.c | 46 | sizeof(files);
rcso_ut.c | 53 | this_player()->get_files(bit);
rcso_ut.c | 56 | this_player()->get_path(bit);
rcso_ut.c | 61 | notify_fail("You do not have write access to "+file+"\n");
rcso_ut.c | 69 | notify_fail("You do not have write access to "+file+"\n");
rcso_ut.c | 85 | printf("CMD: %s\n", cmd);
rcso_ut.c | 90 | this_player();
rcso_ut.c | 96 | replace(mess, "/home/atuin/lib", "");
rcso_ut.c | 101 | tell_object(TP, "rcsout: Whoops! fatal error.\n");
rcso_ut.c | 109 | more_string(RET);
rcso_ut.c | 110 | explode(RET, "\n");
rcso_ut.c | 114 | sscanf(file_stuff[i], "%*s  -->  %s", file);
rcso_ut.c | 115 | add_lock(TP, file);
rcso_ut.c | 126 | tell_object(TP, "rcsout completed.\n");
rcso_ut.c | 128 | map_delete(ret, fd);
rcso_ut.c | 129 | map_delete(globals, fd);
dup_licate.c | 17 | sizeof(ov);
dup_licate.c | 21 | file_name(ov[i]);
dup_licate.c | 24 | write("Can't duplicate " + ov[i]->short() + " (not a clone).\n");
dup_licate.c | 27 | query_static_auto_load();
dup_licate.c | 28 | query_dynamic_auto_load();
dup_licate.c | 30 | clone_object(pname);
dup_licate.c | 34 | init_static_arg(copy(static_arg));
dup_licate.c | 37 | init_dynamic_arg(copy(dynamic_arg));
dup_licate.c | 40 | add_property("cloned by", this_player()->query_name());
dup_licate.c | 44 | printf("I seem to have lost your object.\n");
dup_licate.c | 49 | write(ov[i]->short() + " duplicated and put in you.\n");
dup_licate.c | 51 | write(ov[i]->short() + " duplicated and put in here.\n");
dup_licate.c | 53 | write(ov[i]->short() + " duplicated and put in /room/broken.\n");
dup_licate.c | 56 | write("Couldn't find anyplace to put " + ov[i]->short() + "!\n");
dup_licate.c | 57 | move("/room/rubbish");
dup_licate.c | 66 | notify_fail("No such object.\n");
dup_licate.c | 67 | wiz_present(str, this_player());
dup_licate.c | 69 | notify_fail("No matching objects\n");
dup_licate.c | 72 | do_duplicate(val);
rcsco_mment.c | 29 | notify_fail("rcscomment: No arguments.\n");
rcsco_mment.c | 32 | explode(arg, " ");
rcsco_mment.c | 42 | this_player()->get_files(bit);
rcsco_mment.c | 50 | file_name(things[0]);
rcsco_mment.c | 51 | sscanf(file, "%s#%*d", file);
rcsco_mment.c | 62 | notify_fail("rcscomment: no such file "+arg+".\n");
rcsco_mment.c | 65 | printf("Enter a revision number: ");
rcsco_mment.c | 73 | printf("No revision given, aborting.\n");
rcsco_mment.c | 78 | printf("Enter a comment.\n");
rcsco_mment.c | 79 | do_edit(0, "do_comment", 0, 0, args);
rcsco_mment.c | 84 | allocate(2);
rcsco_mment.c | 87 | printf("No comment given, aborting.\n");
rcsco_mment.c | 91 | sprintf("-w%s", args->player->query_name());
rcsco_mment.c | 92 | sprintf("-m%s:%s", args->revision, comment);
rcsco_mment.c | 93 | explode(args->arg, " ");
rcsco_mment.c | 95 | printf("CMD: %O\n", cmd);
rcsco_mment.c | 105 | replace(mess, "/home/atuin/lib", "");
rcsco_mment.c | 110 | tell_object(TP, "rcscomment: write_call_back() called.\n");
rcsco_mment.c | 115 | more_string(RET);
rcsco_mment.c | 117 | tell_object(TP, "rcscomment completed.\n");
rcsco_mment.c | 120 | map_delete(ret, fd);
rcsco_mment.c | 121 | map_delete(globals, fd);
rcsd_iff.c | 22 | notify_fail("rcsdiff: No arguments.\n");
rcsd_iff.c | 25 | explode(arg, " ");
rcsd_iff.c | 43 | file_name(things[0]);
rcsd_iff.c | 44 | sscanf(file, "%s#%*d", file);
rcsd_iff.c | 55 | notify_fail("No such file: "+arg+"\n");
rcsd_iff.c | 59 | printf("CMD: %s\n", cmd);
rcsd_iff.c | 64 | this_player();
rcsd_iff.c | 70 | replace(mess, "/home/atuin/lib", "");
rcsd_iff.c | 75 | tell_object(TP, "rcsdiff: Whoops! fatal error.\n");
rcsd_iff.c | 80 | more_string(RET);
rcsd_iff.c | 82 | tell_object(TP, "rcsdiff completed.\n");
rcsd_iff.c | 83 | map_delete(ret, fd);
rcsd_iff.c | 84 | map_delete(globals, fd);
cat.c | 28 | notify_fail("Cat what file ?\n");
cat.c | 32 | this_player()->get_files(str);
cat.c | 34 | notify_fail(str + ": No such file.\n");
cat.c | 37 | sizeof(filenames);
cat.c | 38 | if(sizeof(filenames) >
cat.c | 39 | write("FILE : " + filenames[loop] + "\n");
cat.c | 43 | read_file( filenames[loop] );
cat.c | 45 | explode( str , "\n" );
cat.c | 46 | sizeof( sprintf( "%d", sizeof( lines ) ) );
cat.c | 48 | sizeof( lines );
cat.c | 49 | sprintf( "%*d: %s", w, (i+1), lines[i] );
cat.c | 50 | printf("%s\n", implode(lines, "\n"));
cat.c | 52 | write(filenames[loop] + ": No such file.\n");
cat.c | 55 | cat(filenames[loop]);
cat.c | 62 | cmd($4[0], 0) :) });
diff.c | 32 | explode(arg, " ");
diff.c | 43 | notify_fail("Your wombles just expired.\n");
diff.c | 45 | notify_fail("Permission denied: " + bit + " .\n");
diff.c | 48 | notify_fail("Can't use diff on directories.\n");
diff.c | 63 | notify_fail("Can't compare more than two files");
diff.c | 65 | if (num == 3 && file_size(last) >
diff.c | 66 | notify_fail("File " + last + " exists.\n");
diff.c | 71 | notify_fail("diff failed somehow.\n");
diff.c | 73 | this_player();
diff.c | 82 | replace(mess, "/usr/bin/", "");
diff.c | 87 | tell_object(TP, "diff: Whoops! fatal error.\n");
diff.c | 92 | write_file(FILE, RET);
diff.c | 96 | more_string(RET);
diff.c | 98 | map_delete(ret, fd);
diff.c | 99 | map_delete(files, fd);
diff.c | 100 | map_delete(globals, fd);
finde_rrors.c | 26 | tell_creator( player, "%O, %O\n", status, data );
finde_rrors.c | 53 | sort_array( keys( errors ), 1 );
finde_rrors.c | 68 | tell_object( player, txt );
finde_rrors.c | 90 | tell_creator( player, "%O, %O\n", status, data );
finde_rrors.c | 97 | start_error_command( player, data[ 0 ][ "Directory" ] );
finde_rrors.c | 98 | errors_in_dir(data[0]["Directory"], 0);
finde_rrors.c | 103 | query_next_dir( this_player(), (: finished_next_dir :) );
finde_rrors.c | 112 | query_directories( this_player()->query_name() );
finde_rrors.c | 116 | implode( dirs, "\n" ) + "\n" );
finde_rrors.c | 117 | add_succeeded_mess( "" );
finde_rrors.c | 121 | add_failed_mess( "No directories have been added to finderrors.\n" );
finde_rrors.c | 133 | add_failed_mess( directory + " is not a directory.\n" );
finde_rrors.c | 137 | add_directory( this_player(), directory, recursive );
finde_rrors.c | 144 | remove_directory( this_player(), directory, recursive );
finde_rrors.c | 147 | add_succeeded_mess( "Directory removed successfully.\n" );
rcsr_elease.c | 22 | notify_fail("rcsrelease: No arguments.\n");
rcsr_elease.c | 24 | notify_fail("No such file: "+arg+"\n");
rcsr_elease.c | 26 | explode(arg, " ");
rcsr_elease.c | 43 | notify_fail("You do not have write access to "+file+"\n");
rcsr_elease.c | 47 | file_name(things[0]);
rcsr_elease.c | 48 | sscanf(file, "%s#%*d", file);
rcsr_elease.c | 56 | notify_fail("You do not have write access to "+file+"\n");
rcsr_elease.c | 66 | printf("CMD: %s\n", cmd);
rcsr_elease.c | 71 | this_player();
rcsr_elease.c | 77 | replace(mess, "/home/atuin/lib", "");
rcsr_elease.c | 82 | tell_object(TP, "rcsrelease: Whoops! fatal error.\n");
rcsr_elease.c | 90 | more_string(RET);
rcsr_elease.c | 91 | explode(RET, "\n");
rcsr_elease.c | 95 | sscanf(file_stuff[i], "%*s  -->  %s", file);
rcsr_elease.c | 96 | remove_lock(TP, file);
rcsr_elease.c | 111 | tell_object(TP, "rcsrelease completed.\n");
rcsr_elease.c | 113 | map_delete(ret, fd);
rcsr_elease.c | 114 | map_delete(globals, fd);
rcsbatchin.c | 20 | ask_about_file(object player);
rcsbatchin.c | 21 | get_answer(string answer, object player);
rcsbatchin.c | 22 | start_input(object player);
rcsbatchin.c | 25 | this_player()] = RCS_HANDLER->query_locks(this_player());
rcsbatchin.c | 27 | printf("You don't have any files locked.\n");
rcsbatchin.c | 28 | map_delete(locks, this_player());
rcsbatchin.c | 32 | ask_about_file(this_player());
rcsbatchin.c | 40 | call_out("check_complete", 1, player);
rcsbatchin.c | 42 | map_delete(completed, player);
rcsbatchin.c | 43 | ask_about_file(player);
rcsbatchin.c | 51 | sprintf("Check in %s? (y/N/q)\n", locks[player][0]);
rcsbatchin.c | 52 | tell_object(player, tmp);
rcsbatchin.c | 53 | input_to("get_answer", 0, player);
rcsbatchin.c | 59 | unguarded((:input_to((: get_answer :), 0, $(player)) :));
rcsbatchin.c | 68 | explode(locks[player][0], "/");
rcsbatchin.c | 73 | tell_object(player, "Enter a comment.\n");
rcsbatchin.c | 75 | do_edit("", "do_ci", this_object(), "", player);
rcsbatchin.c | 79 | sprintf("ERROR: No RCS file for %s\n", locks[player][0]);
rcsbatchin.c | 80 | tell_object(player, arg);
rcsbatchin.c | 81 | if (sizeof(locks[player]) >
rcsbatchin.c | 83 | ask_about_file(player);
rcsbatchin.c | 86 | map_delete(locks, player);
rcsbatchin.c | 90 | map_delete(locks, player);
rcsbatchin.c | 93 | if (sizeof(locks[player]) >
rcsbatchin.c | 95 | ask_about_file(player);
rcsbatchin.c | 98 | map_delete(locks, player);
rcsbatchin.c | 105 | allocate(3);
rcsbatchin.c | 108 | tell_object(player, "No comment given, skipping.\n");
rcsbatchin.c | 109 | if (sizeof(locks[player]) >
rcsbatchin.c | 111 | ask_about_file(player);
rcsbatchin.c | 114 | map_delete(locks, player);
rcsbatchin.c | 117 | query_name();
rcsbatchin.c | 120 | explode(CMDS, " ");
rcsbatchin.c | 123 | tell_object(player, "CMD: %O\n", cmd);
rcsbatchin.c | 132 | if (sizeof(locks[player]) >
rcsbatchin.c | 134 | tell_object(player, "Checking in... please wait\n");
rcsbatchin.c | 135 | call_out("check_complete", 1, player);
rcsbatchin.c | 145 | replace(mess, "/home/atuin/lib", "");
rcsbatchin.c | 151 | tell_object(TP, "rcsin: Write_call_back called.\n");
rcsbatchin.c | 165 | more_string(RET);
rcsbatchin.c | 166 | explode(RET, "\n");
rcsbatchin.c | 170 | sscanf(file_stuff[i], "%*s  <--  %s", file);
rcsbatchin.c | 171 | remove_lock(TP, file);
rcsbatchin.c | 176 | explode(file, "/");
rcsbatchin.c | 177 | if (sizeof(bits) >
rcsbatchin.c | 181 | find_object("/d/" + bits[1] + "/master");
rcsbatchin.c | 186 | query_changelog(file);
rcsbatchin.c | 199 | log_file(lname, log);
rcsbatchin.c | 212 | tell_object(TP, "rcsin completed.\n");
rcsbatchin.c | 214 | if (sizeof(locks[TP]) >
rcsbatchin.c | 219 | map_delete(completed, TP);
rcsbatchin.c | 220 | map_delete(locks, TP);
rcsbatchin.c | 223 | map_delete(comments, TP);
rcsbatchin.c | 224 | map_delete(ret, fd);
rcsbatchin.c | 225 | map_delete(globals, fd);
gr_ep.c | 34 | master()->valid_read(file, this_player()->query_name(), "cat");
gr_ep.c | 47 | explode(arg, " ");
gr_ep.c | 67 | this_player()->get_files(bit);
gr_ep.c | 68 | implode(files, (:check_perms:), ({}));
gr_ep.c | 81 | notify_fail("Grep needs at least one file.\n");
gr_ep.c | 84 | notify_fail("grep failed somehow.\n");
gr_ep.c | 86 | this_player();
gr_ep.c | 89 | write("grep started.\n");
gr_ep.c | 94 | replace(mess, "/usr/bin/", "");
gr_ep.c | 99 | tell_object(TP, "grep: Whoops! fatal error.\n");
gr_ep.c | 104 | more_string(RET);
gr_ep.c | 106 | tell_object(TP, "grep finished.\n");
gr_ep.c | 107 | map_delete(ret, fd);
gr_ep.c | 108 | map_delete(globals, fd);
banish.c | 52 | notify_fail("Syntax : banish <name> <reason>\n");
banish.c | 57 | lower_case(str);
banish.c | 62 | if (file_size("/banish/"+str[0..0]+"/"+str+".o") >
banish.c | 64 | notify_fail("That name is already banished.\n");
banish.c | 67 | remove_cache_entry(str);
banish.c | 74 | unguarded((: write_file, "/banish/"+str[0..0]+"/"+str+".o", ban :));
banish.c | 75 | write(str + " banished.\n");
banish.c | 80 | return ({ "", (: cmd(0) :), "<string>", (: cmd($4[0]) :) });
ca_ll.c | 41 | notify_fail("USAGE : call [obvar=]lfun(arg[,arg[,arg...]]) object[s]\n");
ca_ll.c | 45 | sscanf(str, "%s=%s", obvarname, str);
ca_ll.c | 46 | explode("&"+str+"&", ")");
ca_ll.c | 49 | replace(s1[1..], " ", "");
ca_ll.c | 51 | parse_args(implode(s, ")"), ")");
ca_ll.c | 57 | notify_fail("Can't find object "+os+".\n");
ca_ll.c | 58 | wiz_present(os, this_player());
ca_ll.c | 60 | filter( ov, (: reference_allowed( $1, $( this_player() ) ) :) );
ca_ll.c | 64 | if (sizeof(argv) < 6) argv += allocate(6 - sizeof(argv));
ca_ll.c | 72 | if (!file) file = function_exists(fn, ob);
ca_ll.c | 83 | query_name(), ob) :));
ca_ll.c | 86 | query_name()), "calls");
ca_ll.c | 88 | call_other(ob,fn,argv...);
ca_ll.c | 89 | inform_of_call(ov[i], ({ fn }) + argv);
ca_ll.c | 91 | desc_object(ob), file);
ca_ll.c | 92 | write(sprintf("$P$Call result$P$Returned: %O\n", retobj));
ca_ll.c | 94 | if (objectp(retobj)) this_player()->set_obvar(obvarname, retobj);
ca_ll.c | 99 | desc_object(ob));
rcsre_vert.c | 21 | notify_fail("rcsrevert: No arguments.\n");
rcsre_vert.c | 24 | explode(arg, " ");
rcsre_vert.c | 42 | file_name(things[0]);
rcsre_vert.c | 43 | sscanf(file, "%s#%*d", file);
rcsre_vert.c | 54 | notify_fail("rcsrevert: no such file "+arg+".\n");
rcsre_vert.c | 57 | allocate(3);
rcsre_vert.c | 58 | this_player()->query_name();
rcsre_vert.c | 61 | explode(arg, " ");
rcsre_vert.c | 63 | printf("CMD: %O\n", cmd);
rcsre_vert.c | 68 | this_player();
rcsre_vert.c | 75 | replace(mess, "/home/atuin/lib", "");
rcsre_vert.c | 80 | tell_object(TP, "rcsrevert: write_call_back() called.\n");
rcsre_vert.c | 85 | more_string(RET);
rcsre_vert.c | 87 | tell_object(TP, "rcsin completed.\n");
rcsre_vert.c | 90 | map_delete(ret, fd);
rcsre_vert.c | 91 | map_delete(globals, fd);
ta_il.c | 35 | notify_fail( "Tail what file(s)/object(s)?\n" );
ta_il.c | 40 | map( obs, (: base_name($1) :) );
ta_il.c | 42 | file_size($1) <= 0 ? $1 + ".c" : $1 ) :) );
ta_il.c | 44 | notify_fail( str + ": No such file(s)/object(s).\n" );
ta_il.c | 51 | sizeof( filenames );
ta_il.c | 53 | if( sizeof( filenames ) >
ta_il.c | 54 | printf( "%*'-'s\nFILE : %s\n", 80, "", str );
ta_il.c | 57 | write( "That file/object is not readable, or does not exist.\n" );
ta_il.c | 59 | write( read_file( str, ( ( file_length( str ) + 1 ) - num ) ) );
ta_il.c | 67 | cmd($4[0], 20) :) });
exe_c.c | 22 | this_player()->query_name();
exe_c.c | 25 | notify_fail("Directory: " + wiz_dir + " does not exist.\n");
exe_c.c | 29 | dest_me();
exe_c.c | 31 | destruct(ob);
exe_c.c | 33 | if (file_size(file + ".c") >
exe_c.c | 34 | rm(file+".c");
exe_c.c | 39 | this_player()->query_property(OPTION_EXEC_INCLUDE);
exe_c.c | 41 | write_file(file + ".c", "#include \"" + file_header + "\"\n\n");
exe_c.c | 44 | dest_me() { destruct(this_object());
exe_c.c | 46 | catch(ret = file->do_call());
exe_c.c | 49 | dest_me();
exe_c.c | 51 | rm(file + ".c");
exe_c.c | 58 | do_exec(str, ref err);
exe_c.c | 65 | printf("Exec failed: %s", err);
cl_one.c | 25 | notify_fail("Clone what ?\n");
cl_one.c | 30 | sscanf(str, "%s=%s", obvarname, str);
cl_one.c | 31 | this_player()->get_cfiles(str);
cl_one.c | 33 | notify_fail("No such file.\n");
cl_one.c | 37 | sizeof(filenames);
cl_one.c | 40 | notify_fail("No such file.\n");
cl_one.c | 43 | catch(ob = clone_object(str));
cl_one.c | 44 | handle_error(err, "clone_object()");
cl_one.c | 45 | clone_object(str);
cl_one.c | 46 | if (obvarname) this_player()->set_obvar(obvarname, ob);
cl_one.c | 48 | catch((mov = (int)ob->move(this_player())));
cl_one.c | 49 | this_player()->handle_error(err, "move(this_player())");
cl_one.c | 51 | catch(ob -> move(environment(this_player())));
cl_one.c | 52 | this_player()->handle_error(err, "move(environment())");
cl_one.c | 59 | one_short() + " from another dimension.\n");
cl_one.c | 61 | printf("Failed to clone.\n");
rcsl_og.c | 22 | notify_fail("rcslog: No arguments.\n");
rcsl_og.c | 25 | notify_fail("rcslog: No such file "+arg+"\n");
rcsl_og.c | 26 | explode(arg, " ");
rcsl_og.c | 44 | file_name(things[0]);
rcsl_og.c | 45 | sscanf(file, "%s#%*d", file);
rcsl_og.c | 60 | printf("CMD: %s\n", cmd);
rcsl_og.c | 65 | this_player();
rcsl_og.c | 71 | replace(mess, "/home/atuin/lib", "");
rcsl_og.c | 76 | tell_object(TP, "rcslog: Whoops! fatal error.\n");
rcsl_og.c | 81 | more_string(RET);
rcsl_og.c | 83 | tell_object(TP, "rcslog completed.\n");
rcsl_og.c | 84 | map_delete(ret, fd);
rcsl_og.c | 85 | map_delete(globals, fd);
mylocks.c | 10 | query_locks( this_player() );
mylocks.c | 11 | sort_array( locked, 1 );
mylocks.c | 12 | call_out("verify_lock", 1, this_player(), locked);
mylocks.c | 13 | write("Verifying\n");
mylocks.c | 19 | query_locks( this_player() );
mylocks.c | 21 | filter(locked, (: strsrch($1, $(person)) == 0 :));
mylocks.c | 25 | query_locks( person );
mylocks.c | 29 | add_failed_mess( who_string + "no files locked.\n" );
mylocks.c | 33 | sort_array( locked, 1 );
mylocks.c | 36 | implode(locked, "\n") + "\n");
mylocks.c | 45 | explode(file, "/");
mylocks.c | 51 | read_file(file, 4, 1);
mylocks.c | 53 | explode(read_file(file, 5, 1), ":");
mylocks.c | 60 | tell_object(pl, "Removing non-existant lock for " + locks[0] + "\n");
mylocks.c | 61 | remove_lock(pl->query_name(), locks[0]);
mylocks.c | 64 | if(sizeof(locks) >
mylocks.c | 65 | call_out("verify_lock", 1, this_player(), locks[1..]);
mylocks.c | 70 | cmd($4[0] ) :) });
ed.c | 34 | this_player() });
ed.c | 40 | this_player()->do_edit( 0, "fini_editor", 0, str );
ed.c | 44 | this_player()->set_in_editor("(hidden)");
ed.c | 45 | ed("frog", "fini_editor");
ed.c | 50 | file_name(things[0]);
ed.c | 51 | sscanf(spam, "%s#%*d", spam);
ed.c | 57 | this_player()->get_files(str);
ed.c | 59 | this_player()->get_path(str);
ed.c | 61 | if (sizeof(filenames) >
ed.c | 63 | if (sizeof(filenames) >
ed.c | 70 | printf("No such file.\n");
ed.c | 71 | this_player() });
ed.c | 77 | printf("Ambiguous, using : %s\n", str);
ed.c | 82 | printf("directory\n");
ed.c | 83 | this_player() });
ed.c | 86 | this_player()->set_in_editor(str);
ed.c | 87 | printf("Editing: %s ", str);
ed.c | 89 | printf("[read only]\n");
ed.c | 91 | printf("\n");
ed.c | 92 | ed(str, "fini_editor");
ed.c | 98 | this_player() });
ed.c | 99 | this_player()->set_in_editor(0);
ed.c | 107 | clean_up();
ed.c | 115 | reset();
zcat.c | 21 | this_player()->get_files( fname );
zcat.c | 24 | this_player()->get_path( fname ) });
zcat.c | 27 | geteuid( this_player(1) );
zcat.c | 36 | uniq_array( files );
zcat.c | 52 | this_player()->query_name() + " " + args + "\n");
zcat.c | 57 | add_failed_mess( "zcat must have at least one argument.\n" );
zcat.c | 62 | add_failed_mess( "zcat failed to start.\n" );
zcat.c | 66 | this_player();
zcat.c | 69 | tell_object( this_player(), "zcat started.\n" );
zcat.c | 77 | replace(mess, "/bin/", "");
zcat.c | 78 | get_config( __MAX_STRING_LENGTH__ );
zcat.c | 80 | strlen( RET ) + strlen( mess );
zcat.c | 97 | tell_object( TP, RET );
zcat.c | 101 | tell_object(TP, "zcat finished.\n");
zcat.c | 104 | map_delete(ret, fd);
zcat.c | 105 | map_delete(globals, fd);
harass.c | 5 | seteuid("Root");
harass.c | 16 | write("Type harass again to stop logging.\n");
harass.c | 17 | call_out((:remind:), 60);
harass.c | 24 | this_player()]->query_result();
harass.c | 28 | destruct(busy[this_player()]);
harass.c | 29 | map_delete(busy, this_player());
harass.c | 30 | write("Log written.\n");
harass.c | 33 | this_player()] = clone_object(__FILE__);
harass.c | 35 | write("Started logging.\nType harass again to stop.\n");
harass.c | 36 | call_out((:remind:), 60);
harass.c | 39 | destruct(busy[this_player()]);
harass.c | 40 | map_delete(busy, this_player());
harass.c | 41 | write("Failed.\n");
rmp_layer.c | 25 | back_trace());
rmp_layer.c | 26 | write("Illegal use of rmplayer.\n");
rmp_layer.c | 33 | write("Ok.  Deleting\n");
rmp_layer.c | 34 | geteuid();
rmp_layer.c | 35 | seteuid("Root");
rmp_layer.c | 36 | if(file_size(PLAYER_HANDLER->query_player_ram_file_name(player)+".o.gz") >
rmp_layer.c | 37 | query_player_ram_file_name(player);
rmp_layer.c | 39 | if(file_size(PLAYER_HANDLER->query_player_disk_file_name(player)+".o.gz") >
rmp_layer.c | 40 | query_player_disk_file_name(player);
rmp_layer.c | 42 | if(file_size(PLAYER_HANDLER->query_player_disk_file_name(player)+".o") >
rmp_layer.c | 43 | query_player_disk_file_name(player);
rmp_layer.c | 45 | if(file_size(PLAYER_HANDLER->query_delete_player_file_name(player) + ".o.gz") >
rmp_layer.c | 46 | query_delete_player_file_name(player);
rmp_layer.c | 48 | if(file_size(PLAYER_HANDLER->query_delete_player_file_name(player)+ ".o") >
rmp_layer.c | 49 | query_delete_player_file_name(player);
rmp_layer.c | 57 | unguarded((: rm($(src)+$(ext)) :));
rmp_layer.c | 59 | query_player_disk_file_name(player);
rmp_layer.c | 60 | unguarded((: rm($(src)+$(ext)) :));
rmp_layer.c | 62 | remove_cache_entry( player );
rmp_layer.c | 66 | seteuid(olduid);
rmp_layer.c | 69 | write("Ok.  Not deleting\n");
rmp_layer.c | 78 | back_trace() :));
rmp_layer.c | 79 | notify_fail("Sorry: only directors can delete players.\n");
rmp_layer.c | 86 | notify_fail("Sorry, but " + player + " isn't a player\n");
rmp_layer.c | 94 | back_trace() :) );
rmp_layer.c | 95 | notify_fail("Sorry.\n");
rmp_layer.c | 107 | add_failed_mess("You cannot delete creators.\n");
rmp_layer.c | 112 | notify_fail("You must give a reason.\n");
rmp_layer.c | 127 | cmd($4[0], $4[1], 1) :) });
dbxframe.c | 8 | allocate(sizeof(vars));
dbxframe.c | 11 | sizeof(vars);
dbxframe.c | 31 | implode(result, ", ");
dbxframe.c | 43 | write("dbxframe [<who>] <frame>\n");
dbxframe.c | 47 | this_player()->expand_nickname(who);
dbxframe.c | 48 | find_player(who);
dbxframe.c | 50 | write("No such player.\n");
dbxframe.c | 54 | this_player();
dbxframe.c | 55 | get_last_error();
dbxframe.c | 57 | write("No error.\n");
dbxframe.c | 61 | notify_fail("No such frame.\n");
dbxframe.c | 70 | print_vars(frame["arguments"]));
dbxframe.c | 71 | printf("locals: %s\n", print_vars(frame["locals"]));
dbxframe.c | 72 | printf("----------------------------------------------------------------\n");
dbxframe.c | 76 | read_file(file, frame["line"]+1, 5)));
rcsloc_ks.c | 23 | notify_fail("rcslocks: No arguments.\n");
rcsloc_ks.c | 26 | explode(arg, " ");
rcsloc_ks.c | 43 | file_name(things[0]);
rcsloc_ks.c | 44 | sscanf(file, "%s#%*d", file);
rcsloc_ks.c | 55 | notify_fail("rcslocks: no such file "+arg+".\n");
rcsloc_ks.c | 63 | explode(fname, "/");
rcsloc_ks.c | 67 | write("File " + fname + " is not on RCS.\n");
rcsloc_ks.c | 69 | read_file(file, 4, 1);
rcsloc_ks.c | 71 | explode(read_file(file, 5, 1), ":");
rcsloc_ks.c | 74 | write("File " + fname + " locked by " + locker + ".\n");
rcsloc_ks.c | 76 | write(fname + " is not locked.\n");
valid_ident.c | 11 | high_programmer(euid);
dest_env.c | 20 | environment(ob);
dest_env.c | 23 | query_dest_dir();
dest_env.c | 25 | move_player("void", "/room/void", "is sucked into the");
permission.c | 13 | back_trace() :));
permission.c | 24 | save_object( "/secure/master" );
permission.c | 37 | back_trace() :));
permission.c | 45 | map_delete(positions, str);
permission.c | 46 | save_object("/secure/master");
permission.c | 59 | back_trace() :));
permission.c | 69 | save_object("/secure/master");
permission.c | 82 | back_trace() :));
permission.c | 90 | map_delete(positions, str);
permission.c | 91 | save_object("/secure/master");
permission.c | 104 | back_trace() :));
permission.c | 111 | geteuid(this_interactive())+"\n");
permission.c | 113 | save_object("/secure/master");
permission.c | 126 | back_trace() :));
permission.c | 133 | geteuid(this_interactive())+"\n");
permission.c | 134 | map_delete(positions, str);
permission.c | 135 | save_object("/secure/master");
permission.c | 141 | creator_file(string path, int author);
permission.c | 145 | explode(path, "/") - ({ "", "." });
permission.c | 149 | return (mask & READ_MASK);
permission.c | 153 | geteuid(ob);
permission.c | 162 | return (mask & READ_MASK);
permission.c | 169 | check_permission(ob, bits, mask);
permission.c | 176 | if ((sizeof(bits) >
permission.c | 182 | valid_write(bits, ob, func)));
permission.c | 184 | return (mask & READ_MASK);
permission.c | 188 | explode(path, "/") - ({ "", "." });
permission.c | 192 | return (mask & READ_MASK);
permission.c | 196 | geteuid(ob);
permission.c | 213 | if ((mask & READ_MASK) && sizeof(bits) >
permission.c | 231 | valid_write(bits, ob, func));
permission.c | 256 | base_name(previous_object())));
permission.c | 276 | sizeof(stack = ({ ob }) + previous_object(-1));
permission.c | 280 | sizeof(stack = ({ ob }));
permission.c | 283 | sizeof(stack = ({ previous_object(1) }));
permission.c | 285 | sizeof(stack = ({ ob }) + previous_object(-1));
permission.c | 290 | previous_object(-1);
permission.c | 293 | sizeof(stack = ({ ob }) + stack[0..i]);
permission.c | 295 | sizeof(stack = ({ ob}) + previous_object(-1));
permission.c | 338 | return (mask & READ_MASK);
permission.c | 353 | explode(path, "/") - ({ "", "." });
permission.c | 360 | sizeof(bits);
permission.c | 363 | copy(found);
permission.c | 411 | query_director();
permission.c | 413 | query_lord();
permission.c | 416 | geteuid($1) :))) != -1));
permission.c | 425 | get_dir("/d/");
permission.c | 428 | sizeof(doms);
permission.c | 437 | query_access();
permission.c | 450 | explode(path, "/");
permission.c | 451 | if (sizeof(bits) >
permission.c | 458 | notify_fail("Failed to load master file.\n");
permission.c | 465 | return (int)master_ob->add_permission(euid, path, mask);
permission.c | 473 | unguarded((: save_object, "/secure/master" :));
permission.c | 485 | back_trace() :));
permission.c | 489 | write("Added read permision for "+euid+" to "+path+".\n");
permission.c | 503 | back_trace() :));
permission.c | 507 | write("Added write permision for "+euid+" to "+path+".\n");
permission.c | 521 | back_trace() :));
permission.c | 525 | write("Added grant permision for "+euid+" to "+path+".\n");
permission.c | 535 | lock_path("+path+")", "cheat");
permission.c | 537 | lock_path("+path+").\nBacktrace: "+ back_trace() :));
permission.c | 541 | write("Restricted access for all to "+path+".\n");
permission.c | 553 | explode(path, "/");
permission.c | 554 | if (sizeof(bits) >
permission.c | 561 | notify_fail("Failed to load master file.\n");
permission.c | 566 | notify_fail("You are not the lord of $C$" + bits[1] + ".\n");
permission.c | 567 | return (int)master_ob->remove_permission(euid, path, mask);
permission.c | 578 | map_delete(permissions, path);
permission.c | 580 | map_delete(permissions[path], euid);
permission.c | 583 | unguarded((: save_object, "/secure/master" :));
permission.c | 595 | back_trace() :));
permission.c | 599 | write("Removed read permision for "+euid+" to "+path+".\n");
permission.c | 613 | back_trace() :));
permission.c | 617 | write("Removed write permision for "+euid+" to "+path+".\n");
permission.c | 631 | back_trace() :));
permission.c | 635 | write("Removed grant permision for "+euid+" to "+path+".\n");
permission.c | 645 | unlock_path("+path+")", "cheat");
permission.c | 647 | unlock_path("+path+").\nBacktrace: "+ back_trace() :));
permission.c | 651 | write("Removed access restrictions for all to "+path+".\n");
valid_shadow.c | 22 | sscanf(file_name(ob), "/cmds/%*s"));
parse_command.c | 14 | return ({ "one", "thing" });
parse_command.c | 18 | return ({ "ones", "things", "them" });
parse_command.c | 22 | return ({ "the", "a", "an" });
parse_command.c | 38 | parse_command_prepos_list();
valid_read.c | 31 | base_name(previous_object());
valid_read.c | 40 | permission_match_path(permissions, path);
valid_read.c | 41 | check_permission(euid, func, path, perms, READ_MASK);
valid_read.c | 44 | query_read_stats() { return copy(read_stats);
valid_seteuid.c | 19 | unguarded((: get_dir, "/d/" :));
valid_seteuid.c | 21 | map(domains, (: capitalize($1) :));
valid_seteuid.c | 37 | creator_file(file_name(ob));
ed_stuff.c | 11 | set_ed_setup(setup);
ed_stuff.c | 16 | return (int)wiz->query_ed_setup();
ed_stuff.c | 25 | return (string)this_player()->get_path(str);
ed_stuff.c | 37 | explode(file,"/") - ({ "" });
ed_stuff.c | 40 | query_name() + "-" + file + "\"\n");
snoop.c | 22 | this_player()->query_current_verb();
snoop.c | 24 | tell_object(snooper, "You can't snoop yourself.\n");
snoop.c | 29 | query_cap_name()+" is already being snooped.\n");
snoop.c | 34 | query_snoopee()->query_name(), "snoop");
snoop.c | 37 | query_cap_name()+" stops snooping you.\n");
snoop.c | 39 | remove_property("quiet snoop");
snoop.c | 41 | set_snoopee(0);
snoop.c | 50 | query_name(), "snoop");
snoop.c | 56 | query_cap_name()+"\n");
snoop.c | 57 | add_property("quiet snoop", 1);
snoop.c | 60 | query_cap_name()+".\n");
snoop.c | 64 | query_cap_name() + ".\n") :) );
snoop.c | 65 | set_snoopee(snoopee);
snoop.c | 69 | input_to("snoop_reason");
snoop.c | 74 | query_name(), "snoop");
snoop.c | 81 | this_player();
snoop.c | 83 | write("Can't force people...\n");
snoop.c | 87 | write("Not a high programmer.\n");
snoop.c | 91 | write("The snoopee has just logged out.\n");
snoop.c | 95 | write("Snoop canceled.\n");
snoop.c | 96 | unguarded( (: write_file("/d/admin/log/SNOOP", "  Chickened out.\n") :) );
snoop.c | 102 | write("Snoop suceeded,\n");
snoop.c | 104 | write("Snoop failed.\n");
valid_copy.c | 18 | explode(path, "/") - ({ "", "." });
valid_copy.c | 21 | permission_match_path(permissions, path);
valid_copy.c | 25 | check_permission(euid, func, path, perms, READ_MASK);
valid_copy.c | 27 | find_object("/d/" + bits[1] + "/master");
valid_copy.c | 31 | check_permission(euid, func, path, perms, READ_MASK);
valid_copy.c | 33 | check_permission(euid, func, path, perms, WRITE_MASK);
create_dom_creator.c | 75 | employ_creator( string name );
create_dom_creator.c | 76 | create_domain( string name , string lord );
create_dom_creator.c | 77 | dismiss_creator( string str );
create_dom_creator.c | 78 | eligible_creator( object player );
create_dom_creator.c | 79 | backup_vaults(string, int);
create_dom_creator.c | 80 | backup_bank(string, int);
create_dom_creator.c | 81 | backup_quest_library(string, int);
create_dom_creator.c | 92 | write("Cheat!\n");
create_dom_creator.c | 96 | write("Invalid name....\n");
create_dom_creator.c | 100 | write("Domain already exists (or invalid).\n");
create_dom_creator.c | 103 | if (sizeof(explode(name, "/")) >
create_dom_creator.c | 104 | write("Invalid to have a / in the domain name.\n");
create_dom_creator.c | 108 | write("The lord must exist.... and be a creator already.\n");
create_dom_creator.c | 111 | mkdir("/d/"+name);
create_dom_creator.c | 112 | master()->add_lord(lord);
create_dom_creator.c | 113 | read_file("/std/dom/master.c");
create_dom_creator.c | 114 | write_file("/d/"+name+"/master.c", "#define LORD \""+lord+"\"\n");
create_dom_creator.c | 115 | write_file("/d/"+name+"/master.c", "#define DOMAIN \""+name+"\"\n");
create_dom_creator.c | 116 | write_file("/d/"+name+"/master.c", file);
create_dom_creator.c | 117 | read_file("/std/dom/common.c");
create_dom_creator.c | 120 | write_file("/d/"+name+"/common.c", "#define LORD \""+lord+"\"\n");
create_dom_creator.c | 121 | write_file("/d/"+name+"/common.c", "#define DOMAIN \""+name+"\"\n");
create_dom_creator.c | 122 | write_file("/d/"+name+"/common.c", file);
create_dom_creator.c | 123 | read_file("/std/dom/loader.c");
create_dom_creator.c | 124 | write_file("/d/"+name+"/loader.c", "#define DOMAIN \""+name+"\"\n");
create_dom_creator.c | 125 | write_file("/d/"+name+"/loader.c", file);
create_dom_creator.c | 126 | save_object("/secure/master");
create_dom_creator.c | 127 | write("Created domain "+name+".\n");
create_dom_creator.c | 129 | geteuid(interactives[0])+" at "+ctime(time())+"\n");
create_dom_creator.c | 142 | write("User does not exist.\n");
create_dom_creator.c | 145 | if (file_size("/save/creators/"+ name + "/save_file.o") >
create_dom_creator.c | 146 | write( "Player file has already been backed up.\n" );
create_dom_creator.c | 149 | query_player_file_name(name);
create_dom_creator.c | 150 | if (file_size(fname + ".o.gz") >
create_dom_creator.c | 151 | unguarded((: uncompress_file, fname + ".o.gz" :));
create_dom_creator.c | 153 | mkdir (BACKUP_DIR + name);
create_dom_creator.c | 158 | backup_vaults(name, 0);
create_dom_creator.c | 159 | backup_bank(name, 0);
create_dom_creator.c | 160 | backup_quest_library(name, 0);
create_dom_creator.c | 163 | find_player(name)->set_creator(1);
create_dom_creator.c | 164 | find_player(name)->save();
create_dom_creator.c | 166 | capitalize( geteuid( interactives[0] ) ) +".\n" );
create_dom_creator.c | 172 | tell_object( find_player( name ), "Womble on, mighty frog.\n" );
create_dom_creator.c | 177 | unguarded((: compress_file, fname + ".o.gz" :));
create_dom_creator.c | 180 | unguarded((: mkdir, "/w/"+ name :));
create_dom_creator.c | 184 | read_file( "/std/creator/workroom.c" ) :));
create_dom_creator.c | 190 | query_name() ) :));
create_dom_creator.c | 191 | write( capitalize( name ) +" employed.\n" );
create_dom_creator.c | 192 | remove_cache_entry(name);
create_dom_creator.c | 208 | notify_fail("You need to give a reason!\n");
create_dom_creator.c | 212 | notify_fail(name + " is not a creator!\n");
create_dom_creator.c | 215 | write( "Cannot dismiss Lords.\n" );
create_dom_creator.c | 221 | query_name(), reason ) :));
create_dom_creator.c | 222 | query_player_file_name(name);
create_dom_creator.c | 224 | find_player(name)->set_creator(0);
create_dom_creator.c | 225 | find_player(name)->save();
create_dom_creator.c | 228 | capitalize( (string)interactives[0]->query_name() ) +".\n" );
create_dom_creator.c | 229 | find_player(name)->quit();
create_dom_creator.c | 231 | unguarded((: uncompress_file, fname + ".o.gz" :));
create_dom_creator.c | 236 | unguarded((: uncompress_file, fname + ".o.gz" :));
create_dom_creator.c | 240 | unguarded((: compress_file, fname+".o" :));
create_dom_creator.c | 242 | write( capitalize( name ) +" dismissed.\n" );
create_dom_creator.c | 248 | backup_vaults (name, 1);
create_dom_creator.c | 249 | backup_bank (name, 1);
create_dom_creator.c | 250 | backup_quest_library (name, 1);
create_dom_creator.c | 252 | if (file_size(save_file) >
create_dom_creator.c | 253 | unguarded((: write_file, save_file, "last_log_on "+time()+"\n" :));
create_dom_creator.c | 254 | unguarded((: cp, save_file, fname+".o" :));
create_dom_creator.c | 255 | unguarded((: rm, save_file :));
create_dom_creator.c | 256 | unguarded((: rm, fname+".o.gz" :));
create_dom_creator.c | 257 | unguarded((: compress_file, fname+".o" :));
create_dom_creator.c | 260 | unguarded((: rename, "/w/"+name, "/w/.old_creators/"+name :) );
create_dom_creator.c | 262 | rm (save_file);
create_dom_creator.c | 263 | rmdir (BACKUP_DIR + name);
create_dom_creator.c | 264 | remove_cache_entry(name);
create_dom_creator.c | 294 | query_time_on() );
create_dom_creator.c | 295 | query_level();
create_dom_creator.c | 310 | sprintf( "%d day" , age/86400 );
create_dom_creator.c | 317 | sprintf( "%d hour" , (age%86400)/3600 );
create_dom_creator.c | 335 | get_dir (base);
create_dom_creator.c | 336 | mkdir (creator_dir);
create_dom_creator.c | 341 | cp (file, creator_dir + "/" + vault + ".o");
create_dom_creator.c | 350 | get_dir (base);
create_dom_creator.c | 354 | rm (file);
create_dom_creator.c | 358 | get_dir (creator_dir);
create_dom_creator.c | 361 | explode (vault, ".");
create_dom_creator.c | 362 | cp (creator_dir + vault, base  + tmp[0] + "/" + name  + ".o");
create_dom_creator.c | 363 | rm (creator_dir + vault);
create_dom_creator.c | 366 | rmdir (creator_dir);
create_dom_creator.c | 380 | mkdir (bank_dir);
create_dom_creator.c | 384 | cp (bank_file, bank_dir);
create_dom_creator.c | 391 | rm (bank_file);
create_dom_creator.c | 395 | cp (saved_file, bank_file);
create_dom_creator.c | 396 | rm (saved_file);
create_dom_creator.c | 397 | rmdir (bank_dir);
create_dom_creator.c | 409 | mkdir (library_dir);
create_dom_creator.c | 413 | cp (library_file, library_dir);
create_dom_creator.c | 420 | rm (library_file);
create_dom_creator.c | 424 | cp (saved_file, library_file);
create_dom_creator.c | 425 | rm (saved_file);
create_dom_creator.c | 426 | rmdir (library_dir);
valid_socket.c | 13 | file_name(ob);
crash.c | 10 | reset_eval_cost();
crash.c | 11 | log_file("CRASH", "\n"+ ctime(time()) +":\n");
crash.c | 14 | query_name() +")\n");
crash.c | 17 | query_name() +")\n");
crash.c | 19 | log_file("CRASH", "command given: "+ query_verb() +"\n");
crash.c | 20 | log_file("CRASH", "crash reason: "+ crash_mess +"\n");
crash.c | 21 | users();
crash.c | 24 | flush_log_files();
crash.c | 31 | reset_eval_cost();
crash.c | 32 | tell_object(thing, crashtxt + "\n("+ crash_mess +")\n");
crash.c | 33 | catch(thing->quit());
creator_file.c | 17 | explode(file, "/") - ({ "" });
creator_file.c | 21 | get_root_uid();
creator_file.c | 23 | if (sizeof(str) >
creator_file.c | 29 | get_bb_uid();
creator_file.c | 33 | if (sizeof(str) >
creator_file.c | 46 | capitalize(str[1]);
creator_file.c | 47 | return ("/d/"+str[1]+"/master")->author_file(str);
creator_file.c | 60 | creator_file(bing, 1);
creator_file.c | 66 | creator_file(bing);
valid_override.c | 16 | explode(file, "/") - ({ "", "." });
valid_override.c | 25 | return (func != "snoop");
query_pl_level.c | 28 | return (int)this_player()->query_creator();
logging.c | 16 | file_name(file);
logging.c | 17 | explode(file, "/") - ({ "" });
logging.c | 33 | file_name(file);
logging.c | 34 | explode(file, "/") - ({ "" });
logging.c | 35 | if (file[0] == "d" && sizeof(file) >
logging.c | 44 | file_name(file);
logging.c | 45 | explode(file, "/") - ({ "" });
logging.c | 52 | sscanf(fn, "%s#%*d", fn);
logging.c | 54 | return (fn != pr) && (fn != ("/" + pr));
logging.c | 63 | sprintf(" (%s)", prog);
logging.c | 65 | sprintf(" in %s:%d\n", file, line);
logging.c | 67 | sprintf(" at line %d\n", line);
logging.c | 78 | typeof(arg) + ") " + save_variable(arg);
logging.c | 80 | sprintf("(%s) <too large>", typeof(arg));
logging.c | 82 | sprintf("(%s) %O", typeof(arg), arg);
logging.c | 91 | map(args, (: printable_arg($1) :));
logging.c | 100 | map(args, (: printable_arg($1) :));
logging.c | 101 | implode(tmp, ",\n    ");
logging.c | 110 | trace_line(mp["object"], mp["program"], mp["file"], mp["line"]);
logging.c | 115 | sizeof(trace);
logging.c | 117 | if( flag ) ret += sprintf("#%d: ", i);
logging.c | 137 | ctime(time()) + ":  " + standard_trace(error);
logging.c | 144 | sscanf(error["error"], "%*sError in loading object '%s'", obname);
logging.c | 150 | file_name(ob);
logging.c | 154 | get_wiz_name(obname);
logging.c | 193 | if (file_size(path) >
logging.c | 194 | unguarded((: rm, path+".old" :));
logging.c | 195 | unguarded((: rename, path, path+".old" :));
logging.c | 197 | unguarded((: write_file, path, ret :));
logging.c | 200 | this_player(1)->set_last_error(error);
logging.c | 237 | tell_object(this_player(1), colour+message+"%^RESET%^");
logging.c | 239 | get_wiz_name(file);
logging.c | 251 | if (file_size(epath) >
logging.c | 252 | unguarded((: rm, epath+".old" :));
logging.c | 253 | unguarded((: rename, epath, epath+".old" :));
logging.c | 255 | unguarded((: write_file, epath, message :));
logging.c | 263 | unguarded((: rm, "/w/"+person+"/"+PLAYER_ERROR_LOG :));
logging.c | 264 | unguarded((: write_file, "/w/"+person+"/"+PLAYER_ERROR_LOG, text :));
logging.c | 271 | unguarded((: write_file, file, text :));
simul_efun.c | 19 | write("Failed to load " + fname + "\n");
simul_efun.c | 20 | shutdown();
compile_to_c.c | 12 | generate_source(load_file("compile_to_c"));
preload.c | 12 | read_file("/secure/config/"+fname);
preload.c | 14 | return ({ });
preload.c | 15 | explode(str, "\n");
preload.c | 16 | filter(bits, (: $1[0] != '#' :));
preload.c | 21 | load_file("preload");
preload.c | 27 | printf("Preloading: "+file+".\n");
preload.c | 29 | printf("            "+e+"\n");
valid_database.c | 2 | base_name(ob);
valid_bind.c | 27 | find_object("/secure/simul_efun");
valid_bind.c | 42 | explode(file_name(old_owner), "/");
valid_hide.c | 11 | query_lord(geteuid(ob));
directory_assignments.c | 12 | query_leader(string name);
directory_assignments.c | 25 | explode(dir, "/") - ({ "" });
directory_assignments.c | 28 | if (sizeof(bits) >
directory_assignments.c | 29 | return ({ bits[1] });
directory_assignments.c | 32 | if (sizeof(bits) >
directory_assignments.c | 33 | return ("/d/" + bits[1] + "/master")->query_assigned_to_directory(bits);
directory_assignments.c | 38 | implode(bits[0..<i], "/");
directory_assignments.c | 40 | while (i >= 0 && !_directory_assignments[str]);
directory_assignments.c | 44 | return ({ });
directory_assignments.c | 66 | back_trace() :));
directory_assignments.c | 74 | explode(dir, "/") - ({ "" });
directory_assignments.c | 75 | if (sizeof(dirs) >
directory_assignments.c | 77 | return ("/d/" + dirs[1] + "/master")->assign_people_to_directory(dir, people);
directory_assignments.c | 88 | do_update_directory_assignment(_directory_assignments[dir][0], people[0], dir, (: 1 :));
directory_assignments.c | 90 | do_update_directory_assignment(ERROR_ASSIGNED_NO_ONE, people[0], dir, (: 1 :));
directory_assignments.c | 94 | map_delete(_directory_assignments, dir);
directory_assignments.c | 96 | save_object("/secure/master");
directory_assignments.c | 100 | debug_printf("Bad pumpkins. %O %O\n", new_people, people);
directory_assignments.c | 111 | return ([ ]);
directory_assignments.c | 113 | copy(_directory_assignments);
valid_write.c | 41 | call_stack(2)[0] + "\n");
valid_write.c | 45 | call_stack(2)[0] + ")\n");
valid_write.c | 59 | base_name(previous_object());
valid_write.c | 68 | explode(path, "/");
valid_write.c | 80 | file_size(path) >
valid_write.c | 89 | if(sizeof(bits) >
valid_write.c | 98 | if(file_size(rcspath) >
valid_write.c | 101 | tell_object(find_player("ceres"), sprintf("Checking perms: %s [%s](string)\n", rcspath, euid ));
valid_write.c | 103 | tell_object(find_player("ceres"), sprintf("Checking perms: %s [%s](object)\n", rcspath, file_name(euid )));
valid_write.c | 105 | tell_object(find_player("ceres"), sprintf("Checking perms: %s [%O](unknown)\n", rcspath, euid ));
valid_write.c | 107 | read_file(rcspath, 4, 1);
valid_write.c | 110 | read_file(rcspath, 5, 1);
valid_write.c | 111 | sscanf(tmp, "\t%s:", lockname);
valid_write.c | 120 | previous_object(-1);
valid_write.c | 121 | sizeof(stack);
valid_write.c | 131 | tell_object(find_player("ceres"), sprintf("Write denied to %O or %O Locked by %s\n", euid, previous_object(-1), lockname));
valid_write.c | 133 | tell_object(find_player("ceres"), sprintf("Write denied to %s or %O Locked by %s\n", euid, previous_object(-1), lockname));
valid_write.c | 139 | tell_object(find_player("ceres"), "Write allowed to "+geteuid(stack[i])+" Locked by:"+lockname +" on file "+path+"\n");
valid_write.c | 147 | tell_object(find_player("ceres"), sprintf("Write allowed by %O Locked by %s\n", euid, lockname));
valid_write.c | 149 | tell_object(find_player("ceres"), sprintf("Write allowed by %s Locked by %s\n", euid, lockname));
valid_write.c | 154 | tell_object(find_player("ceres"), "No locks found\n");
valid_write.c | 162 | permission_match_path(permissions, path);
valid_write.c | 163 | check_permission(euid, func, path, perms, WRITE_MASK);
valid_write.c | 166 | query_write_stats() { return copy(write_stats);
valid_binary.c | 25 | explode(fname, "/");
virtual_objects.c | 22 | if (file_size(path) >
virtual_objects.c | 23 | return (object)SERVER->create_virtual_object(path);
virtual_objects.c | 27 | explode(path, ":");
virtual_objects.c | 28 | if (sizeof(bits) >
virtual_objects.c | 29 | if (file_size(bits[0]) >
virtual_objects.c | 30 | file_size(bits[0] + ".c") >
virtual_objects.c | 31 | create_virtual_object(bits[1..] ...);
options_control.c | 11 | query_property(string);
options_control.c | 12 | add_property(string,mixed,int);
options_control.c | 21 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 23 | new(class player_options_control);
options_control.c | 30 | new(class player_options_control);
options_control.c | 46 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 60 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 74 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 88 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 103 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 106 | new(class player_options_control);
options_control.c | 109 | add_property(PLAYER_OPTIONS_CONTROL_PROP, options);
options_control.c | 119 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 122 | new(class player_options_control);
options_control.c | 125 | add_property(PLAYER_OPTIONS_CONTROL_PROP, options);
options_control.c | 135 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 138 | new(class player_options_control);
options_control.c | 141 | add_property(PLAYER_OPTIONS_CONTROL_PROP, options);
options_control.c | 151 | query_property(PLAYER_OPTIONS_CONTROL_PROP);
options_control.c | 154 | new(class player_options_control);
options_control.c | 157 | add_property(PLAYER_OPTIONS_CONTROL_PROP, options);
options_control.c | 167 | query_player_options();
options_control.c | 170 | add_property(PLAYER_OPTIONS_CONTROL_PROP, options);
options_control.c | 180 | query_player_options();
options_control.c | 191 | query_mxp_disable();
command.c | 46 | new(class command);
command.c | 68 | write("Error: "+tmp+"\n");
command.c | 85 | GetCommandPatterns(verb, SearchPath);
command.c | 95 | add_action( "cmdAll", "*", -1 );
command.c | 114 | error("illegal force");
command.c | 116 | catch(res = command(cmd));
command.c | 118 | if(err) error(err);
command.c | 134 | error("Bad argument 1 to AddSearchPath()\n");
command.c | 136 | uniq_array(SearchPath + val);
command.c | 150 | error("Bad argument 1 to RemoveSearchPath()\n");
history.c | 61 | sscanf(s2, "%s^", s2);
history.c | 63 | replace(history[hoffset-1], s1, s2);
history.c | 65 | replace(history[sizeof(history)-1], s1, s2);
history.c | 79 | sizeof(history);
history.c | 83 | sizeof(history);
history.c | 122 | allocate(40);
history.c | 127 | sizeof(history);
history.c | 149 | this_player());
history.c | 153 | sizeof(history);
history.c | 165 | sizeof(history))+sizeof(history);
history.c | 167 | sizeof(history);
history.c | 170 | sizeof(history);
history.c | 173 | sizeof(history);
history.c | 176 | sizeof(history);
history.c | 182 | sizeof(history);
history.c | 185 | add_failed_mess("Range out of bounds.\n");
history.c | 189 | sizeof(history);
le.c | 34 | le(string s);
le.c | 35 | add_command(string str, object ob, string format, function funct);
le.c | 38 | seteuid("PLAYER");
le.c | 43 | sizeof(cfile);
le.c | 46 | write("No line.\n");
le.c | 49 | write(extract("   ", 0, 3 - strlen(line + "")) + line + ":" + cfile[line-1] + "\n");
le.c | 56 | add_command("le", this_object(), "<string>", (: le($4[0]) :));
le.c | 70 | if (!pointerp(cfile)) { cfile = ({ });
le.c | 71 | if (!s || s == "") { print_line();
le.c | 73 | print_line();
le.c | 76 | if (!line) { notify_fail("Not on a line.\n");
le.c | 77 | delete(cfile, line-1, 1);
le.c | 78 | print_line();
le.c | 84 | write("Line editor cleared.\n");
le.c | 87 | extract(s, 1);
le.c | 94 | sizeof(cfile);
le.c | 95 | print_line();
le.c | 97 | write("Search failed.\n");
le.c | 101 | extract(s, 1);
le.c | 106 | sizeof(cfile)) ? cfile[line-1..sizeof(cfile)-1] : ({ });
le.c | 110 | print_line();
le.c | 116 | extract(s, 1);
le.c | 117 | while (sA[0] == ' ') sA = extract(sA,1);
le.c | 118 | this_player()->get_path(sA);
le.c | 120 | if (file_size(sB) < 0) { notify_fail("File doesn't exist.\n");
le.c | 121 | read_file(sB);
le.c | 122 | explode(sA, "\n");
le.c | 125 | write("Read file "  + sB + ": " + sizeof(cfile) + " lines.\n");
le.c | 127 | print_line();
le.c | 131 | print_line();
le.c | 135 | print_line();
le.c | 139 | if (!cfile_name) { notify_fail("No file name.\n");
le.c | 141 | extract(s,1);
le.c | 142 | while (s[0] == ' ') s = extract(s, 1);
le.c | 143 | if (this_player()->get_path(s)) s = this_player()->get_path(s);
le.c | 146 | rm(cfile_name);
le.c | 147 | write_file(cfile_name, implode(cfile, "\n"));
le.c | 148 | write("Tried to write file " + cfile_name + ": " + sizeof(cfile) + " lines.\n");
le.c | 155 | while (q-- && line <= sizeof(cfile)) { print_line();
start_position.c | 24 | inform_entered_game();
start_position.c | 25 | query_creator();
start_position.c | 26 | query_name();
start_position.c | 27 | query_cap_name();
start_position.c | 28 | the_short();
start_position.c | 29 | move(string pos, string messin, string messout);
start_position.c | 30 | query_nationality_start_location();
start_position.c | 78 | query_nationality_start_location();
start_position.c | 84 | query_nationality_start_location();
start_position.c | 112 | reset_starts() { starts = ({ });
start_position.c | 126 | add_start("/d/am/am/mendeddrum", "the mended drum");
start_position.c | 148 | remove_start("/d/am/am/mendeddrum");
start_position.c | 156 | member_array( start_file, starts );
start_position.c | 160 | delete( starts, i, 2 );
start_position.c | 173 | set_start_location("/d/am/am/mendeddrum");
start_position.c | 182 | member_array(start_file, starts);
start_position.c | 198 | query_start_pos();
start_position.c | 201 | move(last_pos);
start_position.c | 209 | set_co_ord( saved_co_ords );
start_position.c | 212 | inform_entered_game();
start_position.c | 235 | load_object(MULTIPLAYER);
start_position.c | 238 | query_login_ob() :));
start_position.c | 242 | query_multiple_short(dups);
start_position.c | 260 | query_creator()?$(ip_str) + $(alert):"") :);
start_position.c | 263 | return (: $(start) + ($1->query_creator()?$(alert):"") :);
start_position.c | 265 | return (: $(start) :);
start_position.c | 285 | this_object()->query_property( "new player!" ) ? " (new player)" : "" );
start_position.c | 289 | this_object());
start_position.c | 291 | say(the_short()+" enters the game.\n", 0);
start_position.c | 292 | enter(this_object());
start_position.c | 302 | this_object() );
start_position.c | 311 | find_start_pos(this_object(), environment());
start_position.c | 312 | find_start_coord(this_object(), environment());
family.c | 40 | query_name();
family.c | 41 | set_family_name(string name);
family.c | 42 | add_player_title(string title);
family.c | 43 | remove_player_title(string title);
family.c | 52 | new(class family_information);
family.c | 87 | explode(_family_name->cur_title, " ");
family.c | 104 | create_family_info();
family.c | 105 | set_family_name(bing);
family.c | 110 | new(class family_information);
family.c | 121 | new(class family_information);
family.c | 140 | strlen(_family_name->cur_title) >
family.c | 155 | update_adjectives();
family.c | 160 | is_club($1) :));
family.c | 177 | create_family_info();
family.c | 180 | remove_member(_family_name->name, query_name());
family.c | 183 | query_club_name(name);
family.c | 187 | update_adjectives();
family.c | 212 | check_family_name();
family.c | 216 | if (-this_object()->query_time_on() >
family.c | 219 | capitalize(_family_name->force_title);
family.c | 224 | capitalize(_family_name->cur_title);
family.c | 235 | create_family_info();
family.c | 250 | create_family_info();
family.c | 253 | if (strlen(title) >
family.c | 263 | explode(title, " ");
family.c | 264 | implode(map(bits, (: capitalize($1) :)), " ");
family.c | 268 | update_adjectives();
family.c | 304 | add_player_title("lord");
family.c | 307 | lower_case(title);
family.c | 309 | create_family_info();
family.c | 325 | lower_case(title);
family.c | 327 | create_family_info();
family.c | 349 | normalise_name(club);
family.c | 354 | create_family_info();
family.c | 358 | new(class family_information);
family.c | 383 | normalise_name(club);
family.c | 396 | return ({ });
family.c | 408 | return ({ _family_name->id });
family.c | 410 | return ({ });
family.c | 419 | return ({ pluralize(_family_name->id) });
family.c | 421 | return ({ });
family.c | 431 | return ({ });
auto_load.c | 48 | query_static_auto_load();
auto_load.c | 49 | query_dynamic_auto_load();
auto_load.c | 51 | return ({ });
auto_load.c | 54 | return  ({ 1, fname, ({ static_arg, dynamic_arg }) });
auto_load.c | 56 | return ({ 0, file_name(ob), ({ static_arg, dynamic_arg }) });
auto_load.c | 84 | catch(static_arg = (string)ob->query_static_auto_load());
auto_load.c | 85 | catch(dynamic_arg = (string)ob->query_dynamic_auto_load());
auto_load.c | 91 | catch(value = ob->query_value());
auto_load.c | 93 | catch(ob_name = ob->short(1));
auto_load.c | 94 | catch(PLAYER_RECEIPT->set_object(file_name(ob)));
auto_load.c | 95 | set_obname(ob_name);
auto_load.c | 96 | set_value(value);
auto_load.c | 97 | catch(PLAYER_RECEIPT->set_static_data(({ static_arg, dynamic_arg })));
auto_load.c | 98 | fragile_auto_str_ob(find_object("/obj/misc/al_receipt"));
auto_load.c | 112 | return  ({ 1, fname, ({ static_arg, dynamic_arg }) });
auto_load.c | 114 | return ({ 0, file_name( ob ), ({ static_arg, dynamic_arg }) });
auto_load.c | 144 | reset_eval_cost();
auto_load.c | 179 | reset_eval_cost();
auto_load.c | 181 | tell_object(this_object(), "%^RED%^Warning!  Auto string is empty!%^RESET%^\n");
auto_load.c | 186 | tell_object(this_object(), "%^RED%^Warning!  Auto string is not an array!%^RESET%^\n");
auto_load.c | 197 | this_object()->set_no_check( 1 );
auto_load.c | 198 | this_object()->set_max_weight( 100 + this_object()->query_max_weight() );
auto_load.c | 202 | reset_eval_cost();
auto_load.c | 203 | sizeof( auto_string );
auto_load.c | 209 | move($2) :));
auto_load.c | 230 | this_player();
auto_load.c | 233 | this_object();
auto_load.c | 235 | sizeof( auto_string );
auto_load.c | 261 | this_player();
auto_load.c | 264 | this_object();
auto_load.c | 266 | sizeof( auto_string );
auto_load.c | 280 | catch(name = (string)CLONER->other_file( name ));
auto_load.c | 284 | auto_clone_alt(thing, load_info, dest, tell_pl, move_f, name);
auto_load.c | 286 | move_to_destination(thing, dest, tell_pl, move_f);
auto_load.c | 287 | catch(thing->move( dest ));
auto_load.c | 292 | clone_object( PLAYER_RECEIPT );
auto_load.c | 293 | set_object( name );
auto_load.c | 294 | set_static_save( load_info );
auto_load.c | 295 | move( dest );
auto_load.c | 296 | move_to_destination(thing, dest, tell_pl, move_f);
auto_load.c | 301 | clone_object( PLAYER_RECEIPT );
auto_load.c | 302 | set_object( name );
auto_load.c | 303 | set_static_save( load_info );
auto_load.c | 304 | move( dest );
auto_load.c | 305 | move_to_destination(thing, dest, tell_pl, move_f);
auto_load.c | 323 | create_auto_load_object(name, load_info, dest, tell_pl, move_f);
auto_load.c | 326 | query_static_save();
auto_load.c | 331 | dest_me();
auto_load.c | 339 | find_object( name );
auto_load.c | 341 | auto_clone_alt(thing, load_info, dest, tell_pl, move_f, name);
auto_load.c | 362 | evaluate(_finished, this_object());
auto_load.c | 365 | this_object()->set_no_check( 0 );
auto_load.c | 372 | this_object()->query_loc_weight();
auto_load.c | 380 | this_object()->calc_burden();
auto_load.c | 383 | return ({ thing });
auto_load.c | 385 | return ({ });
auto_load.c | 392 | catch(word = (string)thing->query_short());
auto_load.c | 396 | file_name( thing );
auto_load.c | 426 | reset_eval_cost();
auto_load.c | 431 | catch( thing->set_player( tell_pl ) );
auto_load.c | 441 | query_property(VIRTUAL_NAME_PROP);
auto_load.c | 443 | other_file( ob_path );
auto_load.c | 446 | dest_me();
auto_load.c | 447 | clone_object( PLAYER_RECEIPT );
auto_load.c | 448 | set_object( name );
auto_load.c | 449 | set_static_save( load_info );
auto_load.c | 450 | set_virtobname( ob_path );
auto_load.c | 452 | add_property(VIRTUAL_NAME_PROP, ob_path);
auto_load.c | 460 | illegal_thing(base_name(thing), thing->query_short());
auto_load.c | 462 | dest_me();
auto_load.c | 463 | clone_object( ob_path );
auto_load.c | 466 | move_to_destination(thing, dest, tell_pl, move_f);
auto_load.c | 479 | catch( ret_val =  evaluate(move_f, thing, place ) );
auto_load.c | 492 | ident( environment( place ) ) +".%^RESET%^\n" );
auto_load.c | 493 | environment( place );
auto_load.c | 507 | environment( tell_pl );
auto_load.c | 514 | load_object("/room/broken");
auto_load.c | 515 | find_object( "/room/broken" );
auto_load.c | 526 | move($2) :);
telnet.c | 20 | check_terminal_type(string type);
telnet.c | 27 | check_terminal_type(str[2..1000]);
telnet.c | 35 | printf("%c%c%c", IAC, DO, TELOPT_TTYPE);
telnet.c | 37 | printf("%c%c%c%c%c%c", IAC, SB, TELOPT_TTYPE, TELQUAL_SEND, IAC, SE);
telnet.c | 44 | this_object()->set_network_terminal_type(0);
telnet.c | 50 | printf("%c%c%c%c%c%c", IAC, SB, TELOPT_TTYPE, TELQUAL_SEND, IAC, SE);
wiz_inter_comm.c | 16 | do_block(string);
wiz_inter_comm.c | 17 | do_unblock(string);
wiz_inter_comm.c | 20 | add_command("block", "", (:do_block(0):));
wiz_inter_comm.c | 21 | add_command("block", "<word'name'>", (:do_block($4[0]):));
wiz_inter_comm.c | 22 | add_command("unblock", "<word'name'>", (:do_unblock($4[0]):));
wiz_inter_comm.c | 28 | write("Not blocking anyone.\n");
wiz_inter_comm.c | 31 | write("Blocking "+query_multiple_short(imud_ignored)+".\n");
wiz_inter_comm.c | 35 | lower_case(str) });
wiz_inter_comm.c | 37 | lower_case(str) });
wiz_inter_comm.c | 38 | write("Okay, now ignoring intermud channel messages from "+str+".\n");
wiz_inter_comm.c | 39 | write("Use \"unblock\" to remove.\n");
wiz_inter_comm.c | 47 | notify_fail("Syntax: unblock <name>|all\n");
wiz_inter_comm.c | 49 | notify_fail("You are not blocking anyone.\n");
wiz_inter_comm.c | 52 | write("Okay, unblocked everyone.\n");
wiz_inter_comm.c | 56 | notify_fail("You are not blocking "+str+".\n");
wiz_inter_comm.c | 57 | delete(imud_ignored, idx, 1);
wiz_inter_comm.c | 58 | write("Okay, removed "+str+" from your blocked list.\n");
line_ed.c | 39 | main_bit(string str);
line_ed.c | 40 | set_editor(string name);
line_ed.c | 41 | editor_do_quit(string str);
line_ed.c | 42 | editor_loop(string str);
line_ed.c | 43 | editor_insert(string str);
line_ed.c | 44 | editor_delete(string str);
line_ed.c | 45 | editor_modify(string str);
line_ed.c | 46 | editor_check_quit(string str);
line_ed.c | 47 | editor_modify2(string str, int range1, int range2);
line_ed.c | 57 | add_command("editor", "{menu|magic|ed|command}", (: set_editor($4[0]) :));
line_ed.c | 74 | printf("Someone has stuffed up - there is no end function.\n");
line_ed.c | 84 | previous_object();
line_ed.c | 90 | previous_object();
line_ed.c | 105 | call_other($(end_o), $(end_f), $1, $(extra)) :);
line_ed.c | 107 | call_other($(end_o), $(end_f), $1) :);
line_ed.c | 111 | evaluate($(end_f), $1, $(extra)) :);
line_ed.c | 113 | evaluate($(end_f), $1) :);
line_ed.c | 119 | explode(str, "\n") - ({ 0 });
line_ed.c | 120 | printf("Enter your text.  Use ** on a line by itself to exit.\n");
line_ed.c | 121 | sizeof(_lines);
line_ed.c | 122 | printf("%-2d] ", _insertion_point + 1);
line_ed.c | 124 | input_to((: editor_loop :));
line_ed.c | 128 | write_file(_filename, str);
line_ed.c | 130 | ed(_filename, "editor_finish_ed", !this_object()->query_creator());
line_ed.c | 134 | write_file(_filename, str);
line_ed.c | 136 | new(PRESTOS_ED, _filename, _filename != TMP_FILE);
line_ed.c | 139 | explode(str, "\n") - ({ 0 });
line_ed.c | 142 | sizeof(_lines);
line_ed.c | 143 | printf("%-2d] ", _insertion_point + 1);
line_ed.c | 145 | input_to((: editor_loop :));
line_ed.c | 162 | printf("Insert before line: ");
line_ed.c | 163 | input_to((: editor_insert :));
line_ed.c | 167 | printf("Delete (line no, or n..m ie 1..2): ");
line_ed.c | 168 | input_to((: editor_delete :));
line_ed.c | 173 | main_bit("");
line_ed.c | 176 | sizeof(_lines);
line_ed.c | 177 | sprintf("%3d: %s\n", i + 1, _lines[i]);
line_ed.c | 178 | this_object()->set_finish_func("end_of_edit_more");
line_ed.c | 179 | this_object()->more_string(s);
line_ed.c | 184 | printf("Modify which line (line no, or n..m ie 1..2): ");
line_ed.c | 185 | input_to((: editor_modify :));
line_ed.c | 189 | sizeof(_lines);
line_ed.c | 192 | input_to((: editor_loop :));
line_ed.c | 199 | write_file(_filename, implode(_lines, "\n"));
line_ed.c | 200 | ed(_filename, "editor_exit_ed", !this_object()->query_creator());
line_ed.c | 204 | printf("Quitting and saving.\n");
line_ed.c | 205 | editor_do_quit(implode(_lines, "\n"));
line_ed.c | 209 | printf("Are you sure you want to quit? (Y/N) ");
line_ed.c | 210 | input_to((: editor_check_quit :));
line_ed.c | 214 | read_file(ED_HELP_FILE);
line_ed.c | 215 | this_object()->set_finish_func("end_of_edit_more");
line_ed.c | 216 | this_object()->more_string(s);
line_ed.c | 221 | main_bit("");
line_ed.c | 226 | printf(sizeof(_lines) +" lines - Choose from IDLMCESQ or H for help.");
line_ed.c | 227 | input_to((: main_bit :));
line_ed.c | 230 | printf("%-2d] ", _insertion_point + 1);
line_ed.c | 231 | input_to((: editor_loop :));
line_ed.c | 238 | this_object()->set_finish_func(0);
line_ed.c | 239 | main_bit("");
line_ed.c | 253 | printf("Out of bounds.\n");
line_ed.c | 254 | main_bit("");
line_ed.c | 256 | printf("Deleting from line %d to line %d.\n", num1, num2);
line_ed.c | 257 | delete(_lines, num1 - 1, num2 - num1 + 1);
line_ed.c | 258 | printf("Okay.\n");
line_ed.c | 259 | main_bit("");
line_ed.c | 264 | printf("Line number out of range.\n");
line_ed.c | 265 | main_bit("");
line_ed.c | 268 | printf("Deleting line %d.\n", num1);
line_ed.c | 269 | delete(_lines, num1 - 1, 1);
line_ed.c | 270 | printf("Okay.\n");
line_ed.c | 271 | main_bit("");
line_ed.c | 274 | printf("Error: invalid data %s.\n", str);
line_ed.c | 275 | main_bit("");
line_ed.c | 284 | printf("Error: must be a number.\n");
line_ed.c | 285 | main_bit("");
line_ed.c | 289 | printf("Error: number out of bounds.\n");
line_ed.c | 290 | main_bit("");
line_ed.c | 296 | input_to((: editor_loop :));
line_ed.c | 302 | if ((strlen(str) >
line_ed.c | 303 | main_bit(str[1..]);
line_ed.c | 308 | main_bit("");
line_ed.c | 310 | editor_do_quit(implode(_lines, "\n"));
line_ed.c | 312 | editor_do_quit(0);
line_ed.c | 319 | printf("%-2d] ", _insertion_point + 1);
line_ed.c | 320 | input_to((: editor_loop :));
line_ed.c | 335 | printf("Error: number out of bounds.\n");
line_ed.c | 336 | main_bit("");
line_ed.c | 338 | printf("Modifying from line %d to line %d.\n", num1, num2);
line_ed.c | 339 | printf("Text to change? ");
line_ed.c | 340 | input_to((: editor_modify2 :), 0, num1, num2);
line_ed.c | 345 | printf("Error: line number out of range.\n");
line_ed.c | 346 | main_bit("");
line_ed.c | 349 | printf("Modifying line %d.\n", num1);
line_ed.c | 350 | printf("Text to change? ");
line_ed.c | 351 | input_to((: editor_modify2 :), 0, num1, num1);
line_ed.c | 354 | printf("Error: invalid data %s.\n", str);
line_ed.c | 355 | main_bit("");
line_ed.c | 362 | printf("Aborting.\n");
line_ed.c | 363 | main_bit("");
line_ed.c | 366 | printf("Change to: ");
line_ed.c | 367 | input_to((: editor_modify3 :), 0, range1, range2, str);
line_ed.c | 378 | sizeof(_lines));
line_ed.c | 379 | replace_string(_lines[i], modify_string, str);
line_ed.c | 380 | printf("%3d: %s\n", i + 1, _lines[i]);
line_ed.c | 382 | printf("Done.\n");
line_ed.c | 383 | main_bit("");
line_ed.c | 391 | read_file(_filename);
line_ed.c | 392 | if ((file_size(_filename) >
line_ed.c | 393 | log_file(LOG_FILE, "ed: couldn't rm %s\n", _filename);
line_ed.c | 394 | explode("#" + str, "\n");
line_ed.c | 400 | main_bit("");
line_ed.c | 408 | read_file(_filename);
line_ed.c | 409 | if ((file_size(_filename) >
line_ed.c | 411 | log_file(LOG_FILE, "ed: couldn't rm %s\n", _filename);
line_ed.c | 414 | printf("Aborted.\n");
line_ed.c | 415 | editor_do_quit(0);
line_ed.c | 419 | editor_do_quit(str);
line_ed.c | 421 | editor_do_quit(0);
line_ed.c | 432 | if (str) str = replace(str, "@@", "@ @ ");
line_ed.c | 435 | file_size(_filename) >
line_ed.c | 436 | printf("magic: couldn't remove %s\n" , _filename);
line_ed.c | 445 | evaluate(_end_func, str, _other);
line_ed.c | 447 | evaluate(_end_func, str);
line_ed.c | 451 | call_other(prev_end_object, _end_func, str, _other);
line_ed.c | 453 | call_other(prev_end_object, _end_func, str);
line_ed.c | 458 | destruct(_ed_ob);
line_ed.c | 460 | evaluate(_end_func, str);
line_ed.c | 466 | printf("Returning to the editor.\n");
line_ed.c | 467 | main_bit("");
line_ed.c | 470 | printf("Quitting.\n");
line_ed.c | 471 | editor_do_quit(0);
line_ed.c | 490 | printf("Editor set to %s.\n", str);
line_ed.c | 500 | query_signature(this_object()->query_name());
line_ed.c | 507 | printf("Saving what you are editing.\n");
line_ed.c | 509 | editor_do_quit(implode(_lines, "\n"));
line_ed.c | 511 | editor_finish_ed();
more_string.c | 45 | internal_more_string();
more_string.c | 48 | add_command("Internal_More_String", "<string>", (:internal_more_string:));
more_string.c | 63 | tell_object( this_object(), stuff );
more_string.c | 79 | explode(info->stat_line, "$");
more_string.c | 80 | sizeof(frog);
more_string.c | 109 | tell_object( this_object(), (string)this_object()->fix_string( s ) );
more_string.c | 137 | cat("/doc/helpdir/more");
more_string.c | 142 | evaluate(info->finish_func);
more_string.c | 144 | call_other(info->finish_ob, info->finish_func);
more_string.c | 178 | tell_object( this_object(), "Sorry "+ s1 +" not found.\n" );
more_string.c | 180 | tell_object( this_object(), "Found " + s1 + " on line "+ i +".\n");
more_string.c | 200 | tell_object(this_object(), "Sorry " + s1 + " not found.\n");
more_string.c | 237 | string_display_file(info);
more_string.c | 239 | more_string_status_line(info);
more_string.c | 240 | input_to((: string_next_page :), 0, info);
more_string.c | 244 | call_other(info->finish_ob, info->finish_func);
more_string.c | 251 | more_string_status_line(info);
more_string.c | 252 | input_to((: string_next_page :), 0, info);
more_string.c | 276 | this_object()->ignore_from_history("Internal_More_String something");
more_string.c | 277 | command( "Internal_More_String something" );
more_string.c | 282 | new(class more_string_info);
more_string.c | 293 | notify_fail( "Empty string.\n" );
more_string.c | 296 | explode( this_object()->fix_string( text ), "\n" );
more_string.c | 298 | this_object()->convert_message( text );
more_string.c | 300 | this_object()->fit_message( text );
more_string.c | 302 | this_object()->fix_string( text );
more_string.c | 306 | explode( text, "\n" );
more_string.c | 307 | sizeof( bits );
more_string.c | 308 | reset_eval_cost();
more_string.c | 313 | explode( this_object()->fix_string( bits[ i ], ncols ), "\n" );
more_string.c | 317 | sizeof( info->the_bit );
more_string.c | 319 | string_display_file(info);
more_string.c | 321 | more_string_status_line(info);
more_string.c | 322 | input_to( (: string_next_page :), 0, info );
more_string.c | 332 | call_other( info->finish_ob, func );
more_string.c | 349 | new(class more_string_info);
more_string.c | 353 | previous_object();
more_string.c | 371 | more_string( text, bity, noreline );
wiz_present.c | 37 | file_name(o);
wiz_present.c | 43 | desc_object(o);
wiz_present.c | 61 | wzpresent2(str,ob);
wiz_present.c | 66 | all_inventory(onobj);
wiz_present.c | 71 | all_inventory(onobj);
wiz_present.c | 74 | if (ob->id(s1)) obs += ({ ob });
wiz_present.c | 78 | match_objects_in_environments(str,onobj);
wiz_present.c | 84 | if (obj = present(str,onobj)) return ({ obj });
wiz_present.c | 85 | for (obj = first_inventory(onobj);
wiz_present.c | 86 | file_name(obj);
wiz_present.c | 88 | return ({ obj });
wiz_present.c | 90 | return ({ });
wiz_present.c | 102 | return ({ });
wiz_present.c | 103 | seteuid(geteuid(this_player()));
wiz_present.c | 110 | return ({ ob });
wiz_present.c | 111 | notify_fail("Unable to find living object: "+extract(str,1)+".\n");
wiz_present.c | 112 | return ({ });
wiz_present.c | 115 | if (str == "me") return ({ this_player() });
wiz_present.c | 117 | if (str == "here") return ({ environment(this_player()) });
wiz_present.c | 121 | return ({ });
wiz_present.c | 123 | users();
wiz_present.c | 125 | filter( obs, (: environment( $1 ) == $(onobj) :) );
wiz_present.c | 130 | filter( users(), (: $1->query_creator() :) );
wiz_present.c | 132 | filter( obs, (: environment( $1 ) == $(onobj) :) );
wiz_present.c | 137 | if (ob = find_object(str)) return ({ ob });
wiz_present.c | 140 | map(sts, (: find_object($1) :)) - ({0});
wiz_present.c | 143 | notify_fail("No loaded object: "+str+".\n");
wiz_present.c | 144 | return ({ });
wiz_present.c | 150 | wiz_present(extract(str,1,strlen(str) - 2),onobj);
wiz_present.c | 152 | map(obs, (: environment($1) :)) - ({0});
wiz_present.c | 160 | wiz_present(s2, onobj);
wiz_present.c | 164 | wiz_present(s1, ob, 1);
wiz_present.c | 171 | wiz_present(s1, onobj);
wiz_present.c | 172 | wiz_present(s2, onobj);
wiz_present.c | 173 | filter(obs, (: member_array($1, $(obs2)) < 0 :));
wiz_present.c | 181 | wiz_present(s1, onobj);
wiz_present.c | 182 | wiz_present(s2, onobj);
wiz_present.c | 184 | while ((j=member_array(ob, obs)) >
wiz_present.c | 185 | delete(obs,j--,1);
wiz_present.c | 192 | wiz_present(s1, onobj);
wiz_present.c | 196 | map(obs, (: environment($1) :)) - ({0});
wiz_present.c | 202 | wiz_present(s1, onobj);
wiz_present.c | 205 | file_name(ob);
wiz_present.c | 206 | sscanf(s1, "%s#%*d", s1);
wiz_present.c | 207 | children(s1);
wiz_present.c | 213 | return ({ find_player(s1) });
wiz_present.c | 217 | wzpresent2(str, environment(onobj));
wiz_present.c | 226 | match_objects_in_environments(str,onobj);
wiz_present.c | 234 | find_living( this_player()->expand_nickname(str) );
wiz_present.c | 236 | return ({ ob });
wiz_present.c | 240 | if (objectp(thing)) return ({ thing });
wiz_present.c | 243 | filter( thing, (: objectp( $1 ) :) );
wiz_present.c | 249 | map(sts, (: find_object($1) :)) - ({0});
wiz_present.c | 252 | return ({ });
wiz_info_comm.c | 19 | do_gauge(string str);
wiz_info_comm.c | 20 | add_command(string name, object ob, string format, function func);
wiz_info_comm.c | 24 | add_command("gauge", this_object(), "<string>", (: do_gauge($4[0]) :));
wiz_info_comm.c | 26 | call_out("driver_version", 20);
wiz_info_comm.c | 37 | this_object()->query_property("driver_version");
wiz_info_comm.c | 40 | this_object()->add_property("driver_version", __VERSION__);
wiz_info_comm.c | 43 | this_object()->add_property("driver_version", __VERSION__);
wiz_info_comm.c | 52 | review();
wiz_info_comm.c | 69 | notify_fail("Usage : gauge command.\n");
wiz_info_comm.c | 72 | command(str);
wiz_info_comm.c | 73 | write("\nThe command '" + str + "' took: " + eval_cost + " CPU cycles.\n");
guild-race.c | 36 | GetPaths(command);
guild-race.c | 40 | filter(bing, (: $1[0..15] == "/cmds/guild-race" :));
guild-race.c | 44 | this_object()->AddSearchPath(paths);
guild-race.c | 46 | catch(guild_ob->start_player(this_object()));
guild-race.c | 49 | catch(race_ob->start_player(this_object()));
guild-race.c | 50 | this_object()->query_limbs();
guild-race.c | 78 | extract(str, 1);
guild-race.c | 80 | write("Illegal path to set_race_ob.\n");
guild-race.c | 85 | write("The heavens rumble and the earth shakes.  You stop.\n");
guild-race.c | 113 | tell_object(this_object(), "No such object "+ str +"\n");
guild-race.c | 162 | query_name();
guild-race.c | 174 | new(class command, verb : str);
guild-race.c | 182 | help_function();
guild-race.c | 186 | help();
guild-race.c | 198 | query_known_commands() { return copy(known_commands);
guild-race.c | 209 | return ( member_array( word, known_commands ) != -1 );
guild-race.c | 229 | GetPaths(str);
guild-race.c | 233 | filter(paths, (: $1[0..15] == "/cmds/guild-race" :));
guild-race.c | 235 | this_object()->AddSearchPath(paths);
guild-race.c | 242 | this_player()->query_name(), map( previous_object( -1 ), (: ({ $1,  $1->query_name() }) :) ) );
guild-race.c | 258 | member_array(str, known_commands);
parser.c | 30 | seteuid("Root");
parser.c | 43 | if (!strlen(str) || str[0..0] == close) return ({ args, str[1..<1] });
parser.c | 47 | printf("Unterminated string.\n");
parser.c | 50 | replace_string(s1, "\\n", "\n") });
parser.c | 55 | printf("Unterminated string.\n");
parser.c | 58 | replace_string(s1, "\\n", "\n") });
parser.c | 63 | printf("Unterminated string.\n");
parser.c | 66 | replace_string(s1, "\\n", "\n") });
parser.c | 70 | parse_args(str[1..<1], "}");
parser.c | 80 | printf("Unmatched [.\n");
parser.c | 86 | parse_args(str, ":");
parser.c | 101 | sizeof(m2[0])?m2[0][0]:0);
parser.c | 106 | sizeof(m2[0])?m2[0][0]:0);
parser.c | 113 | printf("Unmatched |\n");
parser.c | 116 | wiz_present(str, this_player());
parser.c | 118 | this_player() });
parser.c | 129 | printf("Number expected.\n");
parser.c | 136 | sscanf(str, "%s,%s", s4, s2);
parser.c | 137 | sscanf(str, "%s"+close+"%s", s5, s3);
parser.c | 139 | strlen(s5) >
parser.c | 140 | strlen(s4) >
parser.c | 144 | printf("'(' expected.\nLine left unprocessed %s\n", s7);
parser.c | 147 | wiz_present(s6, this_player());
parser.c | 149 | printf("The object %s needs to exist.\n", s6);
parser.c | 152 | parse_args(s7, ")");
parser.c | 157 | allocate(6-sizeof(m[0]));
parser.c | 159 | map_array(obs, "mapped_call", this_object(), s1, m[0]);
parser.c | 186 | wiz_present(str, this_player());
parser.c | 189 | sscanf(str, "%d%s", i, str);
parser.c | 192 | replace_string(str, "\\n", "\n") });
parser.c | 205 | return ({ args, str });
parser.c | 208 | return ({ args, str[1..<1] });
parser.c | 211 | printf("Parse error reading arguments, ',' or '%s' expected.\n", close);
parser.c | 212 | printf("Line left unprocessed %s\n", str);
parser.c | 217 | return ({ args, str });
parser.c | 226 | sizeof(argv);
parser.c | 227 | replace(sprintf("%O", argv[i]), "\n", " ");
parser.c | 232 | event_inform(this_object(), str + ") on you", "call");
parser.c | 238 | inform_of_call(ob, argv);
parser.c | 239 | call_other(ob, func, argv ...);
parser.c | 251 | write("The line "+str+" returns: \n");
parser.c | 252 | printf("%O\n", junk[0]);
parser.c | 258 | expr();
parser.c | 270 | this_player()->get_obvar(func[pos][1..<1]);
parser.c | 278 | wiz_present(func[pos], this_player());
parser.c | 291 | expr();
parser.c | 293 | printf("Mismatched brackets.\n");
parser.c | 306 | expr();
parser.c | 309 | printf("Error processing array.\n");
parser.c | 321 | expr();
parser.c | 323 | printf("Error processing mapping, expected :.\n");
parser.c | 327 | expr();
parser.c | 329 | printf("Error processing mapping, expected , or ].\n");
parser.c | 334 | printf("End of mapping.\n");
parser.c | 339 | printf("Broken parser....\n");
parser.c | 358 | file_name(ob));
parser.c | 379 | query_name()), "calls");
parser.c | 391 | bit4();
parser.c | 397 | bit4();
parser.c | 400 | printf("Open bracket expected.\n");
parser.c | 406 | expr();
parser.c | 408 | printf("Error in function arguments.\n");
parser.c | 419 | printf("Array or object expected for function call.\n");
parser.c | 423 | printf("String expected for the function call name.\n");
parser.c | 427 | allocate(6-sizeof(tmp));
parser.c | 429 | sizeof(val1);
parser.c | 430 | do_function_call(val1[i], val2, tmp);
parser.c | 439 | expr();
parser.c | 442 | expr();
parser.c | 444 | printf("Expected closeing ].\n");
parser.c | 449 | printf("Can only use the .. syntax on arrays.\n");
parser.c | 453 | printf("Indexes must be integers.\n");
parser.c | 460 | printf("Expected closeing ].\n");
parser.c | 470 | printf("Can only use integers as an index on an array.\n");
parser.c | 472 | printf("Index out of bounds.\n");
parser.c | 477 | printf("Can only index off arrays or mappings.\n");
parser.c | 490 | bit3();
parser.c | 495 | bit3();
parser.c | 497 | printf("Incompatible types in multiply, both must be integers.\n");
parser.c | 505 | bit3();
parser.c | 507 | printf("Incompatible types in division, both must be integers.\n");
parser.c | 510 | printf("Division by 0 error.\n");
parser.c | 525 | bit2();
parser.c | 530 | bit2();
parser.c | 541 | bit2();
parser.c | 552 | expr();
parser.c | 554 | printf("Cannot use an array or mapping as a variable name.\n");
parser.c | 556 | this_player()->set_obvar(val1, val2);
parser.c | 570 | tokenise(expr);
parser.c | 586 | bit2();
wiz_object_comm.c | 33 | lower_case(s);
wiz_object_comm.c | 34 | return (s == "y" || s == "yes" || s == "ok" || s == "please");
wiz_object_comm.c | 41 | write(desc + " failed : " + erm);
wiz_object_comm.c | 66 | map_delete(obvar, key);
wiz_object_comm.c | 97 | previous_object()));
wiz_object_comm.c | 104 | previous_object()));
wiz_object_comm.c | 111 | previous_object()));
wiz_object_comm.c | 112 | return ({});
player.c | 96 | start_player();
player.c | 97 | public_commands();
player.c | 98 | save();
player.c | 99 | set_desc(string str);
player.c | 100 | do_load_auto();
player.c | 101 | set_name(string str);
player.c | 102 | check_dark(int light);
player.c | 103 | continue_start_player();
player.c | 104 | restart_heart_beat();
player.c | 107 | quit_alt(int verbose);
player.c | 108 | review();
player.c | 109 | toggle_wimpy(string);
player.c | 110 | do_refresh(string);
player.c | 111 | do_cap(string);
player.c | 112 | set_invis(int level);
player.c | 113 | set_player_killer(int);
player.c | 114 | query_player_killer();
player.c | 118 | check_error_count();
player.c | 119 | check_approve_list();
player.c | 127 | create();
player.c | 128 | create();
player.c | 129 | create();
player.c | 130 | create();
player.c | 131 | create();
player.c | 132 | create();
player.c | 133 | add_property("determinate", "");
player.c | 134 | create();
player.c | 135 | time();
player.c | 136 | time();
player.c | 137 | seteuid("PLAYER");
player.c | 143 | set_max_sp(50);
player.c | 144 | set_sp(50);
player.c | 147 | set_desc(0);
player.c | 148 | add_ac("bing", "blunt", 15);
player.c | 149 | add_ac("bing2", "sharp", 15);
player.c | 150 | add_ac("bing3", "pierce", 15);
player.c | 151 | add_property("player", 1);
player.c | 152 | set_cols(79);
player.c | 153 | set_rows(24);
player.c | 154 | time();
player.c | 157 | sscanf(file_name(this_object()), "%s#", my_file_name);
player.c | 159 | add_language("common");
player.c | 161 | new (class player_info, titles: ([ ]), save_inhibit:1);
player.c | 176 | query_name(), "dest");
player.c | 178 | capitalize((string) this_player()->query_name()) + ".\n");
player.c | 191 | dest_me();
player.c | 268 | write("You don't have clearance to do that.\n");
player.c | 271 | seteuid("Root");
player.c | 272 | set_name(bong);
player.c | 276 | query_player_file_name(query_name()), 1 :));
player.c | 280 | set_invis(0);
player.c | 284 | set_invis(2);
player.c | 288 | set_invis(1);
player.c | 292 | disallow_save();
player.c | 293 | add_property("player", 1);
player.c | 295 | set_short(cap_name);
player.c | 296 | add_property("determinate", "");
player.c | 299 | set_cols(79);
player.c | 301 | remove_property("new player");
player.c | 304 | seteuid(query_name());
player.c | 306 | AddSearchPath(({ "/w/" + query_name() + "/cmds" }));
player.c | 311 | seteuid("PLAYER");
player.c | 312 | AddSearchPath(({ DIR_PLAYER_CMDS, DIR_SECURE_PLAYER_CMDS }));
player.c | 315 | printf("You have never logged in before.\n");
player.c | 319 | query_ip_name(this_object()), query_ip_number(this_object()));
player.c | 329 | time();
player.c | 335 | time();
player.c | 337 | add_property("new player!", 1);
player.c | 341 | query_ip_number()));
player.c | 344 | this_player()->set_nationality(DEFAULT_NATIONALITY);
player.c | 348 | query_language();
player.c | 351 | this_player()->add_language(lang);
player.c | 352 | this_player()->set_default_language(lang);
player.c | 353 | this_player()->set_language(lang);
player.c | 355 | write(LOGIN_HANDLER->get_message("/doc/NEWS"));
player.c | 357 | call_out((: continue_start_player :), 0);
player.c | 359 | remove_cache_entry(query_name());
player.c | 365 | move_to_start_pos();
player.c | 367 | command("look");
player.c | 369 | command("glance");
player.c | 374 | command("chfn");
player.c | 383 | no_time_left();
player.c | 384 | logged_on_times(no_logins);
player.c | 388 | resolve(query_ip_number(this_object()), "");
player.c | 416 | time() - last_log_on) / 3600);
player.c | 438 | if (sizeof(replies) >
player.c | 441 | sizeof(replies) >
player.c | 449 | write("\n%^BOLD%^%^RED%^You are logged in uncompressed!\n");
player.c | 451 | mud_name() + " system.%^RESET%^\n\n");
player.c | 470 | start_player();
player.c | 471 | no_time_left();
player.c | 475 | call_out((: remove_property :), 10 + random(30), PASSED_OUT);
player.c | 477 | remove_property(UNKNOWN_MOVE);
player.c | 478 | remove_property(RUNNING_MOVE);
player.c | 479 | init_after_save();
player.c | 480 | printf("%s", fix_string(MAILER->new_mail(query_name())));
player.c | 481 | query_newsrc(query_name());
player.c | 485 | get_subjects("announcements");
player.c | 488 | write("\nThere are %^YELLOW%^NEW%^RESET%^ announcements.  ");
player.c | 489 | write("You can read them with \"news\".\n\n");
player.c | 490 | do_list();
player.c | 491 | printf("You can read then with \"news\".\n\n");
player.c | 495 | call_out((: check_mccp :), 4);
player.c | 498 | clone_object(DEATH_SHADOW))->setup_shadow(this_object());
player.c | 500 | clone_object(DEAD_BOOK);
player.c | 501 | move(this_object());
player.c | 504 | person_died(query_name());
player.c | 506 | exec_alias("login", "");
player.c | 507 | update_activity(1);
player.c | 508 | time();
player.c | 509 | query_title(query_name());
player.c | 514 | check_error_count();
player.c | 516 | check_approve_list();
player.c | 521 | player_created(query_name());
player.c | 524 | mud_name() + " for the first time!", "new-player");
player.c | 525 | remove_property("new player!");
player.c | 526 | set_last_pos(CONFIG_NEWBIE_START_LOCATION);
player.c | 527 | start_player(this_object());
player.c | 529 | add_language("common");
player.c | 530 | check_family_name();
player.c | 531 | call_out((: move_to_start_pos :), 0);
player.c | 532 | call_out((: set_heart_beat(1) :), 1);
player.c | 534 | do_error_replies(query_name(), 1, (: display_bug_replies :));
player.c | 544 | query_name();
player.c | 549 | this_object(), my_name :) );
player.c | 561 | if ( file_size("/w/" + my_name + "/" + PLAYER_ERROR_LOG) >
player.c | 562 | file_length("/w/" + my_name + "/" + PLAYER_ERROR_LOG);
player.c | 569 | if ( status == DB_SUCCESS && sizeof( data ) >
player.c | 570 | if ( ( ret = data[0]["idc"] ) >
player.c | 584 | master()->query_directory_assignments();
player.c | 603 | this_player()->all_commands();
player.c | 604 | this_player()->app_commands();
player.c | 605 | this_player()->wiz_commands();
player.c | 607 | call_out((: do_load_auto :), 1);
player.c | 608 | reset_get();
player.c | 609 | enable_commands();
player.c | 610 | public_commands();
player.c | 611 | command_commands();
player.c | 612 | parser_commands();
player.c | 613 | force_commands();
player.c | 614 | race_guild_commands();
player.c | 615 | soul_commands();
player.c | 616 | event_commands();
player.c | 617 | finger_commands();
player.c | 618 | communicate_commands();
player.c | 619 | living_commands();
player.c | 620 | logging_commands();
player.c | 621 | editor_commands();
player.c | 623 | set_living_name(query_name());
player.c | 625 | set_no_check(1);
player.c | 626 | set_con(Con);
player.c | 627 | set_dex(Dex);
player.c | 628 | set_int(Int);
player.c | 629 | set_str(Str);
player.c | 630 | set_wis(Wis);
player.c | 631 | reset_all();
player.c | 632 | set_current_path(query_home_dir());
player.c | 637 | call_out((: update_tmps :), 900);
player.c | 652 | query_hp();
player.c | 653 | adjust_hp(number, attacker, weapon, attack);
player.c | 665 | set_auto_load_string(0);
player.c | 666 | allow_save();
player.c | 674 | add_command("restart", this_object(), "", (: restart_heart_beat() :));
player.c | 675 | add_command("save", this_object(), "", (: save() :));
player.c | 676 | add_command("quit", this_object(), "", (: quit_alt(-1) :));
player.c | 677 | add_command("quit", this_object(), "brief", (: quit_alt(0) :));
player.c | 678 | add_command("quit", this_object(), "verbose", (: quit_alt(1) :));
player.c | 679 | add_command("review", this_object(), "", (: review() :));
player.c | 680 | add_command("wimpy", this_object(), "", (: toggle_wimpy(0) :));
player.c | 682 | toggle_wimpy($4[0]) :));
player.c | 684 | do_refresh($4[0]) :));
player.c | 685 | add_command("cap", this_object(), "<word'name'>", (: do_cap($4[0]) :));
player.c | 696 | command("glance" + (str ? " " + str : ""));
player.c | 708 | command(str ? "look" + str : "look");
player.c | 716 | write("Entry  : " + query_msgin() + "\n");
player.c | 717 | write("Exit   : " + query_msgout() + "\n");
player.c | 718 | write("MEntry : " + query_mmsgin() + "\n");
player.c | 719 | write("MExit  : " + query_mmsgout() + "\n");
player.c | 720 | write("Editor : " + query_editor() + "\n");
player.c | 734 | look_me(arg ? " at " + arg : "");
player.c | 753 | query_family_name();
player.c | 761 | query_player_title();
player.c | 785 | write("You are in brave mode.\n");
player.c | 786 | write("Usage: wimpy <num> (caution read help wimpy)\n");
player.c | 790 | notify_fail("You must set your wimpy to a number.\n");
player.c | 792 | notify_fail("Your wimpy must be between 0 and 30%.\n");
player.c | 793 | this_object()->set_wimpy(number);
player.c | 794 | printf("Wimpy set to %d%%\n", wimpy);
player.c | 820 | tell_object(this_object(), "You saved only a few minutes ago.\n");
player.c | 823 | time();
player.c | 835 | tell_object(this_object(), "You're too young to save... sorry.\n");
player.c | 840 | tell_object(this_object(), "Saving...\n");
player.c | 841 | this_object()->save_me();
player.c | 855 | write("Not saving for players currently.\n");
player.c | 864 | tell_object(this_object(), "But not saving for guests... Sorry.\n");
player.c | 876 | player_save(this_object());
player.c | 879 | player_save(this_object());
player.c | 881 | geteuid();
player.c | 883 | check_last_pos();
player.c | 886 | effect_freeze();
player.c | 887 | effects_saving();
player.c | 889 | create_auto_load(all_inventory(), 1);
player.c | 897 | time();
player.c | 900 | query_player_file_name(query_name()), 3 :)));
player.c | 904 | query_player_file_name(query_name()), 1 :)));
player.c | 907 | time();
player.c | 908 | save_all_item_states(this_object()->query_name());
player.c | 909 | effect_unfreeze();
player.c | 912 | set_auto_load_string(0);
player.c | 922 | write("Not saving for players currently.\n");
player.c | 927 | write("But not saving for guests... sorry.\n");
player.c | 931 | tell_object(this_object(), "You're too young to save... sorry.\n");
player.c | 942 | player_save(this_object());
player.c | 945 | player_save(this_object());
player.c | 947 | geteuid();
player.c | 950 | effect_freeze();
player.c | 951 | effects_saving();
player.c | 952 | set_auto_load_string(al);
player.c | 953 | if (((time() - time_on) >
player.c | 958 | time();
player.c | 970 | time();
player.c | 972 | effect_unfreeze();
player.c | 986 | query_verbose("quit");
player.c | 991 | dest_me();
player.c | 1007 | check_last_pos();
player.c | 1009 | update_activity(0);
player.c | 1010 | time();
player.c | 1013 | catch(this_object()->event_quit(this_object()));
player.c | 1014 | catch(environment(this_object())->event_quit(this_object()));
player.c | 1016 | catch(editor_check_do_quit());
player.c | 1019 | say(query_cap_name() + " leaves the game.\n");
player.c | 1020 | catch(move("/room/departures"));
player.c | 1023 | query_cap_name() + " leaves " + mud_name() + "", "logon", this_object());
player.c | 1025 | catch(LOGIN_HANDLER->player_logout(query_name()));
player.c | 1027 | catch(race_ob->player_quit(this_object()));
player.c | 1030 | catch(guild_ob->player_quit(this_object()));
player.c | 1033 | clone_object("/obj/monster/greco");
player.c | 1034 | move("/room/departures");
player.c | 1035 | get_rid_of(this_object(), verbose);
player.c | 1047 | quit_alt(-1);
player.c | 1065 | dest_me();
player.c | 1069 | check_last_pos();
player.c | 1071 | update_activity(0);
player.c | 1072 | time();
player.c | 1074 | catch(editor_check_do_quit());
player.c | 1077 | catch(this_object()->event_quit(this_object()));
player.c | 1078 | catch(environment(this_object())->event_quit(this_object()));
player.c | 1080 | tell_object(this_object(), "Thanks for playing.  See you next time.\n");
player.c | 1081 | say(query_cap_name() + " leaves the game.\n");
player.c | 1084 | query_cap_name() + " leaves " + mud_name() + "", "logon", this_object());
player.c | 1086 | catch(LOGIN_HANDLER->player_logout(query_name()));
player.c | 1088 | catch(race_ob->player_quit(this_object()));
player.c | 1091 | catch(guild_ob->player_quit(this_object()));
player.c | 1094 | catch(save_me());
player.c | 1097 | reset_eval_cost();
player.c | 1098 | catch( inv->set_tracked_item_status_reason("QUIT") );
player.c | 1099 | catch( inv->dest_me() );
player.c | 1103 | save_all_item_states_delete_cache(this_object()->query_name()));
player.c | 1104 | effects_quiting();
player.c | 1107 | reset_eval_cost();
player.c | 1110 | destruct(this_object());
player.c | 1125 | copy(_pinfo->titles);
player.c | 1137 | implode(m_values(_pinfo->titles), ", ");
player.c | 1163 | map_delete(_pinfo->titles, type);
player.c | 1201 | set_name(str);
player.c | 1202 | set_living_name(query_name());
player.c | 1203 | set_main_plural(query_name());
player.c | 1231 | query_player_title();
player.c | 1238 | query_short();
player.c | 1239 | query_family_name();
player.c | 1241 | query_family_name();
player.c | 1249 | query_desc(this_object());
player.c | 1252 | query_nationality_description(this_player());
player.c | 1266 | calc_extra_look();
player.c | 1277 | calc_extra_look();
player.c | 1278 | weather_extra_look();
player.c | 1279 | query_living_contents(0);
player.c | 1298 | add_property("dead", time());
player.c | 1304 | effects_thru_death();
player.c | 1305 | make_corpse();
player.c | 1306 | reset_protectors();
player.c | 1309 | query_property ("death mess");
player.c | 1314 | strip_colours (death_mess);
player.c | 1315 | replace (death_mess, ({"\n", "", "\a", ""}));
player.c | 1322 | capitalize(query_pronoun()) + " is mourned.\n");
player.c | 1325 | complete_death(query_name());
player.c | 1326 | move(PLAYER_MORGUE);
player.c | 1328 | move(environment());
player.c | 1330 | call_out((: save_me :), 0);
player.c | 1332 | person_died(query_name());
player.c | 1334 | person_died(query_name());
player.c | 1336 | clone_object(DEATH_SHADOW)->setup_shadow(this_object());
player.c | 1338 | member_died(this_object());
player.c | 1342 | set_sp(0);
player.c | 1343 | set_max_sp(50);
player.c | 1346 | reset_spells();
player.c | 1347 | reset_processes();
player.c | 1349 | remove_call_out(_pinfo->update_tmps_call_out);
player.c | 1350 | adjust_tmp_con(-2);
player.c | 1351 | adjust_tmp_dex(-2);
player.c | 1352 | adjust_tmp_int(-2);
player.c | 1353 | adjust_tmp_str(-2);
player.c | 1354 | adjust_tmp_wis(-2);
player.c | 1371 | query_objective() + ".\n");
player.c | 1380 | remove_property("dead");
player.c | 1381 | tell_object(this_object(), "You reappear in a more solid form.\n");
player.c | 1383 | member_resurrected(this_object());
player.c | 1385 | say(query_cap_name() + " appears in more solid form.\n");
player.c | 1387 | set_hp(1);
player.c | 1389 | set_personal_temp(0);
player.c | 1391 | this_object()->dest_death_shadow();
player.c | 1392 | save_me();
player.c | 1393 | all_inventory()->recovery_from_death();
player.c | 1409 | say(query_name() + " vanishes in a puff of logic.\n");
player.c | 1410 | quit();
player.c | 1416 | query_possessive() + " link", "link-death", this_object());
player.c | 1417 | check_last_pos();
player.c | 1418 | player_net_dead(query_name());
player.c | 1420 | save_me();
player.c | 1422 | event(environment(), "net_dead", this_object());
player.c | 1434 | write("You idled out, sorry.\n");
player.c | 1435 | quit();
player.c | 1448 | print_messages();
player.c | 1449 | flush_queue();
player.c | 1454 | query_idle(this_object());
player.c | 1466 | call_out((: idle_out :), 2);
player.c | 1472 | heart_beat();
player.c | 1473 | adjust_sp(1);
player.c | 1474 | adjust_xp(3);
player.c | 1475 | update_volumes();
player.c | 1477 | this_object()->do_spell_effects(0);
player.c | 1486 | calc_personal_temp();
player.c | 1487 | adjust_max_sp(1);
player.c | 1518 | tell_object(this_object(), "> ");
player.c | 1531 | tell_object(this_object(), "> ");
player.c | 1534 | this_player()->query_property("prompt");
player.c | 1535 | strlen(stuff);
player.c | 1538 | query_hp() * 100) / query_max_hp());
player.c | 1554 | query_hp() * 100) / query_max_hp());
player.c | 1570 | query_gp() * 100) / query_max_gp();
player.c | 1586 | query_gp() * 100) / query_max_gp();
player.c | 1602 | query_sp() * 100) / query_max_sp();
player.c | 1618 | query_sp() * 100) / query_max_sp();
player.c | 1635 | query_xp();
player.c | 1639 | if (sizeof(prompt) >
player.c | 1640 | sprintf("%c", stuff[i]);
player.c | 1644 | tell_object(this_object(), fix_string(prompt));
player.c | 1657 | become_flummoxed();
player.c | 1658 | run_away();
player.c | 1660 | tell_object(this_object(), "Your feet run away with you!\n");
player.c | 1676 | time();
player.c | 1686 | return (MATURITY * 60 * 60 + time_on < time());
player.c | 1703 | return (int) RACE_STD->query_dark(light);
player.c | 1717 | query_level(this_object());
player.c | 1723 | query_property("backup guild");
player.c | 1725 | query_level(this_object());
player.c | 1727 | query_level(this_object());
player.c | 1729 | time();
player.c | 1741 | set_heart_beat(1);
player.c | 1742 | write("Ok, heart_beat restarted.\n");
player.c | 1772 | write("Illegal attempt to set creator!\n");
player.c | 1776 | file_name(previous_object()) + "\n");
player.c | 1780 | set_home_dir("/w/" + query_name());
player.c | 1781 | save_me();
player.c | 1834 | return (max_deaths += i);
player.c | 1846 | environment();
player.c | 1848 | move(dest, msgin, msgout);
player.c | 1850 | me_moveing(env);
player.c | 1860 | notify_fail("Guests cannot refresh, sorry.\n");
player.c | 1863 | notify_fail("Please read the docs before using this command.\n");
player.c | 1867 | input_to("refresh_docs");
player.c | 1876 | lower_case(str);
player.c | 1878 | write("Ok, not refreshing.\n");
player.c | 1881 | create_nroff( "/doc/helpdir/refresh", helpfile );
player.c | 1882 | cat_file( helpfile );
player.c | 1883 | write ( helpfile[0..670] );
player.c | 1886 | input_to("refresh3");
player.c | 1897 | lower_case(str);
player.c | 1901 | input_to("refresh2");
player.c | 1905 | write("Ok, not refreshing.\n");
player.c | 1908 | write("Doing refresh.\n");
player.c | 1917 | catch(guild_ob->delete_member(query_name()));
player.c | 1920 | player_refreshed(this_object(), PARTIAL_REFRESH);
player.c | 1923 | set_al(0);
player.c | 1926 | catch(DEITY->delete_worshipper(query_deity(), query_name()));
player.c | 1927 | catch(DEITY->delete_priest(query_deity(), query_name()));
player.c | 1930 | set_deity(0);
player.c | 1931 | set_skills(0);
player.c | 1934 | remove_playtester(query_name());
player.c | 1940 | remove_member(query_family_name(), query_name());
player.c | 1941 | set_family_name(0);
player.c | 1944 | reset_effects();
player.c | 1945 | reset_spells();
player.c | 1946 | reset_processes();
player.c | 1947 | setup_default_titles();
player.c | 1949 | set_guild_data(0);
player.c | 1953 | time();
player.c | 1954 | totaly_zap_bonus_cache();
player.c | 1956 | reset_starts();
player.c | 1957 | race_guild_commands();
player.c | 1958 | totaly_zap_stat_cache();
player.c | 1959 | allocate(D_SIZEOF);
player.c | 1963 | query_version() ]);
player.c | 1964 | this_object()->remove_ghost();
player.c | 1965 | set_nationality(0);
player.c | 1966 | set_nationality_region(0);
player.c | 1967 | set_language("general");
player.c | 1968 | set_default_language("general");
player.c | 1969 | reset_all();
player.c | 1971 | this_player()->query_group();
player.c | 1973 | remove_member(group, this_player(), " refreshed themselves.");
player.c | 1976 | set_last_pos(CONFIG_NEWBIE_START_LOCATION);
player.c | 1977 | give_junk(this_object());
player.c | 1981 | catch(ob->stop_fight(this_object()));
player.c | 1982 | catch(stop_fight(ob));
player.c | 1985 | call_out((: move_to_start_pos :), 0);
player.c | 1988 | write("Done refreshing.\n");
player.c | 1989 | say(cap_name + " refreshes " + query_objective() + "self.\n");
player.c | 1990 | save_me();
player.c | 2004 | lower_case(str);
player.c | 2008 | input_to("refresh3");
player.c | 2012 | write("Ok, not refreshing.\n");
player.c | 2015 | write("Ok, refreshing totally.\n");
player.c | 2018 | query_property("dropped")[0] == query_name() :));
player.c | 2019 | move(CONFIG_NEWBIE_START_LOCATION);
player.c | 2020 | refresh2("y", 1);
player.c | 2021 | set_player_killer(0);
player.c | 2023 | player_refreshed(this_object(), TOTAL_REFRESH);
player.c | 2027 | all_inventory();
player.c | 2029 | dest_me();
player.c | 2034 | move("/room/rubbish");
player.c | 2040 | catch(CLUB_HANDLER->remove_member(club, this_player()->query_name()));
player.c | 2044 | this_player()->query_name()));
player.c | 2045 | call_out("check_family_name", 2);
player.c | 2048 | write("Done refreshing.\n");
player.c | 2049 | say(cap_name + " refreshes " + query_objective() + "self.\n");
player.c | 2050 | save_me();
player.c | 2074 | notify_fail("Syntax: " + query_verb() + " <cap_name>\n");
player.c | 2080 | write("Capitalized name set to " + cap_name + ".\n");
player.c | 2103 | event_enter(thing, mess, from);
player.c | 2104 | event_enter(thing, mess, from);
player.c | 2114 | event_exit(thing, mess, to);
player.c | 2115 | event_exit(thing, mess, to);
player.c | 2125 | parse_command_id_list() + family::parse_command_id_list();
player.c | 2127 | parse_command_id_list() + family::parse_command_id_list();
player.c | 2138 | parse_command_plural_id_list();
player.c | 2141 | parse_command_plural_id_list();
player.c | 2151 | parse_command_adjectiv_id_list();
player.c | 2230 | add_property(RPMODE, 1);
player.c | 2232 | remove_property(RPMODE);
player.c | 2240 | query_property(RPMODE);
newbie_junk.c | 35 | seteuid(getuid());
newbie_junk.c | 38 | request_item( "bucket small", 100 );
newbie_junk.c | 39 | set_short( "champagne bucket" );
newbie_junk.c | 42 | add_adjective( "champagne", "wine" );
newbie_junk.c | 43 | add_alias( "cooler" );
newbie_junk.c | 46 | move(this_player());
newbie_junk.c | 48 | clone_object( "/obj/bottle" );
newbie_junk.c | 49 | set_max_volume( 750 );
newbie_junk.c | 50 | set_name( "bottle" );
newbie_junk.c | 51 | set_short( "champagne bottle" );
newbie_junk.c | 52 | set_main_plural( "champagne bottles" );
newbie_junk.c | 53 | add_adjective( "champagne" );
newbie_junk.c | 54 | add_alias( "champagne" );
newbie_junk.c | 56 | mud_name() + ".\n" );
newbie_junk.c | 57 | set_weight( 5 );
newbie_junk.c | 58 | set_max_weight( 20 );
newbie_junk.c | 59 | set_full_weight( 25 );
newbie_junk.c | 60 | set_volume( 750 );
newbie_junk.c | 61 | set_value( 400 );
newbie_junk.c | 62 | set_leak_rate( 0 );
newbie_junk.c | 63 | clone_object("/obj/reagents/generic_liquid.ob");
newbie_junk.c | 64 | set_name("champagne");
newbie_junk.c | 65 | set_short("fine champagne");
newbie_junk.c | 66 | set_long("This is a fine champagne, $amount_size$.\n");
newbie_junk.c | 67 | set_medium_alias("Champagne");
newbie_junk.c | 68 | add_eat_effect("/std/effects/ingested/drunk", 500);
newbie_junk.c | 69 | set_amount(750);
newbie_junk.c | 70 | move(bottle);
newbie_junk.c | 71 | clone_object("/obj/misc/label");
newbie_junk.c | 83 | add_effect("/std/effects/object/label", label);
newbie_junk.c | 84 | move( bucket );
newbie_junk.c | 86 | clone_object("/obj/armour");
newbie_junk.c | 87 | set_name("sash");
newbie_junk.c | 88 | set_long("A large colourful sash.\n");
newbie_junk.c | 92 | set_type( "sash" );
newbie_junk.c | 93 | set_weight(3);
newbie_junk.c | 94 | set_adjective(({ "large", "colourful" }));
newbie_junk.c | 95 | setup_armour(1000);
newbie_junk.c | 96 | set_damage_chance(10);
newbie_junk.c | 99 | dest_me();
newbie_junk.c | 101 | wear_armour( ob );
newbie_junk.c | 103 | request_item( "torch" );
newbie_junk.c | 108 | move( pl );
newbie_junk.c | 110 | clone_object( "/d/liaison/NEWBIE/newbie_book" );
newbie_junk.c | 111 | move( pl );
newbie_junk.c | 113 | adjust_money( 8, "Pumpkin dollar" );
newbie_junk.c | 114 | adjust_money( 100, "Pumpkin pence" );
newbie_junk.c | 118 | call_out("start_player", 2, pl);
newbie_junk.c | 130 | this_player()->remove_property("binky level");
newbie_junk.c | 134 | clone_object(CABBAGE);
newbie_junk.c | 137 | move(environment(this_player()));
newbie_junk.c | 138 | set_owner(this_player());
newbie_junk.c | 139 | init_command("follow "+this_player()->query_name());
newbie_junk.c | 147 | clone_object("/obj/clothing");
newbie_junk.c | 148 | set_name("badge");
newbie_junk.c | 149 | set_type("badge");
newbie_junk.c | 150 | set_short("fruitbat flavoured badge");
newbie_junk.c | 151 | add_adjective(({ "fruitbat", "flavoured" }));
newbie_junk.c | 152 | set_weight(1);
newbie_junk.c | 153 | set_damage_chance(5);
newbie_junk.c | 154 | setup_clothing(10000);
newbie_junk.c | 159 | this_player()->query_default_language());
newbie_junk.c | 162 | move(environment(this_player()));
newbie_junk.c | 170 | clone_object("/obj/misc/paper");
newbie_junk.c | 172 | this_player()->query_default_language());
newbie_junk.c | 174 | move(environment(this_player()));
newbie_junk.c | 184 | clone_object(LEMON);
newbie_junk.c | 185 | set_owner(this_player());
newbie_junk.c | 193 | clone_object(STICK);
newbie_junk.c | 195 | move(environment(this_player()));
newbie_junk.c | 202 | clone_object(CAT);
newbie_junk.c | 203 | set_owner(this_player());
newbie_junk.c | 207 | move(environment(this_player()));
newbie_junk.c | 210 | clone_object(BUG);
newbie_junk.c | 215 | move(this_player());
newbie_junk.c | 218 | clone_object(BINKY_KEY);
newbie_junk.c | 219 | move(this_player());
newbie_junk.c | 227 | clone_object(BINKY_TOY);
newbie_junk.c | 228 | move(environment(this_player()));
newbie_junk.c | 237 | clone_object(BINKY_COMB);
newbie_junk.c | 238 | move(this_player());
newbie_junk.c | 245 | clone_object(BINKY_BRUSH);
newbie_junk.c | 246 | move(this_player());
newbie_junk.c | 254 | this_player()->query_time_on();
newbie_junk.c | 255 | if (bing / (24 * 60 * 60) >
newbie_junk.c | 256 | this_player()->add_player_title("old man");
newbie_junk.c | 257 | this_player()->add_player_title("old woman");
communicate.c | 33 | drunk_speech(string str);
communicate.c | 34 | expand_nickname(string str);
communicate.c | 35 | converse(string);
communicate.c | 36 | do_write(string);
communicate.c | 37 | do_repeat(string);
communicate.c | 38 | query_current_language();
communicate.c | 41 | add_command("converse", "", (: converse(0) :));
communicate.c | 42 | add_command("converse", "<string'person'>", (: converse($4[0]) :));
communicate.c | 43 | add_command("frimble", "<string>", (: do_write($4[0]) :));
communicate.c | 44 | add_command("repeat", "<string'command'>", (: do_repeat($4[0]) :));
communicate.c | 50 | sqrt(this_object()->query_time_on() / -15);
communicate.c | 75 | query_real_max_sp();
communicate.c | 87 | set_max_sp( int number ) { return adjust_max_sp( number - _sp[1] );
communicate.c | 105 | adjust_max_sp(1);
communicate.c | 117 | adjust_sp( number - _sp[0] );
communicate.c | 125 | event( thing, type, start, rest, lang, accent );
communicate.c | 135 | event(ob, event_type, start, type, words, others, lang, me, accent);
communicate.c | 141 | event(ob, event_type, start, type, words, others, lang, me, accent);
communicate.c | 146 | notify_fail("Syntax: "+query_verb()+" <string>\n");
communicate.c | 149 | write(sprintf("$I$0=%s\n", arg));
communicate.c | 150 | this_player()->adjust_time_left(-DEFAULT_TIME);
communicate.c | 156 | notify_fail(capitalize(query_current_language())+" is not a spoken language.\n");
communicate.c | 165 | lower_case(str);
communicate.c | 166 | this_object()->expand_nickname(str);
communicate.c | 167 | find_player(str);
communicate.c | 169 | find_living(str);
communicate.c | 171 | notify_fail("Syntax: converse [player]\n");
communicate.c | 175 | notify_fail("You have a nice conversation with yourself. Gee, what fun.\n");
communicate.c | 179 | write("Give '**' to stop.\n");
communicate.c | 180 | write("] ");
communicate.c | 181 | input_to("do_converse");
communicate.c | 187 | write("Ok.\n");
communicate.c | 193 | cmd( str );
communicate.c | 196 | environment()->trap_tell( str, converse_ob, 1 );
communicate.c | 198 | cmd( str, converse_ob, 1 );
communicate.c | 199 | write("] ");
communicate.c | 200 | input_to("do_converse");
communicate.c | 216 | query_language_spoken_skill(lang);
communicate.c | 217 | this_object()->query_skill(skill);
communicate.c | 218 | this_object()->add_skill_level(skill, 100 - lvl);
communicate.c | 223 | query_language_written_skill(lang);
communicate.c | 224 | this_object()->query_skill(skill);
communicate.c | 225 | this_object()->add_skill_level(skill, 100 - lvl);
communicate.c | 237 | new(class language_info);
communicate.c | 252 | fixup_lang_class();
communicate.c | 263 | fixup_lang_class();
communicate.c | 274 | fixup_lang_class();
communicate.c | 283 | fixup_lang_class();
communicate.c | 294 | fixup_lang_class();
communicate.c | 305 | fixup_lang_class();
communicate.c | 311 | notify_fail("Syntax: repeat <cmd>\n");
communicate.c | 314 | input_to("do_wombat_repeat", 0, str);
communicate.c | 317 | write("] ");
communicate.c | 325 | write("Doing '"+com+" "+str+"\n");
communicate.c | 326 | command(com+" "+str);
communicate.c | 327 | write("] ");
communicate.c | 328 | input_to("do_wombat_repeat", 0, com);
communicate.c | 343 | this_object()->query_property( "ignoring" );
communicate.c | 346 | member_array( $1 && $1->query_name(), $(ignore) ) > -1 :) );
communicate.c | 359 | filter(people, (: sizeof($1->query_ignoring( ({ this_player() }) )) :));
communicate.c | 374 | time() + (60 * 15), list });
wiz_file_comm.c | 34 | change_dir(string str);
wiz_file_comm.c | 35 | pushd(string str);
wiz_file_comm.c | 36 | popd();
wiz_file_comm.c | 37 | set_home_dir(string str);
wiz_file_comm.c | 38 | visible();
wiz_file_comm.c | 39 | invisible(string level);
wiz_file_comm.c | 40 | allow(string word);
wiz_file_comm.c | 41 | disallow(string word);
wiz_file_comm.c | 45 | create();
wiz_file_comm.c | 46 | create();
wiz_file_comm.c | 56 | wiz_commands();
wiz_file_comm.c | 57 | wiz_commands();
wiz_file_comm.c | 58 | wiz_commands();
wiz_file_comm.c | 59 | wiz_commands();
wiz_file_comm.c | 62 | le_commands();
wiz_file_comm.c | 66 | add_command("cd", this_object(), "<string'directory'>", (: change_dir($4[0]) :));
wiz_file_comm.c | 67 | add_command("cd", this_object(), "", (: change_dir(0) :));
wiz_file_comm.c | 68 | add_command("pushd", this_object(), "<string'directory'>", (: pushd($4[0]) :));
wiz_file_comm.c | 69 | add_command("pushd", this_object(), "", (: pushd(0) :));
wiz_file_comm.c | 70 | add_command("popd", this_object(), "", (: popd() :));
wiz_file_comm.c | 71 | add_command("homedir", this_object(), "<string'directory'>", (: set_home_dir($4[0]) :));
wiz_file_comm.c | 72 | add_command("visible", this_object(), "", (: visible() :));
wiz_file_comm.c | 73 | add_command("vis", this_object(), "", (: visible() :));
wiz_file_comm.c | 74 | add_command("invisible", this_object(), "{1|2|3}", (: invisible($4[0]) :));
wiz_file_comm.c | 75 | add_command("invis", this_object(), "", (: invisible("1") :));
wiz_file_comm.c | 77 | add_command("invis", this_object(), "{1|2|3}", (: invisible($4[0]) :));
wiz_file_comm.c | 79 | add_command("allow", this_object(), "<word'name'>", (: allow($4[0]) :));
wiz_file_comm.c | 80 | add_command("allow", this_object(), "", (: allow(0) :));
wiz_file_comm.c | 81 | add_command("disallow", this_object(), "<word'name'>", (: disallow($4[0]) :));
wiz_file_comm.c | 82 | add_command("disallow", this_object(), "all", (: disallow("all") :));
wiz_file_comm.c | 106 | copy(allowed);
wiz_file_comm.c | 123 | query_friend_tag(str);
wiz_file_comm.c | 140 | return ({ });
wiz_file_comm.c | 153 | notify_fail("You are already visible.\n");
wiz_file_comm.c | 157 | player_logon(this_player()->query_name());
wiz_file_comm.c | 161 | write("You appear.\n");
wiz_file_comm.c | 177 | sprintf("%d", query_invis());
wiz_file_comm.c | 183 | master()->query_trustee(query_name());
wiz_file_comm.c | 190 | notify_fail("You are already "+ word +" invisible.\n");
wiz_file_comm.c | 194 | player_login(this_player()->query_name());
wiz_file_comm.c | 198 | write("You become "+ word +" invisible.\n");
wiz_file_comm.c | 214 | write("You are not allowing anyone to refer to you.\n");
wiz_file_comm.c | 223 | lower_case(word);
wiz_file_comm.c | 227 | notify_fail("There is no user called $C$"+ word +".\n");
wiz_file_comm.c | 235 | write(word +" is now allowed to refer to you.\n");
wiz_file_comm.c | 248 | notify_fail("Disallow who?\n");
wiz_file_comm.c | 252 | write("Cleared your allow list.\n");
wiz_file_comm.c | 254 | lower_case(word);
wiz_file_comm.c | 256 | write(word +" is no longer allowed to refer to you.\n");
wiz_file_comm.c | 277 | query_name();
wiz_file_comm.c | 279 | query_visible(thing);
wiz_file_comm.c | 282 | query_visible(thing);
wiz_file_comm.c | 287 | return (int)master()->query_trustee(word);
wiz_file_comm.c | 289 | return (int)master()->query_director(word);
wiz_file_comm.c | 291 | return (int)thing->query_creator();
wiz_file_comm.c | 293 | query_visible(thing);
wiz_file_comm.c | 304 | query_in_editor();
wiz_file_comm.c | 335 | query_home_dir();
wiz_file_comm.c | 339 | this_object()->expand_nickname( str );
wiz_file_comm.c | 343 | get_files(str);
wiz_file_comm.c | 344 | if (sizeof(filenames) >
wiz_file_comm.c | 355 | if (sizeof(obs) >
wiz_file_comm.c | 367 | printf("cd: %s: Not a directory.\n", str);
wiz_file_comm.c | 369 | set_current_path(str);
wiz_file_comm.c | 371 | printf("%s\n", query_current_path());
wiz_file_comm.c | 384 | query_current_path() });
wiz_file_comm.c | 385 | change_dir(str);
wiz_file_comm.c | 399 | delete(dir_list, sizeof(dir_list)-1, 1);
wiz_file_comm.c | 400 | change_dir(dest);
wiz_file_comm.c | 408 | query_current_path();
wiz_file_comm.c | 422 | set_home_dir(get_path(str));
wiz_file_comm.c | 424 | printf("Home directory set to %s.\n", query_home_dir());
wiz_file_comm.c | 435 | query_property("ed_setup");
wiz_file_comm.c | 445 | add_property("ed_setup", i);
wiz_file_comm.c | 454 | review();
wiz_file_comm.c | 455 | review();
wiz_file_comm.c | 474 | strsrch(inp, '@');
wiz_file_comm.c | 476 | strsrch(inp, ' ');
wiz_file_comm.c | 481 | strsrch(inp, '`');
wiz_file_comm.c | 484 | strsrch(inp, '`', -1);
wiz_file_comm.c | 489 | do_exec("return "+lpc, ref err);
wiz_file_comm.c | 495 | file_name(ret);
wiz_file_comm.c | 498 | filter(ret, (:stringp($1) || intp($1) || objectp($1):));
wiz_file_comm.c | 499 | map(ret, (:intp($1)?""+$1:(objectp($1)?file_name($1):$1):));
wiz_file_comm.c | 501 | implode(ret, ",");
wiz_file_comm.c | 510 | process_input(inp);
wiz_file_comm.c | 514 | command( txt );
new_parse.c | 42 | pattern_match(string *bits, mixed *pattern);
new_parse.c | 45 | get_fail_messages(string verb, object *fail_obs);
new_parse.c | 46 | print_special_messages(string verb);
new_parse.c | 47 | query_word_list(string bing);
new_parse.c | 48 | remove_object2(object ob, int flag);
new_parse.c | 49 | remove_object_force(object ob);
new_parse.c | 52 | syntax_messages(string str);
new_parse.c | 53 | query_name();
new_parse.c | 61 | create();
new_parse.c | 73 | query_p_commands() { return copy( _commands );
new_parse.c | 83 | query_p_objects() { return copy( _cur_objects );
new_parse.c | 108 | filter(command_data->calls, (: objectp($1) :));
new_parse.c | 126 | add_action("new_parser", "*", -2);
new_parse.c | 128 | add_command("syntax", "<word'verb'>", (:syntax_messages($4[0]):));
new_parse.c | 140 | if (!pointerp(_succ_indir)) _succ_indir = ({ });
new_parse.c | 149 | sizeof(ob);
new_parse.c | 174 | write("Message array to add_succeeded_mess() must be two long.\n");
new_parse.c | 212 | write("Parameter to add_failed_mess() must be a string.\n");
new_parse.c | 220 | new(class fail_mess_data);
new_parse.c | 228 | sizeof(in_dir);
new_parse.c | 290 | sizeof(format);
new_parse.c | 291 | add_command(cmd, ob, format[i], funct);
new_parse.c | 299 | new(class command_class);
new_parse.c | 309 | member_array(ob, command_data->calls);
new_parse.c | 320 | new(class command_data);
new_parse.c | 345 | remove_object2(ob, was_env);
new_parse.c | 371 | remove_object_force(ob);
new_parse.c | 373 | find_inv_match();
new_parse.c | 382 | remove_object_force(womble);
new_parse.c | 404 | sizeof(command_data->calls);
new_parse.c | 410 | map_delete(_commands[cmd]->patterns, format);
new_parse.c | 417 | map_delete(_commands, cmd);
new_parse.c | 432 | remove_from_command(ind, ob);
new_parse.c | 435 | map_delete(_cur_objects, ob);
new_parse.c | 445 | remove_object_force(ob);
new_parse.c | 457 | remove_object_force(ob);
new_parse.c | 464 | remove_object(from, 1);
new_parse.c | 494 | explode(str, " ") - ({ "", 0 });
new_parse.c | 495 | cmdPatterns(bits[0]);
new_parse.c | 500 | printf("Cmd: %O %O\n", command, bits[0]);
new_parse.c | 503 | query_soul_command(bits[0]);
new_parse.c | 533 | query_pattern(pattern_str);
new_parse.c | 537 | map_delete(command->patterns, pattern_str);
new_parse.c | 549 | new(class command_class);
new_parse.c | 553 | printf("Blue: %O %O\n", command, command_stuff);
new_parse.c | 555 | sizeof(command_stuff);
new_parse.c | 567 | printf("Womble: %O %O\n", command_stuff, command_data);
new_parse.c | 580 | query_pattern(pattern_str);
new_parse.c | 584 | pattern_match(bits, pattern);
new_parse.c | 613 | implode((explode(_curpat, " ") - ({0,""}))[0..<2], " ");
new_parse.c | 654 | query_soul_command(bits[0]);
new_parse.c | 657 | sizeof(soul_stuff);
new_parse.c | 658 | query_pattern(soul_stuff[i][PATTERN_STRING]);
new_parse.c | 659 | pattern_match(bits, pattern);
new_parse.c | 674 | notify_fail( _failed_mess[0] );
new_parse.c | 678 | notify_fail(_failed_mess[1]);
new_parse.c | 693 | notify_fail("Syntax: syntax <verb>\n");
new_parse.c | 696 | cmdPatterns(str);
new_parse.c | 698 | query_soul_command(str);
new_parse.c | 700 | notify_fail("Could not find the verb '"+str+"'.\n");
new_parse.c | 705 | notify_fail("Could not find the verb '"+str+"'.\n");
new_parse.c | 716 | sizeof(command_stuff);
new_parse.c | 720 | sizeof(soul_stuff);
new_parse.c | 724 | write(the_mess);
new_parse.c | 762 | sizeof(bits);
new_parse.c | 783 | sizeof(delayed);
new_parse.c | 814 | sizeof(delayed);
new_parse.c | 891 | sizeof(bits);
new_parse.c | 902 | if (pattern[i] != FRACTION || sizeof(explode(bits[j], "/")) >
new_parse.c | 910 | sizeof(bits);
new_parse.c | 915 | if (pattern[i] != FRACTION || sizeof(explode(bits[j], "/")) >
new_parse.c | 937 | sizeof(delayed);
new_parse.c | 995 | sizeof(pattern[i]) > 1?"{":"");
new_parse.c | 997 | sizeof(pattern[i]) > 1?"} ":" "));
new_parse.c | 1001 | master()->query_word_list(pattern[i]);
new_parse.c | 1004 | query_word_list(pattern[i]);
new_parse.c | 1012 | member_array(bits[pos], elms);
new_parse.c | 1018 | member_array(elms[0], bits[pos..]);
new_parse.c | 1052 | sizeof(elem);
new_parse.c | 1061 | sizeof(elem);
new_parse.c | 1102 | sizeof(delayed);
new_parse.c | 1142 | sizeof(delayed);
new_parse.c | 1156 | sizeof(bits);
new_parse.c | 1160 | sizeof(bits) });
new_parse.c | 1163 | return ({});
new_parse.c | 1166 | sizeof(bits)+1 });
new_parse.c | 1170 | living(ob);
new_parse.c | 1175 | this_player() || ob->query_invis());
new_parse.c | 1179 | this_player() && reference_allowed(ob);
new_parse.c | 1186 | copy(where);
new_parse.c | 1191 | query_mirror_room() });
new_parse.c | 1200 | query_property("opaque"))) :));
new_parse.c | 1203 | new(class obj_match);
new_parse.c | 1204 | lower_case(pattern);
new_parse.c | 1210 | this_object());
new_parse.c | 1212 | find_object(pattern);
new_parse.c | 1214 | lower_case(pattern);
new_parse.c | 1229 | new(class obj_match);
new_parse.c | 1231 | wiz_present(pattern, env[0]);
new_parse.c | 1239 | my_find_match(pattern, env, 0);
new_parse.c | 1242 | new(class obj_match);
new_parse.c | 1253 | expand_nickname( $1 ))) :) ), (: $1 && check_if_allowed($1) :) );
new_parse.c | 1254 | uniq_array(omatch->objects);
new_parse.c | 1262 | my_find_match(pattern, env, OBJ_PARSER_TYPE_LIVING);
new_parse.c | 1263 | filter(omatch->objects, (: check_living( $1 ) :) );
new_parse.c | 1275 | new(class obj_match);
new_parse.c | 1287 | expand_nickname( $1 ))) :) ), (: $1 && check_if_allowed($1) :) );
new_parse.c | 1288 | uniq_array(omatch->objects);
new_parse.c | 1292 | filter(users(), (: check_if_creator($1) :));
new_parse.c | 1296 | filter(users(), (: check_if_allowed($1) :));
new_parse.c | 1297 | if (sizeof(omatch->objects) >
new_parse.c | 1298 | random(sizeof(omatch->objects))] });
new_parse.c | 1310 | new(class obj_match);
new_parse.c | 1322 | expand_nickname( $1 ))) :) ), (: $1 && check_if_allowed($1) :) );
new_parse.c | 1323 | uniq_array(new_omatch->objects);
new_parse.c | 1332 | my_find_match(pattern, env, OBJ_PARSER_TYPE_LIVING);
new_parse.c | 1333 | filter(omatch->objects, "check_living", this_object());
new_parse.c | 1345 | new(class obj_match);
new_parse.c | 1348 | filter(users(), (: check_if_creator($1) :));
new_parse.c | 1351 | filter(users(), (: check_if_allowed($1) :));
new_parse.c | 1352 | if (sizeof(new_omatch->objects) >
new_parse.c | 1353 | random(sizeof(new_omatch->objects))]});
new_parse.c | 1364 | new(class obj_match);
new_parse.c | 1389 | match_objects_failed_mess(failed_match);
new_parse.c | 1427 | new(class obj_match);
new_parse.c | 1435 | implode(bits[start..matches[p]], " ");
new_parse.c | 1439 | this_object() });
new_parse.c | 1442 | environment() });
new_parse.c | 1445 | environment(), this_object() });
new_parse.c | 1448 | this_object(), environment() });
new_parse.c | 1452 | find_object(pattern[i+2]);
new_parse.c | 1454 | frog_me_a_lot();
new_parse.c | 1455 | find_object(pattern[i+2]);
new_parse.c | 1462 | match_objects(pattern[++i], dir_match, env);
new_parse.c | 1472 | implode(bits[start..matches[p]], " ");
new_parse.c | 1476 | this_object() });
new_parse.c | 1479 | environment() });
new_parse.c | 1482 | environment(), this_object() });
new_parse.c | 1485 | this_object(), environment() });
new_parse.c | 1489 | find_object(pattern[i+2]);
new_parse.c | 1491 | frog_me_a_lot();
new_parse.c | 1492 | find_object(pattern[i+2]);
new_parse.c | 1500 | new(class obj_match);
new_parse.c | 1506 | match_objects(pattern[++i], pattern_str, env);
new_parse.c | 1533 | implode(bits[start..matches[p]], " ") });
new_parse.c | 1536 | implode(bits[start..matches[p]], " ");
new_parse.c | 1540 | sscanf(implode(bits[start..matches[p]], " "), "%d", j);
new_parse.c | 1544 | sscanf(implode(bits[start..matches[p]], " "), "%d/%s", j, k);
new_parse.c | 1556 | if (sizeof(pattern[i]) >
new_parse.c | 1557 | implode(bits[start..matches[p]], " ") });
new_parse.c | 1564 | query_notify_fail();
new_parse.c | 1565 | notify_fail(0);
new_parse.c | 1567 | setup_failed_mess(failed_match);
new_parse.c | 1569 | return (matches[0]?-1:0);
new_parse.c | 1588 | sizeof(command);
new_parse.c | 1602 | sizeof(matches);
new_parse.c | 1603 | implode(bits[start..matches[j]], " ");
new_parse.c | 1615 | remove_object_force(start);
new_parse.c | 1618 | remove_from_command(bits[0], start);
new_parse.c | 1631 | remove_object_force(start);
new_parse.c | 1633 | remove_from_command(bits[0], start);
new_parse.c | 1645 | shadow(start, 0);
new_parse.c | 1647 | while (start);
new_parse.c | 1662 | query_notify_fail();
new_parse.c | 1663 | notify_fail(0);
new_parse.c | 1665 | get_fail_messages( bits[ 0 ], ({ }) );
new_parse.c | 1672 | print_special_messages( bits[ 0 ] );
new_parse.c | 1691 | sizeof(direct_obs->objects);
new_parse.c | 1693 | member_array(direct_obs->objects[i], command);
new_parse.c | 1705 | my_find_match(indir_match, ({ direct_obs->objects[i] }), 0);
new_parse.c | 1711 | debug_printf("Direct Obs Env (%O %O %O)\n", indir_match, stuff, direct_obs->objects[i]);
new_parse.c | 1714 | copy(indirect_obs);
new_parse.c | 1715 | sizeof(indirect_obs);
new_parse.c | 1718 | my_find_match(indir_match[k], ({ direct_obs->objects[i] }), 0);
new_parse.c | 1732 | setup_failed_mess(failed_match);
new_parse.c | 1745 | remove_object_force(start);
new_parse.c | 1747 | remove_from_command(bits[0], start);
new_parse.c | 1756 | remove_from_command(bits[0], start);
new_parse.c | 1771 | remove_object_force(start);
new_parse.c | 1773 | remove_from_command(bits[0], start);
new_parse.c | 1787 | shadow(start, 0);
new_parse.c | 1789 | while (start);
new_parse.c | 1816 | get_fail_messages( bits[ 0 ], fail_ob );
new_parse.c | 1818 | query_notify_fail();
new_parse.c | 1819 | notify_fail(0);
new_parse.c | 1826 | notify_fail(0);
new_parse.c | 1827 | create_message(bits, matches, pattern, fail_ob, 1);
new_parse.c | 1836 | explode("F" + fail_mesg, "$succ_indir$");
new_parse.c | 1843 | query_multiple_short( stuff[<1] );
new_parse.c | 1846 | query_multiple_short( indir_match[<1] );
new_parse.c | 1851 | query_multiple_short( stuff[i] );
new_parse.c | 1865 | query_multiple_short( stuff, "a" ) );
new_parse.c | 1887 | create_message( bits, matches, pattern, bity - _succ_mess_dir);
new_parse.c | 1899 | this_player() });
new_parse.c | 1906 | sizeof( _succ_indir );
new_parse.c | 1920 | print_special_messages( bits[ 0 ] );
new_parse.c | 1924 | print_special_messages( bits[ 0 ] );
new_parse.c | 1942 | keys( _succ_mess );
new_parse.c | 1943 | sizeof( messes );
new_parse.c | 1946 | strlen(messes[i]) >
new_parse.c | 1949 | evaluate(messes[i], 0);
new_parse.c | 1956 | replace_string(words, "$Iposs$", "");
new_parse.c | 1960 | replace_string(words, "$Ithe$", "");
new_parse.c | 1964 | replace_string(words, "$Ia$", "");
new_parse.c | 1980 | this_player() }) + ({ "yourself" }), type ) }) ) );
new_parse.c | 1987 | strlen(messes[i]) >
new_parse.c | 1995 | pluralize( verb ), "$es", "es", "$s", "s", "$y", "ies" }) );
new_parse.c | 2003 | pluralize( verb ), "$es", "es", "$s", "s", "$y", "ies" }) );
new_parse.c | 2006 | query_multiple_short( _succ_mess[ messes[ i ] ][ 0 ], "one" ) );
new_parse.c | 2010 | this_player()->query_objective() +"self" });
new_parse.c | 2011 | this_player() });
new_parse.c | 2017 | replace_string(words, "$Iposs$", "");
new_parse.c | 2021 | replace_string(words, "$Ithe$", "");
new_parse.c | 2025 | replace_string(words, "$Ia$", "");
new_parse.c | 2032 | sizeof( _succ_mess[ messes[ i ] ][ 1 ] );
new_parse.c | 2075 | sprintf("%O", ob) });
new_parse.c | 2077 | this_player()->evaluate_message( ({ mess, ({ str }) }) );
new_parse.c | 2084 | query_multiple_short( data->indirect, "one" ) );
new_parse.c | 2088 | this_player() }) + ({ "yourself" }), "one" ) );
new_parse.c | 2089 | capitalize( words );
new_parse.c | 2107 | sizeof(pattern);
new_parse.c | 2114 | query_multiple_short(dir, (flag?"a":"one"));
new_parse.c | 2123 | implode(bits[matches[pos]+1..matches[pos+1]], " ");
new_parse.c | 2128 | implode(bits[matches[pos]+1..matches[pos+1]], " ");
new_parse.c | 2143 | implode(pattern[i+1][0], " ");
new_parse.c | 2147 | implode(bits[matches[pos]+1..matches[pos+1]], " ");
magic.c | 172 | filter_regexp(string *incoming);
magic.c | 173 | init_settings();
magic.c | 174 | set_colors(string *words);
magic.c | 175 | print_line(int show_ptr);
magic.c | 176 | open_file(string filename);
magic.c | 177 | save_file(string cmd, int open_pending);
magic.c | 181 | boom(string str, int linenum, int last_line);
magic.c | 184 | save_history();
magic.c | 189 | get_command(string action);
magic.c | 190 | write_permission(string name);
magic.c | 191 | rm_file(string name);
magic.c | 192 | expand_macros(string ins, string *sorted_defs);
magic.c | 193 | strip_junk(string stuff);
magic.c | 199 | this_player()->query_rows();
magic.c | 200 | this_player()->query_cols();
magic.c | 202 | seteuid(geteuid(this_player()));
magic.c | 204 | implode(explode(filename, " "), "");
magic.c | 206 | init_settings();
magic.c | 208 | open_file(filename);
magic.c | 210 | printf("Cannot open file \"%s\".\n", filename);
magic.c | 211 | open_file("");
magic.c | 218 | input_to("get_new_text", 0, "I", 0, 0);
magic.c | 223 | printf(":");
magic.c | 224 | input_to("get_command");
magic.c | 247 | explode(action + " ", " ");
magic.c | 249 | printf(":");
magic.c | 250 | input_to("get_command");
magic.c | 301 | print_line(0);
magic.c | 302 | printf(":");
magic.c | 303 | input_to("get_command");
magic.c | 309 | printf("Unknown command.  Enter 'H' for help.\n:");
magic.c | 310 | input_to("get_command");
magic.c | 316 | if (sizeof(bits) >
magic.c | 324 | sscanf(bits[1], "%s-%s", tmp, tmp2);
magic.c | 327 | printf("Range mode not valid with command '%s'.\n:", bits[0]);
magic.c | 328 | input_to("get_command");
magic.c | 337 | strlen(file[lnptr]);
magic.c | 343 | printf("Invalid range.\n:");
magic.c | 344 | input_to("get_command");
magic.c | 350 | strlen(file[lnptr]);
magic.c | 357 | printf("Index mode not valid with command '%s'.\n:", bits[0]);
magic.c | 358 | input_to("get_command");
magic.c | 362 | printf("Invalid index.\n:");
magic.c | 363 | input_to("get_command");
magic.c | 370 | input_to("get_command");
magic.c | 377 | strlen(file[lnptr]);
magic.c | 381 | printf("Amount mode not valid with command '%s'.\n:", bits[0]);
magic.c | 382 | input_to("get_command");
magic.c | 385 | to_int(bits[1]);
magic.c | 387 | printf("Illegal amount.\n:");
magic.c | 388 | input_to("get_command");
magic.c | 395 | input_to("get_command");
magic.c | 412 | printf("Cannot delete beyond end of file.\n");
magic.c | 414 | printf("Cannot delete beyond end of line.\n");
magic.c | 420 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 430 | strlen(scrap[0]);
magic.c | 431 | strlen(scrap[1]);
magic.c | 436 | if ((i = strsrch(file[lnptr][tmpch .. ], bits[1])) >
magic.c | 438 | strlen(bits[1]);
magic.c | 442 | printf("Cannot search for null string.\n");
magic.c | 444 | printf("'%s' not found.\n", bits[1]);
magic.c | 459 | print_line(1);
magic.c | 470 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 480 | strlen(scrap[0]);
magic.c | 493 | printf("Cannot search for null string.\n");
magic.c | 494 | printf("'%s' not found.\n", bits[1]);
magic.c | 498 | strlen(file[lnptr]) + 1);
magic.c | 499 | print_line(1);
magic.c | 501 | print_line(0);
magic.c | 511 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 521 | strlen(scrap[0]);
magic.c | 535 | printf("Cannot search for null string.\n");
magic.c | 536 | printf("'%s' not found.\n", bits[1]);
magic.c | 541 | strlen(file[lnptr]);
magic.c | 545 | print_line(1);
magic.c | 547 | print_line(0);
magic.c | 552 | strlen(file[lnptr]);
magic.c | 553 | print_line(1);
magic.c | 555 | print_line(0);
magic.c | 561 | print_line(1);
magic.c | 563 | print_line(0);
magic.c | 569 | print_line(1);
magic.c | 571 | print_line(0);
magic.c | 577 | print_line(lnptr != fsize);
magic.c | 587 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 597 | strlen(scrap[0]);
magic.c | 606 | printf("Cannot search for null string.\n");
magic.c | 607 | printf("'%s' not found.\n", bits[1]);
magic.c | 624 | strlen(sprintf("%d", fsize + 1));
magic.c | 626 | printf("Line %d split.\n", lnptr + 1);
magic.c | 628 | printf("Cannot split beyond end of line.\n");
magic.c | 630 | printf("Cannot split beyond end of file.\n");
magic.c | 637 | printf("Joining up to end of file - ");
magic.c | 644 | if (sizeof(bits) >
magic.c | 653 | printf("%d lines joined.\n", amt);
magic.c | 656 | strlen(sprintf("%d", fsize + 1));
magic.c | 660 | printf("Joining just 1 line is pointless. :)\n");
magic.c | 662 | printf("Cannot join beyond end of file.\n");
magic.c | 667 | if (sizeof(bits) >
magic.c | 668 | to_int(bits[2]);
magic.c | 670 | printf("Line width must be greater than zero.\n");
magic.c | 673 | if (sizeof(bits) >
magic.c | 674 | strlen(bits[3]);
magic.c | 687 | printf("Formatting up to end of file - ");
magic.c | 707 | if (sizeof(bits) >
magic.c | 708 | map(scrap, (: $(bits[3]) + $1 :));
magic.c | 732 | printf("Adjustments made.\n");
magic.c | 734 | strlen(sprintf("%d", fsize + 1));
magic.c | 741 | printf("No adjustments needed.\n");
magic.c | 743 | printf("Cannot adjust beyond end of file.\n");
magic.c | 748 | sizeof(bits) >
magic.c | 750 | printf("Why bother indenting by nothing?\n");
magic.c | 753 | printf("Indenting up to end of file - ");
magic.c | 760 | sizeof(bits) >
magic.c | 762 | map(file[tmpln .. tmpln + amt - 1], (: $(tmp) + $1 :));
magic.c | 763 | printf("%d line%s indented.\n", amt, amt == 1 ? "" : "s");
magic.c | 766 | printf("Cannot indent beyond end of file.\n");
magic.c | 771 | sizeof(bits) >
magic.c | 773 | printf("Why bother unindenting by nothing?\n");
magic.c | 776 | printf("Unindenting up to end of file - ");
magic.c | 802 | printf("%d line%s unindented.\n", i, i == 1 ? "" : "s");
magic.c | 805 | printf("Cannot unindent beyond end of file.\n");
magic.c | 811 | sprintf("%c", bits[0][0]);
magic.c | 812 | sprintf("%c", bits[0][1]);
magic.c | 814 | printf("Pointer must be on a '%s' or a '%s'\n:", tmp, tmp2);
magic.c | 819 | strsrch(file[lnptr][++chptr .. ], tmp);
magic.c | 820 | strsrch(file[lnptr][chptr .. ], tmp2);
magic.c | 830 | while ((i > -1  ||  j > -1)  &&  amt);
magic.c | 834 | while (amt  &&  ++lnptr < fsize);
magic.c | 840 | strsrch(file[lnptr][0 .. --chptr], tmp2, -1 );
magic.c | 841 | strsrch(file[lnptr][0 .. chptr], tmp, -1);
magic.c | 851 | if (lnptr)  chptr = strlen(file[lnptr - 1]);
magic.c | 854 | while (amt  &&  lnptr--);
magic.c | 857 | if (amt)  printf("No match found.\n");
magic.c | 861 | print_line(1);
magic.c | 871 | my_more("", clipboard, 0, 0, 0, 0, "");
magic.c | 874 | printf("Clipboard is empty.\n");
magic.c | 880 | printf("Deleting up to end of file - ");
magic.c | 889 | strlen(sprintf("%d", fsize + 1));
magic.c | 895 | printf("%d line%s deleted.\n", amt, amt == 1 ? "" : "s");
magic.c | 897 | printf("Cannot delete beyond end of file.\n");
magic.c | 907 | if (diff  ||  sizeof(bits) >
magic.c | 908 | get_new_text(bits[2 - diff], bits[0], 1, 1);
magic.c | 911 | printf("]");
magic.c | 912 | input_to("get_new_text", 0, bits[0], 0, 0);
magic.c | 919 | if (sizeof(bits) >
magic.c | 922 | printf("Invalid destination line.\n");
magic.c | 927 | printf("Copying up to end of file - ");
magic.c | 955 | printf("%d line%s moved.\n", amt, amt == 1 ? "" : "s");
magic.c | 959 | strlen(sprintf("%d", fsize + 1));
magic.c | 973 | strlen(sprintf("%d", fsize + 1));
magic.c | 979 | printf("%d line%s copied.\n", amt, amt == 1 ? "" : "s");
magic.c | 982 | printf("Cannot copy beyond end of file.\n");
magic.c | 996 | printf("No point in copying a null string.\n");
magic.c | 1002 | printf("Cannot copy beyond end of file.\n");
magic.c | 1006 | printf("Cannot copy beyond end of line.\n");
magic.c | 1013 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 1023 | strlen(scrap[0]);
magic.c | 1024 | strlen(scrap[1]);
magic.c | 1029 | if ((i = strsrch(file[lnptr][tmpch .. ], bits[1])) >
magic.c | 1031 | strlen(bits[1]);
magic.c | 1035 | printf("Cannot search for null string.\n");
magic.c | 1037 | printf("'%s' not found.\n", bits[1]);
magic.c | 1041 | if ((tmpch + amt - 1) >
magic.c | 1042 | printf("Copying up to end of line -  ");
magic.c | 1047 | printf("%d character%s copied", amt, amt == 1 ? "" : "s");
magic.c | 1049 | printf(" and deleted.\n");
magic.c | 1061 | print_line(1);
magic.c | 1063 | printf(".\n");
magic.c | 1072 | strlen(sprintf("%d", fsize + 1));
magic.c | 1085 | if (tmpch <= chptr)  chptr += strlen(clipboard[0]);
magic.c | 1087 | print_line(1);
magic.c | 1101 | printf("%d line%s pasted.\n", i, i == 1 ? "" : "s");
magic.c | 1103 | strlen(sprintf("%d", fsize + 1));
magic.c | 1106 | printf("Clipboard is empty.\n");
magic.c | 1113 | strsrch(file[tmpln], ' ');
magic.c | 1116 | strsrch(file[tmpln][i + 1 .. ], ' ');
magic.c | 1127 | strsrch(tmp2, ' ');
magic.c | 1135 | strip_junk(expand_macros(tmp2, sort_array(keys(defs), -1)));
magic.c | 1144 | strsrch(name, '/', -1);
magic.c | 1147 | if (strlen(tmp) >
magic.c | 1155 | if (!diff  &&  sizeof(bits) >
magic.c | 1158 | printf("Invalid choice.\n");
magic.c | 1163 | sizeof(bits) >
magic.c | 1166 | printf("Current file has been changed.  Save now? (Y/N/A):]");
magic.c | 1167 | input_to("get_new_text", 0, "O", 0, 0);
magic.c | 1177 | printf("This command is only available to creators.\n");
magic.c | 1179 | printf("Must specify a filename.\n");
magic.c | 1181 | this_player()->get_path(bits[2 - diff]);
magic.c | 1183 | printf("'%s' is a directory.\n", tmp);
magic.c | 1185 | printf("'%s' does not exist.\n", tmp);
magic.c | 1194 | strlen(sprintf("%d", fsize + 1));
magic.c | 1244 | my_more("", ({ file[tmpln] }), tmpln, showln, highlight, 1, "");
magic.c | 1247 | my_more("", scrap[j .. ], lnptr, showln, highlight, 0, "");
magic.c | 1252 | printf("Must specify search string.\n");
magic.c | 1254 | printf("Cannot have a null search string.\n");
magic.c | 1257 | printf("Searching up to end of file.\n");
magic.c | 1264 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 1268 | sizeof(rexp);
magic.c | 1276 | if (strsrch(tmp, bits[2]) >
magic.c | 1285 | printf("\"%s\" not found.\n", bits[2]);
magic.c | 1288 | my_more("", scrap, 0, 0, 0, 0, "");
magic.c | 1292 | printf("Cannot search beyond end of file.\n");
magic.c | 1297 | printf("Must specify both search and replace strings.\n");
magic.c | 1299 | printf("Cannot have a null search string.\n");
magic.c | 1302 | printf("Replacing up to end of file.\n");
magic.c | 1306 | catch(regexp(file[tmpln], bits[2]));
magic.c | 1308 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 1315 | sizeof($4) - 1, implode($4, $3) }) : ({ 0 }) :);
magic.c | 1318 | replace(bits[2], "\\", "\\\\");
magic.c | 1319 | replace(bits[3], "\\", "\\\\");
magic.c | 1322 | implode($4, $3)[1 .. <2] }) : ({ 0 }) :);
magic.c | 1324 | sprintf("%c", ((bits[2][0] + 1) % 127) + 1);
magic.c | 1353 | printf("\"%s\" not found.\n", bits[2]);
magic.c | 1357 | printf("Cannot replace beyond end of file.\n");
magic.c | 1362 | printf("Must specify both search and replace strings.\n");
magic.c | 1364 | printf("Cannot have a null search string.\n");
magic.c | 1371 | printf("REGEXP error: %s", tmp[1 .. ]);
magic.c | 1375 | strlen(scrap[0]);
magic.c | 1376 | strlen(scrap[1]);
magic.c | 1379 | if ((i = strsrch(file[lnptr][tmpch .. ], bits[1])) >
magic.c | 1381 | strlen( bits[1] );
magic.c | 1394 | print_line(1);
magic.c | 1401 | printf("'%s' not found.\n", bits[1]);
magic.c | 1405 | printf("Cannot replace beyond end of file.\n");
magic.c | 1415 | if (strlen(name) >
magic.c | 1419 | strsrch(name, "/", -1);
magic.c | 1423 | printf("Couldn't write temporary file for test.\n");
magic.c | 1432 | catch(UPDATE->cmd(tmp2));
magic.c | 1434 | printf("Couldn't remove temporary file %s\n", tmp2);
magic.c | 1444 | print_line(0);
magic.c | 1451 | print_line(0);
magic.c | 1459 | print_line(0);
magic.c | 1464 | printf("Syntax highlighting turned on.\n");
magic.c | 1465 | printf("Syntax highlighting turned off.\n");
magic.c | 1471 | if (mode_flag  &&  sizeof(bits) >
magic.c | 1474 | this_player()->set_in_editor(name = newname);
magic.c | 1478 | save_history();
magic.c | 1485 | if (!showln)  printf("Line numbering turned off.\n");
magic.c | 1486 | printf("Line numbering turned on.\n");
magic.c | 1490 | printf("Quitting.\n");
magic.c | 1491 | if (mode_flag)  save_history();
magic.c | 1492 | this_player()->set_in_editor(0);
magic.c | 1493 | this_player()->editor_do_quit(0);
magic.c | 1504 | printf("Unknown command '%s'.\n", tmp);
magic.c | 1506 | my_more("", explode(tmp2, "\n"), 0, 0, 0, 0, "");
magic.c | 1516 | printf("Not that many commands to undo.  ");
magic.c | 1520 | sizeof(undo[i]);
magic.c | 1527 | sizeof(undo[i][j][2]);
magic.c | 1528 | strlen(sprintf("%d", fsize + 1));
magic.c | 1530 | sizeof(undo[i][j][2]);
magic.c | 1550 | strlen(sprintf("%d", fsize + 1));
magic.c | 1563 | printf("%d command%s undone.\n", amt, amt == 1 ? "" : "s");
magic.c | 1565 | printf("Nothing to undo.\n");
magic.c | 1580 | replace(type_color, "%^", " ")[0 .. <2]);
magic.c | 1582 | printf("Current settings:\n%s", tmp);
magic.c | 1584 | sprintf("history %s", implode(open_history[<10 .. ], " "));
magic.c | 1587 | printf("Settings saved.\n");
magic.c | 1588 | printf("Settings could not be saved.\n");
magic.c | 1603 | to_int(bits[3]);
magic.c | 1609 | printf("Tab spacing set to %d.\n", i);
magic.c | 1611 | printf("Tab spacing must be greater than 0.\n");
magic.c | 1613 | printf("Invalid option for \"tab\".\n");
magic.c | 1618 | capitalize(bits[2]), implode(bits[3 .. ], " "));
magic.c | 1620 | printf("Invalid option '%s'.\n", bits[2]);
magic.c | 1622 | printf("Invalid option '%s'.\n", bits[1]);
magic.c | 1630 | strlen(tmp);
magic.c | 1640 | printf("%d line%s rot13ified.\n", amt, amt == 1 ? "" : "s");
magic.c | 1642 | printf("Cannot rot13 beyond end of file.\n");
magic.c | 1647 | printf("Warning: Macros have not yet been fully processed.\n");
magic.c | 1648 | if (sizeof(bits) >
magic.c | 1649 | if (bits[1] == "ALL")  printf("%O\n", defs);
magic.c | 1651 | printf("No definition for \"%s\".\n", bits[1]);
magic.c | 1653 | printf("%s\n", defs[bits[1]]);
magic.c | 1655 | printf("Which macro do you want to look up?\n");
magic.c | 1659 | printf("Something odd has happened.  Tell Presto.\n");
magic.c | 1662 | printf(":");
magic.c | 1663 | input_to( "get_command" );
magic.c | 1672 | if ((len = strlen(new_in) - 1) >
magic.c | 1678 | if (tab_replace)  new_in2 = replace(new_in2, "\t", tab_str);
magic.c | 1693 | if (!fsize)  file = ({ new_in2, "End of file." });
magic.c | 1699 | print_line(1);
magic.c | 1707 | printf("No more secret message!\n");
magic.c | 1708 | get_new_text("", "W", count, 0);
magic.c | 1712 | write("You did that on purpose, didn't you?\n");
magic.c | 1713 | get_new_text("", "W", count, 0);
magic.c | 1722 | printf("]");
magic.c | 1723 | input_to("get_new_text", 0, "I", count + 1, 0);
magic.c | 1729 | printf("%d line%s added.\n", count, count == 1 ? "" : "s");
magic.c | 1746 | if (!fsize)  file = ({ new_in2, "End of file." });
magic.c | 1751 | print_line(1);
magic.c | 1764 | printf("]");
magic.c | 1765 | input_to("get_new_text", 0, "A", count + 1, 0);
magic.c | 1770 | printf("%d line%s added.\n", count, count == 1 ? "" : "s");
magic.c | 1797 | printf("]");
magic.c | 1798 | input_to("get_new_text", 0, "E", count + 1, 0);
magic.c | 1803 | printf("%d line%s changed.\n", count, count == 1 ? "" : "s");
magic.c | 1820 | if (!fsize)  file = ({ new_in2, "End of file." });
magic.c | 1826 | print_line(1);
magic.c | 1833 | replace(new_in2, ({ " ", "", "\t", "" }));
magic.c | 1834 | this_player()->get_path(new_in2);
magic.c | 1835 | this_player()->set_in_editor(name);
magic.c | 1846 | printf("Save canceled.\n");
magic.c | 1851 | to_int(new_in2);
magic.c | 1854 | printf("Cancelled.\n");
magic.c | 1856 | this_player()->editor_do_quit(0);
magic.c | 1861 | printf("Invalid choice.\n");
magic.c | 1863 | this_player()->editor_do_quit(0);
magic.c | 1869 | if (new_in2 != "")  open_file(new_in2);
magic.c | 1882 | printf("Open aborted.\n");
magic.c | 1884 | printf("OK, you're the boss.\n");
magic.c | 1885 | open_file(newname);
magic.c | 1888 | printf("(Y)es, (N)o, or (A)bort?:]");
magic.c | 1889 | input_to("get_new_text", 0, "O", count, 0);
magic.c | 1896 | printf("How in the hell did you get here?\n");
magic.c | 1899 | printf(":");
magic.c | 1900 | input_to("get_command");
magic.c | 1901 | strlen(sprintf("%d", fsize + 1));
magic.c | 1918 | printf("No files in your history.\n:");
magic.c | 1919 | input_to("get_command");
magic.c | 1923 | strlen(sprintf("%d", sizeof(open_history)));
magic.c | 1924 | sizeof(open_history);
magic.c | 1929 | printf("%*d: %s\n", len, i + 1, open_history[i]);
magic.c | 1931 | printf("Choose file (enter nothing to cancel):] ");
magic.c | 1932 | input_to("get_new_text", 0, "O", 0, 1);
magic.c | 1937 | get_dir(this_player()->get_path(filename))) >
magic.c | 1938 | strsrch(filename, '/', -1);
magic.c | 1941 | strlen(sprintf("%d", sizeof(file_list)));
magic.c | 1942 | sizeof(file_list);
magic.c | 1944 | printf("%*d: %s (current file)\n", len, i + 1, file_list[i]);
magic.c | 1946 | printf("%*d: %s\n", len, i + 1, file_list[i]);
magic.c | 1950 | printf("Choose file (enter nothing to cancel):] ");
magic.c | 1951 | input_to("get_new_text", 0, "O", i, 1);
magic.c | 1956 | this_player()->get_path(filename);
magic.c | 1957 | file_name(things[0]);
magic.c | 1958 | sscanf(filename, "%s#%*s", filename);
magic.c | 1964 | this_player()->get_path(filename);
magic.c | 1966 | printf("\"%s\" is a directory.\n", filename);
magic.c | 1973 | printf("Opening new file '%s'.\n", filename);
magic.c | 1975 | printf("Opening new file.\n");
magic.c | 1979 | this_player()->set_in_editor(filename);
magic.c | 1982 | read_bytes(filename);
magic.c | 1984 | explode(tmp, "\n") + ({ "End of file." });
magic.c | 1991 | this_player()->set_in_editor(filename);
magic.c | 1993 | printf("%s opened", filename);
magic.c | 1995 | printf(" (read only)");
magic.c | 1998 | file_size(filename), file_size(filename) == 1 ? "" : "s");
magic.c | 2003 | member_array(filename, open_history);
magic.c | 2014 | printf("Opening new file.\n");
magic.c | 2017 | this_player()->set_in_editor("New file");
magic.c | 2019 | if (filename == ""  || (strlen(filename) >
magic.c | 2027 | strlen(sprintf("%d", fsize + 1));
magic.c | 2035 | call_out("defines", 1, name);
magic.c | 2047 | printf("Enter a name for this file (enter nothing to cancel):]");
magic.c | 2048 | input_to("get_new_text", 0, cmd, open_pending, 0);
magic.c | 2053 | read_bytes(name);
magic.c | 2055 | printf("Could not overwrite old file.\n");
magic.c | 2059 | printf("Could not write file '%s'.\n", name);
magic.c | 2061 | printf("Could not restore the old version either.  Uh-oh.\n");
magic.c | 2066 | printf("File '%s' saved.\n", name);
magic.c | 2076 | this_player()->set_in_editor(0);
magic.c | 2097 | printf(":");
magic.c | 2098 | input_to("get_command");
magic.c | 2102 | sizeof(text);
magic.c | 2110 | replace(junk, "%", "%%");
magic.c | 2111 | write("junk == " + junk + "\n");
magic.c | 2112 | strlen(junk);
magic.c | 2122 | highlight(junk, startln - 1, number, lines >= rows);
magic.c | 2128 | while ((k = strsrch(junk[limit .. ], "\n")) >
magic.c | 2136 | if (len == 0)  printf("\n");
magic.c | 2137 | printf("%s\n", junk);
magic.c | 2146 | printf("%s", junk[0 .. limit - 1]);
magic.c | 2149 | while (i < j  &&  lines < rows - 1);
magic.c | 2151 | write("%^RESET%^MORE... enter 'q' to stop, anything else to continue:");
magic.c | 2157 | write("%^RESET%^:");
magic.c | 2158 | input_to("get_command");
magic.c | 2174 | sprintf("%'.'*d] %s", num_len, lnptr + 1, file[lnptr]);
magic.c | 2181 | strlen(replace(tmp[0 .. chr - 1], "\t", "")));
magic.c | 2185 | replace(tmp, "\t", "\\TAB\\", "%", "%%");
magic.c | 2187 | strlen(tmp);
magic.c | 2201 | printf("%s", highlight(tmp, lnptr, showln, 0));
magic.c | 2204 | printf("%s", tmp);
magic.c | 2209 | this_player()->fix_string(tmp[0 .. chr - 1] + "%^REVERSE%^" + tmp[chr .. chr] +  tmp[chr + 1 .. ]);
magic.c | 2210 | if (highlight)  tmp = highlight(tmp, lnptr, showln, 1);
magic.c | 2211 | printf("%s", tmp);
magic.c | 2214 | if (highlight)  tmp = highlight(tmp, lnptr, showln, 1);
magic.c | 2219 | printf("%s", tmp[0 .. tchr - 1]);
magic.c | 2226 | write("%^RESET%^^\n");
magic.c | 2227 | printf("%s", tmp[tchr .. ]);
magic.c | 2284 | strsrch(word, "\n");
magic.c | 2295 | strsrch(word, "\n");
magic.c | 2312 | strsrch(word, "\n");
magic.c | 2330 | strsrch(word, "\n");
magic.c | 2338 | strsrch(word, "\n");
magic.c | 2370 | strlen(str);
magic.c | 2373 | strsrch(str[i .. ], "*/");
magic.c | 2376 | strsrch(str[i .. ], "*\n/");
magic.c | 2389 | replace(shrapnel[<1], "\n", "\n" + comm_color);
magic.c | 2401 | strsrch(str[i + 1 .. ], DQUOTES);
magic.c | 2431 | replace(shrapnel[<1], "\n", "\n" + stri_color);
magic.c | 2442 | strsrch(str[i + 1 .. ], SQUOTES);
magic.c | 2480 | replace(shrapnel[<1], "\n", "\n" + stri_color);
magic.c | 2489 | strsrch(str[i + 1 .. ], GREATER);
magic.c | 2499 | replace(shrapnel[<1], "\n", "\n" + stri_color);
magic.c | 2511 | strsrch(str[i + 2 + split .. ], "*/");
magic.c | 2513 | strsrch(str[i + 2 + split .. ], "*\n/");
magic.c | 2528 | replace(shrapnel[<1], "\n", "\n" + comm_color);
magic.c | 2541 | replace(shrapnel[<1], "\n", "\n" + comm_color);
magic.c | 2613 | boom(replace(str, "%^", "%%%^^^"), linenum, last_line);
magic.c | 2614 | map(words, "fix_string", this_player());
magic.c | 2616 | this_player()->fix_string(num + implode(words, ""));
magic.c | 2638 | read_bytes("/w/" + this_player()->query_name() + "/.magicrc");
magic.c | 2641 | explode(rc, "\n");
magic.c | 2643 | explode(line, " ") - ({ "" });
magic.c | 2644 | if (sizeof(bits) >
magic.c | 2647 | if ((spaces = to_int(bits[2])) >
magic.c | 2660 | set_colors(bits[1 .. ]);
magic.c | 2676 | upper_case($1) + "%^" :)), "");
magic.c | 2709 | write_file(name, "");
magic.c | 2713 | rm_file(string name)  {  return rm(name);
magic.c | 2720 | allocate((sizeof(incoming) + 1) / 2);
magic.c | 2734 | read_bytes("/w/" + this_player()->query_name() + "/.magicrc");
magic.c | 2736 | explode(tmp, "\n");
magic.c | 2737 | sizeof(junk);
magic.c | 2740 | implode(open_history[<10 .. ], " "));
magic.c | 2746 | implode(open_history[<10 .. ], " ")) });
magic.c | 2748 | implode(junk, "\n"), 1);
magic.c | 2772 | explode(last_file, "/");
magic.c | 2801 | if (off == 0  ||  member_array(ins[off - 1], allowed) >
magic.c | 2802 | replace_string(ins, def, defs[def]);
magic.c | 2808 | while(changed);
magic.c | 2816 | replace(stuff, ({ " ", "", "+", "", "(", "", ")", "" }));
magic.c | 2817 | replace_string(stuff, "\"\"", "");
magic.c | 2833 | read_file(fname);
magic.c | 2835 | regexp(explode(tmp, "\n"), "^#[ ]*(include|define)[ \t]+");
magic.c | 2839 | regexp(file, "^#[ ]*(include|define)[ \t]+");
magic.c | 2844 | get_inc_path(tmp, fname);
magic.c | 2845 | call_out("defines", defs_not_done, tmp2);
magic.c | 2852 | strsrch(line, "define");
magic.c | 2879 | sort_array(keys(defs), -1);
magic.c | 2882 | strip_junk(expand_macros(tmp2, sorted_defs));
nickname.c | 26 | explode( phrase, " " );
nickname.c | 31 | sizeof( words );
nickname.c | 36 | implode( words, " " );
path.c | 42 | this_player()->query_name();
path.c | 47 | this_player()->query_name();
path.c | 51 | sscanf(str, "~%s", temp);
path.c | 56 | extract(str,1);
path.c | 74 | explode(str,"/") - ({ "" }) ;
path.c | 77 | sizeof(array);
path.c | 78 | reset_eval_cost();
path.c | 88 | implode(array1, "/");
path.c | 112 | explode(str, " ")- ({ "" });
path.c | 114 | return ({ });
path.c | 117 | sizeof(names);
path.c | 119 | get_path(str);
path.c | 127 | explode(rmpath, "/") - ({ "" });
path.c | 128 | implode(path_elements[0..sizeof(path_elements) - 2], "/");
path.c | 130 | get_dir(str);
path.c | 134 | sizeof(files);
path.c | 139 | sizeof(filenames);
path.c | 159 | explode(str, " ") - ({ "" });
path.c | 160 | sizeof(names);
path.c | 165 | implode(names, " ");
path.c | 166 | get_files(str);
psoul.c | 49 | _process_input(string);
psoul.c | 50 | command(string);
psoul.c | 59 | time();
psoul.c | 60 | time();
psoul.c | 85 | drunk_check(string str);
psoul.c | 89 | add_action("lower_check","*", -10000);
psoul.c | 90 | add_action((:drunk_check:),"*", 10000);
psoul.c | 92 | alias_commands();
psoul.c | 93 | nickname_commands();
psoul.c | 94 | history_commands();
psoul.c | 103 | sizeof(queued_commands);
psoul.c | 121 | command(str);
psoul.c | 135 | say(str, bing);
psoul.c | 145 | time();
psoul.c | 174 | catch(command(str));
psoul.c | 183 | sizeof(queued_commands));
psoul.c | 184 | call_out((: do_flush(0) :), 1);
psoul.c | 186 | call_out((: do_flush(1) :), 2);
psoul.c | 220 | query_time_left();
psoul.c | 221 | remove_call_out(flush_call_id);
psoul.c | 222 | do_flush(1);
psoul.c | 226 | call_interrupt(0, this_object());
psoul.c | 246 | set_interupt_command("frog", this_object());
psoul.c | 256 | frog(int time_left, mixed arg);
psoul.c | 258 | set_interupt_commant((: frog :));
psoul.c | 290 | set_interupt_command(func, 0, 0);
psoul.c | 301 | call_interrupt(-time_left, this_object());
psoul.c | 303 | tell_object( this_object(), "Removed queue.\n" );
psoul.c | 319 | call_interrupt(-time_left, interupter);
psoul.c | 333 | error("command_override needs a function!");
psoul.c | 376 | function_owner(cmd);
psoul.c | 378 | evaluate(cmd, str);
psoul.c | 386 | sscanf(str, "%s %*s", str);
psoul.c | 399 | time();
psoul.c | 405 | this_object()->query_passed_out_message();
psoul.c | 409 | write( mess );
psoul.c | 413 | write( "On the other hand, you're a creator...\n" );
psoul.c | 416 | remove_queue();
psoul.c | 440 | explode(str, " ");
psoul.c | 442 | write( "Queued command: "+ str +"\n" );
psoul.c | 457 | if(sizeof(rabbit) >
psoul.c | 465 | call_interrupt(0, this_object());
psoul.c | 475 | run_alias(comm, arg);
psoul.c | 478 | set_doing_alias(comm);
psoul.c | 482 | catch(command(comm));
psoul.c | 486 | if(sizeof(str) >
psoul.c | 487 | write("Command too long.\n");
psoul.c | 491 | command(str);
psoul.c | 495 | call_interrupt(0, this_object());
psoul.c | 510 | reset_eval_cost();
psoul.c | 512 | expand_history(str[1..]);
psoul.c | 514 | substitute_history(str[1..]);
psoul.c | 515 | this_object()->add_history(str);
psoul.c | 519 | _process_input(str);
psoul.c | 529 | file_name(environment()));
psoul.c | 549 | this_player();
psoul.c | 550 | set_this_player(this_object());
psoul.c | 552 | _notify_fail(0);
psoul.c | 560 | set_this_player(ob);
psoul.c | 570 | set_this_player(ob);
psoul.c | 575 | replace(str, "%^", "% ^");
psoul.c | 577 | explode("f" + str + "g", "%^");
psoul.c | 578 | sizeof(bits);
psoul.c | 585 | implode(bits, "%^");
psoul.c | 596 | receive(responses[random(sizeof(responses))]+"\n");
psoul.c | 598 | receive(str);
psoul.c | 600 | set_this_player(ob);
psoul.c | 607 | set_this_player(ob);
psoul.c | 614 | eval_cost();
psoul.c | 635 | query_time_left();
psoul.c | 636 | return (str == "stop");
shut.c | 37 | write("This object can't be cloned.\n");
shut.c | 38 | dest_me();
shut.c | 41 | set_name("offler");
shut.c | 42 | set_living_name("offler");
shut.c | 43 | add_adjective( ({ "offler", "the", "crocodile" }));
shut.c | 44 | add_alias("god");
shut.c | 45 | enable_commands();
shut.c | 46 | set_short( "Offler" );
shut.c | 47 | add_property( "determinate", "" );
shut.c | 50 | add_alias("shut");
shut.c | 54 | reset_get();
shut.c | 62 | users();
shut.c | 63 | sizeof( people );
shut.c | 72 | time();
shut.c | 74 | call_out("end_it_all",0);
shut.c | 75 | set_heart_beat(0);
shut.c | 79 | ashout( "Game reboot in "+ time_to_crash +" seconds." );
shut.c | 83 | ashout( "Game is rebooting in "+ time_to_crash +" seconds." );
shut.c | 94 | ashout( "Game is rebooting in one minute." );
shut.c | 98 | ishout( "Game is rebooting in "+ time_to_crash +" minutes." );
shut.c | 109 | write("Bad argument\n");
shut.c | 112 | file_name(previous_object());
shut.c | 114 | write("No time given\n");
shut.c | 117 | users();
shut.c | 118 | sizeof(players);
shut.c | 123 | set_long("He is firmly concentrating on counting.\n");
shut.c | 126 | time()) + " seconds.\n");
shut.c | 128 | set_heart_beat(1);
shut.c | 133 | long();
shut.c | 138 | long(str,dark);
shut.c | 145 | ishout("Shutdown now!");
shut.c | 146 | users();
shut.c | 147 | sizeof(obs);
shut.c | 148 | call_out("force_quit", i, obs[i]);
shut.c | 149 | call_out("blue", 10);
shut.c | 157 | quit_alt();
shut.c | 166 | if (sizeof(users()) >
shut.c | 168 | call_out("blue", 10);
shut.c | 170 | shutdown(0);
shut.c | 175 | call_out( "dest_me", 1 );
shut.c | 178 | time();
pweath.c | 98 | environment(this_object());
pweath.c | 104 | environment(where);
pweath.c | 109 | query_temperature(where) - COMFORTABLE);
pweath.c | 116 | query_property("warmth");
pweath.c | 117 | query_property("cooling");
pweath.c | 122 | this_object()->query_property("warmth");
pweath.c | 123 | this_object()->query_property("cooling");
pweath.c | 130 | id("glasses") && !$1->id("jewellery") :));
pweath.c | 133 | query_type();
pweath.c | 142 | query_equivilant_type(type);
pweath.c | 148 | query_property("warmth");
pweath.c | 157 | query_property("cooling");
pweath.c | 168 | sizeof(zones);
pweath.c | 169 | if (room_temp + sizeof(zones) >
pweath.c | 170 | sizeof(zones) - 5);
pweath.c | 173 | sizeof(zones);
pweath.c | 175 | sizeof(zones) + 5);
pweath.c | 180 | this_object()->effects_matching("body.wetness");
pweath.c | 202 | ABS(room_temp - temperature) / 10.0);
pweath.c | 208 | to_int((adjustment + correction) * factor);
pweath.c | 216 | temperature_effects(this_object(), temperature);
events.c | 75 | set_my_colours(string event_type, string colour);
events.c | 76 | query_my_colours();
events.c | 78 | find_rel(string word, int from);
events.c | 79 | set_our_rows(int num);
events.c | 80 | set_our_cols(int num, int test);
events.c | 81 | do_busy(string str);
events.c | 82 | do_busy_player(object *players);
events.c | 83 | do_tell_his(string, int);
events.c | 84 | query_property(string name);
events.c | 85 | query_nationality_accent_ob();
events.c | 88 | create();
events.c | 95 | create();
events.c | 97 | create();
events.c | 177 | query_inform_types();
events.c | 192 | explode(str, " ");
events.c | 201 | write("Your informs are currently being repressed.\n");
events.c | 217 | this_object()->remove_property("inform repressed");
events.c | 218 | write("You are now being informed.  This is true!\n");
events.c | 228 | this_object()->add_property("inform repressed", 1);
events.c | 229 | write("Informs are now repressed.\n");
events.c | 237 | write("You will not be informed of anything.\n");
events.c | 243 | sizeof(frog);
events.c | 247 | if (sizeof(frog) >
events.c | 302 | return (int)guild->query_see_octarine();
events.c | 333 | replace(my_colours[event_type], " ", "");
events.c | 376 | set_term_type(_event_info->cur_term, query_property(PLAYER_ALLOW_COLOURED_SOULS));
events.c | 379 | sprintf(str, args ...);
events.c | 381 | explode(str, "%^OCTARINE:");
events.c | 383 | strsrch(bit, "%^");
events.c | 392 | replace_string(str, sprintf("%%^OCTARINE:%s%%^", octmess), "");
events.c | 399 | terminal_colour(str, _event_info->colour_map);
events.c | 401 | terminal_colour(str, _event_info->colour_map, width, indent);
events.c | 411 | printf("%c%c%c", IAC, DO, TELOPT_TTYPE);
events.c | 413 | printf("%c%c%c%c%c%c", IAC, SB, TELOPT_TTYPE, TELQUAL_SEND, IAC, SE);
events.c | 415 | printf("%c%c%c", IAC, DO, TELOPT_NAWS);
events.c | 446 | set_term_type(str, query_property(PLAYER_ALLOW_COLOURED_SOULS));
events.c | 448 | player_connected();
events.c | 452 | write("Ok, terminal type set to "+str+".\n");
events.c | 455 | notify_fail("No such terminal type as " + str  + ".\n");
events.c | 459 | notify_fail("Terminal type unchanged as " + str + ".\n");
events.c | 512 | add_command("rows", this_object(), "", (: set_our_rows(0) :));
events.c | 513 | add_command("cols", this_object(), "", (: set_our_cols(0, 0) :));
events.c | 514 | add_command("rows", this_object(), "<number>", (: set_our_rows($4[0]) :));
events.c | 515 | add_command("cols", this_object(), "<number>", (: set_our_cols($4[0], 0) :));
events.c | 516 | add_command("cols", this_object(), "test <number>", (: set_our_cols($4[0], 1) :));
events.c | 519 | set_term_type($4[0]) :));
events.c | 520 | add_command("term", this_object(), "", (: set_term_type(0) :));
events.c | 521 | add_command("inform", this_object(), "", (: do_inform(0) :));
events.c | 522 | add_command("inform", this_object(), "<string>", (: do_inform($4[0]) :));
events.c | 526 | add_command("busy", this_object(), "{on|off}", (: do_busy($4[0]) :));
events.c | 528 | do_busy_player($1) :));
events.c | 540 | return (:do_tell_his:);
events.c | 552 | strsrch(lower_case($1[0]), $(str)) > -1 :));
events.c | 556 | notify_fail("You have not been told anything.\n");
events.c | 564 | fix_string("%s%s\n", cols, strlen(bit[0]), 0, bit[0], bit[1]);
events.c | 566 | write(ret);
events.c | 583 | write("Busy set to " + str + ".\n");
events.c | 594 | write("Ok, setting you as busy with " + query_multiple_short(obs) + ".\n");
events.c | 642 | users();
events.c | 644 | filter(obs, (: $1->check_earmuffs("shout", this_player()) :) );
events.c | 653 | this_object()->query_property(PLAYER_EARMUFF_PROP);
events.c | 662 | this_player();
events.c | 694 | notify_fail("Rows currently set to " + rows + ".\nrows <number> to set.\n");
events.c | 698 | notify_fail("Invalid number of rows.\n");
events.c | 701 | write("Rows set to " + val + ".\n");
events.c | 730 | notify_fail("Columns currently set to " + cols + ".\ncols <number> to set.\n");
events.c | 734 | notify_fail("Invalid column size.\n");
events.c | 742 | write(implode(allocate(val, (: sprintf("%d", ($1 + 1) % 10) :)), "") + "\n");
events.c | 743 | call_out((: cols = $(cur) :), 3);
events.c | 746 | write("Columns set to " + val + ".\n");
events.c | 756 | map_delete(my_colours, event_type);
events.c | 796 | environment();
events.c | 802 | garble_text(info[5..], middle, 0, this_object());
events.c | 804 | garble_text_say(middle, info, this_object());
events.c | 807 | sprintf("%s%s%s", before, middle, after);
events.c | 837 | sprintf("%s%s%s%s", before, info, middle, after);
events.c | 869 | sprintf("%s%s%s%s", before, info, middle, after);
events.c | 875 | tell_object( this_object(), "Looking at "+ message +".\n" );
events.c | 881 | tell_object( this_object(), "Expanding "+ middle +".\n" );
events.c | 884 | sprintf("%s$%d$%s", before, last, after);
events.c | 893 | tell_object( this_object(), "Found "+ info +".\n" );
events.c | 907 | tell_object( this_object(), "Trying "+ middle +".\n" );
events.c | 910 | sprintf("%s%s$%s", message, before, middle);
events.c | 911 | sprintf("$%s", after);
events.c | 915 | sprintf("%s%s$%d$", message, before, last);
events.c | 916 | sprintf("my_%s_short:%s", middle, info) }) });
events.c | 920 | return ({ message, things });
events.c | 941 | reform_message( message, things );
events.c | 962 | tell_object( this_object(), sprintf( "%O\n", _event_info->eemessages ) );
events.c | 993 | query_short_desc();
events.c | 998 | hide_invis_string();
events.c | 1022 | query_plural_desc();
events.c | 1027 | hide_invis_string();
events.c | 1039 | short(0, 0);
events.c | 1069 | query_determinate( this_object() );
events.c | 1071 | add_a( (string)this_object()->get_pretty_short( thing, dark ) );
events.c | 1073 | this_object()->get_pretty_short( thing, dark );
events.c | 1099 | query_determinate( this_object() );
events.c | 1101 | this_object()->get_pretty_short( thing, dark );
events.c | 1102 | this_object()->get_pretty_short( thing, dark );
events.c | 1108 | query_visible(this_object()) :))) >
events.c | 1134 | this_object();
events.c | 1136 | environment();
events.c | 1139 | my_a_short( thing );
events.c | 1140 | query_determinate( this_object() );
events.c | 1142 | this_object()->get_pretty_plural( thing, dark );
events.c | 1146 | this_object()->get_pretty_short( thing, dark );
events.c | 1148 | this_object()->get_pretty_short( thing, dark );
events.c | 1179 | this_object()->get_pretty_short( thing, dark );
events.c | 1187 | environment( thing );
events.c | 1189 | my_a_short( thing, arg, dark );
events.c | 1192 | my_a_short( thing, arg, dark );
events.c | 1196 | tell_object( this_object(), sprintf( "%O\n", _event_info->had_shorts ) );
events.c | 1204 | my_the_short( _event_info->where, arg, dark );
events.c | 1213 | this_object()->get_pretty_plural( thing, dark );
events.c | 1218 | this_object()->get_pretty_short( thing, dark );
events.c | 1245 | query_determinate(this_object());
events.c | 1253 | this_object()->get_pretty_short( thing, dark );
events.c | 1261 | environment( thing );
events.c | 1263 | my_the_short( thing, arg, dark );
events.c | 1266 | my_the_short(thing, arg, dark);
events.c | 1277 | debug_printf("Had shorts");
events.c | 1280 | my_the_short(_event_info->where, arg, dark);
events.c | 1289 | this_object()->get_pretty_plural( thing, dark );
events.c | 1293 | this_object()->get_pretty_short(thing, dark);
events.c | 1297 | clear_event_info_had_shorts() { _event_info->had_shorts = ({ });
events.c | 1320 | if (!_event_info->had_shorts)  clear_event_info_had_shorts();
events.c | 1322 | query_num($1) :);
events.c | 1324 | query_num($1, 20) :);
events.c | 1327 | this_object()->check_dark(environment()->query_light());
events.c | 1330 | explode( str, ":" );
events.c | 1332 | find_object( parts[ 1 ] );
events.c | 1333 | if (sizeof(parts) >
events.c | 1334 | implode(parts[ 1.. ], ":");
events.c | 1335 | find_object( parts[1] );
events.c | 1342 | tell_object( this_object(), sprintf( "%O\n", ob ) );
events.c | 1353 | if (sizeof(parts) >
events.c | 1357 | call_other( this_object(), parts[0], ob, parts[1], dark);
events.c | 1361 | my_mirror_short(ob, parts[1]);
events.c | 1364 | my_a_short(ob, parts[1], dark);
events.c | 1367 | my_the_short(ob, parts[1], dark);
events.c | 1370 | my_one_short(ob, parts[1], dark);
events.c | 1373 | my_poss_short(ob, parts[1], dark);
events.c | 1376 | my_the_poss_short(ob, parts[1], dark);
events.c | 1387 | member_array(desc, descs_str);
events.c | 1395 | member_array( "you", descs_str );
events.c | 1403 | if(sizeof(short_list) >
events.c | 1413 | sizeof( descs_str );
events.c | 1418 | short();
events.c | 1429 | this_object()->get_pretty_plural( things[ 0 ], dark );
events.c | 1465 | explode( column, "$C$" );
events.c | 1466 | map(parts[1..], (: capitalize($1) :));
events.c | 1467 | explode( implode(parts, ""), "$I$" );
events.c | 1469 | sscanf( part, "%s=%s", stuff, part );
events.c | 1473 | explode( stuff, "," );
events.c | 1480 | to_int( stuff[ 0 ][ 1 .. ] );
events.c | 1483 | to_int( stuff[ 0 ][ 1 .. ] );
events.c | 1492 | to_int( stuff[ 0 ] );
events.c | 1497 | if ( sizeof( stuff ) >
events.c | 1500 | to_int( stuff[ 1 ][ 1 .. ] );
events.c | 1503 | to_int( stuff[ 1 ][ 1 .. ] );
events.c | 1508 | to_int( stuff[ 1 ] );
events.c | 1520 | fix_string( part, width - right, left, pad);
events.c | 1522 | fix_string( part, width - right, 0, pad );
events.c | 1557 | explode( message, "$COLUMN$" );
events.c | 1558 | if (sizeof(columns) >
events.c | 1559 | allocate(sizeof(columns), ({ }));
events.c | 1563 | to_int(num);
events.c | 1569 | explode(indent_column(columns[i], size, 1), "\n");
events.c | 1571 | explode(indent_column(columns[<1], width, 0), "\n");
events.c | 1578 | sizeof(stuff);
events.c | 1579 | if (sizeof(stuff[i]) >
events.c | 1581 | if (sizeof(stuff[i]) >
events.c | 1587 | sprintf("%*s ", stuff[i][0] - 1, "");
events.c | 1592 | fix_string(ret);
events.c | 1593 | while (ok);
events.c | 1595 | indent_column(columns[0], cols, 0);
events.c | 1623 | this_object()->more_string( fit_message( message ), bit, 1 );
events.c | 1627 | tell_object( this_object(), fix_for_mxp( fit_message( message ) ));
events.c | 1629 | tell_object( this_object(), fit_message( message ) );
events.c | 1651 | clear_event_info_had_shorts();
events.c | 1652 | sizeof( stuff[ 1 ] );
events.c | 1655 | calc_shorts( stuff[ 1 ][ i ] ) );
events.c | 1663 | sprintf("%s%s%s", start, verb_plur, finish);
events.c | 1665 | sprintf("%s%s%s", start, verb_sing, finish);
events.c | 1668 | sprintf("%s%s%s", start, verb_plur, finish);
events.c | 1691 | sizeof( messages );
events.c | 1694 | evaluate_message( ({ message, messages[ i + 1 ] }) );
events.c | 1696 | show_message( message );
events.c | 1710 | evaluate_message( reform_message( message, ({ }) ) );
events.c | 1748 | colour_event(which, INFORM_COLOURS[which]);
events.c | 1750 | colour_event(which, INFORM_COLOURS["default"]);
events.c | 1758 | query_friend_tag(thing->query_name());
events.c | 1760 | query_friend_tag(thing->query_name());
events.c | 1766 | colour_event(which, INFORM_COLOURS["friend"]);
events.c | 1771 | evaluate(mess, this_object());
events.c | 1775 | query_friend_tag(thing->query_name());
events.c | 1782 | query_ip_name(thing);
events.c | 1784 | this_object()->add_message( "[%^"+ inform_col +"%^"+ mess +"%^RESET%^]\n",                              ({ }) );
events.c | 1799 | replace_string( mess, "$N", "$0$" );
events.c | 1800 | explode( mess, " " );
events.c | 1820 | file_name( thing ) }) }) );
events.c | 1823 | file_name( thing ) }) }) );
events.c | 1836 | sneak_task(this_object());
events.c | 1837 | this_object()->perception_task(thing);
events.c | 1843 | enter_exit_mess( mess, thing, 0 );
events.c | 1854 | event_exit( thing, mess, to );
events.c | 1859 | enter_exit_mess( mess, thing, 1 );
events.c | 1870 | this_object()->remove_attacker_list(thing);
events.c | 1874 | the_short() ), ({ }) );
events.c | 1875 | print_messages();
events.c | 1882 | the_short() }) ), ({ }) );
events.c | 1885 | the_short() ), ({ }) );
events.c | 1887 | print_messages();
events.c | 1907 | this_object()), ({ }) );
events.c | 1909 | this_object()->add_message( str, ({ }) );
events.c | 1916 | event_say( caller, words, avoid, 0 );
events.c | 1928 | this_object()), ({ }) );
events.c | 1930 | this_object()->add_message( str, ({ }) );
events.c | 1932 | print_messages();
events.c | 1937 | event_write( 0, str, language );
events.c | 1947 | replace(str, "%^", " ");
events.c | 1951 | strip_colours(str);
events.c | 1955 | if (sizeof(avoid) >
events.c | 1958 | event_say(ob, colour_event("soul", "") + "$C$" + str + "%^RESET%^", avoid, 0);
events.c | 1960 | event_write( ob, str + "%^RESET%^", 0 );
events.c | 1972 | this_object()->add_message( colour_event("emote", "%^CYAN%^") + mess + "%^RESET%^", ({ }) );
events.c | 2006 | cap_words(lang);
events.c | 2009 | query_accent_name();
events.c | 2022 | fix_shorthand(mess);
events.c | 2032 | query_default_language());
events.c | 2049 | time(), remote }) });
events.c | 2050 | if (sizeof(tell_history) >
events.c | 2081 | fix_shorthand(mess);
events.c | 2093 | add_tell_history(start, mess, 0);
events.c | 2097 | capitalize(start), mess);
events.c | 2099 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2101 | tell_object(this_object(), tmp);
events.c | 2104 | query_idle(this_object())) >
events.c | 2113 | query_multiple_short(args)+".\n");
events.c | 2142 | cap_words(lang);
events.c | 2145 | fix_shorthand(mess);
events.c | 2205 | capitalize(lang);
events.c | 2221 | fix_shorthand(mess);
events.c | 2253 | fix_shorthand(message);
events.c | 2260 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2262 | tell_object(this_object(), tmp);
events.c | 2285 | fix_shorthand(message);
events.c | 2292 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2294 | tell_object(this_object(), tmp);
events.c | 2314 | this_object()->print_messages();
events.c | 2343 | fix_shorthand(mess);
events.c | 2350 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2352 | tell_object(this_object(), tmp);
events.c | 2368 | add_lord_history(start, mess);
events.c | 2377 | fix_shorthand(mess);
events.c | 2384 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2386 | tell_object(this_object(), tmp);
events.c | 2409 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2411 | tell_object(this_object(), tmp);
events.c | 2436 | tell_object(this_object(), fix_for_mxp(tmp));
events.c | 2438 | tell_object(this_object(), tmp);
events.c | 2451 | file_name( me ) }) }) );
events.c | 2468 | file_name( ob ) }) }) );
events.c | 2474 | file_name( ob ) }) }) );
events.c | 2488 | file_name( ob ) }) }) );
events.c | 2490 | this_object()->add_message( mess, ({ }) );
events.c | 2499 | tell_object(this_object(), "] "+mess);
events.c | 2516 | printf("%c%c%c%c%c%c", IAC, SB, TELOPT_TTYPE, TELQUAL_SEND, IAC, SE);
events.c | 2518 | tell_object(this_object(), "Unknown terminal type \""+type+"\".\n");
events.c | 2533 | set_cols(width);
events.c | 2536 | set_rows(height);
events.c | 2552 | replace_string(read_file("/doc/login/mxp_setup"), "\n", "") + "\n");
more_file.c | 68 | read_file(_more_file_fname, topl, nrows);
more_file.c | 73 | this_player()->query_property(TABSTOP_PROP);
more_file.c | 76 | sprintf("%" + tab + "' 's", "");
more_file.c | 82 | sprintf("%c", 13), "^M" }));
more_file.c | 91 | sizeof(bits);
more_file.c | 92 | if (strlen(bits[i]) >
more_file.c | 105 | printf("%s\n", implode(lines, "\n"));
more_file.c | 118 | file_length(_more_file_fname);
more_file.c | 120 | printf("Empty file.\n");
more_file.c | 121 | if (sizeof(filenames) >
more_file.c | 122 | get_next_filename();
more_file.c | 127 | printf("File does not exist.\n");
more_file.c | 128 | if (sizeof(filenames) >
more_file.c | 129 | get_next_filename();
more_file.c | 134 | printf("You cannot more a directory.\n");
more_file.c | 135 | if (sizeof(filenames) >
more_file.c | 136 | get_next_filename();
more_file.c | 142 | printf( "\n" );
more_file.c | 143 | read_file(_more_file_fname, 1, 1);
more_file.c | 158 | cat_file("/tmp/nroffed_file");
more_file.c | 159 | rm("/tmp/nroffed_file.o");
more_file.c | 161 | this_player()->more_string(s2, _more_file_fname);
more_file.c | 167 | display_file();
more_file.c | 174 | this_player()->get_files(s);
more_file.c | 176 | return ({ s });
more_file.c | 206 | explode(stat_line, "$");
more_file.c | 207 | sizeof(frog);
more_file.c | 239 | printf("Bad tag (%s) found in format string.\n", frog[i]);
more_file.c | 243 | printf("%s", s);
more_file.c | 257 | extract(str, 1);
more_file.c | 275 | printf("OK.\n");
more_file.c | 284 | extract(s1, 1);
more_file.c | 286 | set_mark("'");
more_file.c | 290 | printf("No previous search string.\n");
more_file.c | 298 | explode(read_file(_more_file_fname, i, j), "\n");
more_file.c | 299 | sizeof(s3);
more_file.c | 308 | while (j < fsize && k == sizeof(s3));
more_file.c | 310 | printf("Sorry " + s1 + " not found.\n");
more_file.c | 321 | extract(s1, 1);
more_file.c | 325 | set_mark("'");
more_file.c | 329 | printf("No previous search string.\n");
more_file.c | 336 | explode(read_file(_more_file_fname, j, i), "\n");
more_file.c | 337 | sizeof(s3);
more_file.c | 347 | while (j > 0 && k == sizeof(s3));
more_file.c | 349 | printf("Sorry "+ s1 +" not found.\n");
more_file.c | 360 | next_page(num + "/");
more_file.c | 364 | next_page(num + "/!");
more_file.c | 368 | next_page(num + "?");
more_file.c | 372 | next_page(num + "?!");
more_file.c | 393 | set_mark("'");
more_file.c | 407 | set_mark("'");
more_file.c | 433 | printf("Sorry, you must specify a name.\n");
more_file.c | 436 | set_mark(s1);
more_file.c | 437 | printf("OK, mark " + s1 + " set.\n");
more_file.c | 442 | printf("Sorry, must go to a mark.\n");
more_file.c | 455 | printf("Mark " + s1 + " not set.\n");
more_file.c | 459 | expand_path(str);
more_file.c | 461 | printf("No matching files.\n");
more_file.c | 465 | get_next_filename();
more_file.c | 469 | cat("/doc/helpdir/more");
more_file.c | 473 | display_file();
more_file.c | 475 | status_line();
more_file.c | 476 | input_to("next_page");
more_file.c | 478 | if (sizeof(filenames) >
more_file.c | 480 | input_to("next_page");
more_file.c | 482 | call_other(this_player(), finish_func);
more_file.c | 485 | call_other(this_player(), finish_func);
more_file.c | 491 | expand_path(str);
more_file.c | 493 | notify_fail("No matching files.\n");
more_file.c | 498 | notify_fail("Could not read " + _more_file_fname + ".\n");
more_file.c | 502 | status_line();
more_file.c | 503 | input_to("next_page");
more_file.c | 506 | call_other(this_player(), finish_func);
log.c | 20 | return (mapp(last_error)?last_error:0);
playtester.c | 105 | query_in_pt_arena();
playtester.c | 119 | explode (base_name (ob), "/");
playtester.c | 129 | create();
playtester.c | 130 | new(class playtester_data);
playtester.c | 139 | enable_wizard();
playtester.c | 141 | move_player_to_start(bong, new_pl, c_name, ident, go_invis);
playtester.c | 142 | AddSearchPath(({ DIR_PLAYTESTER_CMDS }));
playtester.c | 144 | AddSearchPath(({ DIR_SENIOR_PLAYTESTER_CMDS }));
playtester.c | 147 | AddSearchPath(({ DIR_EXEC_PLAYTESTER_CMDS }));
playtester.c | 192 | base_name (environment (this_player())));
playtester.c | 212 | base_name (environment (this_player())));
playtester.c | 230 | new(class playtester_data);
playtester.c | 231 | query_hp();
playtester.c | 236 | this_player());
playtester.c | 239 | base_name (environment (this_player())));
playtester.c | 241 | remove_call_out(_pt_data->turn_off);
playtester.c | 249 | call_out("disable_personal_pt_protection", 5 * 60);
playtester.c | 282 | base_name (environment (this_player())));
playtester.c | 283 | call_out("disable_personal_pt_protection", 5 * 60);
playtester.c | 293 | base_name (environment (this_player())));
playtester.c | 298 | this_player());
playtester.c | 328 | clone_object( "/obj/corpse" );
playtester.c | 329 | set_owner( 0, this_object() );
playtester.c | 330 | set_ownership( query_name() );
playtester.c | 331 | set_race_name( query_race() );
playtester.c | 333 | set_race_ob( "/std/races/unknown" );
playtester.c | 335 | set_race_ob( query_race_ob() );
playtester.c | 337 | add_adjective( query_adjectives() );
playtester.c | 338 | start_decay();
playtester.c | 355 | death_informer( this_object(), 0, _pt_data->log_file, 1 );
playtester.c | 371 | call_out ("pt_set_hp", 0, query_max_hp());
playtester.c | 374 | pt_make_corpse();
playtester.c | 375 | move( environment( ) );
playtester.c | 377 | clone_object( "/std/object" );
playtester.c | 378 | set_name( "flowers" );
playtester.c | 379 | set_short( "bunch of flowers" );
playtester.c | 380 | add_alias( "bunch" );
playtester.c | 381 | add_adjective( ({ "bunch", "of" }) );
playtester.c | 382 | set_main_plural( "bunches of flowers" );
playtester.c | 383 | add_plural( ({ "bunches", "bunches of flowers" }) );
playtester.c | 384 | set_long( "This is a small bunch of nice flowers.\n" );
playtester.c | 385 | set_weight( 5 + random( 10 ) );
playtester.c | 386 | set_value( 0 );
playtester.c | 387 | set_read_mess( "Rest In Peas", "common" );
playtester.c | 388 | move( corpse );
playtester.c | 405 | query_name() +" - "+ hp +" hitpoints.\n" );
playtester.c | 411 | pt_do_death();
playtester.c | 414 | query_max_hp();
playtester.c | 420 | run_away();
playtester.c | 506 | pt_do_death();
playtester.c | 508 | do_death( thing );
playtester.c | 516 | pt_adjust_hp( hp, attacker );
playtester.c | 519 | adjust_hp( hp, attacker );
playtester.c | 527 | pt_query_hp();
playtester.c | 529 | query_hp();
playtester.c | 574 | adjust_xp(number, shared);
playtester.c | 579 | event_move_object (from, to);
playtester.c | 586 | remove_call_out(_pt_data->turn_off);
playtester.c | 592 | base_name (environment (this_player())));
playtester.c | 594 | call_out("disable_pt_protection", 5 * 60);
playtester.c | 602 | remove_call_out(_pt_data->turn_off);
playtester.c | 615 | query_player_killer();
playtester.c | 619 | query_player_killer();
cloner.c | 53 | unguarded((: save_object, SAVE_FILE:));
cloner.c | 60 | if (file_size(SAVE_FILE + ".o") >
cloner.c | 61 | unguarded((: restore_object, SAVE_FILE:));
cloner.c | 67 | load_file();
cloner.c | 85 | catch( thing = clone_object( word ) );
cloner.c | 120 | write("Destination file does not exist\n");
cloner.c | 123 | time()});
cloner.c | 126 | call_out( (: save_file :), SAVE_FILE_DELAY );
cloner.c | 130 | file_name( previous_object() );
cloner.c | 133 | this_player()->query_cap_name();
cloner.c | 135 | write("Mapping of "+from+" to "+to+" added.\n");
cloner.c | 137 | ctime(time())+".\n");
cloner.c | 138 | remove_call_out("clean_up");
cloner.c | 139 | call_out("clean_up", 120 + random(500));
cloner.c | 155 | map_delete( changes, from );
cloner.c | 156 | save_file();
cloner.c | 157 | write( "Mapping of " + from + " removed.\n" );
cloner.c | 159 | file_name( previous_object() );
cloner.c | 162 | this_player()->query_cap_name();
cloner.c | 165 | ctime( time() ) + ".\n" );
cloner.c | 168 | write("No mapping found for " + from + ".\n");
cloner.c | 217 | save_file();
cloner.c | 234 | map_delete(illegal, basename+":"+short);
cloner.c | 235 | save_file();
cloner.c | 266 | map_delete(changes, from);
cloner.c | 267 | save_file();
spells.c | 23 | queue_commands() { return sizeof( _spell_effects );
spells.c | 32 | file_name(this_object())));
spells.c | 48 | file_name(this_object())));
spells.c | 49 | sizeof(_spell_effects);
spells.c | 51 | delete(_spell_effects[i+1], j, 2);
spells.c | 53 | delete(_spell_effects, i, 2);
spells.c | 66 | file_name(this_object())));
spells.c | 79 | return ({ });
spells.c | 81 | sizeof(_spell_effects);
spells.c | 89 | this_object()->remove_property("casting");
spells.c | 90 | sizeof(_spell_effects);
spells.c | 91 | sizeof(_spell_effects[i+1]);
spells.c | 92 | call_out("do_call_out_effect", 1, ({ _spell_effects[i+1][j+1], attacker }));
spells.c | 95 | delete(_spell_effects[i+1], j, 2);
spells.c | 98 | delete(_spell_effects, i, 2);
finger.c | 67 | query_name();
finger.c | 68 | change_password();
finger.c | 69 | change_password2(mixed pass);
finger.c | 70 | change_password3(string pass);
finger.c | 71 | change_password4(string pass);
finger.c | 72 | add_command(string command, object ob, mixed format, function func);
finger.c | 79 | add_command("password", this_object(), "", (: change_password() :));
finger.c | 80 | add_command("passwd", this_object(), "", (: change_password() :));
finger.c | 94 | map_delete(player_info, "desc");
finger.c | 122 | map_delete(player_info["zone desc"], zone);
finger.c | 146 | return ({ });
finger.c | 148 | keys(player_info["zone desc"]);
finger.c | 171 | query_type();
finger.c | 176 | query_equivilant_type(type);
finger.c | 192 | replace_string(query_zone_desc(zone), "$NEW_LINE$", "\n");
finger.c | 216 | write("Please enter your old password : ");
finger.c | 217 | input_to((: change_password2 :),1);
finger.c | 220 | change_password2(0);
finger.c | 228 | crypt(pass,password);
finger.c | 230 | write("\nIncorrect.\n");
finger.c | 234 | write("\nEnter new Password : ");
finger.c | 235 | input_to((: change_password3 :),1);
finger.c | 242 | write("\nPassword is too short, must be at least 6 characters.\n");
finger.c | 243 | write("Enter new Password :");
finger.c | 244 | input_to((: change_password3 :),1);
finger.c | 248 | write("\nPlease enter again : ");
finger.c | 249 | input_to((: change_password4 :),1);
finger.c | 255 | write("\nIncorrect.\n");
finger.c | 258 | crypt(pass,password);
finger.c | 259 | write("\nOk.\n");
wiz_channels.c | 30 | channel_cmd(string mess);
wiz_channels.c | 31 | channel_hist();
wiz_channels.c | 36 | query_domains();
wiz_channels.c | 45 | keys(INTERMUD_MAP);
wiz_channels.c | 57 | add_command(channel, "<string'mess'>", (: channel_cmd($4[0]) :));
wiz_channels.c | 58 | add_command(channel+"@", "<string'mess'>", (: channel_cmd("@"+$4[0]) :));
wiz_channels.c | 59 | add_command(channel+"?", "", (: channel_cmd("?") :));
wiz_channels.c | 62 | add_command(channel+"!", "", (: channel_cmd("!") :));
wiz_channels.c | 63 | add_command("h"+channel, "", (: channel_hist() :));
wiz_channels.c | 75 | strlen(fish);
wiz_channels.c | 97 | add_failed_mess("Syntax: "+channel+"[@|?] [text]\n");
wiz_channels.c | 103 | add_failed_mess("No such channel " + channel + ".\n");
wiz_channels.c | 118 | eventSendChannelWhoRequest(INTERMUD_MAP[channel]);
wiz_channels.c | 124 | query_visible(this_object()) :));
wiz_channels.c | 126 | sizeof(people);
wiz_channels.c | 129 | delete(people, i, 1);
wiz_channels.c | 135 | delete(people, i, 1);
wiz_channels.c | 140 | query_name()) :) );
wiz_channels.c | 142 | query_name()) :) );
wiz_channels.c | 156 | if (query_idle(ob) >
wiz_channels.c | 159 | query_idle(ob);
wiz_channels.c | 165 | sprintf(" [%02dm]", mins);
wiz_channels.c | 167 | sprintf(" [%02dh:%02dm]", hours, mins);
wiz_channels.c | 172 | map(people, map_func);
wiz_channels.c | 173 | map(off_line, map_func);
wiz_channels.c | 176 | query_multiple_short( people ) +".\n"));
wiz_channels.c | 180 | query_multiple_short( off_line ) +".\n"));
wiz_channels.c | 199 | query_verb();
wiz_channels.c | 204 | handle_command_line(channel, mess);
wiz_channels.c | 223 | write("Why use " + channel + "-tell when you can't hear a response?\n");
wiz_channels.c | 226 | replace(mess, BEEP, "");
wiz_channels.c | 250 | my_mess("You " + channel + "-tell: ", mess);
wiz_channels.c | 254 | user_event(this_object(), "intermud_tell", start, mess, channel);
wiz_channels.c | 257 | children(TALKER);
wiz_channels.c | 258 | find_object(TALKER) });
wiz_channels.c | 269 | add_chat_history(channel, start, mess);
wiz_channels.c | 282 | query_chat_history(channel);
wiz_channels.c | 287 | write("The " + channel + " channel history is:\n");
wiz_channels.c | 288 | sizeof(hist);
wiz_channels.c | 289 | if (sizeof(hist[i]) >
alias.c | 54 | exec_alias(string verb, string args);
alias.c | 55 | expand_alias(string verb, string args);
alias.c | 56 | set_doing_alias(string verb);
alias.c | 57 | is_doing_alias(string verb);
alias.c | 58 | run_alias(string verb, string args);
alias.c | 59 | remove_alias_thing(string);
alias.c | 60 | alias(string);
alias.c | 61 | edit_alias(string);
alias.c | 94 | copy(aliases[name]);
alias.c | 107 | printf("%O\n", file_name(previous_object()));
alias.c | 110 | map_delete(aliases, name);
alias.c | 120 | add_command("END_ALIAS", "<string>", (:remove_alias_thing($4[0]):));
alias.c | 130 | write("You can't do that :)\n");
alias.c | 148 | copy(aliases);
alias.c | 173 | run_alias(verb, args);
alias.c | 175 | set_doing_alias(verb);
alias.c | 177 | command(comm);
alias.c | 203 | expand_alias(verb, args);
alias.c | 249 | return ({ verb + " " + args });
alias.c | 257 | explode(verb + " " + args, " ");
alias.c | 258 | sizeof(stuff);
alias.c | 277 | implode(bits[1..num], " ");
alias.c | 280 | implode(bits[num..100], " ");
alias.c | 340 | map_delete(doing_alias, verb);
alias.c | 341 | this_player()->adjust_time_left(-DEFAULT_TIME);
auto_mailer.c | 52 | write("AUTO_MAILER: Illegal access!\n");
auto_mailer.c | 55 | back_trace() :));
creator.c | 45 | enable_wizard();
creator.c | 47 | move_player_to_start(bong, new_pl, c_name, ident, go_invis);
creator.c | 48 | write(LOGIN_HANDLER->get_message("/doc/CREATORNEWS"));
creator.c | 50 | tell_object(this_object(), "===> You are currently INVISIBLE! <===\n");
creator.c | 73 | tell_object(this_object(), "] "+bing);
friends.c | 25 | stringp(_friends[person]);
friends.c | 40 | previous_object()->query_name());
friends.c | 44 | file_name(previous_object()));
friends.c | 54 | if (strlen(tag) >
friends.c | 69 | map_delete(_friends, person);
friends.c | 77 | keys(_friends);
friends.c | 82 | previous_object()->query_name());
friends.c | 86 | file_name(previous_object()));
friends.c | 88 | return ({ });
lord.c | 23 | do_dismiss(string str, string reason);
lord.c | 24 | employ(string str);
lord.c | 25 | new_domain(string dom, string director);
lord.c | 26 | do_heart_beat();
lord.c | 27 | do_qsnoop(object *obs);
lord.c | 28 | bulk_delete( string word );
lord.c | 29 | clean_up_files( string word );
lord.c | 30 | do_hexec(string);
lord.c | 33 | create();
lord.c | 39 | move_player_to_start(bong, bing, c_name, ident, go_invis);
lord.c | 40 | cat("doc/CREATORNEWS");
lord.c | 41 | cat("doc/DIRECTORNEWS");
lord.c | 43 | enable_wizard();
lord.c | 61 | add_command("qsnoop", this_object(), "", (: do_qsnoop :));
lord.c | 62 | add_command("employ", this_object(), "<word>", (: employ($4[0]) :));
lord.c | 63 | add_command("dismiss", this_object(), "<word> <string>", (: do_dismiss($4[0], $4[1]) :));
lord.c | 65 | new_domain($4[0], $4[1]) :) );
lord.c | 66 | add_command("heart_beat", this_object(), "", (: do_heart_beat() :) );
lord.c | 69 | bulk_delete($4[0]) :) );
lord.c | 71 | clean_up_files($4[0]) :) );
lord.c | 72 | AddSearchPath(({ DIR_LORD_CMDS, DIR_SECURE_LORD_CMDS }));
lord.c | 82 | shutdown(0);
lord.c | 84 | do_hexec(input[5..]);
lord.c | 85 | process_input(input);
lord.c | 93 | shutdown(0);
lord.c | 101 | heart_beat();
lord.c | 138 | if(file_size(CREATOR_DOC) >
lord.c | 140 | read_file(CREATOR_DOC);
lord.c | 146 | if(file_size(PROJECT_STYLE)>
lord.c | 147 | read_file(PROJECT_STYLE);
lord.c | 170 | return (int)master()->dismiss_creator( str + " " + reason);
lord.c | 183 | return (int)master()->create_domain(dom, director);
lord.c | 203 | event_enter(me, s1, from);
lord.c | 216 | event_exit(me, s1, from);
lord.c | 225 | catch(("/w/"+query_name()+"/exec_thing")->bingle());
lord.c | 226 | destruct(find_object("/w/"+query_name()+"/exec_thing"));
lord.c | 227 | rm("/w/"+query_name()+"/exec_thing.c");
lord.c | 239 | adjust_xp(number, shared);
lord.c | 254 | lower_case(word);
lord.c | 255 | return (int)"/secure/bulk_delete"->delete_files(word);
lord.c | 269 | return (int)"/secure/bulk_delete"->clean_up_files(word);
lord.c | 284 | snoop(this_object(), 0);
lord.c | 285 | write("Ok, qsnoop cancelled.\n");
lord.c | 290 | notify_fail("You fail to qsnoop " + targ->query_cap_name() + ".\n");
lord.c | 293 | write("Ok, qsnooping "+targ->query_cap_name() + ".\n");
c_compiler.c | 17 | initialize_methods();
c_compiler.c | 20 | initialize_methods();
c_compiler.c | 21 | seteuid(getuid());
c_compiler.c | 25 | add_method("c",  file_name(this_object()), "compile_c");
c_compiler.c | 30 | go_ahead_make_my_womble();
c_compiler.c | 31 | find_object(name);
c_compiler.c | 33 | clone_object(name);
efuns.c | 17 | return (object)HANDLER->clone_virtual_object(name);
efuns.c | 18 | clone_object(name);
efuns.c | 28 | find_object(name);
efuns.c | 30 | destruct_virtual_object(obj);
efuns.c | 31 | destruct(obj);
efuns.c | 34 | destruct_virtual_object(name);
efuns.c | 35 | destruct(name);
efuns.c | 45 | file_name(obj);
efuns.c | 64 | return (object)HANDLER->find_virtual_object(str);
modified_efuns.c | 15 | this_player(), previous_object() }) + ({ avoid });
modified_efuns.c | 17 | this_player(), previous_object() });
modified_efuns.c | 20 | event(environment(this_player()), "say", str, avoid);
modified_efuns.c | 22 | event(previous_object(), "say", str, avoid);
modified_efuns.c | 24 | event(environment(previous_object()), "say", str, avoid);
modified_efuns.c | 32 | this_player(), previous_object() }) + ({ avoid });
modified_efuns.c | 34 | this_player(), previous_object() });
modified_efuns.c | 37 | event(environment(this_player()), "say", str, avoid);
modified_efuns.c | 39 | event(previous_object(), "say", str, avoid);
modified_efuns.c | 43 | event(environment(environment(previous_object())), "say", str, avoid);
modified_efuns.c | 45 | event(environment(previous_object()), "say", str, avoid);
modified_efuns.c | 59 | event(ob, "say", str, avoid);
modified_efuns.c | 64 | event_write(previous_object(), str);
modified_efuns.c | 93 | if (file_size("/log/"+name) >
modified_efuns.c | 94 | seteuid("Root");
modified_efuns.c | 95 | rm("/log/"+name+".old");
modified_efuns.c | 96 | rename("/log/"+name, "/log/"+name+".old");
modified_efuns.c | 98 | seteuid("Root");
modified_efuns.c | 99 | write_file("/log/"+name, mess);
modified_efuns.c | 100 | seteuid(0);
modified_efuns.c | 105 | capitalize(MUD_NAME);
modified_efuns.c | 112 | seteuid(geteuid(previous_object()));
modified_efuns.c | 113 | read_file(file, start_line, number);
modified_efuns.c | 114 | seteuid(0);
modified_efuns.c | 116 | printf("%s", bing[0..5000]);
modified_efuns.c | 125 | seteuid(geteuid(previous_object()));
modified_efuns.c | 127 | return (object)HANDLER->clone_virtual_object(name);
modified_efuns.c | 128 | clone_object(name);
modified_efuns.c | 138 | find_object(name);
modified_efuns.c | 140 | destruct_virtual_object(obj);
modified_efuns.c | 141 | destruct(obj);
modified_efuns.c | 144 | destruct_virtual_object(name);
modified_efuns.c | 145 | destruct(name);
modified_efuns.c | 155 | file_name(obj);
modified_efuns.c | 174 | return (object)HANDLER->find_virtual_object(str);
server2.c | 38 | add_method(string suffix, object ob, string fun, int type);
server2.c | 54 | seteuid(getuid());
server2.c | 64 | create_virtual_object(string name, int clone);
server2.c | 78 | Error(s) write(s);
server2.c | 78 | log_file("VO_HANDLER", s);
server2.c | 85 | explode(name, ".");
server2.c | 90 | call_other(method[OB], method[FUN], name, clone);
server2.c | 91 | add_property("virtual name", name);
server2.c | 96 | Error("create_virtual_object() : unknown suffix to " + name + "\n");
data_compiler.c | 19 | initialize_methods();
data_compiler.c | 22 | initialize_methods();
data_compiler.c | 23 | seteuid(getuid());
data_compiler.c | 27 | add_method("s",  file_name(this_object()), "compile_soul", 1);
data_compiler.c | 28 | add_method("r_n",  file_name(this_object()), "compile_random_name", 1);
data_compiler.c | 40 | compile_file(name);
data_compiler.c | 41 | clone_object("/std/object");
data_compiler.c | 42 | set_name("compile");
data_compiler.c | 43 | set_short("Compiling "+name+" now");
data_compiler.c | 44 | call_out((: $(ob)->dest_me() :), 2);
data_compiler.c | 57 | open_file(name);
data_compiler.c | 58 | clone_object("/std/object");
data_compiler.c | 59 | set_name("compile");
data_compiler.c | 60 | set_short("Compiling "+name+" now");
data_compiler.c | 61 | call_out((: $(ob)->dest_me() :), 2);
compiler.c | 57 | initialize_methods();
compiler.c | 58 | strip_string( string str );
compiler.c | 80 | seteuid("Root");
compiler.c | 81 | initialize_methods();
compiler.c | 110 | add_method( "ob", file_name( this_object() ), "compile_ob" );
compiler.c | 111 | add_method( "arm", file_name( this_object() ), "compile_arm" );
compiler.c | 112 | add_method( "clo", file_name( this_object() ), "compile_clo" );
compiler.c | 113 | add_method( "trans", file_name( this_object() ), "compile_clotrans" );
compiler.c | 114 | add_method( "sca", file_name( this_object() ), "compile_sca" );
compiler.c | 115 | add_method( "wep", file_name( this_object() ), "compile_wep" );
compiler.c | 116 | add_method( "mon", file_name( this_object() ), "compile_mon" );
compiler.c | 117 | add_method( "food", file_name( this_object() ), "compile_food" );
compiler.c | 118 | add_method( "cont", file_name( this_object() ), "compile_cont" );
compiler.c | 119 | add_method( "imp", file_name( this_object() ), "compile_imp" );
compiler.c | 122 | Error(s) write(s);
compiler.c | 122 | log_file( "VO_COMPILER", s);
compiler.c | 124 | extract_arguments( string str );
compiler.c | 130 | clone_object( str );
compiler.c | 132 | move( dest );
compiler.c | 151 | strsrch(file, "/", -1);
compiler.c | 157 | dest_me();
compiler.c | 159 | explode( file, "/" );
compiler.c | 160 | implode( ind[ 0..sizeof( ind ) - 2 ], "/" );
compiler.c | 161 | unguarded((: rm, tmp_name :));
compiler.c | 164 | dest_me() { destruct( this_object() );
compiler.c | 166 | seteuid( (string)\"/secure/master\"->creator_file( file_name( this_object() ) ) );
compiler.c | 171 | read_file( file );
compiler.c | 174 | Error( "prop_to_fun() : file " + file + " not found\n" );
compiler.c | 179 | explode( "$\n" + data, "\n#" );
compiler.c | 182 | Error( "prop_to_fun() : Nothing but comments?\n" );
compiler.c | 187 | sizeof( segments );
compiler.c | 193 | implode( segments, "\n" );
compiler.c | 197 | explode( strip_string( data ), "::" );
compiler.c | 199 | printf("%O\n", segments);
compiler.c | 204 | allocate( sizeof( segments ) / 2 );
compiler.c | 205 | allocate( sizeof( segments ) / 2 );
compiler.c | 207 | sizeof( ind );
compiler.c | 210 | replace( segments[ i * 2 + 1 ], "\n", " " );
compiler.c | 214 | lower_case( ind[ i ] );
compiler.c | 219 | sscanf( val[ i ], "%d", debug_file );
compiler.c | 227 | replace( val[i], " ", "" );
compiler.c | 249 | sizeof( ind );
compiler.c | 251 | lower_case( ind[ i ] );
compiler.c | 293 | write( "Error: Unknown index " + ind[ i ] + "\n" );
compiler.c | 297 | set_return_ob( clone );
compiler.c | 300 | unguarded((: write_file, tmp_name, file_data :));
compiler.c | 306 | write( "Error loading " + file + ", " + data + "\n" );
compiler.c | 309 | write( "File not removed.\n" );
compiler.c | 313 | unguarded((: rm, tmp_name :));
compiler.c | 318 | dest_me();
compiler.c | 319 | unguarded((: rm, tmp_name :));
compiler.c | 350 | strip_string( str );
compiler.c | 357 | this_object() );
compiler.c | 367 | sscanf( str, "%d", i );
compiler.c | 377 | map_array( explode( str, "//" ), "str_to_var", this_object() );
compiler.c | 385 | reset();
new_c_compiler.c | 15 | clone_object(name);
vr_hand.c | 21 | compile_virtual_room(string filename);
vr_hand.c | 22 | parse_object(object room, string command);
vr_hand.c | 26 | seteuid(getuid(this_object()));
vr_hand.c | 35 | read_file(filen, 2, 1);
vr_hand.c | 37 | clone_object("/"+tmp2);
vr_hand.c | 40 | read_file(filen, i, 1);
vr_hand.c | 42 | parse_object(new_room, tmp);
vr_hand.c | 55 | explode(command, "#");
vr_hand.c | 60 | set_short(func_call[1]);
vr_hand.c | 63 | set_long(func_call[1]);
vr_hand.c | 66 | add_exit(func_call[1], func_call[2]);
vr_hand.c | 69 | sscanf(func_call[1], "%d", i2);
vr_hand.c | 70 | set_light(i2);
vr_hand.c | 73 | add_item(explode(func_call[1], ","), explode(func_call[2], ","));
vr_hand.c | 76 | add_taste(func_call[1], func_call[2]);
vr_hand.c | 79 | add_smell(func_call[1], func_call[2]);
vr_hand.c | 82 | add_sound(func_call[1], func_call[2]);
vr_hand.c | 85 | add_feel(func_call[1], func_call[2]);
vr_hand.c | 88 | add_object(func_call[1]);
vr_hand.c | 92 | catch(i1=sscanf(func_call[3], "%d", i2));
vr_hand.c | 93 | action_add(func_call[1], func_call[2], i2);
vr_hand.c | 96 | set_code_module(func_call[1]);
vr_hand.c | 99 | add_property(func_call[1], func_call[2]);
vr_hand.c | 102 | sscanf(func_call[1], "%d,%d,%d", i2,i3,i4);
vr_hand.c | 103 | set_co_ord(({i2,i3,i4}));
handler.c | 13 | seteuid("Room");
handler.c | 15 | unguarded((: restore_object, "/global/virtual/handler" :));
handler.c | 19 | unguarded((: save_object, "/global/virtual/handler" :));
handler.c | 20 | destruct(this_object());
handler.c | 28 | file_name(obj);
handler.c | 32 | map_delete(cloned_objects, name);
handler.c | 46 | write(str+"\n");
handler.c | 60 | sizeof(args);
handler.c | 62 | sort_arguments(args[i]);
handler.c | 64 | str_to_int(args[i]);
handler.c | 78 | sizeof(args)-1] = add_item(args[sizeof(args)-1], m-1, str);
handler.c | 85 | sizeof(args)-1] = ({ });
handler.c | 87 | sizeof(args)-1] = add_level(args[sizeof(args)-1], m-1);
handler.c | 92 | log_file("NON_VIRTUAL", file +"\n");
handler.c | 93 | clone_object(file);
handler.c | 109 | if(file_size(file) >
handler.c | 110 | use_efun_clone(file);
handler.c | 113 | read_file(file);
handler.c | 116 | explode(file, "/");
handler.c | 123 | read_file("/include/" + comment);
handler.c | 127 | error("Include file not found.");
handler.c | 143 | use_efun_clone(file);
handler.c | 154 | use_efun_clone(file);
handler.c | 158 | use_efun_clone(file);
handler.c | 161 | explode(data, "\n");
handler.c | 167 | sizeof(line);
handler.c | 168 | strlen(line[i]);
handler.c | 184 | sizeof(line);
handler.c | 190 | use_efun_clone(file);
handler.c | 193 | sizeof(line);
handler.c | 195 | strlen(line[i]);
handler.c | 199 | delete(line, i--, 1);
handler.c | 201 | sizeof(line);
handler.c | 210 | sizeof(line);
handler.c | 211 | strlen(line[i]);
handler.c | 221 | delete(line,i+1,1);
handler.c | 249 | delete(line,i+2,1);
handler.c | 256 | sizeof(line);
handler.c | 257 | strlen(line[i]);
handler.c | 264 | delete(line,i+2,1);
handler.c | 269 | sizeof(line);
handler.c | 275 | use_efun_clone(file);
handler.c | 278 | clone_object(file_to_inherit);
handler.c | 280 | add_property("file_name", file);
handler.c | 281 | file_name(obj);
handler.c | 287 | sizeof(line);
handler.c | 291 | sizeof(line);
handler.c | 293 | sscanf(line[i], "%s(%s", start, comment);
handler.c | 294 | for(j=0,l=0,args=({});
handler.c | 294 | strlen(comment);
handler.c | 297 | add_level(args, l++);
handler.c | 306 | add_item(args, l--, comment[0..j-2]);
handler.c | 321 | add_item(args, l, comment[0..j-1]);
handler.c | 333 | add_item(args, l, comment[0..j-1]);
handler.c | 342 | add_item(args, l, comment[0..j-1]);
handler.c | 349 | sort_arguments(args);
handler.c | 353 | call_other(obj, start, args[0]);
handler.c | 356 | call_other(obj, start, args[0], args[1]);
handler.c | 359 | call_other(obj, start, args[0], args[1], args[2]);
handler.c | 362 | call_other(obj, start, args[0], args[1], args[2], args[3]);
handler.c | 365 | call_other(obj, start, args[0], args[1], args[2], args[3], args[4]);
handler.c | 368 | call_other(obj, start, args[0], args[1], args[2], args[3], args[4], args[5]);
handler.c | 371 | call_other(obj, start, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
handler.c | 376 | log_file("VIRTUAL", file +"\n");
server.c | 48 | add_method(string suffix, mixed ob, string fun, int type);
server.c | 63 | seteuid(getuid());
server.c | 72 | create_virtual_object(string name, int clone);
server.c | 86 | Error(s) write(s);
server.c | 86 | log_file("VO_HANDLER", s);
server.c | 104 | explode(name, ".");
server.c | 109 | call_other(method[OB], method[FUN], name, clone);
server.c | 111 | add_property(VIRTUAL_NAME_PROP, name);
server.c | 113 | add_property("virtual time", get_mod_time(name));
server.c | 119 | Error("create_virtual_object() : unknown suffix to " + name + "\n");
SetupCompiler.c | 12 | initialize_methods();
SetupCompiler.c | 18 | seteuid(getuid(this_object()));
SetupCompiler.c | 19 | initialize_methods();
SetupCompiler.c | 26 | add_method("vrm",  file_name(this_object()), "compile_vrm");
SetupCompiler.c | 27 | add_method("vro",  file_name(this_object()), "compile_vro");
SetupCompiler.c | 28 | add_method("vrw",  file_name(this_object()), "compile_vrw");
SetupCompiler.c | 29 | add_method("vra",  file_name(this_object()), "compile_vra");
SetupCompiler.c | 30 | add_method("vrc",  file_name(this_object()), "compile_vrc");
SetupCompiler.c | 33 | Error(s) write(s);
SetupCompiler.c | 33 | log_file("VO_COMPILER", s);
SetupCompiler.c | 41 | dest_me();
SetupCompiler.c | 42 | explode(file, "/");
SetupCompiler.c | 43 | implode(ind[0..sizeof(ind)-2], "/");
SetupCompiler.c | 44 | unguarded((: rm, tmp_name :));
SetupCompiler.c | 51 | read_file(file);
SetupCompiler.c | 53 | Error("prop_to_fun() : file " + file + " not found\n");
SetupCompiler.c | 56 | unguarded((: write_file, tmp_name, data :));
SetupCompiler.c | 59 | dest_me() { destruct(this_object());
SetupCompiler.c | 60 | setup();
SetupCompiler.c | 63 | creator_file(this_object()));
SetupCompiler.c | 65 | create_virtual_object(CLONEFILE, 1);
SetupCompiler.c | 68 | setup();
SetupCompiler.c | 69 | reset();
SetupCompiler.c | 71 | set_return_ob(MyRoom);
SetupCompiler.c | 71 | create() */\n" :));
SetupCompiler.c | 75 | write("Error loading "+file+", "+data+"\n");
SetupCompiler.c | 76 | write("File could not be loaded.\n");
SetupCompiler.c | 79 | dest_me();
SetupCompiler.c | 80 | unguarded((: rm, tmp_name :));
SetupCompiler.c | 86 | prop_to_fun(name, clone, PATH+ROOMFUNCS );
SetupCompiler.c | 90 | prop_to_fun(name, clone, PATH+MON_FUNCS );
SetupCompiler.c | 94 | prop_to_fun(name, clone, PATH+ARM_FUNCS );
SetupCompiler.c | 98 | prop_to_fun(name, clone, PATH+WEP_FUNCS );
SetupCompiler.c | 102 | prop_to_fun(name, clone, PATH+OBJ_FUNCS );
more_string.c | 45 | internal_more_string();
more_string.c | 48 | add_command("Internal_More_String", "<string>", (:internal_more_string:));
more_string.c | 63 | tell_object( this_object(), stuff );
more_string.c | 79 | explode(info->stat_line, "$");
more_string.c | 80 | sizeof(frog);
more_string.c | 109 | tell_object( this_object(), (string)this_object()->fix_string( s ) );
more_string.c | 137 | cat("/doc/helpdir/more");
more_string.c | 142 | evaluate(info->finish_func);
more_string.c | 144 | call_other(info->finish_ob, info->finish_func);
more_string.c | 178 | tell_object( this_object(), "Sorry "+ s1 +" not found.\n" );
more_string.c | 180 | tell_object( this_object(), "Found " + s1 + " on line "+ i +".\n");
more_string.c | 200 | tell_object(this_object(), "Sorry " + s1 + " not found.\n");
more_string.c | 232 | string_display_file(info);
more_string.c | 234 | more_string_status_line(info);
more_string.c | 235 | input_to("string_next_page", 0, info);
more_string.c | 239 | call_other(info->finish_ob, info->finish_func);
more_string.c | 246 | more_string_status_line(info);
more_string.c | 247 | input_to("string_next_page", 0, info);
more_string.c | 270 | this_object()->ignore_from_history("Internal_More_String something");
more_string.c | 271 | command( "Internal_More_String something" );
more_string.c | 275 | new(class more_string_info);
more_string.c | 283 | notify_fail( "Empty string.\n" );
more_string.c | 286 | explode( this_object()->fix_string( text ), "\n" );
more_string.c | 290 | explode( text, "\n" );
more_string.c | 291 | sizeof( bits );
more_string.c | 292 | reset_eval_cost();
more_string.c | 297 | explode( this_object()->fix_string( bits[ i ], ncols ), "\n" );
more_string.c | 301 | sizeof( info->the_bit );
more_string.c | 303 | string_display_file(info);
more_string.c | 305 | more_string_status_line(info);
more_string.c | 306 | input_to( "string_next_page", 0, info );
more_string.c | 314 | call_other( info->finish_ob, info->finish_func );
more_string.c | 333 | previous_object();
more_string.c | 351 | more_string( text, bity, noreline );
report_base.c | 15 | create();
report_base.c | 16 | set_error_type("TYPO");
report_base.c | 46 | bug_command(string str);
report_base.c | 47 | bug_spell(string str);
report_base.c | 48 | bug_ritual(string str);
report_base.c | 51 | bug_help(string str);
report_base.c | 52 | bug_man(string str);
report_base.c | 53 | bug_room();
report_base.c | 54 | bug_general();
report_base.c | 55 | bug_soul(string str);
report_base.c | 63 | create();
report_base.c | 106 | this_player()] = new (class errors, type: ROOM_BUG, error: "ROOM " + _error_type, file:"/d/mudlib/void");
report_base.c | 108 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 117 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 126 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 143 | file_name(environment(this_player()));
report_base.c | 145 | explode(dir, "/");
report_base.c | 149 | file_name(environment(this_player()));
report_base.c | 151 | this_player()] = new (class errors, type: GENERAL_BUG, error: "GENERAL " + _error_type, file:file);
report_base.c | 152 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 172 | new (class errors);
report_base.c | 174 | actions_defined(this_player(), 0, 12);
report_base.c | 175 | sizeof(junk);
report_base.c | 180 | if (sizeof(coms) >
report_base.c | 185 | function_exists((string) coms[2], (object) coms[1]);
report_base.c | 187 | base_name((object) coms[1]);
report_base.c | 191 | new (class command, verb:str);
report_base.c | 198 | tell_creator("presto", "%O\n", coms);
report_base.c | 201 | tell_creator("presto", "%O\n", cmd_data->calls[0]);
report_base.c | 202 | tell_creator("presto", "%O\n", values(coms->patterns));
report_base.c | 203 | base_name(cmd_data->calls[0]);
report_base.c | 204 | base_name((values(coms->patterns))[0]->calls[0]);
report_base.c | 205 | base_name(coms[0][OBJS]);
report_base.c | 211 | file_name(environment(this_player()));
report_base.c | 212 | explode(dir, "/");
report_base.c | 216 | file_name(environment(this_player()));
report_base.c | 220 | notify_fail("Command " + str + " not found.\n");
report_base.c | 228 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 239 | new (class errors);
report_base.c | 240 | query_synonym(str);
report_base.c | 245 | query_help_on(str);
report_base.c | 257 | sscanf(stuff[0][0], "%*s (%s)", bing->file);
report_base.c | 266 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 276 | new (class errors);
report_base.c | 278 | sprintf("/soul/%c/%s.s", str[0], str);
report_base.c | 280 | notify_fail("No such soul command \"" + str + "\".\n");
report_base.c | 283 | bug_command(str);
report_base.c | 289 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 303 | this_player()->expand_nickname(str);
report_base.c | 304 | new (class errors);
report_base.c | 305 | this_player()->query_spells();
report_base.c | 311 | file_name(environment(this_player()));
report_base.c | 318 | notify_fail("Ritual " + str + " not found.\n");
report_base.c | 319 | map_delete(_globals, this_player());
report_base.c | 326 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 340 | new (class errors);
report_base.c | 345 | this_player()->do_edit("Url: " + url + "\n\n", "end_of_edit");
report_base.c | 359 | new (class errors);
report_base.c | 364 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 380 | this_player()->expand_nickname(str);
report_base.c | 381 | this_player()->query_spells();
report_base.c | 389 | notify_fail("Spell " + str + " not found.\n");
report_base.c | 390 | map_delete(_globals, this_player());
report_base.c | 394 | bug_spell_file(file, str);
report_base.c | 404 | new (class errors);
report_base.c | 405 | base_name(environment(this_player()));
report_base.c | 410 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 424 | new (class errors);
report_base.c | 425 | if (sizeof(obj) >
report_base.c | 428 | map_delete(_globals, this_player());
report_base.c | 431 | base_name(obj[0]);
report_base.c | 434 | base_name(environment(this_player()));
report_base.c | 435 | sprintf("Room item %s.\n\n", str);
report_base.c | 450 | query_property("virtual name");
report_base.c | 454 | query_name(), obj[0]->query_short());
report_base.c | 457 | base_name(environment(this_player()));
report_base.c | 460 | explode(bing->file, "/");
report_base.c | 471 | base_name(environment(this_player()));
report_base.c | 477 | query_name();
report_base.c | 482 | query_short();
report_base.c | 486 | sprintf("Name: %s, Short: %s\n\n", name, short);
report_base.c | 493 | this_player()->do_edit(0, "end_of_edit");
report_base.c | 521 | environment(this_player())->short());
report_base.c | 524 | this_player()->get_last_error();
report_base.c | 526 | master()->standard_trace(last_error, 1);
report_base.c | 527 | this_player()->set_last_error(0);
report_base.c | 534 | this_player()->query_name();
report_base.c | 535 | smart_log(bing->error, name, body, trace, bing->file);
report_base.c | 536 | printf("Thank you for your %s report.\n", lower_case(_error_type));
report_base.c | 538 | printf("Not saving %s report, aborting.\n", lower_case(_error_type));
report_base.c | 540 | map_delete(_globals, this_player());
report_base.c | 580 | file_size("/d/special/"+$1+"/BugReports") >
report_base.c | 584 | file_size("/obj/"+$1+"/BugReports") >
report_base.c | 585 | bug_misc($4[0]) :) });
base.c | 29 | seteuid(getuid(this_object()));
base.c | 35 | destruct(this_object());
base.c | 40 | dest_me();
base.c | 46 | dest_me();
errors_base.c | 81 | get_row(mixed key, int row, int nomap);
errors_base.c | 103 | catch(db_close(FD));
errors_base.c | 106 | new(class _bugs);
errors_base.c | 108 | map_delete(globvars, key);
errors_base.c | 128 | catch(db_close(FD));
errors_base.c | 129 | map_delete(globvars, key);
errors_base.c | 151 | catch(ret = db_exec(FD, query, args ...));
errors_base.c | 159 | allocate(ret + 1, (: $1 :));
errors_base.c | 191 | catch(ret = db_exec(FD, query));
errors_base.c | 199 | allocate(ret + 1, (: $1 :));
errors_base.c | 221 | get_row(key, row);
errors_base.c | 225 | catch(fd = db_connect("localhost", "errors", CONFIG_DB_USER));
errors_base.c | 231 | catch(ret = db_exec(fd, query));
errors_base.c | 233 | catch(db_close(fd));
errors_base.c | 237 | catch(db_close(fd));
errors_base.c | 246 | allocate(ret);
errors_base.c | 247 | allocate(ret);
errors_base.c | 248 | allocate(ret);
errors_base.c | 250 | db_fetch(fd, i + 1);
errors_base.c | 255 | allocate_mapping(3);
errors_base.c | 261 | catch(db_close(fd));
errors_base.c | 265 | catch(db_close(fd));
errors_base.c | 286 | get_row(key, row);
errors_base.c | 290 | catch(fd = db_connect("localhost", "errors", CONFIG_DB_USER));
errors_base.c | 296 | catch(ret = db_exec(fd, query));
errors_base.c | 298 | catch(db_close(fd));
errors_base.c | 302 | catch(db_close(fd));
errors_base.c | 311 | allocate(ret);
errors_base.c | 312 | allocate(ret);
errors_base.c | 313 | allocate(ret);
errors_base.c | 315 | db_fetch(fd, i + 1);
errors_base.c | 320 | allocate_mapping(3);
errors_base.c | 326 | catch(db_close(fd));
errors_base.c | 330 | catch(db_close(fd));
errors_base.c | 354 | catch(res = db_fetch(FD, 0));
errors_base.c | 366 | catch(res = db_fetch(FD, row));
errors_base.c | 373 | allocate_mapping(keys, res);
errors_base.c | 393 | new(class _report, row : realrow);
errors_base.c | 397 | delete(ROWS, row, 1);
errors_base.c | 417 | new(class _report, row : row);
errors_base.c | 440 | new(class _report, row : realrow);
errors_base.c | 447 | delete(ROWS, row, 1);
errors_base.c | 467 | get_row(key, row);
errors_base.c | 471 | catch(fd = db_connect("localhost", "errors", CONFIG_DB_USER));
errors_base.c | 475 | db_escape(comment);
errors_base.c | 478 | time(), who, comment);
errors_base.c | 479 | catch(ret = db_exec(fd, query));
errors_base.c | 483 | catch(db_close(fd));
errors_base.c | 497 | time(), user, ids[0]);
errors_base.c | 500 | IN (%s);
errors_base.c | 501 | time(), user, implode(ids, (: "" + $1 + ", " + $2 :)));
errors_base.c | 503 | catch(res = db_exec(FD, query));
errors_base.c | 531 | filter(values(ERRORS), (: ((class _report)$1)->changed :));
errors_base.c | 535 | get_row(key, report->row, 1);
errors_base.c | 559 | time();
errors_base.c | 577 | sprintf("Unknown report status: %s\n", report->newstatus);
errors_base.c | 581 | save_status(key, ids_fixed, user, "FIXED");
errors_base.c | 582 | save_status(key, ids_denied, user, "DENIED");
errors_base.c | 583 | save_status(key, ids_fixing, user, "FIXING");
errors_base.c | 584 | save_status(key, ids_considering, user, "CONSIDERING");
errors_base.c | 585 | save_status(key, ids_open, user, "OPEN" );
errors_base.c | 587 | catch(db_exec(FD, query));
position_base.c | 69 | add_failed_mess("You are already "+position_type+".\n");
position_base.c | 86 | query_position_type();
position_base.c | 89 | query_position_on_short() + ".\n");
position_base.c | 97 | tell_object(person, "You " + position+" " + up_down + ".\n");
position_base.c | 106 | query_position_type();
position_base.c | 109 | query_position_on_short() + ".\n");
position_base.c | 116 | tell_object(person, "You " + position + ".\n");
position_base.c | 124 | set_position(position_type);
position_base.c | 160 | set_position(position_type);
position_base.c | 161 | set_position_on(0);
position_base.c | 162 | set_position_type(0);
position_base.c | 163 | set_position_multiple(0);
position_base.c | 166 | position(person, 0);
position_base.c | 186 | return ({ bit, bit_other });
position_base.c | 204 | query_position_strings(person);
position_base.c | 206 | sizeof(obs);
position_base.c | 208 | query_property(MULTIPLE_POSITION_PROPERTY);
position_base.c | 213 | position(person, 0);
position_base.c | 225 | a_short()+".\n");
position_base.c | 233 | set_position(position_type);
position_base.c | 234 | set_position_on(obs[i]);
position_base.c | 235 | set_position_type(pos_type);
position_base.c | 236 | set_position_multiple(mult);
position_base.c | 240 | a_short()+".\n");
position_base.c | 246 | set_position(position_type);
position_base.c | 247 | set_position_on(obs[i]);
position_base.c | 248 | set_position_type(pos_type);
position_base.c | 249 | set_position_multiple(mult);
position_base.c | 252 | query_position_string(position_type);
position_base.c | 254 | query_position_multiple(position_type);
position_base.c | 259 | position(person, 0);
position_base.c | 277 | set_position(position_type);
position_base.c | 278 | set_position_on(rabbit);
position_base.c | 279 | set_position_type(pos_type);
position_base.c | 280 | set_position_multiple(mult);
position_base.c | 290 | set_position(position_type);
position_base.c | 291 | set_position_on(rabbit);
position_base.c | 292 | set_position_type(pos_type);
position_base.c | 293 | set_position_multiple(mult);
position_base.c | 305 | position_object($1, $4[0], this_player()) :) });
bug_replies.c | 25 | print_menu_input();
bug_replies.c | 39 | tell_object(player, "No bug replies.\n");
bug_replies.c | 44 | sizeof(replies);
bug_replies.c | 64 | set_finish_func("finish_more_replies", this_object());
bug_replies.c | 65 | tell_object(player, "$P$Bug replies$P$" + str);
bug_replies.c | 69 | print_menu_input();
bug_replies.c | 75 | sizeof(_player_replies[player]->replys);
bug_replies.c | 77 | tell_object(player, "[None] QDRULH?<num>: ");
bug_replies.c | 79 | tell_object(player, "[1-" + len + "] QDRULH?<num>: ");
bug_replies.c | 93 | write("Delete error reply " + start_pos + " from " + end_pos + ".\n");
bug_replies.c | 95 | write("Delete error reply " + (pos) + ".\n");
bug_replies.c | 109 | write("Undelete error reply " + start_pos + " from " + end_pos + ".\n");
bug_replies.c | 111 | write("Undelete error reply " + (pos) + ".\n");
bug_replies.c | 124 | print_menu(this_player());
bug_replies.c | 125 | input_to("bug_replies_menu");
bug_replies.c | 133 | this_player()->set_finish_func("print_menu_input", this_object());
bug_replies.c | 140 | do_status_error_reply(reply->id, "READ", (: 1 :));
bug_replies.c | 150 | sizeof(replies);
bug_replies.c | 152 | read_message(i + 1);
bug_replies.c | 156 | write("No new unread error replies.\n");
bug_replies.c | 164 | write("Aborting send of message.\n");
bug_replies.c | 172 | write("Sent message to " + reply->sender + "\n");
bug_replies.c | 174 | print_menu(this_player());
bug_replies.c | 175 | input_to("bug_replies_menu");
bug_replies.c | 179 | write("Replying to message:\n");
bug_replies.c | 180 | read_message(pos);
bug_replies.c | 182 | this_player()->do_edit("", "finish_editing_message", this_object(), 0, pos);
bug_replies.c | 191 | cat_file(nroff_fn, 1);
bug_replies.c | 193 | create_nroff(HELP_FILE, nroff_fn);
bug_replies.c | 194 | cat_file(nroff_fn, 0);
bug_replies.c | 196 | this_player()->set_finish_func("print_menu_input", this_object());
bug_replies.c | 197 | this_player()->more_string(str);
bug_replies.c | 224 | to_int(inp[0..pos-1]);
bug_replies.c | 226 | read_message(pos);
bug_replies.c | 229 | write("Message " + pos + " is invalid.\n");
bug_replies.c | 241 | to_int(inp[pos..new_pos-1]);
bug_replies.c | 248 | to_int(inp[new_pos + 1..end_pos-1]);
bug_replies.c | 255 | write("Exiting the system.\n");
bug_replies.c | 256 | map_delete(_player_replies, this_player());
bug_replies.c | 264 | write("Message " + pos + " is invalid.\n");
bug_replies.c | 274 | delete_message(pos, end_pos);
bug_replies.c | 277 | position (" + pos + ").\n");
bug_replies.c | 280 | write("Message " + end_pos + " is invalid.\n");
bug_replies.c | 283 | write("Message " + pos + " is invalid.\n");
bug_replies.c | 293 | undelete_message(pos, end_pos);
bug_replies.c | 296 | position (" + pos + ").\n");
bug_replies.c | 299 | write("Message " + end_pos + " is invalid.\n");
bug_replies.c | 302 | write("Message " + pos + " is invalid.\n");
bug_replies.c | 307 | help_command();
bug_replies.c | 310 | print_bug_replies(this_player());
bug_replies.c | 315 | print_menu(this_player());
bug_replies.c | 316 | input_to("bug_replies_menu");
bug_replies.c | 321 | tell_object(player, "Error retrieving replies.\n");
bug_replies.c | 325 | print_bug_replies(player);
bug_replies.c | 326 | print_menu(player);
bug_replies.c | 340 | input_to("bug_replies_menu");
bug_replies.c | 343 | add_failed_mess("Unable to find the bug replies.\n");
template.c | 32 | return ({ "<string>", (: cmd($4[0]) :) });
errors_base2.c | 74 | get_row(mixed key, int row, int nomap);
errors_base2.c | 97 | new(class bugs);
errors_base2.c | 117 | map_delete(_globvars, key);
errors_base2.c | 130 | event_finished_get_fields(key);
errors_base2.c | 164 | finished_get_fields($(key), $1, $2) :));
errors_base2.c | 172 | event_finish_get_forwards(key, row);
errors_base2.c | 207 | allocate(ret);
errors_base2.c | 208 | allocate(ret);
errors_base2.c | 209 | allocate(ret);
errors_base2.c | 211 | db_fetch(fd, i + 1);
errors_base2.c | 216 | allocate_mapping(3);
errors_base2.c | 222 | catch(db_close(fd));
errors_base2.c | 226 | catch(db_close(fd));
errors_base2.c | 236 | event_finish_get_comments(key, row);
errors_base2.c | 301 | new(class _report, row : realrow);
errors_base2.c | 320 | new(class _report, row : realrow);
errors_base2.c | 343 | new(class _report, row : realrow);
errors_base2.c | 367 | time(), who, comment);
errors_base2.c | 368 | make_sql_request("errors", USER, "", query);
errors_base2.c | 382 | time(), user, ids[0]);
errors_base2.c | 385 | IN (%s);
errors_base2.c | 386 | time(), user, implode(ids, (: "" + $1 + ", " + $2 :)));
errors_base2.c | 388 | make_sql_request("errors", USER, "", query);
errors_base2.c | 410 | filter(values(ERRORS), (: ((class _report)$1)->changed :));
errors_base2.c | 414 | get_row(key, report->row, 1);
errors_base2.c | 438 | time();
errors_base2.c | 456 | sprintf("Unknown report status: %s\n", report->newstatus);
errors_base2.c | 460 | save_status(key, ids_fixed, user, "FIXED");
errors_base2.c | 461 | save_status(key, ids_denied, user, "DENIED");
errors_base2.c | 462 | save_status(key, ids_fixing, user, "FIXING");
errors_base2.c | 463 | save_status(key, ids_considering, user, "CONSIDERING");
errors_base2.c | 464 | save_status(key, ids_open, user, "OPEN" );
errors_base2.c | 466 | catch(db_exec(FD, query));
theft_base.c | 24 | notify_fail("Be serious!\n");
theft_base.c | 27 | notify_fail("Be serious, you're dead!\n");
theft_base.c | 30 | notify_fail("You don't have all your equipment yet..\n");
theft_base.c | 43 | the_short() + ".\n");
theft_base.c | 46 | notify_fail("You can't snatch from someone who is protected.\n");
theft_base.c | 50 | short()+".\n");
theft_base.c | 53 | notify_fail("Stop trying to steal from creators.\n");
theft_base.c | 54 | adjust_tmp_dex(-10);
theft_base.c | 64 | match_objects_in_environments(str, location, 0, thief);
theft_base.c | 67 | notify_fail("Pssst, they don't have one of those.\n");
theft_base.c | 70 | environment($1) == $(location) :));
theft_base.c | 72 | notify_fail("Pssst, they don't have one of those.\n");
theft_base.c | 100 | notify_fail("You cannot " + query_verb() + " liquids!\n");
theft_base.c | 107 | the_short() + ".\n");
theft_base.c | 113 | query_possessive() + "'s theft quota.\n");
theft_base.c | 126 | sscanf( file_name( ob ), "%s#%*d", name );
theft_base.c | 131 | query_value();
theft_base.c | 133 | deep_inventory(ob);
theft_base.c | 136 | query_value();
theft_base.c | 147 | deep_inventory(ob);
theft_base.c | 151 | query_value_in("Ankh-Morpork");
theft_base.c | 153 | query_value();
theft_base.c | 157 | query_player_quota(victim->query_name());
theft_base.c | 158 | query_player_reported(victim->query_name());
theft_base.c | 159 | query_player_valid(victim->query_name());
theft_base.c | 174 | the_short() +".\n");
theft_base.c | 177 | deep_inventory(item);
theft_base.c | 179 | the_short() +".\n" );
theft_base.c | 184 | check_items(stolen, victim, thief);
theft_base.c | 186 | event( environment( thief ), "theft", thief, victim, stolen );
theft_base.c | 187 | event( stolen, "theft", thief, victim );
theft_base.c | 191 | event_ward( thief, victim );
theft_base.c | 200 | user_event("inform", sh, "multiplayer");
theft_base.c | 201 | convert_message(sh);
theft_base.c | 202 | log_file("MULTIPLAYERS", ctime(time()) + ": " + sh + "\n");
guild_base.c | 77 | replace(name, "/", ".");
guild_base.c | 79 | html_file(nroff_fn, 1);
guild_base.c | 81 | cat_file(nroff_fn, 1);
guild_base.c | 84 | create_nroff(name, nroff_fn);
guild_base.c | 86 | html_file(nroff_fn, 0);
guild_base.c | 88 | cat_file(nroff_fn, 0);
guild_base.c | 101 | return (: nroff_file(_nroff_fname, 0) :);
guild_base.c | 112 | nroff_file(_nroff_fname, 0);
guild_base.c | 124 | nroff_file(_nroff_fname, 1);
guild_base.c | 138 | new(class teach_skill);
guild_base.c | 232 | can_teach_command(teacher, student);
guild_base.c | 234 | add_known_command(_command_name);
speech.c | 70 | strlen(mess);
speech.c | 87 | query_guild_ob();
speech.c | 94 | implode(explode(arg, " eight"), replace_num);
speech.c | 96 | implode(explode(arg, "8"), replace_num);
speech.c | 110 | explode(mess, " ");
speech.c | 112 | regexp(bits, "(^|[^A-Za-z]+)"+name+"($|[^A-Za-z]+)", 1);
speech.c | 114 | sizeof(tmp);
speech.c | 116 | replace(bits[index], name, value);
speech.c | 120 | implode(bits, " ");
speech.c | 130 | strlen(fish);
speech.c | 135 | query_cols(), bing));
speech.c | 148 | new (class message);
speech.c | 169 | query_languages();
speech.c | 171 | sizeof(langs);
speech.c | 173 | query_language_spoken_skill(langs[i])) >
speech.c | 175 | query_language_written_skill(langs[i])) >
speech.c | 208 | query_current_language();
speech.c | 228 | convert_message(arg);
speech.c | 229 | fit_message(arg);
speech.c | 237 | fix_shorthand(arg);
speech.c | 241 | drunk_speech(arg);
speech.c | 244 | mangle_speech(arg);
speech.c | 250 | environment(TP)->mangle_speech(word_type, arg, target);
speech.c | 252 | de_eight(arg);
speech.c | 255 | query_word_type(arg, word_type);
speech.c | 276 | write("You are in limbo, noone can hear you.\n");
speech.c | 280 | notify_fail("Syntax: " + query_verb() + " <something>\n");
speech.c | 285 | notify_fail("You cannot speak " + capitalize(mess->language) + ".\n");
speech.c | 288 | remove_hide_invis("hiding");
speech.c | 289 | query_nationality_accent_ob();
speech.c | 297 | capitalize(mess->language) + ": ", mess->text);
speech.c | 299 | my_mess("You " + mess->emote + mess->type + ": ", mess->text);
speech.c | 302 | adjust_time_left(-5);
speech.c | 312 | write("You are in limbo, noone can hear you.\n");
speech.c | 317 | notify_fail("Syntax: " + query_verb() + " <something>\n");
speech.c | 322 | notify_fail("You cannot speak " + capitalize(mess->language) + ".\n");
speech.c | 329 | this_player() });
speech.c | 330 | remove_hide_invis("hiding");
speech.c | 331 | this_player()->adjust_time_left(-5);
speech.c | 332 | query_nationality_accent_ob();
speech.c | 352 | this_player(), accent);
speech.c | 366 | cap_words(mess->language);
ptest_ers.c | 22 | this_player()->set_finish_func( "main_menu", this_object() );
ptest_ers.c | 23 | query_show_list();
ptest_ers.c | 25 | this_player()->more_string(str, "Playtester");
ptest_ers.c | 33 | printf( capitalize( name ) +" does not exist.\n" );
ptest_ers.c | 43 | printf( capitalize( name ) +" is now a playtester.\n" );
ptest_ers.c | 45 | printf( capitalize( name ) +" is already a playtester.\n" );
ptest_ers.c | 54 | printf( capitalize( name ) +" is not yet a playtester.\n" );
ptest_ers.c | 57 | printf( capitalize( name ) +" is now a senior playtester.\n" );
ptest_ers.c | 59 | printf( capitalize( name ) +" is already a senior playtester.\n" );
ptest_ers.c | 69 | notify_fail("You need to supply a reason when deleting someone.\n");
ptest_ers.c | 73 | printf( capitalize( name ) +" does not exist.\n" );
ptest_ers.c | 77 | printf( capitalize( name ) +" is no longer a playtester.\n" );
ptest_ers.c | 79 | printf( capitalize( name ) +" is not a playtester.\n" );
ptest_ers.c | 95 | printf( "Choose one of Q, L, A, S, R or H (for help) : " );
ptest_ers.c | 96 | input_to( "main_menu" );
ptest_ers.c | 104 | main_menu("r", $4[0], $4[1]) :) });
dom_ain.c | 15 | get_last_log( int last_log_on );
dom_ain.c | 25 | get_dir("/d/");
dom_ain.c | 27 | notify_fail("No domains exist.\n");
dom_ain.c | 32 | notify_fail("No such domain as " + arg + ".\n");
dom_ain.c | 38 | query_members();
dom_ain.c | 39 | this_player()->query_cols();
dom_ain.c | 40 | sizeof(members);
dom_ain.c | 42 | query_project(members[i]));
dom_ain.c | 46 | write("Current domains:\n");
dom_ain.c | 47 | sizeof(domains);
dom_ain.c | 49 | query_members(arg);
dom_ain.c | 53 | capitalize( (string)mast->query_lord() ) );
dom_ain.c | 65 | notify_fail("No such domain as " + dom + ".\n");
dom_ain.c | 68 | this_player()->expand_nickname(cre);
dom_ain.c | 72 | notify_fail("You are not the Lord of that domain.\n");
dom_ain.c | 80 | write("Creator " + capitalize(cre) + " now added to domain " + dom + ".\n");
dom_ain.c | 91 | notify_fail("No such domain as " + dom + ".\n");
dom_ain.c | 94 | this_player()->expand_nickname(cre);
dom_ain.c | 98 | notify_fail("You are not the Lord of that domain.\n");
dom_ain.c | 106 | write("Member " + capitalize(cre) + " removed from domain " + dom + ".\n");
dom_ain.c | 117 | notify_fail("No such domain as " + dom + ".\n");
dom_ain.c | 120 | this_player()->expand_nickname(cre);
dom_ain.c | 124 | notify_fail("You are not the Lord of that domain.\n");
dom_ain.c | 129 | capitalize(cre) + " in the domain " + dom + "\n");
dom_ain.c | 148 | this_player()->query_cols();
dom_ain.c | 149 | get_dir("/w/");
dom_ain.c | 150 | query_domains();
dom_ain.c | 154 | sizeof(creators);
dom_ain.c | 156 | delete(creators, i, 1);
dom_ain.c | 160 | delete(creators, i, 1);
dom_ain.c | 163 | sizeof(domains);
dom_ain.c | 165 | query_lord() });
dom_ain.c | 169 | sizeof(mem);
dom_ain.c | 177 | printf("%s%-=*s\n", bit, cols-strlen(bit), implode(mem, ", ")+".");
dom_ain.c | 180 | write("These creators are in domains but do not have a directory:\n");
dom_ain.c | 181 | printf("    %-=*s", cols-5, implode(keys(no_dir), ", ")+".\n");
dom_ain.c | 184 | write("These creators are in domains but are not actually creators:\n");
dom_ain.c | 185 | printf("    %-=*s", cols-5, implode(keys(not_creator), ", ")+".\n");
dom_ain.c | 188 | write("These creators are not in any domain:\n");
dom_ain.c | 189 | printf("    %-=*s", cols-5, implode(creators, ", ")+".\n");
dom_ain.c | 193 | write("These creators have a directory, but are not creators...:\n");
dom_ain.c | 194 | printf("    %-=*s", cols-5, implode(cre_not, ", ")+".\n");
dom_ain.c | 205 | notify_fail("No such domain: " + name + "\n");
dom_ain.c | 207 | this_player()->query_cols();
dom_ain.c | 210 | write(master+"\n");
dom_ain.c | 211 | query_members();
dom_ain.c | 214 | sort_array(members, 1);
dom_ain.c | 219 | query_project($2)) :));
dom_ain.c | 224 | test_last($1):));
dom_ain.c | 229 | sizeof(members);
dom_ain.c | 237 | query_project(members[i]));
dom_ain.c | 239 | this_player()->more_string(ret, "Domain Info");
dom_ain.c | 280 | detailed_info($4[0], $4[1]) :) });
playera_ddproperty.c | 40 | seteuid("Root");
playera_ddproperty.c | 47 | notify_fail("Unable to find player "+player+".\n");
playera_ddproperty.c | 48 | uncompress_file (fname+".o.gz");
playera_ddproperty.c | 49 | unguarded( (: read_file(fname+".o") :));
playera_ddproperty.c | 51 | notify_fail("Error reading player file " + fname + ".\n");
playera_ddproperty.c | 53 | explode(file, "\n");
playera_ddproperty.c | 55 | sizeof(bits);
playera_ddproperty.c | 57 | restore_variable(bits[i][strlen(var_name) + 0..]);
playera_ddproperty.c | 63 | notify_fail("Failed to find property mapping.\n");
playera_ddproperty.c | 66 | parse_args(value);
playera_ddproperty.c | 68 | notify_fail("No useful args...\n");
playera_ddproperty.c | 78 | save_variable(map_prop);
playera_ddproperty.c | 80 | save_variable(map_prop) });
playera_ddproperty.c | 84 | unguarded( (: rm(fname + ".old") :) );
playera_ddproperty.c | 86 | unguarded( (: rename(fname+".o", fname+".old") :) );
playera_ddproperty.c | 89 | implode($(bits), "\n") + "\n") :));
playera_ddproperty.c | 90 | compress_file (fname+".o");
rms_enior.c | 23 | seteuid("Root");
rms_enior.c | 27 | notify_fail("You must be a lord to remove a senior creator.\n");
rms_enior.c | 30 | write(creator + " removed from senior.\n");
rms_enior.c | 33 | notify_fail("Call to remove_senior failed.\n");
rms_enior.c | 37 | return ({ "<string>", (: cmd($4[0]) :), });
site.c | 16 | seteuid("Root");
site.c | 37 | replace(address, ".*", "");
site.c | 40 | write("Error changing permissions.\n");
site.c | 44 | write("Access permisions changed.\n");
site.c | 55 | seteuid("Root");
site.c | 60 | query_all_access();
site.c | 73 | notify_fail("No access control defined.\n");
site.c | 75 | write("Current access list:\n");
site.c | 76 | this_player()->more_string(ret, "site access");
site.c | 83 | write("Site " + address + " has been permitted for multiplayers.\n");
site.c | 85 | write("Site " + address + " has been blocked for multiplayers.\n");
site.c | 87 | write("Error multiplayer settings for site " + address + ".\n");
site.c | 97 | query_all_multi();
site.c | 103 | sprintf("%-30s\n", addr);
site.c | 107 | notify_fail("No access control defined.\n");
site.c | 109 | write("Current multuser site list:\n");
site.c | 110 | this_player()->more_string(ret, "site access");
rmdirector.c | 17 | seteuid("Root");
rmdirector.c | 21 | notify_fail("You must be a trustee to remove a director.\n");
rmdirector.c | 24 | write(creator + " removed from directorship.\n");
rmdirector.c | 27 | notify_fail("Call to remove_director failed.\n");
rmdirector.c | 31 | return ({ "<string>", (: cmd($4[0]) :), });
wstats.c | 8 | query_write_stats();
wstats.c | 12 | notify_fail("No such file\n");
wstats.c | 15 | printf("%-60s %5d\n", file, stats[str][file]);
wstats.c | 19 | printf("%-60s %5s %5s\n", "Object", "Total", "Files");
wstats.c | 28 | printf("%-60s %5d %5d\n", obj, total, num);
jumps.c | 6 | find_object(str);
jumps.c | 9 | load_object(str);
jumps.c | 16 | find_location(from);
jumps.c | 17 | find_location(to);
jumps.c | 20 | add_failed_mess("The from location does not exist.\n");
jumps.c | 24 | add_failed_mess("The to location does not exist.\n");
jumps.c | 28 | add_jump_point(from, to);
jumps.c | 29 | write("You added the jump point from " + from + " to " + to + ".\n");
jumps.c | 42 | write(str);
jumps.c | 49 | query_jump_destination(from);
jumps.c | 51 | add_failed_mess("There are no destiations from " + from + ".\n");
jumps.c | 57 | query_multiple_short(dests) + ".\n");
jumps.c | 60 | remove_jump_point(from, to);
jumps.c | 61 | write("Removed the jump from " + from + " to " + to + ".\n");
mkl_ord.c | 23 | seteuid("Root");
mkl_ord.c | 27 | notify_fail("You must be a highlord to add a lord.\n");
mkl_ord.c | 30 | write(creator + " promoted to director.\n");
mkl_ord.c | 33 | notify_fail("Call to add_director failed.\n");
mkl_ord.c | 37 | return ({ "<string>", (: cmd($4[0]) :), });
nskills.c | 27 | to_int(f * log( 1.0 + sk/(f + sk * k) ) + 0.5);
nskills.c | 36 | sizeof( args ) ;
nskills.c | 39 | query_skill( tp );
nskills.c | 41 | new_skill_value(sk);
nskills.c | 44 | reset_eval_cost();
nskills.c | 51 | new_skill_value(pl->query_skill_bonus( tp )) );
nskills.c | 77 | query_skills();
nskills.c | 79 | notify_fail( "Usage: "+ query_verb() +" <skill>\n" );
nskills.c | 86 | rec_list( args, word, 1, 1, 0, pl ) );
nskills.c | 88 | this_player()->more_string( result, "Skills" );
nskills.c | 91 | query_skills();
nskills.c | 95 | rec_list( args, "", ( member_array( "all", bits ) != -1 ), 1, 0, pl ) );
nskills.c | 99 | this_player()->more_string( result, "Skills" );
nskills.c | 104 | destruct(this_object());
nskills.c | 108 | dest_me();
nskills.c | 112 | dest_me();
nskills.c | 119 | cmd($1, 0) :) });
tmstats.c | 11 | do_summary();
tmstats.c | 18 | do_summary();
tmstats.c | 30 | query_stats(file);
tmstats.c | 45 | sizeof(keys(obs)), i);
tmstats.c | 56 | query_stats("summary");
tmstats.c | 61 | printf("Skill: %s \n", skill);
tmstats.c | 66 | printf("Ratio: ?\n");
tmstats.c | 68 | printf("Ratio: 1/%d\n", sum[skill][0][0]/(sum[skill][0][1]));
tmstats.c | 73 | printf("Ratio: ?\n");
tmstats.c | 75 | printf("Ratio: 1/%d\n", sum[skill][1][0]/(sum[skill][1][1]));
tmstats.c | 80 | printf("Ratio: ?\n");
tmstats.c | 82 | printf("Ratio: 1/%d\n", sum[skill][2][0]/(sum[skill][2][1]));
tmstats.c | 87 | printf("Ratio: ?\n");
tmstats.c | 89 | printf("Ratio: 1/%d\n", sum[skill][3][0]/(sum[skill][3][1]));
tmstats.c | 94 | printf("Ratio: ?\n");
tmstats.c | 96 | printf("Ratio: 1/%d\n", sum[skill][4][0]/(sum[skill][4][1]));
tmstats.c | 105 | printf("  Total:              Tries: %d, Awards: %d, ", tries, awards);
tmstats.c | 107 | printf("Ratio: ?\n");
tmstats.c | 109 | printf("Ratio: 1/%d\n", tries/awards);
quests.c | 37 | read_file( TEXTS_DIR + replace( names[ i ], " ", "_" ) +".txt" );
quests.c | 60 | printf("Quest %s set to active.\n", names[i]);
quests.c | 63 | printf("Quest %s set to inactive.\n", names[i]);
quests.c | 66 | printf("No such quest: %s.\n", names[i]);
quests.c | 87 | printf( "No more quests.\n" );
quests.c | 92 | print_info( which );
quests.c | 96 | change_status(which);
quests.c | 101 | printf( "No previous quests.\n" );
quests.c | 106 | print_info( which );
quests.c | 111 | printf( "Syntax: G <number>\n" );
quests.c | 115 | printf( "Syntax: G <number>\n" );
quests.c | 119 | printf( "Number must be between 1 and %d.\n", sizeof( names ) );
quests.c | 123 | print_info( which );
quests.c | 128 | printf( "Syntax: C <quest>\n" );
quests.c | 132 | printf( "No quest level set.\n" );
quests.c | 136 | printf( "No quest title set.\n" );
quests.c | 140 | printf( "No quest story set.\n" );
quests.c | 145 | printf( "There is already a quest \""+ word +"\".\n" );
quests.c | 148 | add_quest( word, args[ 0 ], args[ 1 ], args[ 2 ] );
quests.c | 150 | allocate( 3 );
quests.c | 151 | printf( "Quest \""+ word +"\" added.\n" );
quests.c | 153 | print_info( which );
quests.c | 158 | printf( "Syntax: L <level>\n" );
quests.c | 162 | printf( "Syntax: L <level>\n" );
quests.c | 166 | printf( "Level must be at least 1.\n" );
quests.c | 170 | printf( "Quest level set to "+ number +".\n" );
quests.c | 175 | printf( "Syntax: T <title>\n" );
quests.c | 186 | printf( "Quest title set to \""+ word +"\".\n" );
quests.c | 191 | printf( "Syntax: S <story>\n" );
quests.c | 202 | printf( "Quest story set to \""+ word +"\".\n" );
quests.c | 206 | printf( "\nQuest data so far:\n" );
quests.c | 210 | sprintf( "%d", args[ 0 ] );
quests.c | 211 | printf( "   level: %s\n", word );
quests.c | 216 | printf( "   title: %s\n", word );
quests.c | 221 | printf( "   story: %s\n\n", word );
quests.c | 235 | printf( "Syntax: F <word>\n" );
quests.c | 241 | sizeof( names );
quests.c | 243 | print_info( which );
quests.c | 249 | print_info( which );
quests.c | 255 | print_info( which );
quests.c | 261 | printf( "\""+ word +"\" not found.\n" );
quests.c | 285 | print_info( which );
quests.c | 287 | this_player() ] = ({ which, args });
quests.c | 288 | printf( "Choose one of Q, N, P, G, C, L, T, S, R, E, F or H (for help) : " );
quests.c | 289 | input_to( "main_menu" );
quests.c | 295 | printf( "Aborted.\n" );
quests.c | 296 | main_menu( "Z" );
quests.c | 305 | printf( "Writing file...\n" );
quests.c | 308 | main_menu( "Z" );
quests.c | 312 | query_quest_names();
quests.c | 313 | this_player() ] = ({ 0, allocate( 3 ) });
quests.c | 314 | main_menu( "G 1" );
quests.c | 322 | return ({ "", (: cmd() :) });
domainlock.c | 13 | query_domain_status();
domainlock.c | 22 | this_player()->more_string (ret);
domainlock.c | 37 | toggle_domain_lock (domain);
domainlock.c | 51 | domain_check() :) });
dinfo.c | 25 | dinfo( string name, int cols, string option );
dinfo.c | 26 | get_last_log( int last_log_on );
dinfo.c | 30 | notify_fail("You must give a domain.\n");
dinfo.c | 45 | write(master+"\n");
dinfo.c | 46 | query_members();
dinfo.c | 49 | sort_array(members, 1);
dinfo.c | 54 | query_project($2)) :));
dinfo.c | 59 | test_last($1):));
dinfo.c | 64 | sizeof(members);
dinfo.c | 72 | query_project(members[i]));
dinfo.c | 78 | destruct(this_object());
dinfo.c | 82 | dest_me();
dinfo.c | 86 | dest_me();
authorise.c | 61 | find_player(player)->add_property("authorised player", 1);
authorise.c | 67 | remove_cache_entry(player);
authorise.c | 73 | write(capitalize(player) + " does not exists.  Do you wish to create them? ");
authorise.c | 74 | input_to("really_create", 0, player);
authorise.c | 75 | add_succeeded_mess("");
authorise.c | 80 | lower_case(response);
authorise.c | 82 | write("Aborting create.\n");
authorise.c | 85 | write("Ok, creating player " + capitalize(player) + ".\n");
authorise.c | 86 | write("What is their authorised email address: ");
authorise.c | 87 | input_to("get_email", 0, player);
authorise.c | 91 | write("What password do you wish to use: ");
authorise.c | 92 | input_to("get_password", 0, player);
authorise.c | 98 | query_player_file_name(player);
authorise.c | 104 | time();
authorise.c | 106 | crypt(passw, 0);
authorise.c | 107 | save_object(save_file_name);
authorise.c | 117 | notify_fail("No such user " + player + ".\n");
authorise.c | 121 | unguarded ( (: uncompress_file (basename + ".o.gz") :));
authorise.c | 122 | unguarded( (: read_file(basename + ".o") :));
authorise.c | 123 | explode(file, "\n");
authorise.c | 125 | sizeof(bits);
authorise.c | 127 | restore_variable(bits[i][strlen("player_info") + 1..]);
authorise.c | 141 | save_variable(player_info);
authorise.c | 143 | save_variable(player_info) });
authorise.c | 145 | unguarded( (: rm(basename + ".old") :) );
authorise.c | 146 | unguarded( (: rename(basename+".o", basename+".old") :) );
authorise.c | 147 | unguarded( (: write_file(basename + ".o", implode($(bits), "\n") + "\n") :));
authorise.c | 148 | unguarded ( (: compress_file (basename + ".o") :));
authorise.c | 150 | write( player + " is already allowed to login from  " + address + ".\n" );
authorise.c | 153 | write(player + " is now allowed to login from "+address+".\n");
authorise.c | 162 | notify_fail("No such user " + player + ".\n");
authorise.c | 166 | unguarded ( (: uncompress_file (basename + ".o.gz") :));
authorise.c | 167 | unguarded( (: read_file(basename + ".o") :));
authorise.c | 168 | explode(file, "\n");
authorise.c | 170 | sizeof(bits);
authorise.c | 172 | restore_variable(bits[i][strlen("player_info") + 1..]);
authorise.c | 186 | save_variable(player_info);
authorise.c | 188 | save_variable(player_info) });
authorise.c | 190 | unguarded( (: rm(basename + ".old") :) );
authorise.c | 191 | unguarded( (: rename(basename+".o", basename+".old") :) );
authorise.c | 192 | unguarded( (: write_file(basename + ".o", implode($(bits), "\n") + "\n") :));
authorise.c | 193 | unguarded ( (: compress_file (basename + ".o") :));
authorise.c | 195 | write( player + " is not already allowed to login from  " +address+ ".\n");
authorise.c | 198 | write(player + " is now not allowed to login from "+address+".\n");
authorise.c | 207 | cmd($4[0]) :), });
mkdirect_or.c | 17 | seteuid("Root");
mkdirect_or.c | 21 | notify_fail("You must be a trustee to add a director.\n");
mkdirect_or.c | 24 | write(creator + " promoted to directorship.\n");
mkdirect_or.c | 27 | notify_fail("Call to add_director failed.\n");
mkdirect_or.c | 31 | return ({ "<string>", (: cmd($4[0]) :), });
resetpw.c | 37 | seteuid("Root");
resetpw.c | 42 | if(file_size(basename+".o.gz")>
resetpw.c | 43 | file_size(basename+".o")>
resetpw.c | 44 | unguarded((: uncompress_file(basename+".o.gz") :));
resetpw.c | 47 | if(file_size(basename+".o.gz")>
resetpw.c | 48 | file_size(basename + ".o") >
resetpw.c | 49 | unguarded((: uncompress_file(basename+".o.gz") :));
resetpw.c | 53 | if(file_size(basename+".o.gz")>
resetpw.c | 54 | unguarded((: uncompress_file(basename+".o.gz") :));
resetpw.c | 58 | unguarded( (: read_file(basename + ".o") :));
resetpw.c | 60 | write("Error reading file " + basename + ".\n");
resetpw.c | 61 | notify_fail("Error reading file " + basename +".o\n");
resetpw.c | 63 | explode(file, "\n");
resetpw.c | 65 | sizeof(bits);
resetpw.c | 68 | restore_variable(bits[i][strlen("password") + 1..]);
resetpw.c | 72 | crypt(newpw, newpw[0..1]);
resetpw.c | 73 | save_variable(password);
resetpw.c | 75 | replace(file, t1, t2);
resetpw.c | 76 | unguarded( (: rm(basename + ".old") :) );
resetpw.c | 77 | unguarded( (: rename(basename+".o", basename+".old") :) );
resetpw.c | 78 | unguarded( (: write_file(basename + ".o", file) :));
resetpw.c | 79 | unguarded( (: compress_file(basename+".o") :));
resetpw.c | 80 | remove_cache_entry(player);
resetpw.c | 92 | notify_fail("Syntax: resetpw <player> <new password>\n");
resetpw.c | 95 | write(sprintf("Reset password for %s to %s\n", player, newpw));
resetpw.c | 97 | write("Unable to find player "+player+".\n");
clubs.c | 23 | do_invalid(string extra, int width);
clubs.c | 24 | do_delete(string extra, string reason, int width);
clubs.c | 33 | do_invalid(extra, this_player()->query_cols());
clubs.c | 36 | do_delete(extra, rest, this_player()->query_cols());
clubs.c | 45 | query_club_type(club);
clubs.c | 52 | query_club_name(club));
clubs.c | 55 | query_founder(club));
clubs.c | 59 | sprintf("%-15s ", member);
clubs.c | 61 | this_player()->fix_string("   " + tmp2 + "\n", width, 10);
clubs.c | 73 | lower_case(club);
clubs.c | 74 | replace(lname, ({"'", "", "_", "", " ", ""}) );
clubs.c | 89 | strcmp($1, $2 ) :) );
clubs.c | 96 | is_valid_family_name(club);
clubs.c | 100 | is_valid_club_name(club);
clubs.c | 106 | club_line(club, width, extra == "verbose");
clubs.c | 108 | club_line(club, width, extra == "verbose");
clubs.c | 113 | write("No invalid clubs.\n");
clubs.c | 115 | this_player()->more_string(tmp, "Clubs", 1);
clubs.c | 118 | write("No dodgy clubs.\n");
clubs.c | 120 | this_player()->more_string("Dodgy names:\n\n" + tmp2, "Clubs", 1);
clubs.c | 128 | notify_fail("You must be a lord to delete a club.");
clubs.c | 131 | notify_fail("You must give a club name.\n");
clubs.c | 134 | notify_fail(club+" is not a current club.\n");
clubs.c | 136 | write("Disbanding: " + club);
clubs.c | 138 | query_founder(club);
clubs.c | 139 | implode(CLUB_HANDLER->query_members(club), ", ");
clubs.c | 141 | query_club_name(club);
clubs.c | 144 | write(" succeeded.\n");
clubs.c | 154 | write(" failed.\n");
playerp_roperty.c | 30 | notify_fail("You must give a property...\n");
playerp_roperty.c | 34 | seteuid("Root");
playerp_roperty.c | 39 | parse_args(value);
playerp_roperty.c | 40 | if (args && sizeof(args[0]) >
playerp_roperty.c | 44 | save_variable(map_prop)+"\n") :));
playerp_roperty.c | 48 | write("No useful args...\n");
playerp_roperty.c | 51 | write("Unable to find player "+player+".\n");
playerp_roperty.c | 54 | write("Syntax: player_add_property <name> \"<prop>\" <value>\n");
mks_enior.c | 23 | seteuid("Root");
mks_enior.c | 27 | notify_fail("You must be a lord to create a senior creator.\n");
mks_enior.c | 30 | write(creator + " promoted to senior.\n");
mks_enior.c | 33 | notify_fail("Call to add_senior failed.\n");
mks_enior.c | 37 | return ({ "<string>", (: cmd($4[0]) :), });
invcheck.c | 15 | ban_object (filename);
invcheck.c | 18 | unban_object (filename);
invcheck.c | 21 | tell_object (this_player(), INV_CHECK->list_banned());
invcheck.c | 31 | cmd("", "list"):)});
rstats.c | 8 | query_read_stats();
rstats.c | 12 | notify_fail("No such file\n");
rstats.c | 15 | printf("%-60s %5d\n", file, stats[str][file]);
rstats.c | 19 | printf("%-60s %5s %5s\n", "Object", "Total", "Files");
rstats.c | 28 | printf("%-60s %5d %5d\n", obj, total, num);
conv.c | 11 | print_access(string bit, mapping bing, int depth, int cols, string filter);
conv.c | 18 | seteuid("Root");
conv.c | 37 | write("Error changing permissions.\n");
conv.c | 41 | write("Access permisions changed.\n");
conv.c | 43 | to_int(level)], reason);
conv.c | 50 | seteuid("Root");
conv.c | 55 | query_all_access();
conv.c | 58 | notify_fail("No access control defined.\n");
conv.c | 61 | write("Current access list:\n");
conv.c | 62 | print_access("", bing, 0, (int)this_player()->query_cols(), filter);
conv.c | 63 | this_player()->more_string(bing, "site access");
conv.c | 78 | m_indices(bing);
conv.c | 83 | sizeof(bits);
conv.c | 95 | write(replace(bit, ".*", "")[1..] + "\n");
conv.c | 98 | query_reason(explode(bit, "."), bits[i]));
conv.c | 104 | sizeof(bits);
bright.c | 50 | this_player());
bright.c | 84 | if (file_size(file+".c") >
bright.c | 110 | write(results);
bright.c | 117 | query_light();
bright.c | 132 | write(results);
bright.c | 134 | write(results);
bright.c | 143 | environment(this_player());
bright.c | 145 | query_mirror_room();
bright.c | 153 | this_player()->find_abs(arg);
bright.c | 157 | query_destination(arg);
bright.c | 160 | query_door_control(arg);
bright.c | 165 | illumination(other->query_light()) + ".\n");
bright.c | 168 | add_failed_mess("The exit " + arg + " is not open.\n");
bright.c | 172 | add_failed_mess("The exit " + arg + " does not exist.\n");
bright.c | 177 | add_failed_mess("Unable to find the exit " + arg + ".\n");
bright.c | 185 | cmd(0) :) });
score.c | 40 | write("Sorry, you're roleplaying.\n");
score.c | 43 | query_quests( ob->query_name() );
score.c | 45 | printf( "You have not completed any quests.\n" );
score.c | 50 | query_quest_story($1) }) :));
score.c | 52 | sort_array(quest_info, (: strcmp($1[0], $2[0]) :));
score.c | 59 | query_cols() - 30, $1[ 25 .. ] ) :) ), ",\n" ) +".\n" );
score.c | 68 | query_verbose("score");
score.c | 133 | printf( "%s", ret );
score.c | 135 | query_weight() / 20 ) +"."+ ( ob->query_weight() % 10 );
score.c | 157 | to_int( ( to_float( x ) / to_float( y ) ) * 100 );
score.c | 219 | this_player()->query_skill_bonus( skill, 1 );
score.c | 220 | this_player()->query_skill(skill);
score.c | 223 | if( SKILL_OB->query_skill_cost(skill) >
score.c | 224 | query_skill_cost(skill);
score.c | 259 | calc_xp_cost( skill );
score.c | 262 | sizeof( skills );
score.c | 265 | this_player()->query_name(), current, xptotal, calc_percent( current, xptotal ) );
score.c | 304 | find_hp_string( wimpy, 100 );
score.c | 311 | find_hp_string( surr, 100 );
score.c | 318 | query_deity();
score.c | 321 | query_deity();
score.c | 326 | align_string();
score.c | 329 | capitalize( word );
score.c | 332 | query_title( word );
score.c | 367 | find_death_string( me->query_max_deaths() - me->query_deaths() ) );
score.c | 372 | capitalize( find_xp_string( me->query_xp() ) ) );
score.c | 379 | query_burden()));
score.c | 399 | score_rp(ob, verbose);
score.c | 402 | query_guild_ob();
score.c | 407 | query_hp();
score.c | 408 | query_gp();
score.c | 409 | query_quest_points( ob->query_name() );
score.c | 410 | query_sp();
score.c | 420 | essify( temp4, "point") + ".\n" );
score.c | 430 | calculate_rating( ob ) + ".\n" );
score.c | 433 | query_xp() +".\n" );
score.c | 435 | query_deaths();
score.c | 442 | printf( "Your wimpy is set to %d%%.\n", ob->query_wimpy() );
score.c | 444 | printf( "You are in brave mode.\n" );
score.c | 449 | query_surrender());
score.c | 451 | printf("You won't surrender.\n");
score.c | 456 | this_player()->query_temp_str());
score.c | 457 | query_deity();
score.c | 461 | capitalize( word ) +", "+ (string)DEITY->query_title( word ) );
score.c | 463 | printf( "You are %s, worshipping no god.\n", ob->align_string() );
score.c | 472 | query_name();
score.c | 482 | query_multiple_short(magistrates) + ".\n");
score.c | 486 | query_multiple_short(citizens) + ".\n");
score.c | 493 | printf( "You are registered as a player killer.\n" );
score.c | 500 | printf( "%-=*s", ob->query_cols(), (string)ob->extra_score() );
score.c | 501 | query_time_on();
score.c | 502 | query_no_logins();
score.c | 506 | printf("%-=*s", ob->query_cols(), word);
score.c | 510 | query_max_gp() + ")  Xp: "+ ob->query_xp() + "\n" );
score.c | 532 | pluralize( relationship );
score.c | 539 | test_gender( name );
score.c | 554 | query_family_name();
score.c | 557 | add_failed_mess( "You're not in a family!\n" );
score.c | 561 | query_relationships( family, ob->query_name() );
score.c | 565 | add_failed_mess( "You have no relatives.\n" );
score.c | 572 | get_gender( $1->related_to ) )  :) );
score.c | 574 | map( grouped, (: map( $2, (: $1->related_to :) ) :) );
score.c | 576 | sort_array( keys( grouped ), 1 );
score.c | 579 | create_relationship_text( $1, $(grouped) ) :) ), ".\n" );
score.c | 581 | tell_object( ob, "$P$Relationships$P$" + txt + ".\n" );
score.c | 601 | query_deity();
score.c | 602 | query_al();
score.c | 604 | query_al_lower( god );
score.c | 605 | query_al_upper( god );
score.c | 606 | query_al_middle( god );
score.c | 637 | query_attacker_list() - ({ 0 });
score.c | 642 | environment( $1 ) == environment( $(player) ) :) );
score.c | 661 | this_player()->query_tactics();
score.c | 680 | write(ret);
score.c | 685 | cmd();
score.c | 700 | score_fighting( this_player(), 0 ) :) });
help.c | 27 | do_help(mixed *stuff);
help.c | 28 | list_help(string title, string dir);
help.c | 29 | help_list(string name);
help.c | 30 | command_cmd(string name);
help.c | 31 | here_cmd();
help.c | 32 | object_cmd(object ob);
help.c | 33 | spell_cmd(string name, int spell);
help.c | 34 | file_help(string name);
help.c | 35 | rehash_dirs();
help.c | 36 | query_help_on(string name, int creator, int, int);
help.c | 37 | create_help_files(string *names, string nroff_dir);
help.c | 38 | read_directories(string *directories, int recurse);
help.c | 39 | read_synonyms();
help.c | 40 | letter_name(int letter, mixed *things);
help.c | 41 | start_letter( mixed *things );
help.c | 42 | end_letter( mixed *things );
help.c | 43 | query_number_from_string(string name, mixed *things );
help.c | 56 | create();
help.c | 70 | unguarded((: rehash_dirs() :));
help.c | 82 | strlen( entry );
help.c | 85 | strlen( items[ i ] );
help.c | 100 | return ({ best_try, best_match });
help.c | 117 | help_list(name);
help.c | 124 | help_list(_synonyms[name]);
help.c | 129 | add_failed_mess("That is a player, silly.\n");
help.c | 134 | keys(_help_files_player) + ({ "command_list", "concepts"});
help.c | 135 | find_match_in_array(name, list);
help.c | 140 | keys(_synonyms);
help.c | 141 | find_match_in_array(name, list);
help.c | 161 | new(class command, verb : name);
help.c | 177 | notify_fail(str + "\n");
help.c | 183 | do_help(list[0]);
help.c | 189 | sizeof(list);
help.c | 190 | sprintf("%c) %s\n", ('a' + i), list[i][0]);
help.c | 191 | sprintf("%s) %s\n", letter_name(i, list), list[i][0]);
help.c | 195 | this_player()->query_cols(), str);
help.c | 196 | input_to("help_input", 0, list);
help.c | 209 | lower_case(str);
help.c | 211 | write("OK, exiting help.\n");
help.c | 217 | start_letter( list ), end_letter( list ) );
help.c | 218 | input_to("help_input", 0, list);
help.c | 223 | do_help(list[num]);
help.c | 230 | evaluate(stuff[1]);
help.c | 232 | write("Broken help file!\n");
help.c | 234 | write("$P$" + stuff[0] + "$P$" + str);
help.c | 235 | this_player()->more_string(str, stuff[0]);
help.c | 247 | environment(this_player())->help_function();
help.c | 251 | environment(this_player())->short(), str }) });
help.c | 253 | write("There is no help available for this room.\n");
help.c | 259 | do_help(list[0]);
help.c | 265 | sizeof(list);
help.c | 266 | sprintf("%s) %s\n", letter_name(i, list), list[i][0]);
help.c | 270 | this_player()->query_cols(), str);
help.c | 271 | input_to("help_input", 0, list);
help.c | 283 | help_function();
help.c | 287 | environment(this_player())->short(), str }) });
help.c | 289 | add_failed_mess("There is no help available for $I.\n", ({ob}));
help.c | 295 | do_help(list[0]);
help.c | 301 | sizeof(list);
help.c | 302 | sprintf("%s) %s\n", letter_name(i, list), list[i][0]);
help.c | 306 | this_player()->query_cols(), str);
help.c | 307 | input_to("help_input", 0, list);
help.c | 320 | this_player()->help_command(name);
help.c | 322 | notify_fail("No such command as '" + name + "'.\n");
help.c | 326 | evaluate(help);
help.c | 328 | write("$P$" + name + "$P$P" + help);
help.c | 342 | help_string(name);
help.c | 344 | notify_fail("No such soul as '" + name + "'.\n");
help.c | 347 | write("$P$" + name + "$P$P" + help);
help.c | 362 | this_player()->help_spell(name);
help.c | 364 | notify_fail("No such spell as '" + name + "'.\n");
help.c | 368 | this_player()->move_string(evaluate(help), name);
help.c | 370 | write("$P$" + name + "$P$P" + help);
help.c | 404 | notify_fail("Unable to get help on '" + ERROR_LOG + "'.\n");
help.c | 414 | get_dir(dir + "*") - ({ ".", "..", "ERROR_REPORTS", "RCS", "old" });
help.c | 417 | implode(files, "\n")));
help.c | 431 | this_player()->query_playtester());
help.c | 434 | environment(this_player())->help_function();
help.c | 441 | add_failed_mess("There is no help available for this room.\n");
help.c | 446 | this_player()->help_spell(name);
help.c | 455 | help_string(name);
help.c | 458 | help_string($(name)) :) }) });
help.c | 463 | help_function() :));
help.c | 466 | help_function();
help.c | 483 | if (sizeof(things) >
help.c | 499 | letter_name(0, things);
help.c | 507 | letter_name(sizeof(things) - 1, things);
help.c | 520 | if (sizeof(things) >
help.c | 524 | lower_case(name);
help.c | 541 | lower_case(name);
help.c | 564 | concepts_list_cmd() :) });
help.c | 571 | read_directories(_player_dirs, 1);
help.c | 572 | read_directories(_creator_dirs, 1);
help.c | 573 | read_directories(_lord_dirs, 1);
help.c | 574 | read_directories(_playtester_dirs, 1);
help.c | 575 | read_synonyms();
help.c | 593 | read_directories(({ dir }), 0);
help.c | 603 | read_directories(({ dir }), 0);
help.c | 613 | read_directories(({ dir }), 0);
help.c | 623 | read_directories(({ dir }), 0);
help.c | 640 | explode(read_file(SYNONYMS), "\n");
help.c | 641 | sizeof(bits);
help.c | 642 | explode(bits[i], " ");
help.c | 662 | sizeof(directories);
help.c | 664 | get_dir(dir + "*") - ({ "ERROR_REPORTS" });
help.c | 683 | if (strsrch(fname, "_") >
help.c | 684 | replace(fname, "_", " ");
help.c | 712 | replace_string(name, " ", "_");
help.c | 714 | create_help_files(_help_files_player[name], NROFF_DIR);
help.c | 719 | create_help_files(_help_files_playtester[name], NROFF_DIR);
help.c | 724 | create_help_files(_help_files_creator[name], NROFF_DIR);
help.c | 726 | query_help_map();
help.c | 728 | create_help_files(map[name], NROFF_DIR);
help.c | 733 | create_help_files(_help_files_lord[name], NROFF_DIR);
help.c | 735 | query_help_map();
help.c | 737 | create_help_files(map[name], NROFF_DIR);
help.c | 757 | replace(name, "/", ".");
help.c | 758 | cat_file(nroff_fn, 1);
help.c | 760 | create_nroff(name, nroff_fn);
help.c | 761 | cat_file(nroff_fn, 0);
help.c | 781 | sizeof(names);
help.c | 782 | explode(names[i], "/");
help.c | 785 | nroff_file($(names[i]), $(nroff_dir)) :) }) });
help.c | 805 | query_help_map();
inv_entory.c | 28 | all_inventory(this_player());
inv_entory.c | 29 | filter_array(obs, (: $1->query_property("dead usable") :));
inv_entory.c | 32 | query_multiple_short(obs) + ".  Amazing.\n");
inv_entory.c | 37 | this_player()->query_living_contents(1));
inv_entory.c | 48 | return ({ "", (: cmd() :) });
removeg_roup.c | 11 | do_leave(string group, object member);
removeg_roup.c | 17 | notify_fail("Syntax: removegroup <member>\n");
removeg_roup.c | 19 | find_player(str);
removeg_roup.c | 22 | notify_fail("You are not a member of a group.\n");
removeg_roup.c | 25 | notify_fail("Sorry, you are not the leader of " + group + ".\n");
removeg_roup.c | 31 | query_members( group );
removeg_roup.c | 33 | leave_group(group, this_player());
removeg_roup.c | 34 | end_group( group );
removeg_roup.c | 40 | leave_group( group, member );
removeg_roup.c | 41 | end_group( group );
removeg_roup.c | 55 | do_leave(group, player);
removeg_roup.c | 63 | notify_fail("Ack, something went wrong.\n");
removeg_roup.c | 70 | remove_protector(person);
removeg_roup.c | 71 | remove_protector(member);
removeg_roup.c | 72 | remove_follower(person);
removeg_roup.c | 73 | remove_follower(member);
relationship.c | 12 | show_relationship(object from, object to, string rel, object telling);
relationship.c | 27 | this_player()->query_family_name();
relationship.c | 34 | query_club_name(my_family);
relationship.c | 36 | query_ungendered_relationship(relationship);
relationship.c | 49 | check_family_name();
relationship.c | 50 | query_family_name();
relationship.c | 53 | query_name());
relationship.c | 70 | query_female());
relationship.c | 89 | new(class family_response_data);
relationship.c | 119 | query_family_name();
relationship.c | 155 | new(class family_response_data);
relationship.c | 185 | new(class family_response_data);
relationship.c | 212 | query_opposite_relationship(rel);
relationship.c | 234 | query_all_relationships();
relationship.c | 235 | map(sort_array(relationships, 1), (: capitalize($1) :));
relationship.c | 238 | query_multiple_short(relationships) + ".");
relationship.c | 248 | list_relationships() :) });
locate.c | 20 | match_objects_for_existence(word, ({ fluff }));
locate.c | 21 | all_inventory(fluff);
locate.c | 24 | look_in_container(frog, word);
locate.c | 39 | debug_printf("%s", word);
locate.c | 45 | write("It is too dark to locate anything, but since you are a cre...\n");
locate.c | 47 | notify_fail("It's too dark to locate anything.\n");
locate.c | 53 | write("It is too bright to locate anything, but since you are a cre...\n");
locate.c | 55 | notify_fail("It's too bright to locate anything.\n");
locate.c | 61 | match_objects_for_existence( word, ({ environment( TP ) }) );
locate.c | 63 | environment($1) == TP :));
locate.c | 67 | sizeof(things);
locate.c | 72 | notify_fail( "There is nothing here matching \""+ word +"\".\n" );
locate.c | 77 | write("You are here! :)\n");
locate.c | 81 | the_short();
locate.c | 91 | query_full_identifier();
locate.c | 99 | group_object() ? " are in " : " is in ");
locate.c | 102 | write( list );
locate.c | 117 | the_short();
locate.c | 131 | query_full_identifier();
locate.c | 139 | group_object() ? " are in " : " is in ");
locate.c | 143 | write( "$P$Locate$P$"+ list );
locate.c | 148 | return ({ "<string'object name'>", (: cmd($4[0]) :) });
accept.c | 15 | this_player()->query_surrenderers();
accept.c | 21 | this_player()->remove_surrenderer(player);
accept.c | 22 | accepted_surrender(this_player());
accept.c | 23 | write("Good show!\n");
accept.c | 33 | this_player()->query_respond_command(CLUB_RESPOND_TYPE, ob);
accept.c | 46 | this_player()->query_name());
accept.c | 51 | remove_respond_command(CLUB_RESPOND_TYPE, ob);
accept.c | 77 | this_player()->query_family_name();
accept.c | 79 | query_club_name(curr_family);
accept.c | 82 | query_ungendered_relationship(relationship);
accept.c | 85 | add_failed_mess("Could not figure out the relationship.\n");
accept.c | 137 | this_player()->set_family_name(frog->family);
accept.c | 166 | remove_respond_command(CLUB_FAMILY_RESPOND_TYPE, ob);
accept.c | 188 | do_family(this_player()->query_family_name(), $4[1], $1) :) });
map.c | 14 | environment(this_player());
map.c | 16 | add_failed_mess("You are somewhere not on any map.\n");
map.c | 21 | add_failed_mess("You are blind and cannot see.\n");
map.c | 29 | add_failed_mess("It is too dark to see anything.\n");
map.c | 32 | add_failed_mess("It is too bright to see anything.\n");
map.c | 35 | query_terrain_coords();
map.c | 36 | query_terrain_handler();
map.c | 38 | add_failed_mess("You can only do this in a terrain.\n");
map.c | 43 | query_visibility(env));
map.c | 45 | add_failed_mess("There is no map available here.\n");
map.c | 48 | write(map);
map.c | 53 | return ({ "", (: do_map :) });
access.c | 19 | query_rhosts();
access.c | 24 | write( "You are allowed to login from anywhere.\n" );
access.c | 26 | sort_array(ips, 1);
access.c | 28 | query_multiple_short(ips) + ".\n" );
access.c | 40 | query_rhosts();
access.c | 47 | set_rhosts(ips);
access.c | 49 | write( "You are already allowed to login from  " + str + ".\n" );
access.c | 52 | write("You are now allowed to login from "+str+".\n");
access.c | 64 | query_rhosts();
access.c | 72 | set_rhosts(0);
access.c | 74 | set_rhosts(ips);
access.c | 76 | write( "You are already not allowed to login from  " + str + ".\n" );
access.c | 79 | write("You are now allowed to login from anywhere.\n");
access.c | 81 | write("You are not now allowed to login from "+str+".\n");
access.c | 94 | notify_fail ("You may not do this.\n");
access.c | 98 | notify_fail ("This player is online.\n");
access.c | 102 | notify_fail ("No such player.\n");
access.c | 105 | seteuid("Root");
access.c | 109 | uncompress_file (fname+ ".o.gz");
access.c | 110 | unguarded( (: read_file($(fname)+".o") :));
access.c | 113 | notify_fail ("Error reading file.\n");
access.c | 116 | explode(file, "\n");
access.c | 118 | sizeof(bits);
access.c | 120 | restore_variable(bits[i][strlen(var_name)..]);
access.c | 127 | notify_fail ("Cannot find mapping.\n");
access.c | 144 | save_variable(info);
access.c | 146 | save_variable(info) });
access.c | 150 | unguarded( (: rm($(fname) + ".old") :) );
access.c | 152 | unguarded( (: rename($(fname)+".o", $(fname)+".old") :) );
access.c | 155 | implode($(bits), "\n") + "\n") :));
access.c | 156 | compress_file (fname + ".o");
access.c | 157 | unguarded( (: rm($(fname) + ".o") :) );
access.c | 159 | remove_cache_entry(name);
access.c | 161 | tell_object (this_player(), "Access for " + name + " changed.\n");
access.c | 174 | cmd_list() :) });
colo_urs.c | 17 | create();
colo_urs.c | 67 | this_player()->channel_list();
colo_urs.c | 71 | this_player()->query_inform_types();
colo_urs.c | 74 | this_player()->query_player_clubs();
colo_urs.c | 75 | filter(clubs, (: !CLUB_HANDLER->is_club($1) :));
colo_urs.c | 77 | this_player()->remove_player_club(bing);
colo_urs.c | 79 | map(this_player()->query_player_clubs(), (: "club_" + $1 :));
colo_urs.c | 92 | query_colour_list(inform);
colo_urs.c | 95 | query_club_name(event_type);
colo_urs.c | 98 | lower_case(event_type);
colo_urs.c | 102 | notify_fail("No such type.\n");
colo_urs.c | 105 | this_player()->query_my_colours();
colo_urs.c | 108 | this_player()->set_my_colours(event_type, colour);
colo_urs.c | 109 | write(name + " colour set to default.\n");
colo_urs.c | 111 | this_player()->set_my_colours(event_type, colour);
colo_urs.c | 112 | write(name + " colour set to none.\n");
colo_urs.c | 115 | upper_case($1) :));
colo_urs.c | 116 | filter(colour_list, (: !is_valid_colour($1) :));
colo_urs.c | 118 | if (sizeof(bad) >
colo_urs.c | 121 | query_multiple_short(_colours) + ".\n");
colo_urs.c | 125 | query_multiple_short(_colours) + ".\n");
colo_urs.c | 132 | this_player()->set_my_colours(event_type, tmp);
colo_urs.c | 144 | query_colour_list(inform);
colo_urs.c | 145 | this_player()->query_my_colours();
colo_urs.c | 148 | write(sprintf("%-20s %s\n", "Clubs", "<list>"));
colo_urs.c | 149 | write(sprintf("%-20s %s\n", "Inform", "<list>"));
colo_urs.c | 153 | query_club_name(event[5..]);
colo_urs.c | 163 | write(sprintf("%-20s %s\n", name, "[none]"));
colo_urs.c | 166 | write(sprintf("%-20s %s\n", name, "[default]"));
colo_urs.c | 189 | show_colours(2) :) });
ht_ell.c | 4 | this_player()->get_htell_func();
ht_ell.c | 5 | this_player()->expand_nickname(arg);
ht_ell.c | 6 | evaluate(bing, arg, brief);
gstat_us.c | 32 | query_group(this_player());
gstat_us.c | 34 | notify_fail("You are not a member of any group.\n");
gstat_us.c | 41 | printf("Members of %s%s:\n", locked, group);
gstat_us.c | 42 | printf("%-12s %|20s   Idle\n", "Name", "Health");
gstat_us.c | 47 | query_idle(member)%60));
gstat_us.c | 49 | printf("%s\n", member->short());
whoami.c | 22 | this_player()->query_cols(), 1) +".\n" );
whoami.c | 27 | return ({ "", (: cmd() :) });
whois.c | 33 | this_player()->query_cols()) +".\n" );
whois.c | 39 | this_player()->query_name(), (: cmd(({this_player()})) :) });
tu_rn.c | 28 | query_facing();
tu_rn.c | 31 | write( "You reorient yourself with the world.\n" );
tu_rn.c | 33 | say( TP->one_short(1)+" reorients "+ TP->query_objective() +"self.\n");
tu_rn.c | 35 | say(TP->one_short() +" reorients "+ TP->query_objective() +"self.\n" );
tu_rn.c | 37 | set_facing(facing);
tu_rn.c | 39 | environment(TP)->init();
tu_rn.c | 46 | cmd($4[0]) :) });
arguments.c | 13 | query_all_known(this_player()->query_name());
arguments.c | 15 | write("You do not know any theological arguments.\n");
arguments.c | 18 | query_multiple_short(args) + ".\n");
arguments.c | 24 | return ({ "", (: cmd() :) });
co_mmands.c | 23 | get_dir ("/cmds/playtester/");
co_mmands.c | 25 | filter (cmds, (: strsrch ($1, ".c") == (sizeof ($1) - 2) :));
co_mmands.c | 36 | return ({ "", (: cmd() :) });
con_sider.c | 19 | calc_danger(object ob);
con_sider.c | 20 | do_compare(int dif);
con_sider.c | 29 | add_failed_mess("It's too dark to consider anyone.\n");
con_sider.c | 33 | query_light()) >
con_sider.c | 34 | add_failed_mess("It's too bright to consider anyone.\n");
con_sider.c | 38 | if (sizeof(obs) >
con_sider.c | 39 | this_player() });
con_sider.c | 41 | if (sizeof(obs) >
con_sider.c | 42 | add_failed_mess("You can only consider five things at once.\n");
con_sider.c | 52 | calc_danger(previous_object());
con_sider.c | 68 | calc_danger(ob);
con_sider.c | 79 | replace( do_compare( dif ), "$who$", (string)ob->the_short() );
con_sider.c | 86 | event_npc_consider(this_player());
con_sider.c | 89 | write( out +"\n" );
con_sider.c | 93 | add_failed_mess("You need to consider someone.\n");
con_sider.c | 106 | query_drunk_level(this_player());
con_sider.c | 167 | query_attack_data();
con_sider.c | 170 | sizeof( data );
con_sider.c | 203 | query_armour_class();
con_sider.c | 206 | keys(data);
con_sider.c | 207 | sizeof(stuff);
con_sider.c | 208 | calc_value(data[stuff[i]][0]);
con_sider.c | 228 | calc_danger(rider);
con_sider.c | 233 | query_holding();
con_sider.c | 235 | if(weapons && sizeof(weapons) >
con_sider.c | 238 | query_skill_bonus("fighting.combat.parry.melee");
con_sider.c | 239 | if(weapons && sizeof(weapons) >
con_sider.c | 242 | query_skill_bonus("fighting.combat.parry.melee");
con_sider.c | 245 | query_skill_bonus("fighting.combat.parry.melee");
con_sider.c | 250 | query_skill_bonus("fighting.combat.dodging.melee");
con_sider.c | 252 | calc_weapon_damage(weapon);
con_sider.c | 254 | query_skill_bonus("fighting.combat.melee.unarmed");
con_sider.c | 258 | query_attack_data()[W_SKILL]);
con_sider.c | 262 | query_skill_bonus("fighting.combat.special.tactics");
con_sider.c | 264 | query_specific_gp("fighting");
con_sider.c | 265 | query_hp();
con_sider.c | 270 | calc_armour_protection(armour);
con_sider.c | 282 | return ({ "<indirect:living:here>", (: cmd($1) :) });
godmother.c | 31 | seteuid(getuid());
godmother.c | 43 | this_player()->query_last_pos();
godmother.c | 49 | this_player()->query_start_pos();
godmother.c | 57 | this_player()->query_nationality()->query_default_start_location();
godmother.c | 69 | add_succeeded_mess("You escape from limbo.\n");
godmother.c | 77 | add_failed_mess( why_not );
godmother.c | 79 | add_failed_mess("You cannot summon the godmother here.\n");
godmother.c | 84 | this_player()->query_property( "no godmother" );
godmother.c | 89 | add_failed_mess( why_not );
godmother.c | 91 | add_failed_mess( "You cannot summon a godmother at this moment.\n" );
godmother.c | 110 | return ({ "help", (: cmd() :) });
brief.c | 35 | query_verbose(t) ? " (verbose) " : " (brief) ");
brief.c | 36 | write(disp + "\n");
brief.c | 41 | set_verbose(t, which == "verbose");
brief.c | 42 | write("Ok\n");
brief.c | 44 | set_verbose(type, which == "verbose");
brief.c | 45 | write("Ok\n");
brief.c | 47 | write("No such option.\n");
joing_roup.c | 21 | notify_fail("Syntax: joingroup <group name>\n");
joing_roup.c | 24 | notify_fail("You are already a member of a group.\n");
joing_roup.c | 27 | notify_fail("Sorry, there is no group by that name.\n");
joing_roup.c | 29 | query_owner(str);
joing_roup.c | 31 | notify_fail("Sorry, the owner of "+str+" is not here.\n");
joing_roup.c | 34 | notify_fail("Sorry, that group is full, you cannot join.\n");
joing_roup.c | 37 | notify_fail("Sorry, that group is locked, you cannot join.\n");
joing_roup.c | 39 | query_policy(str);
joing_roup.c | 42 | notify_fail("Ack, something went wrong.\n");
joing_roup.c | 47 | this_player()->add_protector(person);
joing_roup.c | 48 | add_protector(this_player());
joing_roup.c | 51 | this_player()->add_follower(person);
joing_roup.c | 54 | add_follower(this_player());
joing_roup.c | 62 | write("You are now a member of "+str+"\n");
mudlist.c | 35 | GetMudList();
mudlist.c | 55 | strlen(str = replace_string(lower_case(str), " ", ""));
mudlist.c | 56 | strlen(tmpstr = replace_string(lower_case(tmpstr), " ", ""));
mudlist.c | 104 | write(msg);
mudlist.c | 111 | sort_array(list, 1);
mudlist.c | 114 | previous_object()->more_string(implode(list, "\n")+"\n", "Mudlist");
mudlist.c | 139 | this_player());
mudlist.c | 143 | destruct(this_object());
mudlist.c | 147 | destruct(this_object());
mudlist.c | 151 | destruct(this_object());
bug.c | 25 | create();
bug.c | 26 | set_error_type("BUG");
bug.c | 27 | set_use_last_error(1);
who.c | 16 | who_string(int width, int cre, int verbose, string name);
who.c | 17 | who_line(object ob, int cre, int width);
who.c | 25 | create();
who.c | 29 | find_object("/std/nationality/" + file);
who.c | 31 | query_name()] = base_name(ob);
who.c | 52 | lower_case(name);
who.c | 69 | explode(name, "&") - ({ "" });
who.c | 70 | if (sizeof(guilds) >
who.c | 71 | filter_users(tarr, guilds[0], no_cres);
who.c | 73 | filter_users(tarr, guild, no_cres);
who.c | 77 | explode(name, ",") - ({ "", 0 });
who.c | 79 | query_domains();
who.c | 85 | replace(guild, " ", "", "\t", "");
who.c | 95 | query_creator()) :));
who.c | 97 | filter(tarr, (: !$1->query_login_ob() && this_player()->is_friend($1->query_name()) :));
who.c | 100 | query_visible(this_player()) :) );
who.c | 103 | query_property( "newbie helper" ) :) );
who.c | 106 | query_creator()) :));
who.c | 108 | filter(tarr, (: $1->query_family_name() :));
who.c | 111 | query_playtester($1->query_name()) :));
who.c | 112 | if (member_array(guild, domains) >
who.c | 115 | query_visible(this_player()) :));
who.c | 116 | if(member_array(guild, keys(_nationalities)) >
who.c | 120 | if (file_size("/std/guilds/" + guild + ".c") >
who.c | 124 | query_guild_ob() == "/std/guilds/" + $(guild) :));
who.c | 126 | filter(tarr, (: CLUB_HANDLER->is_member_of($(start_guild), $1) :));
who.c | 130 | filter(tarr, (: CLUB_HANDLER->is_member_of($(start_guild), $1->query_name()) :));
who.c | 172 | query_visible(this_player()) :) );
who.c | 174 | filter(users(), (: strsrch(file_name($1), "secure/login") == -1 :));
who.c | 176 | filter_users(arr, name, 1);
who.c | 180 | sizeof(arr);
who.c | 189 | sprintf("%|*'-'s\n", width-1, "==========]  " + mud_name() + "  [===========");
who.c | 190 | sort_array(arr, (: strcmp($1->query_name(), $2->query_name() ) :) );
who.c | 199 | query_member($1->query_name()) :) );
who.c | 202 | sizeof(arr);
who.c | 203 | query_cap_name();
who.c | 236 | sprintf("%-" + x + "s ", tmp);
who.c | 239 | this_player()->fix_string(" " + tmp2 + "\n", width, 10);
who.c | 244 | this_player()->fix_string(" " + tmp2 + "\n", width, 10);
who.c | 248 | sizeof(arr);
who.c | 249 | who_line(arr[i], cre, width);
who.c | 253 | this_player()->fix_string(tmp + "\n", width, 10);
who.c | 278 | sprintf("%*'-'|s\n", width-1, tmp);
who.c | 294 | query_player_title();
who.c | 300 | query_cap_name();
who.c | 304 | query_family_name();
who.c | 324 | if (ob->query_invis() >
who.c | 345 | query_title();
who.c | 360 | if (query_idle(ob) >
who.c | 371 | cmd( $4[0], 0 ) :) });
last.c | 15 | process_file(string fname, string str);
last.c | 16 | get_details(string str, string file);
last.c | 17 | mtime(string t);
last.c | 18 | stime(string t);
last.c | 27 | write("This command is no longer available.\n");
last.c | 31 | notify_fail("Usage: last <name>\n");
last.c | 49 | this_player()->expand_nickname(str);
last.c | 51 | process_file(BASENAME + ".log", str);
last.c | 55 | process_file(BASENAME+".1", str);
last.c | 59 | sprintf("%15-s %s - Destd (??:??)\n", str, mtime(time));
last.c | 61 | sprintf("%15-s %s - Not logged off\n", str, mtime(time));
last.c | 67 | test_last(str);
last.c | 69 | write(sprintf("%15-s %s\n", str, ctime(i)));
last.c | 73 | write("No such user " + str + "\n");
last.c | 75 | write(retval);
last.c | 86 | seteuid("Root");
last.c | 89 | file_size(fname);
last.c | 91 | file_length(fname);
last.c | 112 | get_details(str, file);
last.c | 114 | seteuid("Room");
last.c | 128 | explode(file, "\n");
last.c | 130 | sizeof(sarr);
last.c | 149 | stime(t2));
last.c | 156 | stime(t2));
last.c | 164 | stime(t2));
last.c | 168 | write("Someone has stuffed up... please file a bug report\n");
wet.c | 20 | all_inventory(this_player()) + ({ this_player() });
wet.c | 26 | query_weight();
wet.c | 27 | wet_string(thing);
wet.c | 35 | wet_string(thing, thing == this_player());
wet.c | 45 | sizeof(not_wet) >
wet.c | 48 | write(results);
wet.c | 55 | cmd(0) :) });
cond_ition.c | 15 | compare(float, float);
cond_ition.c | 38 | environment(ob);
cond_ition.c | 46 | environment(env);
cond_ition.c | 62 | this_player()->check_dark(environment(this_player())->query_light());
cond_ition.c | 66 | add_failed_mess("It is way too bright to see anything at all.\n");
cond_ition.c | 70 | add_failed_mess("It is way too dark to see anything at all.\n");
cond_ition.c | 74 | filter(things, (: is_valid_environment :));
cond_ition.c | 82 | cond_string();
cond_ition.c | 89 | write("$C$" + things[0]->the_short() + list);
cond_ition.c | 94 | cond_string();
cond_ition.c | 108 | add_failed_mess("None of those things has a condition.\n");
cond_ition.c | 111 | write("$C$" + info[0]->cond_item->the_short() + info[0]->cond_string);
cond_ition.c | 115 | compare($1->cond_percent, $2->cond_percent) :));
cond_ition.c | 127 | write("Everything is in excellent condition.\n");
cond_ition.c | 143 | cmd($1, $4[1] == "up" ? 1 : -1, 1) :), });
qalias.c | 6 | keys( this_player()->query_aliases() );
qalias.c | 10 | tell_object( this_player(), "You have no aliases.\n" );
qalias.c | 18 | sort_array( aliases, (: strcmp :) );
qalias.c | 19 | implode( aliases, ", " );
qalias.c | 23 | sprintf( "   %-=*s\n", cols, alias_mess );
qalias.c | 27 | tell_object( this_player(), message );
qalias.c | 36 | return ({ "", (: cmd() :) });
mailinfo.c | 23 | this_player()->query_name();
mailinfo.c | 25 | this_player()->expand_nickname(str);
mailinfo.c | 28 | write("Sorry, but I don't know any "+capitalize(str)+".\n");
mailinfo.c | 31 | write("Player "+capitalize(str)+": "+(string)MAILER->finger_mail(str));
mailinfo.c | 36 | destruct(this_object());
mailinfo.c | 40 | dest_me();
mailinfo.c | 44 | dest_me();
upt_ime.c | 14 | time_elapsed_string(uptime());
upt_ime.c | 20 | write(output + "\n");
upt_ime.c | 30 | write(output + "\n");
upt_ime.c | 35 | rusage();
upt_ime.c | 41 | memory_info() / 1024000.0));
upt_ime.c | 46 | memory_info() / 1024000.0));
upt_ime.c | 50 | query_next_reboot();
upt_ime.c | 96 | this_player()->query_cols(), output));
upt_ime.c | 102 | cmd($4[0] == "brief") :) });
liaison_s.c | 11 | query_idle(person);
liaison_s.c | 30 | query_members();
liaison_s.c | 32 | sizeof( members );
liaison_s.c | 34 | find_player( members[ i ] );
liaison_s.c | 36 | member_alias( members[ i ] );
liaison_s.c | 37 | sizeof( member_alias );
liaison_s.c | 41 | capitalize( members[ i ] ) +")" });
liaison_s.c | 44 | delete( members, i, 1 );
liaison_s.c | 46 | delete(members, i, 1);
liaison_s.c | 49 | delete( members, i, 1 );
liaison_s.c | 51 | capitalize( members[ i ] );
liaison_s.c | 56 | sprintf( "(%s)", members[ i ] );
liaison_s.c | 59 | sprintf( "({%s})", members[ i ] );
liaison_s.c | 62 | sprintf( "([%s])", members[ i ] );
liaison_s.c | 65 | capitalize( members[ i ] );
liaison_s.c | 69 | if ( query_idle( person ) >
liaison_s.c | 70 | idle_time( person );
liaison_s.c | 80 | add_failed_mess( "There are no Liaison creators currently logged on.\n" );
liaison_s.c | 84 | if ( sizeof( members ) >
liaison_s.c | 86 | query_multiple_short( members ) +".\n" );
liaison_s.c | 88 | write( "The only Liaison creator logged on is "+ members[ 0 ] +".\n" );
liaison_s.c | 94 | return ({ "", (: cmd() :) });
friend_s.c | 16 | filter(this_player()->query_friends(), (: find_player($1) :));
friend_s.c | 18 | this_player()->expand_nickname(person);
friend_s.c | 20 | add_failed_mess(person + " is not your friend.\n");
friend_s.c | 25 | this_player()->query_friends();
friend_s.c | 31 | add_failed_mess("Bad pattern to alias.\n");
friend_s.c | 40 | add_failed_mess("Pattern has an error in it, mismatched brackets?\n");
friend_s.c | 58 | add_failed_mess("You do not have any friends online.\n");
friend_s.c | 60 | add_failed_mess("You do not have any friends.\n");
friend_s.c | 70 | write("$P$Friends$P$" + ret);
friend_s.c | 75 | lower_case(person);
friend_s.c | 76 | this_player()->expand_nickname(person);
friend_s.c | 79 | add_failed_mess("Are you really that lonely?\n");
friend_s.c | 84 | add_failed_mess(person + " does not exist.\n");
friend_s.c | 88 | if (strlen(tag) >
friend_s.c | 95 | this_player()->add_friend(person, tag);
friend_s.c | 100 | this_player()->add_friend(person, tag);
friend_s.c | 109 | lower_case(person);
friend_s.c | 110 | this_player()->expand_nickname(person);
friend_s.c | 112 | add_failed_mess("Sorry, " + person + " is not your friend to remove.\n");
friend_s.c | 116 | this_player()->remove_friend(person);
friend_s.c | 125 | input_to("clear_check");
friend_s.c | 126 | add_succeeded_mess("");
friend_s.c | 134 | write("Ok, aborting.\n");
friend_s.c | 139 | this_player()->remove_friend(friend);
friend_s.c | 141 | write("Friend list cleared.\n");
when.c | 21 | explode(who, ",");
when.c | 22 | if (sizeof(bits) >
when.c | 32 | this_player()->query_invis();
when.c | 33 | this_player()->expand_nickname(lower_case(who));
when.c | 34 | find_player( who );
when.c | 43 | write( who + " is currently net-dead.\n" );
when.c | 48 | test_last(who);
when.c | 50 | notify_fail( "Cannot find any record of $C$" + who + ".\n" );
when.c | 53 | write(who + " only just logged off.\n");
when.c | 66 | return ({ "<string'player name'>", (: cmd( $4[0] ) :) });
gchat.c | 52 | notify_fail( "You have gchat ear muffed.\n" );
gchat.c | 54 | query_group(this_player());
gchat.c | 56 | notify_fail("You are not a member of any group.\n");
gchat.c | 59 | notify_fail("Syntax: gchat <message>\n");
gchat.c | 61 | query_current_language();
gchat.c | 64 | notify_fail(capitalize(cur_lang)+" is not a spoken language.\n");
gchat.c | 70 | query_word_type(arg, "");
gchat.c | 75 | drunk_speech(arg);
gchat.c | 78 | environment(TP)->mangle_tell(arg, ob, 0);
gchat.c | 81 | query_members(group);
gchat.c | 82 | this_player() });
gchat.c | 87 | leave_group( group, this_player() );
gchat.c | 88 | end_group( group );
gchat.c | 106 | sizeof( earmuffed ) >
gchat.c | 127 | my_mess("You tell "+ group + word +": ", arg);
gchat.c | 128 | add_tell_history( "You tell "+ group + word + ": ", arg );
gchat.c | 139 | my_mess( "You ask "+ group + word +": ", arg);
gchat.c | 140 | add_tell_history( "You ask "+ group + word + ": ", arg );
gchat.c | 142 | adjust_time_left(-5);
sea_rch.c | 87 | add_failed_mess("Ghosts cannot search!\n");
sea_rch.c | 93 | add_failed_mess("You cannot search, you are in combat!\n");
sea_rch.c | 98 | this_player()->adjust_time_left( -ROUND_TIME * 4 );
sea_rch.c | 101 | remove_call_out(callouts[this_player()->query_name()]);
sea_rch.c | 105 | call_out("search_callout", 4*1, this_player(), str);
sea_rch.c | 107 | this_player()->adjust_gp(-GP_COST);
sea_rch.c | 108 | write("You start to search around.\n");
sea_rch.c | 109 | say(this_player()->the_short() + " $V$0=starts,start$V$ to search around.\n");
sea_rch.c | 128 | environment( who )->do_search( str );
sea_rch.c | 134 | write(query_notify_fail());
sea_rch.c | 150 | query_hide_invis();
sea_rch.c | 152 | m_indices( hide_invis );
sea_rch.c | 159 | sizeof( types );
sea_rch.c | 166 | random(environment(who)->query_light());
sea_rch.c | 176 | remove_hide_invis(types[i]);
sea_rch.c | 186 | write("You search around and find "+query_multiple_short(found)+".\n");
sea_rch.c | 188 | environment(who)->query_default_search_description();
sea_rch.c | 195 | random( 4 ) ] );
sea_rch.c | 197 | write(ground[random(sizeof(ground))]);
sea_rch.c | 202 | event(environment(who), "player_search");
sea_rch.c | 203 | map_delete(callouts, who->query_name());
sea_rch.c | 209 | remove_call_out(callouts[who->query_name()]);
sea_rch.c | 210 | tell_object(who, "You stop searching.\n");
sea_rch.c | 211 | map_delete(callouts, who->query_name());
sea_rch.c | 218 | cmd(0) :) });
weigh.c | 34 | weight_string(int number);
weigh.c | 35 | cmd(object *things, int brief);
weigh.c | 88 | if (sizeof(things) >
weigh.c | 90 | notify_fail("You cannot weigh that many things at once.\n");
weigh.c | 93 | this_player()->query_dex());
weigh.c | 97 | this_player()->query_wearing();
weigh.c | 98 | filter(things, (: member_array($1, $(wearing)) > -1 :));
weigh.c | 102 | query_complete_weight();
weigh.c | 108 | query_pronoun() + " weighs ");
weigh.c | 109 | query_complete_weight();
weigh.c | 128 | write(results);
weigh.c | 130 | if (sizeof(things) >
weigh.c | 134 | weight_string(total * accuracy) + ".\n");
weigh.c | 138 | weight_string(accuracy) + ".\n");
weigh.c | 143 | query_multiple_short(things) + (sizeof(things) >
weigh.c | 146 | this_player() }));
weigh.c | 157 | item(s)'> brief", (: cmd($1, 1) :) });
typo.c | 25 | create();
typo.c | 26 | set_error_type("TYPO");
typo.c | 27 | set_use_last_error(0);
identify.c | 20 | filter(indirect_obs, (: $1->query_identifier() :));
identify.c | 22 | if (sizeof(indirect_obs) >
identify.c | 23 | write("You do not have any of those objects identified.\n");
identify.c | 30 | query_full_identifier() + "\".\n");
identify.c | 34 | lower_case(new_name);
identify.c | 37 | effects_matching(EFFECT->query_classification());
identify.c | 39 | add_failed_mess("No identities to remove.");
identify.c | 42 | query_keep();
identify.c | 43 | delete_effect(ees[0]);
identify.c | 45 | add_effect( EFFECT, ([ "keep" : 1 ]) );
identify.c | 49 | the_short() + ".\n");
identify.c | 51 | add_effect(EFFECT, ([ "identity" : word ]));
identify.c | 56 | write("You may only identify one thing at a time.\n");
identify.c | 66 | cmd($1, 0) :) });
lockout.c | 36 | notify_fail("Invalid time.\n");
lockout.c | 44 | if(sizeof(reason) >
lockout.c | 45 | notify_fail("Reason cannot be more than 80 characters.\n");
lockout.c | 49 | query_alt_of(this_player()->query_name());
lockout.c | 53 | this_player()->query_name() });
lockout.c | 55 | this_player()->query_name() });
lockout.c | 59 | this_player()->query_name()] = ({ tim, reason, alts });
lockout.c | 60 | write("This will lockout " + query_multiple_short(alts) + ".\n");
lockout.c | 61 | write("Enter your password: ");
lockout.c | 62 | input_to("get_pw", 1, this_player());
lockout.c | 70 | write("\nSorry, incorrect password.\n");
lockout.c | 75 | write("\nSomething went wrong, please try again.\n");
lockout.c | 89 | input_to("confirm", 0, this_player());
lockout.c | 100 | write("Ok, cancelling lockout...\n");
lockout.c | 101 | write("Lockout cancelled.\n");
lockout.c | 106 | write("Something went wrong, please try again.\n");
lockout.c | 116 | write("Sorry, we failed.\n");
lockout.c | 120 | write("Ok, you are now locked out.  Quit when ready.\n");
lockout.c | 131 | cmd($4[0], $4[1], implode($4[2..], " "), 1 ) :) });
hnew_bie.c | 27 | query_chat_history("newbie");
hnew_bie.c | 38 | tell_object(this_player(), result);
hnew_bie.c | 45 | return ({ "", (: cmd() :) });
health.c | 70 | health_string(1, ref level);
health.c | 72 | replace(health, ({ "is ", "are ", "appears ", "appear " }));
health.c | 90 | add_failed_mess("Unable to find any wounded people.\n");
health.c | 95 | query_multiple_short(who) + ".\n");
health.c | 101 | cmd($1, 1) :) });
group.c | 29 | allowed_to_use( object user );
group.c | 32 | rehash_group_sub_commands();
group.c | 33 | make_patterns_array();
group.c | 34 | query_patterns();
group.c | 39 | do_help( string on_what );
group.c | 43 | rehash_group_sub_commands();
group.c | 44 | make_patterns_array();
group.c | 67 | get_dir( dir );
group.c | 78 | sscanf( file, "%s.%*s", file );
group.c | 81 | load_object( ( GROUP_SUB_CMDS_DIR + file ) );
group.c | 101 | new( class sub_command ) ]);
group.c | 105 | file_name( cmd_object );
group.c | 155 | sscanf( pattern, verb + " %s", mangled_pattern );
group.c | 162 | sizeof( info->data );
group.c | 174 | printf( "ERROR: Correct version of \"" + verb + "\" not found.\n" );
group.c | 182 | printf( "ERROR: Cannot load command \"" + verb + "\"!\n" );
group.c | 183 | tell_creator( this_player(), "DEBUG: File name: %s\n", info->file_name );
group.c | 192 | query_group_sub_command_function( verb, cmd_pattern );
group.c | 202 | this_player()->query_group();
group.c | 206 | if( cmd_object->query_membership_required( verb, cmd_pattern ) >
group.c | 215 | if( cmd_object->query_leadership_required( verb, cmd_pattern ) >
group.c | 240 | lower_case( on_what );
group.c | 261 | load_object( _sub_commands[ on_what ]->file_name );
group.c | 270 | query_help_string_for( on_what );
group.c | 277 | this_player()->query_cols();
group.c | 285 | this_player()->more_string( message );
group.c | 307 | do_help( $4[ 0 ] ) :) });
group.c | 316 | sizeof( command->data );
users.c | 43 | query_cap_name() });
users.c | 56 | query_cap_name() :));
users.c | 57 | filter(logins_n, (: $1 :));
users.c | 59 | strcmp(lower_case($1), lower_case($2)) :));
users.c | 60 | sizeof(logins_n);
users.c | 128 | sizeof(users());
users.c | 131 | write( output );
users.c | 133 | filter(str, (: $1 :));
users.c | 134 | sort_array(str, (: strcmp(lower_case($1), lower_case($2)) :));
users.c | 135 | sizeof(logins_n);
users.c | 136 | if (sizeof(str) >
users.c | 142 | write("Currently logged on: "+str[0]+".\n");
users.c | 148 | return ({ "", (: cmd() :) });
appraise.c | 11 | cmd(object *things);
appraise.c | 66 | query_multiple_short(thing->query_materials());
appraise.c | 115 | if (thing->query_no_limbs() >
appraise.c | 131 | query_max_volume();
appraise.c | 133 | query_max_size();
appraise.c | 177 | if(sizeof(things) >
appraise.c | 185 | write("Is that a tuxuedo you are wearing?  No, probably not.\n");
appraise.c | 187 | write("You appraise yourself.  " + (random(10) + 1) + " out of 10.\n");
appraise.c | 213 | the_short() + " " + query_dimensions_mess(thing);
appraise.c | 220 | query_type_mess(thing);
appraise.c | 222 | query_appearance_mess(thing);
appraise.c | 229 | query_container_mess(thing);
appraise.c | 236 | cond_string();
appraise.c | 242 | write("$P$Appraise$P$" + mess );
appraise.c | 244 | add_succeeded_mess("");
appraise.c | 251 | return ({ "<indirect:object:me-here'item'>", (: cmd($1) :) });
options.c | 10 | cmd_set(string option, string value);
options.c | 18 | cmd_set(option, bing);
options.c | 24 | query_option_help(this_player(),option)));
options.c | 27 | query_sub_options(this_player(), option);
options.c | 29 | write("Top level:\n");
options.c | 31 | write(option + ":\n");
options.c | 33 | sort_array(bits, (: strcmp :));
options.c | 38 | write(sprintf("   %-17s <more options>\n", bing));
options.c | 54 | add_failed_mess("There is no option " + option + ".\n");
options.c | 71 | query_sub_options(this_player(), option);
options.c | 107 | explode(option, " ");
options.c | 112 | if (sizeof(bits) >
options.c | 113 | cmd_set_all(implode(bits[0..<2], " "), value);
options.c | 115 | add_failed_mess("Cannot use 'all' as an option by itself.\n");
options.c | 132 | add_failed_mess("There is no option " + option + ".\n");
options.c | 144 | query_option_value(this_player(), option);
options.c | 145 | write("Editing the option " + option + ".\n");
options.c | 150 | add_failed_mess("There is no option " + option + ".\n");
options.c | 157 | write("Aborting.\n");
options.c | 166 | write("Unable to set the option " + option + ".\n");
idea.c | 25 | create();
idea.c | 26 | set_error_type("IDEA");
idea.c | 27 | set_use_last_error(0);
xyzzy.c | 8 | write("Nothing happens.\n" );
xyzzy.c | 13 | return ({ "", (: cmd() :) });
time.c | 19 | show_mud_time();
time.c | 24 | localtime(time());
time.c | 38 | localtime(time());
time.c | 42 | sizeof(_timezones);
time.c | 49 | show_mud_time();
time.c | 51 | write(mess);
time.c | 56 | return ({ "", (: cmd :) });
time.c | 62 | cap_words(SPECIAL_DAY_HANDLER->query_special_day());
time.c | 65 | strlen(day) ? ".  Today is "+ day +".": ".") );
time.c | 66 | write( mess );
lang_uages.c | 21 | query_languages();
lang_uages.c | 22 | sizeof(langs);
lang_uages.c | 24 | query_language_spoken_skill(langs[i])) >
lang_uages.c | 26 | query_language_written_skill(langs[i])) >
lang_uages.c | 34 | implode(langs, ", ") ) +" and grunt.\n");
components.c | 14 | this_player()->query_spells_nocase();
components.c | 20 | add_failed_mess( "You don't know any magic spells.\n" );
components.c | 24 | this_player()->expand_nickname( spell_name );
components.c | 25 | capitalize( spell_name );
components.c | 34 | query_consumables();
components.c | 35 | query_needed();
components.c | 45 | sizeof( needed ) > 1 ? "them" : "it" );
components.c | 49 | sizeof ( needed ) >
components.c | 53 | add_succeeded_mess( ({ mess + ".\n", "" }) );
components.c | 58 | return ({ "[for] <string'spell'>", (: cmd( $4[0] ) :) });
rot13.c | 9 | rot13(string str);
rot13.c | 12 | printf("You rot: \"%s\".\n", rot13(str));
rot13.c | 19 | sizeof(str);
rot13.c | 34 | return ({ "<string>", (: cmd($4[0]) :) });
leaveg_roup.c | 16 | do_leave(string group, object member);
leaveg_roup.c | 23 | query_group(this_player());
leaveg_roup.c | 25 | notify_fail("You are not a member of any group.\n");
leaveg_roup.c | 27 | query_members( group );
leaveg_roup.c | 29 | leave_group(group, this_player());
leaveg_roup.c | 30 | end_group( group );
leaveg_roup.c | 36 | leave_group( group, member );
leaveg_roup.c | 37 | end_group( group );
leaveg_roup.c | 53 | do_leave(group, member);
leaveg_roup.c | 55 | tell_object(member, this_player()->short()+" leaves the group.\n");
leaveg_roup.c | 58 | end_group(group);
leaveg_roup.c | 62 | do_leave(group, this_player());
leaveg_roup.c | 63 | write("You leave "+group+".\n");
leaveg_roup.c | 72 | notify_fail("Ack, something went wrong.\n");
leaveg_roup.c | 79 | remove_protector(person);
leaveg_roup.c | 80 | remove_protector(member);
leaveg_roup.c | 81 | remove_follower(person);
leaveg_roup.c | 82 | remove_follower(member);
title.c | 12 | this_player()->query_player_title() + ".\n");
title.c | 14 | write("Your player title is currently not set.\n");
title.c | 17 | this_player()->query_all_player_titles();
title.c | 19 | query_allowed_multiple_titles();
title.c | 29 | query_multiple_short(map(titles, (: capitalize($1) :))) + ".\n");
title.c | 38 | lower_case(title);
title.c | 39 | explode(title, " ");
title.c | 42 | if (sizeof(bits) >
title.c | 44 | add_failed_mess("You cannot use a title with more than 1 bit.\n");
title.c | 49 | if (strlen(title) >
title.c | 50 | add_failed_mess("Your title is too long.\n");
title.c | 55 | add_failed_mess("The title '" + title + "' is not valid.\n");
title.c | 63 | add_failed_mess("The title '" + womble + "' is not valid.\n");
title.c | 76 | this_player()->set_player_title(title);
title.c | 85 | add_succeeded_mess(mess);
title.c | 91 | add_failed_mess("Your player title is already unset.\n");
title.c | 94 | this_player()->set_player_title(0);
title.c | 95 | add_succeeded_mess("$N reset$s $p player title.\n");
title.c | 102 | cmd_reset() :) });
keep.c | 30 | add_effect( EFFECT, ([ "keep" : 1 ]) );
keep.c | 33 | query_multiple_short(obs)+".\n" );
keep.c | 42 | all_inventory(this_player());
keep.c | 43 | filter(obs, (: $1->query_keep() :) );
keep.c | 45 | add_failed_mess("You are not keeping anything.\n");
keep.c | 48 | write("You are keeping " + query_multiple_short(obs) + ".\n");
shields.c | 6 | construct_shield_message( object player, int not_self );
shields.c | 11 | construct_shield_message(this_player(), 0);
shields.c | 16 | tell_object( this_player(), "Arcane protection status:\n" + mess );
shields.c | 18 | tell_object( this_player(), "You do not have any arcane protection.\n" );
shields.c | 34 | query_armour_callbacks();
shields.c | 36 | sizeof(callbacks);
shields.c | 37 | sizeof(callbacks[i]);
shields.c | 40 | query_arcane_shields(player);
shields.c | 47 | query_specials();
shields.c | 48 | sizeof(callbacks);
shields.c | 51 | query_arcane_shields(player);
shields.c | 63 | return ({ "", (: cmd :) });
dnickname.c | 20 | this_player()->query_nicknames();
dnickname.c | 25 | notify_fail("That nickname does not exist.\n");
dnickname.c | 28 | m_delete(map_nicknames, str);
dnickname.c | 29 | this_player()->set_nicknames(map_nicknames);
dnickname.c | 30 | write("Deleted nickname \"" + str + "\".\n");
dnickname.c | 36 | return ({ "<string'nickname'>", (: cmd($4[0]) :) });
resize.c | 18 | printf("%c%c%c", IAC, DO, TELOPT_NAWS);
resize.c | 19 | write("Okay, resizing your terminal...\n");
lockg_roup.c | 20 | query_group(this_player());
lockg_roup.c | 22 | notify_fail("You are not a member of any group.\n");
lockg_roup.c | 24 | query_owner(str);
lockg_roup.c | 26 | notify_fail("Sorry, you are not the owner of "+str+".\n");
lockg_roup.c | 28 | query_locked(str);
lockg_roup.c | 31 | set_locked(str, 0);
lockg_roup.c | 32 | write("Team "+str+" unlocked for new members.\n");
lockg_roup.c | 34 | set_locked(str, 1);
lockg_roup.c | 35 | write("Team "+str+" locked to new members.\n");
ignore.c | 19 | query_property("ignoring");
ignore.c | 24 | write( "You are not ignoring anyone.\n" );
ignore.c | 26 | sort_array(ignoring, 1);
ignore.c | 37 | query_property("ignoring");
ignore.c | 42 | lower_case( TP->expand_nickname(str) );
ignore.c | 45 | add_failed_mess("You cannot ignore an npc.\n");
ignore.c | 54 | add_failed_mess("Ignoring yourself.  Novel.\n");
ignore.c | 67 | add_failed_mess("You cannot ignore creators.\n");
ignore.c | 73 | add_property("ignoring", ignoring, 604800);
ignore.c | 75 | write( "You are already ignoring " + capitalize(str) + ".\n" );
ignore.c | 78 | write("You are now ignoring "+capitalize(str)+".\n");
ignore.c | 84 | cmd_list() :) });
temp_erature.c | 10 | disp_warmth(int, int);
temp_erature.c | 11 | disp_total(int i);
temp_erature.c | 19 | environment(this_player());
temp_erature.c | 22 | notify_fail("You have no environment.\n");
temp_erature.c | 29 | environment(where);
temp_erature.c | 35 | query_temperature(where) - COMFORTABLE);
temp_erature.c | 41 | this_player()->query_personal_temp();
temp_erature.c | 44 | query_property("warmth");
temp_erature.c | 45 | query_property("cooling");
temp_erature.c | 48 | temp_string(room_temp + COMFORTABLE)));
temp_erature.c | 56 | id("jewellery") :));
temp_erature.c | 60 | query_type();
temp_erature.c | 62 | query_type() });
temp_erature.c | 77 | query_property("warmth");
temp_erature.c | 78 | query_property("warmth");
temp_erature.c | 87 | query_property("cooling");
temp_erature.c | 88 | query_property("cooling");
temp_erature.c | 92 | query_name();
temp_erature.c | 97 | disp_warmth(ccool, 0)));
temp_erature.c | 101 | disp_warmth(cwarm, 1)));
temp_erature.c | 105 | disp_warmth(ccool, 0)));
temp_erature.c | 114 | sizeof(zones);
temp_erature.c | 115 | if(room_temp + sizeof(zones) >
temp_erature.c | 116 | sizeof(zones) - 5);
temp_erature.c | 118 | sizeof(zones);
temp_erature.c | 120 | sizeof(zones) + 5);
temp_erature.c | 125 | this_player()->effects_matching("body.wetness");
temp_erature.c | 132 | this_player()->query_property("warmth");
temp_erature.c | 133 | this_player()->query_property("cooling");
temp_erature.c | 145 | disp_total(to_int((room_temp+adjustment + correction)))));
temp_erature.c | 193 | return ({ "", (: cmd("") :) });
apply.c | 16 | begin_application (object, string, string);
apply.c | 35 | seteuid (geteuid());
apply.c | 52 | query_applications_accepted( domain );
apply.c | 68 | write( "Sorry, you have not fulfilled the requirements yet.\n" );
apply.c | 81 | begin_application (this_player(), type, domain);
apply.c | 93 | call_other (this_object(), tmp->next_method, tmp->player, tmp);
apply.c | 101 | read_file( "/d/" + domain + "/application.txt" );
apply.c | 108 | query_intro_text (type);
apply.c | 113 | query_application_info (domain);
apply.c | 116 | tell_object (this_player(), ret + "\n");
apply.c | 118 | new (class applying_player);
apply.c | 126 | tell_object (player, "Do you wish to continue your application?\n");
apply.c | 133 | query_questions (tmp->type);
apply.c | 147 | tell_object (player, "Your application has been aborted.\n");
apply.c | 153 | tell_object (player, "Do you wish to submit your application?\n");
apply.c | 172 | sizeof (tmp->questions);
apply.c | 175 | sprintf( "      %-=*s\n\n", 72, tmp->answers[j] )});
apply.c | 179 | implode (text, "\n"), tmp->domain);
apply.c | 182 | tell_object (player, "Something has gone wrong!\n");
apply.c | 197 | query_types();
apply.c | 205 | this_player()->more_string (ret);
apply.c | 211 | application_requirements (type);
apply.c | 213 | this_player()->more_string (ret);
apply.c | 219 | query_domain_status();
apply.c | 229 | this_player()->more_string (ret);
apply.c | 230 | write("$P$Domain Status$P$" + ret);
apply.c | 236 | query_questions (type);
apply.c | 247 | this_player()->more_string (implode (quest, "\n\n"));
apply.c | 252 | find_application (name, position);
apply.c | 255 | new (class vouch_info);
apply.c | 267 | this_player()->query_name();
apply.c | 280 | find_player (tmp->voucher);
apply.c | 284 | tell_object (ob, "Your vouch has been aborted.\n");
apply.c | 288 | make_vouch (position, name, tmp->voucher, message);
apply.c | 300 | tell_object (ob, "You cannot submit a vouch for yourself.\n");
apply.c | 320 | capitalize (name) + " as a " + position + ".\n");
apply.c | 324 | capitalize (name) + " as a " + position + ".\n");
apply.c | 332 | this_player()->query_name());
apply.c | 336 | capitalize (name) + " as a " + position + ".\n");
apply.c | 339 | tell_object (this_player(), v + "\n");
apply.c | 346 | this_player()->query_name());
apply.c | 353 | tell_object (this_player(), "Your application has been deleted.\n");
apply.c | 371 | add_failed_mess( "You already are a player killer, silly!\n" );
apply.c | 399 | write( "Are you sure about this, (Y/N)?\n");
apply.c | 400 | input_to("register2");
apply.c | 406 | lower_case(str);
apply.c | 409 | write("You need to type 'y' or 'n'.\n");
apply.c | 410 | write("Are you sure about this, (Y/N)? ");
apply.c | 411 | input_to("register2");
apply.c | 419 | write("%^BOLD%^%^YELLOW%^You are now a playerkiller, ready to kill and be killed.%^RESET%^\n");
apply.c | 420 | this_player()->add_property(PKER,1);
apply.c | 421 | this_player()->set_player_killer(1);
apply.c | 430 | this_player()->query_name());
apply.c | 444 | this_player()->more_string (implode (ret, "\n\n"));
apply.c | 455 | list_applications();
apply.c | 457 | this_player()->more_string (ret);
apply.c | 462 | find_application (name, type);
apply.c | 471 | format_application (i);
apply.c | 473 | this_player()->more_string (ret);
apply.c | 479 | this_player()->query_name(), position);
apply.c | 489 | capitalize ($1) :))) + ".\n");
apply.c | 526 | do_browse_app($4[0], $4[1]) :) });
apply.c | 527 | do_list_applicants() :) });
apply.c | 548 | master()->query_lord(name);
qwho.c | 11 | playercompare(object p1, object p2);
qwho.c | 54 | query_member( $1->query_name() ) :) );
qwho.c | 57 | sort_array( user_data[1], (: playercompare :) );
qwho.c | 64 | sort_array( user_data[0], (: playercompare :));
qwho.c | 72 | query_login_ob() :) );
qwho.c | 76 | filter_users(arr, guild_name, 1);
qwho.c | 84 | sizeof(arr);
qwho.c | 85 | query_cap_name();
qwho.c | 109 | query_object_type();
qwho.c | 169 | query_login_queue();
qwho.c | 170 | filter_users(arr, guild_name);
qwho.c | 171 | map(arr, (: $1->query_cap_name() :));
qwho.c | 174 | query_cap_name() :));
qwho.c | 176 | filter(login_q, (: $1 :));
qwho.c | 177 | sort_array(login_q, 1);
qwho.c | 179 | sizeof(login_q);
qwho.c | 183 | write(tmp);
qwho.c | 190 | write("%^BOLD%^" + counttest + " Playtester:%^RESET%^" + testers + "\n");
qwho.c | 194 | write("%^BOLD%^" + counttest + " Playtesters:%^RESET%^" + testers + "\n");
qwho.c | 203 | write("%^BOLD%^" + countplay + " Players:%^RESET%^" + plays + "\n");
qwho.c | 208 | replace(logins, ({ "[", "", "]", ""}));
qwho.c | 211 | replace(logins, tmp+" ", "");
qwho.c | 220 | implode(login_q, " ") + "\n");
qwho.c | 244 | strcmp(p1->query_name(), p2->query_name());
qwho.c | 249 | cmd($4[0]) :) });
un_alias.c | 10 | if (!who) who = this_player();
un_alias.c | 17 | write("Successfully unaliased '" + str + "'.\n");
un_alias.c | 20 | add_failed_mess("Unable to unalias '" + str + "'.\n");
un_alias.c | 38 | this_player()->query_aliases();
un_alias.c | 40 | m_indices(aliases);
un_alias.c | 43 | add_failed_mess("Bad pattern to alias.\n");
un_alias.c | 47 | add_failed_mess("Cannot start a regular expression with a '*' or '+', "                         "try: '.*' or '.+'.\n");
un_alias.c | 51 | filter_array(tmp, (: $1 && regexp($1, $(gfilter)) :));
un_alias.c | 62 | query_multiple_short(map(ok, (: "'" + $1 + "'" :))) + ".\n");
un_alias.c | 66 | query_multiple_short(map(tmp, (: "'" + $1 + "'" :))) + ".\n");
rem_ote.c | 33 | add_failed_mess( "You cannot use remotes when you are role playing.\n" );
rem_ote.c | 42 | friend (and you have tells earmuffed).\n");
rem_ote.c | 46 | notify_fail( "You have remote ear muffed.\n" );
rem_ote.c | 53 | notify_fail( NOT_ALLOWED );
rem_ote.c | 57 | notify_fail( NO_POWER );
rem_ote.c | 69 | this_player()->query_tell_reply_list();
rem_ote.c | 71 | map(prop, (: find_player($1) :));
rem_ote.c | 85 | this_player()->query_ignoring(obs);
rem_ote.c | 89 | sizeof(fail) >
rem_ote.c | 93 | this_player()->query_name() });
rem_ote.c | 114 | this_player()->adjust_time_left( -10 );
rem_ote.c | 121 | sizeof(obs) >
rem_ote.c | 130 | query_name() });
rem_ote.c | 131 | query_tell_reply_list();
rem_ote.c | 135 | set_tell_reply_list(prop);
rem_ote.c | 144 | set_tell_reply_list(ok_string);
rem_ote.c | 148 | sizeof( ignoring ) >
rem_ote.c | 154 | sizeof( roleplaying ) >
rem_ote.c | 161 | sizeof( earmuffed ) >
rem_ote.c | 167 | sizeof( multiple_earmuffed ) >
rem_ote.c | 189 | this_player()->query_short();
rem_ote.c | 191 | this_player()->query_family_name();
rem_ote.c | 195 | if (sizeof(ok + net_dead) >
rem_ote.c | 197 | colour_event("remote", "%^MAGENTA%^");
rem_ote.c | 205 | add_tell_history(me_name + " remotes ", words, 1);
rem_ote.c | 209 | colour_event("remote", "%^MAGENTA%^");
rem_ote.c | 215 | add_tell_history(me_name + " ", words, 1);
rem_ote.c | 228 | sizeof( net_dead ) >
rem_ote.c | 238 | cmd(({ }), $4[0]) :) });
haunt.c | 12 | random( 2 ) ] :) ), "" );
haunt.c | 16 | filter( victims, (: !sizeof( $1->query_ignoring( ({ this_player() }) ) ) :) );
haunt.c | 18 | this_player()) ) :) );
haunt.c | 21 | environment( $1 ) == environment( this_player() ) ) :) );
haunt.c | 35 | ooo() + "\" at $I.\n", victims );
haunt.c | 48 | ooo() + "\".\n" );
haunt.c | 54 | haunt_player($1) :)  });
al_ias.c | 20 | sizeof(al);
al_ias.c | 23 | replace(al[i], "@@", "@ @ ");
al_ias.c | 101 | this_player()->query_aliases();
al_ias.c | 107 | notify_fail("None defined.\n");
al_ias.c | 114 | m_indices(aliases);
al_ias.c | 118 | add_failed_mess("Bad pattern to alias.\n");
al_ias.c | 128 | add_failed_mess("Bad pattern to alias (mismatched brackets?).\n");
al_ias.c | 133 | sort_array(tmp, 1);
al_ias.c | 135 | sizeof(tmp);
al_ias.c | 137 | map_delete(aliases, 0);
al_ias.c | 140 | alias_string(aliases[tmp[i]]);
al_ias.c | 148 | replace_string(bing, "%^", "% ^");
al_ias.c | 152 | if (strlen(str) >
al_ias.c | 159 | sprintf("%s: %-=*s\n", tmp[i], len, bing);
al_ias.c | 160 | if (strlen(str) >
al_ias.c | 168 | sprintf("%-#*s\n", this_player()->query_cols(), str1);
al_ias.c | 172 | sprintf("%-#*s\n", this_player()->query_cols(), str2);
al_ias.c | 175 | sprintf("A total of %d aliases.\n", sizeof(tmp));
al_ias.c | 176 | this_player()->more_string(ret);
al_ias.c | 205 | explode("&" + str + "&", "$");
al_ias.c | 221 | sizeof(frog);
al_ias.c | 255 | delete(ifargs, sizeof(ifargs)-1, 1);
al_ias.c | 272 | sizeof(ret)-2 });
al_ias.c | 279 | sizeof(ret)-2 });
al_ias.c | 391 | delete(ifargs, sizeof(ifargs)-1, 1);
al_ias.c | 414 | alias_string(this_player()->query_player_alias(str)));
al_ias.c | 418 | print_aliases(str, 0);
al_ias.c | 431 | if (strsrch(name, "%^") >= 0 || strsrch(value, "%^") >
al_ias.c | 433 | sequence (% ^).\n");
al_ias.c | 438 | add_failed_mess("You cannot use 'END_ALIAS' in an alias.\n");
al_ias.c | 442 | implode(explode(name, " "), "");
al_ias.c | 449 | this_player()->add_player_alias(name, compile_alias(value));
al_ias.c | 450 | write("Added alias '" + name + "'.\n");
al_ias.c | 452 | this_player()->add_player_alias(name, compile_alias(value));
al_ias.c | 453 | write("Changed alias '" + name + "'.\n");
helper_s.c | 21 | query_login_ob() :) );
helper_s.c | 52 | lower_case( player_name );
helper_s.c | 68 | test_helper( $4[ 0 ] ) :) });
position.c | 32 | this_player();
position.c | 36 | write("You are " + player->query_position_short() + ".\n");
position.c | 40 | if ( strlen(new_pos) >
position.c | 47 | add_failed_mess( NO_POWER );
position.c | 51 | replace_string(new_pos, "^", "");
position.c | 52 | replace_string(new_pos, "%", "");
position.c | 55 | lower_case(new_pos);
position.c | 58 | add_failed_mess("You cannot bring yourself to set that position.\n");
position.c | 63 | set_position( new_pos );
position.c | 64 | adjust_sp( - SET_POSITION_COST );
position.c | 66 | query_cap_name() + " is " + new_pos + ".\n");
position.c | 73 | cmd( $4[0] ) :) });
pstatus.c | 20 | find_hp_string( int current, int max );
pstatus.c | 21 | find_gp_string( int current, int max );
pstatus.c | 22 | find_xp_string( int current );
pstatus.c | 23 | find_wimpy_string( int wimpy );
pstatus.c | 24 | find_surrender_string( int surr );
pstatus.c | 25 | find_align_string( object tp );
pstatus.c | 26 | find_death_string( int remaining );
pstatus.c | 27 | calc_percent( float x, float y );
pstatus.c | 28 | calc_xp_cost( string skill );
pstatus.c | 33 | this_player();
pstatus.c | 57 | find_death_string( me->query_max_deaths() - me->query_deaths() ) );
pstatus.c | 63 | capitalize( find_xp_string( me->query_xp() ) ) );
pstatus.c | 73 | this_player();
pstatus.c | 119 | printf( "%s", ret );
pstatus.c | 178 | calc_xp_cost( skill );
pstatus.c | 181 | sizeof( skills );
pstatus.c | 184 | this_player()->query_name(), current, xptotal, calc_percent( current, xptotal ) );
pstatus.c | 223 | find_hp_string( wimpy, 100 );
pstatus.c | 230 | find_hp_string( surr, 100 );
pstatus.c | 237 | query_deity();
pstatus.c | 240 | query_deity();
pstatus.c | 245 | align_string();
pstatus.c | 248 | capitalize( word );
pstatus.c | 251 | query_title( word );
pstatus.c | 283 | this_player()->query_skill_bonus( skill, 1 );
pstatus.c | 284 | this_player()->query_skill(skill);
pstatus.c | 287 | if( SKILL_OB->query_skill_cost(skill) >
pstatus.c | 288 | query_skill_cost(skill);
pstatus.c | 319 | to_int( ( to_float( x ) / to_float( y ) ) * 100 );
pstatus.c | 323 | return ({ "", (: cmd() :), "stats", (: cmd_stats() :) });
idle.c | 5 | write(who->query_cap_name() + " is net-dead.\n");
idle.c | 8 | time_elapsed_string(query_idle(who)) + ".\n");
idle.c | 14 | return ({ "<indirect:player>", (: cmd($1[0]) :) });
ex_amine.c | 5 | cmd_object($1, $4[0]) :) });
ea_lias.c | 22 | this_player()] + "' alias.\n");
ea_lias.c | 27 | add_failed_mess("No alias '"+str+"' defined.\n");
ea_lias.c | 31 | add_failed_mess("You already have an alias called \"" + str + "\".");
ea_lias.c | 38 | this_player()->do_edit(al, "finish_alias_edit", 0);
ea_lias.c | 55 | add_failed_mess("No alias '"+alias+"' defined.\n");
ea_lias.c | 59 | add_failed_mess("The alias '"+new_alias+"' already exists.\n");
ea_lias.c | 62 | replace_string(new_alias, "END_ALIAS", "NO YOU DONT");
ea_lias.c | 65 | this_player()->do_edit(al, "finish_alias_edit", 0);
ea_lias.c | 83 | write("Can't save an empty alias, sorry.\n");
ea_lias.c | 89 | replace(str, "@@", "@ @ ");
ea_lias.c | 93 | printf("Added alias '%s'.\n", alias);
ea_lias.c | 95 | printf("Changed alias '%s'\n", alias);
ea_lias.c | 96 | this_player()->add_player_alias(alias, ALIAS_CMD->compile_alias(str));
ea_lias.c | 97 | map_delete(editing_alias, this_player());
ea_lias.c | 114 | clean_up();
ea_lias.c | 121 | reset();
unkeep.c | 30 | reset_keep();
unkeep.c | 35 | write("You are not attempting to keep anything.\n");
unkeep.c | 39 | query_multiple_short(success) + ".\n");
unkeep.c | 45 | return ({ "<indirect:object:me>", (: cmd( $1 ) :) });
maptemp.c | 14 | environment(this_player());
maptemp.c | 16 | add_failed_mess("You are somewhere not on any map.\n");
maptemp.c | 21 | add_failed_mess("You are blind and cannot see.\n");
maptemp.c | 29 | add_failed_mess("It is too dark to see anything.\n");
maptemp.c | 32 | add_failed_mess("It is too bright to see anything.\n");
maptemp.c | 35 | query_terrain_coords();
maptemp.c | 36 | query_terrain_handler();
maptemp.c | 38 | add_failed_mess("You can only do this in a terrain.\n");
maptemp.c | 43 | query_visibility(env));
maptemp.c | 45 | add_failed_mess("There is no map available here.\n");
maptemp.c | 48 | write(map);
maptemp.c | 53 | return ({ "", (: do_map :) });
hi_story.c | 2 | this_player()->print_history(arg);
hi_story.c | 7 | cmd($4[0]) :) });
bury.c | 31 | add_failed_mess("This command is in play testing at the moment.\n");
bury.c | 46 | add_failed_mess("You cannot bury items while in combat.\n");
bury.c | 51 | add_failed_mess("You cannot bury things here.\n");
bury.c | 55 | filter(obs, (: !is_in_me_or_environment($1, this_player()) :));
bury.c | 59 | if (sizeof(sobs) >
bury.c | 70 | effects_matching("mudlib.owned.weapon");
bury.c | 72 | arg_of(effs[0]);
bury.c | 74 | query_short(), TP->query_name());
bury.c | 77 | environment(this_player())->add_effect(BURY_EFFECT, ob);
bury.c | 78 | move("/room/rubbish");
bury.c | 86 | add_property("already buried", 1);
bury.c | 90 | query_property("XP");
bury.c | 94 | adjust_xp(xp[1], 1);
bury.c | 97 | remove_property("XP");
bury.c | 111 | query_multiple_short(fobs)+".\n");
bury.c | 121 | add_failed_mess("You cannot find anything here to bury!\n");
bury.c | 129 | query_multiple_short(too_many) + ".\n");
bury.c | 132 | environment(TP)->query_burial_message();
bury.c | 134 | write(replace_string(messages[0], "$objs$", query_multiple_short(sobs)));
bury.c | 135 | say(replace(messages[1], ({ "$N", TP->the_short(), "$objs$", query_multiple_short(sobs) })));
bury.c | 138 | query_multiple_short(sobs)+".\n");
bury.c | 141 | query_multiple_short( sobs ) +".\n" );
bury.c | 143 | write("You bury "+query_multiple_short(sobs)+" deep within the earth.\n");
bury.c | 149 | adjust_gp(gp);
bury.c | 160 | cmd(match_objects_for_existence("corpse", environment(TP))) :) });
countries.c | 272 | cmd();
countries.c | 273 | handle_no_show( int hide );
countries.c | 274 | resolve_domain_suffix( object player );
countries.c | 286 | copy( common_countries );
countries.c | 290 | query_property( COUNTRIES_NO_SHOW_PROP ) :) );
countries.c | 293 | notify_fail( "No visible players.\n" );
countries.c | 300 | resolve_domain_suffix( person );
countries.c | 311 | copy( all_countries[ suffix ] ) ]);
countries.c | 321 | map_delete( countries, "N/A" );
countries.c | 328 | map_delete( common_countries, country );
countries.c | 337 | sort_array( unsorted, -1 );
countries.c | 352 | to_int( percentage + 0.5 ) + "%" );
countries.c | 356 | this_player()->more_string( message );
countries.c | 367 | query_ip_name( player );
countries.c | 373 | explode( lower_case( addy ), "." );
countries.c | 375 | tell_creator( this_player(), "%O\n", host );
countries.c | 390 | this_player()->add_property( COUNTRIES_NO_SHOW_PROP, 1 );
countries.c | 400 | this_player()->remove_property( COUNTRIES_NO_SHOW_PROP );
countries.c | 405 | notify_fail( "This shouldn't happen.\n" );
nickname.c | 32 | print_nicknames(mapping map_nicknames);
nickname.c | 33 | add_nickname(string str, mapping map_nicknames);
nickname.c | 38 | previous_object()->query_nicknames();
nickname.c | 43 | lower_case(str);
nickname.c | 45 | add_failed_mess("That nickname does not exist.\n");
nickname.c | 48 | write("Setting for nickname "+str+" is "+map_nicknames[str]+".\n");
nickname.c | 63 | previous_object()->query_nicknames();
nickname.c | 73 | write("You do not have any nicknames.\n");
nickname.c | 77 | sort_array(keys(map_nicknames), 1);
nickname.c | 78 | this_player()->query_cols();
nickname.c | 79 | sizeof(tmp);
nickname.c | 81 | if (strlen(str) >
nickname.c | 82 | sprintf(tmp[i]+": %-=*s\n", cols - strlen(tmp[i]), map_nicknames[tmp[i]]);
nickname.c | 83 | if (strlen(str) >
nickname.c | 90 | sprintf("%-#*s\n", cols, str_middle);
nickname.c | 93 | sprintf("%-#*s\n", cols, str_small);
nickname.c | 95 | this_player()->more_string(str_long, "Nicknames");
nickname.c | 102 | lower_case(s1);
nickname.c | 103 | lower_case(s2);
nickname.c | 112 | previous_object()->query_nicknames();
nickname.c | 118 | write("Added nickname "+s1+" for "+s2+".\n");
nickname.c | 121 | write("Changed nickname "+s1+" from "+map_nicknames[s1]+" to "+s2+".\n");
nickname.c | 124 | this_player()->set_nicknames(map_nicknames);
perm_it.c | 19 | query_property("player" ) :) );
perm_it.c | 24 | this_player()->query_name()) :) );
perm_it.c | 36 | give_permission( player->query_name() );
perm_it.c | 62 | return ({ "<indirect:player>", (: cmd($1[0]) :) });
ear_muffs.c | 20 | create();
ear_muffs.c | 35 | query_property(PLAYER_EARMUFF_PROP);
ear_muffs.c | 42 | channel_list();
ear_muffs.c | 49 | printf("Your earmuffs are set to allow friends through.\n");
ear_muffs.c | 51 | printf("Your earmuffs are on.\n");
ear_muffs.c | 54 | printf("Your earmuffs are off.\n");
ear_muffs.c | 57 | printf("You have nothing set to be earmuffed.\n");
ear_muffs.c | 61 | write("$I$5=You have "+ query_multiple_short(on)+ " earmuffed.\n");
ear_muffs.c | 65 | query_multiple_short(types)+ " events.\n");
ear_muffs.c | 77 | channel_list();
ear_muffs.c | 82 | query_property(PLAYER_EARMUFF_PROP);
ear_muffs.c | 90 | toggle_earmuffs();
ear_muffs.c | 92 | toggle_earmuffs();
ear_muffs.c | 93 | toggle_earmuffs();
ear_muffs.c | 95 | write("Earmuffs turned on.\n");
ear_muffs.c | 99 | toggle_earmuffs();
ear_muffs.c | 101 | write("Earmuffs turned off.\n");
ear_muffs.c | 104 | set_allow_friends_earmuffs();
ear_muffs.c | 105 | write("Earmuffs set to allow friends through.\n");
ear_muffs.c | 115 | write("Nothing will be earmuffed any more.  (No news is good news?)\n");
ear_muffs.c | 120 | add_property(PLAYER_EARMUFF_PROP, on);
ear_muffs.c | 133 | query_property(PLAYER_EARMUFF_PROP);
ear_muffs.c | 144 | write("You are now earmuffing " + str + " events.\n");
ear_muffs.c | 148 | write("You are not earmuffing " + str + " events anymore.\n");
ear_muffs.c | 153 | write("You are now earmuffing " + str + " events.\n");
ear_muffs.c | 156 | write("You are not earmuffing " + str + " events anymore.\n");
ear_muffs.c | 161 | add_property(PLAYER_EARMUFF_PROP, on);
ear_muffs.c | 176 | do_earmuff($4[0], $4[1]) :) });
ear_muffs.c | 187 | do_earmuff($4[0], $4[1]) :) });
register.c | 14 | lower_case(alt);
register.c | 16 | notify_fail(alt + " is not a player.\n");
register.c | 18 | query_alt_of(this_player()->query_name());
register.c | 20 | this_player()->query_name();
register.c | 23 | query_alt_of(alt);
register.c | 29 | add_failed_mess("You and " + alt + " are already registered.\n");
register.c | 39 | write("Enter your password (this character): ");
register.c | 40 | input_to("get_pw", 1, this_player(), alt);
register.c | 46 | write("Sorry, incorrect password.\n");
register.c | 49 | write("\nEnter the password for " + alt + ": ");
register.c | 50 | input_to("get_alt_pw", 1, player, alt);
register.c | 56 | write("\n");
register.c | 59 | write("Something has gone wrong, player objects don't match.\n");
register.c | 64 | write("Sorry, incorrect password.\n");
register.c | 69 | query_alt_of(player->query_name());
register.c | 71 | query_name();
register.c | 74 | query_alt_of(alt);
register.c | 80 | write("Registering " + p1 + " as an alt of " + p2 + ".\n");
register.c | 81 | add_alt(0, p2, p1);
register.c | 83 | write("Registering " + p2 + " as an alt of " + p1 + ".\n");
register.c | 84 | add_alt(0, p1, p2);
register.c | 87 | write(result);
register.c | 94 | query_alt_of(this_player()->query_name());
register.c | 96 | this_player()->query_name();
register.c | 99 | query_alt_of(this_player()->query_name());
register.c | 101 | write("No alts registered.\n");
register.c | 104 | write("Your registered alts are " + query_multiple_short(alts) + ".\n");
register.c | 112 | cmd($4[0]) :) });
news.c | 39 | do_list(int all);
news.c | 40 | do_read(int num);
news.c | 63 | do_list(MOST);
news.c | 67 | do_list(ALL);
news.c | 70 | if(str) sscanf(str, "%d", msg);
news.c | 71 | do_read(msg);
news.c | 80 | query_newsrc(this_player()->query_name());
news.c | 84 | get_subjects(board_name);
news.c | 87 | sizeof(stuff);
news.c | 92 | write("No news is good news.\n");
news.c | 102 | write("No news item of that number.\n");
news.c | 109 | set_newsrc(this_player()->query_name(), news_rc);
news.c | 131 | get_subjects(board_name);
news.c | 133 | tell_object(this_player(), "No news is good news.\n");
news.c | 136 | query_newsrc(this_player()->query_name());
news.c | 141 | sizeof(stuff);
news.c | 145 | the_date(stuff[i][B_TIME])+")");
news.c | 149 | write("Plus more....\n");
news.c | 155 | the_date(stuff[i][B_TIME])+")");
news.c | 164 | this_player()->more_string( ret, "News" );
gather.c | 37 | add_failed_mess("Syntax: gather <plant>\n");
gather.c | 41 | gather_item(str, TP);
gather.c | 44 | pluralize(str);
gather.c | 46 | add_failed_mess( "You couldn't find any " + str + ".\n");
gather.c | 50 | sizeof(items);
gather.c | 57 | move("/room/rubbish");
gather.c | 62 | set_decay_speed(0);
gather.c | 64 | add_succeeded_mess( "$N gather$s $I.\n", moved );
gather.c | 69 | this_player() });
gather.c | 72 | write("You found but couldn't get " + query_multiple_short(left) + ".\n");
gather.c | 77 | return ({ "<string>", (: cmd( $4[0] ) :) });
coverage.c | 33 | keys(CLOTHING_HANDLER->query_all_clothing_zones());
coverage.c | 34 | allocate_mapping(sizeof(all_zones));
coverage.c | 35 | allocate_mapping(sizeof(all_zones));
coverage.c | 42 | this_player()->query_armours();
coverage.c | 47 | query_armour()  &&  !$1->query_clothing() :));
coverage.c | 49 | this_player()->query_wearing();
coverage.c | 52 | replace(bits, " ", ",");
coverage.c | 53 | replace(bits, ",and,", ",");
coverage.c | 54 | explode(bits, ",") - ({ "" });
coverage.c | 55 | filter(zones, (: member_array($1, $(all_zones)) != -1 :));
coverage.c | 58 | query_multiple_short(all_zones) + ".\n");
coverage.c | 65 | query_type() });
coverage.c | 67 | query_type();
coverage.c | 71 | query_equivilant_type(type);
coverage.c | 73 | query_zone_names(equiv_type);
coverage.c | 75 | query_zone_names(type);
coverage.c | 79 | if (member_array(armor, wearing) >
coverage.c | 90 | filter(covered, (: member_array($1, $(parts)) != -1 :));
coverage.c | 92 | member_array($1, $(parts)) != -1 :));
coverage.c | 96 | filter(all_zones, (: sizeof($(covered)[$1]) == 0 :));
coverage.c | 97 | if (sizeof(zones) >
coverage.c | 98 | if (sizeof(zones) >
coverage.c | 107 | write("You are covered from head to foot.\n");
coverage.c | 111 | sort_array(keys(covered) | keys(pot_covered), 1);
coverage.c | 118 | if (sizeof(covering = covered[zone]) >
coverage.c | 121 | one_short();
coverage.c | 125 | query_multiple_short(covering, "one");
coverage.c | 126 | if (sizeof(pot_covered[zone]) >
coverage.c | 132 | write(mess);
coverage.c | 134 | if (sizeof(covering = pot_covered[zone]) >
coverage.c | 136 | query_multiple_short(covering, "one") + ".\n");
coverage.c | 138 | if (bits) write("Your " + zone + verb + " unprotected.\n");
coverage.c | 151 | write("You are completely unprotected.  Good luck!\n");
coverage.c | 161 | part(s)'>", (: cmd(({ }), 0, $4[0]) :) });
bugcheck.c | 18 | explode( ob->query_property( "virtual name" ), "/" );
bugcheck.c | 20 | explode( base_name( ob ), "/" );
bugcheck.c | 33 | ctime(time()), this_player()->query_name(), base_name (ob));
bugcheck.c | 91 | the_short() + ".  Sorry it didn't work out.\n" );
bugcheck.c | 92 | log_file( WEIRD_OBJECT_LOG, implode( s, "/" ) + "\n" );
recover.c | 35 | add_failed_mess("This command is in play testing at the moment.\n");
recover.c | 46 | query_buried_container(environment(this_player()));
recover.c | 48 | add_failed_mess("There is nothing buried here.\n");
recover.c | 51 | match_objects_in_environments(name, cont);
recover.c | 53 | add_failed_mess(match_objects_failed_mess(omatch));
recover.c | 58 | if ( sizeof( obs ) >
recover.c | 60 | query_num( MAX_RECOVER ) + " items at a time.\n" );
recover.c | 89 | add_failed_mess("Unable to recover $I.\n", fail);
recover.c | 93 | add_succeeded_mess("$N $V $I.\n", ok_me);
recover.c | 97 | sizeof(ok_here) >
recover.c | 102 | all_inventory(cont);
recover.c | 108 | add_failed_mess("Unable to recover " + name + ".\n");
recover.c | 115 | return ({ "<string'buried object'>", (: cmd_recover($4[0]) :) });
email.c | 18 | query_email();
email.c | 21 | write("Your current email address is "+email+"\n");
email.c | 22 | write("To clear use \"email CLEAR\"\n");
email.c | 23 | write("For the email address to be only visible by lords prepend a :\n");
email.c | 24 | write("eg email :frog@frogcentral.froguni.swamp\n");
email.c | 32 | write("Email address set to "+str+".\n");
email.c | 34 | write("Email address is null.\n");
email.c | 35 | set_email(email);
rituals.c | 17 | this_player()->query_spells();
rituals.c | 19 | write( "You don't know any religious rituals.\n" );
rituals.c | 40 | write( "You don't know any religious rituals.\n" );
rituals.c | 45 | sizeof( religious ) == 1 ? "" : "s" ) +":\n" );
rituals.c | 47 | implode( sort_array( religious, 1 ), "\n" ) );
make.c | 88 | create();
make.c | 90 | sort_array( _snow_creatures, 1 );
make.c | 97 | environment(player);
make.c | 99 | add_failed_mess("You must be outside to make a " + str + ".\n");
make.c | 103 | query_co_ord();
make.c | 106 | add_failed_mess("You need snow to make a " + str + ".\n");
make.c | 117 | environment(TP);
make.c | 121 | clone_object("/std/environ/snowball");
make.c | 143 | clone_object("/obj/misc/cream_pie");
make.c | 149 | dest_me();
make.c | 153 | add_property("made cream pie", 1, 30);
make.c | 154 | add_succeeded_mess("$N conjure$s up $I.\n", ({ ob }));
make.c | 159 | add_failed_mess("You can only create cream pies on cream pie day!\n");
make.c | 164 | if ( member_array( str, _snow_creatures ) >
make.c | 166 | clone_object("/std/environ/snowman");
make.c | 167 | set_type(str);
make.c | 168 | move(env);
make.c | 169 | add_succeeded_mess("$N $V a beautiful " + str + ".\n");
make.c | 186 | return ({ _make_pattern_cache, (: cmd($4[0]) :) });
killers.c | 11 | second_name( string str );
killers.c | 16 | this_player();
killers.c | 30 | query_player_killer() :) );
killers.c | 31 | if (mode) mode = lower_case(mode);
killers.c | 48 | query_guild_ob() == "/std/guilds/" + $(mode) :) );
killers.c | 52 | query_cap_name();
killers.c | 54 | short();
killers.c | 56 | sizeof(killers);
killers.c | 70 | write( "You are the only player killer on " + mud_name() + ".\n" );
killers.c | 80 | query_cap_name(): player->short()) });
killers.c | 85 | lower_case( $2 ) ) :) );
killers.c | 87 | this_player()->query_cap_name();
killers.c | 90 | this_player()->query_family_name();
killers.c | 97 | unique_array( names, (: second_name($1) :) );
killers.c | 105 | sizeof(names);
killers.c | 108 | query_multiple_short(names) + "\n");
killers.c | 110 | implode( names, "\n" ) ) + "\n");
killers.c | 124 | this_player() :) );
killers.c | 126 | add_failed_mess("There are no killers here.\n");
killers.c | 129 | if (sizeof(killers) >
killers.c | 131 | query_multiple_short(killers) + ".\n");
killers.c | 134 | query_multiple_short(killers) + ".\n");
killers.c | 143 | strsrch( str, " " );
killers.c | 164 | capitalize( $1 ) :) );
killers.c | 182 | add_failed_mess( "There are no player killers in that club.\n" );
killers.c | 196 | cmd( $4[0] ) :) });
splash.c | 37 | environment(TP);
splash.c | 41 | notify_fail("You must be outside to do that.\n");
splash.c | 44 | notify_fail("It must be raining to splash someone.\n");
splash.c | 48 | add_effect("/std/effects/other/wetness", 2 + random(4));
splash.c | 53 | query_multiple_short(obs - ({ ob }) + ({ "you" }))+".\n");
splash.c | 57 | query_multiple_short(obs);
splash.c | 58 | write("You splash "+str+".\n");
splash.c | 59 | say(TP->a_short()+" splashes "+str+".\n", obs);
splash.c | 64 | return ({ "<indirect:living>",(: cmd($1) :) });
mccp.c | 9 | mud_name() + ".\n" );
mccp.c | 18 | reference_allowed( $1, $(this_player()) ) :) );
mccp.c | 20 | sizeof( filter( players, (: compressedp :) ) );
mccp.c | 24 | query_num(sizeof(players) - compressed, 1000) + " users (" + (((sizeof(players) - compressed) * 100) / sizeof(players)) + "%) are uncompressed.%^RESET%^\n" );
mccp.c | 30 | return ({ "", (: cmd :) });
stop.c | 45 | this_player()->interrupt_debate();
stop.c | 48 | this_player()->interrupt_spell();
stop.c | 51 | this_player()->interrupt_ritual();
stop.c | 55 | this_player()->query_attacker_list();
stop.c | 57 | write( "You are not fighting anyone.\n" );
stop.c | 64 | write( "Stopping fight.  Please wait.\n" );
stop.c | 65 | call_out( "stop_fight", 5+random(10), this_player() );
stop.c | 69 | cmd( "debate" );
stop.c | 70 | cmd( "spell" );
stop.c | 71 | cmd( "ritual" );
stop.c | 72 | cmd( "fight" );
stop.c | 76 | this_player()->drunk_check( "stop" );
stop.c | 80 | interrupt_search(this_player());
stop.c | 82 | write( "Okay.\n" );
stop.c | 92 | query_attacker_list();
stop.c | 100 | query_property( "dead" ) ? (string)$1->a_short() + " (dead anyway)" : $1 :) ) ) +".\n" );
stop.c | 103 | stop_fight(ob);
stop.c | 109 | cmd($4[0]) :) });
t_ell.c | 68 | return (int) environment(TP)->trap_tell(words, thing, 0);
t_ell.c | 74 | lower_case(word);
t_ell.c | 75 | expand_nickname(word);
t_ell.c | 78 | find_player(word) });
t_ell.c | 80 | map(thing, (: find_player :));
t_ell.c | 86 | do_tell(word + " " + words);
t_ell.c | 89 | add_failed_mess(capitalize(word) + " is not logged in.\n");
t_ell.c | 95 | environment(TP)->trap_tell(words, thing, 0);
t_ell.c | 107 | this_player() :));
t_ell.c | 116 | add_failed_mess("You have tells ear muffed.\n");
t_ell.c | 128 | build_message(words, thing, "tell");
t_ell.c | 137 | add_failed_mess("No message given.\n");
t_ell.c | 139 | this_player() });
t_ell.c | 142 | add_failed_mess("Talking to yourself again.  I don't know.\n");
t_ell.c | 146 | if (sizeof(obs) >
t_ell.c | 147 | add_failed_mess("You can only tell up to 20 people a message.\n");
t_ell.c | 151 | this_player()->query_ignoring(obs);
t_ell.c | 155 | sizeof(fail) >
t_ell.c | 163 | this_player()->query_ignored_by(obs);
t_ell.c | 180 | notify_fail(NO_POWER);
t_ell.c | 190 | if (sizeof(obs) >
t_ell.c | 197 | if (sizeof(obs) >
t_ell.c | 205 | the_short() + ".\n");
t_ell.c | 220 | the_short() + ".\n");
t_ell.c | 240 | this_player()->query_name() });
t_ell.c | 268 | query_tell_reply_list();
t_ell.c | 272 | set_tell_reply_list(prop);
t_ell.c | 275 | set_tell_reply_list(ok_string);
t_ell.c | 287 | sizeof(net_dead) > 1 ? "are" : "is") + " net dead.\n");
t_ell.c | 291 | sizeof(multiple_earmuffed) >
t_ell.c | 296 | sizeof(earmuffed) >
t_ell.c | 300 | write("Cut through ear muffs? (y/n) ");
t_ell.c | 301 | input_to((: delayed_tell :), earmuffed, words);
t_ell.c | 306 | sizeof(roleplaying) >
t_ell.c | 310 | write("Cut through ear muffs? (y/n) ");
t_ell.c | 311 | input_to((: delayed_tell :), earmuffed, words);
t_ell.c | 314 | this_player()->query_busy();
t_ell.c | 316 | write("Warning! You have your busy flag on.\n");
t_ell.c | 319 | query_multiple_short(busy, 0, 1, 0, 0) + ".\n");
t_ell.c | 330 | short(0,0) :)), 0, 1, 1, 0));
t_ell.c | 339 | add_failed_mess("It seems no one was listening.\n");
t_ell.c | 344 | adjust_time_left(-5);
t_ell.c | 352 | this_player()->query_tell_reply_list();
t_ell.c | 359 | map(rep, (: find_living($1) :)) - ({ 0 });
t_ell.c | 366 | this_player()->set_tell_reply_list(rep);
t_ell.c | 367 | cmd(mess, obs, 0);
t_ell.c | 373 | uniq_array(explode(names, ","));
t_ell.c | 374 | map(rep, (: this_player()->expand_nickname($1) :));
t_ell.c | 375 | filter(rep, (: $1 && find_player($1) && interactive(find_player($1)) :));
t_ell.c | 384 | this_player()->set_tell_reply_list(({ TELL_REPLY_LOCK_ID }) + rest);
t_ell.c | 392 | this_player()->set_tell_reply_list(0);
t_ell.c | 393 | add_succeeded_mess(({ "You remove any possible reply locks.\n", "" }));
t_ell.c | 403 | cmd($4[0], 0, 0) :) });
t_ell.c | 426 | write("Ok, tell aborted.\n");
t_ell.c | 441 | replace(message, "%^", " ");
t_ell.c | 452 | sizeof(netdead) > 1 ? " is" : " are") + " net dead.\n");
chfn.c | 35 | write("Change finger information.\n");
chfn.c | 38 | write("What real name do you wish to use ["+TP->query_real_name()+"] ? ");
chfn.c | 39 | input_to("real_name");
chfn.c | 46 | strip_colours(str);
chfn.c | 48 | query_real_name();
chfn.c | 57 | if (real_name && strlen(real_name) >
chfn.c | 58 | write("Real name is too long, a maximum of " + MAX_EMAIL_LEN + " characters is allowed.\n");
chfn.c | 59 | write("What real name do you wish to use ["+TP->query_real_name()+"] ? ");
chfn.c | 60 | input_to("real_name");
chfn.c | 65 | write("Ok real name set to "+real_name+".\n");
chfn.c | 67 | write("Real name cleared.\n");
chfn.c | 69 | set_real_name(real_name);
chfn.c | 72 | query_where()+"]\n(none for none) : ");
chfn.c | 73 | input_to("get_where");
chfn.c | 80 | strip_colours(str);
chfn.c | 82 | query_where();
chfn.c | 92 | write("Ok location set to "+where+".\n");
chfn.c | 94 | write("Location cleared.\n");
chfn.c | 97 | if (where && strlen(where) >
chfn.c | 98 | write("Your location is too long, maximum of " + MAX_EMAIL_LEN + " characters allowed.\n");
chfn.c | 100 | query_where()+"]\n(none for none) : ");
chfn.c | 101 | input_to("get_where");
chfn.c | 104 | set_where(where);
chfn.c | 109 | input_to("birthday");
chfn.c | 111 | write("What email address do you wish to use.  Set to none to clear.\n");
chfn.c | 114 | write("["+TP->query_email()+"] : ");
chfn.c | 115 | input_to("get_email");
chfn.c | 129 | sscanf(str, "%d", tot);
chfn.c | 179 | query_birthday();
chfn.c | 182 | write("Birthday unchanged from "+birth_day+".\n");
chfn.c | 184 | write("Birthday left as blank.\n");
chfn.c | 190 | write("Invalid Birthday.  Birthday cleared.\n");
chfn.c | 193 | convert_birthday(str);
chfn.c | 194 | write("Birthday set to " + birth_day + ".\n");
chfn.c | 195 | birthday_gifts();
chfn.c | 198 | set_birthday(birth_day);
chfn.c | 200 | write("What email address do you wish to use.  Set to none to clear.\n");
chfn.c | 203 | write("["+TP->query_email()+"] : ");
chfn.c | 204 | input_to("get_email");
chfn.c | 210 | query_email();
chfn.c | 212 | strip_colours(str);
chfn.c | 216 | write("Email address left blank.\n");
chfn.c | 218 | write("Email address left as "+email+".\n");
chfn.c | 222 | write("Email address cleared.\n");
chfn.c | 225 | write("Email address set to "+email+".\n");
chfn.c | 229 | if (email && strlen(email) >
chfn.c | 230 | write("Your email address is too long, maximum of " + MAX_EMAIL_LEN + " characters allowed.\n");
chfn.c | 231 | write("What email address do you wish to use.  Set to none to clear.\n");
chfn.c | 234 | write("["+TP->query_email()+"] : ");
chfn.c | 235 | input_to("get_email");
chfn.c | 239 | set_email(email);
chfn.c | 244 | write("[none] : ");
chfn.c | 246 | write("["+TP->query_homepage()+"] : ");
chfn.c | 248 | input_to("get_home_page");
chfn.c | 253 | strip_colours(str);
chfn.c | 257 | write("Home page left as blank.\n");
chfn.c | 259 | write("Home page left as "+TP->query_homepage()+"\n");
chfn.c | 262 | set_homepage("");
chfn.c | 263 | write("Home page cleared.\n");
chfn.c | 265 | set_homepage(str);
chfn.c | 266 | write("Home page set to "+str+"\n");
chfn.c | 268 | write("Your home page address is too long, maximum of " + MAX_EMAIL_LEN + " characters allowed.\n");
chfn.c | 272 | write("[none] : ");
chfn.c | 274 | write("["+TP->query_homepage()+"] : ");
chfn.c | 276 | input_to("get_home_page");
chfn.c | 279 | save_me();
birthdays.c | 15 | query_is_birthday_today() :));
birthdays.c | 17 | notify_fail("No one has a birthday today.\n");
birthdays.c | 19 | printf("%s has a birthday today.\n", peeps[0]->short());
birthdays.c | 21 | write(query_multiple_short(peeps) + " have a birthday today.\n");
birthdays.c | 27 | return ({ "", (: cmd() :) });
verbose.c | 38 | query_verbose(t) ? " (verbose) " : " (brief) ");
verbose.c | 40 | write(disp + "\n");
verbose.c | 46 | set_verbose(t, which == "verbose");
verbose.c | 48 | write("Ok\n");
verbose.c | 51 | set_verbose(type, which == "verbose");
verbose.c | 52 | write("Ok\n");
verbose.c | 55 | write("No such option.\n");
money.c | 13 | query_all_places();
money.c | 14 | allocate_mapping(sizeof(zones));
money.c | 18 | create();
money.c | 44 | add_failed_mess("It's too dark to count your money.\n");
money.c | 51 | environment(this_player())->query_money_place();
money.c | 53 | environment(this_player())->query_property("place");
money.c | 55 | add_failed_mess("No idea what type of currency is used here.\n");
money.c | 59 | lower_case(str);
money.c | 62 | query_multiple_short(keys(_money_types) + ({ "here" })) + ".\n");
money.c | 68 | deep_inventory(this_player());
money.c | 71 | query_closed()  &&  !$1->query_transparent() :));
money.c | 74 | sizeof(inv) > 1 ? " are " : " is ") + "closed.\n");
money.c | 80 | deep_inventory(env);
money.c | 85 | all_inventory(this_player());
money.c | 86 | filter_array(inv, (: this_object()->find_the_dough($1) :));
money.c | 96 | get_money_ob();
money.c | 97 | set_money_array(money->query_money_array());
money.c | 99 | filter_legal_tender(new_money, _money_types[lower_case(str)]);
money.c | 102 | dest_me();
money.c | 119 | environment(money);
money.c | 120 | poss_short();
money.c | 121 | environment(env);
money.c | 123 | poss_short();
money.c | 124 | environment(env);
money.c | 127 | query_multiple_short(tmp_money->half_short(1)) + ".\n");
money.c | 130 | query_money_array();
money.c | 131 | sizeof(tmp_arr);
money.c | 132 | member_array(tmp_arr[i], total);
money.c | 140 | dest_me();
money.c | 150 | money_string(total) + ".\n");
money.c | 153 | write("You have no money that you can see.\n");
money.c | 157 | query_multiple_short(containers, "poss") + ".\n");
money.c | 160 | query_multiple_short(containers, "poss") + ".\n");
money.c | 163 | write("You are flat broke.\n");
money.c | 171 | if (member_array(MONEY_ALIAS, env->query_alias()) >
spells.c | 24 | this_player()->query_spells();
spells.c | 26 | write( "You don't know any magic spells.\n" );
spells.c | 54 | write( "You don't know any magic spells.\n" );
spells.c | 59 | sizeof( magic ) == 1 ? "" : "s" ) +":\n" );
spells.c | 61 | implode( sort_array( magic, 1 ), "\n" ) );
spells.c | 67 | return ({ "", (: cmd() :) });
rpskills.c | 59 | sizeof( args ) ;
rpskills.c | 66 | this_player()->query_skill( tp );
rpskills.c | 67 | query_only_show_if_non_zero( tp );
rpskills.c | 68 | query_no_bonus( tp );
rpskills.c | 69 | reset_eval_cost();
rpskills.c | 83 | bonus_to_string( (int)this_player()->query_skill_bonus( tp ) ) );
rpskills.c | 115 | write(this_player()->query_stupid_skills());
rpskills.c | 121 | query_skills();
rpskills.c | 123 | notify_fail( "Usage: "+ query_verb() +" <skill>\n" );
rpskills.c | 130 | rec_list( args, word, 1, 1, 0 ) );
rpskills.c | 131 | this_player()->more_string( result, "Skills" );
rpskills.c | 134 | query_skills();
rpskills.c | 138 | rec_list( args, "", ( member_array( "all", bits ) != -1 ), 1, 0 ) );
rpskills.c | 139 | this_player()->more_string( result, "Skills" );
rpskills.c | 145 | cmd($4[0]) :) });
unignore.c | 24 | query_property("ignoring");
unignore.c | 29 | notify_fail("unignore who?\n");
unignore.c | 31 | lower_case(TP->expand_nickname(str));
unignore.c | 34 | remove_property("ignoring");
unignore.c | 35 | write("You are no longer ignoring anyone.\n");
unignore.c | 40 | write("You are not ignoring "+str+".\n");
unignore.c | 44 | delete(ignoring, member_array(str, ignoring), 1);
unignore.c | 45 | add_property("ignoring", ignoring);
unignore.c | 46 | write(str+" has been removed from your list of ignored players.\n");
groups.c | 33 | cmd($4[0], "list [with] <string'player'>") :) });
finger.c | 17 | users();
finger.c | 19 | query_cap_name()) :));
finger.c | 24 | query_earmuffs() ? "e" : " ");
finger.c | 25 | geteuid(ob);
finger.c | 26 | query_object_type();
finger.c | 36 | query_birthday())?ret:"-"));
finger.c | 38 | write("$P$Finger$P$" + str);
finger.c | 47 | lower_case(str);
finger.c | 48 | this_player()->expand_nickname(str);
finger.c | 50 | finger_info(str);
finger.c | 52 | write("$P$finger: " + str + "$P$" + ret);
finger.c | 56 | do_finger(str);
finger.c | 58 | write("Intermud finger on its way.\n");
finger.c | 63 | mud_name() + ".\n");
finger.c | 70 | finger_player($4[0]) :) });
unidentify.c | 17 | filter(indirect_obs, (: $1->query_identifier() :));
unidentify.c | 19 | if (sizeof(indirect_obs) >
unidentify.c | 20 | write("You do not have any of those things identified.\n");
unidentify.c | 26 | set_identifier(0);
unidentify.c | 36 | return ({ "<indirect:object:me'object(s)'>", (: cmd($1) :) });
refer.c | 15 | lower_case(str);
refer.c | 16 | this_player()->expand_nickname(str);
refer.c | 17 | refer_info(str);
refer.c | 24 | mud_name() + ".\n");
refer.c | 29 | return ({"<string'name'>", (: cmd($4[0]) :) });
count.c | 7 | is_not_in_other_player(object thing);
count.c | 26 | add_failed_mess("It's too dark to count anything.\n");
count.c | 29 | if(sizeof(things) >
count.c | 30 | add_failed_mess("You cannot count that many things!\n");
count.c | 32 | filter(things, (: !is_not_in_other_player($1) :));
count.c | 34 | write("You can't count things carried by other people.\n");
count.c | 43 | query_alias();
count.c | 44 | if (aliases  &&  member_array(MONEY_ALIAS, aliases) >
count.c | 46 | clone_object(MONEY_OBJECT);
count.c | 48 | adjust_money(thing->query_money_array());
count.c | 53 | query_number_coins();
count.c | 55 | implode(money->half_short(1), ", ");
count.c | 62 | query_multiple_short(money->half_short(1));
count.c | 64 | dest_me();
count.c | 67 | filter(things, (: $1->query_continuous() :));
count.c | 69 | clone_object("/std/container");
count.c | 71 | make_medium_clone(thing->query_amount())->move(sack);
count.c | 74 | all_inventory(sack);
count.c | 76 | query_how_many();
count.c | 80 | amount_size(1) + " of " + $1->short() :)), ", ");
count.c | 88 | amount_size(1) + " of " + $1->short() :)));
count.c | 90 | dest_me();
count.c | 92 | filter(things, (: $1->query_collective() :));
count.c | 94 | clone_object("/std/container");
count.c | 97 | make_medium_clone(thing->query_amount());
count.c | 99 | move(sack);
count.c | 104 | all_inventory(sack);
count.c | 106 | query_amount();
count.c | 125 | query_plural()) :)));
count.c | 127 | dest_me();
count.c | 134 | filter(room_items, (: $1->query_count() :));
count.c | 139 | query_count() >
count.c | 143 | query_count();
count.c | 148 | pretty_short() :)), ", ");
count.c | 149 | sizeof(room_items);
count.c | 160 | query_count() >
count.c | 161 | pretty_short()) :)), ", ");
count.c | 162 | sizeof(tmp);
count.c | 166 | pretty_short() :)));
count.c | 167 | sizeof(room_items);
count.c | 172 | query_multiple_short(things, "one");
count.c | 175 | tell_creator("presto", "list == %s\n", list);
count.c | 176 | this_player()->reform_message(list, ({}));
count.c | 178 | printf("test message: %O\n", this_player()->evaluate_message(stuff));
count.c | 180 | sizeof(stuff[1]);
count.c | 182 | this_player()->calc_shorts(stuff[1][i], 1));
count.c | 184 | sizeof(things);
count.c | 190 | write("You count " + total + " items.\n");
count.c | 193 | query_num(total) + (total > 1 ? " items.\n" : " item.\n"));
count.c | 217 | cmd($1, 1) :) });
su.c | 18 | notify_fail("Usage: su <name>\n");
su.c | 20 | printf("You cannot quit yet: your inventory is still being generated.\n" );
su.c | 25 | write("You cannot su during a reboot.\n");
su.c | 30 | write("You cannot quit while in combat.\n");
su.c | 35 | cmd(0);
su.c | 36 | catch(command("leavegroup"));
su.c | 40 | write("You can't use su in the departure lounge.\n");
su.c | 44 | query_name();
su.c | 45 | clone_object("/secure/login")->do_su(str);
su.c | 47 | seteuid( "Root" );
su.c | 50 | query_property("guest"), "(to self)");
su.c | 52 | write_log("Su", from, TP->query_property("guest"), str);
su.c | 57 | return ({ "<string'new name'>", (: cmd($4[0]) :) });
describe.c | 62 | query_desc();
describe.c | 68 | write("No description set.\n");
describe.c | 72 | write("$I$5=$C$" + zone + ": " + TP->query_zone_desc(zone) + "\n");
describe.c | 83 | write("No zone descriptions setup.\n");
describe.c | 88 | write("Description cleared.\n");
describe.c | 89 | set_desc(0);
describe.c | 104 | this_player()->do_edit("", "finish_desc_edit");
describe.c | 108 | if (strlen(str) >
describe.c | 113 | set_desc(strip_colours(str));
describe.c | 114 | write("Description set.\n");
describe.c | 123 | write("Description unchanged.\n");
describe.c | 127 | this_player()->query_cap_name();
describe.c | 130 | strip_colours(str);
describe.c | 131 | replace(str, ({ "\n\n", "$NEW_LINE$", "\n", " " }));
describe.c | 132 | replace(str, "$NEW_LINE$", "\n");
describe.c | 133 | if (strlen(str) >
describe.c | 138 | set_desc(str);
describe.c | 139 | write("Description set.\n");
describe.c | 144 | this_player()->set_zone_desc(zone, desc);
describe.c | 145 | write("Set the description for the zone " + zone + " as \"" + desc + "\".\n");
describe.c | 150 | this_player()->set_zone_desc(zone, 0);
describe.c | 151 | write("Cleared the description for the zone " + zone + ".\n");
monitor.c | 31 | query_monitor();
monitor.c | 40 | write("Your hit point monitor is set to " + str + ".\n");
monitor.c | 41 | set_monitor(member_array(str, MONITOR_OPTIONS));
monitor.c | 48 | implode(MONITOR_OPTIONS, "|") + "}", (: cmd($4[0]) :) });
start.c | 22 | write( "Clearing your list of starting positions...\n" );
start.c | 23 | this_player()->reset_starts();
start.c | 31 | this_player()->query_starts();
start.c | 36 | this_player()->query_start_pos()->the_short() + ".\n");
start.c | 41 | write( "Your starting position is "+ starts[ 1 ] +".\n" );
start.c | 48 | write( sprintf( "% 5d: $I$7=%s\n", i, starts[ 2 * i + 1 ] ) );
start.c | 58 | this_player()->query_starts();
start.c | 62 | add_failed_mess("You only have one starting location.\n");
start.c | 67 | add_failed_mess("You have no starting locations to choose from at all.\n");
start.c | 72 | add_failed_mess( "You must choose a number from 1 to "+ z +".\n" );
start.c | 76 | write( "Your new starting position is "+ starts[ num + 1 ]  +".\n" );
start.c | 77 | this_player()->set_start_location(starts[num]);
start.c | 90 | list_starts() :) });
create.c | 6 | do_create( string name );
create.c | 9 | create();
create.c | 10 | add_group_sub_command( "create", "<string'name'>", (: do_create( $4[ 0 ] ) :) );
create.c | 19 | strip_colours(name);
create.c | 23 | this_player()->query_group() + ".\n" );
create.c | 27 | notify_fail( "Such a group already exists.\n" );
create.c | 31 | short_to_name( short );
create.c | 34 | notify_fail( "That is an invalid name for a group.\n" );
create.c | 37 | if( sizeof( name ) >
create.c | 49 | notify_fail( "You failed to create the group.\n" );
create.c | 52 | set_group_short( name, short );
create.c | 57 | add_member( name, this_player() );
create.c | 58 | set_leader( name, this_player() );
history.c | 5 | do_channel_history();
history.c | 8 | create();
history.c | 9 | add_group_sub_command( "history", "", (: do_channel_history() :) );
history.c | 10 | set_membership_required( "history", 0, 1 );
history.c | 16 | this_player()->display_group_history();
kick.c | 5 | do_kick_member( object member, string group );
kick.c | 8 | create();
kick.c | 10 | do_kick_member( $1[ 0 ], $6 ) :) );
kick.c | 11 | set_membership_required( "kick", 0, 1 );
kick.c | 12 | set_leadership_required( "kick", 0, 1 );
kick.c | 20 | this_player()->query_name() );
kick.c | 32 | the_short() + " from the group." }) );
kick.c | 34 | remove_member( group, member );
leave.c | 5 | do_leave( string group );
leave.c | 8 | create();
leave.c | 9 | add_group_sub_command( "leave", "", (: do_leave( $6 ) :) );
leave.c | 10 | set_membership_required( "leave", 0, 1 );
rename.c | 6 | do_rename_group( object member, string group );
rename.c | 9 | create();
rename.c | 11 | do_rename_group( $4[ 0 ], $6 ) :) );
rename.c | 12 | set_membership_required( "rename", 0, 1 );
rename.c | 13 | set_leadership_required( "rename", 0, 1 );
rename.c | 22 | notify_fail( new_group + " already exists.\n");
rename.c | 26 | short_to_name( short );
rename.c | 29 | notify_fail( "That is an invalid name for a group.\n" );
rename.c | 32 | if( sizeof( name ) >
rename.c | 44 | add_failed_mess("Not allowed to rename the group.\n");
leader.c | 5 | do_leader( object member, string group );
leader.c | 8 | create();
leader.c | 10 | do_leader( $1[ 0 ], $6 ) :) );
leader.c | 11 | set_membership_required( "leader", 0, 1 );
leader.c | 12 | set_leadership_required( "leader", 0, 1 );
leader.c | 19 | notify_fail( "Oh, good thinking, sparky.\n" );
leader.c | 27 | set_leader( group, member, this_player() );
list.c | 29 | do_list_groups(string person);
list.c | 32 | create();
list.c | 33 | add_group_sub_command( "list", "", (: do_list_groups(0) :) );
list.c | 35 | do_list_groups($4[0]) :) );
list.c | 48 | lower_case(GROUP->query_group_short( $2 )) ) :) );
list.c | 50 | sizeof( groups );
list.c | 53 | this_player()->expand_nickname(person);
list.c | 54 | find_player(person);
list.c | 56 | add_failed_mess("Sorry, " + person + " is not logged on.\n");
list.c | 63 | notify_fail( "There are currently no active groups.\n" );
list.c | 69 | this_player()->colour_event( GROUP_COLOUR_EVENT, "" );
list.c | 77 | leader_of( group );
list.c | 78 | members_of( group );
list.c | 89 | sizeof( members );
list.c | 147 | tell_object( this_player(), stats + message );
shields.c | 8 | do_shields( object *members, string group );
shields.c | 12 | create();
shields.c | 13 | add_group_sub_command( "shields", "", (: do_shields( 0, $6 ) :) );
shields.c | 15 | do_shields( $1, $6 ) :) );
shields.c | 16 | set_membership_required( "shields", 0, 1 );
shields.c | 25 | load_object( CMD_SHIELDS );
shields.c | 33 | members_of( group );
shields.c | 43 | sizeof( suggested_members ) >
shields.c | 48 | this_player()->colour_event( GROUP_COLOUR_EVENT, "" );
shields.c | 55 | construct_shield_message( member, 1 );
shields.c | 67 | if( sizeof( mess ) >
shields.c | 72 | tell_object( this_player(), mess );
assist.c | 5 | do_assist( object member, string group );
assist.c | 6 | do_unassist( object member, string group );
assist.c | 7 | do_assist_list(string group);
assist.c | 11 | create();
assist.c | 14 | do_assist( $1[ 0 ], $6 ) :) );
assist.c | 16 | do_unassist( $1[ 0 ], $6 ) :) );
assist.c | 18 | do_assist_list( $6 ) :) );
assist.c | 20 | set_membership_required( "assist", 0, 1 );
assist.c | 28 | this_player()->query_assisting();
assist.c | 37 | add_failed_mess("You are not assisting anyone.\n");
assist.c | 44 | this_player()->query_assisting();
assist.c | 47 | notify_fail( "Don't be stupid.\n" );
assist.c | 63 | if( sizeof( assisting ) >
assist.c | 64 | add_failed_mess( "You can not assist any more people.\n" );
assist.c | 71 | add_assister( this_player() );
assist.c | 79 | notify_fail( "Don't be stupid.\n" );
assist.c | 84 | remove_assister( this_player() );
assist.c | 90 | add_failed_mess("You are not assisting $I.\n", ({ member }));
report.c | 7 | do_report( string group );
report.c | 10 | create();
report.c | 11 | add_group_sub_command( "report", "", (: do_report( $6 ) :) );
report.c | 12 | set_membership_required( "report", 0, 1 );
report.c | 21 | generate_status_message( this_player() );
follow.c | 5 | do_group_follow( object *who, string group, int unfollow );
follow.c | 8 | create();
follow.c | 10 | do_group_follow( $1, $6, 0 ) :) );
follow.c | 12 | do_group_follow( $1, $6, 1 ) :) );
follow.c | 13 | set_membership_required( "follow", 0, 1 );
follow.c | 14 | set_membership_required( "unfollow", 0, 1 );
follow.c | 28 | this_player() });
follow.c | 32 | members_of( group ) );
follow.c | 40 | query_followers() ) == -1 :) );
follow.c | 51 | query_followers() ) != -1 :) );
follow.c | 60 | printf( "Barf.\n" );
follow.c | 63 | sizeof( what_not );
follow.c | 78 | tell_object( this_player(), fault_message );
join.c | 6 | do_join( object member );
join.c | 10 | create();
join.c | 12 | do_join( $1[ 0 ] ) :) );
join.c | 20 | query_group();
join.c | 37 | if( sizeof( GROUP->members_of( his_group ) ) >
join.c | 42 | this_player()->query_group();
status.c | 5 | do_group_status( string verbose, string group );
status.c | 6 | display_verbose_group_status( string group );
status.c | 7 | display_brief_group_status( string group );
status.c | 8 | calc_idle_string( object player );
status.c | 9 | generate_status_message( object player );
status.c | 10 | convert_percentage_to_colour( int percentage );
status.c | 11 | convert_percentage_to_hp_message( int percentage );
status.c | 12 | convert_percentage_to_gp_message( int percentage );
status.c | 16 | create();
status.c | 18 | do_group_status( $4[ 0 ], $6 ) :) );
status.c | 20 | do_group_status( "default", $6 ) :) );
status.c | 21 | set_membership_required( "status", 0, 1 );
status.c | 31 | this_player()->query_verbose( "score" );
status.c | 40 | notify_fail( "[ERROR]: Unknown return value from verbose information.\n" );
status.c | 45 | display_verbose_group_status( group );
status.c | 47 | display_brief_group_status( group );
status.c | 49 | notify_fail( "[ERROR]: This shouldn't happen.\n" );
status.c | 61 | this_player()->query_cols();
status.c | 62 | query_group_short( group );
status.c | 63 | this_player()->colour_event( GROUP_COLOUR_EVENT, "" );
status.c | 66 | sprintf( "   %'+'*|s\n", cols - 3, "|" + short + "|" );
status.c | 78 | ctime( GROUP->query_start_time( group ) ) + "." );
status.c | 82 | members_of( group );
status.c | 86 | sizeof( members ) >
status.c | 100 | query_pronoun();
status.c | 102 | calc_idle_string( member );
status.c | 113 | query_assisting();
status.c | 126 | tell_object( this_player(), message );
status.c | 140 | this_player()->colour_event( GROUP_COLOUR_EVENT, "" );
status.c | 142 | members_of( group ) - ({ this_player() });
status.c | 144 | this_player()->query_hp();
status.c | 145 | this_player()->query_gp();
status.c | 146 | this_player()->query_max_hp();
status.c | 147 | this_player()->query_max_gp();
status.c | 150 | capitalize( this_player()->query_cap_name() );
status.c | 162 | capitalize( member->query_cap_name() );
status.c | 163 | generate_status_message( member );
status.c | 165 | calc_idle_string( member );
status.c | 181 | tell_object( this_player(), message );
status.c | 195 | query_idle( player );
status.c | 201 | sprintf("%'0'2d", ( idle % 60 ));
status.c | 209 | query_hp() * 100 / player->query_max_hp();
status.c | 210 | query_gp() * 100 / player->query_max_gp();
invite.c | 5 | do_invite( object person, string group );
invite.c | 8 | create();
invite.c | 10 | do_invite( $1, $6 ) :) );
invite.c | 11 | set_membership_required( "invite", 0, 1 );
invite.c | 12 | set_leadership_required( "invite", 0, 1 );
invite.c | 20 | this_player() });
invite.c | 28 | if( sizeof( persons ) >
invite.c | 35 | if( sizeof( GROUP->invitations_of( group ) ) >
invite.c | 57 | add_invite( group, person );
invite.c | 60 | this_player()->query_cap_name() + ".  " );
base_group.c | 39 | sizeof( _commands );
base_group.c | 97 | map_delete( _commands, verb );
base_group.c | 103 | map_delete( _commands[ verb ], pattern );
base_group.c | 114 | keys( _commands );
base_group.c | 129 | keys( _commands[ verb ] );
base_group.c | 150 | values( _commands[ verb ] );
say.c | 5 | do_group_say( string message, string group );
say.c | 9 | create();
say.c | 11 | do_group_say( $4[ 0 ], $6 ) :) );
say.c | 12 | set_membership_required( "say", 0, 1 );
say.c | 18 | replace( message, ({ "%^", "" }) );
say.c | 21 | this_player()->query_cap_name() + ": " + message );
emote.c | 5 | do_group_emote( string message, string group );
emote.c | 8 | create();
emote.c | 10 | do_group_emote( $4[ 0 ], $6 ) :) );
emote.c | 11 | set_membership_required( "emote", 0, 1 );
emote.c | 16 | replace( message, ({ "%^", "", }) );
skills.c | 11 | create();
skills.c | 12 | set_command_name("skills");
skills.c | 70 | this_player()->query_role_playing();
skills.c | 72 | sizeof( args ) ;
skills.c | 79 | this_player()->query_skill( tp );
skills.c | 80 | query_only_show_if_non_zero( tp );
skills.c | 81 | query_no_bonus( tp );
skills.c | 82 | reset_eval_cost();
skills.c | 98 | level_to_string(sk) : bonus_to_string( this_player()->query_skill_bonus( tp ) ) ), "" );
skills.c | 103 | this_player()->query_skill_bonus( tp ) );
skills.c | 137 | write(this_player()->query_stupid_skills());
skills.c | 141 | this_player()->query_role_playing();
skills.c | 144 | query_skills();
skills.c | 146 | notify_fail( "Usage: "+ query_verb() +" <skill>\n" );
skills.c | 158 | rec_list( args, word, 1, 1, 0 ) );
skills.c | 159 | this_player()->more_string( result, "Skills" );
skills.c | 162 | query_skills();
skills.c | 171 | rec_list( args, "", ( member_array( "all", bits ) != -1 ), 1, 0 ) );
skills.c | 172 | this_player()->more_string( result, "Skills" );
skills.c | 178 | cmd($4[0]) :) });
rearrange.c | 36 | cmd();
rearrange.c | 39 | create();
rearrange.c | 40 | set_command_name("rearrange");
rearrange.c | 49 | this_player()->query_real_wis();
rearrange.c | 64 | this_player()->set_con( ME_CON );
rearrange.c | 65 | this_player()->set_dex( ME_DEX );
rearrange.c | 66 | this_player()->set_int( ME_INT );
rearrange.c | 67 | this_player()->set_wis( ME_WIS );
rearrange.c | 68 | this_player()->set_str( ME_STR );
rearrange.c | 69 | this_player()->remove_known_command( "rearrange" );
rearrange.c | 70 | map_delete(points, this_player());
rearrange.c | 81 | lower_case( word );
rearrange.c | 88 | input_to( "get_check" );
rearrange.c | 91 | write( "Saving.\n" );
rearrange.c | 92 | do_save();
rearrange.c | 96 | write( "Quitting.\n" );
rearrange.c | 97 | map_delete(points, this_player());
rearrange.c | 101 | write( "Resetting to previous arrangement.\n" );
rearrange.c | 102 | cmd();
rearrange.c | 110 | write( "Cannot add to stat.  Need to add to the pool first.\n" );
rearrange.c | 120 | write( "Cannot set constitution to less than 8.\n" );
rearrange.c | 122 | if ( ( ME_CON + num ) >
rearrange.c | 123 | write( "Cannot set constitution to more than 23.\n" );
rearrange.c | 131 | write( "Cannot set dexterity to less than 8.\n" );
rearrange.c | 133 | if ( ( ME_DEX + num ) >
rearrange.c | 134 | write( "Cannot set dexterity to more than 23.\n" );
rearrange.c | 142 | write( "Cannot set intelligence to less than 8.\n" );
rearrange.c | 144 | if ( ( ME_INT + num ) >
rearrange.c | 145 | write( "Cannot set intelligence to more than 23.\n" );
rearrange.c | 153 | write( "Cannot set strength to less than 8.\n" );
rearrange.c | 155 | if ( ( ME_STR + num ) >
rearrange.c | 156 | write( "Cannot set strength to more than 23.\n" );
rearrange.c | 164 | write( "Cannot set wisdom to less than 8.\n" );
rearrange.c | 166 | if ( ( ME_WIS + num ) >
rearrange.c | 167 | write( "Cannot set wisdom to more than 23.\n" );
rearrange.c | 176 | display_stats();
rearrange.c | 177 | write( "Enter [d|c|i|w|s|save|reset|quit] <num> : " );
rearrange.c | 178 | input_to( "get_stat_bit" );
rearrange.c | 183 | lower_case( word );
rearrange.c | 185 | write( "Going back to stat entering.\n" );
rearrange.c | 186 | get_stat_bit( "" );
rearrange.c | 188 | do_save();
rearrange.c | 189 | write( "Saving.\n" );
rearrange.c | 194 | write( "Rearranging stats.\n\n" );
rearrange.c | 195 | this_player() ] = ([ ]);
rearrange.c | 196 | this_player()->query_real_con();
rearrange.c | 197 | this_player()->query_real_dex();
rearrange.c | 198 | this_player()->query_real_int();
rearrange.c | 199 | this_player()->query_real_str();
rearrange.c | 200 | this_player()->query_real_wis();
rearrange.c | 228 | get_stat_bit( "" );
rearrange.c | 252 | clean_up();
rearrange.c | 258 | reset();
gp.c | 35 | create();
gp.c | 36 | set_nroff_file("gp");
gp.c | 37 | set_command_name("gp");
gp.c | 42 | this_player()->query_gp();
gp.c | 43 | this_player()->query_max_gp();
gp.c | 44 | write( "You have "+ gp +" ("+ max_gp +") guild points.\n" );
gp.c | 45 | sizeof( STD_SKILLS );
newb_ie.c | 22 | newbie_history(object who);
newb_ie.c | 25 | create();
newb_ie.c | 26 | set_nroff_file("newbie");
newb_ie.c | 27 | set_command_name("newbie");
newb_ie.c | 34 | newbie_history(this_player());
newb_ie.c | 44 | this_player()->remove_known_command( "newbie" );
newb_ie.c | 69 | fix_shorthand(words);
newb_ie.c | 70 | strip_colours (words);
newb_ie.c | 72 | write( "You newbie-tell: "+ words +"\n" );
newb_ie.c | 74 | user_event("newbie", this_player()->query_cap_name() + ": "+words);
newb_ie.c | 97 | query_chat_history("newbie");
newb_ie.c | 100 | tell_object(who, "Nothing has been said on the newbie channel.\n");
newb_ie.c | 106 | tell_object(who, result);
newb_ie.c | 114 | cmd("history") :) });
leatherwork.c | 68 | create();
leatherwork.c | 69 | set_nroff_file("leatherwork");
leatherwork.c | 70 | add_teach_skill(SKILL, 20, 10);
leatherwork.c | 71 | set_command_name("leatherwork");
leatherwork.c | 83 | environment( this_player() )->query_property( "place" );
leatherwork.c | 88 | if ( sizeof( things ) >
leatherwork.c | 89 | notify_fail( "You can only repair one thing at a time.\n" );
leatherwork.c | 102 | environment( this_player() )->query_discount( this_player() );
leatherwork.c | 106 | this_player()->query_value_in( place );
leatherwork.c | 108 | this_player()->query_value_in( "default" );
leatherwork.c | 109 | query_lowest_cond();
leatherwork.c | 112 | query_cond();
leatherwork.c | 113 | query_max_cond();
leatherwork.c | 123 | this_player()->query_skill_bonus( SKILLS[ 1 ] );
leatherwork.c | 141 | the_short() +".\n" );
leatherwork.c | 145 | money_value_string( cost, place ) +".\n" );
leatherwork.c | 148 | adjust_cond( diff );
leatherwork.c | 156 | the_short() ) +"%^RESET%^\n" );
leatherwork.c | 159 | if ( 100 * (int)things[ 0 ]->query_cond() >
leatherwork.c | 166 | money_value_string( cost, place ) +".\n" );
leatherwork.c | 168 | a_short() +".\n" );
leatherwork.c | 173 | this_player()->query_skill_bonus( SKILLS[ 0 ] );
leatherwork.c | 182 | the_short() +" when it falls to scraps!\n" );
leatherwork.c | 183 | break_me();
leatherwork.c | 201 | the_short() +".\n" );
leatherwork.c | 205 | money_value_string( cost, place ) +".\n" );
leatherwork.c | 208 | adjust_cond( diff );
leatherwork.c | 217 | the_short() ) +"%^RESET%^\n" );
leatherwork.c | 219 | if ( 100 * (int)things[ 0 ]->query_cond() >
leatherwork.c | 228 | money_value_string( cost, place ) +".\n" );
leatherwork.c | 230 | a_short() +".\n" );
leatherwork.c | 240 | add_known_command( "leatherwork" );
leatherwork.c | 246 | cmd($1, 1) :) });
fix.c | 29 | query_item_type( object ob );
fix.c | 30 | query_fix_cost( object player, object smithy, object item, int costing, int max, int cond, int low );
fix.c | 31 | test_fixed( object item );
fix.c | 35 | create();
fix.c | 36 | set_nroff_file("fix");
fix.c | 37 | set_command_name("fix");
fix.c | 38 | add_teach_skill(SKILL, 10, 10);
fix.c | 47 | environment(player);
fix.c | 65 | this_player();
fix.c | 66 | find_smithy(fixer);
fix.c | 74 | query_property( "place" );
fix.c | 79 | if ( sizeof( things ) >
fix.c | 80 | add_failed_mess( "You can only fix one thing at a time.\n" );
fix.c | 86 | query_item_type( item );
fix.c | 89 | add_failed_mess( "$I is neither armour nor a weapon.\n", things );
fix.c | 118 | query_skill_bonus( SKILLS[ type - 1 ] );
fix.c | 120 | query_value_in( place );
fix.c | 123 | query_value_in( "default" );
fix.c | 125 | query_lowest_cond();
fix.c | 130 | query_cond();
fix.c | 131 | query_max_cond();
fix.c | 137 | add_failed_mess( "$I is already in top condition.\n", things );
fix.c | 142 | query_fix_cost( this_player(), here, item, costing, max, cond, low );
fix.c | 144 | generate_cost(cost, 0);
fix.c | 188 | break_me();
fix.c | 193 | adjust_cond( diff );
fix.c | 200 | generate_cost(cost, 1);
fix.c | 208 | the_short() ) +"%^RESET%^\n" );
fix.c | 218 | money_value_string( cost, place ) +".\n" );
fix.c | 220 | add_succeeded_mess( ({ "", "$N fixes up $I.\n" }), things );
fix.c | 231 | return ( 100 * item->query_cond() > 98 * item->query_max_cond() );
fix.c | 247 | query_armour() ) | ( 2 * ob->query_scabbard() ) );
fix.c | 281 | query_max_cond();
fix.c | 284 | query_cond();
fix.c | 287 | query_lowest_cond();
fix.c | 292 | query_discount( player );
fix.c | 306 | roll_MdN( 4, cost / 4 );
fix.c | 321 | cmd($1, 1) :) });
duplicate.c | 30 | create();
duplicate.c | 31 | set_nroff_file("duplicate");
duplicate.c | 39 | sizeof( things );
duplicate.c | 41 | write( "You cannot duplicate "+  things[ i ]->the_short() +".\n" );
duplicate.c | 46 | the_short() +".\n" );
duplicate.c | 51 | this_player()->query_skill_bonus( TURNING );
duplicate.c | 60 | the_short() +".\n" );
duplicate.c | 63 | this_player()->adjust_gp( -COST );
duplicate.c | 66 | clone_object( "/obj/weapon" );
duplicate.c | 69 | query_static_auto_load();
duplicate.c | 71 | int_query_static_auto_load();
duplicate.c | 72 | init_static_arg( map );
duplicate.c | 74 | init_static_arg( map[ "::" ] );
duplicate.c | 75 | query_dynamic_auto_load();
duplicate.c | 76 | init_dynamic_arg( map[ "::" ] );
duplicate.c | 77 | set_enchant( 0 );
duplicate.c | 78 | set_value_info( "artifact", 0 );
duplicate.c | 80 | remove_property( "artifact form" );
duplicate.c | 81 | write( "You duplicate a form from "+ things[ i ]->the_short() +".\n" );
duplicate.c | 83 | move( environment( this_player() ) );
duplicate.c | 89 | return ({ "<indirect:object:me>", (: cmd($1) :) });
judge.c | 21 | create();
judge.c | 22 | set_nroff_file("judge");
judge.c | 23 | set_command_name("judge");
judge.c | 24 | add_teach_skill(SKILL, 50, 5);
judge.c | 34 | query_attack_data();
judge.c | 37 | return ({ 0, 0 });
judge.c | 53 | debug_printf("[%s - ave: %d max: %d]\n", weapon->short(), ave, max );
judge.c | 54 | return ({ ave, max });
judge.c | 61 | calc_rating( first, player );
judge.c | 62 | calc_rating( second, player );
judge.c | 96 | sqrt( (int)this_player()->query_skill_bonus( SKILL ) );
judge.c | 134 | the_short() +".\n" );
judge.c | 141 | calc_rating( weapon, player );
judge.c | 154 | the_short() ) +"%^RESET%^\n" );
judge.c | 165 | sqrt( player->query_skill_bonus( SKILL ) / 2 );
judge.c | 179 | file_name( weapon ), rating );
judge.c | 183 | the_short() + " exceeds weapon specifications.\n" );
judge.c | 188 | query_known_commands();
judge.c | 190 | member_array($1, attacks) != -1) :));
judge.c | 211 | debug_printf("attacks: %O", attacks);
judge.c | 216 | tell_object(player, res);
judge.c | 236 | add_failed_mess( "$C$$I is not a weapon.\n", ({ ob }) );
judge.c | 241 | add_failed_mess("You can't find $I.\n", ({ ob }));
judge.c | 278 | this_player()->adjust_gp( -cost );
judge.c | 280 | call_out( judge_func, 0, this_player(), first, second );
judge.c | 281 | add_succeeded_mess( "$N look$s closely at $I.\n", indirect_obs );
judge.c | 288 | cmd( $1[0][0], $1[1][0] ) :) });
vurdere.c | 12 | create();
vurdere.c | 13 | set_nroff_file("vurdere");
vurdere.c | 14 | set_command_name("vurdere");
vurdere.c | 15 | add_teach_skill(SKILL, 10, 2);
vurdere.c | 24 | query_armour_class();
vurdere.c | 32 | sizeof( ret );
vurdere.c | 57 | write( "Barf!\n" );
vurdere.c | 101 | this_player()->query_skill_bonus( SKILL );
vurdere.c | 103 | if(sizeof(from) + sizeof(to) >
vurdere.c | 104 | add_failed_mess("You cannot compare that many items at once.\n");
vurdere.c | 108 | sizeof(from)+sizeof(to)));
vurdere.c | 114 | this_player()->adjust_gp( -i);
vurdere.c | 118 | sizeof( to );
vurdere.c | 120 | calc_ac( to[ i ] );
vurdere.c | 124 | delete( to, i, 1 );
vurdere.c | 135 | sizeof( from );
vurdere.c | 141 | calc_ac( from[ i ] );
vurdere.c | 143 | sizeof( to_ac );
vurdere.c | 144 | sizeof( to_ac[ j + 1 ] );
vurdere.c | 168 | sizeof( rat );
vurdere.c | 173 | short() + " at " + rat[ j ] + ".\n" );
vurdere.c | 188 | query_multiple_short( to ) + ".\n" );
vurdere.c | 193 | query_multiple_short( uniq_array( ok + to ) ) + ".\n" );
vurdere.c | 206 | sizeof( from );
vurdere.c | 208 | calc_ac( from[ i ] );
vurdere.c | 209 | sizeof( rat );
vurdere.c | 234 | query_type() });
vurdere.c | 236 | query_type();
vurdere.c | 241 | query_zone_names(CLOTHING_HANDLER->query_equivilant_type(type));
vurdere.c | 243 | query_zone_names(type);
vurdere.c | 252 | query_multiple_short(zones, "poss") + ".\n");
vurdere.c | 258 | uniq_array( from );
vurdere.c | 265 | uniq_array( ok );
vurdere.c | 267 | query_multiple_short( ok ) + ".\n" );
vurdere.c | 276 | add_known_command( "vurdere" );
vurdere.c | 284 | cmd_normal($1) :) });
check.c | 12 | query_applicant_text();
check.c | 13 | pt_protected();
check.c | 16 | environment (this_player());
check.c | 33 | query_room_chats();
check.c | 34 | query_room_day_chats();
check.c | 35 | query_room_night_chats();
check.c | 37 | tell_object (this_player(), "There are no chats defined here.\n");
check.c | 58 | sizeof (chats);
check.c | 81 | sizeof (chats);
check.c | 100 | sizeof (chats);
check.c | 108 | query_day_long();
check.c | 109 | query_night_long();
check.c | 115 | query_item();
check.c | 121 | query_shrt();
check.c | 122 | query_lng();
check.c | 124 | sizeof (args);
check.c | 133 | functionp (args1[i]) ?  ("*" + evaluate (args1[i]) + "*") : args1[i]);
check.c | 136 | query_day_items();
check.c | 141 | sizeof (args) ;
check.c | 143 | evaluate (args[i+1]) + "*") : args[i+1]);
check.c | 147 | query_night_items();
check.c | 152 | sizeof (args) ;
check.c | 154 | evaluate (args[i+1]) + "*") : args[i+1]);
check.c | 161 | query_day_items();
check.c | 166 | sizeof (args) ;
check.c | 168 | evaluate (args[i+1]) + "*") : args[i+1]);
check.c | 174 | query_night_items();
check.c | 179 | sizeof (args) ;
check.c | 181 | evaluate (args[i+1]) + "*") : args[i+1]);
check.c | 194 | pt_protected();
check.c | 199 | write("$P$Items$P$" + ret);
check.c | 232 | explode( ctime( time() ), " " ) - ({ "" });
check.c | 236 | query_bugs( this_player()->query_name() );
check.c | 244 | get_age_uncached(this_player()->query_name());
check.c | 250 | time_string( age ) + " online.\n" );
check.c | 252 | tell_object( this_player(), quota_message( reports, age ) );
check.c | 277 | query_chat_string();
check.c | 281 | sizeof(chats);
check.c | 294 | query_achat_string();
check.c | 298 | sizeof(chats);
check.c | 311 | query_chats();
check.c | 320 | write("$P$Npc/Item chats$P$" + ret);
check.c | 341 | filter (users(), (: $1->query_playtester() :));
check.c | 344 | filter (obs, (: $1->query_pt_protection() :));
check.c | 347 | tell_object (this_player(), "No-one is currently using PT Protection.\n");
check.c | 354 | environment(ob)->query_short(), base_name (environment (ob)));
playtesting.c | 13 | format_array (string*);
playtesting.c | 14 | get_output (class project*, int);
playtesting.c | 46 | lower_case (bong);
playtesting.c | 47 | query_pt_projects (bong);
playtesting.c | 53 | sort_array (PLAYTESTER_HAND->query_playtesters(), 1);
playtesting.c | 55 | query_pt_projects (b);
playtesting.c | 58 | sizeof (blah) ? query_multiple_short (blah) : "nothing"));
playtesting.c | 62 | filter_by_query (query);
playtesting.c | 66 | lower_case (bong);
playtesting.c | 67 | filter_by_query (query);
playtesting.c | 71 | lower_case (bong);
playtesting.c | 72 | filter_by_query (query);
playtesting.c | 81 | get_project_file (bong);
playtesting.c | 104 | get_project_file (proj);
playtesting.c | 120 | add_playtester (proj, ({ bong }));
playtesting.c | 131 | remove_playtester (proj, ({ bong }));
playtesting.c | 146 | get_output (tmp, verbose);
playtesting.c | 151 | this_player()->do_edit(0, "end_of_report");
playtesting.c | 163 | this_player()->query_name() }), this_player()->query_name());
playtesting.c | 176 | this_player()->query_name() }), this_player()->query_name());
playtesting.c | 185 | this_player()->more_string (ret);
playtesting.c | 219 | query_multiple_short (map (tmp, (: capitalize ($1) :)));
playtesting.c | 232 | format_array (p->domains));
playtesting.c | 239 | find_project (p->id);
playtesting.c | 255 | query_number_rotations() >
playtesting.c | 262 | ctime(p->last_status_change));
playtesting.c | 275 | tell_object (this_player(), "No report given.  Aborting.\n");
playtesting.c | 282 | capitalize (this_player()->query_name()) + "Report" + i);
playtesting.c | 283 | while (j != -1);
playtesting.c | 287 | this_player()->query_name());
playtesting.c | 288 | adjust_quota( this_player()->query_name(), 1 );
playtesting.c | 289 | map_delete (_globals, this_player()->query_name());
playtesting.c | 290 | tell_object (this_player(), "Thank you for your report!\n");
ptapp_lications.c | 12 | query_applicant_text();
ptapp_lications.c | 22 | get_comment_list();
ptapp_lications.c | 25 | get_comments_on_applicant (name);
ptapp_lications.c | 32 | get_applicant_list();
ptapp_lications.c | 36 | tell_object (this_player(), ret);
jumps.c | 12 | log_attackers (object);
jumps.c | 24 | query_jump_points();
jumps.c | 26 | add_failed_mess("No current jumps.\n");
jumps.c | 32 | catch(load_object(start));
jumps.c | 33 | find_object( start );
jumps.c | 44 | catch(load_object(tmp));
jumps.c | 45 | find_object( tmp );
jumps.c | 59 | write("$P$Jump points$P$" + str);
jumps.c | 71 | file_name(environment(this_player()));
jumps.c | 72 | query_jump_destination(here);
jumps.c | 77 | catch(load_object(tmp));
jumps.c | 78 | find_object( tmp );
jumps.c | 85 | sprintf("$I$6=   %c: %s\n", pos + 'A', to_there->the_short());
jumps.c | 89 | write("$I$3=From here you can get to:\n" + str);
jumps.c | 92 | add_failed_mess("No destinations from here.\n");
jumps.c | 103 | if (strlen(id) >
jumps.c | 104 | add_failed_mess("The id to jump to must be a single letter.\n");
jumps.c | 107 | lower_case(id);
jumps.c | 110 | file_name(environment(this_player()));
jumps.c | 111 | query_jump_destination(here);
jumps.c | 113 | add_failed_mess("There are no jump points here.\n");
jumps.c | 119 | sprintf("%c", sizeof(dest) + 'A') + "'.\n");
jumps.c | 128 | catch(load_object(real_dest));
jumps.c | 129 | find_object( real_dest );
jumps.c | 137 | catch( log_attackers( this_player() ) );
jumps.c | 139 | write( "Moving you to "+ to_there->the_short() +"...\n" );
jumps.c | 145 | add_failed_mess("No destinations from here.\n");
jumps.c | 154 | file_name(environment(this_player()));
jumps.c | 156 | this_player()->query_property("pt return");
jumps.c | 168 | this_player()->query_start_pos();
jumps.c | 170 | write( "Moving you from the pt armoury.\n");
jumps.c | 176 | catch( log_attackers( this_player() ) );
jumps.c | 177 | write( "Moving you to the pt armoury.\n");
jumps.c | 179 | this_player()->add_property("pt return", env);
jumps.c | 193 | if ( sizeof( obs = o->query_attacker_list() ) >
jumps.c | 197 | environment( o );
jumps.c | 199 | filter( obs, (: environment( $1 ) == $(e) :) );
jumps.c | 201 | if ( sizeof( obs ) >
jumps.c | 223 | log_file( LOG_FILE, s );
jumps.c | 224 | unguarded( (: write_file( LOG_FILE, $(s) ) :) );
comment.c | 5 | load_object (PT_APPLICATION_HANDLER);
comment.c | 16 | this_player()->do_edit(0, "comment_editor", this_object(), "", name);
comment.c | 19 | do_comment (name, comment);
comment.c | 22 | tell_object (this_player(), "Thank you for your comments.\n");
comment.c | 25 | tell_object (this_player(), "No candidate of that name registered.\n");
comment.c | 41 | load_object (PT_APPLICATION_HANDLER);
comment.c | 48 | do_comment (name, comment);
comment.c | 51 | tell_object (this_player(), "Thank you for your comments.\n");
comment.c | 54 | tell_object (this_player(), "No candidate of that name registered.\n");
spell.c | 7 | tell_object(player, "Matches for " + word + ": None.\n");
spell.c | 14 | tell_object(player, "Error matching " + word + ": " + result);
spell.c | 20 | finish_lookup($(this_player()), $1, $2, $3) :));
spell.c | 21 | write ("You look up a word.\n");
spell.c | 26 | return ({ "<word>", (: cmd($4[0]) :) });
pterrors.c | 17 | tell_object(player, "Error looking up the bugs.\n" + summary + "\n");
pterrors.c | 22 | tell_object(player, "No bugs found.\n");
pterrors.c | 38 | tell_object(player, "$P$Bug List$P$" + bugs);
pterrors.c | 44 | base_name(environment(this_player()));
pterrors.c | 47 | add_failed_mess("Error attempting to query the bugs.\n");
pterrors.c | 56 | new(class error_query);
pterrors.c | 64 | this_player()->query_property("pterrors order");
pterrors.c | 67 | this_player()->add_property("pterrors query", query, 120);
pterrors.c | 69 | finish_lookup($(this_player()), $1, $2) :));
pterrors.c | 78 | this_player()->query_property("pterrors query");
pterrors.c | 80 | add_failed_mess("You have not done a bugs query recently enough.\n");
pterrors.c | 84 | this_player()->add_property("pterrors query", query, 120);
pterrors.c | 87 | add_failed_mess("Error attempting to query the bugs.\n");
pterrors.c | 95 | add_failed_mess("Error attempting to query the bugs.\n");
pterrors.c | 104 | this_player()->add_property("pterrors order", ERROR_ORDER_BY_DATE);
pterrors.c | 107 | this_player()->add_property("pterrors order", ERROR_ORDER_BY_FILENAME);
pterrors.c | 110 | this_player()->add_property("pterrors order", ERROR_ORDER_BY_DIRECTORY);
pterrors.c | 113 | write("Set your pterrors bug order to " + order + "\n");
pterrors.c | 119 | add_failed_mess("There is no player called " + name + ".\n");
pterrors.c | 123 | add_failed_mess("Error attempting to query the bugs.\n");
pterrors.c | 136 | tell_object(player, "Error looking up the bug.\n" + details + "\n");
pterrors.c | 141 | tell_object(player, "No bugs found with that id.\n");
pterrors.c | 162 | tell_object(player, "$P$Bug #" + error->summary->id + "$P$" + bugs);
pterrors.c | 169 | add_failed_mess("Unable to lookup the bug.\n");
pterrors.c | 173 | write("Looking up bug, please wait.\n");
pterrors.c | 185 | cmd_bug($4[0]) :) });
define.c | 10 | tell_object (player, "No definitions for " + word + ".\n");
define.c | 16 | tell_object(player, "Definitions for " + word + ":\n" + ret);
define.c | 19 | tell_object(player, "Error matching " + word + ": " + result);
define.c | 25 | finish_lookup($(this_player()), $1, $2, $3) :));
define.c | 26 | write ("You look up a word.\n");
define.c | 31 | return ({ "<word>", (: cmd($4[0]) :) });
mail.c | 18 | return (int)MAIL_TRACK->mail(str);
mail.c | 22 | destruct(this_object());
mail.c | 26 | dest_me();
mail.c | 30 | dest_me();
sa_y.c | 17 | build_message(arg, 0, "say");
sa_y.c | 18 | say_it(mess);
accept.c | 12 | is_in(object ob, object source);
accept.c | 25 | this_player()->query_respond_command("sell", person);
accept.c | 45 | this_player(), person);
accept.c | 59 | move(person);
accept.c | 90 | this_player()->the_short() +".\n");
accept.c | 94 | the_short() + ".\n");
accept.c | 96 | sizeof(payment[MONEY_PAY_RETURN]);
accept.c | 102 | sizeof(payment[MONEY_PAY_CHANGE]);
accept.c | 115 | this_player()->remove_respond_command("sell", person);
accept.c | 136 | environment(env);
accept.c | 140 | while (env);
accept.c | 145 | return ({ "offer from <indirect:living'person'>", (: do_buy($1) :) });
g_lance.c | 16 | check_exists(string file);
g_lance.c | 17 | room_glance(object person, object room, int dark);
g_lance.c | 18 | cmd_direction(string dir);
g_lance.c | 24 | environment(previous_object());
g_lance.c | 31 | previous_object()->check_dark((int)room->query_light());
g_lance.c | 35 | write("It's too dark to look at anything.\n");
g_lance.c | 38 | write("It's too bright to look at anything.\n");
g_lance.c | 50 | check_pre_stuff();
g_lance.c | 55 | environment(previous_object());
g_lance.c | 56 | previous_object()->check_dark((int)room->query_light());
g_lance.c | 58 | query_mirror_room();
g_lance.c | 64 | write("That's you that is.\n");
g_lance.c | 66 | a_short( dark );
g_lance.c | 68 | write(capitalize(tmp) + ".\n");
g_lance.c | 83 | check_pre_stuff();
g_lance.c | 89 | environment(previous_object());
g_lance.c | 90 | previous_object()->check_dark((int)room->query_light());
g_lance.c | 92 | query_mirror_room();
g_lance.c | 94 | EXPAND_EXIT(dir);
g_lance.c | 97 | add_failed_mess( "You do not think that the "+ dir +" is here.\n" );
g_lance.c | 101 | this_player()->find_abs(dir);
g_lance.c | 107 | set_destination( dir );
g_lance.c | 110 | write("You glance " + dir + " and see:\n");
g_lance.c | 111 | query_look(dir);
g_lance.c | 113 | write(ret+"\n");
g_lance.c | 117 | query_look_func(dir);
g_lance.c | 119 | call_other(func[0], func[1], 1);
g_lance.c | 123 | query_destination(dir);
g_lance.c | 128 | previous_object()->check_dark(dest->query_light());
g_lance.c | 131 | load_object(dest);
g_lance.c | 132 | this_player()->set_looked( find_object( dest ) );
g_lance.c | 135 | write("It's too dark to see that far.\n");
g_lance.c | 139 | query_contents(""));
g_lance.c | 143 | write("The "+dir+" door is closed.\n");
g_lance.c | 149 | add_failed_mess("You do not think that the "+dir+" is here.\n");
g_lance.c | 171 | query_property("creator sees");
g_lance.c | 173 | query_contents();
g_lance.c | 177 | query_mirror_room();
g_lance.c | 187 | query_contents();
g_lance.c | 190 | query_contents();
g_lance.c | 214 | room_glance(person, mirror, dark);
g_lance.c | 226 | check_pre_stuff();
g_lance.c | 231 | environment(previous_object());
g_lance.c | 233 | query_mirror_room();
g_lance.c | 236 | previous_object()->check_dark((int)room->query_light());
g_lance.c | 238 | room_glance(previous_object(), room, dark);
g_lance.c | 239 | write(str);
g_lance.c | 240 | this_player()->more_string(str, "glance");
g_lance.c | 248 | if (file_size(file+".c") >
kill.c | 15 | add_failed_mess( "You are in limbo...\n" );
kill.c | 19 | add_failed_mess( "You cannot attack anyone at the moment.\n" );
kill.c | 23 | this_player() });
kill.c | 25 | add_failed_mess( "You shouldn't beat yourself up so much.\n");
kill.c | 32 | this_player()->attack_ob( thing );
kill.c | 33 | attack_by(this_player());
kill.c | 38 | write( (string)thing->the_short() +" is net-dead.\n" );
kill.c | 44 | query_pronoun() +" is a guest.\n" );
kill.c | 65 | the_short() +".\n" );
kill.c | 72 | the_short() +".\n" );
kill.c | 76 | call_out( (: this_player()->attack_ob( $(thing) ) :), 0);
kill.c | 77 | call_out( (: $(thing)->attack_by(this_player()) :), 0);
kill.c | 85 | query_attacker_list();
kill.c | 92 | environment($1) != environment(this_player()) :));
kill.c | 95 | query_multiple_short(things) + ".\n", "" }), ({ }) );
kill.c | 98 | query_multiple_short(things) + " who " + (sizeof(things) > 1 ? "are" : "is") + " already hunting " + query_multiple_short(fighting) + ".\n", "" }), ({ }) );
kill.c | 102 | add_failed_mess("");
kill.c | 109 | return ({ "<indirect:living:here>", (: cmd($1) :) });
draw.c | 27 | new( class obj_match );
draw.c | 30 | debug_printf( "targeted = %d\nscabbards = %O\n", targeted, scabbards );
draw.c | 34 | query_scabbard() :) );
draw.c | 37 | add_failed_mess( "Can't find any scabbards in your inventory.\n" );
draw.c | 43 | this_player() );
draw.c | 59 | if( sizeof(scabbards) >
draw.c | 67 | add_failed_mess( scabbard->the_short() + " is not a scabbard.\n" );
draw.c | 78 | this_player() );
draw.c | 83 | the_short() + ".\n" );
draw.c | 97 | the_short() + ".\n" );
draw.c | 103 | the_short() + ".\n" );
draw.c | 108 | member_array(hand_str, this_player()->query_limbs());
draw.c | 110 | move( scabbard );
draw.c | 111 | add_failed_mess( "You cannot hold " + weapon->the_short() + ".\n" );
draw.c | 116 | this_player()->query_limbs();
draw.c | 117 | find_member(weapon, this_player()->query_holding());
draw.c | 118 | allocate(sizeof(what_in));
draw.c | 119 | sizeof(what_in);
draw.c | 121 | query_multiple_short(hands);
withdraw.c | 18 | remove_respond_command("sell", this_player());
withdraw.c | 25 | add_succeeded_mess("$N withdraw$s $p offer of sale to $I.\n", removed);
withdraw.c | 37 | withdraw_offer($1) :) });
th_row.c | 28 | the_shrot();
th_row.c | 47 | add_property( "targetable", 300 );
th_row.c | 65 | valid_target( object target, object thrower, object item );
th_row.c | 71 | if ( sizeof( indirect_obs[ 0 ] ) >
th_row.c | 72 | add_failed_mess( "You can only throw one item at a time!\n" );
th_row.c | 78 | if ( sizeof( indirect_obs[ 1 ] ) >
th_row.c | 93 | add_failed_mess( "You cannot throw $I at yourself!\n", ({ item }) );
th_row.c | 99 | the_short() + "?\n", ({ item }) );
th_row.c | 112 | the_short() + ".\n", ({ item }) );
th_row.c | 120 | query_skill_bonus( DSKILL );
th_row.c | 124 | query_skill_bonus( PSKILL );
th_row.c | 128 | query_property( "targetable" );
th_row.c | 132 | query_weight() / ( this_player()->query_str() / 2 );
th_row.c | 138 | this_player()->adjust_gp(-COMMAND_GP_COST);
th_row.c | 152 | the_short() + " and hit!\n" );
th_row.c | 156 | this_player() );
th_row.c | 162 | this_player()->query_skill_bonus( ASKILL ) / 3 );
th_row.c | 164 | query_ac( "blunt", damage );
th_row.c | 166 | attack_by( this_player() );
th_row.c | 167 | adjust_hp( -damage, this_player() );
th_row.c | 168 | this_player()->attack_ob( target );
th_row.c | 170 | event( item, "thrown", this_player(), target );
th_row.c | 171 | this_player()->adjust_time_left(-(ROUND_TIME*2));
th_row.c | 174 | thrown_at( this_player(), 1, item );
th_row.c | 177 | move( environment( target ) );
th_row.c | 184 | the_short() + " but miss.\n" );
th_row.c | 188 | the_short() + " but misses.\n", this_player() );
th_row.c | 190 | move( environment( target ) );
th_row.c | 193 | this_player()->attack_ob( target );
th_row.c | 194 | attack_by( this_player() );
th_row.c | 197 | thrown_at( this_player(), 0 );
th_row.c | 229 | cmd($1) :) });
offer.c | 21 | query_all_places();
offer.c | 24 | value_from_string(amt, place);
offer.c | 40 | if (sizeof(gumboot) >
offer.c | 49 | this_player()->query_ignoring(sell_to);
offer.c | 59 | this_player()->query_ignored_by(sell_to);
offer.c | 71 | value_from_string(amt, place);
offer.c | 74 | add_failed_mess("The value of the item was set too high.\n");
offer.c | 78 | if (sizeof(sell_to) >
offer.c | 85 | add_failed_mess("You cannot sell $I to yourself.\n", to_sell);
offer.c | 95 | query_amount();
offer.c | 125 | new(class offer_sale);
offer.c | 127 | this_player();
offer.c | 131 | add_respond_command("sell", this_player(), wombat);
offer.c | 134 | this_player()->query_name() + "\n");
offer.c | 138 | query_cap_name() + "\n");
offer.c | 153 | offer_sale($1[0], $1[1], $4[2], 1) :) });
echoto.c | 17 | my_mess(string fish, string erk);
echoto.c | 23 | notify_fail(NOT_ALLOWED);
echoto.c | 26 | notify_fail("Syntax : echoto <player> <text>\n");
echoto.c | 29 | notify_fail("Syntax : echoto <player> <text>\n");
echoto.c | 31 | lower_case(who);
echoto.c | 32 | expand_nickname(who);
echoto.c | 34 | notify_fail(NO_POWER);
echoto.c | 36 | find_player(who);
echoto.c | 38 | notify_fail("Can't find "+who+".\n");
echoto.c | 41 | drunk_speech(what);
echoto.c | 45 | my_mess("You echo to " + who + ": ", what);
echoto.c | 46 | event(ob, "player_echo_to", what + "\n", TP);
echoto.c | 53 | fix_string(erk));
swim.c | 17 | create();
swim.c | 18 | setup_position("swim", "around", SWIMMING);
drag.c | 13 | add_failed_mess( "You're dead.  You can't drag anything.\n" );
drag.c | 16 | add_failed_mess( "You're already dragging something.\n" );
drag.c | 18 | if( sizeof( indirect_obs ) >
drag.c | 19 | add_failed_mess( "You can only drag one thing at a time.\n" );
drag.c | 33 | query_owner();
drag.c | 34 | explode( lower_case( owner ),  " " );
drag.c | 35 | filter( words, (: PLAYER_HANDLER->test_user($1) :) );
drag.c | 37 | find_player( lower_case( word ) );
drag.c | 43 | the_short() +".\n" );
drag.c | 50 | the_short() +".\n" );
drag.c | 52 | write( "You get hold of " + (string)indirect_obs[ 0 ]->the_short() + ".\n" );
drag.c | 54 | a_short() + ".\n" );
drag.c | 58 | this_player()->query_loc_weight() >
drag.c | 61 | query_objective() + ".\n" );
drag.c | 64 | query_objective() + ".\n" );
drag.c | 66 | this_player()->set_dragging( indirect_obs[ 0 ] );
drag.c | 75 | time()}), 1800 );
drag.c | 76 | this_player()->reset_dragging();
drag.c | 78 | write( "You let go of " + (string)indirect_obs[ 0 ]->the_short() + ".\n" );
drag.c | 81 | the_short() + ".\n" );
drag.c | 91 | cmd( $1, implode($4[1..], " ") ) :) });
unh_old.c | 22 | query_holding();
unh_old.c | 41 | query_multiple_short(zip, "the") + ".\n");
unh_old.c | 42 | notify_fail(s);
unh_old.c | 44 | tell_object(TP, "You put down "+(s = query_multiple_short(ok))+".\n");
unh_old.c | 45 | tell_room(environment(TP), TP->one_short()+" puts down "+s+".\n", TP);
unh_old.c | 46 | force_burden_recalculate();
unh_old.c | 51 | return ({ "<indirect:object:me>", (: cmd($1) :) });
whi_sper.c | 14 | add_failed_mess("Whispering to yourself?  Neat trick.\n");
whi_sper.c | 18 | build_message(last, others, "whisper");
whi_sper.c | 20 | say_it_to(mess, others, 1, "whisper");
whi_sper.c | 25 | cmd($1, $4[1]) :) });
dry.c | 20 | the_short() + ".\n");
dry.c | 24 | environment(with)->a_short() + ".\n");
dry.c | 31 | query_weight();
dry.c | 32 | effects_matching("object.wet");
dry.c | 34 | arg_of(enums[0]);
dry.c | 42 | effects_matching("body.wetness");
dry.c | 44 | arg_of(enums[0]);
dry.c | 49 | notify_fail("You don't need drying.\n");
dry.c | 58 | random(10);
dry.c | 60 | add_effect("/std/effects/other/wetness", -pwet);
dry.c | 61 | add_effect("/std/effects/object/wet", pwet);
dry.c | 64 | write("You dry yourself with " + with->the_short() + ".\n");
dry.c | 67 | poss_short() + ".\n");
dry.c | 70 | the_short() + ".\n");
dry.c | 72 | poss_short() + ".\n");
dry.c | 75 | poss_short() + ".\n", thing);
dry.c | 85 | cmd(({ ({ this_player() }), $1 })) :) });
emoteall.c | 30 | my_mess(string fish, string erk);
emoteall.c | 34 | notify_fail(NOT_ALLOWED);
emoteall.c | 38 | notify_fail("Syntax : emoteall <string>\n");
emoteall.c | 43 | notify_fail(NO_POWER);
emoteall.c | 46 | replace(str, BEEP, "");
emoteall.c | 48 | drunk_speech(str);
emoteall.c | 53 | my_mess("You emoteall : ", TP->query_cap_name()+" " + str);
emoteall.c | 54 | comm_event(users(), "player_emote_all", "%^BOLD%^%^RED%^" + TP->query_cap_name() + " " + str + "\n");
emoteall.c | 61 | fix_string(erk));
flip.c | 29 | if ( sizeof( things ) >
flip.c | 30 | add_failed_mess("You can only flip one thing at once.\n");
flip.c | 33 | query_money_array();
flip.c | 35 | add_failed_mess( "You must have a coin to flip.\n" );
flip.c | 38 | if ( ( sizeof( stuff ) >
flip.c | 39 | add_failed_mess( "You can only flip one coin at a time.\n" );
flip.c | 43 | query_details_for( stuff[ 0 ] );
flip.c | 51 | write( "You flip "+ (string)things[ 0 ]->the_short() +".\n" );
flip.c | 53 | a_short() +".\n" );
flip.c | 56 | ambient_enchantment( things[ 0 ] ) );
flip.c | 57 | environment( this_player() );
flip.c | 61 | move( place );
flip.c | 66 | move( "/room/rubbish" );
flip.c | 72 | move( place );
flip.c | 76 | random( 2 ) ] +" up.\n" );
flip.c | 81 | return ({ "<indirect:object:me>", (: cmd( $1 ) :) });
give.c | 59 | if ( member_array( ob, succ ) >
give.c | 86 | record_object("give", TP, ob);
give.c | 98 | query_weight();
give.c | 105 | query_pocket_mess();
give.c | 109 | query_multiple_short(ret);
give.c | 124 | if ((max = tot*100/max) >
give.c | 151 | add_failed_mess(failmess);
give.c | 153 | add_failed_mess("You have $I set to be kept.\n", keep);
give.c | 161 | cmd($1, $3) :) });
lsay.c | 23 | build_message("@loudly " + arg, 0, "say");
lsay.c | 24 | say_it(mess);
lsay.c | 28 | environment(TP)->query_co_ord();
lsay.c | 37 | return ({ "<string'message'>", (: cmd($4[0]) :) });
climb.c | 20 | write( "You try to climb, but you can't seem to get anywhere.\n" );
climb.c | 21 | say( (string)TP->one_short() + " tries to climb, but fails.\n" );
climb.c | 29 | query_possessive() +" grip.\n" );
climb.c | 30 | fall_down( TP );
climb.c | 47 | environment( TP );
climb.c | 49 | add_failed_mess( "You cannot climb anything: you're in limbo!\n" );
climb.c | 53 | query_move( words );
climb.c | 57 | add_failed_mess( "You cannot climb \""+ words +"\" from here.\n" );
climb.c | 59 | add_failed_mess( "There is nothing to climb here.\n" );
climb.c | 78 | copy( move[2] );
climb.c | 81 | copy( move[2] );
climb.c | 91 | query_ghost_action( place );
climb.c | 95 | move_with_look( move[ 1 ], move_descs[ 2 ], move_descs[ 1 ] );
climb.c | 96 | add_succeeded_mess("");
climb.c | 102 | add_failed_mess( "How can you climb anything?  You're dead!\n");
climb.c | 113 | add_succeeded_mess( "" );
climb.c | 119 | write( ghost_action[ 1 ][ 0 ] + "\n" );
climb.c | 122 | add_succeeded_mess( "" );
climb.c | 128 | move_with_look( move[ 1 ], move_descs[ 2 ], move_descs[ 1 ] );
climb.c | 129 | add_succeeded_mess("");
climb.c | 139 | if( arrayp( move[0] ) && sizeof( move[0] ) >
climb.c | 149 | fall_off( place, difficulty );
climb.c | 150 | add_succeeded_mess("");
climb.c | 154 | adjust_gp( -difficulty / 2 );
climb.c | 158 | call_out( "advance_notice", random( 60 ), TP );
climb.c | 160 | write( move_descs[ 0 ] );
climb.c | 167 | random( difficulty );
climb.c | 169 | fall_off( place, difficulty );
climb.c | 170 | add_succeeded_mess("");
climb.c | 173 | adjust_gp( -difficulty );
climb.c | 177 | write( "%^YELLOW%^You manage not to fall off!%^RESET%^\n" );
climb.c | 185 | fall_off( place, difficulty );
climb.c | 188 | add_succeeded_mess("");
climb.c | 206 | random( 6 ) ] +"%^RESET%^\n" );
climb.c | 210 | return ({ "<string'direction'>", (: cmd($4[0]) :) });
debate.c | 33 | notify_fail("You are already engaged in a debate.\n");
debate.c | 39 | map_delete(_debaters, this_player());
debate.c | 62 | map_delete(_debaters, target);
debate.c | 63 | this_player()->add_effect(EFFECT, target);
debate.c | 64 | add_effect(EFFECT, this_player());
debate.c | 74 | query_philosophy_type(topic);
debate.c | 75 | query_philosophy_bonus(topic);
debate.c | 76 | query_philosophy_needed(topic);
debate.c | 85 | this_player()->adjust_gp(-(bonus * DEBATE_MULT));
debate.c | 88 | tell_object(_debaters[i - 1], "Your challenge is ignored.\n");
debate.c | 99 | this_player()] = ({ target, topic });
debate.c | 100 | call_out("answer_challenge", 5, this_player(), target, topic);
debate.c | 133 | query_philosophy_type(topic);
debate.c | 134 | query_skill_bonus(type + ".points");
debate.c | 155 | map_delete(_debaters, target);
debate.c | 156 | this_player()->add_effect(EFFECT, target);
debate.c | 157 | add_effect(EFFECT, this_player());
debate.c | 176 | cmd($1, $2, $3, $4, $5) :) });
l_ook.c | 22 | weather_long(string str);
l_ook.c | 23 | check_exists(string file);
l_ook.c | 24 | look_around();
l_ook.c | 25 | cmd_string(string arg);
l_ook.c | 38 | tell_object(player, "No errors for this room.\n");
l_ook.c | 45 | strsrch(summ->details->report, "\n");
l_ook.c | 61 | tell_object(player, str);
l_ook.c | 71 | new(class error_query);
l_ook.c | 72 | file_name(environment(player));
l_ook.c | 78 | do_query_multiple_bug_details(query, (: finish_bug_summary, player :));
l_ook.c | 88 | environment(TP);
l_ook.c | 96 | add_failed_mess("You are blind and cannot see.\n");
l_ook.c | 101 | check_dark((int) room->query_light());
l_ook.c | 105 | query_co_ord();
l_ook.c | 113 | query_property("base path")  + "]" + ret + "%^RESET%^\n");
l_ook.c | 115 | write("%^CYAN%^" + file_name(room) + ret + "%^RESET%^\n");
l_ook.c | 121 | long_test(0, dark);
l_ook.c | 123 | write("$P$Look$P$" + ret);
l_ook.c | 125 | write("$P$Look$P$" + (string) room->long(0, dark));
l_ook.c | 128 | write("$P$Look$P$" + (string) room->long(0, dark));
l_ook.c | 133 | long(0, 0));
l_ook.c | 138 | show_error_summary(this_player(), TP->query_property(PLAYER_SHOW_ERRORS_PROP));
l_ook.c | 168 | add_failed_mess("You are blind and cannot see.\n");
l_ook.c | 181 | environment(thing);
l_ook.c | 183 | environment(env);
l_ook.c | 188 | pretty_short() + ".\n");
l_ook.c | 189 | query_long(arg, dark);
l_ook.c | 191 | replace_long_dollars(player, other);
l_ook.c | 200 | query_long_details(arg, dark, player);
l_ook.c | 205 | long(arg, dark);
l_ook.c | 219 | environment(TP);
l_ook.c | 226 | add_failed_mess("You are blind and cannot see.\n");
l_ook.c | 238 | check_dark((int) room->query_light());
l_ook.c | 242 | add_failed_mess("It is way too bright to see anything at all.\n");
l_ook.c | 246 | add_failed_mess("It is way too dark to see anything at all.\n");
l_ook.c | 252 | query_look_thing(thing, this_player(), dark, "looks", arg);
l_ook.c | 256 | write("$P$Look$P$" + ret);
l_ook.c | 261 | cmd_string(arg);
l_ook.c | 263 | this_player()->find_abs(arg);
l_ook.c | 265 | cmd_string(arg);
l_ook.c | 280 | environment(TP);
l_ook.c | 283 | add_failed_mess("You are blind and cannot see.\n");
l_ook.c | 295 | write((string) "/obj/handlers/new_soul"->help_list());
l_ook.c | 302 | write(weather_long(arg));
l_ook.c | 305 | write(look_around());
l_ook.c | 312 | check_dark((int) room->query_light());
l_ook.c | 316 | add_failed_mess("It is way too bright to see anything at all.\n");
l_ook.c | 320 | add_failed_mess("It is way too dark to see anything at all.\n");
l_ook.c | 329 | query_mirror_room();
l_ook.c | 333 | this_player()->find_abs(arg);
l_ook.c | 341 | set_destination(arg);
l_ook.c | 342 | query_destination(arg);
l_ook.c | 343 | query_look(arg);
l_ook.c | 345 | write(ret + "\n");
l_ook.c | 350 | query_look_func(arg);
l_ook.c | 351 | if (pointerp(func) && sizeof(func) >
l_ook.c | 366 | query_door_control(arg);
l_ook.c | 370 | force_load();
l_ook.c | 371 | check_dark((int) other->query_light());
l_ook.c | 372 | long(0, dark);
l_ook.c | 373 | this_player()->set_looked(find_object(other));
l_ook.c | 374 | write(ret);
l_ook.c | 383 | notify_fail("You do not think that the "+orig_arg+" is here.\n");
l_ook.c | 400 | if (file_size(file + ".c") >
l_ook.c | 414 | environment(TP);
l_ook.c | 415 | query_property("location");
l_ook.c | 421 | query_weather_handler() ;
l_ook.c | 473 | add_failed_mess("You are blind and cannot see.\n");
l_ook.c | 477 | environment(this_player());
l_ook.c | 479 | query_rooms();
l_ook.c | 484 | say((string) this_player()->one_short() + " $V$0=looks,look$V$ around.\n");
l_ook.c | 500 | query_static_preposition();
l_ook.c | 503 | sprintf("%O", prep);
l_ook.c | 529 | sizeof(locations);
l_ook.c | 532 | delete(locations, j, 1);
l_ook.c | 538 | sizeof(locations);
l_ook.c | 556 | cmd_string("around") :) });
eq_uip.c | 39 | query_holding();
eq_uip.c | 42 | query_no_limbs();
eq_uip.c | 60 | notify_fail( "You have no equippable items.\n" );
eq_uip.c | 62 | query_multiple_short( equipped );
eq_uip.c | 63 | say( (string)TP->one_short() +" equips "+ stuff +".\n" );
eq_uip.c | 64 | write( "You equip "+ stuff +".\n" );
eq_uip.c | 69 | return ({ "", (: cmd() :) });
sp_eak.c | 46 | query_skills();
sp_eak.c | 48 | query_languages();
sp_eak.c | 49 | sizeof(langs);
sp_eak.c | 52 | query_language_spoken_skill(langs[i])) >
sp_eak.c | 54 | query_language_written_skill(langs[i])) >
sp_eak.c | 62 | cap_words(TP->query_default_language()) + ".\n");
sp_eak.c | 71 | lower_case(which);
sp_eak.c | 72 | query_language_spoken_skill(which);
sp_eak.c | 75 | notify_fail("You cannot speak that language.\n");
sp_eak.c | 80 | notify_fail("You don't know that language.\n");
sp_eak.c | 83 | add_failed_mess("You are already speaking " + cap_words(which) + ".\n");
sp_eak.c | 88 | notify_fail("Argh... something weird happened.\n");
sp_eak.c | 91 | write("Now using " + cap_words(which) + " for speaking and writing.\n");
sp_eak.c | 100 | query_languages();
sp_eak.c | 106 | implode(languages + map(languages, (: cap_words :)), "|");
sp_eak.c | 109 | cmd(0) :) });
sp_eak.c | 111 | cmd(implode($4, " ")) :), "", (: cmd(0) :) });
facing.c | 11 | find_direction( object who );
facing.c | 12 | check_reference_point( object where );
facing.c | 30 | find_direction( this_player() ) + ".\n" );
facing.c | 34 | this_player() });
facing.c | 37 | find_direction( $1 ) :) );
facing.c | 47 | if (sizeof(oblist) >
facing.c | 48 | query_multiple_short(oblist) + " are facing " + dir });
facing.c | 51 | one_short() + " is facing " + dir });
facing.c | 54 | write(query_multiple_short(show) + ".\n");
facing.c | 65 | filter( ABS_FACING, (: $2 == $(facing) :) );
facing.c | 77 | query_relative( $1 ) :) );
facing.c | 79 | member_array( 0, relatives ) >
facing.c | 86 | cmd($1) :) });
lie.c | 14 | create();
lie.c | 15 | setup_position("lie", "down", LYING);
sit.c | 17 | create();
sit.c | 19 | setup_position("sit", "up", SITTING);
sit.c | 21 | setup_position("sit", "down", SITTING);
get.c | 23 | match_objects_in_environments(match_str, dob);
get.c | 25 | add_failed_mess(match_objects_failed_mess(result));
get.c | 54 | query_max_weight();
get.c | 56 | if (indir && sizeof(obs) >
get.c | 67 | environment(TP), environment(TP)->query_mirror_room() });
get.c | 69 | environment(TP) });
get.c | 89 | find_matching_obs(match_str, dob);
get.c | 95 | if (total_num + sizeof(obs) >
get.c | 104 | sizeof(obs);
get.c | 108 | environment(ob);
get.c | 114 | move(dob);
get.c | 132 | query_amount_types();
get.c | 143 | query_amount();
get.c | 145 | if (ob->query_amount() >
get.c | 149 | query_name();
get.c | 151 | if (i = strsrch(match_str, "of") >
get.c | 159 | short() });
get.c | 160 | query_parse_id(({ handful, match_str }));
get.c | 181 | query_weight();
get.c | 213 | query_weight();
get.c | 232 | sizeof(ret);
get.c | 237 | this_player()->query_succ_mess_dir();
get.c | 240 | query_multiple_short(bing);
get.c | 253 | inside_a_short(dob) + ".\n");
get.c | 260 | add_failed_mess("You cannot get $I.\n", fail);
get.c | 273 | add_failed_mess("There is no " + match_str + " in $I.\n", dest);
get.c | 276 | add_failed_mess("You cannot get anything from $I.\n", fail_dest);
get.c | 279 | add_failed_mess("You cannot get $I.\n", obs);
get.c | 300 | cmd($1, $2, $3, $4) :) });
em_ote.c | 46 | notify_fail("You are in limbo, you cannot emote.\n");
em_ote.c | 51 | set_quest( (string)this_player()->query_name(), "emote" );
em_ote.c | 52 | this_player()->remove_property( "emote" );
em_ote.c | 56 | notify_fail( NOT_ALLOWED );
em_ote.c | 61 | notify_fail(NOT_ALLOWED);
em_ote.c | 65 | notify_fail( NO_POWER );
em_ote.c | 70 | notify_fail( "Syntax: emote <text>\n" );
em_ote.c | 73 | strip_colours(words);
em_ote.c | 87 | this_player()->adjust_time_left( -5 );
protect.c | 28 | add_failed_mess("You cannot protect yourself!\n");
protect.c | 33 | add_failed_mess("You cannot provide much protection as a ghost.\n" );
protect.c | 37 | sizeof( things );
protect.c | 40 | delete( things, i, 1 );
protect.c | 46 | add_failed_mess("You cannot protect $I.\n", things);
protect.c | 51 | write( "You cannot protect "+ query_multiple_short( things ) +".\n" );
protect.c | 58 | sizeof( protectees );
protect.c | 72 | this_player()->query_protectors();
protect.c | 77 | write("You are not being protected by anyone.\n");
protect.c | 89 | query_multiple_short(protect) + ".\n");
protect.c | 91 | write("You are not protecting anyone in this room.\n");
protect.c | 100 | show_protectors() :) });
watch.c | 22 | add_failed_mess( "How can you watch anything?  You're blind.\n" );
watch.c | 26 | add_failed_mess( "Dead people don't watch. It is rude!\n");
watch.c | 39 | this_player()->adjust_gp( -COST );
watch.c | 41 | this_player()->query_skill_bonus( "other.perception" ) / 2 );
watch.c | 48 | this_player()->effects_matching( "mind.alertness" );
watch.c | 52 | this_player()->delete_effect( id );
watch.c | 56 | add_succeeded_mess( ({ "You are not currently watching!\n", "" }) );
watch.c | 64 | cmd() :) });
put.c | 45 | if (sizeof(indir[0]) >
put.c | 60 | inside_the_short(pobj) + ".\n");
put.c | 72 | if (member_array(ob, succ) >
put.c | 101 | query_weight();
put.c | 105 | record_object("dropped", TP, ob);
put.c | 112 | query_multiple_short(ret);
put.c | 114 | inside_the_short(pobj) + ".\n", ret);
put.c | 118 | inside_the_short(pobj) + ".\n", fail);
put.c | 122 | if (sizeof(succ) >
put.c | 133 | sizeof(succ) >
put.c | 143 | cmd($1, $3, $4) :) });
defend.c | 18 | add_failed_mess("You cannot provide much defense as a ghost.\n" );
defend.c | 23 | add_failed_mess("You cannot defend yourself!\n");
defend.c | 29 | query_multiple_short(things) + ".\n");
defend.c | 34 | sizeof( things );
defend.c | 37 | delete( things, i, 1 );
defend.c | 43 | add_failed_mess("You cannot defend $I.\n", things);
defend.c | 48 | write( "You cannot defend "+ query_multiple_short( things ) +".\n" );
defend.c | 61 | this_player()->query_defenders();
defend.c | 66 | write("You are not being defended by anyone.\n");
defend.c | 78 | query_multiple_short(defend) + ".\n");
defend.c | 80 | write("You are not defending anyone in this room.\n");
defend.c | 89 | show_defenders() :) });
sh_out.c | 22 | query_no_quit();
sh_out.c | 23 | query_shout_word_type(string str);
sh_out.c | 24 | my_mess(string fish, string erk);
sh_out.c | 38 | notify_fail("Syntax : shout <text>\n");
sh_out.c | 41 | notify_fail( "You appear to be in limbo...\n" );
sh_out.c | 44 | notify_fail("You don't have any lungs, how can you shout?\n");
sh_out.c | 50 | query_current_language();
sh_out.c | 53 | notify_fail(capitalize(cur_lang)+" is not a spoken language.\n");
sh_out.c | 77 | strlen(str) / 5) + 1);
sh_out.c | 82 | notify_fail(NO_POWER);
sh_out.c | 84 | adjust_max_sp(- (cost / 5));
sh_out.c | 88 | convert_message( str );
sh_out.c | 89 | fit_message( str );
sh_out.c | 92 | query_shout_word_type(str);
sh_out.c | 100 | fix_shorthand(str);
sh_out.c | 103 | drunk_speech( str );
sh_out.c | 104 | remove_hide_invis("hiding");
sh_out.c | 107 | if (cur_lang != "common") s1 += " in " + capitalize(cur_lang);
sh_out.c | 108 | my_mess("You shout" + s1 + ": ", str);
sh_out.c | 110 | if (cur_lang != "common") s1 += " in " + capitalize(cur_lang);
sh_out.c | 111 | my_mess("You " + s1 + ": ", str);
sh_out.c | 114 | lower_case(str);
sh_out.c | 126 | replace(str, ({ "8", "", " eight", "", " ", "" }));
sh_out.c | 138 | write("Oops...\n");
sh_out.c | 139 | call_out( "summon_bel_shamharoth", 10, TP );
sh_out.c | 142 | query_guild_ob();
sh_out.c | 145 | write("Oops...\n");
sh_out.c | 146 | call_out( "summon_bel_shamharoth", 10, TP );
sh_out.c | 154 | load_object(SHORT + "short20")->lag_for_shout();
sh_out.c | 157 | catch(lag = LAG_ROOM->lag_for_shout());
sh_out.c | 159 | query_property("lag shout time");
sh_out.c | 162 | add_property("lag shout time", time(), 300);
sh_out.c | 170 | mud_name() + "", 0);
sh_out.c | 175 | init_command("wedgie " + TP->query_name(), 0);
sh_out.c | 181 | call_out( "summon_bel_shamharoth", 10, TP, 1);
sh_out.c | 197 | this_player()->query_str() ) ) / tim );
sh_out.c | 209 | query_str() ) ) / 3);
sh_out.c | 212 | add_property("recently shouted", 1, 2);
sh_out.c | 234 | fix_string(erk));
sh_out.c | 244 | adjust_tmp_con(-2);
sh_out.c | 247 | adjust_tmp_int(-2);
sh_out.c | 250 | adjust_tmp_wis(-2);
sh_out.c | 253 | adjust_tmp_dex(-2);
sh_out.c | 255 | environment(who);
sh_out.c | 291 | quit();
und_efend.c | 22 | add_failed_mess("You cannot undefend yourself!\n");
und_efend.c | 42 | add_succeeded_mess("$N stop$s defending $I.\n", defendees);
und_efend.c | 50 | return ({ "<indirect:living>", (: cmd($1) :) });
crawl.c | 21 | is_in_water( object room );
crawl.c | 37 | this_player()->stop_crawling();
crawl.c | 64 | this_player()->add_effect( EFFECTPATH + "crawling" );
unf_ollow.c | 45 | query_multiple_short(obs - ({ TP }) + ({ "yourself" })) + ".\n");
unf_ollow.c | 49 | this_player()->query_hide_invis();
unf_ollow.c | 55 | write("You stop following "+(s=query_multiple_short(ok))+" unseen.\n");
unf_ollow.c | 57 | write("You stop following "+(s=query_multiple_short(ok))+".\n");
unf_ollow.c | 58 | say(TP->the_short()+" stops following "+s+".\n", ok);
unf_ollow.c | 69 | return ({ "<indirect:living>", (: cmd($1) :) });
remove.c | 98 | this_player()->query_wearing();
remove.c | 99 | filter(things, (: member_array($1, $(succeeded)) == -1 :));
remove.c | 108 | sizeof(succeeded);
remove.c | 163 | short(), blocked->short());
remove.c | 169 | if (member_array(ob, is_blocking[total_blocking[i]]) >
remove.c | 186 | short());
remove.c | 200 | short());
remove.c | 204 | copy(blocked);
remove.c | 210 | if (member_array(total_blocking[i], blocking) >
remove.c | 229 | short());
remove.c | 238 | can_wear_or_remove(blocker, this_player());
remove.c | 240 | log_file("REMOVE_FAILURE", "things == %O\n", things);
remove.c | 241 | log_file("REMOVE_FAILURE", "reason == %s\n", tmp1);
remove.c | 242 | log_file("REMOVE_FAILURE", "blocker == %s (%s, %O)\n", blocker->short(), file_name(blocker), blocker);
remove.c | 243 | log_file("REMOVE_FAILURE", "total_blocking == \n");
remove.c | 244 | sizeof(total_blocking);
remove.c | 245 | log_file("REMOVE_FAILURE", "   %O (%s)\n", total_blocking[i], total_blocking[i]->short());
remove.c | 247 | log_file("REMOVE_FAILURE", "is_blocking == \n");
remove.c | 249 | log_file("REMOVE_FAILURE", "   %O (%s): \n", ob, ob->short());
remove.c | 250 | sizeof(blocked);
remove.c | 251 | log_file("REMOVE_FAILURE", "      %O (%s)\n", blocked[i], blocked[i]->short());
remove.c | 254 | log_file("REMOVE_FAILURE", "removed == %O\n", removed);
remove.c | 264 | one_short() + ".\n");
remove.c | 287 | if (sizeof(succeeded) >
remove.c | 289 | query_multiple_short(succeeded, "the") ;
remove.c | 290 | if (sizeof(removed) >
remove.c | 291 | query_multiple_short(removed, "the");
remove.c | 292 | write("You remove " + tmp1 + " so you can remove " + tmp2 + ".\n");
remove.c | 294 | this_player()->query_pronoun() + " can remove " + tmp2 + ".\n");
remove.c | 297 | this_player()->query_hide_invis();
remove.c | 302 | this_player()->query_light();
remove.c | 303 | environment( this_player() )->query_light();
remove.c | 307 | query_complete_weight();
remove.c | 311 | query_skill_bonus( SKILL ) );
remove.c | 321 | random(3) ] + "%^RESET%^\n" );
remove.c | 350 | if (sizeof(succeeded) >
remove.c | 352 | this_player()->force_burden_recalculate();
remove.c | 353 | query_multiple_short(succeeded, "the");
remove.c | 354 | write("You wear " + tmp1 + ".\n");
remove.c | 355 | say(this_player()->the_short() + " wears " + tmp1 + ".\n");
remove.c | 358 | if (sizeof(failed_rewear) >
remove.c | 360 | query_multiple_short(failed_rewear, "the") + " back on.\n");
remove.c | 363 | if (sizeof(failed) >
remove.c | 373 | return ({ "<indirect:object:me>", (: cmd($1) :) });
stand.c | 14 | create();
stand.c | 15 | setup_position("stand", "up", STANDING);
fo_llow.c | 31 | add_failed_mess("You are already following $I.\n", already);
fo_llow.c | 47 | this_player()->query_hide_invis();
fo_llow.c | 53 | write("You follow " + ( s = query_multiple_short( ok ) ) + " unseen.\n" );
fo_llow.c | 55 | write("You follow "+(s=query_multiple_short(ok))+".\n");
fo_llow.c | 56 | say(TP->one_short(1)+" follows "+s+".\n", ok);
fo_llow.c | 66 | return ({ "<indirect:living>", (: cmd($1) :) });
sayto.c | 18 | filter(obs, (: $1 && $1 != this_player() :));
sayto.c | 20 | notify_fail("Be serious.\n");
sayto.c | 23 | build_message(str, obs, "say");
sayto.c | 24 | say_it_to(mess, obs, 0, "person_say");
sayto.c | 28 | return ({ "<indirect:living> <string>", (: cmd($1, $4[1]) :) });
learn.c | 15 | cmd(string str, object *obs);
learn.c | 41 | explode(implode(explode(skill, " "), "."), ".");
learn.c | 42 | query_skill(bits);
learn.c | 51 | query_respond_command(TEACH_COMMAND_TYPE, ob);
learn.c | 53 | teach_command(ob, this_player());
learn.c | 57 | add_respond_command(TEACH_COMMAND_TYPE, ob, bits);
learn.c | 59 | remove_respond_command(TEACH_COMMAND_TYPE, ob);
learn.c | 61 | event(environment(this_player()), "teach", "command", ob, this_player());
learn.c | 66 | add_succeeded_mess("$N learn$s " + cmd + " from $I.\n", ok);
learn.c | 73 | add_failed_mess("The skill '" + cmd + "' is invalid.\n");
learn.c | 80 | query_respond_command(TEACH_SKILL_TYPE, ob);
learn.c | 96 | remove_respond_command(TEACH_SKILL_TYPE, womble->teacher);
learn.c | 109 | remove_respond_command(TEACH_SKILL_TYPE, womble->teacher);
learn.c | 141 | adjust_time_left(-time);
learn.c | 148 | adjust_time_left(-time);
learn.c | 149 | set_interupt_command("stop_teaching_skills", TP, womble);
learn.c | 167 | query_multiple_short(moved)+".\n");
learn.c | 171 | query_multiple_short(no_xp)+".\n");
learn.c | 175 | query_multiple_short(diff_lvl)+" offered to teach you.\n");
learn.c | 225 | query_interupt_command();
learn.c | 228 | interupt_command(us);
learn.c | 232 | adjust_time_left(-((int)womble->taught->query_time_left()));
learn.c | 233 | set_interupt_command(0);
learn.c | 255 | write("Something has gone wrong. :(\n");
learn.c | 260 | adjust_xp(womble->xp / 10);
learn.c | 262 | adjust_xp(-womble->xp);
learn.c | 296 | remove_respond_command(TEACH_SKILL_TYPE, womble->teacher);
learn.c | 301 | cmd($4[0], $1) :) });
show.c | 21 | do_show_object( object shower, object item, object owner, object target, int no_mess );
show.c | 26 | this_player()->query_short()+" "+str+"%^RESET%^\n");
show.c | 27 | notify_fail(str);
show.c | 35 | do_show_object( this_player(), item, this_player(), target, 0 );
show.c | 64 | tell_creator( shower, "%O\n%O\n", item, target );
show.c | 67 | add_failed_mess( "Why not just look at it?\n");
show.c | 81 | add_failed_mess( target->the_short() + " ignores you.\n" );
show.c | 103 | the_short() + " for inspection.\n" );
show.c | 107 | query_name() + "\" to view it.\n" );
show.c | 125 | add_failed_mess( "You cannot show stuff to yourself.\n");
show.c | 130 | this_object() );
show.c | 133 | add_failed_mess( "No one has offered to show you anything.\n");
show.c | 156 | query_possessive() + " item.\n");
show.c | 160 | this_player()->remove_respond_command( "show offer", this_object() );
show.c | 165 | the_short() + ".\n", ({ this_player(), target }) );
show.c | 170 | this_player()->the_short() + ".\n" );
show.c | 178 | long();
show.c | 182 | query_readable_message(this_player());
show.c | 185 | write("$P$Show$P$" + message);
show.c | 202 | accept_show( $1[ 0 ], 0 ) :) });
wi_eld.c | 14 | cmd(str);
meditate.c | 14 | create();
meditate.c | 15 | setup_position("meditate", "", MEDITATING);
teach.c | 21 | command_teach( object *obs, string comm, object teacher );
teach.c | 22 | spell_teach(object *obs, string spell, object teacher);
teach.c | 23 | teach_skill(object *obs, string str, object teacher);
teach.c | 24 | cmd_int(string str, object *obs, object teacher);
teach.c | 25 | check_ignoring(object ignorer, object ignoree);
teach.c | 28 | query_property(TEACH_COMMAND_AUTO_PROPERTY);
teach.c | 37 | add_failed_mess("You cannot teach while passed out.\n");
teach.c | 48 | add_failed_mess("You have teaching earmuffed.\n");
teach.c | 53 | filter(obs, (: userp($1) && !interactive($1) :));
teach.c | 63 | filter(obs, (: $1->check_earmuffs("teach") :));
teach.c | 70 | add_failed_mess("$I have their earmuffs on.\n", ear);
teach.c | 77 | filter(obs, (: check_ignoring($1, this_player()) :));
teach.c | 87 | filter(obs, (: $1->query_property(PASSED_OUT_PROP) :));
teach.c | 97 | filter(obs, (: $1->query_fighting() :));
teach.c | 107 | filter(obs, (: !$1->query_creator() :) );
teach.c | 109 | add_failed_mess("None of those people are allowed to teach you.\n");
teach.c | 113 | filter(obs, (: query_auto_teaching($1, this_player()) :));
teach.c | 119 | filter(obs, (: $1->query_time_left() > 0 :));
teach.c | 127 | cmd_int(str, ({ this_player() }), ob);
teach.c | 132 | cmd_int(str, obs, this_player());
teach.c | 143 | filter(obs,  (: !$1->query_property("dead") :));
teach.c | 145 | add_failed_mess("You must teach someone, preferably living.\n");
teach.c | 149 | if (sizeof(obs) >
teach.c | 150 | add_failed_mess("You can only teach one person at a time.\n");
teach.c | 168 | query_property("ignoring")) != -1);
teach.c | 185 | new(class command, verb : comm);
teach.c | 193 | add_failed_mess("You do not know the command " + comm + ".\n");
teach.c | 203 | add_failed_mess("You cannot teach yourself a command.\n");
teach.c | 208 | add_failed_mess("You have teaching earmuffed.\n");
teach.c | 210 | add_failed_mess(teacher->the_short(1) + " has teaching earmuffed.\n");
teach.c | 223 | filter(obs, (: check_ignoring($(teacher), $1) :));
teach.c | 267 | if (sizeof(no_go) >
teach.c | 282 | if (sizeof(ear_muffed) >
teach.c | 286 | if (sizeof(him_low) >
teach.c | 294 | sizeof(know_already) >
teach.c | 300 | add_failed_mess("You are ignoring $I.\n", ignoring);
teach.c | 307 | add_failed_mess("You are being ignored by $I.\n", ignored);
teach.c | 313 | query_multiple_short(succ) + ".\n");
teach.c | 317 | query_multiple_short(no_go, "the", 0, 1 ) + ".\n");
teach.c | 319 | if (sizeof(ear_muffed) >
teach.c | 324 | if (sizeof(me_low) >
teach.c | 326 | query_multiple_short(me_low, "the", 0, 1) + ".\n");
teach.c | 328 | if (sizeof(him_low) >
teach.c | 336 | query_multiple_short(succ) + ".\n");
teach.c | 339 | query_multiple_short(succ) + ".\n", succ + ({ teacher }));
teach.c | 341 | sizeof(succ);
teach.c | 347 | query_name() + "\" to learn the command.\n");
teach.c | 348 | query_respond_command(TEACH_COMMAND_TYPE, teacher);
teach.c | 354 | add_respond_command(TEACH_COMMAND_TYPE, teacher, tmp_stuff);
teach.c | 356 | add_succeeded_mess("");
teach.c | 371 | query_spells();
teach.c | 384 | add_failed_mess("You have teaching earmuffed.\n");
teach.c | 391 | filter(obs, (: check_ignoring($(teacher), $1) :));
teach.c | 434 | if (sizeof(no_go) >
teach.c | 438 | if (sizeof(me_low) >
teach.c | 444 | if (sizeof(him_low) >
teach.c | 449 | add_failed_mess("You are ignoring $I.\n", ignoring);
teach.c | 451 | if (sizeof(ignored) >
teach.c | 452 | add_failed_mess("You are being ignored by $I.\n", ignored);
teach.c | 454 | if (sizeof(ignored) >
teach.c | 455 | add_failed_mess("$I has teaching earmuffed.\n", ignored);
teach.c | 463 | if (sizeof(no_go) >
teach.c | 465 | query_multiple_short(no_go, "the", 0, 1) + ".\n");
teach.c | 467 | if (sizeof(me_low) >
teach.c | 472 | if (sizeof(him_low) >
teach.c | 477 | if (sizeof(ignoring) >
teach.c | 482 | if (sizeof(ignored) >
teach.c | 484 | query_multiple_short(ignored, "the", 0, 1) + ".\n");
teach.c | 543 | add_failed_mess("You cannot teach more than 50 levels at a time.\n");
teach.c | 547 | add_failed_mess("You have teaching earmuffed.\n");
teach.c | 552 | explode(implode(explode(skill, " "), "."), ".") - ({ "" });
teach.c | 557 | add_failed_mess("The skill " + implode(bits, ".") + " is invalid.\n");
teach.c | 561 | explode(skill, ".");
teach.c | 566 | query_skill_bonus(skill, 1);
teach.c | 576 | filter(obs, (: check_ignoring($(teacher), $1) :));
teach.c | 613 | query_skill(skill);
teach.c | 616 | if ((int)ob->calc_bonus(lvl + num, skill, 1) >
teach.c | 635 | if (sizeof(bits) >
teach.c | 636 | query_skill(implode(bits[0 .. sizeof(bits) - 2], "."));
teach.c | 641 | query_skill_depth(bits);
teach.c | 654 | query_skill_bonus(sk, 1);
teach.c | 655 | query_skill(sk);
teach.c | 665 | to_int(cost * (lvl+j) * exp((lvl + j) / 500.0) * k);
teach.c | 735 | new(class teaching_skill);
teach.c | 737 | query_skill(skill);
teach.c | 740 | environment(this_player());
teach.c | 741 | add_respond_command(TEACH_SKILL_TYPE, teacher, frog);
teach.c | 750 | if (sizeof(only_leaf) >
teach.c | 756 | if (sizeof(ear_muffed) >
teach.c | 762 | if (sizeof(cannot_teach) >
teach.c | 768 | if (sizeof(too_low) >
teach.c | 770 | sizeof(too_low) >
teach.c | 778 | if (sizeof(too_high) >
teach.c | 780 | sizeof(too_high) >
teach.c | 788 | if (sizeof(ignoring) >
teach.c | 789 | add_failed_mess("You are ignoring $I.\n", ignoring);
teach.c | 792 | if (sizeof(ignored) >
teach.c | 793 | add_failed_mess("You are being ignored by $I.\n", ignored);
teach.c | 797 | sizeof(ok);
teach.c | 805 | cmd($4[0], $1, this_player()) :)});
sheathe.c | 17 | if( sizeof(weapons) >
sheathe.c | 18 | add_failed_mess( "You can only sheathe one thing at a time.\n" );
sheathe.c | 25 | add_failed_mess( weapon->the_short() + " is already sheathed.\n" );
sheathe.c | 30 | add_failed_mess( weapon->the_short() + " is not in your inventory.\n" );
sheathe.c | 35 | if ( sizeof(scabbards) >
sheathe.c | 54 | test_type_ok( $(weapon) ) :) );
sheathe.c | 60 | filter( scabbards, (: $1->test_add( $(weapon), 0, 1 ) :) );
crouch.c | 14 | create();
crouch.c | 15 | setup_position("crouch", "down", CROUCHING);
lo_se.c | 20 | this_player()->query_followers();
lo_se.c | 23 | write("You are not being followed by anyone.\n");
lo_se.c | 35 | query_multiple_short(obs)+".\n");
lo_se.c | 42 | write("You lose "+(s=query_multiple_short(ok))+".\n");
lo_se.c | 43 | say(this_player()->the_short()+" loses "+s+".\n", ok);
lo_se.c | 46 | query_multiple_short((ok + ({ "you" })) - ({ ob }))+".\n");
lo_se.c | 52 | cmd($1, 0) :) });
ho_ld.c | 81 | query_limbs();
ho_ld.c | 82 | sizeof(limbs);
ho_ld.c | 83 | query_free_limbs();
ho_ld.c | 86 | filter(obs, (: $1->query_holder() :));
ho_ld.c | 88 | if (sizeof(already) >
ho_ld.c | 89 | this_player()->query_holding();
ho_ld.c | 91 | find_member(ob, using);
ho_ld.c | 111 | query_multiple_short(obs) + ".\n");
ho_ld.c | 114 | if (sizeof(already) >
ho_ld.c | 117 | query_multiple_short(obs)));
ho_ld.c | 118 | map(already, (: $1->query_my_limb() :));
ho_ld.c | 128 | member_array(str, limbs);
ho_ld.c | 132 | notify_fail("You seem to have a singular lack of limbs.\n");
ho_ld.c | 135 | query_multiple_short(limbs) + ".\n");
ho_ld.c | 138 | query_holding();
ho_ld.c | 142 | set_unhold(using[pos]);
ho_ld.c | 148 | sizeof(used) && i < sizeof(limbs);
ho_ld.c | 157 | set_unhold(obs[0]);
ho_ld.c | 163 | sizeof(used) && i < sizeof(limbs);
ho_ld.c | 172 | set_hold(obs[0], pos, 1);
ho_ld.c | 176 | sizeof(used) && i < sizeof(limbs);
ho_ld.c | 187 | query_no_limbs();
ho_ld.c | 191 | add_failed_mess("You do not have enough limbs to hold $I.\n", obs);
ho_ld.c | 214 | query_holding();
ho_ld.c | 215 | sizeof(using);
ho_ld.c | 218 | set_unhold(weapon);
ho_ld.c | 220 | sizeof(used) && used[i] < sizeof(limbs);
ho_ld.c | 225 | query_free_limbs();
ho_ld.c | 240 | query_holding();
ho_ld.c | 252 | set_hold(ob, pos, ob->query_no_limbs());
ho_ld.c | 256 | sizeof(used) && i < sizeof(limbs);
ho_ld.c | 261 | query_free_limbs();
ho_ld.c | 271 | query_multiple_short(uhands) + ".\n");
ho_ld.c | 274 | query_multiple_short(uhands) + ".\n");
ho_ld.c | 279 | query_multiple_short(uhands) + ".\n");
ho_ld.c | 282 | query_multiple_short(uhands) + ".\n");
ho_ld.c | 288 | query_multiple_short(hhands) + ".\n");
ho_ld.c | 296 | query_multiple_short(fails) + ".\n");
ho_ld.c | 309 | cmd($1, implode($4[1..], " ")) :) });
unp_rotect.c | 41 | add_failed_mess("You cannot unprotect yourself!\n");
unp_rotect.c | 61 | add_succeeded_mess("$N stop$s protecting $I.\n", protectees);
unp_rotect.c | 69 | return ({ "<indirect:living>", (: cmd($1) :) });
tactics.c | 31 | this_player()->query_tactics();
tactics.c | 33 | write("Your combat options are:\n\n" );
tactics.c | 34 | write("   Attitude - "+ tactics->attitude +".\n" );
tactics.c | 35 | write("   Response - "+ tactics->response +".\n" );
tactics.c | 37 | write("   Mercy - "+ (tactics->mercy?tactics->mercy:"none") + ".\n");
tactics.c | 39 | write("   Focus - "+ (tactics->focus_zone?tactics->focus_zone:"none") + ".\n" );
tactics.c | 41 | write("   Target distance - "+ (tactics->ideal_distance?tactics->ideal_distance:"none") + ".\n" );
tactics.c | 59 | new(class tactics);
tactics.c | 60 | this_player()->query_tactics();
tactics.c | 69 | write("Your attitude is already " + word + ".\n");
tactics.c | 72 | write("Your attitude is now " + word + ".\n");
tactics.c | 73 | this_player()->set_tactics(my_tactics);
tactics.c | 85 | this_player()->query_tactics();
tactics.c | 92 | write("Your response is already " + word + ".\n");
tactics.c | 95 | write("Your response is now " + word + ".\n");
tactics.c | 96 | this_player()->set_tactics(my_tactics);
tactics.c | 100 | notify_fail( "Syntax: tactics response dodge|neutral|parry\n");
tactics.c | 107 | this_player()->query_tactics();
tactics.c | 114 | this_player()->set_tactics(my_tactics);
tactics.c | 128 | this_player()->set_tactics(my_tactics);
tactics.c | 141 | this_player()->query_tactics();
tactics.c | 156 | this_player()->set_tactics(my_tactics);
tactics.c | 161 | hand(s)]\n" );
tactics.c | 168 | this_player()->query_tactics();
tactics.c | 182 | write("You are already focussing on your opponent's "+ word + ".\n");
tactics.c | 185 | write("You will now focus on your opponent's "+ word + ".\n");
tactics.c | 186 | this_player()->set_tactics(my_tactics);
tactics.c | 195 | write("You will no longer focus on a specific target area.\n");
tactics.c | 196 | this_player()->set_tactics(my_tactics);
tactics.c | 208 | this_player()->query_tactics();
tactics.c | 215 | write("You are already set for " + word + " range.\n");
tactics.c | 219 | write("You will now aim for "+ word + " range combat.\n");
tactics.c | 220 | this_player()->set_tactics(my_tactics);
tactics.c | 225 | write("You are not currently aiming for any specific combat distance.\n");
tactics.c | 228 | write("You will no longer aim for a specific combat distance.\n");
tactics.c | 229 | this_player()->set_tactics(my_tactics);
tactics.c | 242 | this_player()->query_tactics();
tactics.c | 248 | write("Your mercy is already " + word + ".\n");
tactics.c | 251 | write("Your mercy is now "+ word +".\n" );
tactics.c | 252 | this_player()->set_tactics(my_tactics);
tactics.c | 256 | notify_fail("Syntax: tactics mercy always|ask|never\n");
wea_r.c | 48 | add_to_failed(mapping failed, string word, object thing);
wea_r.c | 67 | query_clothing_depth($1->query_type()) :) );
wea_r.c | 71 | add_to_failed(failed, "not carrying", ob);
wea_r.c | 75 | add_to_failed( failed, "cannot wear", ob);
wea_r.c | 79 | add_to_failed(failed, "already wearing", ob);
wea_r.c | 83 | add_to_failed(failed, "cannot wear", ob);
wea_r.c | 87 | query_items_blocking(ob, this_player());
wea_r.c | 89 | printf("blocking == %O\n", blocking);
wea_r.c | 94 | remove_armour(tmp);
wea_r.c | 97 | can_wear_or_remove(ob, this_player());
wea_r.c | 99 | printf("ob == %s, result == %s\n", ob->short(), result);
wea_r.c | 101 | add_to_failed(failed, result, ob);
wea_r.c | 104 | wear_armour(ob, 0);
wea_r.c | 106 | add_to_failed(failed, result, ob);
wea_r.c | 113 | wear_armour(tmp);
wea_r.c | 118 | keys(failed);
wea_r.c | 119 | sizeof(reasons);
wea_r.c | 120 | query_multiple_short(failed[reasons[i]], "the");
wea_r.c | 148 | notify_fail(result);
wea_r.c | 150 | query_multiple_short(okay);
wea_r.c | 164 | this_player()->query_hide_invis();
wea_r.c | 169 | this_player()->query_light();
wea_r.c | 170 | environment( this_player() )->query_light();
wea_r.c | 175 | sizeof( total_blocking );
wea_r.c | 178 | query_complete_weight();
wea_r.c | 182 | query_skill_bonus( SKILL ) );
wea_r.c | 192 | random(3) ] + "%^RESET%^\n" );
wea_r.c | 222 | return ({ "<indirect:object:me>", (: cmd($1) :) });
concentrate.c | 6 | this_player()->query_concentrating();
concentrate.c | 12 | the_short() + ".\n");
concentrate.c | 18 | if ( sizeof( things ) >
concentrate.c | 19 | notify_fail( "You can only concentrate on one thing at once.\n" );
concentrate.c | 22 | add_failed_mess("You are not fighting anyone.\n");
concentrate.c | 26 | notify_fail( "It would be silly to concentrate on yourself.\n" );
concentrate.c | 36 | add_succeeded_mess(({"Unable to concentrate on $I.\n", "" }), things);
concentrate.c | 43 | concentrate_list() :) });
kneel.c | 14 | create();
kneel.c | 15 | setup_position("kneel", "down", KNEELING);
wring.c | 11 | id("towel")  ||  $1->query_property("dryer") :));
wring.c | 17 | effects_matching("object.wet");
wring.c | 19 | arg_of(enums[0]);
wring.c | 23 | one_short();
wring.c | 27 | this_player()->query_str()) / 4));
wring.c | 29 | one_short();
wring.c | 49 | write(str);
wring.c | 55 | return ({ "[out] <indirect:object:me'towel'>", (: cmd($1) :) });
drop.c | 73 | if (sizeof(obs) >
drop.c | 85 | environment(ob);
drop.c | 108 | record_object("dropped", TP, ob);
drop.c | 116 | query_multiple_short(bing);
drop.c | 118 | inside_the_short(env);
drop.c | 127 | add_succeeded_mess( drop_mess, bing );
drop.c | 130 | add_succeeded_mess("$N $V $I" + env_sh + ".\n", bing);
drop.c | 140 | add_failed_mess("You are keeping $I.\n", keep);
drop.c | 143 | add_failed_mess("You cannot drop $I.\n", fail);
drop.c | 155 | sizeof(fail)+sizeof(ret);
drop.c | 158 | notify_fail("Cannot drop "+str+".\n");
drop.c | 166 | return ({ "<indirect:object:me>", (: cmd($1, $3) :) });
echo.c | 17 | my_mess(string fish, string erk);
echo.c | 21 | notify_fail(NOT_ALLOWED);
echo.c | 24 | notify_fail("Syntax : echo <text>\n");
echo.c | 27 | notify_fail(NO_POWER);
echo.c | 30 | drunk_speech(str);
echo.c | 34 | my_mess("You echo: ", str);
echo.c | 35 | comm_event(environment(TP), "player_echo", str + "\n");
echo.c | 42 | fix_string(erk));
r_ead.c | 66 | create_text( object thing, int label );
r_ead.c | 79 | this_player()->check_dark(environment(this_player())->query_light());
r_ead.c | 81 | add_failed_mess("It is too dark to read $I.\n", things);
r_ead.c | 85 | add_failed_mess("It is too bright to read $I.\n", things);
r_ead.c | 93 | add_failed_mess("You cannot read $I.\n", ({ thing }));
r_ead.c | 97 | query_readable_message(this_player());
r_ead.c | 98 | query_read_short();
r_ead.c | 105 | query_objective();
r_ead.c | 109 | query_read_short();
r_ead.c | 124 | replace( read, "$name$", (string)thing->a_short() ) });
r_ead.c | 135 | replace( read, "$name$", (string)thing->a_short() ) });
r_ead.c | 140 | add_failed_mess(reader);
r_ead.c | 143 | write( "$P$Read$P$"+ reader );
r_ead.c | 145 | this_player()->query_hide_invis();
r_ead.c | 147 | add_succeeded_mess(({ "", "$N read$s $I.\n" }), others);
r_ead.c | 153 | return ({ "<indirect:object>", (: cmd($1) :) });
surr_ender.c | 21 | this_player()->query_surrender();
surr_ender.c | 24 | write(sprintf("You will surrender at %d%% of your max hps.\n", surr));
surr_ender.c | 26 | write("You will not surrender.\n");
surr_ender.c | 30 | notify_fail("Your surrender must be between 0 and 100.\n");
surr_ender.c | 31 | this_player()->set_surrender(val);
surr_ender.c | 32 | write(sprintf("Surrender set to %d%%\n", this_player()->query_surrender()));
surr_ender.c | 40 | cmd(1, $4[0]) :) });
statthief.c | 23 | cost_str(int amt);
statthief.c | 24 | time_str(int time);
statthief.c | 28 | notify_fail("Get thief stats for who?\n");
statthief.c | 31 | notify_fail("Sorry, "+str+" does not have a quota.\n");
statthief.c | 33 | printf("Thief statistics for: %s\n", str);
statthief.c | 34 | printf("  Quota: \n");
statthief.c | 35 | printf("    Min %s\n", cost_str((int)QUOTA->query_thief_minquota(str)));
statthief.c | 36 | printf("    Max %s\n", cost_str((int)QUOTA->query_thief_maxquota(str)));
statthief.c | 38 | printf("  Debts:\n");
statthief.c | 39 | printf("    Debts %s\n", cost_str(QUOTA->query_thief_debts(str)));
statthief.c | 40 | printf("    Fines %s\n", cost_str(QUOTA->query_thief_fines(str)));
statthief.c | 42 | printf("  This period:\n");
statthief.c | 43 | printf("    Stolen %s\n", cost_str(QUOTA->query_total_stolen(str)));
statthief.c | 44 | printf("    Time left %s\n", time_str(QUOTA->query_time_to_reset(str)));
statthief.c | 49 | money_string(MONEY->create_money_array(amt, "Ankh-Morpork"));
statthief.c | 57 | sprintf("%d days, ", time/86400);
statthief.c | 59 | sprintf("%d hours, ", (time/3600)%24);
callouts.c | 31 | call_out_info();
callouts.c | 44 | get_call_outs();
callouts.c | 54 | sprintf( "%-30s %d\n", key, value );
callouts.c | 57 | this_player()->more_string( ret, "Callouts" );
callouts.c | 62 | get_call_outs();
callouts.c | 74 | this_player()->more_string( ret, "Callouts" );
callouts.c | 79 | get_call_outs();
callouts.c | 90 | this_player()->more_string( ret, "Callouts" );
callouts.c | 95 | get_call_outs();
callouts.c | 112 | add_failed_mess( "No callouts matching that criteria found.\n" );
callouts.c | 116 | this_player()->more_string( ret, "Callouts" );
callouts.c | 121 | get_call_outs();
callouts.c | 129 | this_player()->more_string( ret, "Callouts" );
qp_eople.c | 19 | this_player()->query_property("qpeople list");
qp_eople.c | 23 | do_command(stuff, str);
qp_eople.c | 28 | cmd($4[0]) :) });
trace.c | 28 | notify_fail( "Usage: trace <" + implode(OPTIONS, "|") + ">\n" );
trace.c | 32 | explode( arg, " " );
trace.c | 37 | sizeof( args );
trace.c | 42 | trace( 0 );
trace.c | 43 | write( "Trace off.\n" );
trace.c | 52 | trace( trace_arg | 128 );
trace.c | 53 | write( "Trace level: " + trace_arg + "\n" );
terms.c | 19 | this_player()->query_property("term list");
terms.c | 23 | do_command(stuff, str);
terms.c | 28 | cmd($4[0]) :) });
mail.c | 15 | return (int)MAIL_TRACK->mail(str);
mail.c | 19 | destruct(this_object());
mail.c | 23 | dest_me();
mail.c | 27 | dest_me();
gag.c | 14 | add_property( "gagged", reason, 60 * number );
gag.c | 35 | query_short() + " for: " + reason, "gag");
gag.c | 46 | cmd( $1[0], $4[1], $4[2] ) :) });
usage.c | 14 | rusage();
usage.c | 24 | destruct(this_object());
usage.c | 28 | dest_me();
usage.c | 32 | dest_me();
dest_ruct.c | 19 | main_dest_bit(object *ob);
dest_ruct.c | 23 | write("No more things to dest.\n");
dest_ruct.c | 26 | write("Dest object " + WIZ_PRESENT->desc_object(obs[0]) + " ? ");
dest_ruct.c | 27 | input_to("dest_answer", 0, 0, obs);
dest_ruct.c | 36 | short();
dest_ruct.c | 37 | catch(obs[0]->dwep());
dest_ruct.c | 38 | this_player()->handle_error(err, "DWEP");
dest_ruct.c | 40 | write("It REALLY doesn't want to be dested.\n");
dest_ruct.c | 41 | catch(destruct(obs[0]));
dest_ruct.c | 42 | this_player()->handle_error(err, "destruct()");
dest_ruct.c | 45 | if (obs[0]) write("It didn't dest.\n");
dest_ruct.c | 49 | write("Ok.\n");
dest_ruct.c | 51 | ask_dest(obs[1..]);
dest_ruct.c | 54 | move("/room/rubbish");
dest_ruct.c | 55 | catch(obs[0]->dest_me());
dest_ruct.c | 56 | this_player()->handle_error(err, "dest_me");
dest_ruct.c | 58 | write("This object does NOT want to be dested.  Are you sure? ");
dest_ruct.c | 59 | input_to("dest_answer", 0, 1, obs);
dest_ruct.c | 62 | write("Ok.\n");
dest_ruct.c | 63 | ask_dest(obs[1..]);
dest_ruct.c | 67 | write("Ok.  No more objects will be destd.\n");
dest_ruct.c | 70 | write("Ok.  Not destd.\n");
dest_ruct.c | 71 | ask_dest(obs[1..]);
dest_ruct.c | 80 | notify_fail("Can't find " + str + " to dest.\n");
dest_ruct.c | 83 | notify_fail( "Destruct what?\n" );
dest_ruct.c | 85 | write("Bye bye...\n");
dest_ruct.c | 86 | this_player()->dest_me();
dest_ruct.c | 91 | wiz_present(qstr, this_player());
dest_ruct.c | 93 | ask_dest(dest_obj);
dest_ruct.c | 96 | wiz_present(str,this_player());
dest_ruct.c | 98 | main_dest_bit(ob);
dest_ruct.c | 110 | write("You DON'T destruct " + thing->query_name() + ".\n");
dest_ruct.c | 113 | catch(shrt = (string)thing->short());
dest_ruct.c | 114 | desc_object(thing);
dest_ruct.c | 115 | move("/room/rubbish");
dest_ruct.c | 116 | catch(thing->dest_me());
dest_ruct.c | 117 | this_player()->handle_error(err, "dest_me");
dest_ruct.c | 121 | write("You destruct " + dobj + ".\n");
dest_ruct.c | 126 | if (sizeof(dest_obj) >
dest_ruct.c | 127 | ask_dest(dest_obj);
mo_re.c | 17 | seteuid(geteuid(this_player()));
mo_re.c | 20 | notify_fail("More which file(s)/object?\n");
mo_re.c | 24 | file_name(things[0]);
mo_re.c | 25 | sscanf(str, "%s#%*d", str);
mo_re.c | 29 | this_player()->more_file(str);
mo_re.c | 33 | destruct(this_object());
mo_re.c | 37 | dest_me();
mo_re.c | 41 | dest_me();
gob_ack.c | 29 | this_player()->query_last_location();
gob_ack.c | 31 | notify_fail("No stored location.\n");
gob_ack.c | 34 | load_object(dest);
gob_ack.c | 37 | find_location(dest[0], dest[1]);
gob_ack.c | 39 | notify_fail("I don't understand your stored location.\n");
gob_ack.c | 41 | environment(this_player())->query_property("terrain name");
gob_ack.c | 55 | this_player()->query_mmsgout() );
gob_ack.c | 60 | destruct(this_object());
gob_ack.c | 64 | dest_me();
gob_ack.c | 68 | dest_me();
mk_dir.c | 13 | seteuid(geteuid(this_player()));
mk_dir.c | 16 | notify_fail("Make what directory?\n");
mk_dir.c | 19 | this_player()->get_path(str);
mk_dir.c | 21 | replace(str, " ", "_");
mk_dir.c | 27 | notify_fail(str + " already exists.\n");
mk_dir.c | 32 | notify_fail("Couldn't make dir.\n");
mk_dir.c | 35 | write("Ok.\n");
mk_dir.c | 40 | destruct(this_object());
mk_dir.c | 44 | dest_me();
mk_dir.c | 48 | dest_me();
fds.c | 9 | this_player()->more_string(dump_file_descriptors());
ptest_ers.c | 13 | query_applicant_text();
ptest_ers.c | 24 | query_show_list_colour();
ptest_ers.c | 25 | tell_object (this_player(), ret);
ptest_ers.c | 29 | find_project (name);
ptest_ers.c | 37 | assign_pts_to_project (i);
ptest_ers.c | 46 | query_multiple_short (map (names, (: capitalize ($1) :))), name));
ptest_ers.c | 52 | get_playtesting_projects();
ptest_ers.c | 54 | filter (tmp, (: sizeof ($1->guild_specific) :));
ptest_ers.c | 67 | map (tmp2, (: $1->id :));
ptest_ers.c | 70 | map (tmp, (: $1->id :));
ptest_ers.c | 74 | assign_pts_to_project (p);
ptest_ers.c | 79 | query_multiple_short (map (names, (: capitalize ($1) :))), p);
ptest_ers.c | 83 | tell_object (this_player(), ret);
ptest_ers.c | 88 | add_playtester (name);
ptest_ers.c | 102 | remove_playtester (name, reason);
ptest_ers.c | 117 | set_shortlist (name);
ptest_ers.c | 123 | set_considering (name);
ptest_ers.c | 129 | delete_applicant (name);
ptest_ers.c | 143 | query_leave(name);
ptest_ers.c | 146 | reset_leave(name);
ptest_ers.c | 152 | set_leave(name, reason);
he_ad.c | 16 | seteuid(geteuid(this_player()));
he_ad.c | 18 | notify_fail("Usage: head <file>\n");
he_ad.c | 19 | this_player()->get_files(str);
he_ad.c | 21 | notify_fail("File does not exist.\n");
he_ad.c | 23 | file_length(str);
he_ad.c | 25 | printf("File not found.\n");
he_ad.c | 29 | write(read_file(str,1,i));
he_ad.c | 34 | destruct(this_object());
he_ad.c | 38 | dest_me();
he_ad.c | 42 | dest_me();
panic.c | 27 | do_startup(previous_object());
panic.c | 34 | return ({ "", (: cmd() :) });
multipl_ayer.c | 22 | printf("\"%s\" and \"%s\" added as allowed together.\n", name, extra);
multipl_ayer.c | 24 | printf("\"%s\" added.\n", name);
multipl_ayer.c | 30 | printf("\"%s\" isn't on the list.\n", name);
multipl_ayer.c | 32 | printf("\"%s\" deleted.\n", name);
multipl_ayer.c | 36 | mark_log(name, extra);
multipl_ayer.c | 54 | query_ip_number(find_player(name));
multipl_ayer.c | 60 | write("Error permitting site " + name + " for multiplayers.\n");
multipl_ayer.c | 64 | write("Unknown option.\n");
family.c | 42 | test_family(from);
family.c | 43 | test_family(to);
family.c | 45 | add_failed_mess("Sorry, " + from + " is not in a family.\n");
family.c | 48 | add_failed_mess("Sorry, " + to + " is not in a family.\n");
family.c | 62 | add_failed_mess(from + " and " + to + " are not related.\n");
family.c | 67 | query_opposite_relationship(relation);
family.c | 69 | write("Unable to swap " + relation + ".\n");
family.c | 109 | test_family(from);
family.c | 110 | test_family(to);
family.c | 112 | add_failed_mess("Sorry, " + from + " is not in a family.\n");
family.c | 115 | add_failed_mess("Sorry, " + to + " is not in a family.\n");
family.c | 129 | add_failed_mess(from + " and " + to + " are not related.\n");
family.c | 163 | query_club_name(club_name) + "'.\n");
family.c | 165 | environment(this_player())->query_property("place");
family.c | 169 | query_balance(club_name);
family.c | 172 | money_value_string(balance, place) + ".\n");
family.c | 183 | query_clubs();
family.c | 184 | environment(this_player())->query_property("place");
family.c | 193 | query_balance(club);
family.c | 196 | keys(bing);
family.c | 197 | sort_array(clubs, (: $3[$1] - $3[$2] :), bing);
family.c | 202 | money_value_string(bing[club], place));
family.c | 205 | write("$P$Club Balances$P$" + ret);
family.c | 217 | do_all_balance() :) });
ob_ject.c | 23 | notify_fail("USAGE: object ObVarName=ObjectSpec\n");
ob_ject.c | 24 | notify_fail("Can't find object.\n");
ob_ject.c | 25 | wiz_present(str, this_player());
ob_ject.c | 28 | if (sizeof(objects) >
ob_ject.c | 29 | write("Only using first object of several matched.\n");
ob_ject.c | 30 | this_player()->set_obvar(obvarname, objects[0]);
ob_ject.c | 32 | desc_object(objects[0])+".\n");
ob_ject.c | 35 | m_values((mapping)this_player()->get_obvars());
ob_ject.c | 36 | m_indices((mapping)this_player()->get_obvars());
ob_ject.c | 37 | sizeof(objects);
ob_ject.c | 38 | this_player()->query_cols();
ob_ject.c | 39 | sizeof(objects);
ob_ject.c | 42 | this_player()->del_obvar(names[i]);
ob_ject.c | 46 | desc_object(names[i]);
ob_ject.c | 48 | sprintf("%O", names[i]);
ob_ject.c | 50 | desc_object(objects[i]);
ob_ject.c | 53 | sprintf("%O", objects[i]);
ob_ject.c | 54 | replace(end, "\n", "");
ob_ject.c | 56 | strlen(start)-2, end);
ob_ject.c | 59 | if (!j) write("No obvars set.\n");
ob_ject.c | 65 | destruct(this_object());
ob_ject.c | 69 | dest_me();
ob_ject.c | 73 | dest_me();
random_name.c | 20 | query_test_languages(), "|");
random_name.c | 32 | query_test_languages();
random_name.c | 33 | sizeof(langs);
random_name.c | 35 | random_name(langs[i])+"\n");
random_name.c | 39 | write("Generateing 10 names in "+my_lang+"\n\n");
random_name.c | 41 | write( (string)RANDOM_NAME_GENERATOR->random_name(my_lang)+"\n");
random_name.c | 48 | cmd($5, $4[0]) :) });
denied.c | 6 | db_connect("localhost", "errors");
denied.c | 17 | sprintf("%-15s %s\n", "player", "reports");
denied.c | 19 | db_fetch(db, i+1);
denied.c | 20 | sprintf("%-15s %s", tmp[0], ""+tmp[1]);
denied.c | 23 | db_close(db);
denied.c | 24 | this_player()->more_string(ret);
denied.c | 25 | printf(rows);
addalt.c | 14 | this_player()->expand_nickname(lower_case(s1));
addalt.c | 15 | explode(lower_case(s2)," ") - ({ "" }) - ({ 0 });
addalt.c | 18 | write(PLAYERINFO_HANDLER->add_alt(this_player(), s1, alt));
sh_adows.c | 24 | wiz_present(s, this_player());
sh_adows.c | 26 | notify_fail("Can't find object.\n");
sh_adows.c | 38 | write(WIZ_PRESENT->desc_f_object(ob) + " is not being shadowed.\n");
sh_adows.c | 40 | write(WIZ_PRESENT->desc_f_object(ob) + " is being shadowed by:\n");
sh_adows.c | 42 | write("    " + file_name(shad) + "\n");
sh_adows.c | 48 | return ({ "<indirect:wiz-present>", (: cmd( $1 ) :) });
ungag.c | 15 | notify_fail( victim->query_short() +" is not gagged.\n" );
ungag.c | 17 | remove_property("gagged");
ungag.c | 19 | query_short() + " ungagged " + victim->query_short() + ".\n");
ungag.c | 28 | write( "Okay, ungagged " + victim->query_short() + ".\n" );
ungag.c | 31 | query_short(), "gag");
ungag.c | 40 | cmd( $1[0] ) :) });
show_help.c | 22 | set_finish_func("who_did_it", this_object());
show_help.c | 23 | WHO(player[0]) = capitalize(this_player()->query_name());
show_help.c | 25 | map_delete(globals, player[0]);
show_help.c | 33 | query_cap_name() + ".\n");
show_help.c | 46 | map_delete(globals, previous_object());
show_help.c | 52 | show_help($1, $4[1]) :) });
tasks.c | 18 | create() { seteuid( "Root" );
tasks.c | 31 | get_dir( SAVE_FILES +"*.o" );
tasks.c | 33 | printf( "No tasks have been logged.\n" );
tasks.c | 43 | this_player()->set_finish_func( "main_menu", this_object() );
tasks.c | 45 | implode( words, "\n   " ) +"\n", "Tasks", 1 );
tasks.c | 50 | printf( "Syntax: C <skill>\n" );
tasks.c | 55 | printf( "There are no tasks logged for "+ word +".\n" );
tasks.c | 58 | unguarded( (: restore_object, SAVE_FILES + word :) );
tasks.c | 59 | allocate( 5 );
tasks.c | 65 | sprintf( "   level%5d awarded by%5d tasks\n", i, j );
tasks.c | 96 | this_player()->set_finish_func( "main_menu", this_object() );
tasks.c | 97 | this_player()->more_string( text, "Tasks", 1 );
tasks.c | 109 | printf( "Choose one of Q, L, C or H (for help) : " );
tasks.c | 110 | input_to( "main_menu" );
tasks.c | 114 | main_menu( "L" );
pe_ople.c | 25 | query_level();
pe_ople.c | 26 | query_level();
pe_ople.c | 28 | reset_eval_cost();
pe_ople.c | 39 | query_guild_ob();
pe_ople.c | 40 | query_guild_ob();
pe_ople.c | 43 | query_name() : "");
pe_ople.c | 49 | environment(first);
pe_ople.c | 50 | environment(second);
pe_ople.c | 52 | strcmp(d1 ? file_name(d1) : "", d2 ? file_name(d2) : "");
pe_ople.c | 58 | query_time_on();
pe_ople.c | 59 | query_time_on();
pe_ople.c | 73 | this_player()->query_property("people list");
pe_ople.c | 78 | explode(str, " ");
pe_ople.c | 102 | return (int)PEOPLER->do_command(stuff, str, sort_func);
pe_ople.c | 107 | cmd($4[0]) :) });
crea_tor.c | 17 | notify_fail("Creator of what?\n");
crea_tor.c | 18 | wiz_present(str,this_player());
crea_tor.c | 24 | getuid(ob) + ", euid: "+geteuid(ob)+"\n");
crea_tor.c | 30 | destruct(this_object());
crea_tor.c | 34 | dest_me();
crea_tor.c | 38 | dest_me();
mem_stat.c | 23 | help();
mem_stat.c | 32 | notify_fail(help());
mem_stat.c | 45 | seteuid(geteuid(TP));
mem_stat.c | 47 | wiz_present(str, TP);
mem_stat.c | 52 | get_path(str);
mem_stat.c | 57 | if (sizeof(filelist = TP->get_files(str)) >
mem_stat.c | 58 | filter(filelist, (: (sizeof($1) >
mem_stat.c | 59 | sizeof($1) - 2..] == ".c") :));
mem_stat.c | 64 | filter(filelist, (: find_object($1) :));
mem_stat.c | 65 | map(filelist, (: find_object($1) :));
mem_stat.c | 70 | sprintf("%-"+ i +"s %-7s\n", "Object name", "Memory");
mem_stat.c | 71 | sprintf("%-"+ i +"s %-7s\n", "------------", "-------");
mem_stat.c | 77 | sizeof(objlist);
mem_stat.c | 82 | memory_info(objlist[sizeof(objlist) - 1]));
mem_stat.c | 87 | memory_info(objlist[j]));
mem_stat.c | 89 | if (sizeof(objlist) >
mem_stat.c | 90 | sizeof(objlist);
mem_stat.c | 91 | memory_info(objlist[j]);
mem_stat.c | 97 | object(s):", memtotal);
mem_stat.c | 99 | more_string(ret);
mem_stat.c | 104 | filename(s)>
mem_stat.c | 113 | return ({ "<string>", (: cmd( $4[0] ) :) });
snoope_rs.c | 18 | get_people(str);
snoope_rs.c | 19 | filter_array(obs, "check_snoop", this_object());
snoope_rs.c | 21 | notify_fail("No one is being snooped by anyone.\n");
snoope_rs.c | 24 | sizeof(obs);
snoope_rs.c | 26 | query_snoopee()->query_cap_name()+".\n");
snoope_rs.c | 38 | destruct(this_object());
snoope_rs.c | 42 | dest_me();
snoope_rs.c | 46 | dest_me();
whe_reis.c | 29 | add_failed_mess( "Where is what?\n" );
whe_reis.c | 57 | tell_object( this_player(), txt + "\n" );
whe_reis.c | 62 | return ({ "<indirect:wiz-present>", (: cmd($1) :) });
ptguilds.c | 22 | query_playtester_guilds();
ptguilds.c | 26 | format_guild_list( guild, members );
ptguilds.c | 30 | format_guild_list( $1, $2 ) :) ) ), "\n\n" );
ptguilds.c | 33 | tell_object( this_player(), txt + "\n" );
ptguilds.c | 40 | cmd($4[0]) :) });
meteor.c | 28 | notify_fail("You cannot use meteor.\n");
meteor.c | 32 | notify_fail("Usage: meteor <player> <reason>\n");
meteor.c | 34 | find_player(this_player()->expand_nickname(player));
meteor.c | 36 | notify_fail(player+" not found!\n");
meteor.c | 41 | input_to("are_sure", ob, reason);
meteor.c | 50 | lower_case(str);
meteor.c | 53 | one_short()+".\n");
meteor.c | 61 | this_player()->query_short(), ob->query_short(), reason);
meteor.c | 62 | shout("You see a very large %^YELLOW%^meteor%^RESET%^ up in the sky.\n");
meteor.c | 63 | write("Nuking player "+ob->query_name()+".\n");
meteor.c | 64 | call_out("nuke2", 2, ob);
meteor.c | 68 | shout("The %^YELLOW%^meteor%^RESET%^ rushes towards the ground.\n");
meteor.c | 69 | tell_object(ob, "It looks like it's heading for you.\n");
meteor.c | 70 | call_out("nuke3", 5, ob);
meteor.c | 77 | capitalize(ob->query_pronoun())+" is no more.\n");
meteor.c | 78 | save();
meteor.c | 79 | quit();
iloc_ate.c | 16 | notify_fail("Syntax: locate <name>\n");
iloc_ate.c | 19 | eventSendLocateRequest(who);
iloc_ate.c | 20 | printf("Locating %s. Don't explode !\n", who);
iloc_ate.c | 25 | destruct(this_object());
iloc_ate.c | 29 | dest_me();
iloc_ate.c | 33 | dest_me();
hliaison.c | 28 | query_chat_history("liaison");
hliaison.c | 30 | notify_fail("Nobody said anything on the liaison channel.\n");
hliaison.c | 32 | write("The liaison channel history is:\n");
hliaison.c | 33 | sizeof(hist);
hliaison.c | 34 | if (sizeof(hist[i]) >
cst_at.c | 22 | this_player()->expand_nickname(str);
cst_at.c | 23 | wiz_present(str, this_player());
cst_at.c | 25 | write("No such object.\n");
cst_at.c | 29 | stats();
cst_at.c | 40 | if (strlen(temp) >
cst_at.c | 44 | sprintf( "%-*#s\n", this_player()->query_cols(), s );
cst_at.c | 46 | this_player()->more_string(bing);
cst_at.c | 51 | destruct(this_object());
cst_at.c | 55 | dest_me();
cst_at.c | 59 | dest_me();
host.c | 13 | lower_case( this_player()->expand_nickname( w ) );
host.c | 17 | query_ip_number( find_player( ip ) );
host.c | 18 | resolve( ip2, "lookup_callback" ) ] = this_player();
host.c | 22 | resolve( ip, "lookup_callback" ) ] = this_player();
host.c | 23 | tell_object( this_player(), "Starting lookup for " + ip + ".\n" );
host.c | 37 | map_delete( lookups, key );
host.c | 43 | cmd( $4[0] ) :) });
debug.c | 12 | write(WIZ_PRESENT->desc_object(ob) + ":\n" + debug_info(detail, ob) + "\n");
debug.c | 19 | cmd($1, 1) :) });
inh_eritance.c | 20 | inherith(string ob, string ind, string leaf);
inh_eritance.c | 25 | notify_fail("Syntax: inh[eritance] <filename> [<filename>]\n");
inh_eritance.c | 30 | this_player()->get_path( fn );
inh_eritance.c | 33 | add_failed_mess( "No such object: " + fn + "\n" );
inh_eritance.c | 38 | this_player()->get_path( fn2 );
inh_eritance.c | 41 | add_failed_mess( "No such object: " + fn2 + "\n" );
inh_eritance.c | 46 | file_name(ob);
inh_eritance.c | 47 | write(fn + "\n" + inherith(fn, "  ", fn2 ));
inh_eritance.c | 58 | inherit_list(find_object(ob));
inh_eritance.c | 59 | sizeof(fn);
inh_eritance.c | 60 | write("*Scanning " + fn[i] + "\n");
inh_eritance.c | 62 | write("**Leaf match\n");
inh_eritance.c | 65 | write("**No leaf match\n");
inh_eritance.c | 66 | inherith(fn[i], ind + "  ", leaf);
inh_eritance.c | 68 | write("***Good branch\n");
inh_eritance.c | 107 | file_name( fo );
inh_eritance.c | 111 | file_name( fo2 );
inh_eritance.c | 114 | debug_printf( "%O, %O\n", fn, fn2 );
inh_eritance.c | 116 | cmd( fn, fn2 );
sql.c | 16 | tell_object(player, "sql> ");
sql.c | 18 | tell_object(player, "  -> ");
sql.c | 20 | input_to("main", 0, db, user, pass);
sql.c | 34 | notify_fail(err);
sql.c | 40 | prompt(arg, user, passwd, this_player());
sql.c | 50 | tell_object(player, "Failed: " + params + ".\n");
sql.c | 55 | keys(row);
sql.c | 57 | tell_object(player, key + "   ");
sql.c | 61 | tell_object(player, row[key] + "   ");
sql.c | 63 | tell_object(player, "\n");
sql.c | 65 | prompt(db, user, passwd, player);
sql.c | 81 | prompt(db, user, passwd, this_player());
sql.c | 83 | this_player()->do_edit(COM, "edfin", this_object(), 0, ({ db, user, passwd }));
sql.c | 86 | printf("Use 'exit' to quit.\n");
sql.c | 87 | prompt(db, user, passwd, this_player());
sql.c | 89 | db_close(FD);
sql.c | 90 | map_delete(fd, this_player());
sql.c | 91 | map_delete(com, this_player());
sql.c | 100 | prompt(db, user, passwd, this_player());
sql.c | 109 | finish_query($1, $2, $(db), $(user), $(passwd), $(this_player())) :));
sql.c | 110 | input_to("main", db, user, passwd);
sql.c | 112 | tell_creator ("drakkos", "Bing %s.\n", input);
sql.c | 116 | printf("%s\n", rows);
sql.c | 117 | prompt(db, user, passwd);
sql.c | 120 | printf("%s\n", implode(db_fetch(FD, i), (:$1 + " " + $2:), ""));
sql.c | 126 | prompt(db, user, passwd, this_player());
sql.c | 132 | prompt(args[0], args[1], args[2], this_player());
sql.c | 139 | cmd($4[0], $4[1], $4[2]):)});
rmd_ir.c | 16 | seteuid(geteuid(this_player()));
rmd_ir.c | 18 | notify_fail("Remove what dir?\n");
rmd_ir.c | 21 | this_player()->get_files(str);
rmd_ir.c | 23 | notify_fail("No such directory : " + str + "\n");
rmd_ir.c | 27 | sizeof(filenames);
rmd_ir.c | 29 | file_size(str);
rmd_ir.c | 31 | notify_fail(str + " doesn't exist.\n");
rmd_ir.c | 35 | notify_fail(str + " is not a directory.\n");
rmd_ir.c | 39 | notify_fail("Couldn't remove dir : " + str + "\n");
rmd_ir.c | 43 | write("Ok.\n");
rmd_ir.c | 48 | destruct(this_object());
rmd_ir.c | 52 | dest_me();
rmd_ir.c | 56 | dest_me();
autodocadd.c | 21 | this_player()->get_files(str);
autodocadd.c | 23 | notify_fail("Unable to find the files " + str + ".\n");
autodocadd.c | 28 | write("Added file " + file + ".\n");
autodocadd.c | 30 | write("Unable to add file " + file + ".\n");
autodocadd.c | 37 | return ({ "<string>", (: cmd($4[0]) :) });
dbxwhere.c | 19 | this_player()->expand_nickname(str);
dbxwhere.c | 20 | find_player(str);
dbxwhere.c | 22 | write("No such player.\n");
dbxwhere.c | 26 | this_player();
dbxwhere.c | 28 | printf("%s\n", master()->standard_trace(error, 1));
dbxwhere.c | 29 | write("No error.\n");
suspend.c | 16 | do_suspend(string, int, string);
suspend.c | 57 | add_failed_mess( "You must give a reason.\n" );
suspend.c | 65 | query_num (MULTI_SUSPEND) + " hours.");
suspend.c | 68 | do_suspend(name, tim, reason);
suspend.c | 79 | notify_fail("Only liaisons or seniors can do that.\n");
suspend.c | 82 | do_suspend(who, 2, reason);
suspend.c | 97 | do_suspend(who, MULTI_SUSPEND, "Multiplaying");
suspend.c | 102 | notify_fail("We failed!\n");
suspend.c | 108 | write(name+" suspended until "+ctime(time()+tim*60*60)+"\n");
suspend.c | 115 | notify_fail("You cannot use suspend.\n");
suspend.c | 121 | write("suspend <name> <reason> -- will suspend a player for 2 hours.\n");
suspend.c | 131 | write("suspend <name> <time> <reason> where time is in hours.\n");
suspend.c | 133 | query_num (MULTI_SUSPEND) + " hours as a liaison deputy.\n");
suspend.c | 137 | write("suspend <name> <time> <reason> where time is in hours.\n");
suspend.c | 148 | help() :) });
suspend.c | 154 | suspend($4[0], implode($4[1..], " ")) :) });
suspend.c | 160 | suspend_multi($4[0]) :) });
suspend.c | 166 | cmd($4[0], $4[1], "hours", implode($4[2..], " ") ) :) });
suspend.c | 169 | cmd($4[0], $4[1], $4[2], implode($4[3..], " ") ) :) });
hcode.c | 28 | query_chat_history("code");
hcode.c | 30 | notify_fail("Nobody said anything on the code channel.\n");
hcode.c | 32 | write("The code channel history is:\n");
hcode.c | 33 | sizeof(hist);
hcode.c | 34 | if (sizeof(hist[i]) >
playerinfo.c | 17 | this_player()->expand_nickname( lower_case(player) );
playerinfo.c | 29 | ctime( time() ), this_player()->query_name(), who );
playerinfo.c | 36 | query_dossier( this_player(), who, lastn );
playerinfo.c | 39 | lower_case(event) );
playerinfo.c | 41 | this_player()->fix_string(ret, this_player()->query_cols());
playerinfo.c | 42 | this_player()->more_string(ret, "Playerinfo", 1);
playerinfo.c | 49 | sort_array( PLAYERINFO_HANDLER->query_events(), 1 );
playerinfo.c | 50 | base_name(this_object());
playerinfo.c | 55 | write( "The following events exist: " + result + ". \n" );
playerinfo.c | 58 | query_source_ok( $1, $(myself) ) :) );
playerinfo.c | 61 | query_multiple_short(list) + ". \n" );
playerinfo.c | 71 | write( capitalize( data[0] ) + "'s dossier updated.\n" );
playerinfo.c | 73 | write( "Cannot update " + capitalize( data[0] ) + "'s dossier.\n" );
playerinfo.c | 90 | add_succeeded_mess( ({ "Event acknowledged.\n", "" }) );
playerinfo.c | 98 | query_online_alerts();
playerinfo.c | 100 | keys( PLAYERINFO_HANDLER->query_alerts() );
playerinfo.c | 103 | write( "There are no players with unacknowledged alerts.\n" );
playerinfo.c | 116 | this_player()->expand_nickname( lower_case(player) );
playerinfo.c | 117 | lower_case(event);
playerinfo.c | 120 | add_failed_mess( "No such player: " + player + ".\n" );
playerinfo.c | 124 | base_name( this_object() );
playerinfo.c | 127 | query_source_ok( $1, $(myself) ) :) );
playerinfo.c | 130 | query_multiple_short(events) + ".\n" );
playerinfo.c | 135 | update_database( comment, ({ player, event }) );
playerinfo.c | 138 | write( "Please enter your comments:\n" );
playerinfo.c | 148 | this_player()->expand_nickname( lower_case(s1) );
playerinfo.c | 149 | explode( lower_case(s2), " " );
playerinfo.c | 150 | explode( implode( alts, "," ), "," ) - ({ "" }) - ({ 0 });
playerinfo.c | 153 | delete_alts( this_player(), who, alts );
playerinfo.c | 155 | add_alts( this_player(), who, alts );
playerinfo.c | 158 | add_succeeded_mess( ({ result, "" }) );
dist_ribution.c | 10 | to_int(num);
dist_ribution.c | 16 | users();
dist_ribution.c | 28 | write("%^ORANGE%^Player level distribution:%^RESET%^\n");
dist_ribution.c | 32 | sizeof( players ) );
prof.c | 28 | function_profile($1) }) :));
prof.c | 29 | allocate(sizeof(data));
prof.c | 30 | sizeof(data);
prof.c | 31 | total(data[i][1]) });
prof.c | 35 | reset_eval_cost();
prof.c | 36 | sizeof(tot);
prof.c | 43 | time();
prof.c | 51 | sizeof(tot);
prof.c | 53 | sprintf("%60-O %i\n", tot[i][0], tot[i][1]);
prof.c | 56 | find_object(thing);
prof.c | 58 | notify_fail("No such object.\n");
prof.c | 59 | sprintf("%30-s %10s %10s %10s\n", "function", "calls", "self", "children");
prof.c | 61 | sizeof(data);
prof.c | 68 | notify_fail("No such object in data.\n");
prof.c | 76 | write("$P$Profile$P$" + ret);
sqlcmd.c | 6 | set_results( int flag, mapping *res, object who);
sqlcmd.c | 10 | set_results( $1, $2, $(this_player()) ) :) );
sqlcmd.c | 15 | tell_creator( who, "flag: %O\n%O\n", flag, res );
sqlcmd.c | 24 | cmd( $4[0], $4[1] ) :) });
screen.c | 24 | query_short() +", is there?\n" );
screen.c | 29 | this_player()->query_short()));
screen.c | 39 | this_player()->query_short()));
screen.c | 43 | query_short()));
screen.c | 45 | input_to("do_screen");
screen.c | 55 | this_player()->query_short()));
screen.c | 59 | query_short()));
screen.c | 64 | tell_object(target, "] " + spam + "\n");
screen.c | 65 | write("] ");
screen.c | 67 | input_to("do_screen");
screen.c | 77 | notify_fail("You aren't earmuffing remote-spam events!\n");
screen.c | 82 | write("Remote-spam earmuffs off.\n");
screen.c | 90 | notify_fail("You are already earmuffing remote-spam events!\n");
screen.c | 95 | write("Remote-spam earmuffed.\n");
screen.c | 97 | write("Remeber to \"earmuff on\" to enable them.\n");
screen.c | 105 | screen_toggle($4[0]) :) });
forwards.c | 15 | sprintf("%-15s %s\n", row["Forwarder"], "" + row["bing"]);
forwards.c | 20 | more_string(ret, "details");
forwards.c | 37 | finish_request($1, $2, $(this_player())) :));
forwards.c | 38 | add_succeeded_mess("");
forwards.c | 43 | return ({ "<string'person|all'>", (: cmd($4[0]) :) });
autodocrm.c | 18 | this_player()->get_files(str);
autodocrm.c | 20 | notify_fail("Unable to find the files " + str + ".\n");
autodocrm.c | 25 | write("Removed file " + file + ".\n");
autodocrm.c | 27 | write("Unable to remove file " + file + ".\n");
autodocrm.c | 34 | return ({ "<string>", (: cmd($4[0]) :) });
dupd_ate.c | 22 | wiz_present(str, this_player());
dupd_ate.c | 26 | file_name(ob);
dupd_ate.c | 27 | inherit_list(ob);
dupd_ate.c | 30 | deep_inherit_list(find_object(file));
dupd_ate.c | 34 | do_it(file);
dupd_ate.c | 36 | dest_me();
dupd_ate.c | 38 | dwep();
dupd_ate.c | 40 | destruct(ob);
dupd_ate.c | 41 | load_object(fnob);
dupd_ate.c | 42 | printf("Updated %s.\n", WIZ_PRESENT->desc_f_object(ob));
dupd_ate.c | 51 | notify_fail("usage: dupdate <object> [<object>]\n");
dupd_ate.c | 54 | sscanf(str, "%s %s", str, other);
dupd_ate.c | 56 | wiz_present(other, this_player());
dupd_ate.c | 58 | file_name(tmp[0]);
dupd_ate.c | 64 | do_it(str);
rehash.c | 23 | notify_fail("Syntax: rehash <path>\n");
rehash.c | 25 | notify_fail(str+": Path not found.\n");
rehash.c | 28 | rehash_specific_dir(str);
rehash.c | 29 | write("Rehashed help dir: " + str + "\n");
rehash.c | 35 | write("Rehashed armoury dir: " + str + "\n");
rehash.c | 40 | eventRehash(str);
rehash.c | 41 | write(str+": Rehashed.\n");
rehash.c | 46 | destruct(this_object());
rehash.c | 50 | dest_me();
rehash.c | 54 | dest_me();
snoop.c | 21 | seteuid(geteuid(this_player()));
snoop.c | 23 | write("You aren't snooping anyone.\n");
snoop.c | 25 | snoop(this_player(), 0);
snoop.c | 26 | write("Ok, snoop cancelled.\n");
snoop.c | 36 | notify_fail("You fail to snoop " + targ->the_short() + ".\n");
snoop.c | 39 | write("Ok, snooping "+targ->the_short()+".\n");
snoop.c | 45 | do_snoop_cancel() :) });
jumps.c | 6 | find_object(str);
jumps.c | 9 | load_object(str);
jumps.c | 16 | find_location(from);
jumps.c | 17 | find_location(to);
jumps.c | 20 | add_failed_mess("The from location does not exist.\n");
jumps.c | 24 | add_failed_mess("The to location does not exist.\n");
jumps.c | 28 | add_jump_point(from, to);
jumps.c | 29 | write("You added the jump point from " + from + " to " + to + ".\n");
jumps.c | 42 | write(str);
jumps.c | 49 | query_jump_destination(from);
jumps.c | 51 | add_failed_mess("There are no destiations from " + from + ".\n");
jumps.c | 57 | query_multiple_short(dests) + ".\n");
jumps.c | 60 | remove_jump_point(from, to);
jumps.c | 61 | write("Removed the jump from " + from + " to " + to + ".\n");
template.c | 11 | query_map_template(size);
template.c | 13 | sizeof(data);
template.c | 14 | sizeof(data[y]);
template.c | 23 | write(line);
template.c | 28 | return ({ "<number>", (: cmd($4[0]) :) });
req_uest.c | 10 | request_item(item, condition, area);
req_uest.c | 12 | notify_fail(item + " not found.\n");
req_uest.c | 14 | move(this_player());
req_uest.c | 15 | this_player()->add_succeeded_mess(ob, "$N $V $D\n", ({ }));
req_uest.c | 17 | ctime (time()), this_player()->query_name(), item);
req_uest.c | 24 | query_items(type, filter);
req_uest.c | 32 | implode(keys(stuff), "\n"));
req_uest.c | 33 | this_player()->add_succeeded_mess(this_object(), "", ({ }));
req_uest.c | 41 | request_item(item, condition, area);
req_uest.c | 43 | notify_fail("");
req_uest.c | 51 | move("/room/rubbish");
req_uest.c | 52 | this_player()->add_succeeded_mess(ob, res, ({ }));
delalt.c | 14 | this_player()->expand_nickname(lower_case(s1));
delalt.c | 15 | explode(lower_case(s2)," ") - ({ "" }) - ({ 0 });
delalt.c | 18 | write(PLAYERINFO_HANDLER->delete_alt(this_player(), s1, alt));
comment.c | 28 | create();
comment.c | 29 | set_error_type("COMMENT");
comment.c | 30 | set_use_last_error(1);
sar.c | 25 | seteuid(geteuid(this_player()));
sar.c | 27 | notify_fail( "Usage: sar <search_string> <replace_string> <files>\n" );
sar.c | 33 | notify_fail( "Usage: sar <search_string> <replace_string> <files>\n" );
sar.c | 39 | file_name(things[0]);
sar.c | 40 | sscanf(s3, "%s#%*d", s3);
sar.c | 46 | this_player()->get_files(s3);
sar.c | 49 | notify_fail("File(s) " + s3 + " not found.\n");
sar.c | 52 | replace( s1, "^M", "\n" );
sar.c | 53 | replace( s2, "^M", "\n" );
sar.c | 54 | sizeof(files);
sar.c | 57 | printf("Looking at %s.\n", files[i]);
sar.c | 58 | read_file(files[i]);
sar.c | 61 | replace(s4, s1, s2);
sar.c | 62 | rm(files[i]);
sar.c | 63 | write_file(files[i], s4);
sar.c | 66 | printf("...failed...no file\n");
sar.c | 72 | destruct(this_object());
sar.c | 76 | dest_me();
sar.c | 80 | dest_me();
set.c | 15 | return (int)PEOPLER->set_var(str);
set.c | 19 | destruct(this_object());
set.c | 23 | dest_me();
set.c | 27 | dest_me();
findc_orpse.c | 28 | tell_object( this_player(), r );
findc_orpse.c | 30 | tell_object( this_player(), sizeof( cs ) + " player corpses.\n" );
findc_orpse.c | 34 | filter( cs, (: $1 && $1->query_ownership() == $( arg ) :) );
findc_orpse.c | 41 | tell_object( this_player(), r );
findc_orpse.c | 45 | tell_object( this_player(), arg + " has no corpses loaded.\n" );
findc_orpse.c | 52 | destruct(this_object());
findc_orpse.c | 56 | dest_me();
findc_orpse.c | 60 | dest_me();
st_at.c | 22 | this_player()->expand_nickname(str);
st_at.c | 23 | wiz_present(str, this_player());
st_at.c | 25 | write("No such object.\n");
st_at.c | 29 | stats();
st_at.c | 40 | if (strlen(temp) >
st_at.c | 48 | sprintf( "%-*#s\n", this_player()->query_cols(), s );
st_at.c | 50 | this_player()->more_string(bing, "Stat");
weapons.c | 44 | create();
weapons.c | 67 | query_attack_data();
weapons.c | 70 | return ({ 0, 0 });
weapons.c | 81 | return ({ ave, max });
weapons.c | 102 | return ({});
weapons.c | 104 | query_weapons();
weapons.c | 110 | return ({ tmp[0] });
weapons.c | 113 | return ({ tmp[0] });
weapons.c | 128 | query_items("weapons");
weapons.c | 136 | request_item(str);
weapons.c | 140 | query_attack_types();
weapons.c | 144 | query_attack_data();
weapons.c | 145 | query_attack_names();
weapons.c | 146 | sizeof(data);
weapons.c | 163 | dest_me();
weapons.c | 182 | map(users(), "filter");
weapons.c | 188 | clone_object(wep->query_property("virtual name"))->query_short());
weapons.c | 190 | base_name(wep)->query_short();
weapons.c | 202 | printf("%d %s\n", weapons[str], str);
weapons.c | 220 | write("Total of " + _matched[pl] + " weapons found.\n");
weapons.c | 236 | dest_me();
weapons.c | 254 | clone_object(_items[pl][str]);
weapons.c | 258 | map_materials(wep->query_materials());
weapons.c | 259 | query_max_cond();
weapons.c | 260 | query_damage_chance();
weapons.c | 264 | sprintf("\n");
weapons.c | 275 | query_multiple_short(materials));
weapons.c | 286 | warn(1);
weapons.c | 290 | warn(2);
weapons.c | 297 | tell_object(pl, ret);
weapons.c | 305 | query_length() / 12) >
weapons.c | 309 | query_width() / 12) >
weapons.c | 316 | query_weight() / 20.0);
weapons.c | 322 | sizeof(materials);
weapons.c | 325 | query_length() * wep->query_width() * wf);
weapons.c | 328 | warn(1);
weapons.c | 332 | warn(0);
weapons.c | 339 | sqrt(wep->query_weight());
weapons.c | 342 | sqrt(wep->query_weight());
weapons.c | 345 | sqrt(wep->query_weight());
weapons.c | 353 | sizeof(materials);
weapons.c | 359 | tell_object(pl, ret);
weapons.c | 369 | sizeof(materials);
weapons.c | 381 | query_attack_names();
weapons.c | 383 | warn(2) + sprintf("has no attacks.\n");
weapons.c | 384 | tell_object(pl, ret);
weapons.c | 390 | warn(1) + sprintf("has non-standard %s attack\n", att);
weapons.c | 395 | warn(2) + sprintf("has %s but is too light\n", att);
weapons.c | 397 | if(wep->query_weight() >
weapons.c | 399 | warn(1) + sprintf("has %s but not %s\n", att, _specials[att]);
weapons.c | 406 | query_attack_data();
weapons.c | 407 | sizeof(data);
weapons.c | 438 | warn(1) + sprintf("has chop attack but is not an axe.\n");
weapons.c | 443 | warn(1) + sprintf("has chop attack but is not an axe.\n");
weapons.c | 449 | warn(1) + sprintf("has slash attack but is an axe.\n");
weapons.c | 454 | warn(1) + sprintf("has slice attack but is an axe.\n");
weapons.c | 461 | calc_rating(wep);
weapons.c | 466 | warn(2);
weapons.c | 469 | warn(0);
weapons.c | 476 | warn(1);
weapons.c | 480 | warn(0);
weapons.c | 488 | tell_object(pl, ret);
weapons.c | 506 | this_player()] = "/obj/handlers/armoury"->query_items(type);
weapons.c | 519 | keys(_items[this_player()]);
weapons.c | 522 | notify_fail("No items matched.\n");
weapons.c | 524 | sizeof(tmp);
weapons.c | 527 | this_player());
weapons.c | 529 | call_out("check", 0, bad_only, type, search, tmp[i..], this_player());
weapons.c | 531 | call_out("total", 1, this_player());
sne_tstat.c | 22 | this_player()->query_property("netstat list");
sne_tstat.c | 27 | strcmp(query_ip_number($1), query_ip_number($2)) :) );
sne_tstat.c | 33 | cmd($4[0]) :) });
pquests.c | 6 | quest_text(string quest);
pquests.c | 13 | query_quest_names();
pquests.c | 17 | query_quests(player);
pquests.c | 26 | sort_array( quests, 1 );
pquests.c | 30 | sizeof(quests);
pquests.c | 35 | quest_text( quests[i] ) );
pquests.c | 38 | tell_object( this_player(), text );
hours.c | 25 | time() - $1->query_last_log_on() ) / 3600 ) :) );
hours.c | 29 | time() - $1->query_last_log_on() ) / 3600 ) :) );
hours.c | 32 | query_name() ) :) ) :) );
hours.c | 50 | allocate_mapping( users(), (: $(time()) -  $1->query_last_log_on() :) );
hours.c | 59 | query_multiple_short( keys( people ) ) + ".\n" );
hours.c | 76 | cmd(0, "") :) });
eff_ects.c | 12 | this_player() });
eff_ects.c | 15 | write( "%^BOLD%^Effects on " + who->query_short() + ":%^RESET%^\n" );
eff_ects.c | 16 | effects_matching( "" );
eff_ects.c | 18 | write( "No effects.\n" );
eff_ects.c | 25 | arg_of(num);
addevent.c | 20 | write(capitalize(data[0])+"'s dossier updated.  \n");
addevent.c | 22 | write("Cannot update "+capitalize(data[0])+"'s dossier.  \n");
addevent.c | 31 | this_player()->expand_nickname(lower_case(player));
addevent.c | 32 | lower_case(event);
addevent.c | 35 | add_failed_mess("No such player: " + player + ".\n");
addevent.c | 39 | base_name(this_object());
addevent.c | 41 | query_source_ok($1, $(myself)) :));
addevent.c | 45 | query_multiple_short(events) + ".\n");
addevent.c | 50 | update_database(comment, ({ player, event }));
addevent.c | 53 | write("Please enter your comments:\n");
addevent.c | 66 | base_name(this_object());
addevent.c | 69 | query_source_ok($1, $(myself)) :)), 1);
addevent.c | 73 | query_multiple_short(list) + ". \n");
malloc.c | 13 | printf("%s", malloc_status());
malloc.c | 18 | destruct(this_object());
malloc.c | 22 | dest_me();
malloc.c | 26 | dest_me();
hcre.c | 28 | query_chat_history("cre");
hcre.c | 30 | notify_fail("Nobody said anything on the cre channel.\n");
hcre.c | 32 | write("The creator channel history is:\n");
hcre.c | 33 | sizeof(hist);
hcre.c | 34 | if (sizeof(hist[i]) >
tell!.c | 17 | o("});
tell!.c | 38 | lower_case( word );
tell!.c | 39 | expand_nickname( word );
tell!.c | 40 | find_player( word );
tell!.c | 43 | do_tell( word+" "+words );
tell!.c | 46 | add_failed_mess( capitalize( word ) +" is not logged in.\n" );
tell!.c | 59 | this_player() });
tell!.c | 61 | add_failed_mess( "Talking to yourself again.  I don't know.\n" );
tell!.c | 65 | if (sizeof(obs) >
tell!.c | 66 | add_failed_mess("You can only tell up to 20 people a message.\n");
tell!.c | 70 | this_player()->query_ignoring(obs);
tell!.c | 74 | sizeof(fail) >
tell!.c | 81 | query_current_language();
tell!.c | 92 | if(sizeof(words) >
tell!.c | 104 | query_word_type(words, "");
tell!.c | 112 | if(sizeof(words) >
tell!.c | 117 | query_word_type(smiley_words, "");
tell!.c | 220 | convert_message(capitalize( query_multiple_short(obs)));
tell!.c | 231 | sizeof(net_dead)>1?"are":"is")+" net dead.\n" );
tell!.c | 237 | this_player()->query_busy();
tell!.c | 239 | write("Warning! You have your busy flag on.\n");
tell!.c | 242 | query_multiple_short(busy) + ".\n");
tell!.c | 247 | adjust_time_left( -5 );
tell!.c | 253 | cmd($4[0], 0, 0) :) });
qwho.c | 13 | cmd(string filter, string arg);
qwho.c | 197 | return ({ "Other", "No environment" });
qwho.c | 206 | return ({ "Other", "Unknown environment" });
qwho.c | 238 | query_name() != "logon" :) );
qwho.c | 243 | determine_location(person);
qwho.c | 276 | query_level();
qwho.c | 279 | calculate_rating(person);
qwho.c | 282 | query_time_on();
qwho.c | 313 | get_guild_id(person);
qwho.c | 336 | get_dist(filter,arg);
qwho.c | 338 | query_name() != "logon" :) ));
qwho.c | 344 | sprintf( "%-27s", "Distribution of players:" );
qwho.c | 347 | this_player()->query_cols() - 27) / (sizeof(guilds));
qwho.c | 348 | sizeof(guilds);
qwho.c | 349 | sprintf( "%" + j + ".3s", guilds[i] );
qwho.c | 354 | this_player()->query_cols() - 27);
qwho.c | 355 | sprintf( "%-" + j + "s", "   Average age" );
qwho.c | 359 | sprintf( "%" + j + "s", "Lowest" );
qwho.c | 360 | sprintf( "%" + j + "s", "Average" );
qwho.c | 361 | sprintf( "%" + j + "s", "Highest" );
qwho.c | 371 | sprintf( "%-24.24s", place );
qwho.c | 372 | sprintf( "%3.1i", players[place][1] );
qwho.c | 386 | sprintf( "%"+ j +".1i", players[place][2][0] );
qwho.c | 389 | sprintf( "%"+ j +".1i", players[place][2][2] );
qwho.c | 395 | sizeof(guilds);
qwho.c | 418 | sprintf( "%-24.24s", ("  - " + zone) );
qwho.c | 419 | sprintf( "%3.1i", zones[zone][0] );
qwho.c | 434 | sprintf( "%"+ j +".1i", zones[zone][1][0] );
qwho.c | 437 | sprintf( "%"+ j +".1i", zones[zone][1][2] );
qwho.c | 443 | sizeof(guilds);
qwho.c | 475 | write("$P$Distribution$P$" + ret);
data.c | 17 | write("You cannot dump a player object.\n");
data.c | 22 | debug_info( 2, ob ) + "\n", "Data" );
data.c | 29 | return ({ "<indirect:wiz-present>", (: cmd($1, 0) :) });
ftpwho.c | 16 | write("MUD FTP is currently disabled.\n");
ftpwho.c | 18 | query_connections();
ftpwho.c | 20 | write("People currently using MUD FTP :\n");
ftpwho.c | 22 | write(" - "+who[i]+"\n");
ftpwho.c | 24 | write("No one is using MUD FTP at the moment.\n");
ftpwho.c | 27 | query_connections();
ftpwho.c | 29 | write("People currently using UNIX FTP :\n");
ftpwho.c | 31 | write(" - "+who_unix[i]+"\n");
ftpwho.c | 33 | write("No one is using UNIX FTP at the moment.\n");
setmin.c | 22 | notify_fail("Must have a $N and a $F in your entry message.\n");
setmin.c | 23 | set_msgin(str);
setmin.c | 24 | write("Ok.\n");
setmin.c | 27 | notify_fail("You are not allowed that power yet.\n");
setmin.c | 31 | return ({ "<string>", (: cmd($4[0]) :) });
twiki.c | 11 | add_failed_mess("The number of days must be higher than 0.\n");
twiki.c | 21 | find_changes(time() - days * DAY);
twiki.c | 22 | write(str);
twiki.c | 29 | query_file(fname);
twiki.c | 31 | add_failed_mess("The twiki file " + fname + " does not exist.\n");
twiki.c | 35 | write("$P$" + fname + "$P$" + str);
twiki.c | 41 | cmd_file($4[0]) :) });
dir_s.c | 19 | this_player()->query_property("dir list");
dir_s.c | 23 | do_command(stuff, str);
dir_s.c | 28 | cmd($4[0]) :) });
loc_alcmd.c | 29 | member_array(flag, flag_types, 1);
loc_alcmd.c | 36 | actions_defined(this_player());
loc_alcmd.c | 38 | wiz_present(str, this_player());
loc_alcmd.c | 40 | notify_fail("Could not find "+str+" to get the commands off.\n");
loc_alcmd.c | 43 | map(obs, (: actions_defined($1) :));
loc_alcmd.c | 47 | actions_defined(0, 0, flags);
loc_alcmd.c | 49 | wiz_present(str, this_object());
loc_alcmd.c | 51 | notify_fail("Could not find "+str+" to get the commands off.\n");
loc_alcmd.c | 56 | actions_defined(obs, 0, flags);
loc_alcmd.c | 58 | map(obs, (: actions_defined($1, 0, $(flags)) :));
loc_alcmd.c | 61 | sizeof(junk);
loc_alcmd.c | 94 | implode( coms, "\n" ) ), "Commands" );
loc_alcmd.c | 99 | destruct(this_object());
loc_alcmd.c | 103 | dest_me();
loc_alcmd.c | 107 | dest_me();
mudinfo.c | 23 | pretty_time(int tim, int len);
mudinfo.c | 36 | rusage();
mudinfo.c | 37 | uptime() / 10.0);
mudinfo.c | 39 | objects((: num_obs++ :));
mudinfo.c | 40 | implode(users(), (:$1[compressedp($2)]++, $1:), ({0,0}));
mudinfo.c | 55 | PAD("Memory usage", memory_info());
mudinfo.c | 57 | tell_object(this_player(), tmp);
mudinfo.c | 84 | sizeof(bits);
mudinfo.c | 88 | implode(bits, ", ");
inv.c | 11 | reference_allowed( $1, $( this_player() ) ) :) );
inv.c | 15 | environment( ob ) ) + ":\n" );
inv.c | 17 | desc_f_object( $1 ) :) ), "\n" ) + "\n" );
inv.c | 27 | return ({ "[of] <indirect:wiz-present>", (: cmd($1) :) });
tcheck.c | 21 | seteuid(geteuid(this_player()));
tcheck.c | 23 | notify_fail("Usage: tcheck <file name>\n");
tcheck.c | 26 | this_player()->query_name();
tcheck.c | 28 | notify_fail("Directory: " + wiz_dir + " does not exist.\n");
tcheck.c | 40 | notify_fail("File: " + str + " does not exist or is a directory.\n");
tcheck.c | 44 | if (find_object(file)) file->dest_me();
tcheck.c | 45 | if (file_size(file+".c")>0) rm(file+".c");
tcheck.c | 50 | dest_me_in_exec_temp() { destruct(this_object());
tcheck.c | 52 | catch(ret = (mixed) file->force_load());
tcheck.c | 53 | if (err==0) printf("%s loaded ok.\n", str);
tcheck.c | 54 | if (find_object(file)) file->dest_me_in_exec_temp();
tcheck.c | 55 | rm(file+".c");
tcheck.c | 60 | destruct(this_object());
tcheck.c | 64 | dest_me();
tcheck.c | 68 | dest_me();
tra_ns.c | 21 | write("Transport who ?\n");
tra_ns.c | 26 | write(WIZ_PRESENT->desc_object(ob)+" is already here.\n");
tra_ns.c | 29 | tell_object( ob, "You are magically transferred somewhere.\n" );
tra_ns.c | 31 | query_mmsgin(), (string)ob->query_mmsgout() );
tra_ns.c | 34 | base_name(environment(this_player())));
tra_ns.c | 40 | destruct(this_object());
tra_ns.c | 44 | dest_me();
tra_ns.c | 48 | dest_me();
delevent.c | 13 | lower_case(s1);
delevent.c | 14 | lower_case(s2);
delevent.c | 17 | write("No such player: "+who+".  \n");
delevent.c | 26 | capitalize(who) + "'s dossier.  \n");
perm_it.c | 59 | help();
perm_it.c | 69 | seteuid("Root");
perm_it.c | 71 | notify_fail("Something went wrong.\n");
perm_it.c | 72 | this_player()->get_path(path);
perm_it.c | 78 | notify_fail("The path " + path + " does not exist.\n");
perm_it.c | 81 | explode(replace_string(euid, " ", ""), ",") - ({ "none" });
perm_it.c | 91 | query_multiple_short(euids) + ".\n");
perm_it.c | 94 | notify_fail("Unable to assign the directory, not creator names?\n");
perm_it.c | 100 | notify_fail("You do not have permission to add read access.\n");
perm_it.c | 101 | return (int)master()->add_read_permission(euid, path);
perm_it.c | 109 | return (int)master()->add_write_permission(euid, path);
perm_it.c | 115 | notify_fail("You do not have permission to add grant access.\n");
perm_it.c | 116 | return (int)master()->add_grant_permission(euid, path);
perm_it.c | 121 | notify_fail("You don't have permission to lock paths.\n");
perm_it.c | 124 | notify_fail("You don't have permission to lock paths there.\n");
perm_it.c | 125 | return (int)master()->lock_path(path);
perm_it.c | 132 | return (int)master()->remove_read_permission(euid, path);
perm_it.c | 140 | return (int)master()->remove_write_permission(euid, path);
perm_it.c | 148 | return (int)master()->remove_grant_permission(euid, path);
perm_it.c | 153 | notify_fail("You don't have permission to lock paths.\n");
perm_it.c | 156 | notify_fail("You don't have permission to lock paths there.\n");
perm_it.c | 157 | return (int)master()->unlock_path(path);
perm_it.c | 161 | help();
perm_it.c | 173 | master()->query_directory_assignments();
perm_it.c | 175 | catch(new_assignments = ("/d/" + domain + "/master")->query_directory_assignments());
perm_it.c | 182 | filter (assignments, (: strsrch ($1, $(dir)) != -1 :));
perm_it.c | 184 | sort_array( keys( assignments ), "list_before", this_object() );
perm_it.c | 185 | sort_array( keys( assignments ), 1 );
perm_it.c | 186 | sprintf("%40-s Assigned To\n", "Path");
perm_it.c | 188 | sprintf("%-40s %s\n", path, query_multiple_short(assignments[path]));
perm_it.c | 190 | write("$P$Directory Assignments$P$" + ret);
perm_it.c | 204 | master()->query_directory_assignments();
perm_it.c | 206 | catch(new_assignments = ("/d/" + domain + "/master")->query_directory_assignments());
perm_it.c | 213 | filter (assignments, (: strsrch ($1, $(dir)) != -1 :));
perm_it.c | 215 | sort_array( keys( assignments ), "list_before", this_object() );
perm_it.c | 216 | sort_array( keys( assignments ), 0 );
perm_it.c | 219 | explode(path, "/");
perm_it.c | 221 | do_update_directory_assignment(("/d/" + bits[1] + "/master")->query_lord(), assignments[path][0], path, (: 1 :));
perm_it.c | 223 | do_update_directory_assignment("nobody", assignments[path][0], path, (: 1 :));
perm_it.c | 225 | write("Updated " + path + " to " + assignments[path][0] + "\n");
perm_it.c | 228 | write("$P$Directory Assignments$P$" + ret);
perm_it.c | 237 | master()->query_permissions();
perm_it.c | 241 | write("There are no permissions for "+str+".\n");
perm_it.c | 250 | sort_array( keys( perms ), "list_before", this_object() );
perm_it.c | 251 | sort_array( keys( perms ), 1 );
perm_it.c | 255 | sprintf("%11-s    Path\n", "Euid");
perm_it.c | 257 | sizeof(paths);
perm_it.c | 258 | keys(perms[paths[i]]);
perm_it.c | 259 | sizeof(euids);
perm_it.c | 263 | sprintf("%11-s LCK %s\n", euids[j], paths[i]);
perm_it.c | 271 | this_player()->more_string( ret, "Permissions", 1 );
perm_it.c | 282 | this_player()->query_name(), "cheat" );
perm_it.c | 285 | this_player()->query_name() +"\n" :));
perm_it.c | 286 | notify_fail( "Failed.\n" );
perm_it.c | 288 | master()->query_permissions();
perm_it.c | 295 | write( "No creator: "+ creator +".\n" );
perm_it.c | 297 | master()->remove_read_permission( creator, path );
perm_it.c | 299 | master()->remove_write_permission( creator, path );
perm_it.c | 301 | master()->remove_grant_permission( creator, path );
perm_it.c | 308 | write( "Access to / supercedes "+ path +" for "+ creator +".\n" );
perm_it.c | 310 | master()->remove_read_permission( creator, path );
perm_it.c | 312 | master()->remove_write_permission( creator, path );
perm_it.c | 314 | master()->remove_grant_permission( creator, path );
perm_it.c | 317 | explode( path, "/" );
perm_it.c | 328 | master()->remove_read_permission( creator, path );
perm_it.c | 330 | master()->remove_write_permission( creator, path );
perm_it.c | 332 | master()->remove_grant_permission( creator, path );
setmout.c | 23 | notify_fail("Must have a $N and a $T in your exit message.\n");
setmout.c | 24 | set_msgout(str);
setmout.c | 25 | write("Ok.\n");
setmout.c | 28 | notify_fail("You are not allowed that power yet.\n");
setmout.c | 32 | return ({ "<string>", (: cmd($4[0]) :) });
net_stat.c | 19 | this_player()->query_property("netstat list");
net_stat.c | 23 | do_command(stuff, str);
net_stat.c | 28 | cmd($4[0]) :) });
fixed.c | 15 | sprintf("%-15s %s\n", row["Fixer"], "" + row["bing"]);
fixed.c | 20 | more_string(ret, "details");
fixed.c | 40 | finish_request($1, $2, $(this_player())) :));
fixed.c | 41 | add_succeeded_mess("");
fixed.c | 46 | return ({ "<string'person|all'>", (: cmd($4[0]) :) });
go_to.c | 27 | notify_fail("Teleport where?\n");
go_to.c | 29 | this_player()->expand_nickname(str);
go_to.c | 30 | find_living(nick);
go_to.c | 32 | this_player()->get_obvar(str);
go_to.c | 34 | notify_fail("You look around and realise you are already there.\n");
go_to.c | 35 | this_player()->set_last_location(base_name(environment(this_player())));
go_to.c | 38 | this_player()->query_mmsgout() );
go_to.c | 47 | this_player()->set_last_location(base_name(environment(this_player())));
go_to.c | 50 | this_player()->query_mmsgout() );
go_to.c | 53 | notify_fail(capitalize(nick) + " is not standing in a location.\n");
go_to.c | 55 | this_player()->get_cfiles(str);
go_to.c | 61 | notify_fail("No such room.\n");
go_to.c | 67 | load_object(str);
go_to.c | 69 | notify_fail("Failed to load " + str + "\n");
go_to.c | 71 | notify_fail("Not a room: " + str + "\n");
go_to.c | 74 | notify_fail("You look around and realise you are already there.\n");
go_to.c | 79 | environment(this_player())->query_property("terrain name");
go_to.c | 92 | this_player()->query_mmsgout() );
go_to.c | 99 | destruct(this_object());
go_to.c | 103 | dest_me();
go_to.c | 107 | dest_me();
compare2.c | 10 | the_short();
compare2.c | 11 | the_short();
compare2.c | 36 | query_name() :) );
compare2.c | 39 | query_name() ] = ({ });
compare2.c | 43 | format_data( $2, $(player1), $(player2) ) :) ) ), "\n" );
compare2.c | 45 | tell_object( this_player(), "$P$compare$P$" + mess + "." );
compare2.c | 49 | describe_objects( player1, player2 );
compare2.c | 50 | describe_objects( player2, player1 );
compare2.c | 57 | cmd( $1[0][0], $1[1][0] ) :) });
upg_rade.c | 16 | seteuid(geteuid(this_player()));
upg_rade.c | 17 | clone_object("/secure/login"))->do_upgrade(this_player());
upg_rade.c | 22 | destruct(this_object());
upg_rade.c | 26 | dest_me();
upg_rade.c | 30 | dest_me();
findr_edef.c | 2 | variables(ob);
findr_edef.c | 4 | if(member_array(varname, variables) >
findr_edef.c | 5 | map(inherit_list(ob), (:find_object:));
findr_edef.c | 8 | find_stuff(obj, varname);
findr_edef.c | 12 | file_name(ob)});
findr_edef.c | 19 | find_stuff(ob, var);
findr_edef.c | 20 | if(sizeof(files) >
findr_edef.c | 24 | write("No redefinition found.\n");
findr_edef.c | 29 | return ({"<indirect:wiz-present> <word'global'>", (:cmd($1[0], $4[1]):)});
ho_me.c | 13 | write("Usage : alias home goto <wherever> :)\n");
ho_me.c | 18 | destruct(this_object());
ho_me.c | 22 | dest_me();
ho_me.c | 26 | dest_me();
todo.c | 29 | create();
todo.c | 32 | seteuid("Root");
todo.c | 47 | read_file("/w/" + player + "/save/todo_list.o");
todo.c | 49 | return ({ });
todo.c | 51 | restore_variable(data);
todo.c | 53 | return ({ });
todo.c | 61 | new(class todo_item);
todo.c | 66 | time();
todo.c | 67 | time();
todo.c | 82 | save_variable(todo_lists[player]);
todo.c | 83 | write_file("/w/" + player + "/save/todo_list.o", data, 1);
todo.c | 91 | time();
todo.c | 93 | call_out((: save_todo_lists :), 120);
todo.c | 102 | query_todo_list(player);
todo.c | 138 | lower_case(priority);
todo.c | 182 | strcmp(bing->type, bing2->type);
todo.c | 184 | return (bing2->priority & TODO_PRIORITY_MASK) - (bing->priority & TODO_PRIORITY_MASK);
todo.c | 191 | sort_array(data, (: sort_function :));
todo.c | 201 | query_todo_line(bing, brief, this_player()->query_cols());
todo.c | 211 | query_todo_list(this_player()->query_name());
todo.c | 213 | query_todo_list_string(items, brief);
todo.c | 217 | write("$P$Todo list$P$" + data);
todo.c | 218 | add_succeeded_mess("");
todo.c | 226 | query_todo_list(player);
todo.c | 228 | filter(items, (: !($1->priority & TODO_PRIVATE) :));
todo.c | 229 | query_todo_list_string(items, 0);
todo.c | 233 | write("$P$Todo list$P$" + data);
todo.c | 234 | add_succeeded_mess("");
todo.c | 242 | query_todo_list(this_player()->query_name());
todo.c | 243 | filter(items, (: ($1->priority & TODO_PRIORITY_MASK) == $(priority) :) );
todo.c | 245 | query_todo_list_string(items, 0);
todo.c | 249 | write("$P$Todo list$P$" + data);
todo.c | 250 | add_succeeded_mess("");
todo.c | 258 | lower_case(type);
todo.c | 259 | query_todo_list(this_player()->query_name());
todo.c | 260 | filter(items, (: $1->type == $(type) :) );
todo.c | 262 | query_todo_list_string(items, 0);
todo.c | 266 | write("$P$Todo list$P$" + data);
todo.c | 267 | add_succeeded_mess("");
todo.c | 276 | query_priority_number(priority);
todo.c | 283 | if (strlen(type) >
todo.c | 284 | add_failed_mess("The type cannot be more than 10 characters long.\n");
todo.c | 295 | new(class todo_item);
todo.c | 298 | lower_case(type);
todo.c | 299 | query_next_id(this_player()->query_name());
todo.c | 300 | time();
todo.c | 304 | query_todo_list(this_player()->query_name());
todo.c | 306 | sort_todo_list(data);
todo.c | 307 | set_todo_list(this_player()->query_name(), data);
todo.c | 317 | lower_case(response);
todo.c | 319 | write("Ok, canceling the completion of the item.\n");
todo.c | 322 | query_todo_list(this_player()->query_name());
todo.c | 326 | set_todo_list(this_player()->query_name(), data);
todo.c | 327 | write("Ok, completed list id #" + id + ".\n");
todo.c | 331 | write("Unable to find the item.  Someone must have run off with it!\n");
todo.c | 350 | query_todo_list(this_player()->query_name());
todo.c | 351 | find_todo_id(data, id);
todo.c | 355 | input_to((: confirm_complete_item :), 0, id);
todo.c | 358 | add_failed_mess("Unable to find an item of id #" + id + " to complete.\n");
todo.c | 367 | query_priority_number(new_priority);
todo.c | 374 | query_todo_list(this_player()->query_name());
todo.c | 375 | find_todo_id(data, id);
todo.c | 380 | set_todo_list(this_player()->query_name(), data);
todo.c | 392 | query_todo_list(this_player()->query_name());
todo.c | 393 | find_todo_id(data, id);
todo.c | 396 | set_todo_list(this_player()->query_name(), data);
todo.c | 427 | save_todo_lists();
todo.c | 428 | dest_me();
compare.c | 7 | allocate(2);
compare.c | 8 | allocate(2);
compare.c | 9 | allocate(2);
compare.c | 12 | allocate(2);
compare.c | 13 | allocate(2);
compare.c | 16 | sscanf( words, "%s with %s", name[0], name[1] );
compare.c | 18 | this_player()->expand_nickname( name[i] );
compare.c | 22 | notify_fail("No such player - " + name[i] + ".\n");
compare.c | 23 | all_inventory( person[i] );
compare.c | 26 | if( thing->query_cloned_by() == name[!i] ) tmp += ({ thing });
compare.c | 48 | write(mess[1] + "\n" + mess[0]);
compare.c | 49 | tell_creator("mansarde", "\nwords: %s\nmatching: %O\n", words, matching );
stats.c | 34 | query_guild_ob();
stats.c | 37 | query_name();
stats.c | 53 | call_other(user, "query_real_" + stat);
stats.c | 73 | write("stat: min max mode ave\n");
stats.c | 78 | printf("\n%s:\n", guild_ob);
stats.c | 95 | printf("%-#*s", this_player()->query_cols(), str);
stats.c | 98 | printf("\n");
stats.c | 122 | call_other(user, "query_real_" + stat);
stats.c | 133 | notify_fail("No players in that guild.\n");
stats.c | 135 | write("\nStats for " + guild + "\n");
stats.c | 138 | printf("%-13s", "   " + capitalize(stat));
stats.c | 139 | write("\n");
stats.c | 146 | printf("%2d %-10s", val, tstr);
stats.c | 148 | write("\n");
stats.c | 170 | replace(user->query_guild_ob(), "/std/guilds/", "");
stats.c | 174 | call_other(user, "query_real_" + st);
stats.c | 183 | notify_fail("No players in that guild.\n");
stats.c | 185 | write("\nValues for " + capitalize(st) + "\n");
stats.c | 187 | printf("%-13s", "   " + capitalize(guild));
stats.c | 188 | write("\n");
stats.c | 196 | printf("%2d %-10s", val, tstr);
stats.c | 198 | write("\n");
stats.c | 211 | write("Guild Primaries\n");
stats.c | 214 | write(guild + "\n");
stats.c | 220 | query_skill_stat(skill);
stats.c | 221 | sizeof(stats);
stats.c | 222 | sizeof(stats);
stats.c | 223 | get_stat(stats[i..i]);
stats.c | 229 | capitalize(st), (count[st] * 100) / total);
stats.c | 231 | printf("%-#*s", this_player()->query_cols(), str);
stats.c | 232 | write("\n");
stats.c | 244 | write("Guild Primaries\n");
stats.c | 247 | write(tree + "\n");
stats.c | 252 | query_skill_stat(skill);
stats.c | 253 | sizeof(stats);
stats.c | 254 | sizeof(stats);
stats.c | 255 | get_stat(stats[i..i]);
stats.c | 261 | capitalize(st), (count[st] * 100) / total);
stats.c | 263 | printf("%-#*s", this_player()->query_cols(), str);
stats.c | 264 | write("\n");
stats.c | 277 | skills() :) });
gna_.c | 13 | query_verb();
gna_.c | 22 | filter( obs, (: !$1->check_earmuffs( "remote-soul" ) :) );
gna_.c | 23 | this_player() });
gna_.c | 27 | query_multiple_short( obs ) + ".\n" );
gna_.c | 38 | write( capitalize( gn ) + "\n" );
gna_.c | 43 | cmd($6, 0) :) });
gna_.c | 46 | cmd($6, $1) :) });
gna_.c | 50 | cmd($6, $1) :) });
playerskills.c | 30 | sizeof( args ) ;
playerskills.c | 33 | query_skill( tp );
playerskills.c | 34 | reset_eval_cost();
playerskills.c | 41 | query_skill_bonus( tp ) );
playerskills.c | 67 | query_skills();
playerskills.c | 69 | notify_fail( "Usage: "+ query_verb() +" <skill>\n" );
playerskills.c | 76 | rec_list( args, word, 1, 1, 0, pl ) );
playerskills.c | 77 | this_player()->more_string( result, "Skills" );
playerskills.c | 79 | this_player()->add_succeeded(players[0]);
playerskills.c | 90 | query_skills();
playerskills.c | 94 | rec_list( args, "", ( member_array( "all", bits ) != -1 ), 1, 0, pl ) );
playerskills.c | 95 | this_player()->more_string( result, "Skills" );
playerskills.c | 97 | this_player()->add_succeeded(players[0]);
playerskills.c | 114 | real_cmd( indirect_obs, skill );
playerskills.c | 118 | tell_object( this_player(), "Not viewing skills.\n" );
playerskills.c | 123 | check_response( "Y", indirect_obs, skill );
playerskills.c | 133 | query_multiple_short( indirect_obs ) + "'s skill tree.\n" );
playerskills.c | 135 | input_to( (: check_response :), 0, indirect_obs, skill );
playerskills.c | 143 | cmd($1, 0) :) });
fetch.c | 21 | if ( sizeof( indirect_obs[ 1 ] ) >
fetch.c | 31 | move( $(player), "$N appear$s in your inventory." ) != MOVE_OK :) );
fetch.c | 38 | the_short() + ".\n" );
fetch.c | 44 | implode( success->short(), "," ) + " from /room/broken.");
fetch.c | 58 | cmd($1) :) });
guildl_ist.c | 26 | explode((string)ob->query_guild_ob(), "/");
guildl_ist.c | 31 | write("Guild memberships:\n");
guildl_ist.c | 33 | printf("  %s: %d\n", guild, guilds[guild]);
spell.c | 7 | tell_object(player, "Matches for " + word + ": None.\n");
spell.c | 14 | tell_object(player, "Error matching " + word + ": " + result);
spell.c | 20 | finish_lookup($(this_player()), $1, $2, $3) :));
spell.c | 21 | add_succeeded_mess("$N look$s up a word.\n");
spell.c | 26 | return ({ "<word>", (: cmd($4[0]) :) });
clubs.c | 20 | do_list(string extra, int width);
clubs.c | 21 | do_invalid(string extra, int width);
clubs.c | 30 | do_list(extra, this_player()->query_cols());
clubs.c | 33 | do_invalid(extra, this_player()->query_cols());
clubs.c | 43 | query_club_type(club);
clubs.c | 50 | query_club_name(club));
clubs.c | 53 | query_founder(club));
clubs.c | 57 | sprintf("%-15s ", member);
clubs.c | 59 | this_player()->fix_string("   " + tmp2 + "\n", width, 10);
clubs.c | 73 | strcmp($1, $2 ) :) );
clubs.c | 78 | club_line(club, width, (extra != "brief"));
clubs.c | 87 | write("No clubs matching " + extra + ".\n");
clubs.c | 89 | this_player()->more_string(tmp, "Clubs", 1);
clubs.c | 98 | query_club_name(club_name) + "'.\n");
clubs.c | 100 | environment(this_player())->query_property("place");
clubs.c | 104 | query_balance(club_name);
clubs.c | 107 | money_value_string(balance, place) + ".\n");
lpc_info.c | 13 | printf("%s", lpc_info());
lpc_info.c | 18 | destruct(this_object());
lpc_info.c | 22 | dest_me();
lpc_info.c | 26 | dest_me();
shutdown.c | 24 | seteuid(geteuid(this_player()));
shutdown.c | 25 | this_player()->query_name()+" at "+ctime(time());
shutdown.c | 28 | log_file("GAME_LOG", "Game shutdown by ");
shutdown.c | 29 | log_file("GAME_LOG", str);
shutdown.c | 31 | log_file("GAME_LOG", ctime(time()));
shutdown.c | 33 | log_file("GAME_LOG", " for\n");
shutdown.c | 34 | log_file("GAME_LOG", num + " " + reason);
shutdown.c | 35 | log_file("GAME_LOG", "\n\n");
shutdown.c | 37 | write("Ok... shutting down game... \n");
shutdown.c | 43 | end_it_all(reason);
shutdown.c | 45 | shut(tim, reason);
status.c | 18 | this_player()->more_string(mud_status(1), "Status info");
status.c | 20 | printf("%s", mud_status());
status.c | 26 | cmd("detailed") :) });
dump.c | 13 | write(WIZ_PRESENT->desc_object(ob) + ":\n" + debug_info(0, ob) + "\n");
dump.c | 19 | return ({ "<indirect:wiz-present>", (: cmd($1) :) });
cloner.c | 17 | this_player()->get_files(file);
cloner.c | 20 | query_changes();
cloner.c | 29 | ctime(changes[change][1] + LIFE_TIME));
cloner.c | 31 | this_player()->more_string( ret, "Cloner list", 1 );
cloner.c | 38 | seteuid(geteuid(this_player()));
cloner.c | 40 | this_player()->get_files(source);
cloner.c | 42 | notify_fail("No source files found.\n");
cloner.c | 44 | this_player()->get_path(dest);
cloner.c | 46 | notify_fail("Destination must be a directory.\n");
cloner.c | 52 | notify_fail("Error moving RCS directory to temp location.\n");
cloner.c | 56 | write("Not moving directory: " + source + "\n");
cloner.c | 58 | explode(source, "/");
cloner.c | 64 | add_mapping(source, dest);
cloner.c | 69 | notify_fail("Error moving RCS directory.\n");
cloner.c | 75 | add_mapping(source, dest);
cloner.c | 80 | remove_mapping(source);
mobs.c | 13 | objects((:$(m)[base_name($1)]++,reset_eval_cost():));
mobs.c | 17 | objects((:environment($1) && $(m)[base_name($1)]++:));
mobs.c | 22 | base_name($1)]++:));
mobs.c | 25 | keys(filter(m, (:$2 > COUNT:)));
mobs.c | 32 | reset_eval_cost();
mobs.c | 35 | filter(children(ob), (:environment($1):));
mobs.c | 37 | children(ob);
mobs.c | 42 | filter(m, (:$2 > COUNT:));
mobs.c | 44 | keys(m);
mobs.c | 49 | desc_f_object(thing));
mobs.c | 55 | sprintf("/w/%s/mobs", this_player()->query_name());
mobs.c | 56 | printf("Saving to %s.\n", ob);
mobs.c | 57 | this_player()->more_string(ret);
mobs.c | 58 | seteuid(geteuid(this_player()));
mobs.c | 59 | unguarded((:rm($(ob)),write_file($(ob), $(ret)):));
mobs.c | 65 | cmd($4[0]) :) });
hous_ing.c | 16 | this_player()->get_files(fname);
hous_ing.c | 18 | this_player()->get_files(fname + ".c");
hous_ing.c | 26 | get_file(house);
hous_ing.c | 29 | notify_fail("No such house.\n");
hous_ing.c | 31 | remove_house(house);
hous_ing.c | 32 | write("House removed.\n");
hous_ing.c | 39 | get_file(house);
hous_ing.c | 42 | notify_fail("House does not exist.\n");
hous_ing.c | 44 | load_object(house);
hous_ing.c | 45 | find_object(house);
hous_ing.c | 47 | add_failed_mess("The file " + house + " is not a player house.\n");
hous_ing.c | 51 | add_house(house, ({ }), address, region, rented);
hous_ing.c | 52 | write("House added.\n");
hous_ing.c | 59 | get_file(house);
hous_ing.c | 61 | notify_fail("House does not exist.\n");
hous_ing.c | 63 | notify_fail("That house is not registered.\n");
hous_ing.c | 65 | query_rooms(house) - ({ house });
hous_ing.c | 66 | modify_house(house, rooms, address, region, rented);
hous_ing.c | 67 | write("House modified.\n");
hous_ing.c | 76 | get_file(house);
hous_ing.c | 78 | notify_fail("No such house.\n");
hous_ing.c | 81 | this_player()->get_files(room);
hous_ing.c | 84 | notify_fail("That room doesn't exist.\n");
hous_ing.c | 87 | force_load();
hous_ing.c | 88 | find_object(house);
hous_ing.c | 90 | add_failed_mess("The start point is not a player house!\n");
hous_ing.c | 102 | write("Error adding room " + room + ".\n");
hous_ing.c | 104 | write("Room added [" + room + "]\n");
hous_ing.c | 112 | get_file(house);
hous_ing.c | 114 | notify_fail("No such house.\n");
hous_ing.c | 117 | notify_fail("Error removing room.\n");
hous_ing.c | 119 | write("Room removed.\n");
hous_ing.c | 129 | notify_fail("No such user " + owner + ".\n");
hous_ing.c | 131 | get_file(house);
hous_ing.c | 134 | notify_fail("Error changing owner.\n");
hous_ing.c | 136 | write("Owner set to " + owner + ".\n");
hous_ing.c | 146 | debug_printf("search: %s", search);
hous_ing.c | 149 | get_file(search);
hous_ing.c | 159 | implode(HOUSING->query_rooms(house), ", "));
hous_ing.c | 165 | if(search && strlen(search) >
hous_ing.c | 179 | stringp(HOUSING->query_region(house))?HOUSING->query_region(house):"Bad region"));
hous_ing.c | 193 | write("$P$Housing$P$" + str);
hous_ing.c | 198 | get_file(house);
hous_ing.c | 200 | add_failed_mess("Unable to set the house " + house + " up for sale.\n");
hous_ing.c | 203 | write("Set the house up for sale.\n");
hous_ing.c | 215 | if(search && strlen(search) >
hous_ing.c | 224 | query_region(house));
hous_ing.c | 238 | write("$P$Housing$P$" + str);
testchar.c | 19 | this_player() ) );
testchar.c | 22 | add_property( property, value );
testchar.c | 26 | remove_property( property );
testchar.c | 31 | save_me();
testchar.c | 44 | return ({ "<indirect:player> {on|off}", (: cmd($1[0], $4[1]) :) });
netdups.c | 12 | this_player()->query_property("netdups list");
netdups.c | 24 | cmd($4[0]) :) });
which.c | 16 | actions_defined(this_player(), 0, 12);
which.c | 17 | sizeof(junk);
which.c | 19 | function_exists((string)junk[i+1][1], (object)junk[i+1][0]);
which.c | 21 | base_name((object)junk[i+1][0]);
which.c | 26 | new(class command, verb : str);
which.c | 30 | map(coms, (: $1 + "/" + $(cmd->verb) :));
which.c | 33 | this_player()->query_parse_command_objects(str);
which.c | 35 | map(coms, (: base_name($1) :));
which.c | 41 | notify_fail("Command " + str + " not found.\n");
which.c | 45 | implode(files, (: $1 + "    " + $2 + "\n" :), ""));
which.c | 59 | this_player()->query_p_objects();
which.c | 76 | if ( strlen( command ) >
which.c | 77 | strlen( command );
which.c | 86 | sort_array( keys( data ), 1 );
which.c | 96 | implode( map( data[ command ], (: file_name :) ), ", " ) );
which.c | 101 | tell_object( this_player(), txt );
which.c | 109 | cmd($4[0]) :) });
sockets.c | 9 | this_player()->more_string(dump_socket_status());
scorepl_ayer.c | 9 | write("Quests score for " + play->the_short() + ":\n");
scorepl_ayer.c | 10 | score_quests(play);
scorepl_ayer.c | 19 | write("Stats score for " + play->the_short() + ":\n");
scorepl_ayer.c | 20 | score_stats(play, "verbose");
scorepl_ayer.c | 29 | write("Score for " + play->the_short() + ":\n");
scorepl_ayer.c | 30 | score_normal(play, "verbose");
scorepl_ayer.c | 38 | score_normal($1) :) });
errors.c | 35 | query_name()]->last_touched = time();
errors.c | 37 | sizeof(errors);
errors.c | 49 | query_name()]->last_touched = time();
errors.c | 50 | sizeof(_user_query[person->query_name()]->errors);
errors.c | 59 | query_name()]->last_touched = time();
errors.c | 84 | tell_object(person, "%^BOLD%^%^RED%^Error: " + data + "%^RESET%^\n");
errors.c | 152 | if (sizeof(complete->replies) >
errors.c | 155 | if (sizeof(complete->comments) >
errors.c | 159 | set_finish_func("finish_more_details", this_object());
errors.c | 160 | tell_object(person, "$P$Bug #" + details->summary->id + "$P$" + ret);
errors.c | 166 | this_player();
errors.c | 167 | write(menu_line(ob));
errors.c | 168 | input_to("menu_response");
errors.c | 196 | tell_object(person, "Database error: " + mess);
errors.c | 198 | tell_object(person, menu_line(person));
errors.c | 207 | tell_object(person, menu_line(person));
errors.c | 219 | tell_object(person, "Message aborted.\n");
errors.c | 221 | tell_object(person, menu_line(person));
errors.c | 234 | strsrch("$report$", mess);
errors.c | 238 | replace_string(mess, "$report$", data->report);
errors.c | 242 | input_to("menu_response");
errors.c | 250 | tell_object(person, "Unhappily an error occured.\n");
errors.c | 252 | tell_object(person, menu_line(person));
errors.c | 280 | query_cap_name();
errors.c | 286 | query_cap_name();
errors.c | 293 | query_cap_name();
errors.c | 299 | query_cap_name();
errors.c | 305 | query_cap_name();
errors.c | 311 | query_cap_name();
errors.c | 317 | query_cap_name();
errors.c | 323 | query_cap_name();
errors.c | 330 | query_cap_name();
errors.c | 339 | tell_object(person, "Sql Error: " + mess);
errors.c | 340 | tell_object(person, menu_line(person));
errors.c | 346 | tell_object(person, menu_line(person));
errors.c | 355 | tell_object(person, "Sql Error: " + mess);
errors.c | 356 | tell_object(person, menu_line(person));
errors.c | 362 | tell_object(person, menu_line(person));
errors.c | 371 | tell_object(person, "Sql Error: " + mess);
errors.c | 372 | tell_object(person, menu_line(person));
errors.c | 378 | tell_object(person, menu_line(person));
errors.c | 384 | tell_object(person, "SQL Error: " + mess);
errors.c | 385 | tell_object(person, menu_line(person));
errors.c | 388 | tell_object(person, "Added a comment to the bug.\n");
errors.c | 389 | tell_object(person, menu_line(person));
errors.c | 394 | write("Aborted adding the comment.\n");
errors.c | 395 | write(menu_line(person));
errors.c | 396 | input_to("menu_response");
errors.c | 399 | input_to("menu_response");
errors.c | 402 | write("Big bad error.\n");
errors.c | 403 | write(menu_line(person));
errors.c | 410 | tell_object(person, "Error doing stuff.");
errors.c | 422 | write("A horrible error occured.\n");
errors.c | 437 | finish_status_message(person, status, command, 0, "");
errors.c | 439 | finish_status_message(person, status, command, subject, mess);
errors.c | 449 | tell_object(person, "Error doing stuff.\n");
errors.c | 460 | tell_object(person, "Error doing stuff.\n");
errors.c | 471 | tell_object(person, "Error doing stuff.\n");
errors.c | 487 | cat_file("/doc/creatornr/errors", 1);
errors.c | 489 | create_nroff("/doc/creator/commands/errors", "/doc/creatornr/errors");
errors.c | 490 | cat_file("/doc/creatornr/errors", 1);
errors.c | 492 | set_finish_func("finish_more_details", this_object());
errors.c | 493 | tell_object(player, "$P$Error help$P$" + str);
errors.c | 513 | this_player()->set_finish_func("finish_more_details", this_object());
errors.c | 514 | write("$P$Error list$P$" + str);
errors.c | 522 | query_verbose("errors");
errors.c | 524 | do_bug_details(player, data->errors[data->pos]->id, verbose);
errors.c | 530 | upper_case(name);
errors.c | 568 | tell_object(player, "SQL error: " + data + "\n");
errors.c | 573 | tell_object(player, "No bug found with an id of #" + id + "\n");
errors.c | 579 | query_name()] = new(class user_data);
errors.c | 583 | expand_short_type(status);
errors.c | 586 | expand_short_type(messtype);
errors.c | 587 | query_message_from_type(player, messtype, error);
errors.c | 588 | query_subject_from_type(messtype, error);
errors.c | 590 | tell_object(player, "The reply type " + messtype + " was not valid.\n");
errors.c | 594 | query_multiple_short(ERROR_TYPE) + ".\n");
errors.c | 597 | do_change_status(player, status, 1, subject, mess);
errors.c | 602 | query_message_from_type(player, status, error);
errors.c | 603 | query_subject_from_type(status, error);
errors.c | 606 | do_change_status(player, status, 1, subject, mess);
errors.c | 610 | tell_object(player, "Syntax: s {OPEN|FIXED|CONSIDERING|DENIED|THANKS|NOTPOSSIBLE|NOTREPRODUCIBLE|NOTENOUGHINFORMATION} [{none|custom|fixed|denied|notpossible|notreproducible|notenoughinformation}]\n");
errors.c | 611 | tell_object(player, "The default message is based on the type it is changed to.\n");
errors.c | 612 | tell_object(player, "The type has some short forms: o -> open, f -> fixed, d ->denied\n");
errors.c | 613 | tell_object(player, "   c ->considering, t -> thanks, n -> none, u -> custom, i -> fixing.\n");
errors.c | 614 | tell_object(player, "   r ->notreproducible, p -> notpossible, m -> notenoughinformation.\n");
errors.c | 615 | tell_object(player, "   t ->temporary.\n");
errors.c | 631 | explode(str, " ");
errors.c | 634 | write("You need to specify something to do.\n");
errors.c | 635 | write(menu_line(this_player()));
errors.c | 636 | input_to("menu_response");
errors.c | 645 | if (sizeof(bits) >
errors.c | 646 | show_current_bug(this_player(), bits[1] == "verbose");
errors.c | 648 | show_current_bug(this_player(), -1);
errors.c | 656 | show_current_bug(this_player(), -1);
errors.c | 658 | write("No next bug to go to.\n");
errors.c | 667 | show_current_bug(this_player(), -1);
errors.c | 669 | write("No previous bug to go to.\n");
errors.c | 677 | input_to("menu_response");
errors.c | 682 | write("Need to specify the destination directory (and nothing else)\n");
errors.c | 688 | if (sizeof(bits) >
errors.c | 689 | expand_short_type(bits[1]);
errors.c | 692 | if (sizeof(bits) >
errors.c | 693 | expand_short_type(bits[2]);
errors.c | 694 | query_message_from_type(this_player(), bits[2], error);
errors.c | 695 | query_subject_from_type(bits[1], error);
errors.c | 697 | write("The reply type " + bits[2] + " was not valid.\n");
errors.c | 702 | query_multiple_short(ERROR_TYPE) + ".\n");
errors.c | 706 | do_change_status(this_player(), bits[1], 0, subject, mess);
errors.c | 707 | input_to("menu_response");
errors.c | 711 | query_message_from_type(this_player(), bits[1], error);
errors.c | 712 | query_subject_from_type(bits[1], error);
errors.c | 715 | do_change_status(this_player(), bits[1], 0, subject, mess);
errors.c | 716 | input_to("menu_response");
errors.c | 720 | write("Syntax: s {OPEN|FIXED|CONSIDERING|DENIED|THANKS|NOTPOSSIBLE|NOTREPRODUCIBLE|NOTENOUGHINFORMATION} [{none|custom|fixed|denied|notpossible|notreproducible|notenoughinformation}]\n");
errors.c | 721 | write("The default message is based on the type it is changed to.\n");
errors.c | 722 | write("The type has some short forms: o -> open, f -> fixed, d ->denied\n");
errors.c | 723 | write("   c ->considering, t -> thanks, n -> none, u -> custom, i -> fixing.\n");
errors.c | 724 | write("   r ->notreproducible, p -> notpossible, m -> notenoughinformation.\n");
errors.c | 725 | write("   t ->temporary.\n");
errors.c | 729 | write("Syntax: s {OPEN|FIXED|CONSIDERING|DENIED|THANKS|NOTPOSSIBLE|NOTREPRODUCIBLE|NOTENOUGHINFORMATION} [{none|custom|fixed|denied|notpossible|notreproducible|notenoughinformation}]\n");
errors.c | 730 | write("The default message is based on the type it is changed to.\n");
errors.c | 731 | write("The type has some short forms: o -> open, f -> fixed, d ->denied\n");
errors.c | 732 | write("   c ->considering, t -> thanks, n -> none, u -> custom, i -> fixing.\n");
errors.c | 733 | write("   r ->notreproducible, p -> notpossible, m -> notenoughinformation.\n");
errors.c | 734 | write("   t ->temporary.\n");
errors.c | 740 | if (sizeof(bits) >
errors.c | 741 | upper_case(bits[1]);
errors.c | 743 | do_change_type(this_player(), bits[1]);
errors.c | 744 | input_to("menu_response");
errors.c | 747 | query_multiple_short(ERROR_TYPE) + ".\n");
errors.c | 751 | write("Syntax: t {TYPO|BUG|IDEA}\n");
errors.c | 757 | if (sizeof(bits) >
errors.c | 758 | upper_case(bits[1]);
errors.c | 760 | do_change_category(this_player(), bits[1]);
errors.c | 761 | input_to("menu_response");
errors.c | 764 | query_multiple_short(ERROR_CATEGORIES) + ".\n");
errors.c | 768 | write("Syntax: t {ROOM|OBJECT|COMMAND|HELP|RITUAL|SPELL|GENERAL}\n");
errors.c | 774 | if (sizeof(bits) >
errors.c | 775 | to_int(bits[1]);
errors.c | 778 | show_current_bug(this_player(), -1);
errors.c | 781 | find_index(this_player(), id);
errors.c | 783 | write("Unable to find the bug #" + id + "\n");
errors.c | 795 | do_comment(this_player());
errors.c | 799 | do_list_errors();
errors.c | 802 | write("Bye bye.\n");
errors.c | 805 | if (sizeof(bits) >
errors.c | 807 | write("You can only assign a bug to a creator.\n");
errors.c | 810 | do_assign_bug(this_player(), bits[1]);
errors.c | 811 | input_to("menu_response");
errors.c | 814 | write("You need to specify someone to assign the error to.\n");
errors.c | 819 | do_help(this_player());
errors.c | 822 | write("Bad command.\n");
errors.c | 827 | write(menu_line(this_player()));
errors.c | 828 | input_to("menu_response");
errors.c | 834 | tell_object(player, "Error: " + data + "\n");
errors.c | 838 | query_name()] = new(class user_data);
errors.c | 842 | tell_object(player, "No bugs with that query.\n");
errors.c | 845 | show_current_bug(player, -1);
errors.c | 850 | add_failed_mess("Unable to setup the query.\n");
errors.c | 859 | new (class error_query);
errors.c | 864 | add_failed_mess("Unable to setup the query.\n");
errors.c | 867 | write("Looking up bug #" + id + " to fix.\n");
errors.c | 874 | new (class error_query);
errors.c | 875 | this_player()->query_path();
errors.c | 879 | setup_query(this_player(), query);
errors.c | 885 | new (class error_query);
errors.c | 886 | lower_case(person);
errors.c | 889 | setup_query(this_player(), query);
errors.c | 895 | new (class error_query);
errors.c | 896 | lower_case(person);
errors.c | 899 | setup_query(this_player(), query);
errors.c | 903 | errors_assigned_to_person(this_player()->query_name());
errors.c | 910 | this_player()->get_path(str);
errors.c | 911 | new (class error_query);
errors.c | 916 | setup_query(this_player(), query);
errors.c | 922 | new (class error_query);
errors.c | 926 | setup_query(this_player(), query);
errors.c | 932 | new (class error_query);
errors.c | 936 | setup_query(this_player(), query);
errors.c | 942 | new (class error_query);
errors.c | 943 | file_name(environment(this_player()));
errors.c | 946 | setup_query(this_player(), query);
errors.c | 963 | errors_in_dir($4[0], 1) :) });
mv.c | 17 | seteuid(geteuid(this_player()));
mv.c | 20 | notify_fail("Usage : mv file [file|dir...]\n");
mv.c | 21 | explode(str, " ");
mv.c | 22 | this_player()->get_files(implode(fnames[0..sizeof(fnames) -2], " "));
mv.c | 24 | notify_fail("Usage : mv file [file|dir...]\n");
mv.c | 26 | this_player()->get_path(dest);
mv.c | 28 | write("No destination\n");
mv.c | 33 | explode(dest, "/");
mv.c | 35 | sscanf(temp[sizeof(temp)-1], "%s*%s", start, end);
mv.c | 36 | explode(implode(fnames[0..sizeof(fnames) -2], " "), "/");
mv.c | 37 | sscanf(temp[sizeof(temp)-1], "%s*%s", trash1, trash2);
mv.c | 38 | strlen(trash1);
mv.c | 40 | sizeof(filenames);
mv.c | 43 | write("No such file : " + str + "\n");
mv.c | 47 | explode(str, "/");
mv.c | 51 | file_size(dest);
mv.c | 54 | file_size(dest);
mv.c | 58 | explode(str, "/");
mv.c | 59 | file_size(dest + "/" + names[sizeof(names) - 1]);
mv.c | 63 | write("File exists : " + dest + "\n");
mv.c | 66 | rename(str, dest);
mv.c | 68 | write("Ok.\n");
mv.c | 73 | destruct(this_object());
mv.c | 77 | dest_me();
mv.c | 81 | dest_me();
setmmin.c | 22 | notify_fail("Must have a $N in your teleport entry message.\n");
setmmin.c | 23 | set_mmsgin(str);
setmmin.c | 24 | write("Ok.\n");
setmmin.c | 27 | notify_fail("You are not allowed that power yet.\n");
setmmin.c | 31 | return ({ "<string>", (: cmd($4[0]) :) });
terrain_s.c | 19 | environment(this_player())->query_map_handler();
terrain_s.c | 21 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 25 | environment(this_player())->query_terrain_coords();
terrain_s.c | 28 | query_debug_map(x, y, 13, x, y);
terrain_s.c | 29 | write(map);
terrain_s.c | 30 | add_succeeded_mess("");
terrain_s.c | 43 | environment(this_player())->query_map_handler();
terrain_s.c | 45 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 49 | query_area_map();
terrain_s.c | 54 | write("$P$Map$P$" + map);
terrain_s.c | 55 | add_succeeded_mess("");
terrain_s.c | 74 | environment(this_player())->query_map_handler();
terrain_s.c | 76 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 80 | environment(this_player())->query_co_ord();
terrain_s.c | 85 | query_features_at(x, y);
terrain_s.c | 87 | add_failed_mess("No distant features to list.\n");
terrain_s.c | 94 | query_feature_desc_from(x, y, z);
terrain_s.c | 106 | write("$P$Distant Features$P$" + ret);
terrain_s.c | 121 | environment(this_player())->query_map_handler();
terrain_s.c | 123 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 127 | query_features();
terrain_s.c | 128 | environment(this_player())->query_features();
terrain_s.c | 130 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 135 | add_failed_mess("No local features.\n");
terrain_s.c | 149 | write("$P$Features$P$" + ret);
terrain_s.c | 162 | environment(this_player())->query_map_handler();
terrain_s.c | 164 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 168 | query_features();
terrain_s.c | 171 | add_failed_mess("There is no feature called " + feature + ".\n");
terrain_s.c | 175 | query_debug_map_feature(feature);
terrain_s.c | 177 | write("$P$" + feature + "$P$" + ret);
terrain_s.c | 194 | environment(this_player())->query_map_handler();
terrain_s.c | 196 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 200 | environment(this_player())->query_co_ord();
terrain_s.c | 204 | query_features_at(x, y);
terrain_s.c | 207 | add_failed_mess("There is no distant feature " + feature + ".\n");
terrain_s.c | 211 | query_debug_map_feature_distant(feature);
terrain_s.c | 213 | write("$P$" + feature + "$P$" + ret);
terrain_s.c | 233 | environment(this_player())->query_map_handler();
terrain_s.c | 235 | add_failed_mess("You must be in a terrain to use this command.\n");
terrain_s.c | 241 | query_real_coords();
terrain_s.c | 247 | query_features();
terrain_s.c | 252 | environment(this_player())->query_co_ord();
terrain_s.c | 256 | query_features_at(x, y);
terrain_s.c | 262 | find_all_adjacent_terrains();
terrain_s.c | 263 | query_adjacent_terrains();
terrain_s.c | 288 | write("$P$Status$P$" + ret);
terrain_s.c | 301 | do_feature_distant_map($4[0]) :) });
fry.c | 21 | add_failed_mess("At Pinkfish's request this command has been disabled.\n" );
fry.c | 27 | this_player()->query_name()] + "\n");
fry.c | 31 | notify_fail("Usage: fry <player> <reason>\n");
fry.c | 40 | find_player(this_player()->expand_nickname(player));
fry.c | 43 | notify_fail(player+" not found!\n");
fry.c | 51 | input_to("are_sure", ob, reason);
fry.c | 61 | lower_case(str);
fry.c | 64 | one_short() + "!\n");
fry.c | 71 | input_to("positive", ob, reason);
fry.c | 76 | lower_case(str);
fry.c | 78 | write ("Okay, we'll keep it between you and me.\n");
fry.c | 79 | call_out("fry2", 5+random (3), ob);
fry.c | 83 | write ("Bwah-ha-ha-ha!\n");
fry.c | 84 | call_out("fry2", 5+random (3), ob, reason);
fry.c | 92 | this_player()->query_short(), ob->query_short(), reason);
fry.c | 94 | shout("The sky grows dark.  Thick black clouds roll in.\n");
fry.c | 97 | write("Smiting "+capitalize (ob->query_name()) +" with Righteous Vengeance!\n");
fry.c | 123 | mud_name() + "'s creators is unhappy...\n");
fry.c | 125 | tell_object(ob, player_mess[random(sizeof(player_mess))]);
fry.c | 126 | call_out("fry3", 8 + random (10), ob, reason);
fry.c | 165 | if (random (100) >
fry.c | 171 | this_player()->add_skill_level ("fighting.combat.range.thrown", 1);
fry.c | 175 | shout(shout_mess[random(sizeof(shout_mess))]);
fry.c | 183 | this_player()->short();
fry.c | 190 | short() +"!\n");
fry.c | 194 | shout(name + " cackles in the distance.\n");
fry.c | 198 | tell_object(ob, player_mess[random(sizeof(player_mess))]);
fry.c | 199 | save();
fry.c | 200 | quit();
fry.c | 202 | capitalize(ob->query_pronoun())+" is no more.\n");
fry.c | 203 | shout ("The clouds roll back across the sky.");
path_of.c | 27 | notify_fail("Pathof what?\n");
path_of.c | 28 | wiz_present(str, this_player());
path_of.c | 34 | desc_object(environment(ob)) + ":\n");
path_of.c | 35 | write(file_name(ob)+ "\n");
path_of.c | 41 | destruct(this_object());
path_of.c | 45 | dest_me();
path_of.c | 49 | dest_me();
bugreps.c | 15 | sprintf("%-15s %s\n", row["Reporter"], "" + row["bing"]);
bugreps.c | 20 | more_string(ret, "details");
bugreps.c | 37 | finish_request($1, $2, $(this_player())) :));
bugreps.c | 38 | add_succeeded_mess("");
bugreps.c | 43 | return ({ "<string'person|all'>", (: cmd($4[0]) :) });
unsuspend.c | 29 | notify_fail("We failed!\n");
unsuspend.c | 32 | write(str+" unsuspended.\n");
unsuspend.c | 37 | notify_fail("Syntax: unsuspend <name>.\n");
unsuspend.c | 41 | return ({ "<string>", (: cmd($4[0]) :), });
pstat.c | 12 | filter( ob->query_properties(), (: $2 :) );
pstat.c | 13 | sort_array( keys( prop ), 1 );
pstat.c | 15 | sprintf( "$I$0,5=(%s): %O$I$0,-5=\n", property, prop[ property ] );
pstat.c | 19 | tell_object( this_player(), txt );
pstat.c | 24 | return ({ "<indirect:wiz-present>", (: cmd( $1 ) :) });
rm.c | 18 | seteuid(geteuid(this_player()));
rm.c | 21 | notify_fail("Usage: rm file [file ...]\n");
rm.c | 24 | this_player()->get_files(str);
rm.c | 26 | notify_fail("No such file : "+ str+"\n");
rm.c | 29 | sizeof(filenames);
rm.c | 31 | file_size(str);
rm.c | 35 | notify_fail("No such file or directory.\n");
rm.c | 40 | notify_fail("Couldn't rm directory: " + str + "\n");
rm.c | 44 | notify_fail("Can't remove file.\n");
rm.c | 48 | write("Ok.\n");
auto_doc.c | 18 | this_player()->get_files(str);
auto_doc.c | 20 | notify_fail("Unable to find the files " + str + ".\n");
auto_doc.c | 25 | write("Recreating documentation for " + file + ".\n");
auto_doc.c | 27 | write("Unable to recreate documentation for " + file + ".\n");
auto_doc.c | 34 | return ({ "<string>", (: cmd($4[0]) :) });
define.c | 10 | tell_object(player, "No definitions for " + word + ".\n");
define.c | 16 | tell_object(player, "Definitions for " + word + ":\n" + ret);
define.c | 19 | tell_object(player, "Error matching " + word + ": " + result);
define.c | 25 | finish_lookup($(this_player()), $1, $2, $3) :));
define.c | 26 | add_succeeded_mess("$N look$s up a word.\n");
define.c | 31 | return ({ "<word>", (: cmd($4[0]) :) });
iemote.c | 15 | eventSendEmote(target, mud, text);
iemote.c | 18 | mud_name(), text), "" }) );
iemote.c | 24 | cmd($4[0], $4[1]) :) });
on_line.c | 7 | query_idle(person);
on_line.c | 30 | filter_array( users(), (: $1->query_creator() :) );
on_line.c | 31 | this_player()->query_ignoring( people );
on_line.c | 33 | strcmp( $1->query_name(), $2->query_name() ) :) );
on_line.c | 36 | query_cap_name();
on_line.c | 37 | if ( show_idle && query_idle( person ) >
on_line.c | 38 | idle_time( person );
on_line.c | 41 | query_object_type();
on_line.c | 91 | query_multiple_short(cre)+".\n"));
on_line.c | 96 | query_multiple_short(invis)+".\n"));
on_line.c | 101 | query_multiple_short(director)+".\n"));
on_line.c | 106 | query_multiple_short(trustee)+".\n"));
on_line.c | 113 | cmd(0) :) });
setmmout.c | 22 | notify_fail("Must have a $N in your teleport exit message.\n");
setmmout.c | 23 | set_mmsgout(str);
setmmout.c | 24 | write("Ok.\n");
setmmout.c | 27 | notify_fail("You are not allowed that power yet.\n");
setmmout.c | 32 | return ({ "<string>", (: cmd($4[0]) :) });
ban.c | 16 | seteuid("Root");
ban.c | 23 | notify_fail("Only lords or liaison deputies can do that.\n");
ban.c | 26 | notify_fail("This command does not take wildcards.\n");
ban.c | 30 | write("Error changing permissions.\n");
ban.c | 34 | write("Site banned.\n");
pw_d.c | 4 | write(this_player()->query_path() + "\n");
pw_d.c | 9 | return ({ "", (: cmd :) });
footer.c | 21 | query_current_file();
footer.c | 24 | stat(fname);
footer.c | 28 | format_date(stuff[1]);
boards.c | 94 | is_allowed_special_access(string board, string name);
boards.c | 95 | subjects(class http_request req, int threaded);
boards.c | 98 | new_message(class http_request req, int threaded);
boards.c | 99 | followup(string str, class http_request req, int threaded);
boards.c | 100 | delete_message(string str, class http_request req, int threaded);
boards.c | 103 | post(string str, class http_request req, int threaded);
boards.c | 104 | create_header(string title);
boards.c | 105 | board_summary(class http_request req, int threaded);
boards.c | 106 | complete_board_summary(class http_request req, int threaded);
boards.c | 107 | is_allowed_access(string board, string name);
boards.c | 108 | mail_reply(string note, class http_request req, int threaded);
boards.c | 109 | send_mail(string note, class http_request req, int threaded);
boards.c | 110 | remove_control_chars(string str);
boards.c | 111 | do_post_note(string name);
boards.c | 112 | do_delete_note(string name);
boards.c | 113 | can_post_note(string name, string board);
boards.c | 114 | can_followup_note(string name, string board, mixed *stuff);
boards.c | 115 | read_order(class http_request req, int threaded);
boards.c | 116 | get_allowed_boards(string name);
boards.c | 117 | get_user_board_order(string user);
boards.c | 121 | add_board_picture(string board, string picture);
boards.c | 130 | seteuid("WWW");
boards.c | 145 | seteuid(getuid());
boards.c | 147 | unguarded( (: restore_object(SAVE_FILE) :) );
boards.c | 151 | query_boards();
boards.c | 159 | add_board_picture("default", "pics/tfrog-news.gif");
boards.c | 163 | add_board_picture("assassinsguild", "pics/boards/assassin_frog0.gif");
boards.c | 164 | add_board_picture("assassinsguild", "pics/boards/assassin_frog4.gif");
boards.c | 165 | add_board_picture("assassinsguild", "pics/boards/assassin_frog9.gif");
boards.c | 166 | add_board_picture("priestsguild", "pics/boards/priest_frog0.gif");
boards.c | 167 | add_board_picture("priestsguild", "pics/boards/priest_frog4.gif");
boards.c | 168 | add_board_picture("priestsguild", "pics/boards/priest_frog9.gif");
boards.c | 169 | add_board_picture("thievesguild", "pics/boards/thief_frog0.gif");
boards.c | 170 | add_board_picture("thievesguild", "pics/boards/thief_frog4.gif");
boards.c | 171 | add_board_picture("thievesguild", "pics/boards/thief_frog4b.gif");
boards.c | 172 | add_board_picture("thievesguild", "pics/boards/thief_frog9.gif");
boards.c | 173 | add_board_picture("warriorsguild", "pics/boards/warrior_frog0.gif");
boards.c | 174 | add_board_picture("warriorsguild", "pics/boards/warrior_frog4.gif");
boards.c | 175 | add_board_picture("warriorsguild", "pics/boards/warrior_frog9.gif");
boards.c | 176 | add_board_picture("witchesguild", "pics/boards/witch_frog0.gif");
boards.c | 177 | add_board_picture("witchesguild", "pics/boards/witch_frog4.gif");
boards.c | 178 | add_board_picture("witchesguild", "pics/boards/witch_frog9.gif");
boards.c | 179 | add_board_picture("wizardsguild", "pics/boards/wizard_frog0.gif");
boards.c | 180 | add_board_picture("wizardsguild", "pics/boards/wizard_frog4.gif");
boards.c | 181 | add_board_picture("wizardsguild", "pics/boards/wizard_frog9.gif");
boards.c | 183 | add_board_picture("am", "pics/boards/am_frog6.gif");
boards.c | 184 | add_board_picture("klatch", "pics/boards/klatch_frog5.gif");
boards.c | 185 | add_board_picture("liaison", "pics/boards/liaison_frog7.gif");
boards.c | 187 | add_board_picture("club pcdc", "pics/boards/pcdc_frog5.gif");
boards.c | 191 | add_board_picture("announcements", "pics/boards/news_frog1.gif");
boards.c | 192 | add_board_picture("announcements", "pics/boards/news_frog2.gif");
boards.c | 193 | add_board_picture("announcements", "pics/boards/news_frog4.gif");
boards.c | 194 | add_board_picture("announcements", "pics/boards/news_frog9.gif");
boards.c | 195 | add_board_picture("development", "pics/boards/development_frog6.gif");
boards.c | 196 | add_board_picture("discipline", "pics/boards/discipline_frog0.gif");
boards.c | 197 | add_board_picture("discipline", "pics/boards/discipline_frog5.gif");
boards.c | 198 | add_board_picture("discipline", "pics/boards/discipline_frog7.gif");
boards.c | 199 | add_board_picture("equality", "pics/boards/equality_frog4.gif");
boards.c | 200 | add_board_picture("flame", "pics/boards/flame_frog0.gif");
boards.c | 201 | add_board_picture("flame", "pics/boards/flame_frog1.gif");
boards.c | 202 | add_board_picture("flame", "pics/boards/flame_frog4.gif");
boards.c | 203 | add_board_picture("flame", "pics/boards/flame_frog9.gif");
boards.c | 204 | add_board_picture("fluff", "pics/boards/fluff_frog4.gif");
boards.c | 205 | add_board_picture("fluff", "pics/boards/fluff_frog9.gif");
boards.c | 206 | add_board_picture("learning", "pics/boards/learning_frog6.gif");
boards.c | 207 | add_board_picture("mudlib", "pics/boards/mudlib_frog3.gif");
boards.c | 208 | add_board_picture("newspaper", "pics/boards/newspaper_frog5.gif");
boards.c | 209 | add_board_picture("never wending story", "pics/boards/nw_frog0.gif");
boards.c | 210 | add_board_picture("never wending story", "pics/boards/nw_frog2.gif");
boards.c | 211 | add_board_picture("never wending story", "pics/boards/nw_frog4.gif");
boards.c | 212 | add_board_picture("philosophers", "pics/boards/philosopher_frog0.gif");
boards.c | 213 | add_board_picture("philosophers", "pics/boards/philosopher_frog4.gif");
boards.c | 214 | add_board_picture("player killers", "pics/boards/pk_frog2.gif");
boards.c | 215 | add_board_picture("player killers", "pics/boards/pk_frog2b.gif");
boards.c | 216 | add_board_picture("player killers", "pics/boards/pk_frog4.gif");
boards.c | 217 | add_board_picture("role-playing", "pics/boards/rp_frog4.gif");
boards.c | 218 | add_board_picture("role-playing", "pics/boards/rp_frog4b.gif");
boards.c | 219 | add_board_picture("style", "pics/boards/style_frog7.gif");
boards.c | 220 | add_board_picture("style", "pics/boards/style_frog7b.gif");
boards.c | 221 | add_board_picture("style", "pics/boards/style_frog7c.gif");
boards.c | 222 | add_board_picture("style", "pics/boards/style_frog7d.gif");
boards.c | 224 | add_board_picture("klatch council", "pics/boards/klatch_council_frog0.gif");
boards.c | 225 | add_board_picture("klatch magistrates", "pics/boards/klatch_council_frog0.gif");
boards.c | 226 | add_board_picture("tarnach's", "pics/boards/tarnachs_frog.gif");
boards.c | 228 | call_out("clean_up_cache", 30 * 60);
boards.c | 241 | call_out("clean_up_cache", 30 * 60);
boards.c | 244 | map_delete(_messages, num);
boards.c | 249 | map_delete(_board_order, name);
boards.c | 282 | htmlify_no_address(str);
boards.c | 283 | if (strsrch(str, "http:") >
boards.c | 284 | explode("#" + str, "http:");
boards.c | 286 | sizeof(bits);
boards.c | 305 | implode(bits, "");
boards.c | 317 | if ( strsrch(str, "$I$") >
boards.c | 318 | explode( "#" + str, "$I$" );
boards.c | 321 | sizeof(bits);
boards.c | 334 | strsrch( end, "\n" );
boards.c | 364 | implode( bits, "" );
boards.c | 389 | replace(board, " ", "+");
boards.c | 395 | to_int(args["threaded"]);
boards.c | 398 | read(args["note"], req, 0, threaded);
boards.c | 400 | followup(args["note"], req, threaded);
boards.c | 402 | post(args["note"], req, threaded);
boards.c | 404 | new_message(req, threaded);
boards.c | 406 | delete_message(args["note"], req, threaded);
boards.c | 408 | board_summary(req, threaded);
boards.c | 410 | complete_board_summary(req, threaded);
boards.c | 412 | mail_reply(args["note"], req, threaded);
boards.c | 414 | send_mail(args["note"], req, threaded);
boards.c | 416 | read_order(req, threaded);
boards.c | 418 | subjects(req, threaded);
boards.c | 441 | get_user_board_order(user);
boards.c | 443 | list_killfile(req->user);
boards.c | 446 | has_new_messages(bing, user, newsrc);
boards.c | 448 | get_subjects(bing, req->user);
boards.c | 451 | set_newsrc(req->user, newsrc);
boards.c | 460 | return ({ });
boards.c | 477 | the_date(stuff[B_TIME]));
boards.c | 493 | filter(messages[start..], (: $1[B_REPLY_NUM] == $2 :), thread);
boards.c | 499 | sizeof(followups);
boards.c | 500 | show_line(followups[i], req, newsrc, threaded);
boards.c | 501 | find_followups(followups[i][B_NUM], i, req, newsrc, threaded);
boards.c | 503 | filter(messages, (: $1[B_REPLY_NUM] != $2 :), thread);
boards.c | 517 | create_header("Board: "+board);
boards.c | 522 | get_subjects(board, req->user);
boards.c | 524 | query_newsrc(req->user);
boards.c | 558 | sizeof(stuff);
boards.c | 565 | sizeof(messages);
boards.c | 566 | show_line(messages[i], req, newsrc, 1);
boards.c | 567 | find_followups(messages[i][B_NUM], i, req, newsrc, 1);
boards.c | 579 | sizeof(explode(str, "\n"));
boards.c | 595 | create_header("Note "+str+" on board "+board);
boards.c | 596 | get_subjects(board, req->user);
boards.c | 604 | sizeof(stuff);
boards.c | 618 | query_newsrc(req->user);
boards.c | 624 | set_newsrc(req->user, newsrc);
boards.c | 634 | sizeof(stuff);
boards.c | 652 | get_next_new_note(req->user, newsrc, req, threaded);
boards.c | 686 | get_message(board, num, req->user);
boards.c | 697 | time();
boards.c | 707 | new(class message_cache);
boards.c | 709 | time();
boards.c | 722 | create_header("Note "+str+" on board "+board);
boards.c | 723 | get_subjects(board, req->user);
boards.c | 731 | sizeof(stuff);
boards.c | 778 | create_header("Note "+str+" on board "+board);
boards.c | 779 | get_subjects(board, req->user);
boards.c | 786 | sizeof(stuff);
boards.c | 830 | create_header("Note "+str+" on board "+board);
boards.c | 838 | get_subjects(board, req->user);
boards.c | 841 | sizeof(stuff);
boards.c | 872 | remove_control_chars(strip_colours(req->body->data["body"]));
boards.c | 875 | sprintf("%-=78s", body);
boards.c | 877 | remove_control_chars(req->body->data["subject"]);
boards.c | 883 | read(str, req, 1, 0);
boards.c | 896 | create_header("Note "+str+" on board "+board);
boards.c | 897 | get_subjects(board, req->user);
boards.c | 904 | sizeof(stuff);
boards.c | 917 | do_delete_note(req->user);
boards.c | 919 | this_object() );
boards.c | 921 | read(stuff[num + 1][B_NUM] + "", req, 1, threaded);
boards.c | 923 | read(stuff[num - 1][B_NUM] + "", req, 1, threaded);
boards.c | 925 | subjects(req, threaded);
boards.c | 936 | create_header("New message on board "+board);
boards.c | 943 | can_post_note(req->user, board);
boards.c | 953 | postform("", "", 0, "post", req, threaded);
boards.c | 970 | get_subjects(board, user);
boards.c | 999 | test_creator(name);
boards.c | 1002 | test_can_read(board, this_object(), name, 0);
boards.c | 1015 | is_allowed_special_access(board, name);
boards.c | 1042 | create_header("Board Summary");
boards.c | 1049 | query_newsrc(req->user);
boards.c | 1053 | get_user_board_order(req->user);
boards.c | 1056 | get_next_new_note(req->user, newsrc, req, 0);
boards.c | 1069 | has_new_messages(board, user, newsrc);
boards.c | 1102 | create_header("Board Summary");
boards.c | 1109 | query_newsrc(req->user);
boards.c | 1115 | sort_array(BOARD_HAND->list_killfile(req->user), 1);
boards.c | 1116 | query_board_order(req->user);
boards.c | 1117 | sort_array(boards - current_order, 1);
boards.c | 1120 | get_next_new_note(req->user, newsrc, req, 0);
boards.c | 1142 | has_new_messages(board, user, newsrc);
boards.c | 1188 | replace_string(htmlify_no_address(body), "<br>", "");
boards.c | 1189 | strip_colours(replace_string(htmlify_no_address(PLAYER_HANDLER->query_signature(req->user)), "<br>", ""));
boards.c | 1207 | strlen(str);
boards.c | 1237 | create_header("Note "+str+" on board "+board);
boards.c | 1250 | get_subjects(board, req->user);
boards.c | 1253 | sizeof(stuff);
boards.c | 1276 | can_post_note(req->user, board);
boards.c | 1285 | replace(tmp, rep_arr);
boards.c | 1299 | remove_control_chars(strip_colours(req->body->data["body"]));
boards.c | 1300 | replace_string(body, "\r\n", "\n");
boards.c | 1302 | sprintf("%-=78s", body);
boards.c | 1303 | sizeof(explode(body, "\n>"));
boards.c | 1307 | sizeof(explode(replace_string(body, " ", ""), "\n") - ({ }));
boards.c | 1318 | remove_control_chars(req->body->data["subject"]);
boards.c | 1325 | do_post_note(req->user);
boards.c | 1327 | get_subjects(board, req->user);
boards.c | 1328 | sizeof(stuff);
boards.c | 1338 | read(str, req, 1, threaded);
boards.c | 1340 | subjects(req, threaded);
boards.c | 1360 | create_header("Order of reading boards");
boards.c | 1369 | get_user_board_order(req->user);
boards.c | 1374 | replace_string(bing, " ", "+");
boards.c | 1388 | sort_array(keys(new_order), 1);
boards.c | 1394 | set_board_order(req->user, current_order);
boards.c | 1400 | query_board_order(req->user);
boards.c | 1433 | member_array(board, current_order);
boards.c | 1491 | time();
boards.c | 1494 | get_allowed_boards(user);
boards.c | 1495 | query_board_order(user);
boards.c | 1496 | sort_array(allowed - boards, 1);
boards.c | 1497 | list_killfile(user);
boards.c | 1498 | new(class player_cache);
boards.c | 1500 | time();
boards.c | 1515 | new (class posted_information);
boards.c | 1517 | if (time() >
boards.c | 1518 | time();
boards.c | 1523 | unguarded( (: save_object(SAVE_FILE) :) );
boards.c | 1535 | if (time() >
boards.c | 1536 | map_delete(posted_stuff, name);
boards.c | 1541 | unguarded( (: save_object(SAVE_FILE) :) );
boards.c | 1559 | if (PLAYER_HANDLER->test_age(name) >
boards.c | 1573 | if (time() >
boards.c | 1574 | map_delete(posted_stuff, name);
boards.c | 1610 | if (time() >
boards.c | 1611 | map_delete(posted_stuff, name);
boards.c | 1623 | destruct(this_object());
finger.c | 7 | seteuid(getuid());
finger.c | 17 | query_allowed();
finger.c | 26 | return (int)master()->query_trustee( user );
finger.c | 28 | return (int)master()->query_director( user );
finger.c | 30 | return (int)PLAYER_HANDLER->test_creator( user );
finger.c | 65 | htmlify_no_address(" " + tmp);
finger.c | 69 | htmlify_no_address(", " + tmp);
finger.c | 71 | htmlify_no_address(", " + tmp);
finger.c | 122 | htmlify_no_address(names["player"]);
finger.c | 124 | lower_case(names["player"]);
finger.c | 127 | domain_info(names["player"]);
finger.c | 129 | if (file_size("/w/"+names["player"]+"/public_html/index.html") >
finger.c | 133 | www_finger_info(names["player"], req->user);
finger.c | 146 | filter(users(), (: $1 :));
finger.c | 152 | query_name()) :) );
finger.c | 154 | sizeof(users()));
finger.c | 156 | sizeof(players);
finger.c | 157 | www_who_line(players[i], req->user);
finger.c | 179 | strip_colours(ret);
finger.c | 180 | www_function("footer", ([ ]), req);
mrelayd.c | 64 | fprintf(stderr,"%s: %d\n",s,GetLastError());
mrelayd.c | 84 | socket(int,int,int);
mrelayd.c | 85 | shutdown(int,int);
mrelayd.c | 86 | close(int);
mrelayd.c | 87 | bind(int,struct sockaddr*,int);
mrelayd.c | 88 | listen(int,int);
mrelayd.c | 89 | bzero(char*,int);
mrelayd.c | 90 | select(int,fd_set *,fd_set*,fd_set*,struct timeval*);
mrelayd.c | 91 | accept(int,struct sockaddr*,int*);
mrelayd.c | 92 | connect(int,struct sockaddr*,int);
mrelayd.c | 93 | recvfrom(int,char*,int,int,struct sockaddr*,int*);
mrelayd.c | 94 | perror(char*);
mrelayd.c | 95 | sendto(int,char*,int,int,struct sockaddr*,int);
mrelayd.c | 104 | bzero(void*,int);
mrelayd.c | 132 | malloc(size);
mrelayd.c | 134 | fprintf(stderr,"Out of memory, exiting.\n");
mrelayd.c | 135 | exit(1);
mrelayd.c | 144 | realloc(y,size);
mrelayd.c | 146 | fprintf(stderr,"Out of memory, exiting.\n");
mrelayd.c | 147 | exit(1);
mrelayd.c | 161 | perror("ioctl FIONBIO");
mrelayd.c | 171 | perror("fcntl F_GETFL");
mrelayd.c | 175 | perror("fcntl F_SETFL  O_NDELAY");
mrelayd.c | 186 | perror("fcntl F_GETFL");
mrelayd.c | 190 | perror("fcntl F_SETFL  O_NONBLOCK");
mrelayd.c | 204 | perror("close");
mrelayd.c | 209 | perror("close");
mrelayd.c | 212 | free(relay->outbuf);
mrelayd.c | 212 | free(relay->inbuf);
mrelayd.c | 213 | memcpy(relay,relay+1,sizeof(struct relay)*(nrofrelays-(relay-relays)-1));
mrelayd.c | 214 | xrealloc(relays,sizeof(struct relay)*(--nrofrelays));
mrelayd.c | 231 | WSAStartup(0x0101,&wsad);
mrelayd.c | 234 | close(0);
mrelayd.c | 235 | close(1);
mrelayd.c | 238 | signal(SIGPIPE,SIG_IGN);
mrelayd.c | 241 | signal(SIGHUP,SIG_IGN);
mrelayd.c | 243 | strcpy(relaystring,FAILMESSAGE);
mrelayd.c | 245 | perror("socket(accept_socket)");
mrelayd.c | 246 | exit(1);
mrelayd.c | 250 | htons(LISTENPORT);
mrelayd.c | 256 | perror("setsockopt SOL_SOCKET SO_REUSEADDR");
mrelayd.c | 260 | perror("bind");
mrelayd.c | 261 | exit(1);
mrelayd.c | 265 | perror("listen");
mrelayd.c | 266 | exit(1);
mrelayd.c | 276 | FD_ZERO(&readfds);
mrelayd.c | 276 | FD_ZERO(&writefds);
mrelayd.c | 277 | FD_SET(acfd,&readfds);
mrelayd.c | 285 | clean_connection(relay);
mrelayd.c | 290 | clean_connection(relay);
mrelayd.c | 295 | clean_connection(relay);
mrelayd.c | 302 | FD_SET(relay->outfd,&writefds);
mrelayd.c | 304 | FD_SET(relay->outfd,&readfds);
mrelayd.c | 311 | FD_SET(relay->infd,&writefds);
mrelayd.c | 313 | FD_SET(relay->infd,&readfds);
mrelayd.c | 325 | perror("select");
mrelayd.c | 335 | sizeof(struct sockaddr_in);
mrelayd.c | 337 | perror("accept");
mrelayd.c | 339 | xrealloc(relays,sizeof(struct relay)*(nrofrelays+1));
mrelayd.c | 341 | xmalloc(sizeof(struct relay));
mrelayd.c | 344 | xmalloc(DEFAULTSIZE);
mrelayd.c | 345 | xmalloc(DEFAULTSIZE);
mrelayd.c | 354 | memcpy(&relay->inaddr,&conaddr,sizeof(struct sockaddr_in));
mrelayd.c | 356 | strcpy(relay->outbuf,relaystring);
mrelayd.c | 367 | perror("setsockopt SOL_SOCKET SO_LINGER");
mrelayd.c | 380 | close(relay->infd);
mrelayd.c | 385 | while (1);
mrelayd.c | 395 | xrealloc(relay->inbuf,relay->insize*2);
mrelayd.c | 398 | memcpy(relay->inbuf+relay->incur,readbuf,res+1);
mrelayd.c | 410 | memchr(relay->inbuf,'\n',relay->incur);
mrelayd.c | 421 | xmalloc(strlen(relay->inbuf));
mrelayd.c | 427 | free(tmp);
mrelayd.c | 429 | sprintf(relay->outbuf,"550 Bad syntax. Go away.\n",tmp);
mrelayd.c | 430 | strlen(relay->outbuf);
mrelayd.c | 436 | gethostbyname(tmp);
mrelayd.c | 438 | sprintf(relay->outbuf,"No hostentry for '%s'!\n",tmp);
mrelayd.c | 439 | free(tmp);
mrelayd.c | 440 | strlen(relay->outbuf);
mrelayd.c | 444 | memcpy(&targetaddr,hp->h_addr_list[0],sizeof(struct in_addr));
mrelayd.c | 446 | htons(port);
mrelayd.c | 447 | memcpy(&(relay->outaddr.sin_addr),&targetaddr,4);
mrelayd.c | 448 | strcpy(sendbuf,RELAYHEADER);
mrelayd.c | 449 | strlen(sendbuf);
mrelayd.c | 450 | memcpy(relay->outbuf,sendbuf,strlen(sendbuf)+1);
mrelayd.c | 452 | perror("socket(connect_socket)");
mrelayd.c | 454 | fd_make_nonblocking(relay->outfd);
mrelayd.c | 465 | sprintf(readbuf,"Connect to %s failed: %s\n",tmp,strerror(errno));
mrelayd.c | 466 | perror("connect");
mrelayd.c | 467 | close(relay->outfd);
mrelayd.c | 470 | strcpy(relay->outbuf,readbuf);
mrelayd.c | 472 | free(tmp);
mrelayd.c | 475 | free(tmp);
mrelayd.c | 497 | memcpy(relay->inbuf,sendbuf,strlen(sendbuf)+1);
mrelayd.c | 498 | strlen(sendbuf);
mrelayd.c | 515 | close(relay->outfd);
mrelayd.c | 520 | while (1);
mrelayd.c | 531 | xrealloc(relay->outbuf,relay->outsize*2);
mrelayd.c | 534 | memcpy(relay->outbuf+relay->outcur,readbuf,res+1);
mrelayd.c | 542 | close(relay->infd);
mrelayd.c | 547 | memcpy(relay->outbuf,relay->outbuf+res,relay->outcur-res);
mrelayd.c | 555 | close(relay->outfd);
mrelayd.c | 560 | memcpy(relay->inbuf,relay->inbuf+res,relay->incur-res);
relayd.c | 76 | socket(int,int,int);
relayd.c | 77 | shutdown(int,int);
relayd.c | 78 | close(int);
relayd.c | 79 | bind(int,struct sockaddr*,int);
relayd.c | 80 | listen(int,int);
relayd.c | 81 | bzero(char*,int);
relayd.c | 82 | select(int,fd_set *,fd_set*,fd_set*,struct timeval*);
relayd.c | 83 | accept(int,struct sockaddr*,int*);
relayd.c | 84 | connect(int,struct sockaddr*,int);
relayd.c | 85 | recvfrom(int,char*,int,int,struct sockaddr*,int*);
relayd.c | 86 | perror(char*);
relayd.c | 87 | sendto(int,char*,int,int,struct sockaddr*,int);
relayd.c | 98 | bzero(void*,int);
relayd.c | 116 | fprintf(stderr,"%s: %d\n",str,GetLastError());
relayd.c | 129 | perror("ioctl FIONBIO");
relayd.c | 139 | perror("fcntl F_GETFL");
relayd.c | 143 | perror("fcntl F_SETFL  O_NDELAY");
relayd.c | 154 | perror("fcntl F_GETFL");
relayd.c | 158 | perror("fcntl F_SETFL  O_NONBLOCK");
relayd.c | 173 | perror("close");
relayd.c | 178 | perror("close");
relayd.c | 187 | fprintf(stderr,"Usage: relayd <listenport> <targethost> [<targetport>]\n");
relayd.c | 208 | WSAStartup(0x0101,&wsad);
relayd.c | 211 | close(0);
relayd.c | 212 | close(1);
relayd.c | 216 | signal(SIGPIPE,SIG_IGN);
relayd.c | 222 | usage();
relayd.c | 223 | exit(1);
relayd.c | 226 | usage();
relayd.c | 227 | exit(1);
relayd.c | 234 | usage();
relayd.c | 234 | exit(1);
relayd.c | 237 | usage();
relayd.c | 237 | exit(1);
relayd.c | 242 | strcpy(relaystring,FAILMESSAGE);
relayd.c | 244 | perror("socket(accept_socket)");
relayd.c | 245 | exit(1);
relayd.c | 248 | malloc(10000*sizeof(char));
relayd.c | 249 | malloc(10000*sizeof(char));
relayd.c | 259 | htons(port);
relayd.c | 262 | perror("bind");
relayd.c | 263 | exit(1);
relayd.c | 267 | perror("listen");
relayd.c | 268 | exit(1);
relayd.c | 278 | FD_ZERO(&readfds);
relayd.c | 278 | FD_ZERO(&writefds);
relayd.c | 279 | FD_SET(acfd,&readfds);
relayd.c | 284 | FD_SET(outfd[i],&writefds);
relayd.c | 285 | FD_SET(outfd[i],&readfds);
relayd.c | 292 | FD_SET(infd[i],&writefds);
relayd.c | 293 | FD_SET(infd[i],&readfds);
relayd.c | 305 | perror("select");
relayd.c | 314 | sizeof(struct sockaddr_in);
relayd.c | 316 | perror("accept");
relayd.c | 321 | write(afd,relaystring,strlen(relaystring));
relayd.c | 322 | close(afd);
relayd.c | 326 | memcpy(&inaddr[i],&conaddr,sizeof(struct sockaddr_in));
relayd.c | 330 | gethostbyname(targethost);
relayd.c | 332 | clean_connection(i);
relayd.c | 335 | memcpy(&targetaddr,hp->h_addr_list[0],sizeof(struct in_addr));
relayd.c | 337 | htons(targetport);
relayd.c | 338 | memcpy(&(outaddr[i].sin_addr),&targetaddr,4);
relayd.c | 339 | strcpy(sendbuf,RELAYHEADER);
relayd.c | 340 | strlen(sendbuf);
relayd.c | 341 | memcpy(outbuf[i],sendbuf,strlen(sendbuf)+1);
relayd.c | 343 | perror("socket(connect_socket)");
relayd.c | 345 | fd_make_nonblocking(outfd[i]);
relayd.c | 357 | sprintf(readbuf,"Connect to %s failed: %d\n",targethost,GetLastError());
relayd.c | 359 | sprintf(readbuf,"Connect to %s failed: %s\n",targethost,sys_errlist[errno]);
relayd.c | 361 | perror("connect");
relayd.c | 363 | perror("write");
relayd.c | 364 | clean_connection(i);
relayd.c | 378 | clean_connection(i);
relayd.c | 382 | while (1);
relayd.c | 384 | clean_connection(i);
relayd.c | 388 | realloc(inbuf[i],insize[i]*2);
relayd.c | 391 | memcpy(inbuf[i]+incur[i],readbuf,res+1);
relayd.c | 409 | while (1);
relayd.c | 411 | clean_connection(i);
relayd.c | 416 | realloc(outbuf[i],outsize[i]*2);
relayd.c | 419 | memcpy(outbuf[i]+outcur[i],readbuf,res+1);
relayd.c | 427 | clean_connection(i);
relayd.c | 431 | memcpy(outbuf[i],outbuf[i]+res,outcur[i]-res);
relayd.c | 440 | clean_connection(i);
relayd.c | 444 | memcpy(inbuf[i],inbuf[i]+res,incur[i]-res);
errors_new.c | 27 | load_me();
errors_new.c | 31 | call_out("flush_old", TIMEOUT_PERIOD);
errors_new.c | 32 | load_me();
errors_new.c | 39 | call_out("flush_old", TIMEOUT_PERIOD);
errors_new.c | 42 | map_delete(_user_query, name);
errors_new.c | 48 | unguarded( (: restore_object(SAVE_FILE) :) );
errors_new.c | 52 | unguarded( (: save_object(SAVE_FILE, 2) :) );
errors_new.c | 94 | htmlify_no_address(str);
errors_new.c | 95 | if (strsrch(str, "http:") >
errors_new.c | 96 | explode("#" + str, "http:");
errors_new.c | 98 | sizeof(bits);
errors_new.c | 117 | implode(bits, "");
errors_new.c | 126 | create_footer(req);
errors_new.c | 136 | time();
errors_new.c | 138 | sizeof(errors);
errors_new.c | 150 | time();
errors_new.c | 151 | sizeof(_user_query[req->user]->errors);
errors_new.c | 160 | time();
errors_new.c | 173 | evaluate(callback, html_error(req, "Error: " + data));
errors_new.c | 177 | create_header(req, "Error list");
errors_new.c | 179 | save_me();
errors_new.c | 181 | sprintf("No bugs found.");
errors_new.c | 222 | create_footer(req);
errors_new.c | 223 | evaluate(callback, ret);
errors_new.c | 278 | evaluate(callback, html_error(req, "One of 'dir', 'filename' or 'reporter' must be not blank."));
errors_new.c | 282 | new(class error_query);
errors_new.c | 295 | upper_case(bing) });
errors_new.c | 302 | upper_case(bing) });
errors_new.c | 309 | upper_case(bing) });
errors_new.c | 330 | to_int(args["bug_offset"]);
errors_new.c | 336 | new(class user_data);
errors_new.c | 340 | time();
errors_new.c | 346 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 360 | finish_query(callback, req, DB_SUCCESS, _user_query[req->user]->errors, "");
errors_new.c | 364 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 383 | evaluate(callback, html_error(req, "Error: " + data));
errors_new.c | 389 | create_header(req, "Bug #" + details->summary->id);
errors_new.c | 480 | find_index(req, details->summary->id);
errors_new.c | 485 | max_index(req);
errors_new.c | 500 | htmlify(details->report);
errors_new.c | 501 | htmlify(details->runtime);
errors_new.c | 510 | htmlify(reply->message);
errors_new.c | 518 | htmlify(comment->comment);
errors_new.c | 521 | create_footer(req);
errors_new.c | 522 | evaluate(callback, ret);
errors_new.c | 532 | find_index(req, to_int(args["id"]));
errors_new.c | 533 | max_index(req);
errors_new.c | 534 | to_int(args["id"]);
errors_new.c | 538 | id_at(req, index - 1);
errors_new.c | 543 | id_at(req, index + 1);
errors_new.c | 547 | tell_creator("pinkfish", "%O %O %O\n", args["id"], index, max);
errors_new.c | 552 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 560 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 568 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 587 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 601 | evaluate(callback, html_error(req, "Error: " + data));
errors_new.c | 617 | create_header(req, "Change status of #" + details->summary->id);
errors_new.c | 709 | replace_string(htmlify_no_address(sprintf("%79-=s", details->report)), "<BR>\n", "\n> ");
errors_new.c | 717 | create_footer(req);
errors_new.c | 718 | evaluate(callback, str);
errors_new.c | 723 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 736 | replace_string(args["message"], "\r\n", "\n");
errors_new.c | 742 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 751 | create_header(req, "Comment on #" + args["id"]);
errors_new.c | 759 | create_footer(req);
errors_new.c | 766 | replace_string(req->body->data["message"], "\r\n", "\n");
errors_new.c | 770 | evaluate(callback, html_error(req, "Error doing stuff."));
errors_new.c | 782 | do_query(callback, args, req);
errors_new.c | 787 | do_bug_details(callback, args, req, 0);
errors_new.c | 793 | do_change_type(callback, args, req);
errors_new.c | 795 | do_change_category(callback, args, req);
errors_new.c | 797 | do_change_status(callback, args, req);
errors_new.c | 799 | do_change_status_message(callback, args, req);
errors_new.c | 801 | do_forward(callback, args, req);
errors_new.c | 803 | do_assign(callback, args, req);
errors_new.c | 805 | do_comment_message(callback, args, req);
errors_new.c | 807 | do_new_offset(callback, to_int(args["offset"]), req);
errors_new.c | 818 | map_delete(_user_query, req->user);
errors_new.c | 819 | create_header(req, "Session timed out.", 1);
errors_new.c | 822 | create_footer(req);
errors_new.c | 824 | do_comment(args, req);
newspaper.c | 24 | lower_case(paper);
newspaper.c | 25 | replace_string(paper, " ", "_");
newspaper.c | 26 | if (file_size("/www/" + NEWSPAPER_WWW_LOGO_BASE + paper + ".gif") >
newspaper.c | 30 | if (file_size("/www/" + NEWSPAPER_WWW_LOGO_BASE + paper + ".jpg") >
newspaper.c | 52 | test_property(person, "Paper " + paper);
newspaper.c | 57 | find_player(person)->query_property("Paper " + paper);
newspaper.c | 67 | query_paper_office(paper);
newspaper.c | 103 | sscanf(edition, "%d", edt);
newspaper.c | 104 | sscanf(article, "%d", art_no);
newspaper.c | 107 | make_header("Unable to read article", paper);
newspaper.c | 114 | query_edition_articles(paper, edt);
newspaper.c | 115 | make_header(arts[art_no]->title, paper);
newspaper.c | 117 | query_edition_adverts(paper, edt);
newspaper.c | 119 | unique_array(ads, (: $1->category :));
newspaper.c | 142 | add_edition_web_hit(paper, edt);
newspaper.c | 173 | make_header("Edition " + edition + " of " + paper, paper);
newspaper.c | 174 | sscanf(edition, "%d", edt);
newspaper.c | 178 | query_edition_articles(paper, edt);
newspaper.c | 179 | sizeof(arts);
newspaper.c | 213 | query_paper_office(paper);
newspaper.c | 215 | query_owner();
newspaper.c | 216 | sort_array( uniq_array( office->query_all_editors() ), 1 );
newspaper.c | 224 | query_address();
newspaper.c | 253 | make_header(paper, paper);
newspaper.c | 255 | query_current_edition_num(paper);
newspaper.c | 257 | query_paper_description(paper);
newspaper.c | 263 | ctime(NEWSPAPER_HANDLER->query_edition_date(paper, i));
newspaper.c | 289 | query_paper_office(paper);
newspaper.c | 291 | sort_array( uniq_array( office->query_all_editors() ), 1 );
newspaper.c | 292 | query_owner();
newspaper.c | 300 | query_address();
newspaper.c | 323 | make_header("All The Discworld Papers", "empty set");
newspaper.c | 329 | query_last_edition_num(paper);
newspaper.c | 331 | ctime(NEWSPAPER_HANDLER->query_edition_date(paper, last));
newspaper.c | 349 | show_article(args["paper"], args["edition"], args["article"], req);
newspaper.c | 351 | show_edition(args["paper"], args["edition"], req);
newspaper.c | 353 | show_paper(args["paper"], req);
newspaper.c | 355 | show_all_papers(req);
bug_replies.c | 41 | create_footer(req);
bug_replies.c | 117 | sizeof(_replies[req->user]);
bug_replies.c | 129 | htmlify(reply->message);
bug_replies.c | 131 | do_status_error_reply(reply->id, "READ", (: 1 :));
bug_replies.c | 139 | evaluate(callback, html_error(req, "Unable to get bug replies.\n"));
bug_replies.c | 145 | create_footer(req));
bug_replies.c | 156 | create_footer(req);
bug_replies.c | 159 | html_error(req, "Unable to find the bug reply.\n");
bug_replies.c | 168 | do_status_error_reply(reply->id, "DELETED", (: 1 :));
bug_replies.c | 171 | create_footer(req);
bug_replies.c | 174 | html_error(req, "Unable to find the bug reply.\n");
bug_replies.c | 183 | do_status_error_reply(reply->id, "READ", (: 1 :));
bug_replies.c | 186 | create_footer(req);
bug_replies.c | 189 | html_error(req, "Unable to find the bug reply.\n");
bug_replies.c | 198 | create_header(req, "Deleted bug reply #" + reply->id);
bug_replies.c | 208 | create_footer(req);
bug_replies.c | 212 | html_error(req, "Unable to find the bug reply.\n");
bug_replies.c | 227 | create_footer(req);
bug_replies.c | 230 | html_error(req, "Unable to find the bug reply.\n");
bug_replies.c | 236 | create_header(req, "Delete all read.");
bug_replies.c | 240 | create_footer(req);
bug_replies.c | 250 | do_status_error_reply(reply->id, "DELETED", (: 1 :));
bug_replies.c | 255 | create_footer(req);
bug_replies.c | 272 | delete_bug_reply(to_int(args["id"]), req);
bug_replies.c | 274 | undelete_bug_reply(to_int(args["id"]), req);
bug_replies.c | 276 | get_reply_details(to_int(args["id"]), req);
bug_replies.c | 278 | reply_to_bug_reply(to_int(args["id"]), req);
bug_replies.c | 280 | reply_message_bug_reply(to_int(args["id"]), req);
bug_replies.c | 282 | delete_all_read(req);
bug_replies.c | 284 | delete_all_confirmed(req);
bug_replies.c | 288 | create_footer(req);
bug_replies.c | 290 | html_error(req, "Unknown action.\n");
bug_replies.c | 295 | return ([ "replies" : _replies ]);
source_browser.c | 15 | function_tag(string file, string exp, string match, object ob);
source_browser.c | 18 | functions((find_object("/secure/simul_efun")));
source_browser.c | 36 | error(file);
source_browser.c | 42 | get_inc_path(sprintf("<%s>", file));
source_browser.c | 51 | sizeof(defs);
source_browser.c | 54 | if(!off || member_array(ins[off-1], allowed) >
source_browser.c | 55 | replace_string(ins, defs[i], defs[i+1]);
source_browser.c | 60 | while(changed);
source_browser.c | 65 | replace(stuff, ({" ", "", "+", ""}));
source_browser.c | 66 | replace_string(stuff, "\"\"", "");
source_browser.c | 84 | get_inc_path(tmp);
source_browser.c | 86 | defines();
source_browser.c | 90 | strsrch(line, "define");
source_browser.c | 103 | while(tmp[++j] == ' ' && j <= (sizeof(tmp) - 1));
source_browser.c | 110 | strip_junk(expand_macros(tmp2));
source_browser.c | 129 | assert(j);
source_browser.c | 133 | sprintf("%s%s", tmp[0][j - 1], tmp[0][j][0..i]);
source_browser.c | 136 | sprintf("%s%s%s", tmp[0][j - 1], tmp[0][j], tmp[0][j + 1]);
source_browser.c | 142 | assert(stringp(file));
source_browser.c | 143 | assert(stringp(exp));
source_browser.c | 144 | assert(stringp(match));
source_browser.c | 145 | assert(objectp(ob));
source_browser.c | 149 | if(member_array(func, simuls) >
source_browser.c | 151 | find_object(file);
source_browser.c | 163 | sprintf("%s(", html);
source_browser.c | 169 | assert(stringp(file));
source_browser.c | 170 | assert(stringp(match));
source_browser.c | 171 | assert(objectp(ob));
source_browser.c | 173 | sscanf(match[0..<2], "%s::%s", filep, func);
source_browser.c | 178 | function_exists(func, (ob = load_object(file)), 1);
source_browser.c | 183 | function_exists(func, ob, 1) + ".c");
source_browser.c | 188 | sprintf("%s(", html);
source_browser.c | 199 | defines();
source_browser.c | 213 | escape_html($1):));
source_browser.c | 216 | sizeof(tmp[1]);
source_browser.c | 217 | evaluate(tmp[1][i], tmp[0][i]);
source_browser.c | 224 | reset_eval_cost();
source_browser.c | 230 | s(%s);
source_browser.c | 232 | implode(func[3..], ","));
source_browser.c | 239 | html_file(tmp);
source_browser.c | 241 | read_file(tmp, 0, 2);
source_browser.c | 243 | create_nroff(tmp, "/tmp/00000bing");
source_browser.c | 244 | html_file("/tmp/00000bing", tmp);
source_browser.c | 245 | rm("/tmp/00000bing");
source_browser.c | 251 | parse_function(get_function(func[0]), expand));
source_browser.c | 260 | member_array($(ob), inherit_list($1)) != -1):));
source_browser.c | 261 | map(tmp, (:file_name($1) + ".c":));
source_browser.c | 262 | filter(tmp, (: $1[0..1] != "/w" :));
source_browser.c | 264 | if(sizeof(tmp) >
source_browser.c | 265 | sort_array(tmp, (: reset_eval_cost(), $1[0..1] == "/d"? 1 : -1 :));
source_browser.c | 277 | map(ret, (:$1[0]:));
source_browser.c | 291 | explode(args["funcs"], "/");
source_browser.c | 295 | if(sizeof(args["file"])>
source_browser.c | 298 | if(file_size(args["file"]) >
source_browser.c | 305 | load_object(args["file"]);
source_browser.c | 312 | throw("no user");
source_browser.c | 317 | throw("not a cre");
source_browser.c | 327 | implode(funcs, (:filter_funcs:), ({}));
source_browser.c | 329 | sort_array(funcs, 1);
source_browser.c | 333 | map(funcs, (:$1[0]:));
source_browser.c | 375 | www_function("footer", ([ ]), req, 0, 1));
source_browser.c | 390 | allocate(3, this_file) ...);
club_info.c | 23 | create_header("Discworld family: " + args["club_name"]);
club_info.c | 24 | www_family_info_string(args["club_name"], req->user);
club_info.c | 26 | create_header("Discworld club: " + args["club_name"]);
club_info.c | 27 | www_club_info_string(args["club_name"], 1, req->user);
club_info.c | 31 | create_header("Discworld club: "  + args["club_name"]);
club_info.c | 35 | create_header("Discworld club: Unknown");
club_info.c | 39 | www_function("footer", ([ ]), req);
file_browser.c | 46 | map(get_dir(path, -1), (:({$1[1] >= 0, $(path) + $1[0]}):));
file_browser.c | 70 | explode(args["action"], ",");
file_browser.c | 80 | sprintf("You don't have read permission for %s", args["path"]);
file_browser.c | 97 | www_function("footer", ([ ]), req, 0, 1));
survey.c | 23 | startup(mapping args, string user);
survey.c | 24 | menu(string user);
survey.c | 129 | seteuid(getuid());
survey.c | 153 | strlen(str);
survey.c | 184 | htmlify_no_address(str);
survey.c | 185 | if (strsrch(str, "http:") >
survey.c | 186 | explode("#" + str, "http:");
survey.c | 188 | sizeof(bits);
survey.c | 207 | implode(bits, "");
survey.c | 260 | create_footer(req);
survey.c | 262 | seteuid(user);
survey.c | 265 | if (!globvars[user]) globvars[user] = ({ time(), 0 });
survey.c | 270 | startup(args, user);
survey.c | 272 | create_header("Playing Style Survey") + ret + create_footer(req);
survey.c | 276 | GV_LAST_USE(user) = time();
survey.c | 280 | process_questions( playerq, args, 0 );
survey.c | 282 | process_questions( creatorq, args, sizeof(playerq) );
survey.c | 287 | seteuid("shaggy");
survey.c | 288 | unguarded((: write_file, "/www/secure/survey_results/"+user, ret, 1 :));
survey.c | 289 | seteuid(user);
survey.c | 297 | create_header("Playing Style Survey") + ret + create_footer(req);
survey.c | 303 | create_header("Error handler", req->hostname) + ret + menu(user) + create_footer(req);
survey.c | 401 | add_questions( playerq, 0 );
survey.c | 407 | add_questions( creatorq, sizeof(playerq) );
survey.c | 426 | seteuid(getuid());
survey.c | 428 | finish_errors(user);
survey.c | 431 | destruct(this_object());
survey.c | 438 | dest_me();
quests.c | 44 | query_quest_times(first);
quests.c | 46 | query_quest_times(second);
quests.c | 59 | seteuid("Room");
quests.c | 60 | unguarded( (: restore_object(SAVE_FILE) :) );
quests.c | 64 | query_quest_names();
quests.c | 65 | sort_array(ql, (: sort_list($1, $2) :));
quests.c | 66 | allocate(sizeof(ql));
quests.c | 67 | sizeof(ql);
quests.c | 68 | query_quest_title(ql[i]);
quests.c | 98 | lower_case(qname);
quests.c | 105 | unguarded( (: read_file, TEXTS_DIR + fname :) );
quests.c | 107 | htmlify(tmp);
quests.c | 113 | unguarded( (: read_file, TEXTS_DIR + fname :) );
quests.c | 118 | unguarded( (: save_object(SAVE_FILE) :) );
quests.c | 134 | test_age(name));
quests.c | 136 | sizeof(seen_quests[name]);
quests.c | 143 | save_file();
quests.c | 159 | return (hints < (MAX_HINTS[level-1]));
quests.c | 175 | sizeof(seen_quests[name]);
quests.c | 181 | save_file();
quests.c | 188 | save_file();
quests.c | 199 | create_footer(req);
quests.c | 204 | create_footer(req);
quests.c | 207 | create_header("Quest List");
quests.c | 212 | sscanf(args["param"], "%d", i);
quests.c | 218 | calc_filename(ql[i]);
quests.c | 226 | calc_filename(ql[i]);
quests.c | 234 | calc_filename(ql[i]);
quests.c | 248 | calc_filename(ql[i]);
quests.c | 276 | add_seen(user, ql[i], 1);
quests.c | 278 | calc_filename(ql[i]);
quests.c | 281 | calc_filename(ql[i]);
quests.c | 282 | if(file_size(TEXTS_DIR + fname) >
quests.c | 288 | if(file_size(TEXTS_DIR + fname) >
quests.c | 314 | add_seen(user, ql[i], 2);
quests.c | 316 | calc_filename(ql[i]);
quests.c | 319 | if(file_size(TEXTS_DIR + fname) >
quests.c | 344 | add_seen(user, ql[i], 3);
quests.c | 345 | calc_filename(ql[i]);
quests.c | 354 | sizeof(ql);
quests.c | 395 | calc_filename(ql[i]);
quests.c | 396 | if(file_size(TEXTS_DIR + "hints/" + fname) >
quests.c | 403 | if(file_size(TEXTS_DIR + "final_hints/" + fname) >
quests.c | 463 | sizeof(ql);
quests.c | 480 | calc_filename(ql[i]);
quests.c | 505 | create_footer(req);
nomic_rules.c | 27 | make_header(area);
nomic_rules.c | 30 | query_all_motions(area);
nomic_rules.c | 32 | filter(motions, (: ((class nomic_motion)$1)->state == NOMIC_STATE_CITIZEN_VOTE :));
nomic_rules.c | 37 | motion_as_html(area, motion);
nomic_rules.c | 74 | make_header(area);
nomic_rules.c | 76 | query_magistrates(area);
nomic_rules.c | 114 | query_all_nomic_rules(area);
nomic_rules.c | 139 | rule_as_html(rule);
nomic_rules.c | 170 | make_header(area);
nomic_rules.c | 183 | query_main_vote_page(area, ([ ]));
nomic_rules.c | 202 | make_header(area);
nomic_rules.c | 229 | query_main_vote_page(area, req->body->data);
nomic_rules.c | 259 | make_header(area);
nomic_rules.c | 279 | if (sizeof(voted) >
nomic_rules.c | 282 | query_main_vote_page(area, req->body->data);
nomic_rules.c | 314 | make_header(area);
nomic_rules.c | 336 | query_motion(area, int_id);
nomic_rules.c | 340 | motion_as_html(area, motion);
nomic_rules.c | 351 | motion_as_html(area, motion);
nomic_rules.c | 365 | make_header("Council Areas");
nomic_rules.c | 379 | query_all_motions(area);
nomic_rules.c | 381 | filter(motions, (: ((class nomic_motion)$1)->state == NOMIC_STATE_CITIZEN_VOTE :));
nomic_rules.c | 417 | do_vote(args["area"], args["vote"], args["id"], req);
nomic_rules.c | 419 | citizen_vote(args["area"], req);
nomic_rules.c | 421 | citizen_vote_confirm(args["area"], req);
nomic_rules.c | 423 | show_main_vote(args["area"], req);
nomic_rules.c | 425 | show_area(args["area"], req);
nomic_rules.c | 427 | show_motions(args["area"], req);
nomic_rules.c | 429 | show_all_areas(req);
surveydemo.c | 21 | startup(mapping args, string user);
surveydemo.c | 22 | menu(string user);
surveydemo.c | 122 | seteuid(getuid());
surveydemo.c | 146 | strlen(str);
surveydemo.c | 177 | htmlify_no_address(str);
surveydemo.c | 178 | if (strsrch(str, "http:") >
surveydemo.c | 179 | explode("#" + str, "http:");
surveydemo.c | 181 | sizeof(bits);
surveydemo.c | 200 | implode(bits, "");
surveydemo.c | 252 | create_footer(req);
surveydemo.c | 254 | seteuid(user);
surveydemo.c | 257 | time(), 0, 0 });
surveydemo.c | 258 | startup(args, user);
surveydemo.c | 260 | create_header("Playing Style Survey") + ret + create_footer(req);
surveydemo.c | 264 | time();
surveydemo.c | 266 | process_questions( playerq, args, 0 );
surveydemo.c | 268 | process_questions( creatorq, args, sizeof(playerq) );
surveydemo.c | 274 | create_header("Playing Style Survey") + ret + create_footer(req);
surveydemo.c | 292 | create_header("Error handler", req->hostname) + ret + menu(user) + create_footer(req);
surveydemo.c | 387 | add_questions( playerq, 0 );
surveydemo.c | 393 | add_questions( creatorq, sizeof(playerq) );
surveydemo.c | 411 | seteuid(getuid());
surveydemo.c | 413 | finish_errors(user);
surveydemo.c | 416 | destruct(this_object());
surveydemo.c | 423 | dest_me();
clubs.c | 39 | query_family_info();
clubs.c | 58 | file_size($1 + ".c") >
clubs.c | 60 | strcmp($1->query_name(), $2->query_name()) :));
clubs.c | 66 | club_wrap(bing));
clubs.c | 81 | query_club_info();
clubs.c | 98 | file_size($1 + ".c") >
clubs.c | 101 | strcmp($1->query_name(), $2->query_name()) :));
clubs.c | 107 | club_wrap(bing));
clubs.c | 122 | create_header("Current families");
clubs.c | 124 | top_families();
clubs.c | 125 | www_club_list("unknown", 1, args["start"], 2000);
clubs.c | 126 | call_out((: _family_string = 0 :), 120 * 60);
clubs.c | 131 | create_header("Current clubs");
clubs.c | 133 | top_clubs();
clubs.c | 134 | www_club_list("unknown", 0, args["start"], 2000);
clubs.c | 135 | call_out((: _club_string = 0 :), 120 * 60);
clubs.c | 140 | www_function("footer", ([ ]), req);
domains.c | 4 | www_request(str, args, req);
boards.c | 4 | www_request(str, args, req);
finger.c | 4 | www_request(str, args, req);
edit.c | 17 | if(args["file"] && file_size(args["file"]) >
edit.c | 24 | unguarded((:rm, "/tmp/"+req->user:));
edit.c | 27 | unguarded((:mkdir, "/tmp/"+req->user:));
edit.c | 30 | explode(args["file"], "/")[<1], req->body->data["body"], 1:));
edit.c | 51 | allocate(3, this_file) ...);
extra_boards.c | 16 | query_boards();
editor.c | 31 | query_paper_office(paper);
editor.c | 32 | make_header("Broken", paper);
editor.c | 35 | query_all_articles();
editor.c | 41 | filter(arts, (: lower_case(((class article)$1)->author) == $2 :), req->user);
editor.c | 43 | sizeof(arts);
editor.c | 47 | set_article_title_by_file(arts[i]->file_name, req->body->data["title"]);
editor.c | 49 | replace_string(req->body->data["body"], "\r\n", "\n");
editor.c | 50 | save_article_text_by_file(arts[i]->file_name, body);
editor.c | 51 | make_header(arts[i]->title, paper);
editor.c | 52 | load_article_text_by_file(arts[i]->file_name);
editor.c | 67 | replace_string(bits, "\n\n", "<p>");
editor.c | 68 | replace_string(bits, "\n", "<br>");
editor.c | 70 | replace_string(bits, "<pre>", "</font><pre>");
editor.c | 80 | replace_string(paper, " ", "+") + "\">Contents</a>" });
editor.c | 96 | query_paper_office(paper);
editor.c | 97 | make_header("Broken", paper);
editor.c | 100 | query_all_articles();
editor.c | 104 | filter(arts, (: lower_case(((class article)$1)->author) == $2 :), req->user);
editor.c | 106 | sizeof(arts);
editor.c | 108 | make_header(arts[i]->title, paper);
editor.c | 109 | load_article_text_by_file(arts[i]->file_name);
editor.c | 110 | tell_creator("pinkfish", "%O %O\n", arts[i]->title, arts[i]->file_name);
editor.c | 133 | replace_string(old_bits, "\n\n", "<p>");
editor.c | 134 | replace_string(old_bits, "\n", "<br>");
editor.c | 138 | replace_string(old_bits, "<pre>", "</font><pre>");
editor.c | 150 | replace_string(paper, " ", "+") + "\">Contents</a>" });
editor.c | 165 | make_header(paper, paper);
editor.c | 168 | query_paper_office(paper);
editor.c | 176 | query_all_articles();
editor.c | 177 | tell_creator("pinkfish", "%O\n", implode(map(arts, (: $1->file_name :)), ", "));
editor.c | 181 | filter(arts, (: lower_case(((class article)$1)->author) == $2 :), req->user);
editor.c | 189 | sizeof(arts);
editor.c | 243 | query_paper_office(paper);
editor.c | 244 | make_header("Broken", paper);
editor.c | 247 | query_all_articles();
editor.c | 250 | sizeof(arts);
editor.c | 252 | move_article(i, dir);
editor.c | 258 | show_paper(paper, req);
editor.c | 267 | query_paper_office(args["paper"]);
editor.c | 272 | make_header(args["paper"], args["paper"]);
editor.c | 278 | make_header(args["paper"], args["paper"]);
editor.c | 287 | move_article(args["paper"], args["article"], req, "up");
editor.c | 289 | move_article(args["paper"], args["article"], req, "down");
editor.c | 291 | update_article(args["paper"], args["article"], req);
editor.c | 293 | show_article(args["paper"], args["article"], req);
editor.c | 295 | show_paper(args["paper"], req);
logo_upload.c | 8 | seteuid(getuid());
logo_upload.c | 26 | query_paper_office(args["paper"]);
logo_upload.c | 39 | lower_case(paper);
logo_upload.c | 40 | replace_string(paper, " ", "_");
logo_upload.c | 41 | tell_creator("pinkfish", "Uploaded logo ( " + geteuid(this_object()) + " " + paper + ").\n");
logo_upload.c | 43 | unguarded( (: rm("/www/external/newspaper/logos/logo" + $(paper) + ".jpg") :));
logo_upload.c | 44 | unguarded( (: rm("/www/external/newspaper/logos/logo" + $(paper) + ".gif") :));
project.c | 14 | get_project_menu();
project.c | 15 | get_add_project(mapping);
project.c | 16 | get_web_page (string, string);
project.c | 17 | www_project_info (class project);
project.c | 18 | get_modify_project (string, string, string);
project.c | 19 | get_add_note (mapping, string);
project.c | 20 | get_add_task (mapping, string);
project.c | 21 | do_add_file (mapping, string);
project.c | 22 | get_modify_task (string, string);
project.c | 23 | get_add_file (mapping, string);
project.c | 24 | get_modify_note (string, string);
project.c | 25 | get_modify_file (string, string, int);
project.c | 26 | get_notes_list (string*);
project.c | 27 | get_notes_summary (string);
project.c | 28 | get_tasks_summary (string);
project.c | 29 | get_view_project (string, int);
project.c | 30 | get_view_page (string, string, string);
project.c | 31 | get_view_note (string, string);
project.c | 32 | get_files_summary (string);
project.c | 43 | explode (replace (str, ({" ", ""})), ",");
project.c | 46 | map (arr, (: lower_case ($1) :));
project.c | 58 | explode_to_array (str);
project.c | 85 | to_int (number);
project.c | 116 | explode (t, ".");
project.c | 143 | capitalize (d) + "</a>" });
project.c | 165 | sort_array (creators, 1);
project.c | 169 | capitalize (c) + "</a>" });
project.c | 222 | data_dump();
project.c | 224 | parse_details (tmp);
project.c | 233 | parse_details (tmp);
project.c | 241 | parse_details (tmp);
project.c | 275 | project_task_data(id);
project.c | 296 | ctime (t->date_added));
project.c | 319 | get_view_project (id, 0);
project.c | 322 | get_task_file (id, task);
project.c | 378 | get_files_summary (id);
project.c | 380 | get_file (id, file, task);
project.c | 420 | query_files(id);
project.c | 477 | project_note_data(id);
project.c | 494 | ctime (t->date_added));
project.c | 535 | get_id (data["projid"]);
project.c | 536 | get_id (data["tid"]);
project.c | 547 | get_task_file (data["projid"], data["tid"]);
project.c | 556 | test_creator ($1) :));
project.c | 566 | to_int (data["completed"]);
project.c | 571 | map (creators, (: lower_case ($1) :));
project.c | 588 | set_task_file (data["projid"], data ["tid"], tmp, name);
project.c | 617 | get_id (data ["projid"]);
project.c | 618 | get_id (data["nid"]);
project.c | 621 | get_note_file (data["projid"], data["nid"]);
project.c | 643 | set_note_file (data["projid"], data ["nid"], tmp, name);
project.c | 663 | get_id (data ["projid"]);
project.c | 666 | to_int (data["lead"]));
project.c | 670 | to_int (data["lead"])), "Oh no, error!");
project.c | 727 | get_id (data["projid"]);
project.c | 730 | find_object ("/d/" + $1 + "/master") :));
project.c | 737 | explode_to_array (data["playtesters"]);
project.c | 739 | get_project_file (data["projid"]);
project.c | 766 | test_creator ($1) :));
project.c | 769 | explode (replace (data["twiki"], ({" ", ""})), ",");
project.c | 774 | explode (replace (data["sub"], ({" ", ""})), ",");
project.c | 778 | member_array (data["size"], SIZE);
project.c | 781 | member_array (data["complexity"], COMPLEXITY);
project.c | 784 | normalise_guilds (data["guilds"]);
project.c | 803 | to_int (data ["completed"]);
project.c | 811 | map (creators, (: lower_case ($1) :));
project.c | 827 | get_time_value (data["number"], data["time"]);
project.c | 829 | time() + tmp_val);
project.c | 838 | member_array (data["status"], STATUS);
project.c | 839 | catch_status_change (tmp->id, tmp->status);
project.c | 842 | assign_playtesters (data["projid"], pts, name);
project.c | 844 | set_project_file (data["projid"], tmp, name);
project.c | 861 | get_time_value (query["number"], query["time"]);
project.c | 863 | filter_by_query (query);
project.c | 868 | parse_details (tmp);
project.c | 885 | get_id (data["projid"]);
project.c | 893 | find_object ("/d/" + $1 + "/master") :));
project.c | 913 | test_creator ($1) :));
project.c | 916 | explode (replace (data["twiki"], ({" ", ""})), ",");
project.c | 920 | member_array (data["size"], SIZE);
project.c | 923 | member_array (data["complexity"], COMPLEXITY);
project.c | 929 | explode (replace (data["files"], ({" ", ""})), ",");
project.c | 935 | normalise_guilds (data["guilds"]));
project.c | 939 | get_time_value (data["number"], data["time"]));
project.c | 958 | get_id (data["nid"]);
project.c | 1044 | find_player (name);
project.c | 1054 | master()->valid_grant(name, data["fid"], access);
project.c | 1056 | tell_creator ("drakkos", "%d.\n", k);
project.c | 1081 | get_id (data["tid"]);
project.c | 1104 | test_creator ($1) :));
project.c | 1106 | add_task_to_project (data["projid"], data["tid"], name);
project.c | 1130 | to_int (data["completed"]);
project.c | 1139 | time() + get_time_value (data["number"], data["time"]));
project.c | 1153 | get_project_file (id);
project.c | 1193 | query_project_completeness (p->id);
project.c | 1207 | capitalize ($1) :)));
project.c | 1214 | ctime (p->estimated_completion);
project.c | 1229 | capitalize (SIZE[p->size]);
project.c | 1236 | capitalize (COMPLEXITY [p->complexity]);
project.c | 1244 | capitalize ($1) :)));
project.c | 1252 | ctime(p->last_rotation);
project.c | 1266 | capitalize (STATUS[p->status]);
project.c | 1272 | ctime (p->last_status_change);
project.c | 1279 | ctime (p->date_added);
project.c | 1293 | query_multiple_short (p->files);
project.c | 1300 | query_multiple_short (get_twiki_links (p));
project.c | 1314 | get_tasks_summary (id);
project.c | 1315 | get_notes_summary (id);
project.c | 1316 | get_files_summary (id);
project.c | 1319 | get_web_page (ret, title);
project.c | 1347 | query_multiple_short (get_creator_links (p->assigned_to));
project.c | 1360 | query_num (p->percent_complete);
project.c | 1375 | master()->query_domains() - no_project_list);
project.c | 1401 | sizeof (domains);
project.c | 1474 | get_estimate();
project.c | 1490 | sizeof (SIZE);
project.c | 1507 | sizeof (COMPLEXITY);
project.c | 1529 | add_twiki (data["projid"], t);
project.c | 1645 | get_estimate();
project.c | 1715 | get_project_file (project);
project.c | 1780 | get_project_file (id);
project.c | 1829 | implode (tmp->playtesters, ",");
project.c | 1839 | sizeof (SIZE);
project.c | 1855 | sizeof (COMPLEXITY);
project.c | 1871 | implode (tmp->guild_specific, ",");
project.c | 1906 | get_estimate();
project.c | 1937 | get_modify_task(id, id_two);
project.c | 1940 | get_modify_note(id, id_two);
project.c | 1943 | get_modify_file (id, id_two, lead);
project.c | 1948 | get_tasks_summary (id);
project.c | 1949 | get_notes_summary (id);
project.c | 1950 | get_files_summary (id);
project.c | 1961 | get_task_file (id, task);
project.c | 1963 | get_view_project (id, 0);
project.c | 2019 | get_estimate();
project.c | 2037 | get_file (id, file, task);
project.c | 2039 | get_view_project (id, 0);
project.c | 2095 | get_note_file (id, note);
project.c | 2097 | get_view_project (id, 0);
project.c | 2136 | get_view_project (id, 0);
project.c | 2138 | get_note_file (id, note);
project.c | 2285 | seteuid (geteuid());
project.c | 2310 | get_project_menu();
project.c | 2327 | get_header (title) + text + get_footer();
project.c | 2695 | tell_creator ("drakkos", "%s: %d.\n", request->user, sizeof (data));
project.c | 2706 | delete_task(args["pid"], args["tid"], request->user);
project.c | 2716 | get_web_page (get_add_task(data, args["pid"]), "Adding a task");
project.c | 2732 | delete_note(args["pid"], args["nid"], request->user);
project.c | 2742 | get_web_page (get_add_note(data, args["pid"]), "Adding a note");
project.c | 2758 | tell_creator ("drakkos", "%O.\n", args);
project.c | 2762 | tell_creator ("drakkos", "%d.\n", i);
project.c | 2777 | delete_project (args["pid"], request->user);
project.c | 2778 | get_web_page (get_project_list(), "Project deleted.");
project.c | 2786 | get_web_page (get_add_project(), "Adding a project");
project.c | 2789 | get_web_page (get_project_list(), "Project List");
project.c | 2808 | get_web_page (get_query_project(), "Query Projects");
project.c | 2820 | capitalize (args["creator"]));
project.c | 2835 | get_web_page (parse_details (tmp), "Projects Updated This Week");
project.c | 2847 | get_web_page (parse_details (tmp), "Projects In Playtesting");
project.c | 2854 | do_add_project (data, request->user);
project.c | 2857 | do_add_task (data, request->user);
project.c | 2860 | do_add_note (data, request->user);
project.c | 2863 | do_add_file (data, request->user);
project.c | 2866 | get_web_page (web_query (data), "Query Completed");
project.c | 2869 | do_update_project (data, request->user);
project.c | 2872 | do_update_task (data, request->user);
project.c | 2875 | do_update_note (data, request->user);
project.c | 2883 | get_web_page (parse_details (tmp), "Projects Updated This Week");
bug_top.c | 66 | build_tables(int row, int column);
bug_top.c | 67 | build_error_stats();
bug_top.c | 70 | create();
bug_top.c | 72 | set_title( "Bug Fixing Statistics" );
bug_top.c | 73 | build_error_stats();
bug_top.c | 81 | allocate( sizeof( _queries ) );
bug_top.c | 85 | sizeof( _queries );
bug_top.c | 86 | sizeof( _queries[ i ] );
bug_top.c | 88 | allocate( size );
bug_top.c | 91 | call_out( (: build_tables :), i, i, j);
bug_top.c | 114 | sprintf("WHERE %s", implode(select, " AND "));
bug_top.c | 120 | build_full_sql_query(who, table, query);
bug_top.c | 129 | sizeof( _finished_queries );
bug_top.c | 132 | sizeof( _finished_queries[ i ] );
bug_top.c | 144 | construct_html_document(txt);
bug_top.c | 149 | build_final_tables();
bug_top.c | 153 | evaluate( func, _error_cache );
bug_top.c | 167 | check_finished();
bug_top.c | 187 | make_table( title, results );
bug_top.c | 191 | tell_creator( "taffyd", "%s, %d\n", _finished_queries[ row ][ column ], _doing_queries );
bug_top.c | 193 | check_finished();
bug_top.c | 201 | build_sql_query( bits[1], bits[2], bits[3] );
bug_top.c | 203 | MAKE_SQL_REQUEST(query, (: finished_sql_query($1, $2, $(bits)[1], $(bits)[0], $(row), $(column)) :));
bug_top.c | 205 | tell_creator( "taffyd", "%s\n", query );
bug_top.c | 260 | make_table(rows, "Files with most bug reports", "file", "reports");
bug_top.c | 264 | make_table(rows, "Files with most idea reports", "file", "reports");
obj.food.c | 1056 | add_succeeded_mess(), as it is processed later as add_succeeded_mess(eat_mess, ({ }));
obj.monster.c | 631 | this_object()->bing("fred", "chicken");
quarto.c | 19 | create();
quarto.c | 20 | create();
quarto.c | 24 | set_short("quarto board");
quarto.c | 25 | add_adjective("quarto");
quarto.c | 26 | add_alias("quarto");
quarto.c | 27 | set_name("board");
quarto.c | 33 | add_player_id_type("green", 0);
quarto.c | 34 | add_player_id_type("red", 0);
quarto.c | 36 | set_minimum_needed(2);
quarto.c | 38 | reset_game();
quarto.c | 47 | allocate(4, (: allocate(4, -1) :));
quarto.c | 48 | allocate(16);
quarto.c | 49 | sizeof(_pool);
quarto.c | 60 | randomise_player_numbers();
quarto.c | 148 | sizeof(_board[0]);
quarto.c | 152 | sizeof(_board);
quarto.c | 153 | allocate(4, "");
quarto.c | 154 | sizeof(_board[x]);
quarto.c | 155 | query_piece_type_string(_board[x][y]);
quarto.c | 156 | sizeof(bit);
quarto.c | 160 | sizeof(bit);
quarto.c | 163 | sizeof(_board[x]);
quarto.c | 173 | long() + query_board_string();
quarto.c | 177 | init();
card_base.c | 21 | new(class playing_card);
card_base.c | 29 | new(class playing_card);
card_base.c | 49 | random(sizeof(deck));
card_base.c | 96 | sprintf("%2d%s", card->number, ret);
card_base.c | 136 | allocate(3);
card_base.c | 162 | sprintf(" %2d", card->number);
card_base.c | 187 | allocate(2);
card_base.c | 208 | sprintf("%-2d", card->number);
card_base.c | 254 | sizeof(hand);
card_base.c | 271 | map(hand, (: query_card_three :));
card_base.c | 273 | map(hand, (: ({ query_card_string($1) }) :));
card_base.c | 275 | map(hand, (: query_card_two :));
card_base.c | 278 | sizeof(card_str[0]);
card_base.c | 279 | sizeof(card_str);
multiplayer_base.c | 26 | query_currently_playing_ids();
multiplayer_base.c | 27 | delete_gone_players();
multiplayer_base.c | 28 | find_player_id_of_person(object person);
multiplayer_base.c | 40 | renumber_players();
multiplayer_base.c | 48 | delete_gone_players();
multiplayer_base.c | 54 | query_currently_playing_ids();
multiplayer_base.c | 129 | find_player_id_of_person(ob);
multiplayer_base.c | 140 | find_player_id_of_person(ob);
multiplayer_base.c | 158 | query_name();
multiplayer_base.c | 159 | query_cap_name();
multiplayer_base.c | 203 | keys(_players);
multiplayer_base.c | 206 | random(sizeof(ids));
multiplayer_base.c | 219 | new(class player_info);
multiplayer_base.c | 228 | map_delete(_players, id);
multiplayer_base.c | 270 | keys(_players);
multiplayer_base.c | 278 | filter(keys(_players), (: _players[$1]->name :));
multiplayer_base.c | 308 | find_player(_players[id]->name);
multiplayer_base.c | 345 | if (sizeof(query_currently_playing_ids()) >
multiplayer_base.c | 369 | sizeof(_players);
multiplayer_base.c | 370 | find_player_id_from_number(cur);
multiplayer_base.c | 397 | sizeof(_players)) % sizeof(_players);
multiplayer_base.c | 398 | find_player_id_from_number(cur);
multiplayer_base.c | 411 | find_next_player(_current_player);
multiplayer_base.c | 437 | find_player_id_from_number(0);
multiplayer_base.c | 460 | find_player(_players[id]->name);
multiplayer_base.c | 462 | tell_object(player, message);
multiplayer_base.c | 471 | tell_player(_current_player, message);
multiplayer_base.c | 488 | tell_player(id, message);
multiplayer_base.c | 539 | random(sizeof(arr));
multiplayer_base.c | 555 | add_failed_mess("Someone is already playing " + id + " on $D.\n");
multiplayer_base.c | 560 | add_failed_mess("You are already playing on $D.\n");
multiplayer_base.c | 573 | add_succeeded_mess("$N $V as " + id + " on $D.\n");
multiplayer_base.c | 574 | multiplayer_someone_joins(id);
multiplayer_base.c | 578 | add_failed_mess("Some weird error joining game on $D.\n");
multiplayer_base.c | 589 | find_player_id_of_person(this_player());
multiplayer_base.c | 591 | add_succeeded_mess("$N $V from game on $D.\n");
multiplayer_base.c | 592 | multiplayer_someone_resigns(id);
multiplayer_base.c | 595 | add_failed_mess("You are not playing on $D to resign.\n");
multiplayer_base.c | 603 | implode(keys(_players), "|");
multiplayer_base.c | 605 | do_join($4[0]) :));
multiplayer_base.c | 607 | do_resign() :));
multiplayer_base.c | 615 | add_auto_load_value(map, LOAD_TAG, "players", _players);
multiplayer_base.c | 616 | add_auto_load_value(map, LOAD_TAG, "current player", _current_player);
multiplayer_base.c | 617 | add_auto_load_value(map, LOAD_TAG, "started ids", _ids_when_started);
multiplayer_base.c | 618 | add_auto_load_value(map, LOAD_TAG, "winner", _winner);
multiplayer_base.c | 619 | add_auto_load_value(map, LOAD_TAG, "game started", _game_started);
multiplayer_base.c | 628 | query_auto_load_value(map, LOAD_TAG, "players");
multiplayer_base.c | 629 | query_auto_load_value(map, LOAD_TAG, "current player");
multiplayer_base.c | 630 | query_auto_load_value(map, LOAD_TAG, "started ids");
multiplayer_base.c | 631 | query_auto_load_value(map, LOAD_TAG, "winner");
multiplayer_base.c | 632 | query_auto_load_value(map, LOAD_TAG, "game started");
mancala.c | 21 | create();
mancala.c | 22 | create();
mancala.c | 26 | set_short("mancala board");
mancala.c | 27 | add_adjective("mancala");
mancala.c | 28 | add_alias("mancala");
mancala.c | 29 | set_name("board");
mancala.c | 35 | add_player_id_type("green", 0);
mancala.c | 36 | add_player_id_type("red", 0);
mancala.c | 38 | set_minimum_needed(2);
mancala.c | 40 | add_help_file("mancala");
mancala.c | 42 | reset_game();
mancala.c | 49 | allocate(12, (: 4 :));
mancala.c | 57 | randomise_player_numbers();
mancala.c | 62 | reset_game();
mancala.c | 79 | is_game_started() && query_current_player() == id?"<-- Their turn":""));
mancala.c | 91 | sprintf("|%2d| ", _board[i]);
mancala.c | 101 | sprintf("%%^RED%%^|%2d|%%^RESET%%^   ", _mancala["red"]);
mancala.c | 105 | sprintf("   %%^GREEN%%^|%2d|%%^RESET%%^\n", _mancala["green"]);
mancala.c | 115 | sprintf("|%2d| ", _board[2 * SIDE_LENGTH - i]);
mancala.c | 128 | sprintf("  %c  ", i + 'A');
mancala.c | 140 | long() + query_board_string();
mancala.c | 157 | sprintf("green %c", loc + 'A');
mancala.c | 159 | sprintf("red %c", 2 * SIDE_LENGTH - loc + 'A' - 1);
mancala.c | 212 | finish_game(query_player_cap_name("red"));
mancala.c | 214 | finish_game(query_player_cap_name("green"));
mancala.c | 217 | query_player_cap_name("red"));
mancala.c | 239 | add_failed_mess("The game has not started.\n");
mancala.c | 244 | add_failed_mess("It is not your go!\n");
mancala.c | 249 | if (pos < 0 || pos >= SIDE_LENGTH || strlen(pos_str) >
mancala.c | 267 | add_failed_mess("You can only play from a bin that has stones in it.\n");
mancala.c | 296 | query_opposite_side(loc);
mancala.c | 299 | query_location_string(i) + ".\n");
mancala.c | 313 | query_location_string(loc) + ".\n");
mancala.c | 316 | increment_current_player();
mancala.c | 318 | query_board_string());
mancala.c | 321 | query_board_string());
mancala.c | 333 | add_failed_mess("You must be playing the game to start it.\n");
mancala.c | 338 | add_failed_mess("You need two people to play Quarto.\n");
mancala.c | 342 | add_succeeded_mess("$N $V a game of $D.\n");
mancala.c | 343 | increment_current_player();
mancala.c | 345 | query_board_string());
mancala.c | 347 | query_current_player() }));
mancala.c | 352 | init();
mancala.c | 355 | do_move($4[0]) :));
mancala.c | 356 | add_command("start", "[new] [game] on <direct:object>", (: do_start() :));
mancala.c | 363 | query_dynamic_auto_load();
mancala.c | 364 | query_dynamic_auto_load(map);
mancala.c | 365 | add_auto_load_value(map, LOAD_TAG, "board", _board);
mancala.c | 366 | add_auto_load_value(map, LOAD_TAG, "mancala", _mancala);
mancala.c | 372 | init_dynamic_arg(map, player);
mancala.c | 373 | init_dynamic_arg(map, player);
mancala.c | 374 | query_auto_load_value(map, LOAD_TAG, "board");
mancala.c | 375 | query_auto_load_value(map, LOAD_TAG, "mancala");
reversi_board.c | 21 | reset_board();
reversi_board.c | 24 | set_name("table");
reversi_board.c | 25 | set_short("reversi table");
reversi_board.c | 26 | add_adjective("reversi");
reversi_board.c | 31 | set_weight(100);
reversi_board.c | 35 | allocate(8, (: new(class co_ord) :));
reversi_board.c | 53 | reset_board();
reversi_board.c | 62 | allocate(BOARD_SIZE);
reversi_board.c | 63 | sizeof(_board);
reversi_board.c | 64 | allocate(BOARD_SIZE);
reversi_board.c | 122 | query_black_player();
reversi_board.c | 124 | query_white_player();
reversi_board.c | 156 | sizeof(_board);
reversi_board.c | 160 | query_line();
reversi_board.c | 162 | sizeof(_board);
reversi_board.c | 163 | sprintf("%c  %%^B_GREEN%%^|", x + 'A');
reversi_board.c | 164 | sizeof(_board[x]);
reversi_board.c | 179 | query_line();
reversi_board.c | 194 | long() + query_board_string();
reversi_board.c | 203 | lower_case(str);
reversi_board.c | 208 | new(class co_ord);
reversi_board.c | 257 | printf("Checking %O -- %O\n", off, bing);
reversi_board.c | 330 | query_board_string());
reversi_board.c | 335 | query_board_string());
reversi_board.c | 351 | add_failed_mess("It is not your move!\n");
reversi_board.c | 355 | query_co_ords(str);
reversi_board.c | 357 | add_failed_mess("Sorry, " + str + " is not a valid move.\n");
reversi_board.c | 362 | add_failed_mess("Sorry, " + str + " is not a valid move.\n");
reversi_board.c | 366 | make_move(bing, query_whose_move());
reversi_board.c | 368 | this_object() }));
reversi_board.c | 382 | query_black_player();
reversi_board.c | 384 | query_white_player();
reversi_board.c | 388 | add_failed_mess("Someone is already playing that colour.\n");
reversi_board.c | 393 | this_player()->query_name();
reversi_board.c | 396 | this_player()->query_name();
reversi_board.c | 401 | this_object() }));
reversi_board.c | 412 | reset_board();
reversi_board.c | 414 | this_object() }));
reversi_board.c | 417 | add_failed_mess("Only the players of the game can start a new one.\n");
reversi_board.c | 429 | this_object() }));
reversi_board.c | 435 | this_object() }));
reversi_board.c | 447 | this_player()->check_dark(environment()->query_light());
reversi_board.c | 449 | add_failed_mess("It is too dark to see the board.\n");
reversi_board.c | 453 | write(query_board_string());
reversi_board.c | 459 | init();
reversi_board.c | 461 | do_join($4[0] == "black"?BOARD_BLACK:BOARD_WHITE) :));
reversi_board.c | 463 | do_resign() :));
reversi_board.c | 464 | add_command("move", "<string'pos'>", (: do_move($4[0]) :) );
reversi_board.c | 465 | add_command("start", "new game", (: do_start() :) );
reversi_board.c | 466 | add_command("view", "", (: do_view() :));
reversi_board.c | 473 | query_dynamic_auto_load();
reversi_board.c | 474 | add_auto_load_value(map, BOARD_TAG, "board", _board);
reversi_board.c | 475 | add_auto_load_value(map, BOARD_TAG, "move no", _move_no);
reversi_board.c | 476 | add_auto_load_value(map, BOARD_TAG, "white", _player_white);
reversi_board.c | 477 | add_auto_load_value(map, BOARD_TAG, "black", _player_black);
reversi_board.c | 478 | add_auto_load_value(map, BOARD_TAG, "last move", _last_move);
reversi_board.c | 484 | init_dynamic_arg(map, player);
reversi_board.c | 486 | query_auto_load_value(map, BOARD_TAG, "board");
reversi_board.c | 487 | query_auto_load_value(map, BOARD_TAG, "move no");
reversi_board.c | 488 | query_auto_load_value(map, BOARD_TAG, "white");
reversi_board.c | 489 | query_auto_load_value(map, BOARD_TAG, "black");
reversi_board.c | 490 | query_auto_load_value(map, BOARD_TAG, "last move");
reversi_board.c | 492 | reset_board();
hearts.c | 13 | set_short("hearts game");
hearts.c | 14 | add_adjective("hearts");
hearts.c | 15 | set_name("game");
hearts.c | 20 | add_player_id_type("green", 0);
hearts.c | 21 | add_player_id_type("red", 0);
hearts.c | 22 | add_player_id_type("blue", 0);
hearts.c | 23 | add_player_id_type("yellow", 0);
hearts.c | 24 | add_player_id_type("mauve", 0);
hearts.c | 25 | add_player_id_type("vermillion", 0);
hearts.c | 26 | add_player_id_type("cyan", 0);
