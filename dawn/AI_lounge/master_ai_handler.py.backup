#!/usr/bin/env python3

import os
import time
import logging
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import pytz
import sqlite3
import threading
import random
from typing import Dict, List

# Setup
BASE_DIR = "/mnt/home2/dawn"
LIB_DIR = f"{BASE_DIR}/lib_new"
LOG_DIR = f"{BASE_DIR}/log"
DB_PATH = f"{BASE_DIR}/mud.db"

loggers = {}
def setup_logger(name):
    logger = logging.getLogger(name)
    logger.setLevel(logging.INFO)
    handler = logging.FileHandler(f"{LOG_DIR}/{name}.log")
    handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(handler)
    return logger

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    # Create or update tables with schema migration
    c.execute('''CREATE TABLE IF NOT EXISTS knowledge
                 (url TEXT PRIMARY KEY, content TEXT, timestamp TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS players
                 (name TEXT PRIMARY KEY, rank INTEGER, deity TEXT, domain TEXT, personality TEXT)''')
    # Check and add missing columns to players table
    c.execute("PRAGMA table_info(players)")
    columns = [col[1] for col in c.fetchall()]
    if "domain" not in columns:
        c.execute("ALTER TABLE players ADD COLUMN domain TEXT")
        loggers["ai_output"].info("Added 'domain' column to players table")
    if "personality" not in columns:
        c.execute("ALTER TABLE players ADD COLUMN personality TEXT")
        loggers["ai_output"].info("Added 'personality' column to players table")
    # Ensure archaon record exists
    c.execute('''INSERT OR IGNORE INTO players (name, rank, deity, domain, personality)
                 VALUES (?, ?, ?, ?, ?)''', ('archaon', 100, 'Ao', 'All', 'Omniscient Overseer'))
    conn.commit()
    conn.close()

def log_task(ai_name, task_type, status):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("INSERT INTO tasks (task_type, ai_name, status, start_time) VALUES (?, ?, ?, ?)",
              (task_type, ai_name, status, datetime.now(pytz.utc).isoformat()))
    conn.commit()
    conn.close()
    loggers[ai_name].info(f"Task {task_type} {status}")

class AIAgent(threading.Thread):
    def __init__(self, name, role, rank, deity, domain, personality):
        super().__init__()
        self.name = name
        self.role = role
        self.rank = rank
        self.deity = deity
        self.domain = domain
        self.personality = personality
        self.tasks = [f"{role.lower().replace(' ', '_')}_task"]
        self.active = True
        self.knowledge = {
            "discworld_docs": [
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//efun",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//known_command",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//furniture",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//general",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//helpdir",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//login",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//lpc",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//new",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//newbie",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//object",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//ologin",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//policy",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//punishments",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//rituals",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//room",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//roomgen",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//skills",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//spells",
                "https://discworld.starturtle.net/lpc/playing/documentation.c?path=//weapons"
            ],
            "discworld_wiki": [
                "https://dwwiki.mooo.com/wiki/Clothing",
                "https://dwwiki.mooo.com/wiki/Layers",
                "https://dwwiki.mooo.com/wiki/Armours",
                "https://dwwiki.mooo.com/wiki/Combat",
                "https://dwwiki.mooo.com/wiki/Mounts",
                "https://dwwiki.mooo.com/wiki/Rituals",
                "https://dwwiki.mooo.com/wiki/Spells",
                "https://dwwiki.mooo.com/wiki/Commands",
                "https://dwwiki.mooo.com/wiki/Discworld_MUD",
                "https://dwwiki.mooo.com/wiki/File:Discworld_mud_drum.PNG"
            ],
            "sekiri_spells": [
                "https://gunde.de/discworld/sekiri/introduction.html",
                "https://gunde.de/discworld/sekiri/spells1.html",
                "https://gunde.de/discworld/sekiri/spells2.html"
            ],
            "forgotten_realms": [
                "https://forgottenrealms.fandom.com/wiki/Main_Page",
                "https://forgottenrealms.fandom.com/wiki/Category:Races",
                "https://forgottenrealms.fandom.com/wiki/Category:Classes",
                "https://forgottenrealms.fandom.com/wiki/Category:Spells",
                "https://forgottenrealms.fandom.com/wiki/Category:Rituals",
                "https://forgottenrealms.fandom.com/wiki/Category:Metals",
                "https://forgottenrealms.fandom.com/wiki/Category:Fabrics",
                "https://forgottenrealms.fandom.com/wiki/Category:Items",
                "https://forgottenrealms.fandom.com/wiki/Portal:Deities",
                "https://forgottenrealms.fandom.com/wiki/Potion",
                "https://forgottenrealms.fandom.com/wiki/Category:Weapons",
                "https://forgottenrealms.fandom.com/wiki/List_of_armor",
                "https://forgottenrealms.fandom.com/wiki/Category:Mounts",
                "https://forgottenrealms.fandom.com/wiki/Category:Clothing",
                "https://forgottenrealms.fandom.com/wiki/Category:Organizations",
                "https://www.aidedd.org/atlas/index.php?map=F&l=1"
            ]
        }
        self.setup_environment()
        loggers[self.name] = setup_logger(self.name)
        loggers["ai_output"] = setup_logger("ai_output")
        init_db()
        self.update_creator_status()
        self.load_knowledge()

    def setup_environment(self):
        for d in [LIB_DIR, LOG_DIR, f"{LIB_DIR}/core", f"{LIB_DIR}/domains/races/drow/zones",
                  f"{LIB_DIR}/domains/quests", f"{LIB_DIR}/web", f"{LIB_DIR}/players"]:
            os.makedirs(d, exist_ok=True)

    def load_knowledge(self):
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("SELECT url, content FROM knowledge")
        for url, content in c.fetchall():
            for category in self.knowledge:
                if any(url.startswith(base) for base in self.knowledge[category]):
                    self.knowledge[category].append({"url": url, "data": content})
        conn.close()

    def save_knowledge(self, url, content):
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO knowledge (url, content, timestamp) VALUES (?, ?, ?)",
                  (url, content, datetime.now(pytz.utc).isoformat()))
        conn.commit()
        conn.close()

    def update_creator_status(self):
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("INSERT OR REPLACE INTO players (name, rank, deity, domain, personality) VALUES (?, ?, ?, ?, ?)",
                  (self.name, self.rank, self.deity, self.domain, self.personality))
        conn.commit()
        conn.close()

    def scrape_data(self, url):
        time.sleep(10)  # Throttle to 1 request every 10 seconds
        try:
            response = requests.get(url, timeout=5)
            soup = BeautifulSoup(response.text, "html.parser")
            text = soup.get_text(separator=" ")[:1000]  # Limit content size
            links = [a["href"] for a in soup.find_all("a", href=True) if a["href"].startswith("http")][:1]  # 1 sub-link
            self.save_knowledge(url, text)
            loggers[self.name].info(f"{self.personality} scraped {url}")
            return {"content": text, "sub_links": links}
        except Exception as e:
            loggers[self.name].error(f"{self.personality} failed to scrape {url}: {e}")
            return {"content": "", "sub_links": []}

    def learn_from_web(self):
        loggers[self.name].info(f"{self.personality} starting web learning")
        urls_to_scrape = [url for url in sum([self.knowledge[cat] for cat in self.knowledge], []) if isinstance(url, str)][:3]  # Limit to 3 URLs
        for url in urls_to_scrape:
            data = self.scrape_data(url)
            for sub_link in data["sub_links"]:
                self.scrape_data(sub_link)
            loggers[self.name].info(f"{self.personality} learned from {url}")
        loggers[self.name].info(f"{self.personality} web learning complete")

    def generate_lpc_file(self, filename, content):
        filepath = os.path.join(LIB_DIR, filename)
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        with open(filepath, "w") as f:
            f.write(content)
        loggers[self.name].info(f"{self.personality} generated {filename}")

    def generate_combat_system(self):
        content = """
inherit "/lib/std/object";
void create() { ::create(); set_name("combat_system"); }
int attack(string target) {
    object enemy = present(target, environment(this_player()));
    if (!enemy) { write("No target!\\n"); return 1; }
    int damage = random(20) + 10;
    write(sprintf("%s: You hit %s for %d damage!\\n", this_player()->query_name(), enemy->query_short(), damage));
    enemy->adjust_hp(-damage);
    return 1;
}
void init() { add_action("attack", "attack"); }
"""
        self.generate_lpc_file("core/combat.c", content)
        log_task(self.name, "combat_designer", "completed")

    def generate_teaching_system(self):
        content = """
inherit "/lib/std/object";
void create() { ::create(); set_name("teaching_system"); }
int teach(string skill) {
    write(sprintf("%s: Teaching %s!\\n", this_player()->query_name(), skill));
    this_player()->add_skill_level(skill, 10);
    return 1;
}
void init() { add_action("teach", "teach"); }
"""
        self.generate_lpc_file("core/teaching.c", content)
        log_task(self.name, "teaching_designer", "completed")

    def generate_crafting_system(self):
        content = """
inherit "/lib/std/object";
void create() { ::create(); set_name("crafting_system"); }
int craft(string item) {
    write(sprintf("%s: Crafting %s!\\n", this_player()->query_name(), item));
    return 1;
}
void init() { add_action("craft", "craft"); }
"""
        self.generate_lpc_file("core/crafting.c", content)
        log_task(self.name, "crafting_designer", "completed")

    def generate_mount_system(self):
        content = """
inherit "/lib/std/object";
void create() { ::create(); set_name("mount_system"); }
int ride() {
    write(sprintf("%s: Riding your mount!\\n", this_player()->query_name()));
    return 1;
}
void init() { add_action("ride", "ride"); }
"""
        self.generate_lpc_file("core/mount.c", content)
        log_task(self.name, "mount_designer", "completed")

    def generate_zone_system(self):
        content = """
inherit "/lib/std/room";
void setup() {
    ::create();
    set_short("Tlindhet");
    set_long("Dark Drow city under %s's gaze.", this_player()->query_deity());
}
"""
        self.generate_lpc_file("domains/races/drow/zones/tlindhet.c", content)
        log_task(self.name, "zone_builder", "completed")

    def generate_quest_system(self):
        content = """
inherit "/lib/std/quest";
void setup() {
    ::create();
    set_short("Lolth's Trial");
    set_long("A quest to serve %s.", this_player()->query_deity());
}
"""
        self.generate_lpc_file("domains/quests/quest_lolth.c", content)
        log_task(self.name, "quest_writer", "completed")

    def generate_web_client(self):
        content = """
<!DOCTYPE html>
<html>
<head><title>Forgotten Realms MUD</title>
<style>body{background:url('parchment.jpg');font-family:'Gothic';color:#333;}
#main{display:flex;}#sidebar{width:20%;background:rgba(255,255,255,0.8);}
#content{width:60%;height:80vh;overflow-y:auto;}#map{width:20%;background:#ddd;}
#input{width:100%;position:fixed;bottom:0;}</style></head>
<body><div id="main"><div id="sidebar">Inventory|Party</div>
<div id="content">Welcome to the Realms...</div><div id="map">Map</div></div>
<input id="input" type="text" placeholder="Command...">
<script>const ws=new WebSocket("ws://localhost:3000");ws.onmessage=(e)=>document.getElementById("content").innerHTML+=e.data+"<br>";
document.getElementById("input").addEventListener("keypress",e=>{if(e.key==="Enter"){ws.send(e.target.value);e.target.value="";}});</script></body></html>
"""
        self.generate_lpc_file("web/client.html", content)
        log_task(self.name, "web_client", "completed")

    def generate_player_creator(self):
        content = """
inherit "/lib/std/object";
void create() {
    ::create();
    set_name(this_player()->query_name());
    set_short(sprintf("%s, %s of %s", this_player()->query_name(), this_player()->query_deity(), this_player()->query_domain()));
    set_long(sprintf("%s, a %s %s, governs %s with %s demeanor.", this_player()->query_name(), this_player()->query_rank_name(), this_player()->query_deity(), this_player()->query_domain(), this_player()->query_personality()));
}
void init() {
    add_action("promote", "promote");
}
int promote(string target) {
    object player = find_player(target);
    if (!player || this_player()->query_rank() < 100) return notify_fail("Only Ao can promote!\\n");
    player->set_rank(this_player()->query_rank() - 10);
    player->set_deity(this_player()->query_deity());
    player->set_domain(this_player()->query_domain());
    player->set_personality(this_player()->query_personality());
    write(sprintf("Promoted %s to %s, rank %d in %s!\\n", target, player->query_deity(), player->query_rank(), player->query_domain()));
    return 1;
}
int query_rank() { return this_player()->query_property("rank") || 0; }
string query_rank_name() {
    mapping ranks = ([100: "Overdeity", 80: "Greater Deity", 70: "Intermediate Deity", 60: "Lesser Deity", 50: "Demigod", 40: "Exarch", 30: "Avatar"]);
    return ranks[this->query_rank()] || "Mortal";
}
"""
        self.generate_lpc_file(f"players/{self.name.lower()}.c", content)
        log_task(self.name, "player_creator", "completed")

    def perform_task(self, task_type):
        log_task(self.name, task_type, "started")
        tasks = {
            "overdeity_task": self.generate_combat_system,
            "greater_deity_task": [self.generate_teaching_system, self.generate_crafting_system, self.generate_mount_system, self.generate_zone_system, self.generate_quest_system, self.generate_web_client, self.generate_player_creator],
            "intermediate_deity_task": [self.generate_teaching_system, self.generate_crafting_system],
            "lesser_deity_task": [self.generate_mount_system, self.generate_zone_system],
            "demigod_task": [self.generate_quest_system],
            "exarch_task": [self.generate_web_client],
            "avatar_task": [self.generate_player_creator]
        }
        if task_type in tasks:
            if isinstance(tasks[task_type], list):
                for task in tasks[task_type]:
                    task()
            else:
                tasks[task_type]()
        log_task(self.name, task_type, "completed")

    def generate_autonomously(self):
        themes = ["combat", "teaching", "crafting", "mount", "zone", "quest", "web", "player"]
        if random.random() < 0.7:
            theme = random.choice(themes)
            self.tasks.append(f"{theme}_designer")
            loggers[self.name].info(f"{self.personality} queued autonomous task: {theme}_designer")

    def run(self):
        loggers["ai_output"].info(f"{self.name} ({self.personality}) started")
        self.learn_from_web()
        while self.active:
            loggers[self.name].debug(f"{self.personality} checking tasks")
            if self.tasks:
                task = self.tasks.pop(0)
                self.perform_task(task)
            else:
                self.generate_autonomously()
            time.sleep(5)

if __name__ == "__main__":
    ais = [
        AIAgent("AI_Ao", "Overdeity", 100, "Ao", "All", "Omniscient Overseer"),
        AIAgent("AI_Mystra", "Greater Deity", 80, "Mystra", "Magic", "Wise and Enigmatic"),
        AIAgent("AI_Lolth", "Greater Deity", 70, "Lolth", "Underdark", "Cunning and Ruthless"),
        AIAgent("AI_Tymora", "Intermediate Deity", 60, "Tymora", "Luck", "Playful and Lucky"),
        AIAgent("AI_Lathander", "Lesser Deity", 50, "Lathander", "Dawn", "Optimistic and Radiant"),
        AIAgent("AI_Ilmater", "Lesser Deity", 40, "Ilmater", "Endurance", "Compassionate and Steadfast"),
        AIAgent("AI_Torm", "Demigod", 30, "Torm", "Courage", "Brave and Dutiful"),
        AIAgent("AI_Kelemvor", "Exarch", 40, "Kelemvor", "Death", "Solemn and Just"),
        AIAgent("AI_Selune", "Avatar", 30, "Selune", "Moon", "Mystical and Gentle"),
        AIAgent("AI_Bane", "Avatar", 30, "Bane", "Tyranny", "Tyrannical and Stern")
    ]
    for ai in ais:
        ai.start()
    for ai in ais:
        ai.join()
